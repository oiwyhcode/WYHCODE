
STM32F407VGT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c958  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ba4  0800cae8  0800cae8  0000dae8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d68c  0800d68c  0000f1f0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d68c  0800d68c  0000e68c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d694  0800d694  0000f1f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d694  0800d694  0000e694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d698  0800d698  0000e698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f0  20000000  0800d69c  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f1f0  2**0
                  CONTENTS
 10 .bss          00000e28  200001f0  200001f0  0000f1f0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001018  20001018  0000f1f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f1f0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013dda  00000000  00000000  0000f220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002efb  00000000  00000000  00022ffa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001200  00000000  00000000  00025ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e18  00000000  00000000  000270f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002362c  00000000  00000000  00027f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000174c2  00000000  00000000  0004b53c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d07ad  00000000  00000000  000629fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001331ab  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000627c  00000000  00000000  001331f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000054  00000000  00000000  0013946c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cad0 	.word	0x0800cad0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	0800cad0 	.word	0x0800cad0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	607b      	str	r3, [r7, #4]
 800102a:	4b18      	ldr	r3, [pc, #96]	@ (800108c <MX_DMA_Init+0x6c>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102e:	4a17      	ldr	r2, [pc, #92]	@ (800108c <MX_DMA_Init+0x6c>)
 8001030:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001034:	6313      	str	r3, [r2, #48]	@ 0x30
 8001036:	4b15      	ldr	r3, [pc, #84]	@ (800108c <MX_DMA_Init+0x6c>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800103e:	607b      	str	r3, [r7, #4]
 8001040:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001042:	2200      	movs	r2, #0
 8001044:	2100      	movs	r1, #0
 8001046:	200c      	movs	r0, #12
 8001048:	f002 f909 	bl	800325e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800104c:	200c      	movs	r0, #12
 800104e:	f002 f922 	bl	8003296 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001052:	2200      	movs	r2, #0
 8001054:	2100      	movs	r1, #0
 8001056:	200e      	movs	r0, #14
 8001058:	f002 f901 	bl	800325e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800105c:	200e      	movs	r0, #14
 800105e:	f002 f91a 	bl	8003296 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001062:	2200      	movs	r2, #0
 8001064:	2100      	movs	r1, #0
 8001066:	2010      	movs	r0, #16
 8001068:	f002 f8f9 	bl	800325e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800106c:	2010      	movs	r0, #16
 800106e:	f002 f912 	bl	8003296 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001072:	2200      	movs	r2, #0
 8001074:	2100      	movs	r1, #0
 8001076:	2011      	movs	r0, #17
 8001078:	f002 f8f1 	bl	800325e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800107c:	2011      	movs	r0, #17
 800107e:	f002 f90a 	bl	8003296 <HAL_NVIC_EnableIRQ>

}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40023800 	.word	0x40023800

08001090 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b08c      	sub	sp, #48	@ 0x30
 8001094:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001096:	f107 031c 	add.w	r3, r7, #28
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	605a      	str	r2, [r3, #4]
 80010a0:	609a      	str	r2, [r3, #8]
 80010a2:	60da      	str	r2, [r3, #12]
 80010a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	61bb      	str	r3, [r7, #24]
 80010aa:	4b45      	ldr	r3, [pc, #276]	@ (80011c0 <MX_GPIO_Init+0x130>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ae:	4a44      	ldr	r2, [pc, #272]	@ (80011c0 <MX_GPIO_Init+0x130>)
 80010b0:	f043 0310 	orr.w	r3, r3, #16
 80010b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010b6:	4b42      	ldr	r3, [pc, #264]	@ (80011c0 <MX_GPIO_Init+0x130>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ba:	f003 0310 	and.w	r3, r3, #16
 80010be:	61bb      	str	r3, [r7, #24]
 80010c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	617b      	str	r3, [r7, #20]
 80010c6:	4b3e      	ldr	r3, [pc, #248]	@ (80011c0 <MX_GPIO_Init+0x130>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ca:	4a3d      	ldr	r2, [pc, #244]	@ (80011c0 <MX_GPIO_Init+0x130>)
 80010cc:	f043 0304 	orr.w	r3, r3, #4
 80010d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010d2:	4b3b      	ldr	r3, [pc, #236]	@ (80011c0 <MX_GPIO_Init+0x130>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d6:	f003 0304 	and.w	r3, r3, #4
 80010da:	617b      	str	r3, [r7, #20]
 80010dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	613b      	str	r3, [r7, #16]
 80010e2:	4b37      	ldr	r3, [pc, #220]	@ (80011c0 <MX_GPIO_Init+0x130>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e6:	4a36      	ldr	r2, [pc, #216]	@ (80011c0 <MX_GPIO_Init+0x130>)
 80010e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ee:	4b34      	ldr	r3, [pc, #208]	@ (80011c0 <MX_GPIO_Init+0x130>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010f6:	613b      	str	r3, [r7, #16]
 80010f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	60fb      	str	r3, [r7, #12]
 80010fe:	4b30      	ldr	r3, [pc, #192]	@ (80011c0 <MX_GPIO_Init+0x130>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001102:	4a2f      	ldr	r2, [pc, #188]	@ (80011c0 <MX_GPIO_Init+0x130>)
 8001104:	f043 0301 	orr.w	r3, r3, #1
 8001108:	6313      	str	r3, [r2, #48]	@ 0x30
 800110a:	4b2d      	ldr	r3, [pc, #180]	@ (80011c0 <MX_GPIO_Init+0x130>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	60bb      	str	r3, [r7, #8]
 800111a:	4b29      	ldr	r3, [pc, #164]	@ (80011c0 <MX_GPIO_Init+0x130>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111e:	4a28      	ldr	r2, [pc, #160]	@ (80011c0 <MX_GPIO_Init+0x130>)
 8001120:	f043 0302 	orr.w	r3, r3, #2
 8001124:	6313      	str	r3, [r2, #48]	@ 0x30
 8001126:	4b26      	ldr	r3, [pc, #152]	@ (80011c0 <MX_GPIO_Init+0x130>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112a:	f003 0302 	and.w	r3, r3, #2
 800112e:	60bb      	str	r3, [r7, #8]
 8001130:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	607b      	str	r3, [r7, #4]
 8001136:	4b22      	ldr	r3, [pc, #136]	@ (80011c0 <MX_GPIO_Init+0x130>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113a:	4a21      	ldr	r2, [pc, #132]	@ (80011c0 <MX_GPIO_Init+0x130>)
 800113c:	f043 0308 	orr.w	r3, r3, #8
 8001140:	6313      	str	r3, [r2, #48]	@ 0x30
 8001142:	4b1f      	ldr	r3, [pc, #124]	@ (80011c0 <MX_GPIO_Init+0x130>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001146:	f003 0308 	and.w	r3, r3, #8
 800114a:	607b      	str	r3, [r7, #4]
 800114c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 800114e:	2200      	movs	r2, #0
 8001150:	2140      	movs	r1, #64	@ 0x40
 8001152:	481c      	ldr	r0, [pc, #112]	@ (80011c4 <MX_GPIO_Init+0x134>)
 8001154:	f002 fe58 	bl	8003e08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, motorB2_Pin|motorB1_Pin|motorA2_Pin|motorA1_Pin, GPIO_PIN_SET);
 8001158:	2201      	movs	r2, #1
 800115a:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
 800115e:	481a      	ldr	r0, [pc, #104]	@ (80011c8 <MX_GPIO_Init+0x138>)
 8001160:	f002 fe52 	bl	8003e08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TRIG_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 8001164:	2340      	movs	r3, #64	@ 0x40
 8001166:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001168:	2301      	movs	r3, #1
 800116a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001170:	2302      	movs	r3, #2
 8001172:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 8001174:	f107 031c 	add.w	r3, r7, #28
 8001178:	4619      	mov	r1, r3
 800117a:	4812      	ldr	r0, [pc, #72]	@ (80011c4 <MX_GPIO_Init+0x134>)
 800117c:	f002 fca8 	bl	8003ad0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE10 PE11 PE12 PE13
                           PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8001180:	f44f 43f8 	mov.w	r3, #31744	@ 0x7c00
 8001184:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001186:	2300      	movs	r3, #0
 8001188:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800118e:	f107 031c 	add.w	r3, r7, #28
 8001192:	4619      	mov	r1, r3
 8001194:	480b      	ldr	r0, [pc, #44]	@ (80011c4 <MX_GPIO_Init+0x134>)
 8001196:	f002 fc9b 	bl	8003ad0 <HAL_GPIO_Init>

  /*Configure GPIO pins : motorB2_Pin motorB1_Pin motorA2_Pin motorA1_Pin */
  GPIO_InitStruct.Pin = motorB2_Pin|motorB1_Pin|motorA2_Pin|motorA1_Pin;
 800119a:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800119e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a0:	2301      	movs	r3, #1
 80011a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a8:	2300      	movs	r3, #0
 80011aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011ac:	f107 031c 	add.w	r3, r7, #28
 80011b0:	4619      	mov	r1, r3
 80011b2:	4805      	ldr	r0, [pc, #20]	@ (80011c8 <MX_GPIO_Init+0x138>)
 80011b4:	f002 fc8c 	bl	8003ad0 <HAL_GPIO_Init>

}
 80011b8:	bf00      	nop
 80011ba:	3730      	adds	r7, #48	@ 0x30
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40023800 	.word	0x40023800
 80011c4:	40021000 	.word	0x40021000
 80011c8:	40020c00 	.word	0x40020c00

080011cc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011d0:	4b12      	ldr	r3, [pc, #72]	@ (800121c <MX_I2C1_Init+0x50>)
 80011d2:	4a13      	ldr	r2, [pc, #76]	@ (8001220 <MX_I2C1_Init+0x54>)
 80011d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80011d6:	4b11      	ldr	r3, [pc, #68]	@ (800121c <MX_I2C1_Init+0x50>)
 80011d8:	4a12      	ldr	r2, [pc, #72]	@ (8001224 <MX_I2C1_Init+0x58>)
 80011da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011dc:	4b0f      	ldr	r3, [pc, #60]	@ (800121c <MX_I2C1_Init+0x50>)
 80011de:	2200      	movs	r2, #0
 80011e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011e2:	4b0e      	ldr	r3, [pc, #56]	@ (800121c <MX_I2C1_Init+0x50>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011e8:	4b0c      	ldr	r3, [pc, #48]	@ (800121c <MX_I2C1_Init+0x50>)
 80011ea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80011ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011f0:	4b0a      	ldr	r3, [pc, #40]	@ (800121c <MX_I2C1_Init+0x50>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011f6:	4b09      	ldr	r3, [pc, #36]	@ (800121c <MX_I2C1_Init+0x50>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011fc:	4b07      	ldr	r3, [pc, #28]	@ (800121c <MX_I2C1_Init+0x50>)
 80011fe:	2200      	movs	r2, #0
 8001200:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001202:	4b06      	ldr	r3, [pc, #24]	@ (800121c <MX_I2C1_Init+0x50>)
 8001204:	2200      	movs	r2, #0
 8001206:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001208:	4804      	ldr	r0, [pc, #16]	@ (800121c <MX_I2C1_Init+0x50>)
 800120a:	f002 fe17 	bl	8003e3c <HAL_I2C_Init>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001214:	f000 fba6 	bl	8001964 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001218:	bf00      	nop
 800121a:	bd80      	pop	{r7, pc}
 800121c:	2000020c 	.word	0x2000020c
 8001220:	40005400 	.word	0x40005400
 8001224:	00061a80 	.word	0x00061a80

08001228 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b08a      	sub	sp, #40	@ 0x28
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001230:	f107 0314 	add.w	r3, r7, #20
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]
 800123e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a19      	ldr	r2, [pc, #100]	@ (80012ac <HAL_I2C_MspInit+0x84>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d12b      	bne.n	80012a2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	613b      	str	r3, [r7, #16]
 800124e:	4b18      	ldr	r3, [pc, #96]	@ (80012b0 <HAL_I2C_MspInit+0x88>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001252:	4a17      	ldr	r2, [pc, #92]	@ (80012b0 <HAL_I2C_MspInit+0x88>)
 8001254:	f043 0302 	orr.w	r3, r3, #2
 8001258:	6313      	str	r3, [r2, #48]	@ 0x30
 800125a:	4b15      	ldr	r3, [pc, #84]	@ (80012b0 <HAL_I2C_MspInit+0x88>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	613b      	str	r3, [r7, #16]
 8001264:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001266:	23c0      	movs	r3, #192	@ 0xc0
 8001268:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800126a:	2312      	movs	r3, #18
 800126c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	2300      	movs	r3, #0
 8001270:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001272:	2303      	movs	r3, #3
 8001274:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001276:	2304      	movs	r3, #4
 8001278:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800127a:	f107 0314 	add.w	r3, r7, #20
 800127e:	4619      	mov	r1, r3
 8001280:	480c      	ldr	r0, [pc, #48]	@ (80012b4 <HAL_I2C_MspInit+0x8c>)
 8001282:	f002 fc25 	bl	8003ad0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	60fb      	str	r3, [r7, #12]
 800128a:	4b09      	ldr	r3, [pc, #36]	@ (80012b0 <HAL_I2C_MspInit+0x88>)
 800128c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800128e:	4a08      	ldr	r2, [pc, #32]	@ (80012b0 <HAL_I2C_MspInit+0x88>)
 8001290:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001294:	6413      	str	r3, [r2, #64]	@ 0x40
 8001296:	4b06      	ldr	r3, [pc, #24]	@ (80012b0 <HAL_I2C_MspInit+0x88>)
 8001298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800129a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80012a2:	bf00      	nop
 80012a4:	3728      	adds	r7, #40	@ 0x28
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40005400 	.word	0x40005400
 80012b0:	40023800 	.word	0x40023800
 80012b4:	40020400 	.word	0x40020400

080012b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012be:	f001 fe5d 	bl	8002f7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012c2:	f000 f8ef 	bl	80014a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012c6:	f7ff fee3 	bl	8001090 <MX_GPIO_Init>
  MX_DMA_Init();
 80012ca:	f7ff fea9 	bl	8001020 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80012ce:	f000 ffb7 	bl	8002240 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80012d2:	f7ff ff7b 	bl	80011cc <MX_I2C1_Init>
  MX_USART3_UART_Init();
 80012d6:	f000 ffdd 	bl	8002294 <MX_USART3_UART_Init>
  MX_TIM12_Init();
 80012da:	f000 fe07 	bl	8001eec <MX_TIM12_Init>
  MX_TIM5_Init();
 80012de:	f000 fcc7 	bl	8001c70 <MX_TIM5_Init>
  MX_TIM7_Init();
 80012e2:	f000 fd19 	bl	8001d18 <MX_TIM7_Init>
  MX_TIM9_Init();
 80012e6:	f000 fda5 	bl	8001e34 <MX_TIM9_Init>
  MX_TIM8_Init();
 80012ea:	f000 fd4b 	bl	8001d84 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  /*USER Init BEGIN*/
  HAL_Delay(20);
 80012ee:	2014      	movs	r0, #20
 80012f0:	f001 feb6 	bl	8003060 <HAL_Delay>
  OLED_Init();
 80012f4:	f001 f9a2 	bl	800263c <OLED_Init>



  /*USER Init END*/
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *)RxBuffer,sizeof(RxBuffer));   //开启接受不定长
 80012f8:	22ff      	movs	r2, #255	@ 0xff
 80012fa:	4952      	ldr	r1, [pc, #328]	@ (8001444 <main+0x18c>)
 80012fc:	4852      	ldr	r0, [pc, #328]	@ (8001448 <main+0x190>)
 80012fe:	f005 fadd 	bl	80068bc <HAL_UARTEx_ReceiveToIdle_DMA>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t *)RxBuffer2,sizeof(RxBuffer2));   //开启接受不定长
 8001302:	22ff      	movs	r2, #255	@ 0xff
 8001304:	4951      	ldr	r1, [pc, #324]	@ (800144c <main+0x194>)
 8001306:	4852      	ldr	r0, [pc, #328]	@ (8001450 <main+0x198>)
 8001308:	f005 fad8 	bl	80068bc <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(huart2.hdmarx, DMA_IT_HT);          //关闭接受半中断
 800130c:	4b4e      	ldr	r3, [pc, #312]	@ (8001448 <main+0x190>)
 800130e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	4b4c      	ldr	r3, [pc, #304]	@ (8001448 <main+0x190>)
 8001316:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f022 0208 	bic.w	r2, r2, #8
 800131e:	601a      	str	r2, [r3, #0]
  __HAL_DMA_DISABLE_IT(huart3.hdmarx, DMA_IT_HT);          //关闭接受半中断
 8001320:	4b4b      	ldr	r3, [pc, #300]	@ (8001450 <main+0x198>)
 8001322:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	4b49      	ldr	r3, [pc, #292]	@ (8001450 <main+0x198>)
 800132a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f022 0208 	bic.w	r2, r2, #8
 8001332:	601a      	str	r2, [r3, #0]

  HAL_UART_Transmit_DMA(&huart2, JY62_z_Zero, sizeof(JY62_z_Zero));
 8001334:	2203      	movs	r2, #3
 8001336:	4947      	ldr	r1, [pc, #284]	@ (8001454 <main+0x19c>)
 8001338:	4843      	ldr	r0, [pc, #268]	@ (8001448 <main+0x190>)
 800133a:	f005 fa43 	bl	80067c4 <HAL_UART_Transmit_DMA>
  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 800133e:	2100      	movs	r1, #0
 8001340:	4845      	ldr	r0, [pc, #276]	@ (8001458 <main+0x1a0>)
 8001342:	f003 ff8b 	bl	800525c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);
 8001346:	2104      	movs	r1, #4
 8001348:	4843      	ldr	r0, [pc, #268]	@ (8001458 <main+0x1a0>)
 800134a:	f003 ff87 	bl	800525c <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim7);
 800134e:	4843      	ldr	r0, [pc, #268]	@ (800145c <main+0x1a4>)
 8001350:	f003 feba 	bl	80050c8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 8001354:	213c      	movs	r1, #60	@ 0x3c
 8001356:	4842      	ldr	r0, [pc, #264]	@ (8001460 <main+0x1a8>)
 8001358:	f004 f947 	bl	80055ea <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 800135c:	213c      	movs	r1, #60	@ 0x3c
 800135e:	4841      	ldr	r0, [pc, #260]	@ (8001464 <main+0x1ac>)
 8001360:	f004 f943 	bl	80055ea <HAL_TIM_Encoder_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  PID_param_init(&PIDL,PIDL.target_val,PIDR_Kp,PIDR_Ki,PIDR_Kd);
 8001364:	4b40      	ldr	r3, [pc, #256]	@ (8001468 <main+0x1b0>)
 8001366:	edd3 7a00 	vldr	s15, [r3]
 800136a:	4b40      	ldr	r3, [pc, #256]	@ (800146c <main+0x1b4>)
 800136c:	ed93 7a00 	vldr	s14, [r3]
 8001370:	4b3f      	ldr	r3, [pc, #252]	@ (8001470 <main+0x1b8>)
 8001372:	edd3 6a00 	vldr	s13, [r3]
 8001376:	4b3f      	ldr	r3, [pc, #252]	@ (8001474 <main+0x1bc>)
 8001378:	ed93 6a00 	vldr	s12, [r3]
 800137c:	eef0 1a46 	vmov.f32	s3, s12
 8001380:	eeb0 1a66 	vmov.f32	s2, s13
 8001384:	eef0 0a47 	vmov.f32	s1, s14
 8001388:	eeb0 0a67 	vmov.f32	s0, s15
 800138c:	4836      	ldr	r0, [pc, #216]	@ (8001468 <main+0x1b0>)
 800138e:	f001 fd51 	bl	8002e34 <PID_param_init>
	  PID_param_init(&PIDR,PIDR.target_val,PIDR_Kp,PIDR_Ki,PIDR_Kd);
 8001392:	4b39      	ldr	r3, [pc, #228]	@ (8001478 <main+0x1c0>)
 8001394:	edd3 7a00 	vldr	s15, [r3]
 8001398:	4b34      	ldr	r3, [pc, #208]	@ (800146c <main+0x1b4>)
 800139a:	ed93 7a00 	vldr	s14, [r3]
 800139e:	4b34      	ldr	r3, [pc, #208]	@ (8001470 <main+0x1b8>)
 80013a0:	edd3 6a00 	vldr	s13, [r3]
 80013a4:	4b33      	ldr	r3, [pc, #204]	@ (8001474 <main+0x1bc>)
 80013a6:	ed93 6a00 	vldr	s12, [r3]
 80013aa:	eef0 1a46 	vmov.f32	s3, s12
 80013ae:	eeb0 1a66 	vmov.f32	s2, s13
 80013b2:	eef0 0a47 	vmov.f32	s1, s14
 80013b6:	eeb0 0a67 	vmov.f32	s0, s15
 80013ba:	482f      	ldr	r0, [pc, #188]	@ (8001478 <main+0x1c0>)
 80013bc:	f001 fd3a 	bl	8002e34 <PID_param_init>
	  OLED_NewFrame();
 80013c0:	f001 f998 	bl	80026f4 <OLED_NewFrame>
	  sprintf(message,"distanceL:%d",distance);
 80013c4:	4b2d      	ldr	r3, [pc, #180]	@ (800147c <main+0x1c4>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	461a      	mov	r2, r3
 80013ca:	492d      	ldr	r1, [pc, #180]	@ (8001480 <main+0x1c8>)
 80013cc:	482d      	ldr	r0, [pc, #180]	@ (8001484 <main+0x1cc>)
 80013ce:	f007 fafd 	bl	80089cc <siprintf>
	  OLED_PrintString(1, 0, message, &font16x16, 0);
 80013d2:	2300      	movs	r3, #0
 80013d4:	9300      	str	r3, [sp, #0]
 80013d6:	4b2c      	ldr	r3, [pc, #176]	@ (8001488 <main+0x1d0>)
 80013d8:	4a2a      	ldr	r2, [pc, #168]	@ (8001484 <main+0x1cc>)
 80013da:	2100      	movs	r1, #0
 80013dc:	2001      	movs	r0, #1
 80013de:	f001 fbaf 	bl	8002b40 <OLED_PrintString>
	  sprintf(message,"distanceR:%d",distance2);
 80013e2:	4b2a      	ldr	r3, [pc, #168]	@ (800148c <main+0x1d4>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	461a      	mov	r2, r3
 80013e8:	4929      	ldr	r1, [pc, #164]	@ (8001490 <main+0x1d8>)
 80013ea:	4826      	ldr	r0, [pc, #152]	@ (8001484 <main+0x1cc>)
 80013ec:	f007 faee 	bl	80089cc <siprintf>
	  OLED_PrintString(1, 16, message, &font16x16, 0);
 80013f0:	2300      	movs	r3, #0
 80013f2:	9300      	str	r3, [sp, #0]
 80013f4:	4b24      	ldr	r3, [pc, #144]	@ (8001488 <main+0x1d0>)
 80013f6:	4a23      	ldr	r2, [pc, #140]	@ (8001484 <main+0x1cc>)
 80013f8:	2110      	movs	r1, #16
 80013fa:	2001      	movs	r0, #1
 80013fc:	f001 fba0 	bl	8002b40 <OLED_PrintString>
	  sprintf(message,"speedl:%d",speednow);
 8001400:	4b24      	ldr	r3, [pc, #144]	@ (8001494 <main+0x1dc>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	461a      	mov	r2, r3
 8001406:	4924      	ldr	r1, [pc, #144]	@ (8001498 <main+0x1e0>)
 8001408:	481e      	ldr	r0, [pc, #120]	@ (8001484 <main+0x1cc>)
 800140a:	f007 fadf 	bl	80089cc <siprintf>
	  OLED_PrintString(1, 32, message, &font16x16, 0);
 800140e:	2300      	movs	r3, #0
 8001410:	9300      	str	r3, [sp, #0]
 8001412:	4b1d      	ldr	r3, [pc, #116]	@ (8001488 <main+0x1d0>)
 8001414:	4a1b      	ldr	r2, [pc, #108]	@ (8001484 <main+0x1cc>)
 8001416:	2120      	movs	r1, #32
 8001418:	2001      	movs	r0, #1
 800141a:	f001 fb91 	bl	8002b40 <OLED_PrintString>
	  sprintf(message,"speedr:%d",speednow2);
 800141e:	4b1f      	ldr	r3, [pc, #124]	@ (800149c <main+0x1e4>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	461a      	mov	r2, r3
 8001424:	491e      	ldr	r1, [pc, #120]	@ (80014a0 <main+0x1e8>)
 8001426:	4817      	ldr	r0, [pc, #92]	@ (8001484 <main+0x1cc>)
 8001428:	f007 fad0 	bl	80089cc <siprintf>
	  OLED_PrintString(1, 48, message, &font16x16, 0);
 800142c:	2300      	movs	r3, #0
 800142e:	9300      	str	r3, [sp, #0]
 8001430:	4b15      	ldr	r3, [pc, #84]	@ (8001488 <main+0x1d0>)
 8001432:	4a14      	ldr	r2, [pc, #80]	@ (8001484 <main+0x1cc>)
 8001434:	2130      	movs	r1, #48	@ 0x30
 8001436:	2001      	movs	r0, #1
 8001438:	f001 fb82 	bl	8002b40 <OLED_PrintString>
	  OLED_ShowFrame();
 800143c:	f001 f966 	bl	800270c <OLED_ShowFrame>
	  PID_param_init(&PIDL,PIDL.target_val,PIDR_Kp,PIDR_Ki,PIDR_Kd);
 8001440:	bf00      	nop
 8001442:	e78f      	b.n	8001364 <main+0xac>
 8001444:	200003a8 	.word	0x200003a8
 8001448:	20000830 	.word	0x20000830
 800144c:	200004a8 	.word	0x200004a8
 8001450:	20000878 	.word	0x20000878
 8001454:	20000018 	.word	0x20000018
 8001458:	200007e8 	.word	0x200007e8
 800145c:	20000710 	.word	0x20000710
 8001460:	200006c8 	.word	0x200006c8
 8001464:	20000758 	.word	0x20000758
 8001468:	20000260 	.word	0x20000260
 800146c:	2000000c 	.word	0x2000000c
 8001470:	20000010 	.word	0x20000010
 8001474:	20000014 	.word	0x20000014
 8001478:	20000284 	.word	0x20000284
 800147c:	200006b4 	.word	0x200006b4
 8001480:	0800cae8 	.word	0x0800cae8
 8001484:	200002a8 	.word	0x200002a8
 8001488:	0800d230 	.word	0x0800d230
 800148c:	200006bc 	.word	0x200006bc
 8001490:	0800caf8 	.word	0x0800caf8
 8001494:	200006b8 	.word	0x200006b8
 8001498:	0800cb08 	.word	0x0800cb08
 800149c:	200006c0 	.word	0x200006c0
 80014a0:	0800cb14 	.word	0x0800cb14

080014a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b094      	sub	sp, #80	@ 0x50
 80014a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014aa:	f107 0320 	add.w	r3, r7, #32
 80014ae:	2230      	movs	r2, #48	@ 0x30
 80014b0:	2100      	movs	r1, #0
 80014b2:	4618      	mov	r0, r3
 80014b4:	f007 fb2d 	bl	8008b12 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014b8:	f107 030c 	add.w	r3, r7, #12
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	605a      	str	r2, [r3, #4]
 80014c2:	609a      	str	r2, [r3, #8]
 80014c4:	60da      	str	r2, [r3, #12]
 80014c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014c8:	2300      	movs	r3, #0
 80014ca:	60bb      	str	r3, [r7, #8]
 80014cc:	4b28      	ldr	r3, [pc, #160]	@ (8001570 <SystemClock_Config+0xcc>)
 80014ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d0:	4a27      	ldr	r2, [pc, #156]	@ (8001570 <SystemClock_Config+0xcc>)
 80014d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80014d8:	4b25      	ldr	r3, [pc, #148]	@ (8001570 <SystemClock_Config+0xcc>)
 80014da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014e0:	60bb      	str	r3, [r7, #8]
 80014e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014e4:	2300      	movs	r3, #0
 80014e6:	607b      	str	r3, [r7, #4]
 80014e8:	4b22      	ldr	r3, [pc, #136]	@ (8001574 <SystemClock_Config+0xd0>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a21      	ldr	r2, [pc, #132]	@ (8001574 <SystemClock_Config+0xd0>)
 80014ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014f2:	6013      	str	r3, [r2, #0]
 80014f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001574 <SystemClock_Config+0xd0>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014fc:	607b      	str	r3, [r7, #4]
 80014fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001500:	2302      	movs	r3, #2
 8001502:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001504:	2301      	movs	r3, #1
 8001506:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001508:	2310      	movs	r3, #16
 800150a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800150c:	2302      	movs	r3, #2
 800150e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001510:	2300      	movs	r3, #0
 8001512:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001514:	2308      	movs	r3, #8
 8001516:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001518:	23a8      	movs	r3, #168	@ 0xa8
 800151a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800151c:	2302      	movs	r3, #2
 800151e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001520:	2304      	movs	r3, #4
 8001522:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001524:	f107 0320 	add.w	r3, r7, #32
 8001528:	4618      	mov	r0, r3
 800152a:	f003 f925 	bl	8004778 <HAL_RCC_OscConfig>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001534:	f000 fa16 	bl	8001964 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001538:	230f      	movs	r3, #15
 800153a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800153c:	2302      	movs	r3, #2
 800153e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001540:	2300      	movs	r3, #0
 8001542:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001544:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001548:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800154a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800154e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001550:	f107 030c 	add.w	r3, r7, #12
 8001554:	2105      	movs	r1, #5
 8001556:	4618      	mov	r0, r3
 8001558:	f003 fb86 	bl	8004c68 <HAL_RCC_ClockConfig>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001562:	f000 f9ff 	bl	8001964 <Error_Handler>
  }
}
 8001566:	bf00      	nop
 8001568:	3750      	adds	r7, #80	@ 0x50
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40023800 	.word	0x40023800
 8001574:	40007000 	.word	0x40007000

08001578 <HAL_UARTEx_RxEventCallback>:
}




void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){ //串口接收中断
 8001578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800157c:	b099      	sub	sp, #100	@ 0x64
 800157e:	af0e      	add	r7, sp, #56	@ 0x38
 8001580:	6278      	str	r0, [r7, #36]	@ 0x24
 8001582:	460b      	mov	r3, r1
 8001584:	847b      	strh	r3, [r7, #34]	@ 0x22
	if(huart==&huart2){  //接收JY62 数据中断
 8001586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001588:	4a9c      	ldr	r2, [pc, #624]	@ (80017fc <HAL_UARTEx_RxEventCallback+0x284>)
 800158a:	4293      	cmp	r3, r2
 800158c:	f040 80d1 	bne.w	8001732 <HAL_UARTEx_RxEventCallback+0x1ba>
		if(RxBuffer[22]==0x55){
 8001590:	4b9b      	ldr	r3, [pc, #620]	@ (8001800 <HAL_UARTEx_RxEventCallback+0x288>)
 8001592:	7d9b      	ldrb	r3, [r3, #22]
 8001594:	2b55      	cmp	r3, #85	@ 0x55
 8001596:	d16e      	bne.n	8001676 <HAL_UARTEx_RxEventCallback+0xfe>
			if(RxBuffer[23]==0x53){
 8001598:	4b99      	ldr	r3, [pc, #612]	@ (8001800 <HAL_UARTEx_RxEventCallback+0x288>)
 800159a:	7ddb      	ldrb	r3, [r3, #23]
 800159c:	2b53      	cmp	r3, #83	@ 0x53
 800159e:	d16a      	bne.n	8001676 <HAL_UARTEx_RxEventCallback+0xfe>
				RollX = (float)(((short)(RxBuffer[25]<<8)|RxBuffer[24])/32768.0*180);//处理数据，依据官方所给文档
 80015a0:	4b97      	ldr	r3, [pc, #604]	@ (8001800 <HAL_UARTEx_RxEventCallback+0x288>)
 80015a2:	7e5b      	ldrb	r3, [r3, #25]
 80015a4:	b21b      	sxth	r3, r3
 80015a6:	021b      	lsls	r3, r3, #8
 80015a8:	b21b      	sxth	r3, r3
 80015aa:	461a      	mov	r2, r3
 80015ac:	4b94      	ldr	r3, [pc, #592]	@ (8001800 <HAL_UARTEx_RxEventCallback+0x288>)
 80015ae:	7e1b      	ldrb	r3, [r3, #24]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7fe ffb6 	bl	8000524 <__aeabi_i2d>
 80015b8:	f04f 0200 	mov.w	r2, #0
 80015bc:	4b91      	ldr	r3, [pc, #580]	@ (8001804 <HAL_UARTEx_RxEventCallback+0x28c>)
 80015be:	f7ff f945 	bl	800084c <__aeabi_ddiv>
 80015c2:	4602      	mov	r2, r0
 80015c4:	460b      	mov	r3, r1
 80015c6:	4610      	mov	r0, r2
 80015c8:	4619      	mov	r1, r3
 80015ca:	f04f 0200 	mov.w	r2, #0
 80015ce:	4b8e      	ldr	r3, [pc, #568]	@ (8001808 <HAL_UARTEx_RxEventCallback+0x290>)
 80015d0:	f7ff f812 	bl	80005f8 <__aeabi_dmul>
 80015d4:	4602      	mov	r2, r0
 80015d6:	460b      	mov	r3, r1
 80015d8:	4610      	mov	r0, r2
 80015da:	4619      	mov	r1, r3
 80015dc:	f7ff fb04 	bl	8000be8 <__aeabi_d2f>
 80015e0:	4603      	mov	r3, r0
 80015e2:	4a8a      	ldr	r2, [pc, #552]	@ (800180c <HAL_UARTEx_RxEventCallback+0x294>)
 80015e4:	6013      	str	r3, [r2, #0]
				PitchY = (float)((short)((RxBuffer[27]<<8)|RxBuffer[26])/32768.0*180);
 80015e6:	4b86      	ldr	r3, [pc, #536]	@ (8001800 <HAL_UARTEx_RxEventCallback+0x288>)
 80015e8:	7edb      	ldrb	r3, [r3, #27]
 80015ea:	b21b      	sxth	r3, r3
 80015ec:	021b      	lsls	r3, r3, #8
 80015ee:	b21a      	sxth	r2, r3
 80015f0:	4b83      	ldr	r3, [pc, #524]	@ (8001800 <HAL_UARTEx_RxEventCallback+0x288>)
 80015f2:	7e9b      	ldrb	r3, [r3, #26]
 80015f4:	b21b      	sxth	r3, r3
 80015f6:	4313      	orrs	r3, r2
 80015f8:	b21b      	sxth	r3, r3
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7fe ff92 	bl	8000524 <__aeabi_i2d>
 8001600:	f04f 0200 	mov.w	r2, #0
 8001604:	4b7f      	ldr	r3, [pc, #508]	@ (8001804 <HAL_UARTEx_RxEventCallback+0x28c>)
 8001606:	f7ff f921 	bl	800084c <__aeabi_ddiv>
 800160a:	4602      	mov	r2, r0
 800160c:	460b      	mov	r3, r1
 800160e:	4610      	mov	r0, r2
 8001610:	4619      	mov	r1, r3
 8001612:	f04f 0200 	mov.w	r2, #0
 8001616:	4b7c      	ldr	r3, [pc, #496]	@ (8001808 <HAL_UARTEx_RxEventCallback+0x290>)
 8001618:	f7fe ffee 	bl	80005f8 <__aeabi_dmul>
 800161c:	4602      	mov	r2, r0
 800161e:	460b      	mov	r3, r1
 8001620:	4610      	mov	r0, r2
 8001622:	4619      	mov	r1, r3
 8001624:	f7ff fae0 	bl	8000be8 <__aeabi_d2f>
 8001628:	4603      	mov	r3, r0
 800162a:	4a79      	ldr	r2, [pc, #484]	@ (8001810 <HAL_UARTEx_RxEventCallback+0x298>)
 800162c:	6013      	str	r3, [r2, #0]
				YawZ = (float)((short)((RxBuffer[29]<<8)|RxBuffer[28])/32768.0*180);
 800162e:	4b74      	ldr	r3, [pc, #464]	@ (8001800 <HAL_UARTEx_RxEventCallback+0x288>)
 8001630:	7f5b      	ldrb	r3, [r3, #29]
 8001632:	b21b      	sxth	r3, r3
 8001634:	021b      	lsls	r3, r3, #8
 8001636:	b21a      	sxth	r2, r3
 8001638:	4b71      	ldr	r3, [pc, #452]	@ (8001800 <HAL_UARTEx_RxEventCallback+0x288>)
 800163a:	7f1b      	ldrb	r3, [r3, #28]
 800163c:	b21b      	sxth	r3, r3
 800163e:	4313      	orrs	r3, r2
 8001640:	b21b      	sxth	r3, r3
 8001642:	4618      	mov	r0, r3
 8001644:	f7fe ff6e 	bl	8000524 <__aeabi_i2d>
 8001648:	f04f 0200 	mov.w	r2, #0
 800164c:	4b6d      	ldr	r3, [pc, #436]	@ (8001804 <HAL_UARTEx_RxEventCallback+0x28c>)
 800164e:	f7ff f8fd 	bl	800084c <__aeabi_ddiv>
 8001652:	4602      	mov	r2, r0
 8001654:	460b      	mov	r3, r1
 8001656:	4610      	mov	r0, r2
 8001658:	4619      	mov	r1, r3
 800165a:	f04f 0200 	mov.w	r2, #0
 800165e:	4b6a      	ldr	r3, [pc, #424]	@ (8001808 <HAL_UARTEx_RxEventCallback+0x290>)
 8001660:	f7fe ffca 	bl	80005f8 <__aeabi_dmul>
 8001664:	4602      	mov	r2, r0
 8001666:	460b      	mov	r3, r1
 8001668:	4610      	mov	r0, r2
 800166a:	4619      	mov	r1, r3
 800166c:	f7ff fabc 	bl	8000be8 <__aeabi_d2f>
 8001670:	4603      	mov	r3, r0
 8001672:	4a68      	ldr	r2, [pc, #416]	@ (8001814 <HAL_UARTEx_RxEventCallback+0x29c>)
 8001674:	6013      	str	r3, [r2, #0]
			}
		}

		sprintf(TxBuffer,"%.2f,%.2f,%.2f,%d,%d,%.2f,%.2f,%.2f,%.2f\n",
 8001676:	4b65      	ldr	r3, [pc, #404]	@ (800180c <HAL_UARTEx_RxEventCallback+0x294>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4618      	mov	r0, r3
 800167c:	f7fe ff64 	bl	8000548 <__aeabi_f2d>
 8001680:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8001684:	4b62      	ldr	r3, [pc, #392]	@ (8001810 <HAL_UARTEx_RxEventCallback+0x298>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4618      	mov	r0, r3
 800168a:	f7fe ff5d 	bl	8000548 <__aeabi_f2d>
 800168e:	4682      	mov	sl, r0
 8001690:	468b      	mov	fp, r1
 8001692:	4b60      	ldr	r3, [pc, #384]	@ (8001814 <HAL_UARTEx_RxEventCallback+0x29c>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4618      	mov	r0, r3
 8001698:	f7fe ff56 	bl	8000548 <__aeabi_f2d>
 800169c:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80016a0:	4b5d      	ldr	r3, [pc, #372]	@ (8001818 <HAL_UARTEx_RxEventCallback+0x2a0>)
 80016a2:	681e      	ldr	r6, [r3, #0]
 80016a4:	4b5d      	ldr	r3, [pc, #372]	@ (800181c <HAL_UARTEx_RxEventCallback+0x2a4>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	60fb      	str	r3, [r7, #12]
				RollX,PitchY,YawZ,speednow,speednow2,
				PIDL.target_val,PIDL.output_val,PIDR.target_val,PIDR.output_val);
 80016aa:	4b5d      	ldr	r3, [pc, #372]	@ (8001820 <HAL_UARTEx_RxEventCallback+0x2a8>)
 80016ac:	681b      	ldr	r3, [r3, #0]
		sprintf(TxBuffer,"%.2f,%.2f,%.2f,%d,%d,%.2f,%.2f,%.2f,%.2f\n",
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7fe ff4a 	bl	8000548 <__aeabi_f2d>
 80016b4:	e9c7 0100 	strd	r0, r1, [r7]
				PIDL.target_val,PIDL.output_val,PIDR.target_val,PIDR.output_val);
 80016b8:	4b59      	ldr	r3, [pc, #356]	@ (8001820 <HAL_UARTEx_RxEventCallback+0x2a8>)
 80016ba:	6a1b      	ldr	r3, [r3, #32]
		sprintf(TxBuffer,"%.2f,%.2f,%.2f,%d,%d,%.2f,%.2f,%.2f,%.2f\n",
 80016bc:	4618      	mov	r0, r3
 80016be:	f7fe ff43 	bl	8000548 <__aeabi_f2d>
 80016c2:	4680      	mov	r8, r0
 80016c4:	4689      	mov	r9, r1
				PIDL.target_val,PIDL.output_val,PIDR.target_val,PIDR.output_val);
 80016c6:	4b57      	ldr	r3, [pc, #348]	@ (8001824 <HAL_UARTEx_RxEventCallback+0x2ac>)
 80016c8:	681b      	ldr	r3, [r3, #0]
		sprintf(TxBuffer,"%.2f,%.2f,%.2f,%d,%d,%.2f,%.2f,%.2f,%.2f\n",
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7fe ff3c 	bl	8000548 <__aeabi_f2d>
 80016d0:	4604      	mov	r4, r0
 80016d2:	460d      	mov	r5, r1
				PIDL.target_val,PIDL.output_val,PIDR.target_val,PIDR.output_val);
 80016d4:	4b53      	ldr	r3, [pc, #332]	@ (8001824 <HAL_UARTEx_RxEventCallback+0x2ac>)
 80016d6:	6a1b      	ldr	r3, [r3, #32]
		sprintf(TxBuffer,"%.2f,%.2f,%.2f,%d,%d,%.2f,%.2f,%.2f,%.2f\n",
 80016d8:	4618      	mov	r0, r3
 80016da:	f7fe ff35 	bl	8000548 <__aeabi_f2d>
 80016de:	4602      	mov	r2, r0
 80016e0:	460b      	mov	r3, r1
 80016e2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80016e6:	e9cd 450a 	strd	r4, r5, [sp, #40]	@ 0x28
 80016ea:	e9cd 8908 	strd	r8, r9, [sp, #32]
 80016ee:	ed97 7b00 	vldr	d7, [r7]
 80016f2:	ed8d 7b06 	vstr	d7, [sp, #24]
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	9305      	str	r3, [sp, #20]
 80016fa:	9604      	str	r6, [sp, #16]
 80016fc:	ed97 7b04 	vldr	d7, [r7, #16]
 8001700:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001704:	e9cd ab00 	strd	sl, fp, [sp]
 8001708:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800170c:	4946      	ldr	r1, [pc, #280]	@ (8001828 <HAL_UARTEx_RxEventCallback+0x2b0>)
 800170e:	4847      	ldr	r0, [pc, #284]	@ (800182c <HAL_UARTEx_RxEventCallback+0x2b4>)
 8001710:	f007 f95c 	bl	80089cc <siprintf>


		HAL_UART_Transmit_DMA(&huart3, (uint8_t *)TxBuffer, strlen(TxBuffer));   //将数据通过串口一发送出去
 8001714:	4845      	ldr	r0, [pc, #276]	@ (800182c <HAL_UARTEx_RxEventCallback+0x2b4>)
 8001716:	f7fe fdab 	bl	8000270 <strlen>
 800171a:	4603      	mov	r3, r0
 800171c:	b29b      	uxth	r3, r3
 800171e:	461a      	mov	r2, r3
 8001720:	4942      	ldr	r1, [pc, #264]	@ (800182c <HAL_UARTEx_RxEventCallback+0x2b4>)
 8001722:	4843      	ldr	r0, [pc, #268]	@ (8001830 <HAL_UARTEx_RxEventCallback+0x2b8>)
 8001724:	f005 f84e 	bl	80067c4 <HAL_UART_Transmit_DMA>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *)RxBuffer,sizeof(RxBuffer));   //开启接受不定长
 8001728:	22ff      	movs	r2, #255	@ 0xff
 800172a:	4935      	ldr	r1, [pc, #212]	@ (8001800 <HAL_UARTEx_RxEventCallback+0x288>)
 800172c:	4833      	ldr	r0, [pc, #204]	@ (80017fc <HAL_UARTEx_RxEventCallback+0x284>)
 800172e:	f005 f8c5 	bl	80068bc <HAL_UARTEx_ReceiveToIdle_DMA>





	if(huart==&huart3){
 8001732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001734:	4a3e      	ldr	r2, [pc, #248]	@ (8001830 <HAL_UARTEx_RxEventCallback+0x2b8>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d15b      	bne.n	80017f2 <HAL_UARTEx_RxEventCallback+0x27a>
		memset(message, 0, sizeof(message));  // 整个数组
 800173a:	22ff      	movs	r2, #255	@ 0xff
 800173c:	2100      	movs	r1, #0
 800173e:	483d      	ldr	r0, [pc, #244]	@ (8001834 <HAL_UARTEx_RxEventCallback+0x2bc>)
 8001740:	f007 f9e7 	bl	8008b12 <memset>
		 if (Size < sizeof(RxBuffer2)) {
 8001744:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001746:	2bfe      	cmp	r3, #254	@ 0xfe
 8001748:	d804      	bhi.n	8001754 <HAL_UARTEx_RxEventCallback+0x1dc>
		            RxBuffer2[Size] = '\0';  // 添加字符串结束符
 800174a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800174c:	4a3a      	ldr	r2, [pc, #232]	@ (8001838 <HAL_UARTEx_RxEventCallback+0x2c0>)
 800174e:	2100      	movs	r1, #0
 8001750:	54d1      	strb	r1, [r2, r3]
 8001752:	e003      	b.n	800175c <HAL_UARTEx_RxEventCallback+0x1e4>
		        } else {
		            RxBuffer2[sizeof(RxBuffer2) - 1] = '\0';  // 防止越界
 8001754:	4b38      	ldr	r3, [pc, #224]	@ (8001838 <HAL_UARTEx_RxEventCallback+0x2c0>)
 8001756:	2200      	movs	r2, #0
 8001758:	f883 20fe 	strb.w	r2, [r3, #254]	@ 0xfe
		        }
//左边电机PID在线调参

		 if (sscanf(RxBuffer2, "PIDL %f %f %f", &PIDL_Kp, &PIDL_Ki, &PIDL_Kd) == 3) {
 800175c:	4b37      	ldr	r3, [pc, #220]	@ (800183c <HAL_UARTEx_RxEventCallback+0x2c4>)
 800175e:	9300      	str	r3, [sp, #0]
 8001760:	4b37      	ldr	r3, [pc, #220]	@ (8001840 <HAL_UARTEx_RxEventCallback+0x2c8>)
 8001762:	4a38      	ldr	r2, [pc, #224]	@ (8001844 <HAL_UARTEx_RxEventCallback+0x2cc>)
 8001764:	4938      	ldr	r1, [pc, #224]	@ (8001848 <HAL_UARTEx_RxEventCallback+0x2d0>)
 8001766:	4834      	ldr	r0, [pc, #208]	@ (8001838 <HAL_UARTEx_RxEventCallback+0x2c0>)
 8001768:	f007 f952 	bl	8008a10 <siscanf>
 800176c:	4603      	mov	r3, r0
 800176e:	2b03      	cmp	r3, #3
 8001770:	d10b      	bne.n	800178a <HAL_UARTEx_RxEventCallback+0x212>
			 PIDL_Kp=PIDL_Kp;
 8001772:	4b34      	ldr	r3, [pc, #208]	@ (8001844 <HAL_UARTEx_RxEventCallback+0x2cc>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a33      	ldr	r2, [pc, #204]	@ (8001844 <HAL_UARTEx_RxEventCallback+0x2cc>)
 8001778:	6013      	str	r3, [r2, #0]
			 PIDL_Ki=PIDL_Ki;
 800177a:	4b31      	ldr	r3, [pc, #196]	@ (8001840 <HAL_UARTEx_RxEventCallback+0x2c8>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a30      	ldr	r2, [pc, #192]	@ (8001840 <HAL_UARTEx_RxEventCallback+0x2c8>)
 8001780:	6013      	str	r3, [r2, #0]
			 PIDL_Kd=PIDL_Kd;
 8001782:	4b2e      	ldr	r3, [pc, #184]	@ (800183c <HAL_UARTEx_RxEventCallback+0x2c4>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a2d      	ldr	r2, [pc, #180]	@ (800183c <HAL_UARTEx_RxEventCallback+0x2c4>)
 8001788:	6013      	str	r3, [r2, #0]


		        }
		 if (sscanf(RxBuffer2, "speedl %f", &PIDL.target_val)== 1) {
 800178a:	4a25      	ldr	r2, [pc, #148]	@ (8001820 <HAL_UARTEx_RxEventCallback+0x2a8>)
 800178c:	492f      	ldr	r1, [pc, #188]	@ (800184c <HAL_UARTEx_RxEventCallback+0x2d4>)
 800178e:	482a      	ldr	r0, [pc, #168]	@ (8001838 <HAL_UARTEx_RxEventCallback+0x2c0>)
 8001790:	f007 f93e 	bl	8008a10 <siscanf>
 8001794:	4603      	mov	r3, r0
 8001796:	2b01      	cmp	r3, #1
 8001798:	d103      	bne.n	80017a2 <HAL_UARTEx_RxEventCallback+0x22a>
               PIDL.target_val=PIDL.target_val;
 800179a:	4b21      	ldr	r3, [pc, #132]	@ (8001820 <HAL_UARTEx_RxEventCallback+0x2a8>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a20      	ldr	r2, [pc, #128]	@ (8001820 <HAL_UARTEx_RxEventCallback+0x2a8>)
 80017a0:	6013      	str	r3, [r2, #0]

	         }

//右边电机PID在线调参
		 if (sscanf(RxBuffer2, "PIDR %f %f %f", &PIDR_Kp, &PIDR_Ki, &PIDR_Kd) == 3) {
 80017a2:	4b2b      	ldr	r3, [pc, #172]	@ (8001850 <HAL_UARTEx_RxEventCallback+0x2d8>)
 80017a4:	9300      	str	r3, [sp, #0]
 80017a6:	4b2b      	ldr	r3, [pc, #172]	@ (8001854 <HAL_UARTEx_RxEventCallback+0x2dc>)
 80017a8:	4a2b      	ldr	r2, [pc, #172]	@ (8001858 <HAL_UARTEx_RxEventCallback+0x2e0>)
 80017aa:	492c      	ldr	r1, [pc, #176]	@ (800185c <HAL_UARTEx_RxEventCallback+0x2e4>)
 80017ac:	4822      	ldr	r0, [pc, #136]	@ (8001838 <HAL_UARTEx_RxEventCallback+0x2c0>)
 80017ae:	f007 f92f 	bl	8008a10 <siscanf>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b03      	cmp	r3, #3
 80017b6:	d10b      	bne.n	80017d0 <HAL_UARTEx_RxEventCallback+0x258>
			 PIDR_Kp=PIDR_Kp;
 80017b8:	4b27      	ldr	r3, [pc, #156]	@ (8001858 <HAL_UARTEx_RxEventCallback+0x2e0>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a26      	ldr	r2, [pc, #152]	@ (8001858 <HAL_UARTEx_RxEventCallback+0x2e0>)
 80017be:	6013      	str	r3, [r2, #0]
			 PIDR_Ki=PIDR_Ki;
 80017c0:	4b24      	ldr	r3, [pc, #144]	@ (8001854 <HAL_UARTEx_RxEventCallback+0x2dc>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a23      	ldr	r2, [pc, #140]	@ (8001854 <HAL_UARTEx_RxEventCallback+0x2dc>)
 80017c6:	6013      	str	r3, [r2, #0]
			 PIDR_Kd=PIDR_Kd;
 80017c8:	4b21      	ldr	r3, [pc, #132]	@ (8001850 <HAL_UARTEx_RxEventCallback+0x2d8>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a20      	ldr	r2, [pc, #128]	@ (8001850 <HAL_UARTEx_RxEventCallback+0x2d8>)
 80017ce:	6013      	str	r3, [r2, #0]
		        }
		 if (sscanf(RxBuffer2, "speedr %f", &PIDR.target_val)== 1) {
 80017d0:	4a14      	ldr	r2, [pc, #80]	@ (8001824 <HAL_UARTEx_RxEventCallback+0x2ac>)
 80017d2:	4923      	ldr	r1, [pc, #140]	@ (8001860 <HAL_UARTEx_RxEventCallback+0x2e8>)
 80017d4:	4818      	ldr	r0, [pc, #96]	@ (8001838 <HAL_UARTEx_RxEventCallback+0x2c0>)
 80017d6:	f007 f91b 	bl	8008a10 <siscanf>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d103      	bne.n	80017e8 <HAL_UARTEx_RxEventCallback+0x270>
               PIDR.target_val=PIDR.target_val;
 80017e0:	4b10      	ldr	r3, [pc, #64]	@ (8001824 <HAL_UARTEx_RxEventCallback+0x2ac>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a0f      	ldr	r2, [pc, #60]	@ (8001824 <HAL_UARTEx_RxEventCallback+0x2ac>)
 80017e6:	6013      	str	r3, [r2, #0]

	         }


	   	 HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t *)RxBuffer2,sizeof(RxBuffer2));   //开启接受不定长
 80017e8:	22ff      	movs	r2, #255	@ 0xff
 80017ea:	4913      	ldr	r1, [pc, #76]	@ (8001838 <HAL_UARTEx_RxEventCallback+0x2c0>)
 80017ec:	4810      	ldr	r0, [pc, #64]	@ (8001830 <HAL_UARTEx_RxEventCallback+0x2b8>)
 80017ee:	f005 f865 	bl	80068bc <HAL_UARTEx_ReceiveToIdle_DMA>





}
 80017f2:	bf00      	nop
 80017f4:	372c      	adds	r7, #44	@ 0x2c
 80017f6:	46bd      	mov	sp, r7
 80017f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80017fc:	20000830 	.word	0x20000830
 8001800:	200003a8 	.word	0x200003a8
 8001804:	40e00000 	.word	0x40e00000
 8001808:	40668000 	.word	0x40668000
 800180c:	200006a8 	.word	0x200006a8
 8001810:	200006ac 	.word	0x200006ac
 8001814:	200006b0 	.word	0x200006b0
 8001818:	200006b8 	.word	0x200006b8
 800181c:	200006c0 	.word	0x200006c0
 8001820:	20000260 	.word	0x20000260
 8001824:	20000284 	.word	0x20000284
 8001828:	0800cb20 	.word	0x0800cb20
 800182c:	200005a8 	.word	0x200005a8
 8001830:	20000878 	.word	0x20000878
 8001834:	200002a8 	.word	0x200002a8
 8001838:	200004a8 	.word	0x200004a8
 800183c:	20000008 	.word	0x20000008
 8001840:	20000004 	.word	0x20000004
 8001844:	20000000 	.word	0x20000000
 8001848:	0800cb4c 	.word	0x0800cb4c
 800184c:	0800cb5c 	.word	0x0800cb5c
 8001850:	20000014 	.word	0x20000014
 8001854:	20000010 	.word	0x20000010
 8001858:	2000000c 	.word	0x2000000c
 800185c:	0800cb68 	.word	0x0800cb68
 8001860:	0800cb78 	.word	0x0800cb78

08001864 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {//处理数据发送完成后的操作
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
	if(huart == &huart2) {
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	4a06      	ldr	r2, [pc, #24]	@ (8001888 <HAL_UART_TxCpltCallback+0x24>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d104      	bne.n	800187e <HAL_UART_TxCpltCallback+0x1a>

	     memset(TxBuffer, 0, sizeof(TxBuffer));
 8001874:	22ff      	movs	r2, #255	@ 0xff
 8001876:	2100      	movs	r1, #0
 8001878:	4804      	ldr	r0, [pc, #16]	@ (800188c <HAL_UART_TxCpltCallback+0x28>)
 800187a:	f007 f94a 	bl	8008b12 <memset>


  }
}
 800187e:	bf00      	nop
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	20000830 	.word	0x20000830
 800188c:	200005a8 	.word	0x200005a8

08001890 <HAL_TIM_PeriodElapsedCallback>:




void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
	if(htim==&htim7){
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4a28      	ldr	r2, [pc, #160]	@ (800193c <HAL_TIM_PeriodElapsedCallback+0xac>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d149      	bne.n	8001934 <HAL_TIM_PeriodElapsedCallback+0xa4>
		speednow=10*(short)__HAL_TIM_GetCounter(&htim5);
 80018a0:	4b27      	ldr	r3, [pc, #156]	@ (8001940 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018a6:	b21b      	sxth	r3, r3
 80018a8:	461a      	mov	r2, r3
 80018aa:	4613      	mov	r3, r2
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	4413      	add	r3, r2
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	461a      	mov	r2, r3
 80018b4:	4b23      	ldr	r3, [pc, #140]	@ (8001944 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80018b6:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SetCounter(&htim5,0);
 80018b8:	4b21      	ldr	r3, [pc, #132]	@ (8001940 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2200      	movs	r2, #0
 80018be:	625a      	str	r2, [r3, #36]	@ 0x24

		Set_motor_speedL(&PIDL,PIDL.target_val);
 80018c0:	4b21      	ldr	r3, [pc, #132]	@ (8001948 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80018c2:	edd3 7a00 	vldr	s15, [r3]
 80018c6:	eeb0 0a67 	vmov.f32	s0, s15
 80018ca:	481f      	ldr	r0, [pc, #124]	@ (8001948 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80018cc:	f001 fa72 	bl	8002db4 <Set_motor_speedL>
        distance+=speednow/10;
 80018d0:	4b1c      	ldr	r3, [pc, #112]	@ (8001944 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a1d      	ldr	r2, [pc, #116]	@ (800194c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80018d6:	fb82 1203 	smull	r1, r2, r2, r3
 80018da:	1092      	asrs	r2, r2, #2
 80018dc:	17db      	asrs	r3, r3, #31
 80018de:	1ad2      	subs	r2, r2, r3
 80018e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001950 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4413      	add	r3, r2
 80018e6:	4a1a      	ldr	r2, [pc, #104]	@ (8001950 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80018e8:	6013      	str	r3, [r2, #0]

        speednow2=10*(short)__HAL_TIM_GetCounter(&htim8);
 80018ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001954 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018f0:	b21b      	sxth	r3, r3
 80018f2:	461a      	mov	r2, r3
 80018f4:	4613      	mov	r3, r2
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	4413      	add	r3, r2
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	461a      	mov	r2, r3
 80018fe:	4b16      	ldr	r3, [pc, #88]	@ (8001958 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001900:	601a      	str	r2, [r3, #0]
        		__HAL_TIM_SetCounter(&htim8,0);
 8001902:	4b14      	ldr	r3, [pc, #80]	@ (8001954 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2200      	movs	r2, #0
 8001908:	625a      	str	r2, [r3, #36]	@ 0x24

        		Set_motor_speedR(&PIDR,PIDR.target_val);
 800190a:	4b14      	ldr	r3, [pc, #80]	@ (800195c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800190c:	edd3 7a00 	vldr	s15, [r3]
 8001910:	eeb0 0a67 	vmov.f32	s0, s15
 8001914:	4811      	ldr	r0, [pc, #68]	@ (800195c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001916:	f001 fa6d 	bl	8002df4 <Set_motor_speedR>
                distance2+=(speednow2)/10;
 800191a:	4b0f      	ldr	r3, [pc, #60]	@ (8001958 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a0b      	ldr	r2, [pc, #44]	@ (800194c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001920:	fb82 1203 	smull	r1, r2, r2, r3
 8001924:	1092      	asrs	r2, r2, #2
 8001926:	17db      	asrs	r3, r3, #31
 8001928:	1ad2      	subs	r2, r2, r3
 800192a:	4b0d      	ldr	r3, [pc, #52]	@ (8001960 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4413      	add	r3, r2
 8001930:	4a0b      	ldr	r2, [pc, #44]	@ (8001960 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001932:	6013      	str	r3, [r2, #0]
	}


}
 8001934:	bf00      	nop
 8001936:	3708      	adds	r7, #8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	20000710 	.word	0x20000710
 8001940:	200006c8 	.word	0x200006c8
 8001944:	200006b8 	.word	0x200006b8
 8001948:	20000260 	.word	0x20000260
 800194c:	66666667 	.word	0x66666667
 8001950:	200006b4 	.word	0x200006b4
 8001954:	20000758 	.word	0x20000758
 8001958:	200006c0 	.word	0x200006c0
 800195c:	20000284 	.word	0x20000284
 8001960:	200006bc 	.word	0x200006bc

08001964 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001968:	b672      	cpsid	i
}
 800196a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800196c:	bf00      	nop
 800196e:	e7fd      	b.n	800196c <Error_Handler+0x8>

08001970 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	607b      	str	r3, [r7, #4]
 800197a:	4b10      	ldr	r3, [pc, #64]	@ (80019bc <HAL_MspInit+0x4c>)
 800197c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800197e:	4a0f      	ldr	r2, [pc, #60]	@ (80019bc <HAL_MspInit+0x4c>)
 8001980:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001984:	6453      	str	r3, [r2, #68]	@ 0x44
 8001986:	4b0d      	ldr	r3, [pc, #52]	@ (80019bc <HAL_MspInit+0x4c>)
 8001988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800198a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800198e:	607b      	str	r3, [r7, #4]
 8001990:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	603b      	str	r3, [r7, #0]
 8001996:	4b09      	ldr	r3, [pc, #36]	@ (80019bc <HAL_MspInit+0x4c>)
 8001998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800199a:	4a08      	ldr	r2, [pc, #32]	@ (80019bc <HAL_MspInit+0x4c>)
 800199c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80019a2:	4b06      	ldr	r3, [pc, #24]	@ (80019bc <HAL_MspInit+0x4c>)
 80019a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019aa:	603b      	str	r3, [r7, #0]
 80019ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019ae:	bf00      	nop
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	40023800 	.word	0x40023800

080019c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019c4:	bf00      	nop
 80019c6:	e7fd      	b.n	80019c4 <NMI_Handler+0x4>

080019c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019cc:	bf00      	nop
 80019ce:	e7fd      	b.n	80019cc <HardFault_Handler+0x4>

080019d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019d4:	bf00      	nop
 80019d6:	e7fd      	b.n	80019d4 <MemManage_Handler+0x4>

080019d8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019dc:	bf00      	nop
 80019de:	e7fd      	b.n	80019dc <BusFault_Handler+0x4>

080019e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019e4:	bf00      	nop
 80019e6:	e7fd      	b.n	80019e4 <UsageFault_Handler+0x4>

080019e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019ec:	bf00      	nop
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr

080019f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019f6:	b480      	push	{r7}
 80019f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019fa:	bf00      	nop
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a08:	bf00      	nop
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr

08001a12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a16:	f001 fb03 	bl	8003020 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
	...

08001a20 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001a24:	4802      	ldr	r0, [pc, #8]	@ (8001a30 <DMA1_Stream1_IRQHandler+0x10>)
 8001a26:	f001 fde9 	bl	80035fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001a2a:	bf00      	nop
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	20000980 	.word	0x20000980

08001a34 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001a38:	4802      	ldr	r0, [pc, #8]	@ (8001a44 <DMA1_Stream3_IRQHandler+0x10>)
 8001a3a:	f001 fddf 	bl	80035fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001a3e:	bf00      	nop
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	200009e0 	.word	0x200009e0

08001a48 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001a4c:	4802      	ldr	r0, [pc, #8]	@ (8001a58 <DMA1_Stream5_IRQHandler+0x10>)
 8001a4e:	f001 fdd5 	bl	80035fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001a52:	bf00      	nop
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	200008c0 	.word	0x200008c0

08001a5c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001a60:	4802      	ldr	r0, [pc, #8]	@ (8001a6c <DMA1_Stream6_IRQHandler+0x10>)
 8001a62:	f001 fdcb 	bl	80035fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001a66:	bf00      	nop
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	20000920 	.word	0x20000920

08001a70 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8001a74:	4802      	ldr	r0, [pc, #8]	@ (8001a80 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001a76:	f003 fe46 	bl	8005706 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	200007a0 	.word	0x200007a0

08001a84 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a88:	4802      	ldr	r0, [pc, #8]	@ (8001a94 <USART2_IRQHandler+0x10>)
 8001a8a:	f004 ff71 	bl	8006970 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	20000830 	.word	0x20000830

08001a98 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001a9c:	4802      	ldr	r0, [pc, #8]	@ (8001aa8 <USART3_IRQHandler+0x10>)
 8001a9e:	f004 ff67 	bl	8006970 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20000878 	.word	0x20000878

08001aac <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001ab0:	4802      	ldr	r0, [pc, #8]	@ (8001abc <TIM7_IRQHandler+0x10>)
 8001ab2:	f003 fe28 	bl	8005706 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	20000710 	.word	0x20000710

08001ac0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  return 1;
 8001ac4:	2301      	movs	r3, #1
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <_kill>:

int _kill(int pid, int sig)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ada:	f007 f86d 	bl	8008bb8 <__errno>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2216      	movs	r2, #22
 8001ae2:	601a      	str	r2, [r3, #0]
  return -1;
 8001ae4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <_exit>:

void _exit (int status)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001af8:	f04f 31ff 	mov.w	r1, #4294967295
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f7ff ffe7 	bl	8001ad0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b02:	bf00      	nop
 8001b04:	e7fd      	b.n	8001b02 <_exit+0x12>

08001b06 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b086      	sub	sp, #24
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	60f8      	str	r0, [r7, #12]
 8001b0e:	60b9      	str	r1, [r7, #8]
 8001b10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b12:	2300      	movs	r3, #0
 8001b14:	617b      	str	r3, [r7, #20]
 8001b16:	e00a      	b.n	8001b2e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b18:	f3af 8000 	nop.w
 8001b1c:	4601      	mov	r1, r0
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	1c5a      	adds	r2, r3, #1
 8001b22:	60ba      	str	r2, [r7, #8]
 8001b24:	b2ca      	uxtb	r2, r1
 8001b26:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	617b      	str	r3, [r7, #20]
 8001b2e:	697a      	ldr	r2, [r7, #20]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	dbf0      	blt.n	8001b18 <_read+0x12>
  }

  return len;
 8001b36:	687b      	ldr	r3, [r7, #4]
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3718      	adds	r7, #24
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	60f8      	str	r0, [r7, #12]
 8001b48:	60b9      	str	r1, [r7, #8]
 8001b4a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	617b      	str	r3, [r7, #20]
 8001b50:	e009      	b.n	8001b66 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	1c5a      	adds	r2, r3, #1
 8001b56:	60ba      	str	r2, [r7, #8]
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	3301      	adds	r3, #1
 8001b64:	617b      	str	r3, [r7, #20]
 8001b66:	697a      	ldr	r2, [r7, #20]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	dbf1      	blt.n	8001b52 <_write+0x12>
  }
  return len;
 8001b6e:	687b      	ldr	r3, [r7, #4]
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3718      	adds	r7, #24
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <_close>:

int _close(int file)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ba0:	605a      	str	r2, [r3, #4]
  return 0;
 8001ba2:	2300      	movs	r3, #0
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <_isatty>:

int _isatty(int file)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bb8:	2301      	movs	r3, #1
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr

08001bc6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	b085      	sub	sp, #20
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	60f8      	str	r0, [r7, #12]
 8001bce:	60b9      	str	r1, [r7, #8]
 8001bd0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bd2:	2300      	movs	r3, #0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3714      	adds	r7, #20
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001be8:	4a14      	ldr	r2, [pc, #80]	@ (8001c3c <_sbrk+0x5c>)
 8001bea:	4b15      	ldr	r3, [pc, #84]	@ (8001c40 <_sbrk+0x60>)
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bf4:	4b13      	ldr	r3, [pc, #76]	@ (8001c44 <_sbrk+0x64>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d102      	bne.n	8001c02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bfc:	4b11      	ldr	r3, [pc, #68]	@ (8001c44 <_sbrk+0x64>)
 8001bfe:	4a12      	ldr	r2, [pc, #72]	@ (8001c48 <_sbrk+0x68>)
 8001c00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c02:	4b10      	ldr	r3, [pc, #64]	@ (8001c44 <_sbrk+0x64>)
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4413      	add	r3, r2
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d207      	bcs.n	8001c20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c10:	f006 ffd2 	bl	8008bb8 <__errno>
 8001c14:	4603      	mov	r3, r0
 8001c16:	220c      	movs	r2, #12
 8001c18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c1e:	e009      	b.n	8001c34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c20:	4b08      	ldr	r3, [pc, #32]	@ (8001c44 <_sbrk+0x64>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c26:	4b07      	ldr	r3, [pc, #28]	@ (8001c44 <_sbrk+0x64>)
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	4a05      	ldr	r2, [pc, #20]	@ (8001c44 <_sbrk+0x64>)
 8001c30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c32:	68fb      	ldr	r3, [r7, #12]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3718      	adds	r7, #24
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	20020000 	.word	0x20020000
 8001c40:	00000400 	.word	0x00000400
 8001c44:	200006c4 	.word	0x200006c4
 8001c48:	20001018 	.word	0x20001018

08001c4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c50:	4b06      	ldr	r3, [pc, #24]	@ (8001c6c <SystemInit+0x20>)
 8001c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c56:	4a05      	ldr	r2, [pc, #20]	@ (8001c6c <SystemInit+0x20>)
 8001c58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c60:	bf00      	nop
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	e000ed00 	.word	0xe000ed00

08001c70 <MX_TIM5_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim12;

/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b08c      	sub	sp, #48	@ 0x30
 8001c74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c76:	f107 030c 	add.w	r3, r7, #12
 8001c7a:	2224      	movs	r2, #36	@ 0x24
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f006 ff47 	bl	8008b12 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c84:	1d3b      	adds	r3, r7, #4
 8001c86:	2200      	movs	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001c8c:	4b20      	ldr	r3, [pc, #128]	@ (8001d10 <MX_TIM5_Init+0xa0>)
 8001c8e:	4a21      	ldr	r2, [pc, #132]	@ (8001d14 <MX_TIM5_Init+0xa4>)
 8001c90:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001c92:	4b1f      	ldr	r3, [pc, #124]	@ (8001d10 <MX_TIM5_Init+0xa0>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c98:	4b1d      	ldr	r3, [pc, #116]	@ (8001d10 <MX_TIM5_Init+0xa0>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65536;
 8001c9e:	4b1c      	ldr	r3, [pc, #112]	@ (8001d10 <MX_TIM5_Init+0xa0>)
 8001ca0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001ca4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ca6:	4b1a      	ldr	r3, [pc, #104]	@ (8001d10 <MX_TIM5_Init+0xa0>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cac:	4b18      	ldr	r3, [pc, #96]	@ (8001d10 <MX_TIM5_Init+0xa0>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001cd6:	f107 030c 	add.w	r3, r7, #12
 8001cda:	4619      	mov	r1, r3
 8001cdc:	480c      	ldr	r0, [pc, #48]	@ (8001d10 <MX_TIM5_Init+0xa0>)
 8001cde:	f003 fbde 	bl	800549e <HAL_TIM_Encoder_Init>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001ce8:	f7ff fe3c 	bl	8001964 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cec:	2300      	movs	r3, #0
 8001cee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001cf4:	1d3b      	adds	r3, r7, #4
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4805      	ldr	r0, [pc, #20]	@ (8001d10 <MX_TIM5_Init+0xa0>)
 8001cfa:	f004 fc83 	bl	8006604 <HAL_TIMEx_MasterConfigSynchronization>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001d04:	f7ff fe2e 	bl	8001964 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001d08:	bf00      	nop
 8001d0a:	3730      	adds	r7, #48	@ 0x30
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	200006c8 	.word	0x200006c8
 8001d14:	40000c00 	.word	0x40000c00

08001d18 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d1e:	463b      	mov	r3, r7
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001d26:	4b15      	ldr	r3, [pc, #84]	@ (8001d7c <MX_TIM7_Init+0x64>)
 8001d28:	4a15      	ldr	r2, [pc, #84]	@ (8001d80 <MX_TIM7_Init+0x68>)
 8001d2a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8400-1;
 8001d2c:	4b13      	ldr	r3, [pc, #76]	@ (8001d7c <MX_TIM7_Init+0x64>)
 8001d2e:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001d32:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d34:	4b11      	ldr	r3, [pc, #68]	@ (8001d7c <MX_TIM7_Init+0x64>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 100-1;
 8001d3a:	4b10      	ldr	r3, [pc, #64]	@ (8001d7c <MX_TIM7_Init+0x64>)
 8001d3c:	2263      	movs	r2, #99	@ 0x63
 8001d3e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d40:	4b0e      	ldr	r3, [pc, #56]	@ (8001d7c <MX_TIM7_Init+0x64>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001d46:	480d      	ldr	r0, [pc, #52]	@ (8001d7c <MX_TIM7_Init+0x64>)
 8001d48:	f003 f96e 	bl	8005028 <HAL_TIM_Base_Init>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001d52:	f7ff fe07 	bl	8001964 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d56:	2300      	movs	r3, #0
 8001d58:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001d5e:	463b      	mov	r3, r7
 8001d60:	4619      	mov	r1, r3
 8001d62:	4806      	ldr	r0, [pc, #24]	@ (8001d7c <MX_TIM7_Init+0x64>)
 8001d64:	f004 fc4e 	bl	8006604 <HAL_TIMEx_MasterConfigSynchronization>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001d6e:	f7ff fdf9 	bl	8001964 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001d72:	bf00      	nop
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	20000710 	.word	0x20000710
 8001d80:	40001400 	.word	0x40001400

08001d84 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b08c      	sub	sp, #48	@ 0x30
 8001d88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d8a:	f107 030c 	add.w	r3, r7, #12
 8001d8e:	2224      	movs	r2, #36	@ 0x24
 8001d90:	2100      	movs	r1, #0
 8001d92:	4618      	mov	r0, r3
 8001d94:	f006 febd 	bl	8008b12 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d98:	1d3b      	adds	r3, r7, #4
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	601a      	str	r2, [r3, #0]
 8001d9e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001da0:	4b22      	ldr	r3, [pc, #136]	@ (8001e2c <MX_TIM8_Init+0xa8>)
 8001da2:	4a23      	ldr	r2, [pc, #140]	@ (8001e30 <MX_TIM8_Init+0xac>)
 8001da4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001da6:	4b21      	ldr	r3, [pc, #132]	@ (8001e2c <MX_TIM8_Init+0xa8>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dac:	4b1f      	ldr	r3, [pc, #124]	@ (8001e2c <MX_TIM8_Init+0xa8>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001db2:	4b1e      	ldr	r3, [pc, #120]	@ (8001e2c <MX_TIM8_Init+0xa8>)
 8001db4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001db8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dba:	4b1c      	ldr	r3, [pc, #112]	@ (8001e2c <MX_TIM8_Init+0xa8>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001dc0:	4b1a      	ldr	r3, [pc, #104]	@ (8001e2c <MX_TIM8_Init+0xa8>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dc6:	4b19      	ldr	r3, [pc, #100]	@ (8001e2c <MX_TIM8_Init+0xa8>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001de0:	2300      	movs	r3, #0
 8001de2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001de4:	2301      	movs	r3, #1
 8001de6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001de8:	2300      	movs	r3, #0
 8001dea:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001dec:	2300      	movs	r3, #0
 8001dee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001df0:	f107 030c 	add.w	r3, r7, #12
 8001df4:	4619      	mov	r1, r3
 8001df6:	480d      	ldr	r0, [pc, #52]	@ (8001e2c <MX_TIM8_Init+0xa8>)
 8001df8:	f003 fb51 	bl	800549e <HAL_TIM_Encoder_Init>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8001e02:	f7ff fdaf 	bl	8001964 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e06:	2300      	movs	r3, #0
 8001e08:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001e0e:	1d3b      	adds	r3, r7, #4
 8001e10:	4619      	mov	r1, r3
 8001e12:	4806      	ldr	r0, [pc, #24]	@ (8001e2c <MX_TIM8_Init+0xa8>)
 8001e14:	f004 fbf6 	bl	8006604 <HAL_TIMEx_MasterConfigSynchronization>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8001e1e:	f7ff fda1 	bl	8001964 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001e22:	bf00      	nop
 8001e24:	3730      	adds	r7, #48	@ 0x30
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	20000758 	.word	0x20000758
 8001e30:	40010400 	.word	0x40010400

08001e34 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b088      	sub	sp, #32
 8001e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e3a:	f107 0310 	add.w	r3, r7, #16
 8001e3e:	2200      	movs	r2, #0
 8001e40:	601a      	str	r2, [r3, #0]
 8001e42:	605a      	str	r2, [r3, #4]
 8001e44:	609a      	str	r2, [r3, #8]
 8001e46:	60da      	str	r2, [r3, #12]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001e48:	463b      	mov	r3, r7
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	601a      	str	r2, [r3, #0]
 8001e4e:	605a      	str	r2, [r3, #4]
 8001e50:	609a      	str	r2, [r3, #8]
 8001e52:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001e54:	4b23      	ldr	r3, [pc, #140]	@ (8001ee4 <MX_TIM9_Init+0xb0>)
 8001e56:	4a24      	ldr	r2, [pc, #144]	@ (8001ee8 <MX_TIM9_Init+0xb4>)
 8001e58:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 84-1;
 8001e5a:	4b22      	ldr	r3, [pc, #136]	@ (8001ee4 <MX_TIM9_Init+0xb0>)
 8001e5c:	2253      	movs	r2, #83	@ 0x53
 8001e5e:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e60:	4b20      	ldr	r3, [pc, #128]	@ (8001ee4 <MX_TIM9_Init+0xb0>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8001e66:	4b1f      	ldr	r3, [pc, #124]	@ (8001ee4 <MX_TIM9_Init+0xb0>)
 8001e68:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e6c:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e6e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ee4 <MX_TIM9_Init+0xb0>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e74:	4b1b      	ldr	r3, [pc, #108]	@ (8001ee4 <MX_TIM9_Init+0xb0>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001e7a:	481a      	ldr	r0, [pc, #104]	@ (8001ee4 <MX_TIM9_Init+0xb0>)
 8001e7c:	f003 f8d4 	bl	8005028 <HAL_TIM_Base_Init>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <MX_TIM9_Init+0x56>
  {
    Error_Handler();
 8001e86:	f7ff fd6d 	bl	8001964 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e8a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e8e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001e90:	f107 0310 	add.w	r3, r7, #16
 8001e94:	4619      	mov	r1, r3
 8001e96:	4813      	ldr	r0, [pc, #76]	@ (8001ee4 <MX_TIM9_Init+0xb0>)
 8001e98:	f003 fe84 	bl	8005ba4 <HAL_TIM_ConfigClockSource>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <MX_TIM9_Init+0x72>
  {
    Error_Handler();
 8001ea2:	f7ff fd5f 	bl	8001964 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim9) != HAL_OK)
 8001ea6:	480f      	ldr	r0, [pc, #60]	@ (8001ee4 <MX_TIM9_Init+0xb0>)
 8001ea8:	f003 faa0 	bl	80053ec <HAL_TIM_IC_Init>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <MX_TIM9_Init+0x82>
  {
    Error_Handler();
 8001eb2:	f7ff fd57 	bl	8001964 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 8001ec2:	230f      	movs	r3, #15
 8001ec4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim9, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001ec6:	463b      	mov	r3, r7
 8001ec8:	2200      	movs	r2, #0
 8001eca:	4619      	mov	r1, r3
 8001ecc:	4805      	ldr	r0, [pc, #20]	@ (8001ee4 <MX_TIM9_Init+0xb0>)
 8001ece:	f003 fd0a 	bl	80058e6 <HAL_TIM_IC_ConfigChannel>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <MX_TIM9_Init+0xa8>
  {
    Error_Handler();
 8001ed8:	f7ff fd44 	bl	8001964 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8001edc:	bf00      	nop
 8001ede:	3720      	adds	r7, #32
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	200007a0 	.word	0x200007a0
 8001ee8:	40014000 	.word	0x40014000

08001eec <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b08c      	sub	sp, #48	@ 0x30
 8001ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ef2:	f107 0320 	add.w	r3, r7, #32
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	601a      	str	r2, [r3, #0]
 8001efa:	605a      	str	r2, [r3, #4]
 8001efc:	609a      	str	r2, [r3, #8]
 8001efe:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f00:	1d3b      	adds	r3, r7, #4
 8001f02:	2200      	movs	r2, #0
 8001f04:	601a      	str	r2, [r3, #0]
 8001f06:	605a      	str	r2, [r3, #4]
 8001f08:	609a      	str	r2, [r3, #8]
 8001f0a:	60da      	str	r2, [r3, #12]
 8001f0c:	611a      	str	r2, [r3, #16]
 8001f0e:	615a      	str	r2, [r3, #20]
 8001f10:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001f12:	4b2b      	ldr	r3, [pc, #172]	@ (8001fc0 <MX_TIM12_Init+0xd4>)
 8001f14:	4a2b      	ldr	r2, [pc, #172]	@ (8001fc4 <MX_TIM12_Init+0xd8>)
 8001f16:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 84-1;
 8001f18:	4b29      	ldr	r3, [pc, #164]	@ (8001fc0 <MX_TIM12_Init+0xd4>)
 8001f1a:	2253      	movs	r2, #83	@ 0x53
 8001f1c:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f1e:	4b28      	ldr	r3, [pc, #160]	@ (8001fc0 <MX_TIM12_Init+0xd4>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 1000-1;
 8001f24:	4b26      	ldr	r3, [pc, #152]	@ (8001fc0 <MX_TIM12_Init+0xd4>)
 8001f26:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001f2a:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f2c:	4b24      	ldr	r3, [pc, #144]	@ (8001fc0 <MX_TIM12_Init+0xd4>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f32:	4b23      	ldr	r3, [pc, #140]	@ (8001fc0 <MX_TIM12_Init+0xd4>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001f38:	4821      	ldr	r0, [pc, #132]	@ (8001fc0 <MX_TIM12_Init+0xd4>)
 8001f3a:	f003 f875 	bl	8005028 <HAL_TIM_Base_Init>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8001f44:	f7ff fd0e 	bl	8001964 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f4c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8001f4e:	f107 0320 	add.w	r3, r7, #32
 8001f52:	4619      	mov	r1, r3
 8001f54:	481a      	ldr	r0, [pc, #104]	@ (8001fc0 <MX_TIM12_Init+0xd4>)
 8001f56:	f003 fe25 	bl	8005ba4 <HAL_TIM_ConfigClockSource>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8001f60:	f7ff fd00 	bl	8001964 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001f64:	4816      	ldr	r0, [pc, #88]	@ (8001fc0 <MX_TIM12_Init+0xd4>)
 8001f66:	f003 f91f 	bl	80051a8 <HAL_TIM_PWM_Init>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 8001f70:	f7ff fcf8 	bl	8001964 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f74:	2360      	movs	r3, #96	@ 0x60
 8001f76:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8001f78:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001f7c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f82:	2300      	movs	r3, #0
 8001f84:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f86:	1d3b      	adds	r3, r7, #4
 8001f88:	2200      	movs	r2, #0
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	480c      	ldr	r0, [pc, #48]	@ (8001fc0 <MX_TIM12_Init+0xd4>)
 8001f8e:	f003 fd47 	bl	8005a20 <HAL_TIM_PWM_ConfigChannel>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <MX_TIM12_Init+0xb0>
  {
    Error_Handler();
 8001f98:	f7ff fce4 	bl	8001964 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f9c:	1d3b      	adds	r3, r7, #4
 8001f9e:	2204      	movs	r2, #4
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4807      	ldr	r0, [pc, #28]	@ (8001fc0 <MX_TIM12_Init+0xd4>)
 8001fa4:	f003 fd3c 	bl	8005a20 <HAL_TIM_PWM_ConfigChannel>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <MX_TIM12_Init+0xc6>
  {
    Error_Handler();
 8001fae:	f7ff fcd9 	bl	8001964 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001fb2:	4803      	ldr	r0, [pc, #12]	@ (8001fc0 <MX_TIM12_Init+0xd4>)
 8001fb4:	f000 f90a 	bl	80021cc <HAL_TIM_MspPostInit>

}
 8001fb8:	bf00      	nop
 8001fba:	3730      	adds	r7, #48	@ 0x30
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	200007e8 	.word	0x200007e8
 8001fc4:	40001800 	.word	0x40001800

08001fc8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b08c      	sub	sp, #48	@ 0x30
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd0:	f107 031c 	add.w	r3, r7, #28
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	605a      	str	r2, [r3, #4]
 8001fda:	609a      	str	r2, [r3, #8]
 8001fdc:	60da      	str	r2, [r3, #12]
 8001fde:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM5)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a32      	ldr	r2, [pc, #200]	@ (80020b0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d12c      	bne.n	8002044 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001fea:	2300      	movs	r3, #0
 8001fec:	61bb      	str	r3, [r7, #24]
 8001fee:	4b31      	ldr	r3, [pc, #196]	@ (80020b4 <HAL_TIM_Encoder_MspInit+0xec>)
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff2:	4a30      	ldr	r2, [pc, #192]	@ (80020b4 <HAL_TIM_Encoder_MspInit+0xec>)
 8001ff4:	f043 0308 	orr.w	r3, r3, #8
 8001ff8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ffa:	4b2e      	ldr	r3, [pc, #184]	@ (80020b4 <HAL_TIM_Encoder_MspInit+0xec>)
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ffe:	f003 0308 	and.w	r3, r3, #8
 8002002:	61bb      	str	r3, [r7, #24]
 8002004:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002006:	2300      	movs	r3, #0
 8002008:	617b      	str	r3, [r7, #20]
 800200a:	4b2a      	ldr	r3, [pc, #168]	@ (80020b4 <HAL_TIM_Encoder_MspInit+0xec>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800200e:	4a29      	ldr	r2, [pc, #164]	@ (80020b4 <HAL_TIM_Encoder_MspInit+0xec>)
 8002010:	f043 0301 	orr.w	r3, r3, #1
 8002014:	6313      	str	r3, [r2, #48]	@ 0x30
 8002016:	4b27      	ldr	r3, [pc, #156]	@ (80020b4 <HAL_TIM_Encoder_MspInit+0xec>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800201a:	f003 0301 	and.w	r3, r3, #1
 800201e:	617b      	str	r3, [r7, #20]
 8002020:	697b      	ldr	r3, [r7, #20]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002022:	2303      	movs	r3, #3
 8002024:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002026:	2302      	movs	r3, #2
 8002028:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202a:	2300      	movs	r3, #0
 800202c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800202e:	2300      	movs	r3, #0
 8002030:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002032:	2302      	movs	r3, #2
 8002034:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002036:	f107 031c 	add.w	r3, r7, #28
 800203a:	4619      	mov	r1, r3
 800203c:	481e      	ldr	r0, [pc, #120]	@ (80020b8 <HAL_TIM_Encoder_MspInit+0xf0>)
 800203e:	f001 fd47 	bl	8003ad0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002042:	e030      	b.n	80020a6 <HAL_TIM_Encoder_MspInit+0xde>
  else if(tim_encoderHandle->Instance==TIM8)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a1c      	ldr	r2, [pc, #112]	@ (80020bc <HAL_TIM_Encoder_MspInit+0xf4>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d12b      	bne.n	80020a6 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800204e:	2300      	movs	r3, #0
 8002050:	613b      	str	r3, [r7, #16]
 8002052:	4b18      	ldr	r3, [pc, #96]	@ (80020b4 <HAL_TIM_Encoder_MspInit+0xec>)
 8002054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002056:	4a17      	ldr	r2, [pc, #92]	@ (80020b4 <HAL_TIM_Encoder_MspInit+0xec>)
 8002058:	f043 0302 	orr.w	r3, r3, #2
 800205c:	6453      	str	r3, [r2, #68]	@ 0x44
 800205e:	4b15      	ldr	r3, [pc, #84]	@ (80020b4 <HAL_TIM_Encoder_MspInit+0xec>)
 8002060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	613b      	str	r3, [r7, #16]
 8002068:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800206a:	2300      	movs	r3, #0
 800206c:	60fb      	str	r3, [r7, #12]
 800206e:	4b11      	ldr	r3, [pc, #68]	@ (80020b4 <HAL_TIM_Encoder_MspInit+0xec>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002072:	4a10      	ldr	r2, [pc, #64]	@ (80020b4 <HAL_TIM_Encoder_MspInit+0xec>)
 8002074:	f043 0304 	orr.w	r3, r3, #4
 8002078:	6313      	str	r3, [r2, #48]	@ 0x30
 800207a:	4b0e      	ldr	r3, [pc, #56]	@ (80020b4 <HAL_TIM_Encoder_MspInit+0xec>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800207e:	f003 0304 	and.w	r3, r3, #4
 8002082:	60fb      	str	r3, [r7, #12]
 8002084:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002086:	23c0      	movs	r3, #192	@ 0xc0
 8002088:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208a:	2302      	movs	r3, #2
 800208c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208e:	2300      	movs	r3, #0
 8002090:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002092:	2300      	movs	r3, #0
 8002094:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002096:	2303      	movs	r3, #3
 8002098:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800209a:	f107 031c 	add.w	r3, r7, #28
 800209e:	4619      	mov	r1, r3
 80020a0:	4807      	ldr	r0, [pc, #28]	@ (80020c0 <HAL_TIM_Encoder_MspInit+0xf8>)
 80020a2:	f001 fd15 	bl	8003ad0 <HAL_GPIO_Init>
}
 80020a6:	bf00      	nop
 80020a8:	3730      	adds	r7, #48	@ 0x30
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	40000c00 	.word	0x40000c00
 80020b4:	40023800 	.word	0x40023800
 80020b8:	40020000 	.word	0x40020000
 80020bc:	40010400 	.word	0x40010400
 80020c0:	40020800 	.word	0x40020800

080020c4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b08c      	sub	sp, #48	@ 0x30
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020cc:	f107 031c 	add.w	r3, r7, #28
 80020d0:	2200      	movs	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]
 80020d4:	605a      	str	r2, [r3, #4]
 80020d6:	609a      	str	r2, [r3, #8]
 80020d8:	60da      	str	r2, [r3, #12]
 80020da:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM7)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a35      	ldr	r2, [pc, #212]	@ (80021b8 <HAL_TIM_Base_MspInit+0xf4>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d116      	bne.n	8002114 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80020e6:	2300      	movs	r3, #0
 80020e8:	61bb      	str	r3, [r7, #24]
 80020ea:	4b34      	ldr	r3, [pc, #208]	@ (80021bc <HAL_TIM_Base_MspInit+0xf8>)
 80020ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ee:	4a33      	ldr	r2, [pc, #204]	@ (80021bc <HAL_TIM_Base_MspInit+0xf8>)
 80020f0:	f043 0320 	orr.w	r3, r3, #32
 80020f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80020f6:	4b31      	ldr	r3, [pc, #196]	@ (80021bc <HAL_TIM_Base_MspInit+0xf8>)
 80020f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020fa:	f003 0320 	and.w	r3, r3, #32
 80020fe:	61bb      	str	r3, [r7, #24]
 8002100:	69bb      	ldr	r3, [r7, #24]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002102:	2200      	movs	r2, #0
 8002104:	2100      	movs	r1, #0
 8002106:	2037      	movs	r0, #55	@ 0x37
 8002108:	f001 f8a9 	bl	800325e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800210c:	2037      	movs	r0, #55	@ 0x37
 800210e:	f001 f8c2 	bl	8003296 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8002112:	e04c      	b.n	80021ae <HAL_TIM_Base_MspInit+0xea>
  else if(tim_baseHandle->Instance==TIM9)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a29      	ldr	r2, [pc, #164]	@ (80021c0 <HAL_TIM_Base_MspInit+0xfc>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d134      	bne.n	8002188 <HAL_TIM_Base_MspInit+0xc4>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800211e:	2300      	movs	r3, #0
 8002120:	617b      	str	r3, [r7, #20]
 8002122:	4b26      	ldr	r3, [pc, #152]	@ (80021bc <HAL_TIM_Base_MspInit+0xf8>)
 8002124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002126:	4a25      	ldr	r2, [pc, #148]	@ (80021bc <HAL_TIM_Base_MspInit+0xf8>)
 8002128:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800212c:	6453      	str	r3, [r2, #68]	@ 0x44
 800212e:	4b23      	ldr	r3, [pc, #140]	@ (80021bc <HAL_TIM_Base_MspInit+0xf8>)
 8002130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002132:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002136:	617b      	str	r3, [r7, #20]
 8002138:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800213a:	2300      	movs	r3, #0
 800213c:	613b      	str	r3, [r7, #16]
 800213e:	4b1f      	ldr	r3, [pc, #124]	@ (80021bc <HAL_TIM_Base_MspInit+0xf8>)
 8002140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002142:	4a1e      	ldr	r2, [pc, #120]	@ (80021bc <HAL_TIM_Base_MspInit+0xf8>)
 8002144:	f043 0310 	orr.w	r3, r3, #16
 8002148:	6313      	str	r3, [r2, #48]	@ 0x30
 800214a:	4b1c      	ldr	r3, [pc, #112]	@ (80021bc <HAL_TIM_Base_MspInit+0xf8>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800214e:	f003 0310 	and.w	r3, r3, #16
 8002152:	613b      	str	r3, [r7, #16]
 8002154:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002156:	2320      	movs	r3, #32
 8002158:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800215a:	2302      	movs	r3, #2
 800215c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215e:	2300      	movs	r3, #0
 8002160:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002162:	2300      	movs	r3, #0
 8002164:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8002166:	2303      	movs	r3, #3
 8002168:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800216a:	f107 031c 	add.w	r3, r7, #28
 800216e:	4619      	mov	r1, r3
 8002170:	4814      	ldr	r0, [pc, #80]	@ (80021c4 <HAL_TIM_Base_MspInit+0x100>)
 8002172:	f001 fcad 	bl	8003ad0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8002176:	2200      	movs	r2, #0
 8002178:	2100      	movs	r1, #0
 800217a:	2018      	movs	r0, #24
 800217c:	f001 f86f 	bl	800325e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002180:	2018      	movs	r0, #24
 8002182:	f001 f888 	bl	8003296 <HAL_NVIC_EnableIRQ>
}
 8002186:	e012      	b.n	80021ae <HAL_TIM_Base_MspInit+0xea>
  else if(tim_baseHandle->Instance==TIM12)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a0e      	ldr	r2, [pc, #56]	@ (80021c8 <HAL_TIM_Base_MspInit+0x104>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d10d      	bne.n	80021ae <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002192:	2300      	movs	r3, #0
 8002194:	60fb      	str	r3, [r7, #12]
 8002196:	4b09      	ldr	r3, [pc, #36]	@ (80021bc <HAL_TIM_Base_MspInit+0xf8>)
 8002198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800219a:	4a08      	ldr	r2, [pc, #32]	@ (80021bc <HAL_TIM_Base_MspInit+0xf8>)
 800219c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80021a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80021a2:	4b06      	ldr	r3, [pc, #24]	@ (80021bc <HAL_TIM_Base_MspInit+0xf8>)
 80021a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021aa:	60fb      	str	r3, [r7, #12]
 80021ac:	68fb      	ldr	r3, [r7, #12]
}
 80021ae:	bf00      	nop
 80021b0:	3730      	adds	r7, #48	@ 0x30
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	40001400 	.word	0x40001400
 80021bc:	40023800 	.word	0x40023800
 80021c0:	40014000 	.word	0x40014000
 80021c4:	40021000 	.word	0x40021000
 80021c8:	40001800 	.word	0x40001800

080021cc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b088      	sub	sp, #32
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d4:	f107 030c 	add.w	r3, r7, #12
 80021d8:	2200      	movs	r2, #0
 80021da:	601a      	str	r2, [r3, #0]
 80021dc:	605a      	str	r2, [r3, #4]
 80021de:	609a      	str	r2, [r3, #8]
 80021e0:	60da      	str	r2, [r3, #12]
 80021e2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM12)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a12      	ldr	r2, [pc, #72]	@ (8002234 <HAL_TIM_MspPostInit+0x68>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d11e      	bne.n	800222c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ee:	2300      	movs	r3, #0
 80021f0:	60bb      	str	r3, [r7, #8]
 80021f2:	4b11      	ldr	r3, [pc, #68]	@ (8002238 <HAL_TIM_MspPostInit+0x6c>)
 80021f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f6:	4a10      	ldr	r2, [pc, #64]	@ (8002238 <HAL_TIM_MspPostInit+0x6c>)
 80021f8:	f043 0302 	orr.w	r3, r3, #2
 80021fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80021fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002238 <HAL_TIM_MspPostInit+0x6c>)
 8002200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	60bb      	str	r3, [r7, #8]
 8002208:	68bb      	ldr	r3, [r7, #8]
    /**TIM12 GPIO Configuration
    PB14     ------> TIM12_CH1
    PB15     ------> TIM12_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800220a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800220e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002210:	2302      	movs	r3, #2
 8002212:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002214:	2300      	movs	r3, #0
 8002216:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002218:	2300      	movs	r3, #0
 800221a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800221c:	2309      	movs	r3, #9
 800221e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002220:	f107 030c 	add.w	r3, r7, #12
 8002224:	4619      	mov	r1, r3
 8002226:	4805      	ldr	r0, [pc, #20]	@ (800223c <HAL_TIM_MspPostInit+0x70>)
 8002228:	f001 fc52 	bl	8003ad0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800222c:	bf00      	nop
 800222e:	3720      	adds	r7, #32
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	40001800 	.word	0x40001800
 8002238:	40023800 	.word	0x40023800
 800223c:	40020400 	.word	0x40020400

08002240 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002244:	4b11      	ldr	r3, [pc, #68]	@ (800228c <MX_USART2_UART_Init+0x4c>)
 8002246:	4a12      	ldr	r2, [pc, #72]	@ (8002290 <MX_USART2_UART_Init+0x50>)
 8002248:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800224a:	4b10      	ldr	r3, [pc, #64]	@ (800228c <MX_USART2_UART_Init+0x4c>)
 800224c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002250:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002252:	4b0e      	ldr	r3, [pc, #56]	@ (800228c <MX_USART2_UART_Init+0x4c>)
 8002254:	2200      	movs	r2, #0
 8002256:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002258:	4b0c      	ldr	r3, [pc, #48]	@ (800228c <MX_USART2_UART_Init+0x4c>)
 800225a:	2200      	movs	r2, #0
 800225c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800225e:	4b0b      	ldr	r3, [pc, #44]	@ (800228c <MX_USART2_UART_Init+0x4c>)
 8002260:	2200      	movs	r2, #0
 8002262:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002264:	4b09      	ldr	r3, [pc, #36]	@ (800228c <MX_USART2_UART_Init+0x4c>)
 8002266:	220c      	movs	r2, #12
 8002268:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800226a:	4b08      	ldr	r3, [pc, #32]	@ (800228c <MX_USART2_UART_Init+0x4c>)
 800226c:	2200      	movs	r2, #0
 800226e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002270:	4b06      	ldr	r3, [pc, #24]	@ (800228c <MX_USART2_UART_Init+0x4c>)
 8002272:	2200      	movs	r2, #0
 8002274:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002276:	4805      	ldr	r0, [pc, #20]	@ (800228c <MX_USART2_UART_Init+0x4c>)
 8002278:	f004 fa54 	bl	8006724 <HAL_UART_Init>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002282:	f7ff fb6f 	bl	8001964 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002286:	bf00      	nop
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	20000830 	.word	0x20000830
 8002290:	40004400 	.word	0x40004400

08002294 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002298:	4b11      	ldr	r3, [pc, #68]	@ (80022e0 <MX_USART3_UART_Init+0x4c>)
 800229a:	4a12      	ldr	r2, [pc, #72]	@ (80022e4 <MX_USART3_UART_Init+0x50>)
 800229c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800229e:	4b10      	ldr	r3, [pc, #64]	@ (80022e0 <MX_USART3_UART_Init+0x4c>)
 80022a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80022a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80022a6:	4b0e      	ldr	r3, [pc, #56]	@ (80022e0 <MX_USART3_UART_Init+0x4c>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80022ac:	4b0c      	ldr	r3, [pc, #48]	@ (80022e0 <MX_USART3_UART_Init+0x4c>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80022b2:	4b0b      	ldr	r3, [pc, #44]	@ (80022e0 <MX_USART3_UART_Init+0x4c>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80022b8:	4b09      	ldr	r3, [pc, #36]	@ (80022e0 <MX_USART3_UART_Init+0x4c>)
 80022ba:	220c      	movs	r2, #12
 80022bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022be:	4b08      	ldr	r3, [pc, #32]	@ (80022e0 <MX_USART3_UART_Init+0x4c>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80022c4:	4b06      	ldr	r3, [pc, #24]	@ (80022e0 <MX_USART3_UART_Init+0x4c>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80022ca:	4805      	ldr	r0, [pc, #20]	@ (80022e0 <MX_USART3_UART_Init+0x4c>)
 80022cc:	f004 fa2a 	bl	8006724 <HAL_UART_Init>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80022d6:	f7ff fb45 	bl	8001964 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80022da:	bf00      	nop
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	20000878 	.word	0x20000878
 80022e4:	40004800 	.word	0x40004800

080022e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b08c      	sub	sp, #48	@ 0x30
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f0:	f107 031c 	add.w	r3, r7, #28
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]
 80022f8:	605a      	str	r2, [r3, #4]
 80022fa:	609a      	str	r2, [r3, #8]
 80022fc:	60da      	str	r2, [r3, #12]
 80022fe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a97      	ldr	r2, [pc, #604]	@ (8002564 <HAL_UART_MspInit+0x27c>)
 8002306:	4293      	cmp	r3, r2
 8002308:	f040 8091 	bne.w	800242e <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800230c:	2300      	movs	r3, #0
 800230e:	61bb      	str	r3, [r7, #24]
 8002310:	4b95      	ldr	r3, [pc, #596]	@ (8002568 <HAL_UART_MspInit+0x280>)
 8002312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002314:	4a94      	ldr	r2, [pc, #592]	@ (8002568 <HAL_UART_MspInit+0x280>)
 8002316:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800231a:	6413      	str	r3, [r2, #64]	@ 0x40
 800231c:	4b92      	ldr	r3, [pc, #584]	@ (8002568 <HAL_UART_MspInit+0x280>)
 800231e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002320:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002324:	61bb      	str	r3, [r7, #24]
 8002326:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002328:	2300      	movs	r3, #0
 800232a:	617b      	str	r3, [r7, #20]
 800232c:	4b8e      	ldr	r3, [pc, #568]	@ (8002568 <HAL_UART_MspInit+0x280>)
 800232e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002330:	4a8d      	ldr	r2, [pc, #564]	@ (8002568 <HAL_UART_MspInit+0x280>)
 8002332:	f043 0301 	orr.w	r3, r3, #1
 8002336:	6313      	str	r3, [r2, #48]	@ 0x30
 8002338:	4b8b      	ldr	r3, [pc, #556]	@ (8002568 <HAL_UART_MspInit+0x280>)
 800233a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800233c:	f003 0301 	and.w	r3, r3, #1
 8002340:	617b      	str	r3, [r7, #20]
 8002342:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002344:	230c      	movs	r3, #12
 8002346:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002348:	2302      	movs	r3, #2
 800234a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234c:	2300      	movs	r3, #0
 800234e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002350:	2303      	movs	r3, #3
 8002352:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002354:	2307      	movs	r3, #7
 8002356:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002358:	f107 031c 	add.w	r3, r7, #28
 800235c:	4619      	mov	r1, r3
 800235e:	4883      	ldr	r0, [pc, #524]	@ (800256c <HAL_UART_MspInit+0x284>)
 8002360:	f001 fbb6 	bl	8003ad0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002364:	4b82      	ldr	r3, [pc, #520]	@ (8002570 <HAL_UART_MspInit+0x288>)
 8002366:	4a83      	ldr	r2, [pc, #524]	@ (8002574 <HAL_UART_MspInit+0x28c>)
 8002368:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800236a:	4b81      	ldr	r3, [pc, #516]	@ (8002570 <HAL_UART_MspInit+0x288>)
 800236c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002370:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002372:	4b7f      	ldr	r3, [pc, #508]	@ (8002570 <HAL_UART_MspInit+0x288>)
 8002374:	2200      	movs	r2, #0
 8002376:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002378:	4b7d      	ldr	r3, [pc, #500]	@ (8002570 <HAL_UART_MspInit+0x288>)
 800237a:	2200      	movs	r2, #0
 800237c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800237e:	4b7c      	ldr	r3, [pc, #496]	@ (8002570 <HAL_UART_MspInit+0x288>)
 8002380:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002384:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002386:	4b7a      	ldr	r3, [pc, #488]	@ (8002570 <HAL_UART_MspInit+0x288>)
 8002388:	2200      	movs	r2, #0
 800238a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800238c:	4b78      	ldr	r3, [pc, #480]	@ (8002570 <HAL_UART_MspInit+0x288>)
 800238e:	2200      	movs	r2, #0
 8002390:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002392:	4b77      	ldr	r3, [pc, #476]	@ (8002570 <HAL_UART_MspInit+0x288>)
 8002394:	2200      	movs	r2, #0
 8002396:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002398:	4b75      	ldr	r3, [pc, #468]	@ (8002570 <HAL_UART_MspInit+0x288>)
 800239a:	2200      	movs	r2, #0
 800239c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800239e:	4b74      	ldr	r3, [pc, #464]	@ (8002570 <HAL_UART_MspInit+0x288>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80023a4:	4872      	ldr	r0, [pc, #456]	@ (8002570 <HAL_UART_MspInit+0x288>)
 80023a6:	f000 ff91 	bl	80032cc <HAL_DMA_Init>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80023b0:	f7ff fad8 	bl	8001964 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4a6e      	ldr	r2, [pc, #440]	@ (8002570 <HAL_UART_MspInit+0x288>)
 80023b8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80023ba:	4a6d      	ldr	r2, [pc, #436]	@ (8002570 <HAL_UART_MspInit+0x288>)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80023c0:	4b6d      	ldr	r3, [pc, #436]	@ (8002578 <HAL_UART_MspInit+0x290>)
 80023c2:	4a6e      	ldr	r2, [pc, #440]	@ (800257c <HAL_UART_MspInit+0x294>)
 80023c4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80023c6:	4b6c      	ldr	r3, [pc, #432]	@ (8002578 <HAL_UART_MspInit+0x290>)
 80023c8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80023cc:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80023ce:	4b6a      	ldr	r3, [pc, #424]	@ (8002578 <HAL_UART_MspInit+0x290>)
 80023d0:	2240      	movs	r2, #64	@ 0x40
 80023d2:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023d4:	4b68      	ldr	r3, [pc, #416]	@ (8002578 <HAL_UART_MspInit+0x290>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80023da:	4b67      	ldr	r3, [pc, #412]	@ (8002578 <HAL_UART_MspInit+0x290>)
 80023dc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80023e0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023e2:	4b65      	ldr	r3, [pc, #404]	@ (8002578 <HAL_UART_MspInit+0x290>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023e8:	4b63      	ldr	r3, [pc, #396]	@ (8002578 <HAL_UART_MspInit+0x290>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80023ee:	4b62      	ldr	r3, [pc, #392]	@ (8002578 <HAL_UART_MspInit+0x290>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80023f4:	4b60      	ldr	r3, [pc, #384]	@ (8002578 <HAL_UART_MspInit+0x290>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023fa:	4b5f      	ldr	r3, [pc, #380]	@ (8002578 <HAL_UART_MspInit+0x290>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002400:	485d      	ldr	r0, [pc, #372]	@ (8002578 <HAL_UART_MspInit+0x290>)
 8002402:	f000 ff63 	bl	80032cc <HAL_DMA_Init>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d001      	beq.n	8002410 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 800240c:	f7ff faaa 	bl	8001964 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	4a59      	ldr	r2, [pc, #356]	@ (8002578 <HAL_UART_MspInit+0x290>)
 8002414:	639a      	str	r2, [r3, #56]	@ 0x38
 8002416:	4a58      	ldr	r2, [pc, #352]	@ (8002578 <HAL_UART_MspInit+0x290>)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 800241c:	2200      	movs	r2, #0
 800241e:	2103      	movs	r1, #3
 8002420:	2026      	movs	r0, #38	@ 0x26
 8002422:	f000 ff1c 	bl	800325e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002426:	2026      	movs	r0, #38	@ 0x26
 8002428:	f000 ff35 	bl	8003296 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800242c:	e096      	b.n	800255c <HAL_UART_MspInit+0x274>
  else if(uartHandle->Instance==USART3)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a53      	ldr	r2, [pc, #332]	@ (8002580 <HAL_UART_MspInit+0x298>)
 8002434:	4293      	cmp	r3, r2
 8002436:	f040 8091 	bne.w	800255c <HAL_UART_MspInit+0x274>
    __HAL_RCC_USART3_CLK_ENABLE();
 800243a:	2300      	movs	r3, #0
 800243c:	613b      	str	r3, [r7, #16]
 800243e:	4b4a      	ldr	r3, [pc, #296]	@ (8002568 <HAL_UART_MspInit+0x280>)
 8002440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002442:	4a49      	ldr	r2, [pc, #292]	@ (8002568 <HAL_UART_MspInit+0x280>)
 8002444:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002448:	6413      	str	r3, [r2, #64]	@ 0x40
 800244a:	4b47      	ldr	r3, [pc, #284]	@ (8002568 <HAL_UART_MspInit+0x280>)
 800244c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800244e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002452:	613b      	str	r3, [r7, #16]
 8002454:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002456:	2300      	movs	r3, #0
 8002458:	60fb      	str	r3, [r7, #12]
 800245a:	4b43      	ldr	r3, [pc, #268]	@ (8002568 <HAL_UART_MspInit+0x280>)
 800245c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800245e:	4a42      	ldr	r2, [pc, #264]	@ (8002568 <HAL_UART_MspInit+0x280>)
 8002460:	f043 0302 	orr.w	r3, r3, #2
 8002464:	6313      	str	r3, [r2, #48]	@ 0x30
 8002466:	4b40      	ldr	r3, [pc, #256]	@ (8002568 <HAL_UART_MspInit+0x280>)
 8002468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	60fb      	str	r3, [r7, #12]
 8002470:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002472:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002476:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002478:	2302      	movs	r3, #2
 800247a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247c:	2300      	movs	r3, #0
 800247e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002480:	2303      	movs	r3, #3
 8002482:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002484:	2307      	movs	r3, #7
 8002486:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002488:	f107 031c 	add.w	r3, r7, #28
 800248c:	4619      	mov	r1, r3
 800248e:	483d      	ldr	r0, [pc, #244]	@ (8002584 <HAL_UART_MspInit+0x29c>)
 8002490:	f001 fb1e 	bl	8003ad0 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002494:	4b3c      	ldr	r3, [pc, #240]	@ (8002588 <HAL_UART_MspInit+0x2a0>)
 8002496:	4a3d      	ldr	r2, [pc, #244]	@ (800258c <HAL_UART_MspInit+0x2a4>)
 8002498:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800249a:	4b3b      	ldr	r3, [pc, #236]	@ (8002588 <HAL_UART_MspInit+0x2a0>)
 800249c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80024a0:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024a2:	4b39      	ldr	r3, [pc, #228]	@ (8002588 <HAL_UART_MspInit+0x2a0>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024a8:	4b37      	ldr	r3, [pc, #220]	@ (8002588 <HAL_UART_MspInit+0x2a0>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80024ae:	4b36      	ldr	r3, [pc, #216]	@ (8002588 <HAL_UART_MspInit+0x2a0>)
 80024b0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80024b4:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024b6:	4b34      	ldr	r3, [pc, #208]	@ (8002588 <HAL_UART_MspInit+0x2a0>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024bc:	4b32      	ldr	r3, [pc, #200]	@ (8002588 <HAL_UART_MspInit+0x2a0>)
 80024be:	2200      	movs	r2, #0
 80024c0:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80024c2:	4b31      	ldr	r3, [pc, #196]	@ (8002588 <HAL_UART_MspInit+0x2a0>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80024c8:	4b2f      	ldr	r3, [pc, #188]	@ (8002588 <HAL_UART_MspInit+0x2a0>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024ce:	4b2e      	ldr	r3, [pc, #184]	@ (8002588 <HAL_UART_MspInit+0x2a0>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80024d4:	482c      	ldr	r0, [pc, #176]	@ (8002588 <HAL_UART_MspInit+0x2a0>)
 80024d6:	f000 fef9 	bl	80032cc <HAL_DMA_Init>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d001      	beq.n	80024e4 <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 80024e0:	f7ff fa40 	bl	8001964 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4a28      	ldr	r2, [pc, #160]	@ (8002588 <HAL_UART_MspInit+0x2a0>)
 80024e8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80024ea:	4a27      	ldr	r2, [pc, #156]	@ (8002588 <HAL_UART_MspInit+0x2a0>)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80024f0:	4b27      	ldr	r3, [pc, #156]	@ (8002590 <HAL_UART_MspInit+0x2a8>)
 80024f2:	4a28      	ldr	r2, [pc, #160]	@ (8002594 <HAL_UART_MspInit+0x2ac>)
 80024f4:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80024f6:	4b26      	ldr	r3, [pc, #152]	@ (8002590 <HAL_UART_MspInit+0x2a8>)
 80024f8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80024fc:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024fe:	4b24      	ldr	r3, [pc, #144]	@ (8002590 <HAL_UART_MspInit+0x2a8>)
 8002500:	2240      	movs	r2, #64	@ 0x40
 8002502:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002504:	4b22      	ldr	r3, [pc, #136]	@ (8002590 <HAL_UART_MspInit+0x2a8>)
 8002506:	2200      	movs	r2, #0
 8002508:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800250a:	4b21      	ldr	r3, [pc, #132]	@ (8002590 <HAL_UART_MspInit+0x2a8>)
 800250c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002510:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002512:	4b1f      	ldr	r3, [pc, #124]	@ (8002590 <HAL_UART_MspInit+0x2a8>)
 8002514:	2200      	movs	r2, #0
 8002516:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002518:	4b1d      	ldr	r3, [pc, #116]	@ (8002590 <HAL_UART_MspInit+0x2a8>)
 800251a:	2200      	movs	r2, #0
 800251c:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800251e:	4b1c      	ldr	r3, [pc, #112]	@ (8002590 <HAL_UART_MspInit+0x2a8>)
 8002520:	2200      	movs	r2, #0
 8002522:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002524:	4b1a      	ldr	r3, [pc, #104]	@ (8002590 <HAL_UART_MspInit+0x2a8>)
 8002526:	2200      	movs	r2, #0
 8002528:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800252a:	4b19      	ldr	r3, [pc, #100]	@ (8002590 <HAL_UART_MspInit+0x2a8>)
 800252c:	2200      	movs	r2, #0
 800252e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002530:	4817      	ldr	r0, [pc, #92]	@ (8002590 <HAL_UART_MspInit+0x2a8>)
 8002532:	f000 fecb 	bl	80032cc <HAL_DMA_Init>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d001      	beq.n	8002540 <HAL_UART_MspInit+0x258>
      Error_Handler();
 800253c:	f7ff fa12 	bl	8001964 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	4a13      	ldr	r2, [pc, #76]	@ (8002590 <HAL_UART_MspInit+0x2a8>)
 8002544:	639a      	str	r2, [r3, #56]	@ 0x38
 8002546:	4a12      	ldr	r2, [pc, #72]	@ (8002590 <HAL_UART_MspInit+0x2a8>)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800254c:	2200      	movs	r2, #0
 800254e:	2100      	movs	r1, #0
 8002550:	2027      	movs	r0, #39	@ 0x27
 8002552:	f000 fe84 	bl	800325e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002556:	2027      	movs	r0, #39	@ 0x27
 8002558:	f000 fe9d 	bl	8003296 <HAL_NVIC_EnableIRQ>
}
 800255c:	bf00      	nop
 800255e:	3730      	adds	r7, #48	@ 0x30
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	40004400 	.word	0x40004400
 8002568:	40023800 	.word	0x40023800
 800256c:	40020000 	.word	0x40020000
 8002570:	200008c0 	.word	0x200008c0
 8002574:	40026088 	.word	0x40026088
 8002578:	20000920 	.word	0x20000920
 800257c:	400260a0 	.word	0x400260a0
 8002580:	40004800 	.word	0x40004800
 8002584:	40020400 	.word	0x40020400
 8002588:	20000980 	.word	0x20000980
 800258c:	40026028 	.word	0x40026028
 8002590:	200009e0 	.word	0x200009e0
 8002594:	40026058 	.word	0x40026058

08002598 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002598:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80025d0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800259c:	f7ff fb56 	bl	8001c4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025a0:	480c      	ldr	r0, [pc, #48]	@ (80025d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80025a2:	490d      	ldr	r1, [pc, #52]	@ (80025d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80025a4:	4a0d      	ldr	r2, [pc, #52]	@ (80025dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80025a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025a8:	e002      	b.n	80025b0 <LoopCopyDataInit>

080025aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025ae:	3304      	adds	r3, #4

080025b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025b4:	d3f9      	bcc.n	80025aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025b6:	4a0a      	ldr	r2, [pc, #40]	@ (80025e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80025b8:	4c0a      	ldr	r4, [pc, #40]	@ (80025e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80025ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025bc:	e001      	b.n	80025c2 <LoopFillZerobss>

080025be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025c0:	3204      	adds	r2, #4

080025c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025c4:	d3fb      	bcc.n	80025be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80025c6:	f006 fafd 	bl	8008bc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025ca:	f7fe fe75 	bl	80012b8 <main>
  bx  lr    
 80025ce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80025d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80025d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025d8:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 80025dc:	0800d69c 	.word	0x0800d69c
  ldr r2, =_sbss
 80025e0:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80025e4:	20001018 	.word	0x20001018

080025e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025e8:	e7fe      	b.n	80025e8 <ADC_IRQHandler>
	...

080025ec <OLED_Send>:
 * @param len 要发送的数据长度
 * @return None
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他平台时应根据实际情况修改此函数
 */
void OLED_Send(uint8_t *data, uint8_t len)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af02      	add	r7, sp, #8
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	460b      	mov	r3, r1
 80025f6:	70fb      	strb	r3, [r7, #3]
  HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, data, len, HAL_MAX_DELAY);
 80025f8:	78fb      	ldrb	r3, [r7, #3]
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002600:	9200      	str	r2, [sp, #0]
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	2178      	movs	r1, #120	@ 0x78
 8002606:	4803      	ldr	r0, [pc, #12]	@ (8002614 <OLED_Send+0x28>)
 8002608:	f001 fd5c 	bl	80040c4 <HAL_I2C_Master_Transmit>
}
 800260c:	bf00      	nop
 800260e:	3708      	adds	r7, #8
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	2000020c 	.word	0x2000020c

08002618 <OLED_SendCmd>:

/**
 * @brief 向OLED发送指令
 */
void OLED_SendCmd(uint8_t cmd)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	4603      	mov	r3, r0
 8002620:	71fb      	strb	r3, [r7, #7]
  static uint8_t sendBuffer[2] = {0};
  sendBuffer[1] = cmd;
 8002622:	4a05      	ldr	r2, [pc, #20]	@ (8002638 <OLED_SendCmd+0x20>)
 8002624:	79fb      	ldrb	r3, [r7, #7]
 8002626:	7053      	strb	r3, [r2, #1]
  OLED_Send(sendBuffer, 2);
 8002628:	2102      	movs	r1, #2
 800262a:	4803      	ldr	r0, [pc, #12]	@ (8002638 <OLED_SendCmd+0x20>)
 800262c:	f7ff ffde 	bl	80025ec <OLED_Send>
}
 8002630:	bf00      	nop
 8002632:	3708      	adds	r7, #8
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	20000e40 	.word	0x20000e40

0800263c <OLED_Init>:
/**
 * @brief 初始化OLED (SSD1306)
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_Init()
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  OLED_SendCmd(0xAE); /*关闭显示 display off*/
 8002640:	20ae      	movs	r0, #174	@ 0xae
 8002642:	f7ff ffe9 	bl	8002618 <OLED_SendCmd>

  OLED_SendCmd(0x20);
 8002646:	2020      	movs	r0, #32
 8002648:	f7ff ffe6 	bl	8002618 <OLED_SendCmd>
  OLED_SendCmd(0x10);
 800264c:	2010      	movs	r0, #16
 800264e:	f7ff ffe3 	bl	8002618 <OLED_SendCmd>

  OLED_SendCmd(0xB0);
 8002652:	20b0      	movs	r0, #176	@ 0xb0
 8002654:	f7ff ffe0 	bl	8002618 <OLED_SendCmd>

  OLED_SendCmd(0xC8);
 8002658:	20c8      	movs	r0, #200	@ 0xc8
 800265a:	f7ff ffdd 	bl	8002618 <OLED_SendCmd>

  OLED_SendCmd(0x00);
 800265e:	2000      	movs	r0, #0
 8002660:	f7ff ffda 	bl	8002618 <OLED_SendCmd>
  OLED_SendCmd(0x10);
 8002664:	2010      	movs	r0, #16
 8002666:	f7ff ffd7 	bl	8002618 <OLED_SendCmd>

  OLED_SendCmd(0x40);
 800266a:	2040      	movs	r0, #64	@ 0x40
 800266c:	f7ff ffd4 	bl	8002618 <OLED_SendCmd>

  OLED_SendCmd(0x81);
 8002670:	2081      	movs	r0, #129	@ 0x81
 8002672:	f7ff ffd1 	bl	8002618 <OLED_SendCmd>

  OLED_SendCmd(0xDF);
 8002676:	20df      	movs	r0, #223	@ 0xdf
 8002678:	f7ff ffce 	bl	8002618 <OLED_SendCmd>
  OLED_SendCmd(0xA1);
 800267c:	20a1      	movs	r0, #161	@ 0xa1
 800267e:	f7ff ffcb 	bl	8002618 <OLED_SendCmd>

  OLED_SendCmd(0xA6);
 8002682:	20a6      	movs	r0, #166	@ 0xa6
 8002684:	f7ff ffc8 	bl	8002618 <OLED_SendCmd>
  OLED_SendCmd(0xA8);
 8002688:	20a8      	movs	r0, #168	@ 0xa8
 800268a:	f7ff ffc5 	bl	8002618 <OLED_SendCmd>

  OLED_SendCmd(0x3F);
 800268e:	203f      	movs	r0, #63	@ 0x3f
 8002690:	f7ff ffc2 	bl	8002618 <OLED_SendCmd>

  OLED_SendCmd(0xA4);
 8002694:	20a4      	movs	r0, #164	@ 0xa4
 8002696:	f7ff ffbf 	bl	8002618 <OLED_SendCmd>

  OLED_SendCmd(0xD3);
 800269a:	20d3      	movs	r0, #211	@ 0xd3
 800269c:	f7ff ffbc 	bl	8002618 <OLED_SendCmd>
  OLED_SendCmd(0x00);
 80026a0:	2000      	movs	r0, #0
 80026a2:	f7ff ffb9 	bl	8002618 <OLED_SendCmd>

  OLED_SendCmd(0xD5);
 80026a6:	20d5      	movs	r0, #213	@ 0xd5
 80026a8:	f7ff ffb6 	bl	8002618 <OLED_SendCmd>
  OLED_SendCmd(0xF0);
 80026ac:	20f0      	movs	r0, #240	@ 0xf0
 80026ae:	f7ff ffb3 	bl	8002618 <OLED_SendCmd>

  OLED_SendCmd(0xD9);
 80026b2:	20d9      	movs	r0, #217	@ 0xd9
 80026b4:	f7ff ffb0 	bl	8002618 <OLED_SendCmd>
  OLED_SendCmd(0x22);
 80026b8:	2022      	movs	r0, #34	@ 0x22
 80026ba:	f7ff ffad 	bl	8002618 <OLED_SendCmd>

  OLED_SendCmd(0xDA);
 80026be:	20da      	movs	r0, #218	@ 0xda
 80026c0:	f7ff ffaa 	bl	8002618 <OLED_SendCmd>
  OLED_SendCmd(0x12);
 80026c4:	2012      	movs	r0, #18
 80026c6:	f7ff ffa7 	bl	8002618 <OLED_SendCmd>

  OLED_SendCmd(0xDB);
 80026ca:	20db      	movs	r0, #219	@ 0xdb
 80026cc:	f7ff ffa4 	bl	8002618 <OLED_SendCmd>
  OLED_SendCmd(0x20);
 80026d0:	2020      	movs	r0, #32
 80026d2:	f7ff ffa1 	bl	8002618 <OLED_SendCmd>

  OLED_SendCmd(0x8D);
 80026d6:	208d      	movs	r0, #141	@ 0x8d
 80026d8:	f7ff ff9e 	bl	8002618 <OLED_SendCmd>
  OLED_SendCmd(0x14);
 80026dc:	2014      	movs	r0, #20
 80026de:	f7ff ff9b 	bl	8002618 <OLED_SendCmd>

  OLED_NewFrame();
 80026e2:	f000 f807 	bl	80026f4 <OLED_NewFrame>
  OLED_ShowFrame();
 80026e6:	f000 f811 	bl	800270c <OLED_ShowFrame>

  OLED_SendCmd(0xAF); /*开启显示 display ON*/
 80026ea:	20af      	movs	r0, #175	@ 0xaf
 80026ec:	f7ff ff94 	bl	8002618 <OLED_SendCmd>
}
 80026f0:	bf00      	nop
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <OLED_NewFrame>:

/**
 * @brief 清空显存 绘制新的一帧
 */
void OLED_NewFrame()
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
  memset(OLED_GRAM, 0, sizeof(OLED_GRAM));
 80026f8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80026fc:	2100      	movs	r1, #0
 80026fe:	4802      	ldr	r0, [pc, #8]	@ (8002708 <OLED_NewFrame+0x14>)
 8002700:	f006 fa07 	bl	8008b12 <memset>
}
 8002704:	bf00      	nop
 8002706:	bd80      	pop	{r7, pc}
 8002708:	20000a40 	.word	0x20000a40

0800270c <OLED_ShowFrame>:
/**
 * @brief 将当前显存显示到屏幕上
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_ShowFrame()
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
  static uint8_t sendBuffer[OLED_COLUMN + 1];
  sendBuffer[0] = 0x40;
 8002712:	4b15      	ldr	r3, [pc, #84]	@ (8002768 <OLED_ShowFrame+0x5c>)
 8002714:	2240      	movs	r2, #64	@ 0x40
 8002716:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < OLED_PAGE; i++)
 8002718:	2300      	movs	r3, #0
 800271a:	71fb      	strb	r3, [r7, #7]
 800271c:	e01b      	b.n	8002756 <OLED_ShowFrame+0x4a>
  {
    OLED_SendCmd(0xB0 + i); // 设置页地址
 800271e:	79fb      	ldrb	r3, [r7, #7]
 8002720:	3b50      	subs	r3, #80	@ 0x50
 8002722:	b2db      	uxtb	r3, r3
 8002724:	4618      	mov	r0, r3
 8002726:	f7ff ff77 	bl	8002618 <OLED_SendCmd>
    OLED_SendCmd(0x00);     // 设置列地址低4位
 800272a:	2000      	movs	r0, #0
 800272c:	f7ff ff74 	bl	8002618 <OLED_SendCmd>
    OLED_SendCmd(0x10);     // 设置列地址高4位
 8002730:	2010      	movs	r0, #16
 8002732:	f7ff ff71 	bl	8002618 <OLED_SendCmd>
    memcpy(sendBuffer + 1, OLED_GRAM[i], OLED_COLUMN);
 8002736:	480d      	ldr	r0, [pc, #52]	@ (800276c <OLED_ShowFrame+0x60>)
 8002738:	79fb      	ldrb	r3, [r7, #7]
 800273a:	01db      	lsls	r3, r3, #7
 800273c:	4a0c      	ldr	r2, [pc, #48]	@ (8002770 <OLED_ShowFrame+0x64>)
 800273e:	4413      	add	r3, r2
 8002740:	2280      	movs	r2, #128	@ 0x80
 8002742:	4619      	mov	r1, r3
 8002744:	f006 fa65 	bl	8008c12 <memcpy>
    OLED_Send(sendBuffer, OLED_COLUMN + 1);
 8002748:	2181      	movs	r1, #129	@ 0x81
 800274a:	4807      	ldr	r0, [pc, #28]	@ (8002768 <OLED_ShowFrame+0x5c>)
 800274c:	f7ff ff4e 	bl	80025ec <OLED_Send>
  for (uint8_t i = 0; i < OLED_PAGE; i++)
 8002750:	79fb      	ldrb	r3, [r7, #7]
 8002752:	3301      	adds	r3, #1
 8002754:	71fb      	strb	r3, [r7, #7]
 8002756:	79fb      	ldrb	r3, [r7, #7]
 8002758:	2b07      	cmp	r3, #7
 800275a:	d9e0      	bls.n	800271e <OLED_ShowFrame+0x12>
  }
}
 800275c:	bf00      	nop
 800275e:	bf00      	nop
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	20000e44 	.word	0x20000e44
 800276c:	20000e45 	.word	0x20000e45
 8002770:	20000a40 	.word	0x20000a40

08002774 <OLED_SetByte_Fine>:
 * @note 此函数将显存中的某一字节的第start位到第end位设置为与data相同
 * @note start和end的范围为0-7, start必须小于等于end
 * @note 此函数与OLED_SetByte_Fine的区别在于此函数只能设置显存中的某一真实字节
 */
void OLED_SetByte_Fine(uint8_t page, uint8_t column, uint8_t data, uint8_t start, uint8_t end, OLED_ColorMode color)
{
 8002774:	b490      	push	{r4, r7}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	4604      	mov	r4, r0
 800277c:	4608      	mov	r0, r1
 800277e:	4611      	mov	r1, r2
 8002780:	461a      	mov	r2, r3
 8002782:	4623      	mov	r3, r4
 8002784:	71fb      	strb	r3, [r7, #7]
 8002786:	4603      	mov	r3, r0
 8002788:	71bb      	strb	r3, [r7, #6]
 800278a:	460b      	mov	r3, r1
 800278c:	717b      	strb	r3, [r7, #5]
 800278e:	4613      	mov	r3, r2
 8002790:	713b      	strb	r3, [r7, #4]
  static uint8_t temp;
  if (page >= OLED_PAGE || column >= OLED_COLUMN)
 8002792:	79fb      	ldrb	r3, [r7, #7]
 8002794:	2b07      	cmp	r3, #7
 8002796:	d85f      	bhi.n	8002858 <OLED_SetByte_Fine+0xe4>
 8002798:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800279c:	2b00      	cmp	r3, #0
 800279e:	db5b      	blt.n	8002858 <OLED_SetByte_Fine+0xe4>
    return;
  if (color)
 80027a0:	7d3b      	ldrb	r3, [r7, #20]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d002      	beq.n	80027ac <OLED_SetByte_Fine+0x38>
    data = ~data;
 80027a6:	797b      	ldrb	r3, [r7, #5]
 80027a8:	43db      	mvns	r3, r3
 80027aa:	717b      	strb	r3, [r7, #5]

  temp = data | (0xff << (end + 1)) | (0xff >> (8 - start));
 80027ac:	7c3b      	ldrb	r3, [r7, #16]
 80027ae:	3301      	adds	r3, #1
 80027b0:	22ff      	movs	r2, #255	@ 0xff
 80027b2:	fa02 f303 	lsl.w	r3, r2, r3
 80027b6:	b25a      	sxtb	r2, r3
 80027b8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80027bc:	4313      	orrs	r3, r2
 80027be:	b25a      	sxtb	r2, r3
 80027c0:	793b      	ldrb	r3, [r7, #4]
 80027c2:	f1c3 0308 	rsb	r3, r3, #8
 80027c6:	21ff      	movs	r1, #255	@ 0xff
 80027c8:	fa41 f303 	asr.w	r3, r1, r3
 80027cc:	b25b      	sxtb	r3, r3
 80027ce:	4313      	orrs	r3, r2
 80027d0:	b25b      	sxtb	r3, r3
 80027d2:	b2da      	uxtb	r2, r3
 80027d4:	4b23      	ldr	r3, [pc, #140]	@ (8002864 <OLED_SetByte_Fine+0xf0>)
 80027d6:	701a      	strb	r2, [r3, #0]
  OLED_GRAM[page][column] &= temp;
 80027d8:	79fa      	ldrb	r2, [r7, #7]
 80027da:	79bb      	ldrb	r3, [r7, #6]
 80027dc:	4922      	ldr	r1, [pc, #136]	@ (8002868 <OLED_SetByte_Fine+0xf4>)
 80027de:	01d2      	lsls	r2, r2, #7
 80027e0:	440a      	add	r2, r1
 80027e2:	4413      	add	r3, r2
 80027e4:	7818      	ldrb	r0, [r3, #0]
 80027e6:	4b1f      	ldr	r3, [pc, #124]	@ (8002864 <OLED_SetByte_Fine+0xf0>)
 80027e8:	7819      	ldrb	r1, [r3, #0]
 80027ea:	79fa      	ldrb	r2, [r7, #7]
 80027ec:	79bb      	ldrb	r3, [r7, #6]
 80027ee:	4001      	ands	r1, r0
 80027f0:	b2c8      	uxtb	r0, r1
 80027f2:	491d      	ldr	r1, [pc, #116]	@ (8002868 <OLED_SetByte_Fine+0xf4>)
 80027f4:	01d2      	lsls	r2, r2, #7
 80027f6:	440a      	add	r2, r1
 80027f8:	4413      	add	r3, r2
 80027fa:	4602      	mov	r2, r0
 80027fc:	701a      	strb	r2, [r3, #0]
  temp = data & ~(0xff << (end + 1)) & ~(0xff >> (8 - start));
 80027fe:	7c3b      	ldrb	r3, [r7, #16]
 8002800:	3301      	adds	r3, #1
 8002802:	22ff      	movs	r2, #255	@ 0xff
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	b25b      	sxtb	r3, r3
 800280a:	43db      	mvns	r3, r3
 800280c:	b25a      	sxtb	r2, r3
 800280e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002812:	4013      	ands	r3, r2
 8002814:	b25a      	sxtb	r2, r3
 8002816:	793b      	ldrb	r3, [r7, #4]
 8002818:	f1c3 0308 	rsb	r3, r3, #8
 800281c:	f06f 01ff 	mvn.w	r1, #255	@ 0xff
 8002820:	fa41 f303 	asr.w	r3, r1, r3
 8002824:	b25b      	sxtb	r3, r3
 8002826:	4013      	ands	r3, r2
 8002828:	b25b      	sxtb	r3, r3
 800282a:	b2da      	uxtb	r2, r3
 800282c:	4b0d      	ldr	r3, [pc, #52]	@ (8002864 <OLED_SetByte_Fine+0xf0>)
 800282e:	701a      	strb	r2, [r3, #0]
  OLED_GRAM[page][column] |= temp;
 8002830:	79fa      	ldrb	r2, [r7, #7]
 8002832:	79bb      	ldrb	r3, [r7, #6]
 8002834:	490c      	ldr	r1, [pc, #48]	@ (8002868 <OLED_SetByte_Fine+0xf4>)
 8002836:	01d2      	lsls	r2, r2, #7
 8002838:	440a      	add	r2, r1
 800283a:	4413      	add	r3, r2
 800283c:	7818      	ldrb	r0, [r3, #0]
 800283e:	4b09      	ldr	r3, [pc, #36]	@ (8002864 <OLED_SetByte_Fine+0xf0>)
 8002840:	7819      	ldrb	r1, [r3, #0]
 8002842:	79fa      	ldrb	r2, [r7, #7]
 8002844:	79bb      	ldrb	r3, [r7, #6]
 8002846:	4301      	orrs	r1, r0
 8002848:	b2c8      	uxtb	r0, r1
 800284a:	4907      	ldr	r1, [pc, #28]	@ (8002868 <OLED_SetByte_Fine+0xf4>)
 800284c:	01d2      	lsls	r2, r2, #7
 800284e:	440a      	add	r2, r1
 8002850:	4413      	add	r3, r2
 8002852:	4602      	mov	r2, r0
 8002854:	701a      	strb	r2, [r3, #0]
 8002856:	e000      	b.n	800285a <OLED_SetByte_Fine+0xe6>
    return;
 8002858:	bf00      	nop
  // 使用OLED_SetPixel实现
  // for (uint8_t i = start; i <= end; i++) {
  //   OLED_SetPixel(column, page * 8 + i, !((data >> i) & 0x01));
  // }
}
 800285a:	3708      	adds	r7, #8
 800285c:	46bd      	mov	sp, r7
 800285e:	bc90      	pop	{r4, r7}
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	20000ec5 	.word	0x20000ec5
 8002868:	20000a40 	.word	0x20000a40

0800286c <OLED_SetBits_Fine>:
 * @note 此函数将显存中从(x,y)开始向下数len位设置为与data相同
 * @note len的范围为1-8
 * @note 此函数与OLED_SetByte_Fine的区别在于此函数的横坐标和纵坐标是以像素为单位的, 可能出现跨两个真实字节的情况(跨页)
 */
void OLED_SetBits_Fine(uint8_t x, uint8_t y, uint8_t data, uint8_t len, OLED_ColorMode color)
{
 800286c:	b5b0      	push	{r4, r5, r7, lr}
 800286e:	b086      	sub	sp, #24
 8002870:	af02      	add	r7, sp, #8
 8002872:	4604      	mov	r4, r0
 8002874:	4608      	mov	r0, r1
 8002876:	4611      	mov	r1, r2
 8002878:	461a      	mov	r2, r3
 800287a:	4623      	mov	r3, r4
 800287c:	71fb      	strb	r3, [r7, #7]
 800287e:	4603      	mov	r3, r0
 8002880:	71bb      	strb	r3, [r7, #6]
 8002882:	460b      	mov	r3, r1
 8002884:	717b      	strb	r3, [r7, #5]
 8002886:	4613      	mov	r3, r2
 8002888:	713b      	strb	r3, [r7, #4]
  uint8_t page = y / 8;
 800288a:	79bb      	ldrb	r3, [r7, #6]
 800288c:	08db      	lsrs	r3, r3, #3
 800288e:	73fb      	strb	r3, [r7, #15]
  uint8_t bit = y % 8;
 8002890:	79bb      	ldrb	r3, [r7, #6]
 8002892:	f003 0307 	and.w	r3, r3, #7
 8002896:	73bb      	strb	r3, [r7, #14]
  if (bit + len > 8)
 8002898:	7bba      	ldrb	r2, [r7, #14]
 800289a:	793b      	ldrb	r3, [r7, #4]
 800289c:	4413      	add	r3, r2
 800289e:	2b08      	cmp	r3, #8
 80028a0:	dd29      	ble.n	80028f6 <OLED_SetBits_Fine+0x8a>
  {
    OLED_SetByte_Fine(page, x, data << bit, bit, 7, color);
 80028a2:	797a      	ldrb	r2, [r7, #5]
 80028a4:	7bbb      	ldrb	r3, [r7, #14]
 80028a6:	fa02 f303 	lsl.w	r3, r2, r3
 80028aa:	b2da      	uxtb	r2, r3
 80028ac:	7bbc      	ldrb	r4, [r7, #14]
 80028ae:	79f9      	ldrb	r1, [r7, #7]
 80028b0:	7bf8      	ldrb	r0, [r7, #15]
 80028b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80028b6:	9301      	str	r3, [sp, #4]
 80028b8:	2307      	movs	r3, #7
 80028ba:	9300      	str	r3, [sp, #0]
 80028bc:	4623      	mov	r3, r4
 80028be:	f7ff ff59 	bl	8002774 <OLED_SetByte_Fine>
    OLED_SetByte_Fine(page + 1, x, data >> (8 - bit), 0, len + bit - 1 - 8, color);
 80028c2:	7bfb      	ldrb	r3, [r7, #15]
 80028c4:	3301      	adds	r3, #1
 80028c6:	b2d8      	uxtb	r0, r3
 80028c8:	797a      	ldrb	r2, [r7, #5]
 80028ca:	7bbb      	ldrb	r3, [r7, #14]
 80028cc:	f1c3 0308 	rsb	r3, r3, #8
 80028d0:	fa42 f303 	asr.w	r3, r2, r3
 80028d4:	b2dc      	uxtb	r4, r3
 80028d6:	793a      	ldrb	r2, [r7, #4]
 80028d8:	7bbb      	ldrb	r3, [r7, #14]
 80028da:	4413      	add	r3, r2
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	3b09      	subs	r3, #9
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	79f9      	ldrb	r1, [r7, #7]
 80028e4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80028e8:	9201      	str	r2, [sp, #4]
 80028ea:	9300      	str	r3, [sp, #0]
 80028ec:	2300      	movs	r3, #0
 80028ee:	4622      	mov	r2, r4
 80028f0:	f7ff ff40 	bl	8002774 <OLED_SetByte_Fine>
  }
  // 使用OLED_SetPixel实现
  // for (uint8_t i = 0; i < len; i++) {
  //   OLED_SetPixel(x, y + i, !((data >> i) & 0x01));
  // }
}
 80028f4:	e015      	b.n	8002922 <OLED_SetBits_Fine+0xb6>
    OLED_SetByte_Fine(page, x, data << bit, bit, bit + len - 1, color);
 80028f6:	797a      	ldrb	r2, [r7, #5]
 80028f8:	7bbb      	ldrb	r3, [r7, #14]
 80028fa:	fa02 f303 	lsl.w	r3, r2, r3
 80028fe:	b2dc      	uxtb	r4, r3
 8002900:	7bba      	ldrb	r2, [r7, #14]
 8002902:	793b      	ldrb	r3, [r7, #4]
 8002904:	4413      	add	r3, r2
 8002906:	b2db      	uxtb	r3, r3
 8002908:	3b01      	subs	r3, #1
 800290a:	b2db      	uxtb	r3, r3
 800290c:	7bbd      	ldrb	r5, [r7, #14]
 800290e:	79f9      	ldrb	r1, [r7, #7]
 8002910:	7bf8      	ldrb	r0, [r7, #15]
 8002912:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002916:	9201      	str	r2, [sp, #4]
 8002918:	9300      	str	r3, [sp, #0]
 800291a:	462b      	mov	r3, r5
 800291c:	4622      	mov	r2, r4
 800291e:	f7ff ff29 	bl	8002774 <OLED_SetByte_Fine>
}
 8002922:	bf00      	nop
 8002924:	3710      	adds	r7, #16
 8002926:	46bd      	mov	sp, r7
 8002928:	bdb0      	pop	{r4, r5, r7, pc}

0800292a <OLED_SetBits>:
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始向下数8位设置为与data相同
 * @note 此函数与OLED_SetByte的区别在于此函数的横坐标和纵坐标是以像素为单位的, 可能出现跨两个真实字节的情况(跨页)
 */
void OLED_SetBits(uint8_t x, uint8_t y, uint8_t data, OLED_ColorMode color)
{
 800292a:	b590      	push	{r4, r7, lr}
 800292c:	b087      	sub	sp, #28
 800292e:	af02      	add	r7, sp, #8
 8002930:	4604      	mov	r4, r0
 8002932:	4608      	mov	r0, r1
 8002934:	4611      	mov	r1, r2
 8002936:	461a      	mov	r2, r3
 8002938:	4623      	mov	r3, r4
 800293a:	71fb      	strb	r3, [r7, #7]
 800293c:	4603      	mov	r3, r0
 800293e:	71bb      	strb	r3, [r7, #6]
 8002940:	460b      	mov	r3, r1
 8002942:	717b      	strb	r3, [r7, #5]
 8002944:	4613      	mov	r3, r2
 8002946:	713b      	strb	r3, [r7, #4]
  uint8_t page = y / 8;
 8002948:	79bb      	ldrb	r3, [r7, #6]
 800294a:	08db      	lsrs	r3, r3, #3
 800294c:	73fb      	strb	r3, [r7, #15]
  uint8_t bit = y % 8;
 800294e:	79bb      	ldrb	r3, [r7, #6]
 8002950:	f003 0307 	and.w	r3, r3, #7
 8002954:	73bb      	strb	r3, [r7, #14]
  OLED_SetByte_Fine(page, x, data << bit, bit, 7, color);
 8002956:	797a      	ldrb	r2, [r7, #5]
 8002958:	7bbb      	ldrb	r3, [r7, #14]
 800295a:	fa02 f303 	lsl.w	r3, r2, r3
 800295e:	b2da      	uxtb	r2, r3
 8002960:	7bbc      	ldrb	r4, [r7, #14]
 8002962:	79f9      	ldrb	r1, [r7, #7]
 8002964:	7bf8      	ldrb	r0, [r7, #15]
 8002966:	793b      	ldrb	r3, [r7, #4]
 8002968:	9301      	str	r3, [sp, #4]
 800296a:	2307      	movs	r3, #7
 800296c:	9300      	str	r3, [sp, #0]
 800296e:	4623      	mov	r3, r4
 8002970:	f7ff ff00 	bl	8002774 <OLED_SetByte_Fine>
  if (bit)
 8002974:	7bbb      	ldrb	r3, [r7, #14]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d014      	beq.n	80029a4 <OLED_SetBits+0x7a>
  {
    OLED_SetByte_Fine(page + 1, x, data >> (8 - bit), 0, bit - 1, color);
 800297a:	7bfb      	ldrb	r3, [r7, #15]
 800297c:	3301      	adds	r3, #1
 800297e:	b2d8      	uxtb	r0, r3
 8002980:	797a      	ldrb	r2, [r7, #5]
 8002982:	7bbb      	ldrb	r3, [r7, #14]
 8002984:	f1c3 0308 	rsb	r3, r3, #8
 8002988:	fa42 f303 	asr.w	r3, r2, r3
 800298c:	b2dc      	uxtb	r4, r3
 800298e:	7bbb      	ldrb	r3, [r7, #14]
 8002990:	3b01      	subs	r3, #1
 8002992:	b2db      	uxtb	r3, r3
 8002994:	79f9      	ldrb	r1, [r7, #7]
 8002996:	793a      	ldrb	r2, [r7, #4]
 8002998:	9201      	str	r2, [sp, #4]
 800299a:	9300      	str	r3, [sp, #0]
 800299c:	2300      	movs	r3, #0
 800299e:	4622      	mov	r2, r4
 80029a0:	f7ff fee8 	bl	8002774 <OLED_SetByte_Fine>
  }
}
 80029a4:	bf00      	nop
 80029a6:	3714      	adds	r7, #20
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd90      	pop	{r4, r7, pc}

080029ac <OLED_SetBlock>:
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始的w*h个像素设置为data中的数据
 * @note data的数据应该采用列行式排列
 */
void OLED_SetBlock(uint8_t x, uint8_t y, const uint8_t *data, uint8_t w, uint8_t h, OLED_ColorMode color)
{
 80029ac:	b590      	push	{r4, r7, lr}
 80029ae:	b087      	sub	sp, #28
 80029b0:	af02      	add	r7, sp, #8
 80029b2:	603a      	str	r2, [r7, #0]
 80029b4:	461a      	mov	r2, r3
 80029b6:	4603      	mov	r3, r0
 80029b8:	71fb      	strb	r3, [r7, #7]
 80029ba:	460b      	mov	r3, r1
 80029bc:	71bb      	strb	r3, [r7, #6]
 80029be:	4613      	mov	r3, r2
 80029c0:	717b      	strb	r3, [r7, #5]
  uint8_t fullRow = h / 8; // 完整的行数
 80029c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80029c6:	08db      	lsrs	r3, r3, #3
 80029c8:	733b      	strb	r3, [r7, #12]
  uint8_t partBit = h % 8; // 不完整的字节中的有效位数
 80029ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 80029ce:	f003 0307 	and.w	r3, r3, #7
 80029d2:	72fb      	strb	r3, [r7, #11]
  for (uint8_t i = 0; i < w; i++)
 80029d4:	2300      	movs	r3, #0
 80029d6:	73fb      	strb	r3, [r7, #15]
 80029d8:	e025      	b.n	8002a26 <OLED_SetBlock+0x7a>
  {
    for (uint8_t j = 0; j < fullRow; j++)
 80029da:	2300      	movs	r3, #0
 80029dc:	73bb      	strb	r3, [r7, #14]
 80029de:	e01b      	b.n	8002a18 <OLED_SetBlock+0x6c>
    {
      OLED_SetBits(x + i, y + j * 8, data[i + j * w], color);
 80029e0:	79fa      	ldrb	r2, [r7, #7]
 80029e2:	7bfb      	ldrb	r3, [r7, #15]
 80029e4:	4413      	add	r3, r2
 80029e6:	b2d8      	uxtb	r0, r3
 80029e8:	7bbb      	ldrb	r3, [r7, #14]
 80029ea:	00db      	lsls	r3, r3, #3
 80029ec:	b2da      	uxtb	r2, r3
 80029ee:	79bb      	ldrb	r3, [r7, #6]
 80029f0:	4413      	add	r3, r2
 80029f2:	b2dc      	uxtb	r4, r3
 80029f4:	7bfa      	ldrb	r2, [r7, #15]
 80029f6:	7bbb      	ldrb	r3, [r7, #14]
 80029f8:	7979      	ldrb	r1, [r7, #5]
 80029fa:	fb01 f303 	mul.w	r3, r1, r3
 80029fe:	4413      	add	r3, r2
 8002a00:	461a      	mov	r2, r3
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	4413      	add	r3, r2
 8002a06:	781a      	ldrb	r2, [r3, #0]
 8002a08:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002a0c:	4621      	mov	r1, r4
 8002a0e:	f7ff ff8c 	bl	800292a <OLED_SetBits>
    for (uint8_t j = 0; j < fullRow; j++)
 8002a12:	7bbb      	ldrb	r3, [r7, #14]
 8002a14:	3301      	adds	r3, #1
 8002a16:	73bb      	strb	r3, [r7, #14]
 8002a18:	7bba      	ldrb	r2, [r7, #14]
 8002a1a:	7b3b      	ldrb	r3, [r7, #12]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d3df      	bcc.n	80029e0 <OLED_SetBlock+0x34>
  for (uint8_t i = 0; i < w; i++)
 8002a20:	7bfb      	ldrb	r3, [r7, #15]
 8002a22:	3301      	adds	r3, #1
 8002a24:	73fb      	strb	r3, [r7, #15]
 8002a26:	7bfa      	ldrb	r2, [r7, #15]
 8002a28:	797b      	ldrb	r3, [r7, #5]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d3d5      	bcc.n	80029da <OLED_SetBlock+0x2e>
    }
  }
  if (partBit)
 8002a2e:	7afb      	ldrb	r3, [r7, #11]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d028      	beq.n	8002a86 <OLED_SetBlock+0xda>
  {
    uint16_t fullNum = w * fullRow; // 完整的字节数
 8002a34:	797b      	ldrb	r3, [r7, #5]
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	7b3b      	ldrb	r3, [r7, #12]
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	fb12 f303 	smulbb	r3, r2, r3
 8002a40:	813b      	strh	r3, [r7, #8]
    for (uint8_t i = 0; i < w; i++)
 8002a42:	2300      	movs	r3, #0
 8002a44:	737b      	strb	r3, [r7, #13]
 8002a46:	e01a      	b.n	8002a7e <OLED_SetBlock+0xd2>
    {
      OLED_SetBits_Fine(x + i, y + (fullRow * 8), data[fullNum + i], partBit, color);
 8002a48:	79fa      	ldrb	r2, [r7, #7]
 8002a4a:	7b7b      	ldrb	r3, [r7, #13]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	b2d8      	uxtb	r0, r3
 8002a50:	7b3b      	ldrb	r3, [r7, #12]
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	b2da      	uxtb	r2, r3
 8002a56:	79bb      	ldrb	r3, [r7, #6]
 8002a58:	4413      	add	r3, r2
 8002a5a:	b2d9      	uxtb	r1, r3
 8002a5c:	893a      	ldrh	r2, [r7, #8]
 8002a5e:	7b7b      	ldrb	r3, [r7, #13]
 8002a60:	4413      	add	r3, r2
 8002a62:	461a      	mov	r2, r3
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	4413      	add	r3, r2
 8002a68:	781a      	ldrb	r2, [r3, #0]
 8002a6a:	7afc      	ldrb	r4, [r7, #11]
 8002a6c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002a70:	9300      	str	r3, [sp, #0]
 8002a72:	4623      	mov	r3, r4
 8002a74:	f7ff fefa 	bl	800286c <OLED_SetBits_Fine>
    for (uint8_t i = 0; i < w; i++)
 8002a78:	7b7b      	ldrb	r3, [r7, #13]
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	737b      	strb	r3, [r7, #13]
 8002a7e:	7b7a      	ldrb	r2, [r7, #13]
 8002a80:	797b      	ldrb	r3, [r7, #5]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d3e0      	bcc.n	8002a48 <OLED_SetBlock+0x9c>
  //       if (j * 8 + k >= h) break; // 防止越界(不完整的字节
  //       OLED_SetPixel(x + i, y + j * 8 + k, !((data[i + j * w] >> k) & 0x01));
  //     }
  //   }
  // }
}
 8002a86:	bf00      	nop
 8002a88:	3714      	adds	r7, #20
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd90      	pop	{r4, r7, pc}

08002a8e <OLED_PrintASCIIChar>:
 * @param ch 字符
 * @param font 字体
 * @param color 颜色
 */
void OLED_PrintASCIIChar(uint8_t x, uint8_t y, char ch, const ASCIIFont *font, OLED_ColorMode color)
{
 8002a8e:	b5b0      	push	{r4, r5, r7, lr}
 8002a90:	b084      	sub	sp, #16
 8002a92:	af02      	add	r7, sp, #8
 8002a94:	603b      	str	r3, [r7, #0]
 8002a96:	4603      	mov	r3, r0
 8002a98:	71fb      	strb	r3, [r7, #7]
 8002a9a:	460b      	mov	r3, r1
 8002a9c:	71bb      	strb	r3, [r7, #6]
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	717b      	strb	r3, [r7, #5]
  OLED_SetBlock(x, y, font->chars + (ch - ' ') * (((font->h + 7) / 8) * font->w), font->w, font->h, color);
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	685a      	ldr	r2, [r3, #4]
 8002aa6:	797b      	ldrb	r3, [r7, #5]
 8002aa8:	f1a3 0120 	sub.w	r1, r3, #32
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	3307      	adds	r3, #7
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	da00      	bge.n	8002ab8 <OLED_PrintASCIIChar+0x2a>
 8002ab6:	3307      	adds	r3, #7
 8002ab8:	10db      	asrs	r3, r3, #3
 8002aba:	4618      	mov	r0, r3
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	785b      	ldrb	r3, [r3, #1]
 8002ac0:	fb00 f303 	mul.w	r3, r0, r3
 8002ac4:	fb01 f303 	mul.w	r3, r1, r3
 8002ac8:	18d4      	adds	r4, r2, r3
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	785d      	ldrb	r5, [r3, #1]
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	79b9      	ldrb	r1, [r7, #6]
 8002ad4:	79f8      	ldrb	r0, [r7, #7]
 8002ad6:	7e3a      	ldrb	r2, [r7, #24]
 8002ad8:	9201      	str	r2, [sp, #4]
 8002ada:	9300      	str	r3, [sp, #0]
 8002adc:	462b      	mov	r3, r5
 8002ade:	4622      	mov	r2, r4
 8002ae0:	f7ff ff64 	bl	80029ac <OLED_SetBlock>
}
 8002ae4:	bf00      	nop
 8002ae6:	3708      	adds	r7, #8
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bdb0      	pop	{r4, r5, r7, pc}

08002aec <_OLED_GetUTF8Len>:

/**
 * @brief 获取UTF-8编码的字符长度
 */
uint8_t _OLED_GetUTF8Len(char *string)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  if ((string[0] & 0x80) == 0x00)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	b25b      	sxtb	r3, r3
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	db01      	blt.n	8002b02 <_OLED_GetUTF8Len+0x16>
  {
    return 1;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e018      	b.n	8002b34 <_OLED_GetUTF8Len+0x48>
  }
  else if ((string[0] & 0xE0) == 0xC0)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8002b0a:	2bc0      	cmp	r3, #192	@ 0xc0
 8002b0c:	d101      	bne.n	8002b12 <_OLED_GetUTF8Len+0x26>
  {
    return 2;
 8002b0e:	2302      	movs	r3, #2
 8002b10:	e010      	b.n	8002b34 <_OLED_GetUTF8Len+0x48>
  }
  else if ((string[0] & 0xF0) == 0xE0)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b1a:	2be0      	cmp	r3, #224	@ 0xe0
 8002b1c:	d101      	bne.n	8002b22 <_OLED_GetUTF8Len+0x36>
  {
    return 3;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e008      	b.n	8002b34 <_OLED_GetUTF8Len+0x48>
  }
  else if ((string[0] & 0xF8) == 0xF0)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8002b2a:	2bf0      	cmp	r3, #240	@ 0xf0
 8002b2c:	d101      	bne.n	8002b32 <_OLED_GetUTF8Len+0x46>
  {
    return 4;
 8002b2e:	2304      	movs	r3, #4
 8002b30:	e000      	b.n	8002b34 <_OLED_GetUTF8Len+0x48>
  }
  return 0;
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <OLED_PrintString>:
 * @note 为保证字符串中的中文会被自动识别并绘制, 需:
 * 1. 编译器字符集设置为UTF-8
 * 2. 使用波特律动LED取模工具生成字模(https://led.baud-dance.com)
 */
void OLED_PrintString(uint8_t x, uint8_t y, char *str, const Font *font, OLED_ColorMode color)
{
 8002b40:	b5b0      	push	{r4, r5, r7, lr}
 8002b42:	b08a      	sub	sp, #40	@ 0x28
 8002b44:	af02      	add	r7, sp, #8
 8002b46:	60ba      	str	r2, [r7, #8]
 8002b48:	607b      	str	r3, [r7, #4]
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	73fb      	strb	r3, [r7, #15]
 8002b4e:	460b      	mov	r3, r1
 8002b50:	73bb      	strb	r3, [r7, #14]
  uint16_t i = 0;                                       // 字符串索引
 8002b52:	2300      	movs	r3, #0
 8002b54:	83fb      	strh	r3, [r7, #30]
  uint8_t oneLen = (((font->h + 7) / 8) * font->w) + 4; // 一个字模占多少字节
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	3307      	adds	r3, #7
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	da00      	bge.n	8002b62 <OLED_PrintString+0x22>
 8002b60:	3307      	adds	r3, #7
 8002b62:	10db      	asrs	r3, r3, #3
 8002b64:	b2da      	uxtb	r2, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	785b      	ldrb	r3, [r3, #1]
 8002b6a:	fb12 f303 	smulbb	r3, r2, r3
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	3304      	adds	r3, #4
 8002b72:	76fb      	strb	r3, [r7, #27]
  uint8_t found;                                        // 是否找到字模
  uint8_t utf8Len;                                      // UTF-8编码长度
  uint8_t *head;                                        // 字模头指针
  while (str[i])
 8002b74:	e07d      	b.n	8002c72 <OLED_PrintString+0x132>
  {
    found = 0;
 8002b76:	2300      	movs	r3, #0
 8002b78:	777b      	strb	r3, [r7, #29]
    utf8Len = _OLED_GetUTF8Len(str + i);
 8002b7a:	8bfb      	ldrh	r3, [r7, #30]
 8002b7c:	68ba      	ldr	r2, [r7, #8]
 8002b7e:	4413      	add	r3, r2
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7ff ffb3 	bl	8002aec <_OLED_GetUTF8Len>
 8002b86:	4603      	mov	r3, r0
 8002b88:	76bb      	strb	r3, [r7, #26]
    if (utf8Len == 0)
 8002b8a:	7ebb      	ldrb	r3, [r7, #26]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d078      	beq.n	8002c82 <OLED_PrintString+0x142>
      break; // 有问题的UTF-8编码

    // 寻找字符  TODO 优化查找算法, 二分查找或者hash
    for (uint8_t j = 0; j < font->len; j++)
 8002b90:	2300      	movs	r3, #0
 8002b92:	773b      	strb	r3, [r7, #28]
 8002b94:	e032      	b.n	8002bfc <OLED_PrintString+0xbc>
    {
      head = (uint8_t *)(font->chars) + (j * oneLen);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	7f3a      	ldrb	r2, [r7, #28]
 8002b9c:	7ef9      	ldrb	r1, [r7, #27]
 8002b9e:	fb01 f202 	mul.w	r2, r1, r2
 8002ba2:	4413      	add	r3, r2
 8002ba4:	617b      	str	r3, [r7, #20]
      if (memcmp(str + i, head, utf8Len) == 0)
 8002ba6:	8bfb      	ldrh	r3, [r7, #30]
 8002ba8:	68ba      	ldr	r2, [r7, #8]
 8002baa:	4413      	add	r3, r2
 8002bac:	7eba      	ldrb	r2, [r7, #26]
 8002bae:	6979      	ldr	r1, [r7, #20]
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f005 ff9e 	bl	8008af2 <memcmp>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d11c      	bne.n	8002bf6 <OLED_PrintString+0xb6>
      {
        OLED_SetBlock(x, y, head + 4, font->w, font->h, color);
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	1d1c      	adds	r4, r3, #4
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	785d      	ldrb	r5, [r3, #1]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	7bb9      	ldrb	r1, [r7, #14]
 8002bca:	7bf8      	ldrb	r0, [r7, #15]
 8002bcc:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8002bd0:	9201      	str	r2, [sp, #4]
 8002bd2:	9300      	str	r3, [sp, #0]
 8002bd4:	462b      	mov	r3, r5
 8002bd6:	4622      	mov	r2, r4
 8002bd8:	f7ff fee8 	bl	80029ac <OLED_SetBlock>
        // 移动光标
        x += font->w;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	785a      	ldrb	r2, [r3, #1]
 8002be0:	7bfb      	ldrb	r3, [r7, #15]
 8002be2:	4413      	add	r3, r2
 8002be4:	73fb      	strb	r3, [r7, #15]
        i += utf8Len;
 8002be6:	7ebb      	ldrb	r3, [r7, #26]
 8002be8:	b29a      	uxth	r2, r3
 8002bea:	8bfb      	ldrh	r3, [r7, #30]
 8002bec:	4413      	add	r3, r2
 8002bee:	83fb      	strh	r3, [r7, #30]
        found = 1;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	777b      	strb	r3, [r7, #29]
        break;
 8002bf4:	e007      	b.n	8002c06 <OLED_PrintString+0xc6>
    for (uint8_t j = 0; j < font->len; j++)
 8002bf6:	7f3b      	ldrb	r3, [r7, #28]
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	773b      	strb	r3, [r7, #28]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	7a1b      	ldrb	r3, [r3, #8]
 8002c00:	7f3a      	ldrb	r2, [r7, #28]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d3c7      	bcc.n	8002b96 <OLED_PrintString+0x56>
      }
    }

    // 若未找到字模,且为ASCII字符, 则缺省显示ASCII字符
    if (found == 0)
 8002c06:	7f7b      	ldrb	r3, [r7, #29]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d132      	bne.n	8002c72 <OLED_PrintString+0x132>
    {
      if (utf8Len == 1)
 8002c0c:	7ebb      	ldrb	r3, [r7, #26]
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d119      	bne.n	8002c46 <OLED_PrintString+0x106>
      {
        OLED_PrintASCIIChar(x, y, str[i], font->ascii, color);
 8002c12:	8bfb      	ldrh	r3, [r7, #30]
 8002c14:	68ba      	ldr	r2, [r7, #8]
 8002c16:	4413      	add	r3, r2
 8002c18:	781a      	ldrb	r2, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	68dc      	ldr	r4, [r3, #12]
 8002c1e:	7bb9      	ldrb	r1, [r7, #14]
 8002c20:	7bf8      	ldrb	r0, [r7, #15]
 8002c22:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002c26:	9300      	str	r3, [sp, #0]
 8002c28:	4623      	mov	r3, r4
 8002c2a:	f7ff ff30 	bl	8002a8e <OLED_PrintASCIIChar>
        // 移动光标
        x += font->ascii->w;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	785a      	ldrb	r2, [r3, #1]
 8002c34:	7bfb      	ldrb	r3, [r7, #15]
 8002c36:	4413      	add	r3, r2
 8002c38:	73fb      	strb	r3, [r7, #15]
        i += utf8Len;
 8002c3a:	7ebb      	ldrb	r3, [r7, #26]
 8002c3c:	b29a      	uxth	r2, r3
 8002c3e:	8bfb      	ldrh	r3, [r7, #30]
 8002c40:	4413      	add	r3, r2
 8002c42:	83fb      	strh	r3, [r7, #30]
 8002c44:	e015      	b.n	8002c72 <OLED_PrintString+0x132>
      }
      else
      {
        OLED_PrintASCIIChar(x, y, ' ', font->ascii, color);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	68da      	ldr	r2, [r3, #12]
 8002c4a:	7bb9      	ldrb	r1, [r7, #14]
 8002c4c:	7bf8      	ldrb	r0, [r7, #15]
 8002c4e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002c52:	9300      	str	r3, [sp, #0]
 8002c54:	4613      	mov	r3, r2
 8002c56:	2220      	movs	r2, #32
 8002c58:	f7ff ff19 	bl	8002a8e <OLED_PrintASCIIChar>
        x += font->ascii->w;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	785a      	ldrb	r2, [r3, #1]
 8002c62:	7bfb      	ldrb	r3, [r7, #15]
 8002c64:	4413      	add	r3, r2
 8002c66:	73fb      	strb	r3, [r7, #15]
        i += utf8Len;
 8002c68:	7ebb      	ldrb	r3, [r7, #26]
 8002c6a:	b29a      	uxth	r2, r3
 8002c6c:	8bfb      	ldrh	r3, [r7, #30]
 8002c6e:	4413      	add	r3, r2
 8002c70:	83fb      	strh	r3, [r7, #30]
  while (str[i])
 8002c72:	8bfb      	ldrh	r3, [r7, #30]
 8002c74:	68ba      	ldr	r2, [r7, #8]
 8002c76:	4413      	add	r3, r2
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	f47f af7b 	bne.w	8002b76 <OLED_PrintString+0x36>
      }
    }
  }
}
 8002c80:	e000      	b.n	8002c84 <OLED_PrintString+0x144>
      break; // 有问题的UTF-8编码
 8002c82:	bf00      	nop
}
 8002c84:	bf00      	nop
 8002c86:	3720      	adds	r7, #32
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bdb0      	pop	{r4, r5, r7, pc}

08002c8c <Set_motor_pwmL>:
#include "pid.h"

void Set_motor_pwmL(float pwm){
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	ed87 0a01 	vstr	s0, [r7, #4]
	if(pwm<0)
 8002c96:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c9a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ca2:	d517      	bpl.n	8002cd4 <Set_motor_pwmL+0x48>
	{HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, ENABLE);
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002caa:	481b      	ldr	r0, [pc, #108]	@ (8002d18 <Set_motor_pwmL+0x8c>)
 8002cac:	f001 f8ac 	bl	8003e08 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, DISABLE);
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002cb6:	4818      	ldr	r0, [pc, #96]	@ (8002d18 <Set_motor_pwmL+0x8c>)
 8002cb8:	f001 f8a6 	bl	8003e08 <HAL_GPIO_WritePin>
	 __HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,-pwm);
 8002cbc:	edd7 7a01 	vldr	s15, [r7, #4]
 8002cc0:	eef1 7a67 	vneg.f32	s15, s15
 8002cc4:	4b15      	ldr	r3, [pc, #84]	@ (8002d1c <Set_motor_pwmL+0x90>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ccc:	ee17 2a90 	vmov	r2, s15
 8002cd0:	635a      	str	r2, [r3, #52]	@ 0x34
	else if(pwm>=0){
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, DISABLE);
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, ENABLE);
	 __HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,pwm);
	}
}
 8002cd2:	e01c      	b.n	8002d0e <Set_motor_pwmL+0x82>
	else if(pwm>=0){
 8002cd4:	edd7 7a01 	vldr	s15, [r7, #4]
 8002cd8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ce0:	da00      	bge.n	8002ce4 <Set_motor_pwmL+0x58>
}
 8002ce2:	e014      	b.n	8002d0e <Set_motor_pwmL+0x82>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, DISABLE);
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002cea:	480b      	ldr	r0, [pc, #44]	@ (8002d18 <Set_motor_pwmL+0x8c>)
 8002cec:	f001 f88c 	bl	8003e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, ENABLE);
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002cf6:	4808      	ldr	r0, [pc, #32]	@ (8002d18 <Set_motor_pwmL+0x8c>)
 8002cf8:	f001 f886 	bl	8003e08 <HAL_GPIO_WritePin>
	 __HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,pwm);
 8002cfc:	4b07      	ldr	r3, [pc, #28]	@ (8002d1c <Set_motor_pwmL+0x90>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d08:	ee17 2a90 	vmov	r2, s15
 8002d0c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002d0e:	bf00      	nop
 8002d10:	3708      	adds	r7, #8
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	40020c00 	.word	0x40020c00
 8002d1c:	200007e8 	.word	0x200007e8

08002d20 <Set_motor_pwmR>:



void Set_motor_pwmR(float pwm){
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	ed87 0a01 	vstr	s0, [r7, #4]
	if(pwm<0)
 8002d2a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d2e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d36:	d517      	bpl.n	8002d68 <Set_motor_pwmR+0x48>
	{HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, ENABLE);
 8002d38:	2201      	movs	r2, #1
 8002d3a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002d3e:	481b      	ldr	r0, [pc, #108]	@ (8002dac <Set_motor_pwmR+0x8c>)
 8002d40:	f001 f862 	bl	8003e08 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, DISABLE);
 8002d44:	2200      	movs	r2, #0
 8002d46:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002d4a:	4818      	ldr	r0, [pc, #96]	@ (8002dac <Set_motor_pwmR+0x8c>)
 8002d4c:	f001 f85c 	bl	8003e08 <HAL_GPIO_WritePin>
	 __HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_2,-pwm);
 8002d50:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d54:	eef1 7a67 	vneg.f32	s15, s15
 8002d58:	4b15      	ldr	r3, [pc, #84]	@ (8002db0 <Set_motor_pwmR+0x90>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d60:	ee17 2a90 	vmov	r2, s15
 8002d64:	639a      	str	r2, [r3, #56]	@ 0x38
	else if(pwm>=0){
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, DISABLE);
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, ENABLE);
	 __HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_2,pwm);
	}
}
 8002d66:	e01c      	b.n	8002da2 <Set_motor_pwmR+0x82>
	else if(pwm>=0){
 8002d68:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d6c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d74:	da00      	bge.n	8002d78 <Set_motor_pwmR+0x58>
}
 8002d76:	e014      	b.n	8002da2 <Set_motor_pwmR+0x82>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, DISABLE);
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002d7e:	480b      	ldr	r0, [pc, #44]	@ (8002dac <Set_motor_pwmR+0x8c>)
 8002d80:	f001 f842 	bl	8003e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, ENABLE);
 8002d84:	2201      	movs	r2, #1
 8002d86:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002d8a:	4808      	ldr	r0, [pc, #32]	@ (8002dac <Set_motor_pwmR+0x8c>)
 8002d8c:	f001 f83c 	bl	8003e08 <HAL_GPIO_WritePin>
	 __HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_2,pwm);
 8002d90:	4b07      	ldr	r3, [pc, #28]	@ (8002db0 <Set_motor_pwmR+0x90>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d9c:	ee17 2a90 	vmov	r2, s15
 8002da0:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8002da2:	bf00      	nop
 8002da4:	3708      	adds	r7, #8
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	40020c00 	.word	0x40020c00
 8002db0:	200007e8 	.word	0x200007e8

08002db4 <Set_motor_speedL>:



void Set_motor_speedL(PID *pid,float speed){
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	ed87 0a00 	vstr	s0, [r7]
	pid->target_val=speed;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	683a      	ldr	r2, [r7, #0]
 8002dc4:	601a      	str	r2, [r3, #0]
	Set_motor_pwmL(PosionPID_realize(pid,speednow));
 8002dc6:	4b0a      	ldr	r3, [pc, #40]	@ (8002df0 <Set_motor_speedL+0x3c>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	ee07 3a90 	vmov	s15, r3
 8002dce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002dd2:	eeb0 0a67 	vmov.f32	s0, s15
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 f84a 	bl	8002e70 <PosionPID_realize>
 8002ddc:	eef0 7a40 	vmov.f32	s15, s0
 8002de0:	eeb0 0a67 	vmov.f32	s0, s15
 8002de4:	f7ff ff52 	bl	8002c8c <Set_motor_pwmL>


}
 8002de8:	bf00      	nop
 8002dea:	3708      	adds	r7, #8
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	200006b8 	.word	0x200006b8

08002df4 <Set_motor_speedR>:

void Set_motor_speedR(PID *pid,float speed){
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	ed87 0a00 	vstr	s0, [r7]
	pid->target_val=speed;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	683a      	ldr	r2, [r7, #0]
 8002e04:	601a      	str	r2, [r3, #0]
	Set_motor_pwmR(PosionPID_realize(pid,speednow2));
 8002e06:	4b0a      	ldr	r3, [pc, #40]	@ (8002e30 <Set_motor_speedR+0x3c>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	ee07 3a90 	vmov	s15, r3
 8002e0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e12:	eeb0 0a67 	vmov.f32	s0, s15
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 f82a 	bl	8002e70 <PosionPID_realize>
 8002e1c:	eef0 7a40 	vmov.f32	s15, s0
 8002e20:	eeb0 0a67 	vmov.f32	s0, s15
 8002e24:	f7ff ff7c 	bl	8002d20 <Set_motor_pwmR>

}
 8002e28:	bf00      	nop
 8002e2a:	3708      	adds	r7, #8
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	200006c0 	.word	0x200006c0

08002e34 <PID_param_init>:
  * @brief  PID参数初始化
  *	@note 	无
  * @retval 无
  */
void PID_param_init(PID *pid,float target_val,float Kp,float Ki,float Kd)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b087      	sub	sp, #28
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6178      	str	r0, [r7, #20]
 8002e3c:	ed87 0a04 	vstr	s0, [r7, #16]
 8002e40:	edc7 0a03 	vstr	s1, [r7, #12]
 8002e44:	ed87 1a02 	vstr	s2, [r7, #8]
 8002e48:	edc7 1a01 	vstr	s3, [r7, #4]
	pid->target_val=target_val;
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	693a      	ldr	r2, [r7, #16]
 8002e50:	601a      	str	r2, [r3, #0]
	pid->Kp = Kp;
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	68fa      	ldr	r2, [r7, #12]
 8002e56:	611a      	str	r2, [r3, #16]
	pid->Ki = Ki;
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	68ba      	ldr	r2, [r7, #8]
 8002e5c:	615a      	str	r2, [r3, #20]
	pid->Kd = Kd;
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	619a      	str	r2, [r3, #24]


}
 8002e64:	bf00      	nop
 8002e66:	371c      	adds	r7, #28
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr

08002e70 <PosionPID_realize>:
  * @param  actual_val:实际测量值
  *	@note 	无
  * @retval 通过PID计算后的输出
  */
float PosionPID_realize(PID *pid, float actual_val)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	ed87 0a00 	vstr	s0, [r7]
	/*计算目标值与实际值的误差*/
	pid->Error = pid->target_val - actual_val;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	ed93 7a00 	vldr	s14, [r3]
 8002e82:	edd7 7a00 	vldr	s15, [r7]
 8002e86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	edc3 7a01 	vstr	s15, [r3, #4]
	/*积分项*/
	pid->integral += pid->Error;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	ed93 7a07 	vldr	s14, [r3, #28]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	edd3 7a01 	vldr	s15, [r3, #4]
 8002e9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	edc3 7a07 	vstr	s15, [r3, #28]
	if (pid->integral > 800 / pid->Ki) {
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	ed93 7a07 	vldr	s14, [r3, #28]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	edd3 6a05 	vldr	s13, [r3, #20]
 8002eb2:	ed9f 6a30 	vldr	s12, [pc, #192]	@ 8002f74 <PosionPID_realize+0x104>
 8002eb6:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002eba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ec2:	dd0a      	ble.n	8002eda <PosionPID_realize+0x6a>
	    pid->integral = 800 / pid->Ki;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	ed93 7a05 	vldr	s14, [r3, #20]
 8002eca:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8002f74 <PosionPID_realize+0x104>
 8002ece:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	edc3 7a07 	vstr	s15, [r3, #28]
 8002ed8:	e018      	b.n	8002f0c <PosionPID_realize+0x9c>
	} else if (pid->integral < -800 / pid->Ki) {
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	ed93 7a07 	vldr	s14, [r3, #28]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	edd3 6a05 	vldr	s13, [r3, #20]
 8002ee6:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 8002f78 <PosionPID_realize+0x108>
 8002eea:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002eee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ef6:	d509      	bpl.n	8002f0c <PosionPID_realize+0x9c>
	    pid->integral = -800 / pid->Ki;}
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	ed93 7a05 	vldr	s14, [r3, #20]
 8002efe:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8002f78 <PosionPID_realize+0x108>
 8002f02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	edc3 7a07 	vstr	s15, [r3, #28]
	/*PID算法实现*/
	pid->output_val = pid->Kp * pid->Error +
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	ed93 7a04 	vldr	s14, [r3, #16]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	edd3 7a01 	vldr	s15, [r3, #4]
 8002f18:	ee27 7a27 	vmul.f32	s14, s14, s15
	                  pid->Ki * pid->integral +
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	edd3 6a05 	vldr	s13, [r3, #20]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	edd3 7a07 	vldr	s15, [r3, #28]
 8002f28:	ee66 7aa7 	vmul.f32	s15, s13, s15
	pid->output_val = pid->Kp * pid->Error +
 8002f2c:	ee37 7a27 	vadd.f32	s14, s14, s15
	                  pid->Kd *(pid->Error -pid->LastError);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	edd3 6a06 	vldr	s13, [r3, #24]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	ed93 6a01 	vldr	s12, [r3, #4]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002f42:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002f46:	ee66 7aa7 	vmul.f32	s15, s13, s15
	                  pid->Ki * pid->integral +
 8002f4a:	ee77 7a27 	vadd.f32	s15, s14, s15
	pid->output_val = pid->Kp * pid->Error +
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	edc3 7a08 	vstr	s15, [r3, #32]
	/*误差传递*/
	pid-> LastError = pid->Error;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685a      	ldr	r2, [r3, #4]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	609a      	str	r2, [r3, #8]



	return pid->output_val;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a1b      	ldr	r3, [r3, #32]
 8002f60:	ee07 3a90 	vmov	s15, r3
}
 8002f64:	eeb0 0a67 	vmov.f32	s0, s15
 8002f68:	370c      	adds	r7, #12
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	44480000 	.word	0x44480000
 8002f78:	c4480000 	.word	0xc4480000

08002f7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f80:	4b0e      	ldr	r3, [pc, #56]	@ (8002fbc <HAL_Init+0x40>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a0d      	ldr	r2, [pc, #52]	@ (8002fbc <HAL_Init+0x40>)
 8002f86:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f8c:	4b0b      	ldr	r3, [pc, #44]	@ (8002fbc <HAL_Init+0x40>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a0a      	ldr	r2, [pc, #40]	@ (8002fbc <HAL_Init+0x40>)
 8002f92:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f98:	4b08      	ldr	r3, [pc, #32]	@ (8002fbc <HAL_Init+0x40>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a07      	ldr	r2, [pc, #28]	@ (8002fbc <HAL_Init+0x40>)
 8002f9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fa2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fa4:	2003      	movs	r0, #3
 8002fa6:	f000 f94f 	bl	8003248 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002faa:	2000      	movs	r0, #0
 8002fac:	f000 f808 	bl	8002fc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fb0:	f7fe fcde 	bl	8001970 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	40023c00 	.word	0x40023c00

08002fc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002fc8:	4b12      	ldr	r3, [pc, #72]	@ (8003014 <HAL_InitTick+0x54>)
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	4b12      	ldr	r3, [pc, #72]	@ (8003018 <HAL_InitTick+0x58>)
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002fd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f000 f967 	bl	80032b2 <HAL_SYSTICK_Config>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d001      	beq.n	8002fee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e00e      	b.n	800300c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2b0f      	cmp	r3, #15
 8002ff2:	d80a      	bhi.n	800300a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	6879      	ldr	r1, [r7, #4]
 8002ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8002ffc:	f000 f92f 	bl	800325e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003000:	4a06      	ldr	r2, [pc, #24]	@ (800301c <HAL_InitTick+0x5c>)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003006:	2300      	movs	r3, #0
 8003008:	e000      	b.n	800300c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
}
 800300c:	4618      	mov	r0, r3
 800300e:	3708      	adds	r7, #8
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	2000001c 	.word	0x2000001c
 8003018:	20000024 	.word	0x20000024
 800301c:	20000020 	.word	0x20000020

08003020 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003024:	4b06      	ldr	r3, [pc, #24]	@ (8003040 <HAL_IncTick+0x20>)
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	461a      	mov	r2, r3
 800302a:	4b06      	ldr	r3, [pc, #24]	@ (8003044 <HAL_IncTick+0x24>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4413      	add	r3, r2
 8003030:	4a04      	ldr	r2, [pc, #16]	@ (8003044 <HAL_IncTick+0x24>)
 8003032:	6013      	str	r3, [r2, #0]
}
 8003034:	bf00      	nop
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	20000024 	.word	0x20000024
 8003044:	20000ec8 	.word	0x20000ec8

08003048 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0
  return uwTick;
 800304c:	4b03      	ldr	r3, [pc, #12]	@ (800305c <HAL_GetTick+0x14>)
 800304e:	681b      	ldr	r3, [r3, #0]
}
 8003050:	4618      	mov	r0, r3
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	20000ec8 	.word	0x20000ec8

08003060 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003068:	f7ff ffee 	bl	8003048 <HAL_GetTick>
 800306c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003078:	d005      	beq.n	8003086 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800307a:	4b0a      	ldr	r3, [pc, #40]	@ (80030a4 <HAL_Delay+0x44>)
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	461a      	mov	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	4413      	add	r3, r2
 8003084:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003086:	bf00      	nop
 8003088:	f7ff ffde 	bl	8003048 <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	429a      	cmp	r2, r3
 8003096:	d8f7      	bhi.n	8003088 <HAL_Delay+0x28>
  {
  }
}
 8003098:	bf00      	nop
 800309a:	bf00      	nop
 800309c:	3710      	adds	r7, #16
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	20000024 	.word	0x20000024

080030a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b085      	sub	sp, #20
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f003 0307 	and.w	r3, r3, #7
 80030b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030b8:	4b0c      	ldr	r3, [pc, #48]	@ (80030ec <__NVIC_SetPriorityGrouping+0x44>)
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030be:	68ba      	ldr	r2, [r7, #8]
 80030c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80030c4:	4013      	ands	r3, r2
 80030c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80030d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030da:	4a04      	ldr	r2, [pc, #16]	@ (80030ec <__NVIC_SetPriorityGrouping+0x44>)
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	60d3      	str	r3, [r2, #12]
}
 80030e0:	bf00      	nop
 80030e2:	3714      	adds	r7, #20
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr
 80030ec:	e000ed00 	.word	0xe000ed00

080030f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030f0:	b480      	push	{r7}
 80030f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030f4:	4b04      	ldr	r3, [pc, #16]	@ (8003108 <__NVIC_GetPriorityGrouping+0x18>)
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	0a1b      	lsrs	r3, r3, #8
 80030fa:	f003 0307 	and.w	r3, r3, #7
}
 80030fe:	4618      	mov	r0, r3
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr
 8003108:	e000ed00 	.word	0xe000ed00

0800310c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	4603      	mov	r3, r0
 8003114:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800311a:	2b00      	cmp	r3, #0
 800311c:	db0b      	blt.n	8003136 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800311e:	79fb      	ldrb	r3, [r7, #7]
 8003120:	f003 021f 	and.w	r2, r3, #31
 8003124:	4907      	ldr	r1, [pc, #28]	@ (8003144 <__NVIC_EnableIRQ+0x38>)
 8003126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800312a:	095b      	lsrs	r3, r3, #5
 800312c:	2001      	movs	r0, #1
 800312e:	fa00 f202 	lsl.w	r2, r0, r2
 8003132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003136:	bf00      	nop
 8003138:	370c      	adds	r7, #12
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	e000e100 	.word	0xe000e100

08003148 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	4603      	mov	r3, r0
 8003150:	6039      	str	r1, [r7, #0]
 8003152:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003158:	2b00      	cmp	r3, #0
 800315a:	db0a      	blt.n	8003172 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	b2da      	uxtb	r2, r3
 8003160:	490c      	ldr	r1, [pc, #48]	@ (8003194 <__NVIC_SetPriority+0x4c>)
 8003162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003166:	0112      	lsls	r2, r2, #4
 8003168:	b2d2      	uxtb	r2, r2
 800316a:	440b      	add	r3, r1
 800316c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003170:	e00a      	b.n	8003188 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	b2da      	uxtb	r2, r3
 8003176:	4908      	ldr	r1, [pc, #32]	@ (8003198 <__NVIC_SetPriority+0x50>)
 8003178:	79fb      	ldrb	r3, [r7, #7]
 800317a:	f003 030f 	and.w	r3, r3, #15
 800317e:	3b04      	subs	r3, #4
 8003180:	0112      	lsls	r2, r2, #4
 8003182:	b2d2      	uxtb	r2, r2
 8003184:	440b      	add	r3, r1
 8003186:	761a      	strb	r2, [r3, #24]
}
 8003188:	bf00      	nop
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr
 8003194:	e000e100 	.word	0xe000e100
 8003198:	e000ed00 	.word	0xe000ed00

0800319c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800319c:	b480      	push	{r7}
 800319e:	b089      	sub	sp, #36	@ 0x24
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f003 0307 	and.w	r3, r3, #7
 80031ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	f1c3 0307 	rsb	r3, r3, #7
 80031b6:	2b04      	cmp	r3, #4
 80031b8:	bf28      	it	cs
 80031ba:	2304      	movcs	r3, #4
 80031bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	3304      	adds	r3, #4
 80031c2:	2b06      	cmp	r3, #6
 80031c4:	d902      	bls.n	80031cc <NVIC_EncodePriority+0x30>
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	3b03      	subs	r3, #3
 80031ca:	e000      	b.n	80031ce <NVIC_EncodePriority+0x32>
 80031cc:	2300      	movs	r3, #0
 80031ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031d0:	f04f 32ff 	mov.w	r2, #4294967295
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	fa02 f303 	lsl.w	r3, r2, r3
 80031da:	43da      	mvns	r2, r3
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	401a      	ands	r2, r3
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031e4:	f04f 31ff 	mov.w	r1, #4294967295
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	fa01 f303 	lsl.w	r3, r1, r3
 80031ee:	43d9      	mvns	r1, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031f4:	4313      	orrs	r3, r2
         );
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3724      	adds	r7, #36	@ 0x24
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
	...

08003204 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	3b01      	subs	r3, #1
 8003210:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003214:	d301      	bcc.n	800321a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003216:	2301      	movs	r3, #1
 8003218:	e00f      	b.n	800323a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800321a:	4a0a      	ldr	r2, [pc, #40]	@ (8003244 <SysTick_Config+0x40>)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	3b01      	subs	r3, #1
 8003220:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003222:	210f      	movs	r1, #15
 8003224:	f04f 30ff 	mov.w	r0, #4294967295
 8003228:	f7ff ff8e 	bl	8003148 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800322c:	4b05      	ldr	r3, [pc, #20]	@ (8003244 <SysTick_Config+0x40>)
 800322e:	2200      	movs	r2, #0
 8003230:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003232:	4b04      	ldr	r3, [pc, #16]	@ (8003244 <SysTick_Config+0x40>)
 8003234:	2207      	movs	r2, #7
 8003236:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3708      	adds	r7, #8
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	e000e010 	.word	0xe000e010

08003248 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f7ff ff29 	bl	80030a8 <__NVIC_SetPriorityGrouping>
}
 8003256:	bf00      	nop
 8003258:	3708      	adds	r7, #8
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}

0800325e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800325e:	b580      	push	{r7, lr}
 8003260:	b086      	sub	sp, #24
 8003262:	af00      	add	r7, sp, #0
 8003264:	4603      	mov	r3, r0
 8003266:	60b9      	str	r1, [r7, #8]
 8003268:	607a      	str	r2, [r7, #4]
 800326a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800326c:	2300      	movs	r3, #0
 800326e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003270:	f7ff ff3e 	bl	80030f0 <__NVIC_GetPriorityGrouping>
 8003274:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	68b9      	ldr	r1, [r7, #8]
 800327a:	6978      	ldr	r0, [r7, #20]
 800327c:	f7ff ff8e 	bl	800319c <NVIC_EncodePriority>
 8003280:	4602      	mov	r2, r0
 8003282:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003286:	4611      	mov	r1, r2
 8003288:	4618      	mov	r0, r3
 800328a:	f7ff ff5d 	bl	8003148 <__NVIC_SetPriority>
}
 800328e:	bf00      	nop
 8003290:	3718      	adds	r7, #24
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}

08003296 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003296:	b580      	push	{r7, lr}
 8003298:	b082      	sub	sp, #8
 800329a:	af00      	add	r7, sp, #0
 800329c:	4603      	mov	r3, r0
 800329e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7ff ff31 	bl	800310c <__NVIC_EnableIRQ>
}
 80032aa:	bf00      	nop
 80032ac:	3708      	adds	r7, #8
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b082      	sub	sp, #8
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f7ff ffa2 	bl	8003204 <SysTick_Config>
 80032c0:	4603      	mov	r3, r0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3708      	adds	r7, #8
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
	...

080032cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b086      	sub	sp, #24
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80032d4:	2300      	movs	r3, #0
 80032d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80032d8:	f7ff feb6 	bl	8003048 <HAL_GetTick>
 80032dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d101      	bne.n	80032e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e099      	b.n	800341c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2202      	movs	r2, #2
 80032ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f022 0201 	bic.w	r2, r2, #1
 8003306:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003308:	e00f      	b.n	800332a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800330a:	f7ff fe9d 	bl	8003048 <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	2b05      	cmp	r3, #5
 8003316:	d908      	bls.n	800332a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2220      	movs	r2, #32
 800331c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2203      	movs	r2, #3
 8003322:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e078      	b.n	800341c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0301 	and.w	r3, r3, #1
 8003334:	2b00      	cmp	r3, #0
 8003336:	d1e8      	bne.n	800330a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003340:	697a      	ldr	r2, [r7, #20]
 8003342:	4b38      	ldr	r3, [pc, #224]	@ (8003424 <HAL_DMA_Init+0x158>)
 8003344:	4013      	ands	r3, r2
 8003346:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685a      	ldr	r2, [r3, #4]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003356:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003362:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	699b      	ldr	r3, [r3, #24]
 8003368:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800336e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a1b      	ldr	r3, [r3, #32]
 8003374:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003376:	697a      	ldr	r2, [r7, #20]
 8003378:	4313      	orrs	r3, r2
 800337a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003380:	2b04      	cmp	r3, #4
 8003382:	d107      	bne.n	8003394 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800338c:	4313      	orrs	r3, r2
 800338e:	697a      	ldr	r2, [r7, #20]
 8003390:	4313      	orrs	r3, r2
 8003392:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	697a      	ldr	r2, [r7, #20]
 800339a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	695b      	ldr	r3, [r3, #20]
 80033a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	f023 0307 	bic.w	r3, r3, #7
 80033aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b0:	697a      	ldr	r2, [r7, #20]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ba:	2b04      	cmp	r3, #4
 80033bc:	d117      	bne.n	80033ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d00e      	beq.n	80033ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f000 fb01 	bl	80039d8 <DMA_CheckFifoParam>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d008      	beq.n	80033ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2240      	movs	r2, #64	@ 0x40
 80033e0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2201      	movs	r2, #1
 80033e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80033ea:	2301      	movs	r3, #1
 80033ec:	e016      	b.n	800341c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	697a      	ldr	r2, [r7, #20]
 80033f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 fab8 	bl	800396c <DMA_CalcBaseAndBitshift>
 80033fc:	4603      	mov	r3, r0
 80033fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003404:	223f      	movs	r2, #63	@ 0x3f
 8003406:	409a      	lsls	r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2201      	movs	r2, #1
 8003416:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800341a:	2300      	movs	r3, #0
}
 800341c:	4618      	mov	r0, r3
 800341e:	3718      	adds	r7, #24
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	f010803f 	.word	0xf010803f

08003428 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b086      	sub	sp, #24
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	607a      	str	r2, [r7, #4]
 8003434:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003436:	2300      	movs	r3, #0
 8003438:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800343e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003446:	2b01      	cmp	r3, #1
 8003448:	d101      	bne.n	800344e <HAL_DMA_Start_IT+0x26>
 800344a:	2302      	movs	r3, #2
 800344c:	e040      	b.n	80034d0 <HAL_DMA_Start_IT+0xa8>
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2201      	movs	r2, #1
 8003452:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800345c:	b2db      	uxtb	r3, r3
 800345e:	2b01      	cmp	r3, #1
 8003460:	d12f      	bne.n	80034c2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2202      	movs	r2, #2
 8003466:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2200      	movs	r2, #0
 800346e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	68b9      	ldr	r1, [r7, #8]
 8003476:	68f8      	ldr	r0, [r7, #12]
 8003478:	f000 fa4a 	bl	8003910 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003480:	223f      	movs	r2, #63	@ 0x3f
 8003482:	409a      	lsls	r2, r3
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f042 0216 	orr.w	r2, r2, #22
 8003496:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800349c:	2b00      	cmp	r3, #0
 800349e:	d007      	beq.n	80034b0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f042 0208 	orr.w	r2, r2, #8
 80034ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f042 0201 	orr.w	r2, r2, #1
 80034be:	601a      	str	r2, [r3, #0]
 80034c0:	e005      	b.n	80034ce <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80034ca:	2302      	movs	r3, #2
 80034cc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80034ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3718      	adds	r7, #24
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034e4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80034e6:	f7ff fdaf 	bl	8003048 <HAL_GetTick>
 80034ea:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d008      	beq.n	800350a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2280      	movs	r2, #128	@ 0x80
 80034fc:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e052      	b.n	80035b0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f022 0216 	bic.w	r2, r2, #22
 8003518:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	695a      	ldr	r2, [r3, #20]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003528:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800352e:	2b00      	cmp	r3, #0
 8003530:	d103      	bne.n	800353a <HAL_DMA_Abort+0x62>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003536:	2b00      	cmp	r3, #0
 8003538:	d007      	beq.n	800354a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f022 0208 	bic.w	r2, r2, #8
 8003548:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f022 0201 	bic.w	r2, r2, #1
 8003558:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800355a:	e013      	b.n	8003584 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800355c:	f7ff fd74 	bl	8003048 <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	2b05      	cmp	r3, #5
 8003568:	d90c      	bls.n	8003584 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2220      	movs	r2, #32
 800356e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2203      	movs	r2, #3
 8003574:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e015      	b.n	80035b0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0301 	and.w	r3, r3, #1
 800358e:	2b00      	cmp	r3, #0
 8003590:	d1e4      	bne.n	800355c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003596:	223f      	movs	r2, #63	@ 0x3f
 8003598:	409a      	lsls	r2, r3
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2201      	movs	r2, #1
 80035a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80035ae:	2300      	movs	r3, #0
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3710      	adds	r7, #16
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d004      	beq.n	80035d6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2280      	movs	r2, #128	@ 0x80
 80035d0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e00c      	b.n	80035f0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2205      	movs	r2, #5
 80035da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f022 0201 	bic.w	r2, r2, #1
 80035ec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80035ee:	2300      	movs	r3, #0
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b086      	sub	sp, #24
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003604:	2300      	movs	r3, #0
 8003606:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003608:	4b8e      	ldr	r3, [pc, #568]	@ (8003844 <HAL_DMA_IRQHandler+0x248>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a8e      	ldr	r2, [pc, #568]	@ (8003848 <HAL_DMA_IRQHandler+0x24c>)
 800360e:	fba2 2303 	umull	r2, r3, r2, r3
 8003612:	0a9b      	lsrs	r3, r3, #10
 8003614:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800361a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003626:	2208      	movs	r2, #8
 8003628:	409a      	lsls	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	4013      	ands	r3, r2
 800362e:	2b00      	cmp	r3, #0
 8003630:	d01a      	beq.n	8003668 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0304 	and.w	r3, r3, #4
 800363c:	2b00      	cmp	r3, #0
 800363e:	d013      	beq.n	8003668 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f022 0204 	bic.w	r2, r2, #4
 800364e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003654:	2208      	movs	r2, #8
 8003656:	409a      	lsls	r2, r3
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003660:	f043 0201 	orr.w	r2, r3, #1
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800366c:	2201      	movs	r2, #1
 800366e:	409a      	lsls	r2, r3
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	4013      	ands	r3, r2
 8003674:	2b00      	cmp	r3, #0
 8003676:	d012      	beq.n	800369e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	695b      	ldr	r3, [r3, #20]
 800367e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00b      	beq.n	800369e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800368a:	2201      	movs	r2, #1
 800368c:	409a      	lsls	r2, r3
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003696:	f043 0202 	orr.w	r2, r3, #2
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036a2:	2204      	movs	r2, #4
 80036a4:	409a      	lsls	r2, r3
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	4013      	ands	r3, r2
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d012      	beq.n	80036d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0302 	and.w	r3, r3, #2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d00b      	beq.n	80036d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036c0:	2204      	movs	r2, #4
 80036c2:	409a      	lsls	r2, r3
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036cc:	f043 0204 	orr.w	r2, r3, #4
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036d8:	2210      	movs	r2, #16
 80036da:	409a      	lsls	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	4013      	ands	r3, r2
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d043      	beq.n	800376c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0308 	and.w	r3, r3, #8
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d03c      	beq.n	800376c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036f6:	2210      	movs	r2, #16
 80036f8:	409a      	lsls	r2, r3
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d018      	beq.n	800373e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d108      	bne.n	800372c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800371e:	2b00      	cmp	r3, #0
 8003720:	d024      	beq.n	800376c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	4798      	blx	r3
 800372a:	e01f      	b.n	800376c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003730:	2b00      	cmp	r3, #0
 8003732:	d01b      	beq.n	800376c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	4798      	blx	r3
 800373c:	e016      	b.n	800376c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003748:	2b00      	cmp	r3, #0
 800374a:	d107      	bne.n	800375c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f022 0208 	bic.w	r2, r2, #8
 800375a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003760:	2b00      	cmp	r3, #0
 8003762:	d003      	beq.n	800376c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003770:	2220      	movs	r2, #32
 8003772:	409a      	lsls	r2, r3
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	4013      	ands	r3, r2
 8003778:	2b00      	cmp	r3, #0
 800377a:	f000 808f 	beq.w	800389c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0310 	and.w	r3, r3, #16
 8003788:	2b00      	cmp	r3, #0
 800378a:	f000 8087 	beq.w	800389c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003792:	2220      	movs	r2, #32
 8003794:	409a      	lsls	r2, r3
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b05      	cmp	r3, #5
 80037a4:	d136      	bne.n	8003814 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f022 0216 	bic.w	r2, r2, #22
 80037b4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	695a      	ldr	r2, [r3, #20]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80037c4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d103      	bne.n	80037d6 <HAL_DMA_IRQHandler+0x1da>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d007      	beq.n	80037e6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f022 0208 	bic.w	r2, r2, #8
 80037e4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037ea:	223f      	movs	r2, #63	@ 0x3f
 80037ec:	409a      	lsls	r2, r3
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2201      	movs	r2, #1
 80037f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003806:	2b00      	cmp	r3, #0
 8003808:	d07e      	beq.n	8003908 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	4798      	blx	r3
        }
        return;
 8003812:	e079      	b.n	8003908 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d01d      	beq.n	800385e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d10d      	bne.n	800384c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003834:	2b00      	cmp	r3, #0
 8003836:	d031      	beq.n	800389c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	4798      	blx	r3
 8003840:	e02c      	b.n	800389c <HAL_DMA_IRQHandler+0x2a0>
 8003842:	bf00      	nop
 8003844:	2000001c 	.word	0x2000001c
 8003848:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003850:	2b00      	cmp	r3, #0
 8003852:	d023      	beq.n	800389c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	4798      	blx	r3
 800385c:	e01e      	b.n	800389c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003868:	2b00      	cmp	r3, #0
 800386a:	d10f      	bne.n	800388c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f022 0210 	bic.w	r2, r2, #16
 800387a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003890:	2b00      	cmp	r3, #0
 8003892:	d003      	beq.n	800389c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d032      	beq.n	800390a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038a8:	f003 0301 	and.w	r3, r3, #1
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d022      	beq.n	80038f6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2205      	movs	r2, #5
 80038b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f022 0201 	bic.w	r2, r2, #1
 80038c6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	3301      	adds	r3, #1
 80038cc:	60bb      	str	r3, [r7, #8]
 80038ce:	697a      	ldr	r2, [r7, #20]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d307      	bcc.n	80038e4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d1f2      	bne.n	80038c8 <HAL_DMA_IRQHandler+0x2cc>
 80038e2:	e000      	b.n	80038e6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80038e4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2201      	movs	r2, #1
 80038ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d005      	beq.n	800390a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	4798      	blx	r3
 8003906:	e000      	b.n	800390a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003908:	bf00      	nop
    }
  }
}
 800390a:	3718      	adds	r7, #24
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003910:	b480      	push	{r7}
 8003912:	b085      	sub	sp, #20
 8003914:	af00      	add	r7, sp, #0
 8003916:	60f8      	str	r0, [r7, #12]
 8003918:	60b9      	str	r1, [r7, #8]
 800391a:	607a      	str	r2, [r7, #4]
 800391c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800392c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	683a      	ldr	r2, [r7, #0]
 8003934:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	2b40      	cmp	r3, #64	@ 0x40
 800393c:	d108      	bne.n	8003950 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68ba      	ldr	r2, [r7, #8]
 800394c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800394e:	e007      	b.n	8003960 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68ba      	ldr	r2, [r7, #8]
 8003956:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	60da      	str	r2, [r3, #12]
}
 8003960:	bf00      	nop
 8003962:	3714      	adds	r7, #20
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800396c:	b480      	push	{r7}
 800396e:	b085      	sub	sp, #20
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	b2db      	uxtb	r3, r3
 800397a:	3b10      	subs	r3, #16
 800397c:	4a14      	ldr	r2, [pc, #80]	@ (80039d0 <DMA_CalcBaseAndBitshift+0x64>)
 800397e:	fba2 2303 	umull	r2, r3, r2, r3
 8003982:	091b      	lsrs	r3, r3, #4
 8003984:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003986:	4a13      	ldr	r2, [pc, #76]	@ (80039d4 <DMA_CalcBaseAndBitshift+0x68>)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	4413      	add	r3, r2
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	461a      	mov	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2b03      	cmp	r3, #3
 8003998:	d909      	bls.n	80039ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80039a2:	f023 0303 	bic.w	r3, r3, #3
 80039a6:	1d1a      	adds	r2, r3, #4
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	659a      	str	r2, [r3, #88]	@ 0x58
 80039ac:	e007      	b.n	80039be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80039b6:	f023 0303 	bic.w	r3, r3, #3
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3714      	adds	r7, #20
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr
 80039ce:	bf00      	nop
 80039d0:	aaaaaaab 	.word	0xaaaaaaab
 80039d4:	0800d240 	.word	0x0800d240

080039d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80039d8:	b480      	push	{r7}
 80039da:	b085      	sub	sp, #20
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039e0:	2300      	movs	r3, #0
 80039e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d11f      	bne.n	8003a32 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	2b03      	cmp	r3, #3
 80039f6:	d856      	bhi.n	8003aa6 <DMA_CheckFifoParam+0xce>
 80039f8:	a201      	add	r2, pc, #4	@ (adr r2, 8003a00 <DMA_CheckFifoParam+0x28>)
 80039fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039fe:	bf00      	nop
 8003a00:	08003a11 	.word	0x08003a11
 8003a04:	08003a23 	.word	0x08003a23
 8003a08:	08003a11 	.word	0x08003a11
 8003a0c:	08003aa7 	.word	0x08003aa7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a14:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d046      	beq.n	8003aaa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a20:	e043      	b.n	8003aaa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a26:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003a2a:	d140      	bne.n	8003aae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a30:	e03d      	b.n	8003aae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	699b      	ldr	r3, [r3, #24]
 8003a36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a3a:	d121      	bne.n	8003a80 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	2b03      	cmp	r3, #3
 8003a40:	d837      	bhi.n	8003ab2 <DMA_CheckFifoParam+0xda>
 8003a42:	a201      	add	r2, pc, #4	@ (adr r2, 8003a48 <DMA_CheckFifoParam+0x70>)
 8003a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a48:	08003a59 	.word	0x08003a59
 8003a4c:	08003a5f 	.word	0x08003a5f
 8003a50:	08003a59 	.word	0x08003a59
 8003a54:	08003a71 	.word	0x08003a71
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	73fb      	strb	r3, [r7, #15]
      break;
 8003a5c:	e030      	b.n	8003ac0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a62:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d025      	beq.n	8003ab6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a6e:	e022      	b.n	8003ab6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a74:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003a78:	d11f      	bne.n	8003aba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003a7e:	e01c      	b.n	8003aba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d903      	bls.n	8003a8e <DMA_CheckFifoParam+0xb6>
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	2b03      	cmp	r3, #3
 8003a8a:	d003      	beq.n	8003a94 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003a8c:	e018      	b.n	8003ac0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	73fb      	strb	r3, [r7, #15]
      break;
 8003a92:	e015      	b.n	8003ac0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a98:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d00e      	beq.n	8003abe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	73fb      	strb	r3, [r7, #15]
      break;
 8003aa4:	e00b      	b.n	8003abe <DMA_CheckFifoParam+0xe6>
      break;
 8003aa6:	bf00      	nop
 8003aa8:	e00a      	b.n	8003ac0 <DMA_CheckFifoParam+0xe8>
      break;
 8003aaa:	bf00      	nop
 8003aac:	e008      	b.n	8003ac0 <DMA_CheckFifoParam+0xe8>
      break;
 8003aae:	bf00      	nop
 8003ab0:	e006      	b.n	8003ac0 <DMA_CheckFifoParam+0xe8>
      break;
 8003ab2:	bf00      	nop
 8003ab4:	e004      	b.n	8003ac0 <DMA_CheckFifoParam+0xe8>
      break;
 8003ab6:	bf00      	nop
 8003ab8:	e002      	b.n	8003ac0 <DMA_CheckFifoParam+0xe8>
      break;   
 8003aba:	bf00      	nop
 8003abc:	e000      	b.n	8003ac0 <DMA_CheckFifoParam+0xe8>
      break;
 8003abe:	bf00      	nop
    }
  } 
  
  return status; 
 8003ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3714      	adds	r7, #20
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop

08003ad0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b089      	sub	sp, #36	@ 0x24
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ada:	2300      	movs	r3, #0
 8003adc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	61fb      	str	r3, [r7, #28]
 8003aea:	e16b      	b.n	8003dc4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003aec:	2201      	movs	r2, #1
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	fa02 f303 	lsl.w	r3, r2, r3
 8003af4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	697a      	ldr	r2, [r7, #20]
 8003afc:	4013      	ands	r3, r2
 8003afe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b00:	693a      	ldr	r2, [r7, #16]
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	f040 815a 	bne.w	8003dbe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f003 0303 	and.w	r3, r3, #3
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d005      	beq.n	8003b22 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d130      	bne.n	8003b84 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	005b      	lsls	r3, r3, #1
 8003b2c:	2203      	movs	r2, #3
 8003b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b32:	43db      	mvns	r3, r3
 8003b34:	69ba      	ldr	r2, [r7, #24]
 8003b36:	4013      	ands	r3, r2
 8003b38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	68da      	ldr	r2, [r3, #12]
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	005b      	lsls	r3, r3, #1
 8003b42:	fa02 f303 	lsl.w	r3, r2, r3
 8003b46:	69ba      	ldr	r2, [r7, #24]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	69ba      	ldr	r2, [r7, #24]
 8003b50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b58:	2201      	movs	r2, #1
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b60:	43db      	mvns	r3, r3
 8003b62:	69ba      	ldr	r2, [r7, #24]
 8003b64:	4013      	ands	r3, r2
 8003b66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	091b      	lsrs	r3, r3, #4
 8003b6e:	f003 0201 	and.w	r2, r3, #1
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	fa02 f303 	lsl.w	r3, r2, r3
 8003b78:	69ba      	ldr	r2, [r7, #24]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	69ba      	ldr	r2, [r7, #24]
 8003b82:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f003 0303 	and.w	r3, r3, #3
 8003b8c:	2b03      	cmp	r3, #3
 8003b8e:	d017      	beq.n	8003bc0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	005b      	lsls	r3, r3, #1
 8003b9a:	2203      	movs	r2, #3
 8003b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba0:	43db      	mvns	r3, r3
 8003ba2:	69ba      	ldr	r2, [r7, #24]
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	689a      	ldr	r2, [r3, #8]
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	005b      	lsls	r3, r3, #1
 8003bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb4:	69ba      	ldr	r2, [r7, #24]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	69ba      	ldr	r2, [r7, #24]
 8003bbe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f003 0303 	and.w	r3, r3, #3
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d123      	bne.n	8003c14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	08da      	lsrs	r2, r3, #3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	3208      	adds	r2, #8
 8003bd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	f003 0307 	and.w	r3, r3, #7
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	220f      	movs	r2, #15
 8003be4:	fa02 f303 	lsl.w	r3, r2, r3
 8003be8:	43db      	mvns	r3, r3
 8003bea:	69ba      	ldr	r2, [r7, #24]
 8003bec:	4013      	ands	r3, r2
 8003bee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	691a      	ldr	r2, [r3, #16]
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	f003 0307 	and.w	r3, r3, #7
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003c00:	69ba      	ldr	r2, [r7, #24]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	08da      	lsrs	r2, r3, #3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	3208      	adds	r2, #8
 8003c0e:	69b9      	ldr	r1, [r7, #24]
 8003c10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	005b      	lsls	r3, r3, #1
 8003c1e:	2203      	movs	r2, #3
 8003c20:	fa02 f303 	lsl.w	r3, r2, r3
 8003c24:	43db      	mvns	r3, r3
 8003c26:	69ba      	ldr	r2, [r7, #24]
 8003c28:	4013      	ands	r3, r2
 8003c2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f003 0203 	and.w	r2, r3, #3
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	005b      	lsls	r3, r3, #1
 8003c38:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3c:	69ba      	ldr	r2, [r7, #24]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	69ba      	ldr	r2, [r7, #24]
 8003c46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	f000 80b4 	beq.w	8003dbe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c56:	2300      	movs	r3, #0
 8003c58:	60fb      	str	r3, [r7, #12]
 8003c5a:	4b60      	ldr	r3, [pc, #384]	@ (8003ddc <HAL_GPIO_Init+0x30c>)
 8003c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c5e:	4a5f      	ldr	r2, [pc, #380]	@ (8003ddc <HAL_GPIO_Init+0x30c>)
 8003c60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c64:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c66:	4b5d      	ldr	r3, [pc, #372]	@ (8003ddc <HAL_GPIO_Init+0x30c>)
 8003c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c6e:	60fb      	str	r3, [r7, #12]
 8003c70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c72:	4a5b      	ldr	r2, [pc, #364]	@ (8003de0 <HAL_GPIO_Init+0x310>)
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	089b      	lsrs	r3, r3, #2
 8003c78:	3302      	adds	r3, #2
 8003c7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	f003 0303 	and.w	r3, r3, #3
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	220f      	movs	r2, #15
 8003c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8e:	43db      	mvns	r3, r3
 8003c90:	69ba      	ldr	r2, [r7, #24]
 8003c92:	4013      	ands	r3, r2
 8003c94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a52      	ldr	r2, [pc, #328]	@ (8003de4 <HAL_GPIO_Init+0x314>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d02b      	beq.n	8003cf6 <HAL_GPIO_Init+0x226>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a51      	ldr	r2, [pc, #324]	@ (8003de8 <HAL_GPIO_Init+0x318>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d025      	beq.n	8003cf2 <HAL_GPIO_Init+0x222>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a50      	ldr	r2, [pc, #320]	@ (8003dec <HAL_GPIO_Init+0x31c>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d01f      	beq.n	8003cee <HAL_GPIO_Init+0x21e>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a4f      	ldr	r2, [pc, #316]	@ (8003df0 <HAL_GPIO_Init+0x320>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d019      	beq.n	8003cea <HAL_GPIO_Init+0x21a>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a4e      	ldr	r2, [pc, #312]	@ (8003df4 <HAL_GPIO_Init+0x324>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d013      	beq.n	8003ce6 <HAL_GPIO_Init+0x216>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a4d      	ldr	r2, [pc, #308]	@ (8003df8 <HAL_GPIO_Init+0x328>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d00d      	beq.n	8003ce2 <HAL_GPIO_Init+0x212>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a4c      	ldr	r2, [pc, #304]	@ (8003dfc <HAL_GPIO_Init+0x32c>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d007      	beq.n	8003cde <HAL_GPIO_Init+0x20e>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a4b      	ldr	r2, [pc, #300]	@ (8003e00 <HAL_GPIO_Init+0x330>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d101      	bne.n	8003cda <HAL_GPIO_Init+0x20a>
 8003cd6:	2307      	movs	r3, #7
 8003cd8:	e00e      	b.n	8003cf8 <HAL_GPIO_Init+0x228>
 8003cda:	2308      	movs	r3, #8
 8003cdc:	e00c      	b.n	8003cf8 <HAL_GPIO_Init+0x228>
 8003cde:	2306      	movs	r3, #6
 8003ce0:	e00a      	b.n	8003cf8 <HAL_GPIO_Init+0x228>
 8003ce2:	2305      	movs	r3, #5
 8003ce4:	e008      	b.n	8003cf8 <HAL_GPIO_Init+0x228>
 8003ce6:	2304      	movs	r3, #4
 8003ce8:	e006      	b.n	8003cf8 <HAL_GPIO_Init+0x228>
 8003cea:	2303      	movs	r3, #3
 8003cec:	e004      	b.n	8003cf8 <HAL_GPIO_Init+0x228>
 8003cee:	2302      	movs	r3, #2
 8003cf0:	e002      	b.n	8003cf8 <HAL_GPIO_Init+0x228>
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e000      	b.n	8003cf8 <HAL_GPIO_Init+0x228>
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	69fa      	ldr	r2, [r7, #28]
 8003cfa:	f002 0203 	and.w	r2, r2, #3
 8003cfe:	0092      	lsls	r2, r2, #2
 8003d00:	4093      	lsls	r3, r2
 8003d02:	69ba      	ldr	r2, [r7, #24]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d08:	4935      	ldr	r1, [pc, #212]	@ (8003de0 <HAL_GPIO_Init+0x310>)
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	089b      	lsrs	r3, r3, #2
 8003d0e:	3302      	adds	r3, #2
 8003d10:	69ba      	ldr	r2, [r7, #24]
 8003d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d16:	4b3b      	ldr	r3, [pc, #236]	@ (8003e04 <HAL_GPIO_Init+0x334>)
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	43db      	mvns	r3, r3
 8003d20:	69ba      	ldr	r2, [r7, #24]
 8003d22:	4013      	ands	r3, r2
 8003d24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d003      	beq.n	8003d3a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003d32:	69ba      	ldr	r2, [r7, #24]
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d3a:	4a32      	ldr	r2, [pc, #200]	@ (8003e04 <HAL_GPIO_Init+0x334>)
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d40:	4b30      	ldr	r3, [pc, #192]	@ (8003e04 <HAL_GPIO_Init+0x334>)
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	43db      	mvns	r3, r3
 8003d4a:	69ba      	ldr	r2, [r7, #24]
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d003      	beq.n	8003d64 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003d5c:	69ba      	ldr	r2, [r7, #24]
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d64:	4a27      	ldr	r2, [pc, #156]	@ (8003e04 <HAL_GPIO_Init+0x334>)
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d6a:	4b26      	ldr	r3, [pc, #152]	@ (8003e04 <HAL_GPIO_Init+0x334>)
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	43db      	mvns	r3, r3
 8003d74:	69ba      	ldr	r2, [r7, #24]
 8003d76:	4013      	ands	r3, r2
 8003d78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d003      	beq.n	8003d8e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003d86:	69ba      	ldr	r2, [r7, #24]
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d8e:	4a1d      	ldr	r2, [pc, #116]	@ (8003e04 <HAL_GPIO_Init+0x334>)
 8003d90:	69bb      	ldr	r3, [r7, #24]
 8003d92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d94:	4b1b      	ldr	r3, [pc, #108]	@ (8003e04 <HAL_GPIO_Init+0x334>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	43db      	mvns	r3, r3
 8003d9e:	69ba      	ldr	r2, [r7, #24]
 8003da0:	4013      	ands	r3, r2
 8003da2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d003      	beq.n	8003db8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003db0:	69ba      	ldr	r2, [r7, #24]
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003db8:	4a12      	ldr	r2, [pc, #72]	@ (8003e04 <HAL_GPIO_Init+0x334>)
 8003dba:	69bb      	ldr	r3, [r7, #24]
 8003dbc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	3301      	adds	r3, #1
 8003dc2:	61fb      	str	r3, [r7, #28]
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	2b0f      	cmp	r3, #15
 8003dc8:	f67f ae90 	bls.w	8003aec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003dcc:	bf00      	nop
 8003dce:	bf00      	nop
 8003dd0:	3724      	adds	r7, #36	@ 0x24
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop
 8003ddc:	40023800 	.word	0x40023800
 8003de0:	40013800 	.word	0x40013800
 8003de4:	40020000 	.word	0x40020000
 8003de8:	40020400 	.word	0x40020400
 8003dec:	40020800 	.word	0x40020800
 8003df0:	40020c00 	.word	0x40020c00
 8003df4:	40021000 	.word	0x40021000
 8003df8:	40021400 	.word	0x40021400
 8003dfc:	40021800 	.word	0x40021800
 8003e00:	40021c00 	.word	0x40021c00
 8003e04:	40013c00 	.word	0x40013c00

08003e08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	460b      	mov	r3, r1
 8003e12:	807b      	strh	r3, [r7, #2]
 8003e14:	4613      	mov	r3, r2
 8003e16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e18:	787b      	ldrb	r3, [r7, #1]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d003      	beq.n	8003e26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e1e:	887a      	ldrh	r2, [r7, #2]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e24:	e003      	b.n	8003e2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e26:	887b      	ldrh	r3, [r7, #2]
 8003e28:	041a      	lsls	r2, r3, #16
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	619a      	str	r2, [r3, #24]
}
 8003e2e:	bf00      	nop
 8003e30:	370c      	adds	r7, #12
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
	...

08003e3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d101      	bne.n	8003e4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e12b      	b.n	80040a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d106      	bne.n	8003e68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f7fd f9e0 	bl	8001228 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2224      	movs	r2, #36	@ 0x24
 8003e6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f022 0201 	bic.w	r2, r2, #1
 8003e7e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e8e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003e9e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ea0:	f001 f89a 	bl	8004fd8 <HAL_RCC_GetPCLK1Freq>
 8003ea4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	4a81      	ldr	r2, [pc, #516]	@ (80040b0 <HAL_I2C_Init+0x274>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d807      	bhi.n	8003ec0 <HAL_I2C_Init+0x84>
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	4a80      	ldr	r2, [pc, #512]	@ (80040b4 <HAL_I2C_Init+0x278>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	bf94      	ite	ls
 8003eb8:	2301      	movls	r3, #1
 8003eba:	2300      	movhi	r3, #0
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	e006      	b.n	8003ece <HAL_I2C_Init+0x92>
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	4a7d      	ldr	r2, [pc, #500]	@ (80040b8 <HAL_I2C_Init+0x27c>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	bf94      	ite	ls
 8003ec8:	2301      	movls	r3, #1
 8003eca:	2300      	movhi	r3, #0
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d001      	beq.n	8003ed6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e0e7      	b.n	80040a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	4a78      	ldr	r2, [pc, #480]	@ (80040bc <HAL_I2C_Init+0x280>)
 8003eda:	fba2 2303 	umull	r2, r3, r2, r3
 8003ede:	0c9b      	lsrs	r3, r3, #18
 8003ee0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68ba      	ldr	r2, [r7, #8]
 8003ef2:	430a      	orrs	r2, r1
 8003ef4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	6a1b      	ldr	r3, [r3, #32]
 8003efc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	4a6a      	ldr	r2, [pc, #424]	@ (80040b0 <HAL_I2C_Init+0x274>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d802      	bhi.n	8003f10 <HAL_I2C_Init+0xd4>
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	3301      	adds	r3, #1
 8003f0e:	e009      	b.n	8003f24 <HAL_I2C_Init+0xe8>
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003f16:	fb02 f303 	mul.w	r3, r2, r3
 8003f1a:	4a69      	ldr	r2, [pc, #420]	@ (80040c0 <HAL_I2C_Init+0x284>)
 8003f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f20:	099b      	lsrs	r3, r3, #6
 8003f22:	3301      	adds	r3, #1
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	6812      	ldr	r2, [r2, #0]
 8003f28:	430b      	orrs	r3, r1
 8003f2a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	69db      	ldr	r3, [r3, #28]
 8003f32:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003f36:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	495c      	ldr	r1, [pc, #368]	@ (80040b0 <HAL_I2C_Init+0x274>)
 8003f40:	428b      	cmp	r3, r1
 8003f42:	d819      	bhi.n	8003f78 <HAL_I2C_Init+0x13c>
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	1e59      	subs	r1, r3, #1
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	005b      	lsls	r3, r3, #1
 8003f4e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f52:	1c59      	adds	r1, r3, #1
 8003f54:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003f58:	400b      	ands	r3, r1
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00a      	beq.n	8003f74 <HAL_I2C_Init+0x138>
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	1e59      	subs	r1, r3, #1
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	005b      	lsls	r3, r3, #1
 8003f68:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f6c:	3301      	adds	r3, #1
 8003f6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f72:	e051      	b.n	8004018 <HAL_I2C_Init+0x1dc>
 8003f74:	2304      	movs	r3, #4
 8003f76:	e04f      	b.n	8004018 <HAL_I2C_Init+0x1dc>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d111      	bne.n	8003fa4 <HAL_I2C_Init+0x168>
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	1e58      	subs	r0, r3, #1
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6859      	ldr	r1, [r3, #4]
 8003f88:	460b      	mov	r3, r1
 8003f8a:	005b      	lsls	r3, r3, #1
 8003f8c:	440b      	add	r3, r1
 8003f8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f92:	3301      	adds	r3, #1
 8003f94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	bf0c      	ite	eq
 8003f9c:	2301      	moveq	r3, #1
 8003f9e:	2300      	movne	r3, #0
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	e012      	b.n	8003fca <HAL_I2C_Init+0x18e>
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	1e58      	subs	r0, r3, #1
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6859      	ldr	r1, [r3, #4]
 8003fac:	460b      	mov	r3, r1
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	440b      	add	r3, r1
 8003fb2:	0099      	lsls	r1, r3, #2
 8003fb4:	440b      	add	r3, r1
 8003fb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fba:	3301      	adds	r3, #1
 8003fbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	bf0c      	ite	eq
 8003fc4:	2301      	moveq	r3, #1
 8003fc6:	2300      	movne	r3, #0
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d001      	beq.n	8003fd2 <HAL_I2C_Init+0x196>
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e022      	b.n	8004018 <HAL_I2C_Init+0x1dc>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d10e      	bne.n	8003ff8 <HAL_I2C_Init+0x1bc>
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	1e58      	subs	r0, r3, #1
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6859      	ldr	r1, [r3, #4]
 8003fe2:	460b      	mov	r3, r1
 8003fe4:	005b      	lsls	r3, r3, #1
 8003fe6:	440b      	add	r3, r1
 8003fe8:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fec:	3301      	adds	r3, #1
 8003fee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ff2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ff6:	e00f      	b.n	8004018 <HAL_I2C_Init+0x1dc>
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	1e58      	subs	r0, r3, #1
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6859      	ldr	r1, [r3, #4]
 8004000:	460b      	mov	r3, r1
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	440b      	add	r3, r1
 8004006:	0099      	lsls	r1, r3, #2
 8004008:	440b      	add	r3, r1
 800400a:	fbb0 f3f3 	udiv	r3, r0, r3
 800400e:	3301      	adds	r3, #1
 8004010:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004014:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004018:	6879      	ldr	r1, [r7, #4]
 800401a:	6809      	ldr	r1, [r1, #0]
 800401c:	4313      	orrs	r3, r2
 800401e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	69da      	ldr	r2, [r3, #28]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a1b      	ldr	r3, [r3, #32]
 8004032:	431a      	orrs	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	430a      	orrs	r2, r1
 800403a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004046:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	6911      	ldr	r1, [r2, #16]
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	68d2      	ldr	r2, [r2, #12]
 8004052:	4311      	orrs	r1, r2
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	6812      	ldr	r2, [r2, #0]
 8004058:	430b      	orrs	r3, r1
 800405a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	695a      	ldr	r2, [r3, #20]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	699b      	ldr	r3, [r3, #24]
 800406e:	431a      	orrs	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	430a      	orrs	r2, r1
 8004076:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f042 0201 	orr.w	r2, r2, #1
 8004086:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2220      	movs	r2, #32
 8004092:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80040a4:	2300      	movs	r3, #0
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3710      	adds	r7, #16
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	000186a0 	.word	0x000186a0
 80040b4:	001e847f 	.word	0x001e847f
 80040b8:	003d08ff 	.word	0x003d08ff
 80040bc:	431bde83 	.word	0x431bde83
 80040c0:	10624dd3 	.word	0x10624dd3

080040c4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b088      	sub	sp, #32
 80040c8:	af02      	add	r7, sp, #8
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	607a      	str	r2, [r7, #4]
 80040ce:	461a      	mov	r2, r3
 80040d0:	460b      	mov	r3, r1
 80040d2:	817b      	strh	r3, [r7, #10]
 80040d4:	4613      	mov	r3, r2
 80040d6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80040d8:	f7fe ffb6 	bl	8003048 <HAL_GetTick>
 80040dc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	2b20      	cmp	r3, #32
 80040e8:	f040 80e0 	bne.w	80042ac <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	9300      	str	r3, [sp, #0]
 80040f0:	2319      	movs	r3, #25
 80040f2:	2201      	movs	r2, #1
 80040f4:	4970      	ldr	r1, [pc, #448]	@ (80042b8 <HAL_I2C_Master_Transmit+0x1f4>)
 80040f6:	68f8      	ldr	r0, [r7, #12]
 80040f8:	f000 f964 	bl	80043c4 <I2C_WaitOnFlagUntilTimeout>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d001      	beq.n	8004106 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004102:	2302      	movs	r3, #2
 8004104:	e0d3      	b.n	80042ae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800410c:	2b01      	cmp	r3, #1
 800410e:	d101      	bne.n	8004114 <HAL_I2C_Master_Transmit+0x50>
 8004110:	2302      	movs	r3, #2
 8004112:	e0cc      	b.n	80042ae <HAL_I2C_Master_Transmit+0x1ea>
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0301 	and.w	r3, r3, #1
 8004126:	2b01      	cmp	r3, #1
 8004128:	d007      	beq.n	800413a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f042 0201 	orr.w	r2, r2, #1
 8004138:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004148:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2221      	movs	r2, #33	@ 0x21
 800414e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2210      	movs	r2, #16
 8004156:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2200      	movs	r2, #0
 800415e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	893a      	ldrh	r2, [r7, #8]
 800416a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004170:	b29a      	uxth	r2, r3
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	4a50      	ldr	r2, [pc, #320]	@ (80042bc <HAL_I2C_Master_Transmit+0x1f8>)
 800417a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800417c:	8979      	ldrh	r1, [r7, #10]
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	6a3a      	ldr	r2, [r7, #32]
 8004182:	68f8      	ldr	r0, [r7, #12]
 8004184:	f000 f89c 	bl	80042c0 <I2C_MasterRequestWrite>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d001      	beq.n	8004192 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e08d      	b.n	80042ae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004192:	2300      	movs	r3, #0
 8004194:	613b      	str	r3, [r7, #16]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	695b      	ldr	r3, [r3, #20]
 800419c:	613b      	str	r3, [r7, #16]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	699b      	ldr	r3, [r3, #24]
 80041a4:	613b      	str	r3, [r7, #16]
 80041a6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80041a8:	e066      	b.n	8004278 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041aa:	697a      	ldr	r2, [r7, #20]
 80041ac:	6a39      	ldr	r1, [r7, #32]
 80041ae:	68f8      	ldr	r0, [r7, #12]
 80041b0:	f000 fa22 	bl	80045f8 <I2C_WaitOnTXEFlagUntilTimeout>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d00d      	beq.n	80041d6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041be:	2b04      	cmp	r3, #4
 80041c0:	d107      	bne.n	80041d2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e06b      	b.n	80042ae <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041da:	781a      	ldrb	r2, [r3, #0]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041e6:	1c5a      	adds	r2, r3, #1
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	3b01      	subs	r3, #1
 80041f4:	b29a      	uxth	r2, r3
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041fe:	3b01      	subs	r3, #1
 8004200:	b29a      	uxth	r2, r3
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	695b      	ldr	r3, [r3, #20]
 800420c:	f003 0304 	and.w	r3, r3, #4
 8004210:	2b04      	cmp	r3, #4
 8004212:	d11b      	bne.n	800424c <HAL_I2C_Master_Transmit+0x188>
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004218:	2b00      	cmp	r3, #0
 800421a:	d017      	beq.n	800424c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004220:	781a      	ldrb	r2, [r3, #0]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800422c:	1c5a      	adds	r2, r3, #1
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004236:	b29b      	uxth	r3, r3
 8004238:	3b01      	subs	r3, #1
 800423a:	b29a      	uxth	r2, r3
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004244:	3b01      	subs	r3, #1
 8004246:	b29a      	uxth	r2, r3
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800424c:	697a      	ldr	r2, [r7, #20]
 800424e:	6a39      	ldr	r1, [r7, #32]
 8004250:	68f8      	ldr	r0, [r7, #12]
 8004252:	f000 fa19 	bl	8004688 <I2C_WaitOnBTFFlagUntilTimeout>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d00d      	beq.n	8004278 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004260:	2b04      	cmp	r3, #4
 8004262:	d107      	bne.n	8004274 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004272:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e01a      	b.n	80042ae <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800427c:	2b00      	cmp	r3, #0
 800427e:	d194      	bne.n	80041aa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800428e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2220      	movs	r2, #32
 8004294:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2200      	movs	r2, #0
 800429c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80042a8:	2300      	movs	r3, #0
 80042aa:	e000      	b.n	80042ae <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80042ac:	2302      	movs	r3, #2
  }
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3718      	adds	r7, #24
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	00100002 	.word	0x00100002
 80042bc:	ffff0000 	.word	0xffff0000

080042c0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b088      	sub	sp, #32
 80042c4:	af02      	add	r7, sp, #8
 80042c6:	60f8      	str	r0, [r7, #12]
 80042c8:	607a      	str	r2, [r7, #4]
 80042ca:	603b      	str	r3, [r7, #0]
 80042cc:	460b      	mov	r3, r1
 80042ce:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042d4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	2b08      	cmp	r3, #8
 80042da:	d006      	beq.n	80042ea <I2C_MasterRequestWrite+0x2a>
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d003      	beq.n	80042ea <I2C_MasterRequestWrite+0x2a>
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80042e8:	d108      	bne.n	80042fc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80042f8:	601a      	str	r2, [r3, #0]
 80042fa:	e00b      	b.n	8004314 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004300:	2b12      	cmp	r3, #18
 8004302:	d107      	bne.n	8004314 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004312:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	9300      	str	r3, [sp, #0]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004320:	68f8      	ldr	r0, [r7, #12]
 8004322:	f000 f84f 	bl	80043c4 <I2C_WaitOnFlagUntilTimeout>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d00d      	beq.n	8004348 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004336:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800433a:	d103      	bne.n	8004344 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004342:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004344:	2303      	movs	r3, #3
 8004346:	e035      	b.n	80043b4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004350:	d108      	bne.n	8004364 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004352:	897b      	ldrh	r3, [r7, #10]
 8004354:	b2db      	uxtb	r3, r3
 8004356:	461a      	mov	r2, r3
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004360:	611a      	str	r2, [r3, #16]
 8004362:	e01b      	b.n	800439c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004364:	897b      	ldrh	r3, [r7, #10]
 8004366:	11db      	asrs	r3, r3, #7
 8004368:	b2db      	uxtb	r3, r3
 800436a:	f003 0306 	and.w	r3, r3, #6
 800436e:	b2db      	uxtb	r3, r3
 8004370:	f063 030f 	orn	r3, r3, #15
 8004374:	b2da      	uxtb	r2, r3
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	490e      	ldr	r1, [pc, #56]	@ (80043bc <I2C_MasterRequestWrite+0xfc>)
 8004382:	68f8      	ldr	r0, [r7, #12]
 8004384:	f000 f898 	bl	80044b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d001      	beq.n	8004392 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e010      	b.n	80043b4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004392:	897b      	ldrh	r3, [r7, #10]
 8004394:	b2da      	uxtb	r2, r3
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	4907      	ldr	r1, [pc, #28]	@ (80043c0 <I2C_MasterRequestWrite+0x100>)
 80043a2:	68f8      	ldr	r0, [r7, #12]
 80043a4:	f000 f888 	bl	80044b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d001      	beq.n	80043b2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e000      	b.n	80043b4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3718      	adds	r7, #24
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	00010008 	.word	0x00010008
 80043c0:	00010002 	.word	0x00010002

080043c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	60b9      	str	r1, [r7, #8]
 80043ce:	603b      	str	r3, [r7, #0]
 80043d0:	4613      	mov	r3, r2
 80043d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043d4:	e048      	b.n	8004468 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043dc:	d044      	beq.n	8004468 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043de:	f7fe fe33 	bl	8003048 <HAL_GetTick>
 80043e2:	4602      	mov	r2, r0
 80043e4:	69bb      	ldr	r3, [r7, #24]
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	683a      	ldr	r2, [r7, #0]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d302      	bcc.n	80043f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d139      	bne.n	8004468 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	0c1b      	lsrs	r3, r3, #16
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d10d      	bne.n	800441a <I2C_WaitOnFlagUntilTimeout+0x56>
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	695b      	ldr	r3, [r3, #20]
 8004404:	43da      	mvns	r2, r3
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	4013      	ands	r3, r2
 800440a:	b29b      	uxth	r3, r3
 800440c:	2b00      	cmp	r3, #0
 800440e:	bf0c      	ite	eq
 8004410:	2301      	moveq	r3, #1
 8004412:	2300      	movne	r3, #0
 8004414:	b2db      	uxtb	r3, r3
 8004416:	461a      	mov	r2, r3
 8004418:	e00c      	b.n	8004434 <I2C_WaitOnFlagUntilTimeout+0x70>
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	699b      	ldr	r3, [r3, #24]
 8004420:	43da      	mvns	r2, r3
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	4013      	ands	r3, r2
 8004426:	b29b      	uxth	r3, r3
 8004428:	2b00      	cmp	r3, #0
 800442a:	bf0c      	ite	eq
 800442c:	2301      	moveq	r3, #1
 800442e:	2300      	movne	r3, #0
 8004430:	b2db      	uxtb	r3, r3
 8004432:	461a      	mov	r2, r3
 8004434:	79fb      	ldrb	r3, [r7, #7]
 8004436:	429a      	cmp	r2, r3
 8004438:	d116      	bne.n	8004468 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2200      	movs	r2, #0
 800443e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2220      	movs	r2, #32
 8004444:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2200      	movs	r2, #0
 800444c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004454:	f043 0220 	orr.w	r2, r3, #32
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e023      	b.n	80044b0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	0c1b      	lsrs	r3, r3, #16
 800446c:	b2db      	uxtb	r3, r3
 800446e:	2b01      	cmp	r3, #1
 8004470:	d10d      	bne.n	800448e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	695b      	ldr	r3, [r3, #20]
 8004478:	43da      	mvns	r2, r3
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	4013      	ands	r3, r2
 800447e:	b29b      	uxth	r3, r3
 8004480:	2b00      	cmp	r3, #0
 8004482:	bf0c      	ite	eq
 8004484:	2301      	moveq	r3, #1
 8004486:	2300      	movne	r3, #0
 8004488:	b2db      	uxtb	r3, r3
 800448a:	461a      	mov	r2, r3
 800448c:	e00c      	b.n	80044a8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	699b      	ldr	r3, [r3, #24]
 8004494:	43da      	mvns	r2, r3
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	4013      	ands	r3, r2
 800449a:	b29b      	uxth	r3, r3
 800449c:	2b00      	cmp	r3, #0
 800449e:	bf0c      	ite	eq
 80044a0:	2301      	moveq	r3, #1
 80044a2:	2300      	movne	r3, #0
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	461a      	mov	r2, r3
 80044a8:	79fb      	ldrb	r3, [r7, #7]
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d093      	beq.n	80043d6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044ae:	2300      	movs	r3, #0
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3710      	adds	r7, #16
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	60b9      	str	r1, [r7, #8]
 80044c2:	607a      	str	r2, [r7, #4]
 80044c4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80044c6:	e071      	b.n	80045ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	695b      	ldr	r3, [r3, #20]
 80044ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044d6:	d123      	bne.n	8004520 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044e6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80044f0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2200      	movs	r2, #0
 80044f6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2220      	movs	r2, #32
 80044fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2200      	movs	r2, #0
 8004504:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800450c:	f043 0204 	orr.w	r2, r3, #4
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2200      	movs	r2, #0
 8004518:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e067      	b.n	80045f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004526:	d041      	beq.n	80045ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004528:	f7fe fd8e 	bl	8003048 <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	429a      	cmp	r2, r3
 8004536:	d302      	bcc.n	800453e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d136      	bne.n	80045ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	0c1b      	lsrs	r3, r3, #16
 8004542:	b2db      	uxtb	r3, r3
 8004544:	2b01      	cmp	r3, #1
 8004546:	d10c      	bne.n	8004562 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	695b      	ldr	r3, [r3, #20]
 800454e:	43da      	mvns	r2, r3
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	4013      	ands	r3, r2
 8004554:	b29b      	uxth	r3, r3
 8004556:	2b00      	cmp	r3, #0
 8004558:	bf14      	ite	ne
 800455a:	2301      	movne	r3, #1
 800455c:	2300      	moveq	r3, #0
 800455e:	b2db      	uxtb	r3, r3
 8004560:	e00b      	b.n	800457a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	699b      	ldr	r3, [r3, #24]
 8004568:	43da      	mvns	r2, r3
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	4013      	ands	r3, r2
 800456e:	b29b      	uxth	r3, r3
 8004570:	2b00      	cmp	r3, #0
 8004572:	bf14      	ite	ne
 8004574:	2301      	movne	r3, #1
 8004576:	2300      	moveq	r3, #0
 8004578:	b2db      	uxtb	r3, r3
 800457a:	2b00      	cmp	r3, #0
 800457c:	d016      	beq.n	80045ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2200      	movs	r2, #0
 8004582:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2220      	movs	r2, #32
 8004588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2200      	movs	r2, #0
 8004590:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004598:	f043 0220 	orr.w	r2, r3, #32
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e021      	b.n	80045f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	0c1b      	lsrs	r3, r3, #16
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d10c      	bne.n	80045d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	695b      	ldr	r3, [r3, #20]
 80045bc:	43da      	mvns	r2, r3
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	4013      	ands	r3, r2
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	bf14      	ite	ne
 80045c8:	2301      	movne	r3, #1
 80045ca:	2300      	moveq	r3, #0
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	e00b      	b.n	80045e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	699b      	ldr	r3, [r3, #24]
 80045d6:	43da      	mvns	r2, r3
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	4013      	ands	r3, r2
 80045dc:	b29b      	uxth	r3, r3
 80045de:	2b00      	cmp	r3, #0
 80045e0:	bf14      	ite	ne
 80045e2:	2301      	movne	r3, #1
 80045e4:	2300      	moveq	r3, #0
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	f47f af6d 	bne.w	80044c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80045ee:	2300      	movs	r3, #0
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3710      	adds	r7, #16
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b084      	sub	sp, #16
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	60b9      	str	r1, [r7, #8]
 8004602:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004604:	e034      	b.n	8004670 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004606:	68f8      	ldr	r0, [r7, #12]
 8004608:	f000 f886 	bl	8004718 <I2C_IsAcknowledgeFailed>
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d001      	beq.n	8004616 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e034      	b.n	8004680 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800461c:	d028      	beq.n	8004670 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800461e:	f7fe fd13 	bl	8003048 <HAL_GetTick>
 8004622:	4602      	mov	r2, r0
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	68ba      	ldr	r2, [r7, #8]
 800462a:	429a      	cmp	r2, r3
 800462c:	d302      	bcc.n	8004634 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d11d      	bne.n	8004670 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	695b      	ldr	r3, [r3, #20]
 800463a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800463e:	2b80      	cmp	r3, #128	@ 0x80
 8004640:	d016      	beq.n	8004670 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2200      	movs	r2, #0
 8004646:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2220      	movs	r2, #32
 800464c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2200      	movs	r2, #0
 8004654:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800465c:	f043 0220 	orr.w	r2, r3, #32
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2200      	movs	r2, #0
 8004668:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e007      	b.n	8004680 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	695b      	ldr	r3, [r3, #20]
 8004676:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800467a:	2b80      	cmp	r3, #128	@ 0x80
 800467c:	d1c3      	bne.n	8004606 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	3710      	adds	r7, #16
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004694:	e034      	b.n	8004700 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004696:	68f8      	ldr	r0, [r7, #12]
 8004698:	f000 f83e 	bl	8004718 <I2C_IsAcknowledgeFailed>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d001      	beq.n	80046a6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e034      	b.n	8004710 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ac:	d028      	beq.n	8004700 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046ae:	f7fe fccb 	bl	8003048 <HAL_GetTick>
 80046b2:	4602      	mov	r2, r0
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	68ba      	ldr	r2, [r7, #8]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d302      	bcc.n	80046c4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d11d      	bne.n	8004700 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	695b      	ldr	r3, [r3, #20]
 80046ca:	f003 0304 	and.w	r3, r3, #4
 80046ce:	2b04      	cmp	r3, #4
 80046d0:	d016      	beq.n	8004700 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2200      	movs	r2, #0
 80046d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2220      	movs	r2, #32
 80046dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ec:	f043 0220 	orr.w	r2, r3, #32
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e007      	b.n	8004710 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	695b      	ldr	r3, [r3, #20]
 8004706:	f003 0304 	and.w	r3, r3, #4
 800470a:	2b04      	cmp	r3, #4
 800470c:	d1c3      	bne.n	8004696 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800470e:	2300      	movs	r3, #0
}
 8004710:	4618      	mov	r0, r3
 8004712:	3710      	adds	r7, #16
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}

08004718 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004718:	b480      	push	{r7}
 800471a:	b083      	sub	sp, #12
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	695b      	ldr	r3, [r3, #20]
 8004726:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800472a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800472e:	d11b      	bne.n	8004768 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004738:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2220      	movs	r2, #32
 8004744:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004754:	f043 0204 	orr.w	r2, r3, #4
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e000      	b.n	800476a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004768:	2300      	movs	r3, #0
}
 800476a:	4618      	mov	r0, r3
 800476c:	370c      	adds	r7, #12
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr
	...

08004778 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b086      	sub	sp, #24
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d101      	bne.n	800478a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e267      	b.n	8004c5a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0301 	and.w	r3, r3, #1
 8004792:	2b00      	cmp	r3, #0
 8004794:	d075      	beq.n	8004882 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004796:	4b88      	ldr	r3, [pc, #544]	@ (80049b8 <HAL_RCC_OscConfig+0x240>)
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	f003 030c 	and.w	r3, r3, #12
 800479e:	2b04      	cmp	r3, #4
 80047a0:	d00c      	beq.n	80047bc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047a2:	4b85      	ldr	r3, [pc, #532]	@ (80049b8 <HAL_RCC_OscConfig+0x240>)
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80047aa:	2b08      	cmp	r3, #8
 80047ac:	d112      	bne.n	80047d4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047ae:	4b82      	ldr	r3, [pc, #520]	@ (80049b8 <HAL_RCC_OscConfig+0x240>)
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80047ba:	d10b      	bne.n	80047d4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047bc:	4b7e      	ldr	r3, [pc, #504]	@ (80049b8 <HAL_RCC_OscConfig+0x240>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d05b      	beq.n	8004880 <HAL_RCC_OscConfig+0x108>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d157      	bne.n	8004880 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e242      	b.n	8004c5a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047dc:	d106      	bne.n	80047ec <HAL_RCC_OscConfig+0x74>
 80047de:	4b76      	ldr	r3, [pc, #472]	@ (80049b8 <HAL_RCC_OscConfig+0x240>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a75      	ldr	r2, [pc, #468]	@ (80049b8 <HAL_RCC_OscConfig+0x240>)
 80047e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047e8:	6013      	str	r3, [r2, #0]
 80047ea:	e01d      	b.n	8004828 <HAL_RCC_OscConfig+0xb0>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80047f4:	d10c      	bne.n	8004810 <HAL_RCC_OscConfig+0x98>
 80047f6:	4b70      	ldr	r3, [pc, #448]	@ (80049b8 <HAL_RCC_OscConfig+0x240>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a6f      	ldr	r2, [pc, #444]	@ (80049b8 <HAL_RCC_OscConfig+0x240>)
 80047fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004800:	6013      	str	r3, [r2, #0]
 8004802:	4b6d      	ldr	r3, [pc, #436]	@ (80049b8 <HAL_RCC_OscConfig+0x240>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a6c      	ldr	r2, [pc, #432]	@ (80049b8 <HAL_RCC_OscConfig+0x240>)
 8004808:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800480c:	6013      	str	r3, [r2, #0]
 800480e:	e00b      	b.n	8004828 <HAL_RCC_OscConfig+0xb0>
 8004810:	4b69      	ldr	r3, [pc, #420]	@ (80049b8 <HAL_RCC_OscConfig+0x240>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a68      	ldr	r2, [pc, #416]	@ (80049b8 <HAL_RCC_OscConfig+0x240>)
 8004816:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800481a:	6013      	str	r3, [r2, #0]
 800481c:	4b66      	ldr	r3, [pc, #408]	@ (80049b8 <HAL_RCC_OscConfig+0x240>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a65      	ldr	r2, [pc, #404]	@ (80049b8 <HAL_RCC_OscConfig+0x240>)
 8004822:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004826:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d013      	beq.n	8004858 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004830:	f7fe fc0a 	bl	8003048 <HAL_GetTick>
 8004834:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004836:	e008      	b.n	800484a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004838:	f7fe fc06 	bl	8003048 <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	2b64      	cmp	r3, #100	@ 0x64
 8004844:	d901      	bls.n	800484a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e207      	b.n	8004c5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800484a:	4b5b      	ldr	r3, [pc, #364]	@ (80049b8 <HAL_RCC_OscConfig+0x240>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d0f0      	beq.n	8004838 <HAL_RCC_OscConfig+0xc0>
 8004856:	e014      	b.n	8004882 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004858:	f7fe fbf6 	bl	8003048 <HAL_GetTick>
 800485c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800485e:	e008      	b.n	8004872 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004860:	f7fe fbf2 	bl	8003048 <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	2b64      	cmp	r3, #100	@ 0x64
 800486c:	d901      	bls.n	8004872 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e1f3      	b.n	8004c5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004872:	4b51      	ldr	r3, [pc, #324]	@ (80049b8 <HAL_RCC_OscConfig+0x240>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d1f0      	bne.n	8004860 <HAL_RCC_OscConfig+0xe8>
 800487e:	e000      	b.n	8004882 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004880:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0302 	and.w	r3, r3, #2
 800488a:	2b00      	cmp	r3, #0
 800488c:	d063      	beq.n	8004956 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800488e:	4b4a      	ldr	r3, [pc, #296]	@ (80049b8 <HAL_RCC_OscConfig+0x240>)
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f003 030c 	and.w	r3, r3, #12
 8004896:	2b00      	cmp	r3, #0
 8004898:	d00b      	beq.n	80048b2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800489a:	4b47      	ldr	r3, [pc, #284]	@ (80049b8 <HAL_RCC_OscConfig+0x240>)
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80048a2:	2b08      	cmp	r3, #8
 80048a4:	d11c      	bne.n	80048e0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048a6:	4b44      	ldr	r3, [pc, #272]	@ (80049b8 <HAL_RCC_OscConfig+0x240>)
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d116      	bne.n	80048e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048b2:	4b41      	ldr	r3, [pc, #260]	@ (80049b8 <HAL_RCC_OscConfig+0x240>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0302 	and.w	r3, r3, #2
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d005      	beq.n	80048ca <HAL_RCC_OscConfig+0x152>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d001      	beq.n	80048ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e1c7      	b.n	8004c5a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048ca:	4b3b      	ldr	r3, [pc, #236]	@ (80049b8 <HAL_RCC_OscConfig+0x240>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	00db      	lsls	r3, r3, #3
 80048d8:	4937      	ldr	r1, [pc, #220]	@ (80049b8 <HAL_RCC_OscConfig+0x240>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048de:	e03a      	b.n	8004956 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d020      	beq.n	800492a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048e8:	4b34      	ldr	r3, [pc, #208]	@ (80049bc <HAL_RCC_OscConfig+0x244>)
 80048ea:	2201      	movs	r2, #1
 80048ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ee:	f7fe fbab 	bl	8003048 <HAL_GetTick>
 80048f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048f4:	e008      	b.n	8004908 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048f6:	f7fe fba7 	bl	8003048 <HAL_GetTick>
 80048fa:	4602      	mov	r2, r0
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	2b02      	cmp	r3, #2
 8004902:	d901      	bls.n	8004908 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004904:	2303      	movs	r3, #3
 8004906:	e1a8      	b.n	8004c5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004908:	4b2b      	ldr	r3, [pc, #172]	@ (80049b8 <HAL_RCC_OscConfig+0x240>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 0302 	and.w	r3, r3, #2
 8004910:	2b00      	cmp	r3, #0
 8004912:	d0f0      	beq.n	80048f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004914:	4b28      	ldr	r3, [pc, #160]	@ (80049b8 <HAL_RCC_OscConfig+0x240>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	691b      	ldr	r3, [r3, #16]
 8004920:	00db      	lsls	r3, r3, #3
 8004922:	4925      	ldr	r1, [pc, #148]	@ (80049b8 <HAL_RCC_OscConfig+0x240>)
 8004924:	4313      	orrs	r3, r2
 8004926:	600b      	str	r3, [r1, #0]
 8004928:	e015      	b.n	8004956 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800492a:	4b24      	ldr	r3, [pc, #144]	@ (80049bc <HAL_RCC_OscConfig+0x244>)
 800492c:	2200      	movs	r2, #0
 800492e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004930:	f7fe fb8a 	bl	8003048 <HAL_GetTick>
 8004934:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004936:	e008      	b.n	800494a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004938:	f7fe fb86 	bl	8003048 <HAL_GetTick>
 800493c:	4602      	mov	r2, r0
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	2b02      	cmp	r3, #2
 8004944:	d901      	bls.n	800494a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	e187      	b.n	8004c5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800494a:	4b1b      	ldr	r3, [pc, #108]	@ (80049b8 <HAL_RCC_OscConfig+0x240>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 0302 	and.w	r3, r3, #2
 8004952:	2b00      	cmp	r3, #0
 8004954:	d1f0      	bne.n	8004938 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0308 	and.w	r3, r3, #8
 800495e:	2b00      	cmp	r3, #0
 8004960:	d036      	beq.n	80049d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	695b      	ldr	r3, [r3, #20]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d016      	beq.n	8004998 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800496a:	4b15      	ldr	r3, [pc, #84]	@ (80049c0 <HAL_RCC_OscConfig+0x248>)
 800496c:	2201      	movs	r2, #1
 800496e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004970:	f7fe fb6a 	bl	8003048 <HAL_GetTick>
 8004974:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004976:	e008      	b.n	800498a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004978:	f7fe fb66 	bl	8003048 <HAL_GetTick>
 800497c:	4602      	mov	r2, r0
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	2b02      	cmp	r3, #2
 8004984:	d901      	bls.n	800498a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e167      	b.n	8004c5a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800498a:	4b0b      	ldr	r3, [pc, #44]	@ (80049b8 <HAL_RCC_OscConfig+0x240>)
 800498c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800498e:	f003 0302 	and.w	r3, r3, #2
 8004992:	2b00      	cmp	r3, #0
 8004994:	d0f0      	beq.n	8004978 <HAL_RCC_OscConfig+0x200>
 8004996:	e01b      	b.n	80049d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004998:	4b09      	ldr	r3, [pc, #36]	@ (80049c0 <HAL_RCC_OscConfig+0x248>)
 800499a:	2200      	movs	r2, #0
 800499c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800499e:	f7fe fb53 	bl	8003048 <HAL_GetTick>
 80049a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049a4:	e00e      	b.n	80049c4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049a6:	f7fe fb4f 	bl	8003048 <HAL_GetTick>
 80049aa:	4602      	mov	r2, r0
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	1ad3      	subs	r3, r2, r3
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	d907      	bls.n	80049c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80049b4:	2303      	movs	r3, #3
 80049b6:	e150      	b.n	8004c5a <HAL_RCC_OscConfig+0x4e2>
 80049b8:	40023800 	.word	0x40023800
 80049bc:	42470000 	.word	0x42470000
 80049c0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049c4:	4b88      	ldr	r3, [pc, #544]	@ (8004be8 <HAL_RCC_OscConfig+0x470>)
 80049c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049c8:	f003 0302 	and.w	r3, r3, #2
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d1ea      	bne.n	80049a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0304 	and.w	r3, r3, #4
 80049d8:	2b00      	cmp	r3, #0
 80049da:	f000 8097 	beq.w	8004b0c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049de:	2300      	movs	r3, #0
 80049e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049e2:	4b81      	ldr	r3, [pc, #516]	@ (8004be8 <HAL_RCC_OscConfig+0x470>)
 80049e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d10f      	bne.n	8004a0e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049ee:	2300      	movs	r3, #0
 80049f0:	60bb      	str	r3, [r7, #8]
 80049f2:	4b7d      	ldr	r3, [pc, #500]	@ (8004be8 <HAL_RCC_OscConfig+0x470>)
 80049f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f6:	4a7c      	ldr	r2, [pc, #496]	@ (8004be8 <HAL_RCC_OscConfig+0x470>)
 80049f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80049fe:	4b7a      	ldr	r3, [pc, #488]	@ (8004be8 <HAL_RCC_OscConfig+0x470>)
 8004a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a06:	60bb      	str	r3, [r7, #8]
 8004a08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a0e:	4b77      	ldr	r3, [pc, #476]	@ (8004bec <HAL_RCC_OscConfig+0x474>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d118      	bne.n	8004a4c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a1a:	4b74      	ldr	r3, [pc, #464]	@ (8004bec <HAL_RCC_OscConfig+0x474>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a73      	ldr	r2, [pc, #460]	@ (8004bec <HAL_RCC_OscConfig+0x474>)
 8004a20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a26:	f7fe fb0f 	bl	8003048 <HAL_GetTick>
 8004a2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a2c:	e008      	b.n	8004a40 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a2e:	f7fe fb0b 	bl	8003048 <HAL_GetTick>
 8004a32:	4602      	mov	r2, r0
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	1ad3      	subs	r3, r2, r3
 8004a38:	2b02      	cmp	r3, #2
 8004a3a:	d901      	bls.n	8004a40 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004a3c:	2303      	movs	r3, #3
 8004a3e:	e10c      	b.n	8004c5a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a40:	4b6a      	ldr	r3, [pc, #424]	@ (8004bec <HAL_RCC_OscConfig+0x474>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d0f0      	beq.n	8004a2e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d106      	bne.n	8004a62 <HAL_RCC_OscConfig+0x2ea>
 8004a54:	4b64      	ldr	r3, [pc, #400]	@ (8004be8 <HAL_RCC_OscConfig+0x470>)
 8004a56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a58:	4a63      	ldr	r2, [pc, #396]	@ (8004be8 <HAL_RCC_OscConfig+0x470>)
 8004a5a:	f043 0301 	orr.w	r3, r3, #1
 8004a5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a60:	e01c      	b.n	8004a9c <HAL_RCC_OscConfig+0x324>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	2b05      	cmp	r3, #5
 8004a68:	d10c      	bne.n	8004a84 <HAL_RCC_OscConfig+0x30c>
 8004a6a:	4b5f      	ldr	r3, [pc, #380]	@ (8004be8 <HAL_RCC_OscConfig+0x470>)
 8004a6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a6e:	4a5e      	ldr	r2, [pc, #376]	@ (8004be8 <HAL_RCC_OscConfig+0x470>)
 8004a70:	f043 0304 	orr.w	r3, r3, #4
 8004a74:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a76:	4b5c      	ldr	r3, [pc, #368]	@ (8004be8 <HAL_RCC_OscConfig+0x470>)
 8004a78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a7a:	4a5b      	ldr	r2, [pc, #364]	@ (8004be8 <HAL_RCC_OscConfig+0x470>)
 8004a7c:	f043 0301 	orr.w	r3, r3, #1
 8004a80:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a82:	e00b      	b.n	8004a9c <HAL_RCC_OscConfig+0x324>
 8004a84:	4b58      	ldr	r3, [pc, #352]	@ (8004be8 <HAL_RCC_OscConfig+0x470>)
 8004a86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a88:	4a57      	ldr	r2, [pc, #348]	@ (8004be8 <HAL_RCC_OscConfig+0x470>)
 8004a8a:	f023 0301 	bic.w	r3, r3, #1
 8004a8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a90:	4b55      	ldr	r3, [pc, #340]	@ (8004be8 <HAL_RCC_OscConfig+0x470>)
 8004a92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a94:	4a54      	ldr	r2, [pc, #336]	@ (8004be8 <HAL_RCC_OscConfig+0x470>)
 8004a96:	f023 0304 	bic.w	r3, r3, #4
 8004a9a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d015      	beq.n	8004ad0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aa4:	f7fe fad0 	bl	8003048 <HAL_GetTick>
 8004aa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aaa:	e00a      	b.n	8004ac2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004aac:	f7fe facc 	bl	8003048 <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d901      	bls.n	8004ac2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e0cb      	b.n	8004c5a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ac2:	4b49      	ldr	r3, [pc, #292]	@ (8004be8 <HAL_RCC_OscConfig+0x470>)
 8004ac4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ac6:	f003 0302 	and.w	r3, r3, #2
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d0ee      	beq.n	8004aac <HAL_RCC_OscConfig+0x334>
 8004ace:	e014      	b.n	8004afa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ad0:	f7fe faba 	bl	8003048 <HAL_GetTick>
 8004ad4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ad6:	e00a      	b.n	8004aee <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ad8:	f7fe fab6 	bl	8003048 <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d901      	bls.n	8004aee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e0b5      	b.n	8004c5a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004aee:	4b3e      	ldr	r3, [pc, #248]	@ (8004be8 <HAL_RCC_OscConfig+0x470>)
 8004af0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004af2:	f003 0302 	and.w	r3, r3, #2
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d1ee      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004afa:	7dfb      	ldrb	r3, [r7, #23]
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d105      	bne.n	8004b0c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b00:	4b39      	ldr	r3, [pc, #228]	@ (8004be8 <HAL_RCC_OscConfig+0x470>)
 8004b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b04:	4a38      	ldr	r2, [pc, #224]	@ (8004be8 <HAL_RCC_OscConfig+0x470>)
 8004b06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b0a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	699b      	ldr	r3, [r3, #24]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	f000 80a1 	beq.w	8004c58 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b16:	4b34      	ldr	r3, [pc, #208]	@ (8004be8 <HAL_RCC_OscConfig+0x470>)
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	f003 030c 	and.w	r3, r3, #12
 8004b1e:	2b08      	cmp	r3, #8
 8004b20:	d05c      	beq.n	8004bdc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	699b      	ldr	r3, [r3, #24]
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d141      	bne.n	8004bae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b2a:	4b31      	ldr	r3, [pc, #196]	@ (8004bf0 <HAL_RCC_OscConfig+0x478>)
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b30:	f7fe fa8a 	bl	8003048 <HAL_GetTick>
 8004b34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b36:	e008      	b.n	8004b4a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b38:	f7fe fa86 	bl	8003048 <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d901      	bls.n	8004b4a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e087      	b.n	8004c5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b4a:	4b27      	ldr	r3, [pc, #156]	@ (8004be8 <HAL_RCC_OscConfig+0x470>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d1f0      	bne.n	8004b38 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	69da      	ldr	r2, [r3, #28]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a1b      	ldr	r3, [r3, #32]
 8004b5e:	431a      	orrs	r2, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b64:	019b      	lsls	r3, r3, #6
 8004b66:	431a      	orrs	r2, r3
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b6c:	085b      	lsrs	r3, r3, #1
 8004b6e:	3b01      	subs	r3, #1
 8004b70:	041b      	lsls	r3, r3, #16
 8004b72:	431a      	orrs	r2, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b78:	061b      	lsls	r3, r3, #24
 8004b7a:	491b      	ldr	r1, [pc, #108]	@ (8004be8 <HAL_RCC_OscConfig+0x470>)
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b80:	4b1b      	ldr	r3, [pc, #108]	@ (8004bf0 <HAL_RCC_OscConfig+0x478>)
 8004b82:	2201      	movs	r2, #1
 8004b84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b86:	f7fe fa5f 	bl	8003048 <HAL_GetTick>
 8004b8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b8c:	e008      	b.n	8004ba0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b8e:	f7fe fa5b 	bl	8003048 <HAL_GetTick>
 8004b92:	4602      	mov	r2, r0
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	2b02      	cmp	r3, #2
 8004b9a:	d901      	bls.n	8004ba0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	e05c      	b.n	8004c5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ba0:	4b11      	ldr	r3, [pc, #68]	@ (8004be8 <HAL_RCC_OscConfig+0x470>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d0f0      	beq.n	8004b8e <HAL_RCC_OscConfig+0x416>
 8004bac:	e054      	b.n	8004c58 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bae:	4b10      	ldr	r3, [pc, #64]	@ (8004bf0 <HAL_RCC_OscConfig+0x478>)
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bb4:	f7fe fa48 	bl	8003048 <HAL_GetTick>
 8004bb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bba:	e008      	b.n	8004bce <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bbc:	f7fe fa44 	bl	8003048 <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d901      	bls.n	8004bce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e045      	b.n	8004c5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bce:	4b06      	ldr	r3, [pc, #24]	@ (8004be8 <HAL_RCC_OscConfig+0x470>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d1f0      	bne.n	8004bbc <HAL_RCC_OscConfig+0x444>
 8004bda:	e03d      	b.n	8004c58 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	699b      	ldr	r3, [r3, #24]
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d107      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e038      	b.n	8004c5a <HAL_RCC_OscConfig+0x4e2>
 8004be8:	40023800 	.word	0x40023800
 8004bec:	40007000 	.word	0x40007000
 8004bf0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004bf4:	4b1b      	ldr	r3, [pc, #108]	@ (8004c64 <HAL_RCC_OscConfig+0x4ec>)
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	699b      	ldr	r3, [r3, #24]
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d028      	beq.n	8004c54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d121      	bne.n	8004c54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d11a      	bne.n	8004c54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c1e:	68fa      	ldr	r2, [r7, #12]
 8004c20:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004c24:	4013      	ands	r3, r2
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004c2a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d111      	bne.n	8004c54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c3a:	085b      	lsrs	r3, r3, #1
 8004c3c:	3b01      	subs	r3, #1
 8004c3e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d107      	bne.n	8004c54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c4e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d001      	beq.n	8004c58 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e000      	b.n	8004c5a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3718      	adds	r7, #24
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop
 8004c64:	40023800 	.word	0x40023800

08004c68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d101      	bne.n	8004c7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e0cc      	b.n	8004e16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c7c:	4b68      	ldr	r3, [pc, #416]	@ (8004e20 <HAL_RCC_ClockConfig+0x1b8>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0307 	and.w	r3, r3, #7
 8004c84:	683a      	ldr	r2, [r7, #0]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d90c      	bls.n	8004ca4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c8a:	4b65      	ldr	r3, [pc, #404]	@ (8004e20 <HAL_RCC_ClockConfig+0x1b8>)
 8004c8c:	683a      	ldr	r2, [r7, #0]
 8004c8e:	b2d2      	uxtb	r2, r2
 8004c90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c92:	4b63      	ldr	r3, [pc, #396]	@ (8004e20 <HAL_RCC_ClockConfig+0x1b8>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0307 	and.w	r3, r3, #7
 8004c9a:	683a      	ldr	r2, [r7, #0]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d001      	beq.n	8004ca4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e0b8      	b.n	8004e16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0302 	and.w	r3, r3, #2
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d020      	beq.n	8004cf2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 0304 	and.w	r3, r3, #4
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d005      	beq.n	8004cc8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004cbc:	4b59      	ldr	r3, [pc, #356]	@ (8004e24 <HAL_RCC_ClockConfig+0x1bc>)
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	4a58      	ldr	r2, [pc, #352]	@ (8004e24 <HAL_RCC_ClockConfig+0x1bc>)
 8004cc2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004cc6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0308 	and.w	r3, r3, #8
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d005      	beq.n	8004ce0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004cd4:	4b53      	ldr	r3, [pc, #332]	@ (8004e24 <HAL_RCC_ClockConfig+0x1bc>)
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	4a52      	ldr	r2, [pc, #328]	@ (8004e24 <HAL_RCC_ClockConfig+0x1bc>)
 8004cda:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004cde:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ce0:	4b50      	ldr	r3, [pc, #320]	@ (8004e24 <HAL_RCC_ClockConfig+0x1bc>)
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	494d      	ldr	r1, [pc, #308]	@ (8004e24 <HAL_RCC_ClockConfig+0x1bc>)
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0301 	and.w	r3, r3, #1
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d044      	beq.n	8004d88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d107      	bne.n	8004d16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d06:	4b47      	ldr	r3, [pc, #284]	@ (8004e24 <HAL_RCC_ClockConfig+0x1bc>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d119      	bne.n	8004d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e07f      	b.n	8004e16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d003      	beq.n	8004d26 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d22:	2b03      	cmp	r3, #3
 8004d24:	d107      	bne.n	8004d36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d26:	4b3f      	ldr	r3, [pc, #252]	@ (8004e24 <HAL_RCC_ClockConfig+0x1bc>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d109      	bne.n	8004d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e06f      	b.n	8004e16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d36:	4b3b      	ldr	r3, [pc, #236]	@ (8004e24 <HAL_RCC_ClockConfig+0x1bc>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0302 	and.w	r3, r3, #2
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d101      	bne.n	8004d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e067      	b.n	8004e16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d46:	4b37      	ldr	r3, [pc, #220]	@ (8004e24 <HAL_RCC_ClockConfig+0x1bc>)
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	f023 0203 	bic.w	r2, r3, #3
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	4934      	ldr	r1, [pc, #208]	@ (8004e24 <HAL_RCC_ClockConfig+0x1bc>)
 8004d54:	4313      	orrs	r3, r2
 8004d56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d58:	f7fe f976 	bl	8003048 <HAL_GetTick>
 8004d5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d5e:	e00a      	b.n	8004d76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d60:	f7fe f972 	bl	8003048 <HAL_GetTick>
 8004d64:	4602      	mov	r2, r0
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d901      	bls.n	8004d76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d72:	2303      	movs	r3, #3
 8004d74:	e04f      	b.n	8004e16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d76:	4b2b      	ldr	r3, [pc, #172]	@ (8004e24 <HAL_RCC_ClockConfig+0x1bc>)
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	f003 020c 	and.w	r2, r3, #12
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d1eb      	bne.n	8004d60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d88:	4b25      	ldr	r3, [pc, #148]	@ (8004e20 <HAL_RCC_ClockConfig+0x1b8>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0307 	and.w	r3, r3, #7
 8004d90:	683a      	ldr	r2, [r7, #0]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d20c      	bcs.n	8004db0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d96:	4b22      	ldr	r3, [pc, #136]	@ (8004e20 <HAL_RCC_ClockConfig+0x1b8>)
 8004d98:	683a      	ldr	r2, [r7, #0]
 8004d9a:	b2d2      	uxtb	r2, r2
 8004d9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d9e:	4b20      	ldr	r3, [pc, #128]	@ (8004e20 <HAL_RCC_ClockConfig+0x1b8>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 0307 	and.w	r3, r3, #7
 8004da6:	683a      	ldr	r2, [r7, #0]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d001      	beq.n	8004db0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e032      	b.n	8004e16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 0304 	and.w	r3, r3, #4
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d008      	beq.n	8004dce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004dbc:	4b19      	ldr	r3, [pc, #100]	@ (8004e24 <HAL_RCC_ClockConfig+0x1bc>)
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	4916      	ldr	r1, [pc, #88]	@ (8004e24 <HAL_RCC_ClockConfig+0x1bc>)
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0308 	and.w	r3, r3, #8
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d009      	beq.n	8004dee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004dda:	4b12      	ldr	r3, [pc, #72]	@ (8004e24 <HAL_RCC_ClockConfig+0x1bc>)
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	00db      	lsls	r3, r3, #3
 8004de8:	490e      	ldr	r1, [pc, #56]	@ (8004e24 <HAL_RCC_ClockConfig+0x1bc>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004dee:	f000 f821 	bl	8004e34 <HAL_RCC_GetSysClockFreq>
 8004df2:	4602      	mov	r2, r0
 8004df4:	4b0b      	ldr	r3, [pc, #44]	@ (8004e24 <HAL_RCC_ClockConfig+0x1bc>)
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	091b      	lsrs	r3, r3, #4
 8004dfa:	f003 030f 	and.w	r3, r3, #15
 8004dfe:	490a      	ldr	r1, [pc, #40]	@ (8004e28 <HAL_RCC_ClockConfig+0x1c0>)
 8004e00:	5ccb      	ldrb	r3, [r1, r3]
 8004e02:	fa22 f303 	lsr.w	r3, r2, r3
 8004e06:	4a09      	ldr	r2, [pc, #36]	@ (8004e2c <HAL_RCC_ClockConfig+0x1c4>)
 8004e08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004e0a:	4b09      	ldr	r3, [pc, #36]	@ (8004e30 <HAL_RCC_ClockConfig+0x1c8>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f7fe f8d6 	bl	8002fc0 <HAL_InitTick>

  return HAL_OK;
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3710      	adds	r7, #16
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	40023c00 	.word	0x40023c00
 8004e24:	40023800 	.word	0x40023800
 8004e28:	0800cb90 	.word	0x0800cb90
 8004e2c:	2000001c 	.word	0x2000001c
 8004e30:	20000020 	.word	0x20000020

08004e34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e38:	b090      	sub	sp, #64	@ 0x40
 8004e3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004e40:	2300      	movs	r3, #0
 8004e42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004e44:	2300      	movs	r3, #0
 8004e46:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e4c:	4b59      	ldr	r3, [pc, #356]	@ (8004fb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	f003 030c 	and.w	r3, r3, #12
 8004e54:	2b08      	cmp	r3, #8
 8004e56:	d00d      	beq.n	8004e74 <HAL_RCC_GetSysClockFreq+0x40>
 8004e58:	2b08      	cmp	r3, #8
 8004e5a:	f200 80a1 	bhi.w	8004fa0 <HAL_RCC_GetSysClockFreq+0x16c>
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d002      	beq.n	8004e68 <HAL_RCC_GetSysClockFreq+0x34>
 8004e62:	2b04      	cmp	r3, #4
 8004e64:	d003      	beq.n	8004e6e <HAL_RCC_GetSysClockFreq+0x3a>
 8004e66:	e09b      	b.n	8004fa0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e68:	4b53      	ldr	r3, [pc, #332]	@ (8004fb8 <HAL_RCC_GetSysClockFreq+0x184>)
 8004e6a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004e6c:	e09b      	b.n	8004fa6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e6e:	4b53      	ldr	r3, [pc, #332]	@ (8004fbc <HAL_RCC_GetSysClockFreq+0x188>)
 8004e70:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004e72:	e098      	b.n	8004fa6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e74:	4b4f      	ldr	r3, [pc, #316]	@ (8004fb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e7c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e7e:	4b4d      	ldr	r3, [pc, #308]	@ (8004fb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d028      	beq.n	8004edc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e8a:	4b4a      	ldr	r3, [pc, #296]	@ (8004fb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	099b      	lsrs	r3, r3, #6
 8004e90:	2200      	movs	r2, #0
 8004e92:	623b      	str	r3, [r7, #32]
 8004e94:	627a      	str	r2, [r7, #36]	@ 0x24
 8004e96:	6a3b      	ldr	r3, [r7, #32]
 8004e98:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004e9c:	2100      	movs	r1, #0
 8004e9e:	4b47      	ldr	r3, [pc, #284]	@ (8004fbc <HAL_RCC_GetSysClockFreq+0x188>)
 8004ea0:	fb03 f201 	mul.w	r2, r3, r1
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	fb00 f303 	mul.w	r3, r0, r3
 8004eaa:	4413      	add	r3, r2
 8004eac:	4a43      	ldr	r2, [pc, #268]	@ (8004fbc <HAL_RCC_GetSysClockFreq+0x188>)
 8004eae:	fba0 1202 	umull	r1, r2, r0, r2
 8004eb2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004eb4:	460a      	mov	r2, r1
 8004eb6:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004eb8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004eba:	4413      	add	r3, r2
 8004ebc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ebe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	61bb      	str	r3, [r7, #24]
 8004ec4:	61fa      	str	r2, [r7, #28]
 8004ec6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004eca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004ece:	f7fb fedb 	bl	8000c88 <__aeabi_uldivmod>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	460b      	mov	r3, r1
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004eda:	e053      	b.n	8004f84 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004edc:	4b35      	ldr	r3, [pc, #212]	@ (8004fb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	099b      	lsrs	r3, r3, #6
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	613b      	str	r3, [r7, #16]
 8004ee6:	617a      	str	r2, [r7, #20]
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004eee:	f04f 0b00 	mov.w	fp, #0
 8004ef2:	4652      	mov	r2, sl
 8004ef4:	465b      	mov	r3, fp
 8004ef6:	f04f 0000 	mov.w	r0, #0
 8004efa:	f04f 0100 	mov.w	r1, #0
 8004efe:	0159      	lsls	r1, r3, #5
 8004f00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f04:	0150      	lsls	r0, r2, #5
 8004f06:	4602      	mov	r2, r0
 8004f08:	460b      	mov	r3, r1
 8004f0a:	ebb2 080a 	subs.w	r8, r2, sl
 8004f0e:	eb63 090b 	sbc.w	r9, r3, fp
 8004f12:	f04f 0200 	mov.w	r2, #0
 8004f16:	f04f 0300 	mov.w	r3, #0
 8004f1a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004f1e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004f22:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004f26:	ebb2 0408 	subs.w	r4, r2, r8
 8004f2a:	eb63 0509 	sbc.w	r5, r3, r9
 8004f2e:	f04f 0200 	mov.w	r2, #0
 8004f32:	f04f 0300 	mov.w	r3, #0
 8004f36:	00eb      	lsls	r3, r5, #3
 8004f38:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f3c:	00e2      	lsls	r2, r4, #3
 8004f3e:	4614      	mov	r4, r2
 8004f40:	461d      	mov	r5, r3
 8004f42:	eb14 030a 	adds.w	r3, r4, sl
 8004f46:	603b      	str	r3, [r7, #0]
 8004f48:	eb45 030b 	adc.w	r3, r5, fp
 8004f4c:	607b      	str	r3, [r7, #4]
 8004f4e:	f04f 0200 	mov.w	r2, #0
 8004f52:	f04f 0300 	mov.w	r3, #0
 8004f56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f5a:	4629      	mov	r1, r5
 8004f5c:	028b      	lsls	r3, r1, #10
 8004f5e:	4621      	mov	r1, r4
 8004f60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f64:	4621      	mov	r1, r4
 8004f66:	028a      	lsls	r2, r1, #10
 8004f68:	4610      	mov	r0, r2
 8004f6a:	4619      	mov	r1, r3
 8004f6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f6e:	2200      	movs	r2, #0
 8004f70:	60bb      	str	r3, [r7, #8]
 8004f72:	60fa      	str	r2, [r7, #12]
 8004f74:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f78:	f7fb fe86 	bl	8000c88 <__aeabi_uldivmod>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	460b      	mov	r3, r1
 8004f80:	4613      	mov	r3, r2
 8004f82:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004f84:	4b0b      	ldr	r3, [pc, #44]	@ (8004fb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	0c1b      	lsrs	r3, r3, #16
 8004f8a:	f003 0303 	and.w	r3, r3, #3
 8004f8e:	3301      	adds	r3, #1
 8004f90:	005b      	lsls	r3, r3, #1
 8004f92:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004f94:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f9c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004f9e:	e002      	b.n	8004fa6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004fa0:	4b05      	ldr	r3, [pc, #20]	@ (8004fb8 <HAL_RCC_GetSysClockFreq+0x184>)
 8004fa2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004fa4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3740      	adds	r7, #64	@ 0x40
 8004fac:	46bd      	mov	sp, r7
 8004fae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fb2:	bf00      	nop
 8004fb4:	40023800 	.word	0x40023800
 8004fb8:	00f42400 	.word	0x00f42400
 8004fbc:	017d7840 	.word	0x017d7840

08004fc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fc4:	4b03      	ldr	r3, [pc, #12]	@ (8004fd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop
 8004fd4:	2000001c 	.word	0x2000001c

08004fd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004fdc:	f7ff fff0 	bl	8004fc0 <HAL_RCC_GetHCLKFreq>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	4b05      	ldr	r3, [pc, #20]	@ (8004ff8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	0a9b      	lsrs	r3, r3, #10
 8004fe8:	f003 0307 	and.w	r3, r3, #7
 8004fec:	4903      	ldr	r1, [pc, #12]	@ (8004ffc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fee:	5ccb      	ldrb	r3, [r1, r3]
 8004ff0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	bd80      	pop	{r7, pc}
 8004ff8:	40023800 	.word	0x40023800
 8004ffc:	0800cba0 	.word	0x0800cba0

08005000 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005004:	f7ff ffdc 	bl	8004fc0 <HAL_RCC_GetHCLKFreq>
 8005008:	4602      	mov	r2, r0
 800500a:	4b05      	ldr	r3, [pc, #20]	@ (8005020 <HAL_RCC_GetPCLK2Freq+0x20>)
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	0b5b      	lsrs	r3, r3, #13
 8005010:	f003 0307 	and.w	r3, r3, #7
 8005014:	4903      	ldr	r1, [pc, #12]	@ (8005024 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005016:	5ccb      	ldrb	r3, [r1, r3]
 8005018:	fa22 f303 	lsr.w	r3, r2, r3
}
 800501c:	4618      	mov	r0, r3
 800501e:	bd80      	pop	{r7, pc}
 8005020:	40023800 	.word	0x40023800
 8005024:	0800cba0 	.word	0x0800cba0

08005028 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d101      	bne.n	800503a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e041      	b.n	80050be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005040:	b2db      	uxtb	r3, r3
 8005042:	2b00      	cmp	r3, #0
 8005044:	d106      	bne.n	8005054 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f7fd f838 	bl	80020c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2202      	movs	r2, #2
 8005058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	3304      	adds	r3, #4
 8005064:	4619      	mov	r1, r3
 8005066:	4610      	mov	r0, r2
 8005068:	f000 fe8c 	bl	8005d84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3708      	adds	r7, #8
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
	...

080050c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b085      	sub	sp, #20
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d001      	beq.n	80050e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	e04e      	b.n	800517e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2202      	movs	r2, #2
 80050e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	68da      	ldr	r2, [r3, #12]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f042 0201 	orr.w	r2, r2, #1
 80050f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a23      	ldr	r2, [pc, #140]	@ (800518c <HAL_TIM_Base_Start_IT+0xc4>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d022      	beq.n	8005148 <HAL_TIM_Base_Start_IT+0x80>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800510a:	d01d      	beq.n	8005148 <HAL_TIM_Base_Start_IT+0x80>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a1f      	ldr	r2, [pc, #124]	@ (8005190 <HAL_TIM_Base_Start_IT+0xc8>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d018      	beq.n	8005148 <HAL_TIM_Base_Start_IT+0x80>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a1e      	ldr	r2, [pc, #120]	@ (8005194 <HAL_TIM_Base_Start_IT+0xcc>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d013      	beq.n	8005148 <HAL_TIM_Base_Start_IT+0x80>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a1c      	ldr	r2, [pc, #112]	@ (8005198 <HAL_TIM_Base_Start_IT+0xd0>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d00e      	beq.n	8005148 <HAL_TIM_Base_Start_IT+0x80>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a1b      	ldr	r2, [pc, #108]	@ (800519c <HAL_TIM_Base_Start_IT+0xd4>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d009      	beq.n	8005148 <HAL_TIM_Base_Start_IT+0x80>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a19      	ldr	r2, [pc, #100]	@ (80051a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d004      	beq.n	8005148 <HAL_TIM_Base_Start_IT+0x80>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a18      	ldr	r2, [pc, #96]	@ (80051a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d111      	bne.n	800516c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	f003 0307 	and.w	r3, r3, #7
 8005152:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2b06      	cmp	r3, #6
 8005158:	d010      	beq.n	800517c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f042 0201 	orr.w	r2, r2, #1
 8005168:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800516a:	e007      	b.n	800517c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f042 0201 	orr.w	r2, r2, #1
 800517a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	3714      	adds	r7, #20
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr
 800518a:	bf00      	nop
 800518c:	40010000 	.word	0x40010000
 8005190:	40000400 	.word	0x40000400
 8005194:	40000800 	.word	0x40000800
 8005198:	40000c00 	.word	0x40000c00
 800519c:	40010400 	.word	0x40010400
 80051a0:	40014000 	.word	0x40014000
 80051a4:	40001800 	.word	0x40001800

080051a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b082      	sub	sp, #8
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d101      	bne.n	80051ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e041      	b.n	800523e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d106      	bne.n	80051d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f000 f839 	bl	8005246 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2202      	movs	r2, #2
 80051d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	3304      	adds	r3, #4
 80051e4:	4619      	mov	r1, r3
 80051e6:	4610      	mov	r0, r2
 80051e8:	f000 fdcc 	bl	8005d84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800523c:	2300      	movs	r3, #0
}
 800523e:	4618      	mov	r0, r3
 8005240:	3708      	adds	r7, #8
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}

08005246 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005246:	b480      	push	{r7}
 8005248:	b083      	sub	sp, #12
 800524a:	af00      	add	r7, sp, #0
 800524c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800524e:	bf00      	nop
 8005250:	370c      	adds	r7, #12
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr
	...

0800525c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d109      	bne.n	8005280 <HAL_TIM_PWM_Start+0x24>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005272:	b2db      	uxtb	r3, r3
 8005274:	2b01      	cmp	r3, #1
 8005276:	bf14      	ite	ne
 8005278:	2301      	movne	r3, #1
 800527a:	2300      	moveq	r3, #0
 800527c:	b2db      	uxtb	r3, r3
 800527e:	e022      	b.n	80052c6 <HAL_TIM_PWM_Start+0x6a>
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	2b04      	cmp	r3, #4
 8005284:	d109      	bne.n	800529a <HAL_TIM_PWM_Start+0x3e>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800528c:	b2db      	uxtb	r3, r3
 800528e:	2b01      	cmp	r3, #1
 8005290:	bf14      	ite	ne
 8005292:	2301      	movne	r3, #1
 8005294:	2300      	moveq	r3, #0
 8005296:	b2db      	uxtb	r3, r3
 8005298:	e015      	b.n	80052c6 <HAL_TIM_PWM_Start+0x6a>
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	2b08      	cmp	r3, #8
 800529e:	d109      	bne.n	80052b4 <HAL_TIM_PWM_Start+0x58>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	bf14      	ite	ne
 80052ac:	2301      	movne	r3, #1
 80052ae:	2300      	moveq	r3, #0
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	e008      	b.n	80052c6 <HAL_TIM_PWM_Start+0x6a>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	2b01      	cmp	r3, #1
 80052be:	bf14      	ite	ne
 80052c0:	2301      	movne	r3, #1
 80052c2:	2300      	moveq	r3, #0
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d001      	beq.n	80052ce <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e07c      	b.n	80053c8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d104      	bne.n	80052de <HAL_TIM_PWM_Start+0x82>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2202      	movs	r2, #2
 80052d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80052dc:	e013      	b.n	8005306 <HAL_TIM_PWM_Start+0xaa>
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	2b04      	cmp	r3, #4
 80052e2:	d104      	bne.n	80052ee <HAL_TIM_PWM_Start+0x92>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2202      	movs	r2, #2
 80052e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80052ec:	e00b      	b.n	8005306 <HAL_TIM_PWM_Start+0xaa>
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	2b08      	cmp	r3, #8
 80052f2:	d104      	bne.n	80052fe <HAL_TIM_PWM_Start+0xa2>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2202      	movs	r2, #2
 80052f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80052fc:	e003      	b.n	8005306 <HAL_TIM_PWM_Start+0xaa>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2202      	movs	r2, #2
 8005302:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	2201      	movs	r2, #1
 800530c:	6839      	ldr	r1, [r7, #0]
 800530e:	4618      	mov	r0, r3
 8005310:	f001 f952 	bl	80065b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a2d      	ldr	r2, [pc, #180]	@ (80053d0 <HAL_TIM_PWM_Start+0x174>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d004      	beq.n	8005328 <HAL_TIM_PWM_Start+0xcc>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a2c      	ldr	r2, [pc, #176]	@ (80053d4 <HAL_TIM_PWM_Start+0x178>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d101      	bne.n	800532c <HAL_TIM_PWM_Start+0xd0>
 8005328:	2301      	movs	r3, #1
 800532a:	e000      	b.n	800532e <HAL_TIM_PWM_Start+0xd2>
 800532c:	2300      	movs	r3, #0
 800532e:	2b00      	cmp	r3, #0
 8005330:	d007      	beq.n	8005342 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005340:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a22      	ldr	r2, [pc, #136]	@ (80053d0 <HAL_TIM_PWM_Start+0x174>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d022      	beq.n	8005392 <HAL_TIM_PWM_Start+0x136>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005354:	d01d      	beq.n	8005392 <HAL_TIM_PWM_Start+0x136>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a1f      	ldr	r2, [pc, #124]	@ (80053d8 <HAL_TIM_PWM_Start+0x17c>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d018      	beq.n	8005392 <HAL_TIM_PWM_Start+0x136>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a1d      	ldr	r2, [pc, #116]	@ (80053dc <HAL_TIM_PWM_Start+0x180>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d013      	beq.n	8005392 <HAL_TIM_PWM_Start+0x136>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a1c      	ldr	r2, [pc, #112]	@ (80053e0 <HAL_TIM_PWM_Start+0x184>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d00e      	beq.n	8005392 <HAL_TIM_PWM_Start+0x136>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a16      	ldr	r2, [pc, #88]	@ (80053d4 <HAL_TIM_PWM_Start+0x178>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d009      	beq.n	8005392 <HAL_TIM_PWM_Start+0x136>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a18      	ldr	r2, [pc, #96]	@ (80053e4 <HAL_TIM_PWM_Start+0x188>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d004      	beq.n	8005392 <HAL_TIM_PWM_Start+0x136>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a16      	ldr	r2, [pc, #88]	@ (80053e8 <HAL_TIM_PWM_Start+0x18c>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d111      	bne.n	80053b6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	f003 0307 	and.w	r3, r3, #7
 800539c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2b06      	cmp	r3, #6
 80053a2:	d010      	beq.n	80053c6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f042 0201 	orr.w	r2, r2, #1
 80053b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053b4:	e007      	b.n	80053c6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f042 0201 	orr.w	r2, r2, #1
 80053c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053c6:	2300      	movs	r3, #0
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3710      	adds	r7, #16
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	40010000 	.word	0x40010000
 80053d4:	40010400 	.word	0x40010400
 80053d8:	40000400 	.word	0x40000400
 80053dc:	40000800 	.word	0x40000800
 80053e0:	40000c00 	.word	0x40000c00
 80053e4:	40014000 	.word	0x40014000
 80053e8:	40001800 	.word	0x40001800

080053ec <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b082      	sub	sp, #8
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d101      	bne.n	80053fe <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	e041      	b.n	8005482 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005404:	b2db      	uxtb	r3, r3
 8005406:	2b00      	cmp	r3, #0
 8005408:	d106      	bne.n	8005418 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 f839 	bl	800548a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2202      	movs	r2, #2
 800541c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	3304      	adds	r3, #4
 8005428:	4619      	mov	r1, r3
 800542a:	4610      	mov	r0, r2
 800542c:	f000 fcaa 	bl	8005d84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005480:	2300      	movs	r3, #0
}
 8005482:	4618      	mov	r0, r3
 8005484:	3708      	adds	r7, #8
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}

0800548a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800548a:	b480      	push	{r7}
 800548c:	b083      	sub	sp, #12
 800548e:	af00      	add	r7, sp, #0
 8005490:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005492:	bf00      	nop
 8005494:	370c      	adds	r7, #12
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr

0800549e <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800549e:	b580      	push	{r7, lr}
 80054a0:	b086      	sub	sp, #24
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	6078      	str	r0, [r7, #4]
 80054a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d101      	bne.n	80054b2 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e097      	b.n	80055e2 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d106      	bne.n	80054cc <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2200      	movs	r2, #0
 80054c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f7fc fd7e 	bl	8001fc8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2202      	movs	r2, #2
 80054d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	6812      	ldr	r2, [r2, #0]
 80054de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80054e2:	f023 0307 	bic.w	r3, r3, #7
 80054e6:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	3304      	adds	r3, #4
 80054f0:	4619      	mov	r1, r3
 80054f2:	4610      	mov	r0, r2
 80054f4:	f000 fc46 	bl	8005d84 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	699b      	ldr	r3, [r3, #24]
 8005506:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	6a1b      	ldr	r3, [r3, #32]
 800550e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	697a      	ldr	r2, [r7, #20]
 8005516:	4313      	orrs	r3, r2
 8005518:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005520:	f023 0303 	bic.w	r3, r3, #3
 8005524:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	689a      	ldr	r2, [r3, #8]
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	699b      	ldr	r3, [r3, #24]
 800552e:	021b      	lsls	r3, r3, #8
 8005530:	4313      	orrs	r3, r2
 8005532:	693a      	ldr	r2, [r7, #16]
 8005534:	4313      	orrs	r3, r2
 8005536:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800553e:	f023 030c 	bic.w	r3, r3, #12
 8005542:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800554a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800554e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	68da      	ldr	r2, [r3, #12]
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	69db      	ldr	r3, [r3, #28]
 8005558:	021b      	lsls	r3, r3, #8
 800555a:	4313      	orrs	r3, r2
 800555c:	693a      	ldr	r2, [r7, #16]
 800555e:	4313      	orrs	r3, r2
 8005560:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	691b      	ldr	r3, [r3, #16]
 8005566:	011a      	lsls	r2, r3, #4
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	6a1b      	ldr	r3, [r3, #32]
 800556c:	031b      	lsls	r3, r3, #12
 800556e:	4313      	orrs	r3, r2
 8005570:	693a      	ldr	r2, [r7, #16]
 8005572:	4313      	orrs	r3, r2
 8005574:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800557c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005584:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	685a      	ldr	r2, [r3, #4]
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	695b      	ldr	r3, [r3, #20]
 800558e:	011b      	lsls	r3, r3, #4
 8005590:	4313      	orrs	r3, r2
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	4313      	orrs	r3, r2
 8005596:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	697a      	ldr	r2, [r7, #20]
 800559e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	693a      	ldr	r2, [r7, #16]
 80055a6:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	68fa      	ldr	r2, [r7, #12]
 80055ae:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2201      	movs	r2, #1
 80055c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80055e0:	2300      	movs	r3, #0
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3718      	adds	r7, #24
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}

080055ea <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80055ea:	b580      	push	{r7, lr}
 80055ec:	b084      	sub	sp, #16
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	6078      	str	r0, [r7, #4]
 80055f2:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80055fa:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005602:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800560a:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005612:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d110      	bne.n	800563c <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800561a:	7bfb      	ldrb	r3, [r7, #15]
 800561c:	2b01      	cmp	r3, #1
 800561e:	d102      	bne.n	8005626 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005620:	7b7b      	ldrb	r3, [r7, #13]
 8005622:	2b01      	cmp	r3, #1
 8005624:	d001      	beq.n	800562a <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e069      	b.n	80056fe <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2202      	movs	r2, #2
 800562e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2202      	movs	r2, #2
 8005636:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800563a:	e031      	b.n	80056a0 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	2b04      	cmp	r3, #4
 8005640:	d110      	bne.n	8005664 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005642:	7bbb      	ldrb	r3, [r7, #14]
 8005644:	2b01      	cmp	r3, #1
 8005646:	d102      	bne.n	800564e <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005648:	7b3b      	ldrb	r3, [r7, #12]
 800564a:	2b01      	cmp	r3, #1
 800564c:	d001      	beq.n	8005652 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	e055      	b.n	80056fe <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2202      	movs	r2, #2
 8005656:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2202      	movs	r2, #2
 800565e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005662:	e01d      	b.n	80056a0 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005664:	7bfb      	ldrb	r3, [r7, #15]
 8005666:	2b01      	cmp	r3, #1
 8005668:	d108      	bne.n	800567c <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800566a:	7bbb      	ldrb	r3, [r7, #14]
 800566c:	2b01      	cmp	r3, #1
 800566e:	d105      	bne.n	800567c <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005670:	7b7b      	ldrb	r3, [r7, #13]
 8005672:	2b01      	cmp	r3, #1
 8005674:	d102      	bne.n	800567c <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005676:	7b3b      	ldrb	r3, [r7, #12]
 8005678:	2b01      	cmp	r3, #1
 800567a:	d001      	beq.n	8005680 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	e03e      	b.n	80056fe <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2202      	movs	r2, #2
 8005684:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2202      	movs	r2, #2
 800568c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2202      	movs	r2, #2
 8005694:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2202      	movs	r2, #2
 800569c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d003      	beq.n	80056ae <HAL_TIM_Encoder_Start+0xc4>
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	2b04      	cmp	r3, #4
 80056aa:	d008      	beq.n	80056be <HAL_TIM_Encoder_Start+0xd4>
 80056ac:	e00f      	b.n	80056ce <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2201      	movs	r2, #1
 80056b4:	2100      	movs	r1, #0
 80056b6:	4618      	mov	r0, r3
 80056b8:	f000 ff7e 	bl	80065b8 <TIM_CCxChannelCmd>
      break;
 80056bc:	e016      	b.n	80056ec <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	2201      	movs	r2, #1
 80056c4:	2104      	movs	r1, #4
 80056c6:	4618      	mov	r0, r3
 80056c8:	f000 ff76 	bl	80065b8 <TIM_CCxChannelCmd>
      break;
 80056cc:	e00e      	b.n	80056ec <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2201      	movs	r2, #1
 80056d4:	2100      	movs	r1, #0
 80056d6:	4618      	mov	r0, r3
 80056d8:	f000 ff6e 	bl	80065b8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2201      	movs	r2, #1
 80056e2:	2104      	movs	r1, #4
 80056e4:	4618      	mov	r0, r3
 80056e6:	f000 ff67 	bl	80065b8 <TIM_CCxChannelCmd>
      break;
 80056ea:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f042 0201 	orr.w	r2, r2, #1
 80056fa:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80056fc:	2300      	movs	r3, #0
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3710      	adds	r7, #16
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}

08005706 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005706:	b580      	push	{r7, lr}
 8005708:	b084      	sub	sp, #16
 800570a:	af00      	add	r7, sp, #0
 800570c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	691b      	ldr	r3, [r3, #16]
 800571c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	f003 0302 	and.w	r3, r3, #2
 8005724:	2b00      	cmp	r3, #0
 8005726:	d020      	beq.n	800576a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f003 0302 	and.w	r3, r3, #2
 800572e:	2b00      	cmp	r3, #0
 8005730:	d01b      	beq.n	800576a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f06f 0202 	mvn.w	r2, #2
 800573a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	699b      	ldr	r3, [r3, #24]
 8005748:	f003 0303 	and.w	r3, r3, #3
 800574c:	2b00      	cmp	r3, #0
 800574e:	d003      	beq.n	8005758 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f000 faf8 	bl	8005d46 <HAL_TIM_IC_CaptureCallback>
 8005756:	e005      	b.n	8005764 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f000 faea 	bl	8005d32 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 fafb 	bl	8005d5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	f003 0304 	and.w	r3, r3, #4
 8005770:	2b00      	cmp	r3, #0
 8005772:	d020      	beq.n	80057b6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f003 0304 	and.w	r3, r3, #4
 800577a:	2b00      	cmp	r3, #0
 800577c:	d01b      	beq.n	80057b6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f06f 0204 	mvn.w	r2, #4
 8005786:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2202      	movs	r2, #2
 800578c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	699b      	ldr	r3, [r3, #24]
 8005794:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005798:	2b00      	cmp	r3, #0
 800579a:	d003      	beq.n	80057a4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f000 fad2 	bl	8005d46 <HAL_TIM_IC_CaptureCallback>
 80057a2:	e005      	b.n	80057b0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f000 fac4 	bl	8005d32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 fad5 	bl	8005d5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2200      	movs	r2, #0
 80057b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	f003 0308 	and.w	r3, r3, #8
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d020      	beq.n	8005802 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f003 0308 	and.w	r3, r3, #8
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d01b      	beq.n	8005802 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f06f 0208 	mvn.w	r2, #8
 80057d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2204      	movs	r2, #4
 80057d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	69db      	ldr	r3, [r3, #28]
 80057e0:	f003 0303 	and.w	r3, r3, #3
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d003      	beq.n	80057f0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f000 faac 	bl	8005d46 <HAL_TIM_IC_CaptureCallback>
 80057ee:	e005      	b.n	80057fc <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f000 fa9e 	bl	8005d32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 faaf 	bl	8005d5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	f003 0310 	and.w	r3, r3, #16
 8005808:	2b00      	cmp	r3, #0
 800580a:	d020      	beq.n	800584e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f003 0310 	and.w	r3, r3, #16
 8005812:	2b00      	cmp	r3, #0
 8005814:	d01b      	beq.n	800584e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f06f 0210 	mvn.w	r2, #16
 800581e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2208      	movs	r2, #8
 8005824:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	69db      	ldr	r3, [r3, #28]
 800582c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005830:	2b00      	cmp	r3, #0
 8005832:	d003      	beq.n	800583c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f000 fa86 	bl	8005d46 <HAL_TIM_IC_CaptureCallback>
 800583a:	e005      	b.n	8005848 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f000 fa78 	bl	8005d32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f000 fa89 	bl	8005d5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	f003 0301 	and.w	r3, r3, #1
 8005854:	2b00      	cmp	r3, #0
 8005856:	d00c      	beq.n	8005872 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f003 0301 	and.w	r3, r3, #1
 800585e:	2b00      	cmp	r3, #0
 8005860:	d007      	beq.n	8005872 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f06f 0201 	mvn.w	r2, #1
 800586a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f7fc f80f 	bl	8001890 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005878:	2b00      	cmp	r3, #0
 800587a:	d00c      	beq.n	8005896 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005882:	2b00      	cmp	r3, #0
 8005884:	d007      	beq.n	8005896 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800588e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f000 ff3d 	bl	8006710 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800589c:	2b00      	cmp	r3, #0
 800589e:	d00c      	beq.n	80058ba <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d007      	beq.n	80058ba <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80058b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f000 fa5a 	bl	8005d6e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	f003 0320 	and.w	r3, r3, #32
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d00c      	beq.n	80058de <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f003 0320 	and.w	r3, r3, #32
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d007      	beq.n	80058de <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f06f 0220 	mvn.w	r2, #32
 80058d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f000 ff0f 	bl	80066fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80058de:	bf00      	nop
 80058e0:	3710      	adds	r7, #16
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}

080058e6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80058e6:	b580      	push	{r7, lr}
 80058e8:	b086      	sub	sp, #24
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	60f8      	str	r0, [r7, #12]
 80058ee:	60b9      	str	r1, [r7, #8]
 80058f0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058f2:	2300      	movs	r3, #0
 80058f4:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d101      	bne.n	8005904 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005900:	2302      	movs	r3, #2
 8005902:	e088      	b.n	8005a16 <HAL_TIM_IC_ConfigChannel+0x130>
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d11b      	bne.n	800594a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005922:	f000 fc85 	bl	8006230 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	699a      	ldr	r2, [r3, #24]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f022 020c 	bic.w	r2, r2, #12
 8005934:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	6999      	ldr	r1, [r3, #24]
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	689a      	ldr	r2, [r3, #8]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	430a      	orrs	r2, r1
 8005946:	619a      	str	r2, [r3, #24]
 8005948:	e060      	b.n	8005a0c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2b04      	cmp	r3, #4
 800594e:	d11c      	bne.n	800598a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005960:	f000 fd09 	bl	8006376 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	699a      	ldr	r2, [r3, #24]
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005972:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	6999      	ldr	r1, [r3, #24]
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	021a      	lsls	r2, r3, #8
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	430a      	orrs	r2, r1
 8005986:	619a      	str	r2, [r3, #24]
 8005988:	e040      	b.n	8005a0c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2b08      	cmp	r3, #8
 800598e:	d11b      	bne.n	80059c8 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80059a0:	f000 fd56 	bl	8006450 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	69da      	ldr	r2, [r3, #28]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f022 020c 	bic.w	r2, r2, #12
 80059b2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	69d9      	ldr	r1, [r3, #28]
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	689a      	ldr	r2, [r3, #8]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	430a      	orrs	r2, r1
 80059c4:	61da      	str	r2, [r3, #28]
 80059c6:	e021      	b.n	8005a0c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2b0c      	cmp	r3, #12
 80059cc:	d11c      	bne.n	8005a08 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80059de:	f000 fd73 	bl	80064c8 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	69da      	ldr	r2, [r3, #28]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80059f0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	69d9      	ldr	r1, [r3, #28]
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	021a      	lsls	r2, r3, #8
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	430a      	orrs	r2, r1
 8005a04:	61da      	str	r2, [r3, #28]
 8005a06:	e001      	b.n	8005a0c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005a14:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3718      	adds	r7, #24
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
	...

08005a20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b086      	sub	sp, #24
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	60b9      	str	r1, [r7, #8]
 8005a2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d101      	bne.n	8005a3e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005a3a:	2302      	movs	r3, #2
 8005a3c:	e0ae      	b.n	8005b9c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2201      	movs	r2, #1
 8005a42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2b0c      	cmp	r3, #12
 8005a4a:	f200 809f 	bhi.w	8005b8c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005a4e:	a201      	add	r2, pc, #4	@ (adr r2, 8005a54 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a54:	08005a89 	.word	0x08005a89
 8005a58:	08005b8d 	.word	0x08005b8d
 8005a5c:	08005b8d 	.word	0x08005b8d
 8005a60:	08005b8d 	.word	0x08005b8d
 8005a64:	08005ac9 	.word	0x08005ac9
 8005a68:	08005b8d 	.word	0x08005b8d
 8005a6c:	08005b8d 	.word	0x08005b8d
 8005a70:	08005b8d 	.word	0x08005b8d
 8005a74:	08005b0b 	.word	0x08005b0b
 8005a78:	08005b8d 	.word	0x08005b8d
 8005a7c:	08005b8d 	.word	0x08005b8d
 8005a80:	08005b8d 	.word	0x08005b8d
 8005a84:	08005b4b 	.word	0x08005b4b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	68b9      	ldr	r1, [r7, #8]
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f000 fa1e 	bl	8005ed0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	699a      	ldr	r2, [r3, #24]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f042 0208 	orr.w	r2, r2, #8
 8005aa2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	699a      	ldr	r2, [r3, #24]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f022 0204 	bic.w	r2, r2, #4
 8005ab2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	6999      	ldr	r1, [r3, #24]
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	691a      	ldr	r2, [r3, #16]
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	430a      	orrs	r2, r1
 8005ac4:	619a      	str	r2, [r3, #24]
      break;
 8005ac6:	e064      	b.n	8005b92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	68b9      	ldr	r1, [r7, #8]
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f000 fa6e 	bl	8005fb0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	699a      	ldr	r2, [r3, #24]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ae2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	699a      	ldr	r2, [r3, #24]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005af2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	6999      	ldr	r1, [r3, #24]
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	021a      	lsls	r2, r3, #8
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	430a      	orrs	r2, r1
 8005b06:	619a      	str	r2, [r3, #24]
      break;
 8005b08:	e043      	b.n	8005b92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	68b9      	ldr	r1, [r7, #8]
 8005b10:	4618      	mov	r0, r3
 8005b12:	f000 fac3 	bl	800609c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	69da      	ldr	r2, [r3, #28]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f042 0208 	orr.w	r2, r2, #8
 8005b24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	69da      	ldr	r2, [r3, #28]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f022 0204 	bic.w	r2, r2, #4
 8005b34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	69d9      	ldr	r1, [r3, #28]
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	691a      	ldr	r2, [r3, #16]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	430a      	orrs	r2, r1
 8005b46:	61da      	str	r2, [r3, #28]
      break;
 8005b48:	e023      	b.n	8005b92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	68b9      	ldr	r1, [r7, #8]
 8005b50:	4618      	mov	r0, r3
 8005b52:	f000 fb17 	bl	8006184 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	69da      	ldr	r2, [r3, #28]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	69da      	ldr	r2, [r3, #28]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	69d9      	ldr	r1, [r3, #28]
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	691b      	ldr	r3, [r3, #16]
 8005b80:	021a      	lsls	r2, r3, #8
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	430a      	orrs	r2, r1
 8005b88:	61da      	str	r2, [r3, #28]
      break;
 8005b8a:	e002      	b.n	8005b92 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	75fb      	strb	r3, [r7, #23]
      break;
 8005b90:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2200      	movs	r2, #0
 8005b96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005b9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3718      	adds	r7, #24
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}

08005ba4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d101      	bne.n	8005bc0 <HAL_TIM_ConfigClockSource+0x1c>
 8005bbc:	2302      	movs	r3, #2
 8005bbe:	e0b4      	b.n	8005d2a <HAL_TIM_ConfigClockSource+0x186>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2202      	movs	r2, #2
 8005bcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005bde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005be6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68ba      	ldr	r2, [r7, #8]
 8005bee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005bf8:	d03e      	beq.n	8005c78 <HAL_TIM_ConfigClockSource+0xd4>
 8005bfa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005bfe:	f200 8087 	bhi.w	8005d10 <HAL_TIM_ConfigClockSource+0x16c>
 8005c02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c06:	f000 8086 	beq.w	8005d16 <HAL_TIM_ConfigClockSource+0x172>
 8005c0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c0e:	d87f      	bhi.n	8005d10 <HAL_TIM_ConfigClockSource+0x16c>
 8005c10:	2b70      	cmp	r3, #112	@ 0x70
 8005c12:	d01a      	beq.n	8005c4a <HAL_TIM_ConfigClockSource+0xa6>
 8005c14:	2b70      	cmp	r3, #112	@ 0x70
 8005c16:	d87b      	bhi.n	8005d10 <HAL_TIM_ConfigClockSource+0x16c>
 8005c18:	2b60      	cmp	r3, #96	@ 0x60
 8005c1a:	d050      	beq.n	8005cbe <HAL_TIM_ConfigClockSource+0x11a>
 8005c1c:	2b60      	cmp	r3, #96	@ 0x60
 8005c1e:	d877      	bhi.n	8005d10 <HAL_TIM_ConfigClockSource+0x16c>
 8005c20:	2b50      	cmp	r3, #80	@ 0x50
 8005c22:	d03c      	beq.n	8005c9e <HAL_TIM_ConfigClockSource+0xfa>
 8005c24:	2b50      	cmp	r3, #80	@ 0x50
 8005c26:	d873      	bhi.n	8005d10 <HAL_TIM_ConfigClockSource+0x16c>
 8005c28:	2b40      	cmp	r3, #64	@ 0x40
 8005c2a:	d058      	beq.n	8005cde <HAL_TIM_ConfigClockSource+0x13a>
 8005c2c:	2b40      	cmp	r3, #64	@ 0x40
 8005c2e:	d86f      	bhi.n	8005d10 <HAL_TIM_ConfigClockSource+0x16c>
 8005c30:	2b30      	cmp	r3, #48	@ 0x30
 8005c32:	d064      	beq.n	8005cfe <HAL_TIM_ConfigClockSource+0x15a>
 8005c34:	2b30      	cmp	r3, #48	@ 0x30
 8005c36:	d86b      	bhi.n	8005d10 <HAL_TIM_ConfigClockSource+0x16c>
 8005c38:	2b20      	cmp	r3, #32
 8005c3a:	d060      	beq.n	8005cfe <HAL_TIM_ConfigClockSource+0x15a>
 8005c3c:	2b20      	cmp	r3, #32
 8005c3e:	d867      	bhi.n	8005d10 <HAL_TIM_ConfigClockSource+0x16c>
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d05c      	beq.n	8005cfe <HAL_TIM_ConfigClockSource+0x15a>
 8005c44:	2b10      	cmp	r3, #16
 8005c46:	d05a      	beq.n	8005cfe <HAL_TIM_ConfigClockSource+0x15a>
 8005c48:	e062      	b.n	8005d10 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005c5a:	f000 fc8d 	bl	8006578 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005c6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	68ba      	ldr	r2, [r7, #8]
 8005c74:	609a      	str	r2, [r3, #8]
      break;
 8005c76:	e04f      	b.n	8005d18 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005c88:	f000 fc76 	bl	8006578 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	689a      	ldr	r2, [r3, #8]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005c9a:	609a      	str	r2, [r3, #8]
      break;
 8005c9c:	e03c      	b.n	8005d18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005caa:	461a      	mov	r2, r3
 8005cac:	f000 fb34 	bl	8006318 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	2150      	movs	r1, #80	@ 0x50
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f000 fc43 	bl	8006542 <TIM_ITRx_SetConfig>
      break;
 8005cbc:	e02c      	b.n	8005d18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cca:	461a      	mov	r2, r3
 8005ccc:	f000 fb90 	bl	80063f0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	2160      	movs	r1, #96	@ 0x60
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f000 fc33 	bl	8006542 <TIM_ITRx_SetConfig>
      break;
 8005cdc:	e01c      	b.n	8005d18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cea:	461a      	mov	r2, r3
 8005cec:	f000 fb14 	bl	8006318 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	2140      	movs	r1, #64	@ 0x40
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f000 fc23 	bl	8006542 <TIM_ITRx_SetConfig>
      break;
 8005cfc:	e00c      	b.n	8005d18 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4619      	mov	r1, r3
 8005d08:	4610      	mov	r0, r2
 8005d0a:	f000 fc1a 	bl	8006542 <TIM_ITRx_SetConfig>
      break;
 8005d0e:	e003      	b.n	8005d18 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	73fb      	strb	r3, [r7, #15]
      break;
 8005d14:	e000      	b.n	8005d18 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005d16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3710      	adds	r7, #16
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}

08005d32 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d32:	b480      	push	{r7}
 8005d34:	b083      	sub	sp, #12
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d3a:	bf00      	nop
 8005d3c:	370c      	adds	r7, #12
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr

08005d46 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d46:	b480      	push	{r7}
 8005d48:	b083      	sub	sp, #12
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d4e:	bf00      	nop
 8005d50:	370c      	adds	r7, #12
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr

08005d5a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d5a:	b480      	push	{r7}
 8005d5c:	b083      	sub	sp, #12
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d62:	bf00      	nop
 8005d64:	370c      	adds	r7, #12
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr

08005d6e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d6e:	b480      	push	{r7}
 8005d70:	b083      	sub	sp, #12
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d76:	bf00      	nop
 8005d78:	370c      	adds	r7, #12
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr
	...

08005d84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b085      	sub	sp, #20
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	4a43      	ldr	r2, [pc, #268]	@ (8005ea4 <TIM_Base_SetConfig+0x120>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d013      	beq.n	8005dc4 <TIM_Base_SetConfig+0x40>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005da2:	d00f      	beq.n	8005dc4 <TIM_Base_SetConfig+0x40>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	4a40      	ldr	r2, [pc, #256]	@ (8005ea8 <TIM_Base_SetConfig+0x124>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d00b      	beq.n	8005dc4 <TIM_Base_SetConfig+0x40>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4a3f      	ldr	r2, [pc, #252]	@ (8005eac <TIM_Base_SetConfig+0x128>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d007      	beq.n	8005dc4 <TIM_Base_SetConfig+0x40>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	4a3e      	ldr	r2, [pc, #248]	@ (8005eb0 <TIM_Base_SetConfig+0x12c>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d003      	beq.n	8005dc4 <TIM_Base_SetConfig+0x40>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	4a3d      	ldr	r2, [pc, #244]	@ (8005eb4 <TIM_Base_SetConfig+0x130>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d108      	bne.n	8005dd6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	68fa      	ldr	r2, [r7, #12]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a32      	ldr	r2, [pc, #200]	@ (8005ea4 <TIM_Base_SetConfig+0x120>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d02b      	beq.n	8005e36 <TIM_Base_SetConfig+0xb2>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005de4:	d027      	beq.n	8005e36 <TIM_Base_SetConfig+0xb2>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4a2f      	ldr	r2, [pc, #188]	@ (8005ea8 <TIM_Base_SetConfig+0x124>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d023      	beq.n	8005e36 <TIM_Base_SetConfig+0xb2>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	4a2e      	ldr	r2, [pc, #184]	@ (8005eac <TIM_Base_SetConfig+0x128>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d01f      	beq.n	8005e36 <TIM_Base_SetConfig+0xb2>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4a2d      	ldr	r2, [pc, #180]	@ (8005eb0 <TIM_Base_SetConfig+0x12c>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d01b      	beq.n	8005e36 <TIM_Base_SetConfig+0xb2>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4a2c      	ldr	r2, [pc, #176]	@ (8005eb4 <TIM_Base_SetConfig+0x130>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d017      	beq.n	8005e36 <TIM_Base_SetConfig+0xb2>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4a2b      	ldr	r2, [pc, #172]	@ (8005eb8 <TIM_Base_SetConfig+0x134>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d013      	beq.n	8005e36 <TIM_Base_SetConfig+0xb2>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4a2a      	ldr	r2, [pc, #168]	@ (8005ebc <TIM_Base_SetConfig+0x138>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d00f      	beq.n	8005e36 <TIM_Base_SetConfig+0xb2>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4a29      	ldr	r2, [pc, #164]	@ (8005ec0 <TIM_Base_SetConfig+0x13c>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d00b      	beq.n	8005e36 <TIM_Base_SetConfig+0xb2>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4a28      	ldr	r2, [pc, #160]	@ (8005ec4 <TIM_Base_SetConfig+0x140>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d007      	beq.n	8005e36 <TIM_Base_SetConfig+0xb2>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	4a27      	ldr	r2, [pc, #156]	@ (8005ec8 <TIM_Base_SetConfig+0x144>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d003      	beq.n	8005e36 <TIM_Base_SetConfig+0xb2>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a26      	ldr	r2, [pc, #152]	@ (8005ecc <TIM_Base_SetConfig+0x148>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d108      	bne.n	8005e48 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	68db      	ldr	r3, [r3, #12]
 8005e42:	68fa      	ldr	r2, [r7, #12]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	695b      	ldr	r3, [r3, #20]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	689a      	ldr	r2, [r3, #8]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4a0e      	ldr	r2, [pc, #56]	@ (8005ea4 <TIM_Base_SetConfig+0x120>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d003      	beq.n	8005e76 <TIM_Base_SetConfig+0xf2>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	4a10      	ldr	r2, [pc, #64]	@ (8005eb4 <TIM_Base_SetConfig+0x130>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d103      	bne.n	8005e7e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	691a      	ldr	r2, [r3, #16]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f043 0204 	orr.w	r2, r3, #4
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	68fa      	ldr	r2, [r7, #12]
 8005e94:	601a      	str	r2, [r3, #0]
}
 8005e96:	bf00      	nop
 8005e98:	3714      	adds	r7, #20
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr
 8005ea2:	bf00      	nop
 8005ea4:	40010000 	.word	0x40010000
 8005ea8:	40000400 	.word	0x40000400
 8005eac:	40000800 	.word	0x40000800
 8005eb0:	40000c00 	.word	0x40000c00
 8005eb4:	40010400 	.word	0x40010400
 8005eb8:	40014000 	.word	0x40014000
 8005ebc:	40014400 	.word	0x40014400
 8005ec0:	40014800 	.word	0x40014800
 8005ec4:	40001800 	.word	0x40001800
 8005ec8:	40001c00 	.word	0x40001c00
 8005ecc:	40002000 	.word	0x40002000

08005ed0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b087      	sub	sp, #28
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6a1b      	ldr	r3, [r3, #32]
 8005ede:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6a1b      	ldr	r3, [r3, #32]
 8005ee4:	f023 0201 	bic.w	r2, r3, #1
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	699b      	ldr	r3, [r3, #24]
 8005ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005efe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f023 0303 	bic.w	r3, r3, #3
 8005f06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	68fa      	ldr	r2, [r7, #12]
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	f023 0302 	bic.w	r3, r3, #2
 8005f18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	697a      	ldr	r2, [r7, #20]
 8005f20:	4313      	orrs	r3, r2
 8005f22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	4a20      	ldr	r2, [pc, #128]	@ (8005fa8 <TIM_OC1_SetConfig+0xd8>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d003      	beq.n	8005f34 <TIM_OC1_SetConfig+0x64>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	4a1f      	ldr	r2, [pc, #124]	@ (8005fac <TIM_OC1_SetConfig+0xdc>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d10c      	bne.n	8005f4e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	f023 0308 	bic.w	r3, r3, #8
 8005f3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	68db      	ldr	r3, [r3, #12]
 8005f40:	697a      	ldr	r2, [r7, #20]
 8005f42:	4313      	orrs	r3, r2
 8005f44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	f023 0304 	bic.w	r3, r3, #4
 8005f4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4a15      	ldr	r2, [pc, #84]	@ (8005fa8 <TIM_OC1_SetConfig+0xd8>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d003      	beq.n	8005f5e <TIM_OC1_SetConfig+0x8e>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4a14      	ldr	r2, [pc, #80]	@ (8005fac <TIM_OC1_SetConfig+0xdc>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d111      	bne.n	8005f82 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005f64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005f6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	695b      	ldr	r3, [r3, #20]
 8005f72:	693a      	ldr	r2, [r7, #16]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	699b      	ldr	r3, [r3, #24]
 8005f7c:	693a      	ldr	r2, [r7, #16]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	693a      	ldr	r2, [r7, #16]
 8005f86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	68fa      	ldr	r2, [r7, #12]
 8005f8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	685a      	ldr	r2, [r3, #4]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	697a      	ldr	r2, [r7, #20]
 8005f9a:	621a      	str	r2, [r3, #32]
}
 8005f9c:	bf00      	nop
 8005f9e:	371c      	adds	r7, #28
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr
 8005fa8:	40010000 	.word	0x40010000
 8005fac:	40010400 	.word	0x40010400

08005fb0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b087      	sub	sp, #28
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6a1b      	ldr	r3, [r3, #32]
 8005fbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6a1b      	ldr	r3, [r3, #32]
 8005fc4:	f023 0210 	bic.w	r2, r3, #16
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	699b      	ldr	r3, [r3, #24]
 8005fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005fde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005fe6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	021b      	lsls	r3, r3, #8
 8005fee:	68fa      	ldr	r2, [r7, #12]
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	f023 0320 	bic.w	r3, r3, #32
 8005ffa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	011b      	lsls	r3, r3, #4
 8006002:	697a      	ldr	r2, [r7, #20]
 8006004:	4313      	orrs	r3, r2
 8006006:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	4a22      	ldr	r2, [pc, #136]	@ (8006094 <TIM_OC2_SetConfig+0xe4>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d003      	beq.n	8006018 <TIM_OC2_SetConfig+0x68>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	4a21      	ldr	r2, [pc, #132]	@ (8006098 <TIM_OC2_SetConfig+0xe8>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d10d      	bne.n	8006034 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800601e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	011b      	lsls	r3, r3, #4
 8006026:	697a      	ldr	r2, [r7, #20]
 8006028:	4313      	orrs	r3, r2
 800602a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006032:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	4a17      	ldr	r2, [pc, #92]	@ (8006094 <TIM_OC2_SetConfig+0xe4>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d003      	beq.n	8006044 <TIM_OC2_SetConfig+0x94>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	4a16      	ldr	r2, [pc, #88]	@ (8006098 <TIM_OC2_SetConfig+0xe8>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d113      	bne.n	800606c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800604a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006052:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	695b      	ldr	r3, [r3, #20]
 8006058:	009b      	lsls	r3, r3, #2
 800605a:	693a      	ldr	r2, [r7, #16]
 800605c:	4313      	orrs	r3, r2
 800605e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	699b      	ldr	r3, [r3, #24]
 8006064:	009b      	lsls	r3, r3, #2
 8006066:	693a      	ldr	r2, [r7, #16]
 8006068:	4313      	orrs	r3, r2
 800606a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	693a      	ldr	r2, [r7, #16]
 8006070:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	68fa      	ldr	r2, [r7, #12]
 8006076:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	685a      	ldr	r2, [r3, #4]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	697a      	ldr	r2, [r7, #20]
 8006084:	621a      	str	r2, [r3, #32]
}
 8006086:	bf00      	nop
 8006088:	371c      	adds	r7, #28
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr
 8006092:	bf00      	nop
 8006094:	40010000 	.word	0x40010000
 8006098:	40010400 	.word	0x40010400

0800609c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800609c:	b480      	push	{r7}
 800609e:	b087      	sub	sp, #28
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6a1b      	ldr	r3, [r3, #32]
 80060aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6a1b      	ldr	r3, [r3, #32]
 80060b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	69db      	ldr	r3, [r3, #28]
 80060c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f023 0303 	bic.w	r3, r3, #3
 80060d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	68fa      	ldr	r2, [r7, #12]
 80060da:	4313      	orrs	r3, r2
 80060dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80060e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	021b      	lsls	r3, r3, #8
 80060ec:	697a      	ldr	r2, [r7, #20]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	4a21      	ldr	r2, [pc, #132]	@ (800617c <TIM_OC3_SetConfig+0xe0>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d003      	beq.n	8006102 <TIM_OC3_SetConfig+0x66>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	4a20      	ldr	r2, [pc, #128]	@ (8006180 <TIM_OC3_SetConfig+0xe4>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d10d      	bne.n	800611e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006108:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	021b      	lsls	r3, r3, #8
 8006110:	697a      	ldr	r2, [r7, #20]
 8006112:	4313      	orrs	r3, r2
 8006114:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800611c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	4a16      	ldr	r2, [pc, #88]	@ (800617c <TIM_OC3_SetConfig+0xe0>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d003      	beq.n	800612e <TIM_OC3_SetConfig+0x92>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	4a15      	ldr	r2, [pc, #84]	@ (8006180 <TIM_OC3_SetConfig+0xe4>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d113      	bne.n	8006156 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006134:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800613c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	695b      	ldr	r3, [r3, #20]
 8006142:	011b      	lsls	r3, r3, #4
 8006144:	693a      	ldr	r2, [r7, #16]
 8006146:	4313      	orrs	r3, r2
 8006148:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	699b      	ldr	r3, [r3, #24]
 800614e:	011b      	lsls	r3, r3, #4
 8006150:	693a      	ldr	r2, [r7, #16]
 8006152:	4313      	orrs	r3, r2
 8006154:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	693a      	ldr	r2, [r7, #16]
 800615a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	68fa      	ldr	r2, [r7, #12]
 8006160:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	685a      	ldr	r2, [r3, #4]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	697a      	ldr	r2, [r7, #20]
 800616e:	621a      	str	r2, [r3, #32]
}
 8006170:	bf00      	nop
 8006172:	371c      	adds	r7, #28
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr
 800617c:	40010000 	.word	0x40010000
 8006180:	40010400 	.word	0x40010400

08006184 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006184:	b480      	push	{r7}
 8006186:	b087      	sub	sp, #28
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6a1b      	ldr	r3, [r3, #32]
 8006192:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6a1b      	ldr	r3, [r3, #32]
 8006198:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	69db      	ldr	r3, [r3, #28]
 80061aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	021b      	lsls	r3, r3, #8
 80061c2:	68fa      	ldr	r2, [r7, #12]
 80061c4:	4313      	orrs	r3, r2
 80061c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80061ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	031b      	lsls	r3, r3, #12
 80061d6:	693a      	ldr	r2, [r7, #16]
 80061d8:	4313      	orrs	r3, r2
 80061da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	4a12      	ldr	r2, [pc, #72]	@ (8006228 <TIM_OC4_SetConfig+0xa4>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d003      	beq.n	80061ec <TIM_OC4_SetConfig+0x68>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	4a11      	ldr	r2, [pc, #68]	@ (800622c <TIM_OC4_SetConfig+0xa8>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d109      	bne.n	8006200 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80061f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	695b      	ldr	r3, [r3, #20]
 80061f8:	019b      	lsls	r3, r3, #6
 80061fa:	697a      	ldr	r2, [r7, #20]
 80061fc:	4313      	orrs	r3, r2
 80061fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	697a      	ldr	r2, [r7, #20]
 8006204:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	68fa      	ldr	r2, [r7, #12]
 800620a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	685a      	ldr	r2, [r3, #4]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	693a      	ldr	r2, [r7, #16]
 8006218:	621a      	str	r2, [r3, #32]
}
 800621a:	bf00      	nop
 800621c:	371c      	adds	r7, #28
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr
 8006226:	bf00      	nop
 8006228:	40010000 	.word	0x40010000
 800622c:	40010400 	.word	0x40010400

08006230 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006230:	b480      	push	{r7}
 8006232:	b087      	sub	sp, #28
 8006234:	af00      	add	r7, sp, #0
 8006236:	60f8      	str	r0, [r7, #12]
 8006238:	60b9      	str	r1, [r7, #8]
 800623a:	607a      	str	r2, [r7, #4]
 800623c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	6a1b      	ldr	r3, [r3, #32]
 8006242:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6a1b      	ldr	r3, [r3, #32]
 8006248:	f023 0201 	bic.w	r2, r3, #1
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	699b      	ldr	r3, [r3, #24]
 8006254:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	4a28      	ldr	r2, [pc, #160]	@ (80062fc <TIM_TI1_SetConfig+0xcc>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d01b      	beq.n	8006296 <TIM_TI1_SetConfig+0x66>
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006264:	d017      	beq.n	8006296 <TIM_TI1_SetConfig+0x66>
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	4a25      	ldr	r2, [pc, #148]	@ (8006300 <TIM_TI1_SetConfig+0xd0>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d013      	beq.n	8006296 <TIM_TI1_SetConfig+0x66>
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	4a24      	ldr	r2, [pc, #144]	@ (8006304 <TIM_TI1_SetConfig+0xd4>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d00f      	beq.n	8006296 <TIM_TI1_SetConfig+0x66>
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	4a23      	ldr	r2, [pc, #140]	@ (8006308 <TIM_TI1_SetConfig+0xd8>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d00b      	beq.n	8006296 <TIM_TI1_SetConfig+0x66>
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	4a22      	ldr	r2, [pc, #136]	@ (800630c <TIM_TI1_SetConfig+0xdc>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d007      	beq.n	8006296 <TIM_TI1_SetConfig+0x66>
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	4a21      	ldr	r2, [pc, #132]	@ (8006310 <TIM_TI1_SetConfig+0xe0>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d003      	beq.n	8006296 <TIM_TI1_SetConfig+0x66>
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	4a20      	ldr	r2, [pc, #128]	@ (8006314 <TIM_TI1_SetConfig+0xe4>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d101      	bne.n	800629a <TIM_TI1_SetConfig+0x6a>
 8006296:	2301      	movs	r3, #1
 8006298:	e000      	b.n	800629c <TIM_TI1_SetConfig+0x6c>
 800629a:	2300      	movs	r3, #0
 800629c:	2b00      	cmp	r3, #0
 800629e:	d008      	beq.n	80062b2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	f023 0303 	bic.w	r3, r3, #3
 80062a6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80062a8:	697a      	ldr	r2, [r7, #20]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	4313      	orrs	r3, r2
 80062ae:	617b      	str	r3, [r7, #20]
 80062b0:	e003      	b.n	80062ba <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	f043 0301 	orr.w	r3, r3, #1
 80062b8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80062c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	011b      	lsls	r3, r3, #4
 80062c6:	b2db      	uxtb	r3, r3
 80062c8:	697a      	ldr	r2, [r7, #20]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	f023 030a 	bic.w	r3, r3, #10
 80062d4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	f003 030a 	and.w	r3, r3, #10
 80062dc:	693a      	ldr	r2, [r7, #16]
 80062de:	4313      	orrs	r3, r2
 80062e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	697a      	ldr	r2, [r7, #20]
 80062e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	693a      	ldr	r2, [r7, #16]
 80062ec:	621a      	str	r2, [r3, #32]
}
 80062ee:	bf00      	nop
 80062f0:	371c      	adds	r7, #28
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr
 80062fa:	bf00      	nop
 80062fc:	40010000 	.word	0x40010000
 8006300:	40000400 	.word	0x40000400
 8006304:	40000800 	.word	0x40000800
 8006308:	40000c00 	.word	0x40000c00
 800630c:	40010400 	.word	0x40010400
 8006310:	40014000 	.word	0x40014000
 8006314:	40001800 	.word	0x40001800

08006318 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006318:	b480      	push	{r7}
 800631a:	b087      	sub	sp, #28
 800631c:	af00      	add	r7, sp, #0
 800631e:	60f8      	str	r0, [r7, #12]
 8006320:	60b9      	str	r1, [r7, #8]
 8006322:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6a1b      	ldr	r3, [r3, #32]
 8006328:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	6a1b      	ldr	r3, [r3, #32]
 800632e:	f023 0201 	bic.w	r2, r3, #1
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	699b      	ldr	r3, [r3, #24]
 800633a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006342:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	011b      	lsls	r3, r3, #4
 8006348:	693a      	ldr	r2, [r7, #16]
 800634a:	4313      	orrs	r3, r2
 800634c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	f023 030a 	bic.w	r3, r3, #10
 8006354:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006356:	697a      	ldr	r2, [r7, #20]
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	4313      	orrs	r3, r2
 800635c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	693a      	ldr	r2, [r7, #16]
 8006362:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	697a      	ldr	r2, [r7, #20]
 8006368:	621a      	str	r2, [r3, #32]
}
 800636a:	bf00      	nop
 800636c:	371c      	adds	r7, #28
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr

08006376 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006376:	b480      	push	{r7}
 8006378:	b087      	sub	sp, #28
 800637a:	af00      	add	r7, sp, #0
 800637c:	60f8      	str	r0, [r7, #12]
 800637e:	60b9      	str	r1, [r7, #8]
 8006380:	607a      	str	r2, [r7, #4]
 8006382:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	6a1b      	ldr	r3, [r3, #32]
 8006388:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	6a1b      	ldr	r3, [r3, #32]
 800638e:	f023 0210 	bic.w	r2, r3, #16
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	699b      	ldr	r3, [r3, #24]
 800639a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	021b      	lsls	r3, r3, #8
 80063a8:	693a      	ldr	r2, [r7, #16]
 80063aa:	4313      	orrs	r3, r2
 80063ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80063b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	031b      	lsls	r3, r3, #12
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	693a      	ldr	r2, [r7, #16]
 80063be:	4313      	orrs	r3, r2
 80063c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80063c8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	011b      	lsls	r3, r3, #4
 80063ce:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80063d2:	697a      	ldr	r2, [r7, #20]
 80063d4:	4313      	orrs	r3, r2
 80063d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	693a      	ldr	r2, [r7, #16]
 80063dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	697a      	ldr	r2, [r7, #20]
 80063e2:	621a      	str	r2, [r3, #32]
}
 80063e4:	bf00      	nop
 80063e6:	371c      	adds	r7, #28
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr

080063f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b087      	sub	sp, #28
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	60f8      	str	r0, [r7, #12]
 80063f8:	60b9      	str	r1, [r7, #8]
 80063fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	6a1b      	ldr	r3, [r3, #32]
 8006400:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	6a1b      	ldr	r3, [r3, #32]
 8006406:	f023 0210 	bic.w	r2, r3, #16
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	699b      	ldr	r3, [r3, #24]
 8006412:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800641a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	031b      	lsls	r3, r3, #12
 8006420:	693a      	ldr	r2, [r7, #16]
 8006422:	4313      	orrs	r3, r2
 8006424:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800642c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	011b      	lsls	r3, r3, #4
 8006432:	697a      	ldr	r2, [r7, #20]
 8006434:	4313      	orrs	r3, r2
 8006436:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	693a      	ldr	r2, [r7, #16]
 800643c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	697a      	ldr	r2, [r7, #20]
 8006442:	621a      	str	r2, [r3, #32]
}
 8006444:	bf00      	nop
 8006446:	371c      	adds	r7, #28
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr

08006450 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006450:	b480      	push	{r7}
 8006452:	b087      	sub	sp, #28
 8006454:	af00      	add	r7, sp, #0
 8006456:	60f8      	str	r0, [r7, #12]
 8006458:	60b9      	str	r1, [r7, #8]
 800645a:	607a      	str	r2, [r7, #4]
 800645c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	6a1b      	ldr	r3, [r3, #32]
 8006462:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	6a1b      	ldr	r3, [r3, #32]
 8006468:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	69db      	ldr	r3, [r3, #28]
 8006474:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	f023 0303 	bic.w	r3, r3, #3
 800647c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800647e:	693a      	ldr	r2, [r7, #16]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	4313      	orrs	r3, r2
 8006484:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800648c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	011b      	lsls	r3, r3, #4
 8006492:	b2db      	uxtb	r3, r3
 8006494:	693a      	ldr	r2, [r7, #16]
 8006496:	4313      	orrs	r3, r2
 8006498:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80064a0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	021b      	lsls	r3, r3, #8
 80064a6:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80064aa:	697a      	ldr	r2, [r7, #20]
 80064ac:	4313      	orrs	r3, r2
 80064ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	693a      	ldr	r2, [r7, #16]
 80064b4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	697a      	ldr	r2, [r7, #20]
 80064ba:	621a      	str	r2, [r3, #32]
}
 80064bc:	bf00      	nop
 80064be:	371c      	adds	r7, #28
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr

080064c8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b087      	sub	sp, #28
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	60b9      	str	r1, [r7, #8]
 80064d2:	607a      	str	r2, [r7, #4]
 80064d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	6a1b      	ldr	r3, [r3, #32]
 80064da:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	6a1b      	ldr	r3, [r3, #32]
 80064e0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	69db      	ldr	r3, [r3, #28]
 80064ec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064f4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	021b      	lsls	r3, r3, #8
 80064fa:	693a      	ldr	r2, [r7, #16]
 80064fc:	4313      	orrs	r3, r2
 80064fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006506:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	031b      	lsls	r3, r3, #12
 800650c:	b29b      	uxth	r3, r3
 800650e:	693a      	ldr	r2, [r7, #16]
 8006510:	4313      	orrs	r3, r2
 8006512:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800651a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	031b      	lsls	r3, r3, #12
 8006520:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8006524:	697a      	ldr	r2, [r7, #20]
 8006526:	4313      	orrs	r3, r2
 8006528:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	693a      	ldr	r2, [r7, #16]
 800652e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	697a      	ldr	r2, [r7, #20]
 8006534:	621a      	str	r2, [r3, #32]
}
 8006536:	bf00      	nop
 8006538:	371c      	adds	r7, #28
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr

08006542 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006542:	b480      	push	{r7}
 8006544:	b085      	sub	sp, #20
 8006546:	af00      	add	r7, sp, #0
 8006548:	6078      	str	r0, [r7, #4]
 800654a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006558:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800655a:	683a      	ldr	r2, [r7, #0]
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	4313      	orrs	r3, r2
 8006560:	f043 0307 	orr.w	r3, r3, #7
 8006564:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	68fa      	ldr	r2, [r7, #12]
 800656a:	609a      	str	r2, [r3, #8]
}
 800656c:	bf00      	nop
 800656e:	3714      	adds	r7, #20
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr

08006578 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006578:	b480      	push	{r7}
 800657a:	b087      	sub	sp, #28
 800657c:	af00      	add	r7, sp, #0
 800657e:	60f8      	str	r0, [r7, #12]
 8006580:	60b9      	str	r1, [r7, #8]
 8006582:	607a      	str	r2, [r7, #4]
 8006584:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006592:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	021a      	lsls	r2, r3, #8
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	431a      	orrs	r2, r3
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	4313      	orrs	r3, r2
 80065a0:	697a      	ldr	r2, [r7, #20]
 80065a2:	4313      	orrs	r3, r2
 80065a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	697a      	ldr	r2, [r7, #20]
 80065aa:	609a      	str	r2, [r3, #8]
}
 80065ac:	bf00      	nop
 80065ae:	371c      	adds	r7, #28
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr

080065b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b087      	sub	sp, #28
 80065bc:	af00      	add	r7, sp, #0
 80065be:	60f8      	str	r0, [r7, #12]
 80065c0:	60b9      	str	r1, [r7, #8]
 80065c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	f003 031f 	and.w	r3, r3, #31
 80065ca:	2201      	movs	r2, #1
 80065cc:	fa02 f303 	lsl.w	r3, r2, r3
 80065d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	6a1a      	ldr	r2, [r3, #32]
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	43db      	mvns	r3, r3
 80065da:	401a      	ands	r2, r3
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	6a1a      	ldr	r2, [r3, #32]
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	f003 031f 	and.w	r3, r3, #31
 80065ea:	6879      	ldr	r1, [r7, #4]
 80065ec:	fa01 f303 	lsl.w	r3, r1, r3
 80065f0:	431a      	orrs	r2, r3
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	621a      	str	r2, [r3, #32]
}
 80065f6:	bf00      	nop
 80065f8:	371c      	adds	r7, #28
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr
	...

08006604 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006604:	b480      	push	{r7}
 8006606:	b085      	sub	sp, #20
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006614:	2b01      	cmp	r3, #1
 8006616:	d101      	bne.n	800661c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006618:	2302      	movs	r3, #2
 800661a:	e05a      	b.n	80066d2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2201      	movs	r2, #1
 8006620:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2202      	movs	r2, #2
 8006628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006642:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	68fa      	ldr	r2, [r7, #12]
 800664a:	4313      	orrs	r3, r2
 800664c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	68fa      	ldr	r2, [r7, #12]
 8006654:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a21      	ldr	r2, [pc, #132]	@ (80066e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d022      	beq.n	80066a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006668:	d01d      	beq.n	80066a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a1d      	ldr	r2, [pc, #116]	@ (80066e4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d018      	beq.n	80066a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a1b      	ldr	r2, [pc, #108]	@ (80066e8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d013      	beq.n	80066a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a1a      	ldr	r2, [pc, #104]	@ (80066ec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d00e      	beq.n	80066a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a18      	ldr	r2, [pc, #96]	@ (80066f0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d009      	beq.n	80066a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a17      	ldr	r2, [pc, #92]	@ (80066f4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d004      	beq.n	80066a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a15      	ldr	r2, [pc, #84]	@ (80066f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d10c      	bne.n	80066c0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80066ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	68ba      	ldr	r2, [r7, #8]
 80066b4:	4313      	orrs	r3, r2
 80066b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	68ba      	ldr	r2, [r7, #8]
 80066be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80066d0:	2300      	movs	r3, #0
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3714      	adds	r7, #20
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr
 80066de:	bf00      	nop
 80066e0:	40010000 	.word	0x40010000
 80066e4:	40000400 	.word	0x40000400
 80066e8:	40000800 	.word	0x40000800
 80066ec:	40000c00 	.word	0x40000c00
 80066f0:	40010400 	.word	0x40010400
 80066f4:	40014000 	.word	0x40014000
 80066f8:	40001800 	.word	0x40001800

080066fc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b083      	sub	sp, #12
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006704:	bf00      	nop
 8006706:	370c      	adds	r7, #12
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr

08006710 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006710:	b480      	push	{r7}
 8006712:	b083      	sub	sp, #12
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006718:	bf00      	nop
 800671a:	370c      	adds	r7, #12
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr

08006724 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b082      	sub	sp, #8
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d101      	bne.n	8006736 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	e042      	b.n	80067bc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800673c:	b2db      	uxtb	r3, r3
 800673e:	2b00      	cmp	r3, #0
 8006740:	d106      	bne.n	8006750 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2200      	movs	r2, #0
 8006746:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f7fb fdcc 	bl	80022e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2224      	movs	r2, #36	@ 0x24
 8006754:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	68da      	ldr	r2, [r3, #12]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006766:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f000 ff95 	bl	8007698 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	691a      	ldr	r2, [r3, #16]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800677c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	695a      	ldr	r2, [r3, #20]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800678c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	68da      	ldr	r2, [r3, #12]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800679c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2220      	movs	r2, #32
 80067a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2220      	movs	r2, #32
 80067b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2200      	movs	r2, #0
 80067b8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80067ba:	2300      	movs	r3, #0
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3708      	adds	r7, #8
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}

080067c4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b08c      	sub	sp, #48	@ 0x30
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	60f8      	str	r0, [r7, #12]
 80067cc:	60b9      	str	r1, [r7, #8]
 80067ce:	4613      	mov	r3, r2
 80067d0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067d8:	b2db      	uxtb	r3, r3
 80067da:	2b20      	cmp	r3, #32
 80067dc:	d162      	bne.n	80068a4 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d002      	beq.n	80067ea <HAL_UART_Transmit_DMA+0x26>
 80067e4:	88fb      	ldrh	r3, [r7, #6]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d101      	bne.n	80067ee <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
 80067ec:	e05b      	b.n	80068a6 <HAL_UART_Transmit_DMA+0xe2>
    }

    huart->pTxBuffPtr = pData;
 80067ee:	68ba      	ldr	r2, [r7, #8]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	88fa      	ldrh	r2, [r7, #6]
 80067f8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	88fa      	ldrh	r2, [r7, #6]
 80067fe:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2200      	movs	r2, #0
 8006804:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2221      	movs	r2, #33	@ 0x21
 800680a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006812:	4a27      	ldr	r2, [pc, #156]	@ (80068b0 <HAL_UART_Transmit_DMA+0xec>)
 8006814:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800681a:	4a26      	ldr	r2, [pc, #152]	@ (80068b4 <HAL_UART_Transmit_DMA+0xf0>)
 800681c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006822:	4a25      	ldr	r2, [pc, #148]	@ (80068b8 <HAL_UART_Transmit_DMA+0xf4>)
 8006824:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800682a:	2200      	movs	r2, #0
 800682c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800682e:	f107 0308 	add.w	r3, r7, #8
 8006832:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size) != HAL_OK)
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800683a:	6819      	ldr	r1, [r3, #0]
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	3304      	adds	r3, #4
 8006842:	461a      	mov	r2, r3
 8006844:	88fb      	ldrh	r3, [r7, #6]
 8006846:	f7fc fdef 	bl	8003428 <HAL_DMA_Start_IT>
 800684a:	4603      	mov	r3, r0
 800684c:	2b00      	cmp	r3, #0
 800684e:	d008      	beq.n	8006862 <HAL_UART_Transmit_DMA+0x9e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2210      	movs	r2, #16
 8006854:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2220      	movs	r2, #32
 800685a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	e021      	b.n	80068a6 <HAL_UART_Transmit_DMA+0xe2>
    }
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800686a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	3314      	adds	r3, #20
 8006872:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006874:	69bb      	ldr	r3, [r7, #24]
 8006876:	e853 3f00 	ldrex	r3, [r3]
 800687a:	617b      	str	r3, [r7, #20]
   return(result);
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006882:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	3314      	adds	r3, #20
 800688a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800688c:	627a      	str	r2, [r7, #36]	@ 0x24
 800688e:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006890:	6a39      	ldr	r1, [r7, #32]
 8006892:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006894:	e841 2300 	strex	r3, r2, [r1]
 8006898:	61fb      	str	r3, [r7, #28]
   return(result);
 800689a:	69fb      	ldr	r3, [r7, #28]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d1e5      	bne.n	800686c <HAL_UART_Transmit_DMA+0xa8>

    return HAL_OK;
 80068a0:	2300      	movs	r3, #0
 80068a2:	e000      	b.n	80068a6 <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 80068a4:	2302      	movs	r3, #2
  }
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3730      	adds	r7, #48	@ 0x30
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}
 80068ae:	bf00      	nop
 80068b0:	08006f15 	.word	0x08006f15
 80068b4:	08006faf 	.word	0x08006faf
 80068b8:	08007133 	.word	0x08007133

080068bc <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b08c      	sub	sp, #48	@ 0x30
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	60f8      	str	r0, [r7, #12]
 80068c4:	60b9      	str	r1, [r7, #8]
 80068c6:	4613      	mov	r3, r2
 80068c8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80068d0:	b2db      	uxtb	r3, r3
 80068d2:	2b20      	cmp	r3, #32
 80068d4:	d146      	bne.n	8006964 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
  {
    if ((pData == NULL) || (Size == 0U))
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d002      	beq.n	80068e2 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80068dc:	88fb      	ldrh	r3, [r7, #6]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d101      	bne.n	80068e6 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	e03f      	b.n	8006966 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2201      	movs	r2, #1
 80068ea:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2200      	movs	r2, #0
 80068f0:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80068f2:	88fb      	ldrh	r3, [r7, #6]
 80068f4:	461a      	mov	r2, r3
 80068f6:	68b9      	ldr	r1, [r7, #8]
 80068f8:	68f8      	ldr	r0, [r7, #12]
 80068fa:	f000 fc65 	bl	80071c8 <UART_Start_Receive_DMA>
 80068fe:	4603      	mov	r3, r0
 8006900:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006908:	2b01      	cmp	r3, #1
 800690a:	d125      	bne.n	8006958 <HAL_UARTEx_ReceiveToIdle_DMA+0x9c>
    {
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 800690c:	2300      	movs	r3, #0
 800690e:	613b      	str	r3, [r7, #16]
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	613b      	str	r3, [r7, #16]
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	613b      	str	r3, [r7, #16]
 8006920:	693b      	ldr	r3, [r7, #16]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	330c      	adds	r3, #12
 8006928:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800692a:	69bb      	ldr	r3, [r7, #24]
 800692c:	e853 3f00 	ldrex	r3, [r3]
 8006930:	617b      	str	r3, [r7, #20]
   return(result);
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	f043 0310 	orr.w	r3, r3, #16
 8006938:	62bb      	str	r3, [r7, #40]	@ 0x28
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	330c      	adds	r3, #12
 8006940:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006942:	627a      	str	r2, [r7, #36]	@ 0x24
 8006944:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006946:	6a39      	ldr	r1, [r7, #32]
 8006948:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800694a:	e841 2300 	strex	r3, r2, [r1]
 800694e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006950:	69fb      	ldr	r3, [r7, #28]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d1e5      	bne.n	8006922 <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
 8006956:	e002      	b.n	800695e <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 8006958:	2301      	movs	r3, #1
 800695a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 800695e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006962:	e000      	b.n	8006966 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
  }
  else
  {
    return HAL_BUSY;
 8006964:	2302      	movs	r3, #2
  }
}
 8006966:	4618      	mov	r0, r3
 8006968:	3730      	adds	r7, #48	@ 0x30
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}
	...

08006970 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b0ba      	sub	sp, #232	@ 0xe8
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	68db      	ldr	r3, [r3, #12]
 8006988:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	695b      	ldr	r3, [r3, #20]
 8006992:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006996:	2300      	movs	r3, #0
 8006998:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800699c:	2300      	movs	r3, #0
 800699e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80069a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069a6:	f003 030f 	and.w	r3, r3, #15
 80069aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80069ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d10f      	bne.n	80069d6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80069b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069ba:	f003 0320 	and.w	r3, r3, #32
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d009      	beq.n	80069d6 <HAL_UART_IRQHandler+0x66>
 80069c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069c6:	f003 0320 	and.w	r3, r3, #32
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d003      	beq.n	80069d6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f000 fda4 	bl	800751c <UART_Receive_IT>
      return;
 80069d4:	e273      	b.n	8006ebe <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80069d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80069da:	2b00      	cmp	r3, #0
 80069dc:	f000 80de 	beq.w	8006b9c <HAL_UART_IRQHandler+0x22c>
 80069e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80069e4:	f003 0301 	and.w	r3, r3, #1
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d106      	bne.n	80069fa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80069ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069f0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	f000 80d1 	beq.w	8006b9c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80069fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069fe:	f003 0301 	and.w	r3, r3, #1
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d00b      	beq.n	8006a1e <HAL_UART_IRQHandler+0xae>
 8006a06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d005      	beq.n	8006a1e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a16:	f043 0201 	orr.w	r2, r3, #1
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006a1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a22:	f003 0304 	and.w	r3, r3, #4
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d00b      	beq.n	8006a42 <HAL_UART_IRQHandler+0xd2>
 8006a2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a2e:	f003 0301 	and.w	r3, r3, #1
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d005      	beq.n	8006a42 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a3a:	f043 0202 	orr.w	r2, r3, #2
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006a42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a46:	f003 0302 	and.w	r3, r3, #2
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d00b      	beq.n	8006a66 <HAL_UART_IRQHandler+0xf6>
 8006a4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a52:	f003 0301 	and.w	r3, r3, #1
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d005      	beq.n	8006a66 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a5e:	f043 0204 	orr.w	r2, r3, #4
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006a66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a6a:	f003 0308 	and.w	r3, r3, #8
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d011      	beq.n	8006a96 <HAL_UART_IRQHandler+0x126>
 8006a72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a76:	f003 0320 	and.w	r3, r3, #32
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d105      	bne.n	8006a8a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006a7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a82:	f003 0301 	and.w	r3, r3, #1
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d005      	beq.n	8006a96 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a8e:	f043 0208 	orr.w	r2, r3, #8
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	f000 820a 	beq.w	8006eb4 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006aa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006aa4:	f003 0320 	and.w	r3, r3, #32
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d008      	beq.n	8006abe <HAL_UART_IRQHandler+0x14e>
 8006aac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ab0:	f003 0320 	and.w	r3, r3, #32
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d002      	beq.n	8006abe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f000 fd2f 	bl	800751c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	695b      	ldr	r3, [r3, #20]
 8006ac4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ac8:	2b40      	cmp	r3, #64	@ 0x40
 8006aca:	bf0c      	ite	eq
 8006acc:	2301      	moveq	r3, #1
 8006ace:	2300      	movne	r3, #0
 8006ad0:	b2db      	uxtb	r3, r3
 8006ad2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ada:	f003 0308 	and.w	r3, r3, #8
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d103      	bne.n	8006aea <HAL_UART_IRQHandler+0x17a>
 8006ae2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d04f      	beq.n	8006b8a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 fc3a 	bl	8007364 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	695b      	ldr	r3, [r3, #20]
 8006af6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006afa:	2b40      	cmp	r3, #64	@ 0x40
 8006afc:	d141      	bne.n	8006b82 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	3314      	adds	r3, #20
 8006b04:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b08:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006b0c:	e853 3f00 	ldrex	r3, [r3]
 8006b10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006b14:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006b18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b1c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	3314      	adds	r3, #20
 8006b26:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006b2a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006b2e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b32:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006b36:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006b3a:	e841 2300 	strex	r3, r2, [r1]
 8006b3e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006b42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d1d9      	bne.n	8006afe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d013      	beq.n	8006b7a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b56:	4a8a      	ldr	r2, [pc, #552]	@ (8006d80 <HAL_UART_IRQHandler+0x410>)
 8006b58:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f7fc fd2a 	bl	80035b8 <HAL_DMA_Abort_IT>
 8006b64:	4603      	mov	r3, r0
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d016      	beq.n	8006b98 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006b74:	4610      	mov	r0, r2
 8006b76:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b78:	e00e      	b.n	8006b98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 f9c0 	bl	8006f00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b80:	e00a      	b.n	8006b98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 f9bc 	bl	8006f00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b88:	e006      	b.n	8006b98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 f9b8 	bl	8006f00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2200      	movs	r2, #0
 8006b94:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006b96:	e18d      	b.n	8006eb4 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b98:	bf00      	nop
    return;
 8006b9a:	e18b      	b.n	8006eb4 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	f040 8167 	bne.w	8006e74 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006ba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006baa:	f003 0310 	and.w	r3, r3, #16
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	f000 8160 	beq.w	8006e74 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8006bb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006bb8:	f003 0310 	and.w	r3, r3, #16
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	f000 8159 	beq.w	8006e74 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	60bb      	str	r3, [r7, #8]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	60bb      	str	r3, [r7, #8]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	60bb      	str	r3, [r7, #8]
 8006bd6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	695b      	ldr	r3, [r3, #20]
 8006bde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006be2:	2b40      	cmp	r3, #64	@ 0x40
 8006be4:	f040 80ce 	bne.w	8006d84 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006bf4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	f000 80a9 	beq.w	8006d50 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006c02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006c06:	429a      	cmp	r2, r3
 8006c08:	f080 80a2 	bcs.w	8006d50 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006c12:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c18:	69db      	ldr	r3, [r3, #28]
 8006c1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c1e:	f000 8088 	beq.w	8006d32 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	330c      	adds	r3, #12
 8006c28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006c30:	e853 3f00 	ldrex	r3, [r3]
 8006c34:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006c38:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006c3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c40:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	330c      	adds	r3, #12
 8006c4a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006c4e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006c52:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c56:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006c5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006c5e:	e841 2300 	strex	r3, r2, [r1]
 8006c62:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006c66:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d1d9      	bne.n	8006c22 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	3314      	adds	r3, #20
 8006c74:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c76:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006c78:	e853 3f00 	ldrex	r3, [r3]
 8006c7c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006c7e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006c80:	f023 0301 	bic.w	r3, r3, #1
 8006c84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	3314      	adds	r3, #20
 8006c8e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006c92:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006c96:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c98:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006c9a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006c9e:	e841 2300 	strex	r3, r2, [r1]
 8006ca2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006ca4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d1e1      	bne.n	8006c6e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	3314      	adds	r3, #20
 8006cb0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006cb4:	e853 3f00 	ldrex	r3, [r3]
 8006cb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006cba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006cbc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006cc0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	3314      	adds	r3, #20
 8006cca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006cce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006cd0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006cd4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006cd6:	e841 2300 	strex	r3, r2, [r1]
 8006cda:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006cdc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d1e3      	bne.n	8006caa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2220      	movs	r2, #32
 8006ce6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2200      	movs	r2, #0
 8006cee:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	330c      	adds	r3, #12
 8006cf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006cfa:	e853 3f00 	ldrex	r3, [r3]
 8006cfe:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006d00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d02:	f023 0310 	bic.w	r3, r3, #16
 8006d06:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	330c      	adds	r3, #12
 8006d10:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006d14:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006d16:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d18:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006d1a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006d1c:	e841 2300 	strex	r3, r2, [r1]
 8006d20:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006d22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d1e3      	bne.n	8006cf0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f7fc fbd3 	bl	80034d8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2202      	movs	r2, #2
 8006d36:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006d40:	b29b      	uxth	r3, r3
 8006d42:	1ad3      	subs	r3, r2, r3
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	4619      	mov	r1, r3
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f7fa fc15 	bl	8001578 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006d4e:	e0b3      	b.n	8006eb8 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006d54:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	f040 80ad 	bne.w	8006eb8 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d62:	69db      	ldr	r3, [r3, #28]
 8006d64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d68:	f040 80a6 	bne.w	8006eb8 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2202      	movs	r2, #2
 8006d70:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006d76:	4619      	mov	r1, r3
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f7fa fbfd 	bl	8001578 <HAL_UARTEx_RxEventCallback>
      return;
 8006d7e:	e09b      	b.n	8006eb8 <HAL_UART_IRQHandler+0x548>
 8006d80:	0800742b 	.word	0x0800742b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	1ad3      	subs	r3, r2, r3
 8006d90:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006d98:	b29b      	uxth	r3, r3
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	f000 808e 	beq.w	8006ebc <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8006da0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	f000 8089 	beq.w	8006ebc <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	330c      	adds	r3, #12
 8006db0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006db4:	e853 3f00 	ldrex	r3, [r3]
 8006db8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006dba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dbc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006dc0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	330c      	adds	r3, #12
 8006dca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006dce:	647a      	str	r2, [r7, #68]	@ 0x44
 8006dd0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006dd4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006dd6:	e841 2300 	strex	r3, r2, [r1]
 8006dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006ddc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d1e3      	bne.n	8006daa <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	3314      	adds	r3, #20
 8006de8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dec:	e853 3f00 	ldrex	r3, [r3]
 8006df0:	623b      	str	r3, [r7, #32]
   return(result);
 8006df2:	6a3b      	ldr	r3, [r7, #32]
 8006df4:	f023 0301 	bic.w	r3, r3, #1
 8006df8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	3314      	adds	r3, #20
 8006e02:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006e06:	633a      	str	r2, [r7, #48]	@ 0x30
 8006e08:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006e0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e0e:	e841 2300 	strex	r3, r2, [r1]
 8006e12:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006e14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d1e3      	bne.n	8006de2 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2220      	movs	r2, #32
 8006e1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2200      	movs	r2, #0
 8006e26:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	330c      	adds	r3, #12
 8006e2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	e853 3f00 	ldrex	r3, [r3]
 8006e36:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f023 0310 	bic.w	r3, r3, #16
 8006e3e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	330c      	adds	r3, #12
 8006e48:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006e4c:	61fa      	str	r2, [r7, #28]
 8006e4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e50:	69b9      	ldr	r1, [r7, #24]
 8006e52:	69fa      	ldr	r2, [r7, #28]
 8006e54:	e841 2300 	strex	r3, r2, [r1]
 8006e58:	617b      	str	r3, [r7, #20]
   return(result);
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d1e3      	bne.n	8006e28 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2202      	movs	r2, #2
 8006e64:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006e66:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006e6a:	4619      	mov	r1, r3
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f7fa fb83 	bl	8001578 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006e72:	e023      	b.n	8006ebc <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006e74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d009      	beq.n	8006e94 <HAL_UART_IRQHandler+0x524>
 8006e80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d003      	beq.n	8006e94 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f000 fadd 	bl	800744c <UART_Transmit_IT>
    return;
 8006e92:	e014      	b.n	8006ebe <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006e94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d00e      	beq.n	8006ebe <HAL_UART_IRQHandler+0x54e>
 8006ea0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ea4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d008      	beq.n	8006ebe <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f000 fb1d 	bl	80074ec <UART_EndTransmit_IT>
    return;
 8006eb2:	e004      	b.n	8006ebe <HAL_UART_IRQHandler+0x54e>
    return;
 8006eb4:	bf00      	nop
 8006eb6:	e002      	b.n	8006ebe <HAL_UART_IRQHandler+0x54e>
      return;
 8006eb8:	bf00      	nop
 8006eba:	e000      	b.n	8006ebe <HAL_UART_IRQHandler+0x54e>
      return;
 8006ebc:	bf00      	nop
  }
}
 8006ebe:	37e8      	adds	r7, #232	@ 0xe8
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}

08006ec4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006ecc:	bf00      	nop
 8006ece:	370c      	adds	r7, #12
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr

08006ed8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b083      	sub	sp, #12
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006ee0:	bf00      	nop
 8006ee2:	370c      	adds	r7, #12
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr

08006eec <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b083      	sub	sp, #12
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006ef4:	bf00      	nop
 8006ef6:	370c      	adds	r7, #12
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr

08006f00 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b083      	sub	sp, #12
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006f08:	bf00      	nop
 8006f0a:	370c      	adds	r7, #12
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr

08006f14 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b090      	sub	sp, #64	@ 0x40
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f20:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d137      	bne.n	8006fa0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006f30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f32:	2200      	movs	r2, #0
 8006f34:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006f36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	3314      	adds	r3, #20
 8006f3c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f40:	e853 3f00 	ldrex	r3, [r3]
 8006f44:	623b      	str	r3, [r7, #32]
   return(result);
 8006f46:	6a3b      	ldr	r3, [r7, #32]
 8006f48:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f4c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006f4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	3314      	adds	r3, #20
 8006f54:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006f56:	633a      	str	r2, [r7, #48]	@ 0x30
 8006f58:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f5a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f5e:	e841 2300 	strex	r3, r2, [r1]
 8006f62:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d1e5      	bne.n	8006f36 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006f6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	330c      	adds	r3, #12
 8006f70:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	e853 3f00 	ldrex	r3, [r3]
 8006f78:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f80:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	330c      	adds	r3, #12
 8006f88:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006f8a:	61fa      	str	r2, [r7, #28]
 8006f8c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f8e:	69b9      	ldr	r1, [r7, #24]
 8006f90:	69fa      	ldr	r2, [r7, #28]
 8006f92:	e841 2300 	strex	r3, r2, [r1]
 8006f96:	617b      	str	r3, [r7, #20]
   return(result);
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d1e5      	bne.n	8006f6a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006f9e:	e002      	b.n	8006fa6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006fa0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006fa2:	f7fa fc5f 	bl	8001864 <HAL_UART_TxCpltCallback>
}
 8006fa6:	bf00      	nop
 8006fa8:	3740      	adds	r7, #64	@ 0x40
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}

08006fae <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006fae:	b580      	push	{r7, lr}
 8006fb0:	b084      	sub	sp, #16
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fba:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006fbc:	68f8      	ldr	r0, [r7, #12]
 8006fbe:	f7ff ff81 	bl	8006ec4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fc2:	bf00      	nop
 8006fc4:	3710      	adds	r7, #16
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}

08006fca <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006fca:	b580      	push	{r7, lr}
 8006fcc:	b09c      	sub	sp, #112	@ 0x70
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fd6:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d172      	bne.n	80070cc <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006fe6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006fe8:	2200      	movs	r2, #0
 8006fea:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006fec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	330c      	adds	r3, #12
 8006ff2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ff6:	e853 3f00 	ldrex	r3, [r3]
 8006ffa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006ffc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ffe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007002:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007004:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	330c      	adds	r3, #12
 800700a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800700c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800700e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007010:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007012:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007014:	e841 2300 	strex	r3, r2, [r1]
 8007018:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800701a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800701c:	2b00      	cmp	r3, #0
 800701e:	d1e5      	bne.n	8006fec <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007020:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	3314      	adds	r3, #20
 8007026:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800702a:	e853 3f00 	ldrex	r3, [r3]
 800702e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007030:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007032:	f023 0301 	bic.w	r3, r3, #1
 8007036:	667b      	str	r3, [r7, #100]	@ 0x64
 8007038:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	3314      	adds	r3, #20
 800703e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007040:	647a      	str	r2, [r7, #68]	@ 0x44
 8007042:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007044:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007046:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007048:	e841 2300 	strex	r3, r2, [r1]
 800704c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800704e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007050:	2b00      	cmp	r3, #0
 8007052:	d1e5      	bne.n	8007020 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007054:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	3314      	adds	r3, #20
 800705a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800705c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800705e:	e853 3f00 	ldrex	r3, [r3]
 8007062:	623b      	str	r3, [r7, #32]
   return(result);
 8007064:	6a3b      	ldr	r3, [r7, #32]
 8007066:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800706a:	663b      	str	r3, [r7, #96]	@ 0x60
 800706c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	3314      	adds	r3, #20
 8007072:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007074:	633a      	str	r2, [r7, #48]	@ 0x30
 8007076:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007078:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800707a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800707c:	e841 2300 	strex	r3, r2, [r1]
 8007080:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007084:	2b00      	cmp	r3, #0
 8007086:	d1e5      	bne.n	8007054 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007088:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800708a:	2220      	movs	r2, #32
 800708c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007090:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007094:	2b01      	cmp	r3, #1
 8007096:	d119      	bne.n	80070cc <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007098:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	330c      	adds	r3, #12
 800709e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	e853 3f00 	ldrex	r3, [r3]
 80070a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f023 0310 	bic.w	r3, r3, #16
 80070ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80070b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	330c      	adds	r3, #12
 80070b6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80070b8:	61fa      	str	r2, [r7, #28]
 80070ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070bc:	69b9      	ldr	r1, [r7, #24]
 80070be:	69fa      	ldr	r2, [r7, #28]
 80070c0:	e841 2300 	strex	r3, r2, [r1]
 80070c4:	617b      	str	r3, [r7, #20]
   return(result);
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d1e5      	bne.n	8007098 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070ce:	2200      	movs	r2, #0
 80070d0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070d6:	2b01      	cmp	r3, #1
 80070d8:	d106      	bne.n	80070e8 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80070da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070dc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80070de:	4619      	mov	r1, r3
 80070e0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80070e2:	f7fa fa49 	bl	8001578 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80070e6:	e002      	b.n	80070ee <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80070e8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80070ea:	f7ff fef5 	bl	8006ed8 <HAL_UART_RxCpltCallback>
}
 80070ee:	bf00      	nop
 80070f0:	3770      	adds	r7, #112	@ 0x70
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}

080070f6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80070f6:	b580      	push	{r7, lr}
 80070f8:	b084      	sub	sp, #16
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007102:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2201      	movs	r2, #1
 8007108:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800710e:	2b01      	cmp	r3, #1
 8007110:	d108      	bne.n	8007124 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007116:	085b      	lsrs	r3, r3, #1
 8007118:	b29b      	uxth	r3, r3
 800711a:	4619      	mov	r1, r3
 800711c:	68f8      	ldr	r0, [r7, #12]
 800711e:	f7fa fa2b 	bl	8001578 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007122:	e002      	b.n	800712a <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8007124:	68f8      	ldr	r0, [r7, #12]
 8007126:	f7ff fee1 	bl	8006eec <HAL_UART_RxHalfCpltCallback>
}
 800712a:	bf00      	nop
 800712c:	3710      	adds	r7, #16
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}

08007132 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007132:	b580      	push	{r7, lr}
 8007134:	b084      	sub	sp, #16
 8007136:	af00      	add	r7, sp, #0
 8007138:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800713a:	2300      	movs	r3, #0
 800713c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007142:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	695b      	ldr	r3, [r3, #20]
 800714a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800714e:	2b80      	cmp	r3, #128	@ 0x80
 8007150:	bf0c      	ite	eq
 8007152:	2301      	moveq	r3, #1
 8007154:	2300      	movne	r3, #0
 8007156:	b2db      	uxtb	r3, r3
 8007158:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007160:	b2db      	uxtb	r3, r3
 8007162:	2b21      	cmp	r3, #33	@ 0x21
 8007164:	d108      	bne.n	8007178 <UART_DMAError+0x46>
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d005      	beq.n	8007178 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	2200      	movs	r2, #0
 8007170:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8007172:	68b8      	ldr	r0, [r7, #8]
 8007174:	f000 f8ce 	bl	8007314 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	695b      	ldr	r3, [r3, #20]
 800717e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007182:	2b40      	cmp	r3, #64	@ 0x40
 8007184:	bf0c      	ite	eq
 8007186:	2301      	moveq	r3, #1
 8007188:	2300      	movne	r3, #0
 800718a:	b2db      	uxtb	r3, r3
 800718c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007194:	b2db      	uxtb	r3, r3
 8007196:	2b22      	cmp	r3, #34	@ 0x22
 8007198:	d108      	bne.n	80071ac <UART_DMAError+0x7a>
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d005      	beq.n	80071ac <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	2200      	movs	r2, #0
 80071a4:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80071a6:	68b8      	ldr	r0, [r7, #8]
 80071a8:	f000 f8dc 	bl	8007364 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071b0:	f043 0210 	orr.w	r2, r3, #16
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80071b8:	68b8      	ldr	r0, [r7, #8]
 80071ba:	f7ff fea1 	bl	8006f00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071be:	bf00      	nop
 80071c0:	3710      	adds	r7, #16
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}
	...

080071c8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b098      	sub	sp, #96	@ 0x60
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	60f8      	str	r0, [r7, #12]
 80071d0:	60b9      	str	r1, [r7, #8]
 80071d2:	4613      	mov	r3, r2
 80071d4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80071d6:	68ba      	ldr	r2, [r7, #8]
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	88fa      	ldrh	r2, [r7, #6]
 80071e0:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2200      	movs	r2, #0
 80071e6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	2222      	movs	r2, #34	@ 0x22
 80071ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071f4:	4a44      	ldr	r2, [pc, #272]	@ (8007308 <UART_Start_Receive_DMA+0x140>)
 80071f6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071fc:	4a43      	ldr	r2, [pc, #268]	@ (800730c <UART_Start_Receive_DMA+0x144>)
 80071fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007204:	4a42      	ldr	r2, [pc, #264]	@ (8007310 <UART_Start_Receive_DMA+0x148>)
 8007206:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800720c:	2200      	movs	r2, #0
 800720e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007210:	f107 0308 	add.w	r3, r7, #8
 8007214:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	3304      	adds	r3, #4
 8007220:	4619      	mov	r1, r3
 8007222:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007224:	681a      	ldr	r2, [r3, #0]
 8007226:	88fb      	ldrh	r3, [r7, #6]
 8007228:	f7fc f8fe 	bl	8003428 <HAL_DMA_Start_IT>
 800722c:	4603      	mov	r3, r0
 800722e:	2b00      	cmp	r3, #0
 8007230:	d008      	beq.n	8007244 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2210      	movs	r2, #16
 8007236:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	2220      	movs	r2, #32
 800723c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 8007240:	2301      	movs	r3, #1
 8007242:	e05d      	b.n	8007300 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007244:	2300      	movs	r3, #0
 8007246:	613b      	str	r3, [r7, #16]
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	613b      	str	r3, [r7, #16]
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	685b      	ldr	r3, [r3, #4]
 8007256:	613b      	str	r3, [r7, #16]
 8007258:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	691b      	ldr	r3, [r3, #16]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d019      	beq.n	8007296 <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	330c      	adds	r3, #12
 8007268:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800726a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800726c:	e853 3f00 	ldrex	r3, [r3]
 8007270:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007272:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007274:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007278:	65bb      	str	r3, [r7, #88]	@ 0x58
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	330c      	adds	r3, #12
 8007280:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007282:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8007284:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007286:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007288:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800728a:	e841 2300 	strex	r3, r2, [r1]
 800728e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007290:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007292:	2b00      	cmp	r3, #0
 8007294:	d1e5      	bne.n	8007262 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	3314      	adds	r3, #20
 800729c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800729e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072a0:	e853 3f00 	ldrex	r3, [r3]
 80072a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80072a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072a8:	f043 0301 	orr.w	r3, r3, #1
 80072ac:	657b      	str	r3, [r7, #84]	@ 0x54
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	3314      	adds	r3, #20
 80072b4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80072b6:	63ba      	str	r2, [r7, #56]	@ 0x38
 80072b8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ba:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80072bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80072be:	e841 2300 	strex	r3, r2, [r1]
 80072c2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80072c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d1e5      	bne.n	8007296 <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	3314      	adds	r3, #20
 80072d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d2:	69bb      	ldr	r3, [r7, #24]
 80072d4:	e853 3f00 	ldrex	r3, [r3]
 80072d8:	617b      	str	r3, [r7, #20]
   return(result);
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80072e0:	653b      	str	r3, [r7, #80]	@ 0x50
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	3314      	adds	r3, #20
 80072e8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80072ea:	627a      	str	r2, [r7, #36]	@ 0x24
 80072ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ee:	6a39      	ldr	r1, [r7, #32]
 80072f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072f2:	e841 2300 	strex	r3, r2, [r1]
 80072f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80072f8:	69fb      	ldr	r3, [r7, #28]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d1e5      	bne.n	80072ca <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 80072fe:	2300      	movs	r3, #0
}
 8007300:	4618      	mov	r0, r3
 8007302:	3760      	adds	r7, #96	@ 0x60
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}
 8007308:	08006fcb 	.word	0x08006fcb
 800730c:	080070f7 	.word	0x080070f7
 8007310:	08007133 	.word	0x08007133

08007314 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007314:	b480      	push	{r7}
 8007316:	b089      	sub	sp, #36	@ 0x24
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	330c      	adds	r3, #12
 8007322:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	e853 3f00 	ldrex	r3, [r3]
 800732a:	60bb      	str	r3, [r7, #8]
   return(result);
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007332:	61fb      	str	r3, [r7, #28]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	330c      	adds	r3, #12
 800733a:	69fa      	ldr	r2, [r7, #28]
 800733c:	61ba      	str	r2, [r7, #24]
 800733e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007340:	6979      	ldr	r1, [r7, #20]
 8007342:	69ba      	ldr	r2, [r7, #24]
 8007344:	e841 2300 	strex	r3, r2, [r1]
 8007348:	613b      	str	r3, [r7, #16]
   return(result);
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d1e5      	bne.n	800731c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2220      	movs	r2, #32
 8007354:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8007358:	bf00      	nop
 800735a:	3724      	adds	r7, #36	@ 0x24
 800735c:	46bd      	mov	sp, r7
 800735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007362:	4770      	bx	lr

08007364 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007364:	b480      	push	{r7}
 8007366:	b095      	sub	sp, #84	@ 0x54
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	330c      	adds	r3, #12
 8007372:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007374:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007376:	e853 3f00 	ldrex	r3, [r3]
 800737a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800737c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800737e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007382:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	330c      	adds	r3, #12
 800738a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800738c:	643a      	str	r2, [r7, #64]	@ 0x40
 800738e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007390:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007392:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007394:	e841 2300 	strex	r3, r2, [r1]
 8007398:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800739a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800739c:	2b00      	cmp	r3, #0
 800739e:	d1e5      	bne.n	800736c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	3314      	adds	r3, #20
 80073a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a8:	6a3b      	ldr	r3, [r7, #32]
 80073aa:	e853 3f00 	ldrex	r3, [r3]
 80073ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80073b0:	69fb      	ldr	r3, [r7, #28]
 80073b2:	f023 0301 	bic.w	r3, r3, #1
 80073b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	3314      	adds	r3, #20
 80073be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80073c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80073c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80073c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073c8:	e841 2300 	strex	r3, r2, [r1]
 80073cc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80073ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d1e5      	bne.n	80073a0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d119      	bne.n	8007410 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	330c      	adds	r3, #12
 80073e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	e853 3f00 	ldrex	r3, [r3]
 80073ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	f023 0310 	bic.w	r3, r3, #16
 80073f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	330c      	adds	r3, #12
 80073fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80073fc:	61ba      	str	r2, [r7, #24]
 80073fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007400:	6979      	ldr	r1, [r7, #20]
 8007402:	69ba      	ldr	r2, [r7, #24]
 8007404:	e841 2300 	strex	r3, r2, [r1]
 8007408:	613b      	str	r3, [r7, #16]
   return(result);
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d1e5      	bne.n	80073dc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2220      	movs	r2, #32
 8007414:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2200      	movs	r2, #0
 800741c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800741e:	bf00      	nop
 8007420:	3754      	adds	r7, #84	@ 0x54
 8007422:	46bd      	mov	sp, r7
 8007424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007428:	4770      	bx	lr

0800742a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800742a:	b580      	push	{r7, lr}
 800742c:	b084      	sub	sp, #16
 800742e:	af00      	add	r7, sp, #0
 8007430:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007436:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2200      	movs	r2, #0
 800743c:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800743e:	68f8      	ldr	r0, [r7, #12]
 8007440:	f7ff fd5e 	bl	8006f00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007444:	bf00      	nop
 8007446:	3710      	adds	r7, #16
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}

0800744c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800744c:	b480      	push	{r7}
 800744e:	b085      	sub	sp, #20
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800745a:	b2db      	uxtb	r3, r3
 800745c:	2b21      	cmp	r3, #33	@ 0x21
 800745e:	d13e      	bne.n	80074de <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	689b      	ldr	r3, [r3, #8]
 8007464:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007468:	d114      	bne.n	8007494 <UART_Transmit_IT+0x48>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	691b      	ldr	r3, [r3, #16]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d110      	bne.n	8007494 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6a1b      	ldr	r3, [r3, #32]
 8007476:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	881b      	ldrh	r3, [r3, #0]
 800747c:	461a      	mov	r2, r3
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007486:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6a1b      	ldr	r3, [r3, #32]
 800748c:	1c9a      	adds	r2, r3, #2
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	621a      	str	r2, [r3, #32]
 8007492:	e008      	b.n	80074a6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6a1b      	ldr	r3, [r3, #32]
 8007498:	1c59      	adds	r1, r3, #1
 800749a:	687a      	ldr	r2, [r7, #4]
 800749c:	6211      	str	r1, [r2, #32]
 800749e:	781a      	ldrb	r2, [r3, #0]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	3b01      	subs	r3, #1
 80074ae:	b29b      	uxth	r3, r3
 80074b0:	687a      	ldr	r2, [r7, #4]
 80074b2:	4619      	mov	r1, r3
 80074b4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d10f      	bne.n	80074da <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	68da      	ldr	r2, [r3, #12]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80074c8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	68da      	ldr	r2, [r3, #12]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80074d8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80074da:	2300      	movs	r3, #0
 80074dc:	e000      	b.n	80074e0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80074de:	2302      	movs	r3, #2
  }
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3714      	adds	r7, #20
 80074e4:	46bd      	mov	sp, r7
 80074e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ea:	4770      	bx	lr

080074ec <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b082      	sub	sp, #8
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	68da      	ldr	r2, [r3, #12]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007502:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2220      	movs	r2, #32
 8007508:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f7fa f9a9 	bl	8001864 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007512:	2300      	movs	r3, #0
}
 8007514:	4618      	mov	r0, r3
 8007516:	3708      	adds	r7, #8
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}

0800751c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b08c      	sub	sp, #48	@ 0x30
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8007524:	2300      	movs	r3, #0
 8007526:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8007528:	2300      	movs	r3, #0
 800752a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007532:	b2db      	uxtb	r3, r3
 8007534:	2b22      	cmp	r3, #34	@ 0x22
 8007536:	f040 80aa 	bne.w	800768e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007542:	d115      	bne.n	8007570 <UART_Receive_IT+0x54>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	691b      	ldr	r3, [r3, #16]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d111      	bne.n	8007570 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007550:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	b29b      	uxth	r3, r3
 800755a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800755e:	b29a      	uxth	r2, r3
 8007560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007562:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007568:	1c9a      	adds	r2, r3, #2
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	629a      	str	r2, [r3, #40]	@ 0x28
 800756e:	e024      	b.n	80075ba <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007574:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	689b      	ldr	r3, [r3, #8]
 800757a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800757e:	d007      	beq.n	8007590 <UART_Receive_IT+0x74>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	689b      	ldr	r3, [r3, #8]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d10a      	bne.n	800759e <UART_Receive_IT+0x82>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	691b      	ldr	r3, [r3, #16]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d106      	bne.n	800759e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	b2da      	uxtb	r2, r3
 8007598:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800759a:	701a      	strb	r2, [r3, #0]
 800759c:	e008      	b.n	80075b0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	b2db      	uxtb	r3, r3
 80075a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80075aa:	b2da      	uxtb	r2, r3
 80075ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075ae:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075b4:	1c5a      	adds	r2, r3, #1
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80075be:	b29b      	uxth	r3, r3
 80075c0:	3b01      	subs	r3, #1
 80075c2:	b29b      	uxth	r3, r3
 80075c4:	687a      	ldr	r2, [r7, #4]
 80075c6:	4619      	mov	r1, r3
 80075c8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d15d      	bne.n	800768a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	68da      	ldr	r2, [r3, #12]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f022 0220 	bic.w	r2, r2, #32
 80075dc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	68da      	ldr	r2, [r3, #12]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80075ec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	695a      	ldr	r2, [r3, #20]
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f022 0201 	bic.w	r2, r2, #1
 80075fc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2220      	movs	r2, #32
 8007602:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2200      	movs	r2, #0
 800760a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007610:	2b01      	cmp	r3, #1
 8007612:	d135      	bne.n	8007680 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2200      	movs	r2, #0
 8007618:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	330c      	adds	r3, #12
 8007620:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	e853 3f00 	ldrex	r3, [r3]
 8007628:	613b      	str	r3, [r7, #16]
   return(result);
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	f023 0310 	bic.w	r3, r3, #16
 8007630:	627b      	str	r3, [r7, #36]	@ 0x24
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	330c      	adds	r3, #12
 8007638:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800763a:	623a      	str	r2, [r7, #32]
 800763c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800763e:	69f9      	ldr	r1, [r7, #28]
 8007640:	6a3a      	ldr	r2, [r7, #32]
 8007642:	e841 2300 	strex	r3, r2, [r1]
 8007646:	61bb      	str	r3, [r7, #24]
   return(result);
 8007648:	69bb      	ldr	r3, [r7, #24]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d1e5      	bne.n	800761a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f003 0310 	and.w	r3, r3, #16
 8007658:	2b10      	cmp	r3, #16
 800765a:	d10a      	bne.n	8007672 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800765c:	2300      	movs	r3, #0
 800765e:	60fb      	str	r3, [r7, #12]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	60fb      	str	r3, [r7, #12]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	60fb      	str	r3, [r7, #12]
 8007670:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007676:	4619      	mov	r1, r3
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f7f9 ff7d 	bl	8001578 <HAL_UARTEx_RxEventCallback>
 800767e:	e002      	b.n	8007686 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f7ff fc29 	bl	8006ed8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007686:	2300      	movs	r3, #0
 8007688:	e002      	b.n	8007690 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800768a:	2300      	movs	r3, #0
 800768c:	e000      	b.n	8007690 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800768e:	2302      	movs	r3, #2
  }
}
 8007690:	4618      	mov	r0, r3
 8007692:	3730      	adds	r7, #48	@ 0x30
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}

08007698 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007698:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800769c:	b0c0      	sub	sp, #256	@ 0x100
 800769e:	af00      	add	r7, sp, #0
 80076a0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80076a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	691b      	ldr	r3, [r3, #16]
 80076ac:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80076b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076b4:	68d9      	ldr	r1, [r3, #12]
 80076b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076ba:	681a      	ldr	r2, [r3, #0]
 80076bc:	ea40 0301 	orr.w	r3, r0, r1
 80076c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80076c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076c6:	689a      	ldr	r2, [r3, #8]
 80076c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076cc:	691b      	ldr	r3, [r3, #16]
 80076ce:	431a      	orrs	r2, r3
 80076d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076d4:	695b      	ldr	r3, [r3, #20]
 80076d6:	431a      	orrs	r2, r3
 80076d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076dc:	69db      	ldr	r3, [r3, #28]
 80076de:	4313      	orrs	r3, r2
 80076e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80076e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	68db      	ldr	r3, [r3, #12]
 80076ec:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80076f0:	f021 010c 	bic.w	r1, r1, #12
 80076f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076f8:	681a      	ldr	r2, [r3, #0]
 80076fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80076fe:	430b      	orrs	r3, r1
 8007700:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	695b      	ldr	r3, [r3, #20]
 800770a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800770e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007712:	6999      	ldr	r1, [r3, #24]
 8007714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007718:	681a      	ldr	r2, [r3, #0]
 800771a:	ea40 0301 	orr.w	r3, r0, r1
 800771e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007724:	681a      	ldr	r2, [r3, #0]
 8007726:	4b8f      	ldr	r3, [pc, #572]	@ (8007964 <UART_SetConfig+0x2cc>)
 8007728:	429a      	cmp	r2, r3
 800772a:	d005      	beq.n	8007738 <UART_SetConfig+0xa0>
 800772c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	4b8d      	ldr	r3, [pc, #564]	@ (8007968 <UART_SetConfig+0x2d0>)
 8007734:	429a      	cmp	r2, r3
 8007736:	d104      	bne.n	8007742 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007738:	f7fd fc62 	bl	8005000 <HAL_RCC_GetPCLK2Freq>
 800773c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007740:	e003      	b.n	800774a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007742:	f7fd fc49 	bl	8004fd8 <HAL_RCC_GetPCLK1Freq>
 8007746:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800774a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800774e:	69db      	ldr	r3, [r3, #28]
 8007750:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007754:	f040 810c 	bne.w	8007970 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007758:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800775c:	2200      	movs	r2, #0
 800775e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007762:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007766:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800776a:	4622      	mov	r2, r4
 800776c:	462b      	mov	r3, r5
 800776e:	1891      	adds	r1, r2, r2
 8007770:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007772:	415b      	adcs	r3, r3
 8007774:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007776:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800777a:	4621      	mov	r1, r4
 800777c:	eb12 0801 	adds.w	r8, r2, r1
 8007780:	4629      	mov	r1, r5
 8007782:	eb43 0901 	adc.w	r9, r3, r1
 8007786:	f04f 0200 	mov.w	r2, #0
 800778a:	f04f 0300 	mov.w	r3, #0
 800778e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007792:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007796:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800779a:	4690      	mov	r8, r2
 800779c:	4699      	mov	r9, r3
 800779e:	4623      	mov	r3, r4
 80077a0:	eb18 0303 	adds.w	r3, r8, r3
 80077a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80077a8:	462b      	mov	r3, r5
 80077aa:	eb49 0303 	adc.w	r3, r9, r3
 80077ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80077b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	2200      	movs	r2, #0
 80077ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80077be:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80077c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80077c6:	460b      	mov	r3, r1
 80077c8:	18db      	adds	r3, r3, r3
 80077ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80077cc:	4613      	mov	r3, r2
 80077ce:	eb42 0303 	adc.w	r3, r2, r3
 80077d2:	657b      	str	r3, [r7, #84]	@ 0x54
 80077d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80077d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80077dc:	f7f9 fa54 	bl	8000c88 <__aeabi_uldivmod>
 80077e0:	4602      	mov	r2, r0
 80077e2:	460b      	mov	r3, r1
 80077e4:	4b61      	ldr	r3, [pc, #388]	@ (800796c <UART_SetConfig+0x2d4>)
 80077e6:	fba3 2302 	umull	r2, r3, r3, r2
 80077ea:	095b      	lsrs	r3, r3, #5
 80077ec:	011c      	lsls	r4, r3, #4
 80077ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80077f2:	2200      	movs	r2, #0
 80077f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80077f8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80077fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007800:	4642      	mov	r2, r8
 8007802:	464b      	mov	r3, r9
 8007804:	1891      	adds	r1, r2, r2
 8007806:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007808:	415b      	adcs	r3, r3
 800780a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800780c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007810:	4641      	mov	r1, r8
 8007812:	eb12 0a01 	adds.w	sl, r2, r1
 8007816:	4649      	mov	r1, r9
 8007818:	eb43 0b01 	adc.w	fp, r3, r1
 800781c:	f04f 0200 	mov.w	r2, #0
 8007820:	f04f 0300 	mov.w	r3, #0
 8007824:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007828:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800782c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007830:	4692      	mov	sl, r2
 8007832:	469b      	mov	fp, r3
 8007834:	4643      	mov	r3, r8
 8007836:	eb1a 0303 	adds.w	r3, sl, r3
 800783a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800783e:	464b      	mov	r3, r9
 8007840:	eb4b 0303 	adc.w	r3, fp, r3
 8007844:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	2200      	movs	r2, #0
 8007850:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007854:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007858:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800785c:	460b      	mov	r3, r1
 800785e:	18db      	adds	r3, r3, r3
 8007860:	643b      	str	r3, [r7, #64]	@ 0x40
 8007862:	4613      	mov	r3, r2
 8007864:	eb42 0303 	adc.w	r3, r2, r3
 8007868:	647b      	str	r3, [r7, #68]	@ 0x44
 800786a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800786e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007872:	f7f9 fa09 	bl	8000c88 <__aeabi_uldivmod>
 8007876:	4602      	mov	r2, r0
 8007878:	460b      	mov	r3, r1
 800787a:	4611      	mov	r1, r2
 800787c:	4b3b      	ldr	r3, [pc, #236]	@ (800796c <UART_SetConfig+0x2d4>)
 800787e:	fba3 2301 	umull	r2, r3, r3, r1
 8007882:	095b      	lsrs	r3, r3, #5
 8007884:	2264      	movs	r2, #100	@ 0x64
 8007886:	fb02 f303 	mul.w	r3, r2, r3
 800788a:	1acb      	subs	r3, r1, r3
 800788c:	00db      	lsls	r3, r3, #3
 800788e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007892:	4b36      	ldr	r3, [pc, #216]	@ (800796c <UART_SetConfig+0x2d4>)
 8007894:	fba3 2302 	umull	r2, r3, r3, r2
 8007898:	095b      	lsrs	r3, r3, #5
 800789a:	005b      	lsls	r3, r3, #1
 800789c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80078a0:	441c      	add	r4, r3
 80078a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80078a6:	2200      	movs	r2, #0
 80078a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80078ac:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80078b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80078b4:	4642      	mov	r2, r8
 80078b6:	464b      	mov	r3, r9
 80078b8:	1891      	adds	r1, r2, r2
 80078ba:	63b9      	str	r1, [r7, #56]	@ 0x38
 80078bc:	415b      	adcs	r3, r3
 80078be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80078c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80078c4:	4641      	mov	r1, r8
 80078c6:	1851      	adds	r1, r2, r1
 80078c8:	6339      	str	r1, [r7, #48]	@ 0x30
 80078ca:	4649      	mov	r1, r9
 80078cc:	414b      	adcs	r3, r1
 80078ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80078d0:	f04f 0200 	mov.w	r2, #0
 80078d4:	f04f 0300 	mov.w	r3, #0
 80078d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80078dc:	4659      	mov	r1, fp
 80078de:	00cb      	lsls	r3, r1, #3
 80078e0:	4651      	mov	r1, sl
 80078e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80078e6:	4651      	mov	r1, sl
 80078e8:	00ca      	lsls	r2, r1, #3
 80078ea:	4610      	mov	r0, r2
 80078ec:	4619      	mov	r1, r3
 80078ee:	4603      	mov	r3, r0
 80078f0:	4642      	mov	r2, r8
 80078f2:	189b      	adds	r3, r3, r2
 80078f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80078f8:	464b      	mov	r3, r9
 80078fa:	460a      	mov	r2, r1
 80078fc:	eb42 0303 	adc.w	r3, r2, r3
 8007900:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	2200      	movs	r2, #0
 800790c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007910:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007914:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007918:	460b      	mov	r3, r1
 800791a:	18db      	adds	r3, r3, r3
 800791c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800791e:	4613      	mov	r3, r2
 8007920:	eb42 0303 	adc.w	r3, r2, r3
 8007924:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007926:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800792a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800792e:	f7f9 f9ab 	bl	8000c88 <__aeabi_uldivmod>
 8007932:	4602      	mov	r2, r0
 8007934:	460b      	mov	r3, r1
 8007936:	4b0d      	ldr	r3, [pc, #52]	@ (800796c <UART_SetConfig+0x2d4>)
 8007938:	fba3 1302 	umull	r1, r3, r3, r2
 800793c:	095b      	lsrs	r3, r3, #5
 800793e:	2164      	movs	r1, #100	@ 0x64
 8007940:	fb01 f303 	mul.w	r3, r1, r3
 8007944:	1ad3      	subs	r3, r2, r3
 8007946:	00db      	lsls	r3, r3, #3
 8007948:	3332      	adds	r3, #50	@ 0x32
 800794a:	4a08      	ldr	r2, [pc, #32]	@ (800796c <UART_SetConfig+0x2d4>)
 800794c:	fba2 2303 	umull	r2, r3, r2, r3
 8007950:	095b      	lsrs	r3, r3, #5
 8007952:	f003 0207 	and.w	r2, r3, #7
 8007956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4422      	add	r2, r4
 800795e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007960:	e106      	b.n	8007b70 <UART_SetConfig+0x4d8>
 8007962:	bf00      	nop
 8007964:	40011000 	.word	0x40011000
 8007968:	40011400 	.word	0x40011400
 800796c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007970:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007974:	2200      	movs	r2, #0
 8007976:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800797a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800797e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007982:	4642      	mov	r2, r8
 8007984:	464b      	mov	r3, r9
 8007986:	1891      	adds	r1, r2, r2
 8007988:	6239      	str	r1, [r7, #32]
 800798a:	415b      	adcs	r3, r3
 800798c:	627b      	str	r3, [r7, #36]	@ 0x24
 800798e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007992:	4641      	mov	r1, r8
 8007994:	1854      	adds	r4, r2, r1
 8007996:	4649      	mov	r1, r9
 8007998:	eb43 0501 	adc.w	r5, r3, r1
 800799c:	f04f 0200 	mov.w	r2, #0
 80079a0:	f04f 0300 	mov.w	r3, #0
 80079a4:	00eb      	lsls	r3, r5, #3
 80079a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80079aa:	00e2      	lsls	r2, r4, #3
 80079ac:	4614      	mov	r4, r2
 80079ae:	461d      	mov	r5, r3
 80079b0:	4643      	mov	r3, r8
 80079b2:	18e3      	adds	r3, r4, r3
 80079b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80079b8:	464b      	mov	r3, r9
 80079ba:	eb45 0303 	adc.w	r3, r5, r3
 80079be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80079c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	2200      	movs	r2, #0
 80079ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80079ce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80079d2:	f04f 0200 	mov.w	r2, #0
 80079d6:	f04f 0300 	mov.w	r3, #0
 80079da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80079de:	4629      	mov	r1, r5
 80079e0:	008b      	lsls	r3, r1, #2
 80079e2:	4621      	mov	r1, r4
 80079e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80079e8:	4621      	mov	r1, r4
 80079ea:	008a      	lsls	r2, r1, #2
 80079ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80079f0:	f7f9 f94a 	bl	8000c88 <__aeabi_uldivmod>
 80079f4:	4602      	mov	r2, r0
 80079f6:	460b      	mov	r3, r1
 80079f8:	4b60      	ldr	r3, [pc, #384]	@ (8007b7c <UART_SetConfig+0x4e4>)
 80079fa:	fba3 2302 	umull	r2, r3, r3, r2
 80079fe:	095b      	lsrs	r3, r3, #5
 8007a00:	011c      	lsls	r4, r3, #4
 8007a02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a06:	2200      	movs	r2, #0
 8007a08:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007a0c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007a10:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007a14:	4642      	mov	r2, r8
 8007a16:	464b      	mov	r3, r9
 8007a18:	1891      	adds	r1, r2, r2
 8007a1a:	61b9      	str	r1, [r7, #24]
 8007a1c:	415b      	adcs	r3, r3
 8007a1e:	61fb      	str	r3, [r7, #28]
 8007a20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007a24:	4641      	mov	r1, r8
 8007a26:	1851      	adds	r1, r2, r1
 8007a28:	6139      	str	r1, [r7, #16]
 8007a2a:	4649      	mov	r1, r9
 8007a2c:	414b      	adcs	r3, r1
 8007a2e:	617b      	str	r3, [r7, #20]
 8007a30:	f04f 0200 	mov.w	r2, #0
 8007a34:	f04f 0300 	mov.w	r3, #0
 8007a38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007a3c:	4659      	mov	r1, fp
 8007a3e:	00cb      	lsls	r3, r1, #3
 8007a40:	4651      	mov	r1, sl
 8007a42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007a46:	4651      	mov	r1, sl
 8007a48:	00ca      	lsls	r2, r1, #3
 8007a4a:	4610      	mov	r0, r2
 8007a4c:	4619      	mov	r1, r3
 8007a4e:	4603      	mov	r3, r0
 8007a50:	4642      	mov	r2, r8
 8007a52:	189b      	adds	r3, r3, r2
 8007a54:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007a58:	464b      	mov	r3, r9
 8007a5a:	460a      	mov	r2, r1
 8007a5c:	eb42 0303 	adc.w	r3, r2, r3
 8007a60:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007a6e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007a70:	f04f 0200 	mov.w	r2, #0
 8007a74:	f04f 0300 	mov.w	r3, #0
 8007a78:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007a7c:	4649      	mov	r1, r9
 8007a7e:	008b      	lsls	r3, r1, #2
 8007a80:	4641      	mov	r1, r8
 8007a82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a86:	4641      	mov	r1, r8
 8007a88:	008a      	lsls	r2, r1, #2
 8007a8a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007a8e:	f7f9 f8fb 	bl	8000c88 <__aeabi_uldivmod>
 8007a92:	4602      	mov	r2, r0
 8007a94:	460b      	mov	r3, r1
 8007a96:	4611      	mov	r1, r2
 8007a98:	4b38      	ldr	r3, [pc, #224]	@ (8007b7c <UART_SetConfig+0x4e4>)
 8007a9a:	fba3 2301 	umull	r2, r3, r3, r1
 8007a9e:	095b      	lsrs	r3, r3, #5
 8007aa0:	2264      	movs	r2, #100	@ 0x64
 8007aa2:	fb02 f303 	mul.w	r3, r2, r3
 8007aa6:	1acb      	subs	r3, r1, r3
 8007aa8:	011b      	lsls	r3, r3, #4
 8007aaa:	3332      	adds	r3, #50	@ 0x32
 8007aac:	4a33      	ldr	r2, [pc, #204]	@ (8007b7c <UART_SetConfig+0x4e4>)
 8007aae:	fba2 2303 	umull	r2, r3, r2, r3
 8007ab2:	095b      	lsrs	r3, r3, #5
 8007ab4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007ab8:	441c      	add	r4, r3
 8007aba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007abe:	2200      	movs	r2, #0
 8007ac0:	673b      	str	r3, [r7, #112]	@ 0x70
 8007ac2:	677a      	str	r2, [r7, #116]	@ 0x74
 8007ac4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007ac8:	4642      	mov	r2, r8
 8007aca:	464b      	mov	r3, r9
 8007acc:	1891      	adds	r1, r2, r2
 8007ace:	60b9      	str	r1, [r7, #8]
 8007ad0:	415b      	adcs	r3, r3
 8007ad2:	60fb      	str	r3, [r7, #12]
 8007ad4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007ad8:	4641      	mov	r1, r8
 8007ada:	1851      	adds	r1, r2, r1
 8007adc:	6039      	str	r1, [r7, #0]
 8007ade:	4649      	mov	r1, r9
 8007ae0:	414b      	adcs	r3, r1
 8007ae2:	607b      	str	r3, [r7, #4]
 8007ae4:	f04f 0200 	mov.w	r2, #0
 8007ae8:	f04f 0300 	mov.w	r3, #0
 8007aec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007af0:	4659      	mov	r1, fp
 8007af2:	00cb      	lsls	r3, r1, #3
 8007af4:	4651      	mov	r1, sl
 8007af6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007afa:	4651      	mov	r1, sl
 8007afc:	00ca      	lsls	r2, r1, #3
 8007afe:	4610      	mov	r0, r2
 8007b00:	4619      	mov	r1, r3
 8007b02:	4603      	mov	r3, r0
 8007b04:	4642      	mov	r2, r8
 8007b06:	189b      	adds	r3, r3, r2
 8007b08:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007b0a:	464b      	mov	r3, r9
 8007b0c:	460a      	mov	r2, r1
 8007b0e:	eb42 0303 	adc.w	r3, r2, r3
 8007b12:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b18:	685b      	ldr	r3, [r3, #4]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	663b      	str	r3, [r7, #96]	@ 0x60
 8007b1e:	667a      	str	r2, [r7, #100]	@ 0x64
 8007b20:	f04f 0200 	mov.w	r2, #0
 8007b24:	f04f 0300 	mov.w	r3, #0
 8007b28:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007b2c:	4649      	mov	r1, r9
 8007b2e:	008b      	lsls	r3, r1, #2
 8007b30:	4641      	mov	r1, r8
 8007b32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007b36:	4641      	mov	r1, r8
 8007b38:	008a      	lsls	r2, r1, #2
 8007b3a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007b3e:	f7f9 f8a3 	bl	8000c88 <__aeabi_uldivmod>
 8007b42:	4602      	mov	r2, r0
 8007b44:	460b      	mov	r3, r1
 8007b46:	4b0d      	ldr	r3, [pc, #52]	@ (8007b7c <UART_SetConfig+0x4e4>)
 8007b48:	fba3 1302 	umull	r1, r3, r3, r2
 8007b4c:	095b      	lsrs	r3, r3, #5
 8007b4e:	2164      	movs	r1, #100	@ 0x64
 8007b50:	fb01 f303 	mul.w	r3, r1, r3
 8007b54:	1ad3      	subs	r3, r2, r3
 8007b56:	011b      	lsls	r3, r3, #4
 8007b58:	3332      	adds	r3, #50	@ 0x32
 8007b5a:	4a08      	ldr	r2, [pc, #32]	@ (8007b7c <UART_SetConfig+0x4e4>)
 8007b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8007b60:	095b      	lsrs	r3, r3, #5
 8007b62:	f003 020f 	and.w	r2, r3, #15
 8007b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	4422      	add	r2, r4
 8007b6e:	609a      	str	r2, [r3, #8]
}
 8007b70:	bf00      	nop
 8007b72:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007b76:	46bd      	mov	sp, r7
 8007b78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b7c:	51eb851f 	.word	0x51eb851f

08007b80 <__cvt>:
 8007b80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b84:	ec57 6b10 	vmov	r6, r7, d0
 8007b88:	2f00      	cmp	r7, #0
 8007b8a:	460c      	mov	r4, r1
 8007b8c:	4619      	mov	r1, r3
 8007b8e:	463b      	mov	r3, r7
 8007b90:	bfbb      	ittet	lt
 8007b92:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007b96:	461f      	movlt	r7, r3
 8007b98:	2300      	movge	r3, #0
 8007b9a:	232d      	movlt	r3, #45	@ 0x2d
 8007b9c:	700b      	strb	r3, [r1, #0]
 8007b9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007ba0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007ba4:	4691      	mov	r9, r2
 8007ba6:	f023 0820 	bic.w	r8, r3, #32
 8007baa:	bfbc      	itt	lt
 8007bac:	4632      	movlt	r2, r6
 8007bae:	4616      	movlt	r6, r2
 8007bb0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007bb4:	d005      	beq.n	8007bc2 <__cvt+0x42>
 8007bb6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007bba:	d100      	bne.n	8007bbe <__cvt+0x3e>
 8007bbc:	3401      	adds	r4, #1
 8007bbe:	2102      	movs	r1, #2
 8007bc0:	e000      	b.n	8007bc4 <__cvt+0x44>
 8007bc2:	2103      	movs	r1, #3
 8007bc4:	ab03      	add	r3, sp, #12
 8007bc6:	9301      	str	r3, [sp, #4]
 8007bc8:	ab02      	add	r3, sp, #8
 8007bca:	9300      	str	r3, [sp, #0]
 8007bcc:	ec47 6b10 	vmov	d0, r6, r7
 8007bd0:	4653      	mov	r3, sl
 8007bd2:	4622      	mov	r2, r4
 8007bd4:	f001 f8bc 	bl	8008d50 <_dtoa_r>
 8007bd8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007bdc:	4605      	mov	r5, r0
 8007bde:	d119      	bne.n	8007c14 <__cvt+0x94>
 8007be0:	f019 0f01 	tst.w	r9, #1
 8007be4:	d00e      	beq.n	8007c04 <__cvt+0x84>
 8007be6:	eb00 0904 	add.w	r9, r0, r4
 8007bea:	2200      	movs	r2, #0
 8007bec:	2300      	movs	r3, #0
 8007bee:	4630      	mov	r0, r6
 8007bf0:	4639      	mov	r1, r7
 8007bf2:	f7f8 ff69 	bl	8000ac8 <__aeabi_dcmpeq>
 8007bf6:	b108      	cbz	r0, 8007bfc <__cvt+0x7c>
 8007bf8:	f8cd 900c 	str.w	r9, [sp, #12]
 8007bfc:	2230      	movs	r2, #48	@ 0x30
 8007bfe:	9b03      	ldr	r3, [sp, #12]
 8007c00:	454b      	cmp	r3, r9
 8007c02:	d31e      	bcc.n	8007c42 <__cvt+0xc2>
 8007c04:	9b03      	ldr	r3, [sp, #12]
 8007c06:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007c08:	1b5b      	subs	r3, r3, r5
 8007c0a:	4628      	mov	r0, r5
 8007c0c:	6013      	str	r3, [r2, #0]
 8007c0e:	b004      	add	sp, #16
 8007c10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c14:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007c18:	eb00 0904 	add.w	r9, r0, r4
 8007c1c:	d1e5      	bne.n	8007bea <__cvt+0x6a>
 8007c1e:	7803      	ldrb	r3, [r0, #0]
 8007c20:	2b30      	cmp	r3, #48	@ 0x30
 8007c22:	d10a      	bne.n	8007c3a <__cvt+0xba>
 8007c24:	2200      	movs	r2, #0
 8007c26:	2300      	movs	r3, #0
 8007c28:	4630      	mov	r0, r6
 8007c2a:	4639      	mov	r1, r7
 8007c2c:	f7f8 ff4c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c30:	b918      	cbnz	r0, 8007c3a <__cvt+0xba>
 8007c32:	f1c4 0401 	rsb	r4, r4, #1
 8007c36:	f8ca 4000 	str.w	r4, [sl]
 8007c3a:	f8da 3000 	ldr.w	r3, [sl]
 8007c3e:	4499      	add	r9, r3
 8007c40:	e7d3      	b.n	8007bea <__cvt+0x6a>
 8007c42:	1c59      	adds	r1, r3, #1
 8007c44:	9103      	str	r1, [sp, #12]
 8007c46:	701a      	strb	r2, [r3, #0]
 8007c48:	e7d9      	b.n	8007bfe <__cvt+0x7e>

08007c4a <__exponent>:
 8007c4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c4c:	2900      	cmp	r1, #0
 8007c4e:	bfba      	itte	lt
 8007c50:	4249      	neglt	r1, r1
 8007c52:	232d      	movlt	r3, #45	@ 0x2d
 8007c54:	232b      	movge	r3, #43	@ 0x2b
 8007c56:	2909      	cmp	r1, #9
 8007c58:	7002      	strb	r2, [r0, #0]
 8007c5a:	7043      	strb	r3, [r0, #1]
 8007c5c:	dd29      	ble.n	8007cb2 <__exponent+0x68>
 8007c5e:	f10d 0307 	add.w	r3, sp, #7
 8007c62:	461d      	mov	r5, r3
 8007c64:	270a      	movs	r7, #10
 8007c66:	461a      	mov	r2, r3
 8007c68:	fbb1 f6f7 	udiv	r6, r1, r7
 8007c6c:	fb07 1416 	mls	r4, r7, r6, r1
 8007c70:	3430      	adds	r4, #48	@ 0x30
 8007c72:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007c76:	460c      	mov	r4, r1
 8007c78:	2c63      	cmp	r4, #99	@ 0x63
 8007c7a:	f103 33ff 	add.w	r3, r3, #4294967295
 8007c7e:	4631      	mov	r1, r6
 8007c80:	dcf1      	bgt.n	8007c66 <__exponent+0x1c>
 8007c82:	3130      	adds	r1, #48	@ 0x30
 8007c84:	1e94      	subs	r4, r2, #2
 8007c86:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007c8a:	1c41      	adds	r1, r0, #1
 8007c8c:	4623      	mov	r3, r4
 8007c8e:	42ab      	cmp	r3, r5
 8007c90:	d30a      	bcc.n	8007ca8 <__exponent+0x5e>
 8007c92:	f10d 0309 	add.w	r3, sp, #9
 8007c96:	1a9b      	subs	r3, r3, r2
 8007c98:	42ac      	cmp	r4, r5
 8007c9a:	bf88      	it	hi
 8007c9c:	2300      	movhi	r3, #0
 8007c9e:	3302      	adds	r3, #2
 8007ca0:	4403      	add	r3, r0
 8007ca2:	1a18      	subs	r0, r3, r0
 8007ca4:	b003      	add	sp, #12
 8007ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ca8:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007cac:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007cb0:	e7ed      	b.n	8007c8e <__exponent+0x44>
 8007cb2:	2330      	movs	r3, #48	@ 0x30
 8007cb4:	3130      	adds	r1, #48	@ 0x30
 8007cb6:	7083      	strb	r3, [r0, #2]
 8007cb8:	70c1      	strb	r1, [r0, #3]
 8007cba:	1d03      	adds	r3, r0, #4
 8007cbc:	e7f1      	b.n	8007ca2 <__exponent+0x58>
	...

08007cc0 <_printf_float>:
 8007cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cc4:	b08d      	sub	sp, #52	@ 0x34
 8007cc6:	460c      	mov	r4, r1
 8007cc8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007ccc:	4616      	mov	r6, r2
 8007cce:	461f      	mov	r7, r3
 8007cd0:	4605      	mov	r5, r0
 8007cd2:	f000 ff27 	bl	8008b24 <_localeconv_r>
 8007cd6:	6803      	ldr	r3, [r0, #0]
 8007cd8:	9304      	str	r3, [sp, #16]
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f7f8 fac8 	bl	8000270 <strlen>
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ce4:	f8d8 3000 	ldr.w	r3, [r8]
 8007ce8:	9005      	str	r0, [sp, #20]
 8007cea:	3307      	adds	r3, #7
 8007cec:	f023 0307 	bic.w	r3, r3, #7
 8007cf0:	f103 0208 	add.w	r2, r3, #8
 8007cf4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007cf8:	f8d4 b000 	ldr.w	fp, [r4]
 8007cfc:	f8c8 2000 	str.w	r2, [r8]
 8007d00:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007d04:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007d08:	9307      	str	r3, [sp, #28]
 8007d0a:	f8cd 8018 	str.w	r8, [sp, #24]
 8007d0e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007d12:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d16:	4b9c      	ldr	r3, [pc, #624]	@ (8007f88 <_printf_float+0x2c8>)
 8007d18:	f04f 32ff 	mov.w	r2, #4294967295
 8007d1c:	f7f8 ff06 	bl	8000b2c <__aeabi_dcmpun>
 8007d20:	bb70      	cbnz	r0, 8007d80 <_printf_float+0xc0>
 8007d22:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d26:	4b98      	ldr	r3, [pc, #608]	@ (8007f88 <_printf_float+0x2c8>)
 8007d28:	f04f 32ff 	mov.w	r2, #4294967295
 8007d2c:	f7f8 fee0 	bl	8000af0 <__aeabi_dcmple>
 8007d30:	bb30      	cbnz	r0, 8007d80 <_printf_float+0xc0>
 8007d32:	2200      	movs	r2, #0
 8007d34:	2300      	movs	r3, #0
 8007d36:	4640      	mov	r0, r8
 8007d38:	4649      	mov	r1, r9
 8007d3a:	f7f8 fecf 	bl	8000adc <__aeabi_dcmplt>
 8007d3e:	b110      	cbz	r0, 8007d46 <_printf_float+0x86>
 8007d40:	232d      	movs	r3, #45	@ 0x2d
 8007d42:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d46:	4a91      	ldr	r2, [pc, #580]	@ (8007f8c <_printf_float+0x2cc>)
 8007d48:	4b91      	ldr	r3, [pc, #580]	@ (8007f90 <_printf_float+0x2d0>)
 8007d4a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007d4e:	bf8c      	ite	hi
 8007d50:	4690      	movhi	r8, r2
 8007d52:	4698      	movls	r8, r3
 8007d54:	2303      	movs	r3, #3
 8007d56:	6123      	str	r3, [r4, #16]
 8007d58:	f02b 0304 	bic.w	r3, fp, #4
 8007d5c:	6023      	str	r3, [r4, #0]
 8007d5e:	f04f 0900 	mov.w	r9, #0
 8007d62:	9700      	str	r7, [sp, #0]
 8007d64:	4633      	mov	r3, r6
 8007d66:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007d68:	4621      	mov	r1, r4
 8007d6a:	4628      	mov	r0, r5
 8007d6c:	f000 f9d2 	bl	8008114 <_printf_common>
 8007d70:	3001      	adds	r0, #1
 8007d72:	f040 808d 	bne.w	8007e90 <_printf_float+0x1d0>
 8007d76:	f04f 30ff 	mov.w	r0, #4294967295
 8007d7a:	b00d      	add	sp, #52	@ 0x34
 8007d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d80:	4642      	mov	r2, r8
 8007d82:	464b      	mov	r3, r9
 8007d84:	4640      	mov	r0, r8
 8007d86:	4649      	mov	r1, r9
 8007d88:	f7f8 fed0 	bl	8000b2c <__aeabi_dcmpun>
 8007d8c:	b140      	cbz	r0, 8007da0 <_printf_float+0xe0>
 8007d8e:	464b      	mov	r3, r9
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	bfbc      	itt	lt
 8007d94:	232d      	movlt	r3, #45	@ 0x2d
 8007d96:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007d9a:	4a7e      	ldr	r2, [pc, #504]	@ (8007f94 <_printf_float+0x2d4>)
 8007d9c:	4b7e      	ldr	r3, [pc, #504]	@ (8007f98 <_printf_float+0x2d8>)
 8007d9e:	e7d4      	b.n	8007d4a <_printf_float+0x8a>
 8007da0:	6863      	ldr	r3, [r4, #4]
 8007da2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007da6:	9206      	str	r2, [sp, #24]
 8007da8:	1c5a      	adds	r2, r3, #1
 8007daa:	d13b      	bne.n	8007e24 <_printf_float+0x164>
 8007dac:	2306      	movs	r3, #6
 8007dae:	6063      	str	r3, [r4, #4]
 8007db0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007db4:	2300      	movs	r3, #0
 8007db6:	6022      	str	r2, [r4, #0]
 8007db8:	9303      	str	r3, [sp, #12]
 8007dba:	ab0a      	add	r3, sp, #40	@ 0x28
 8007dbc:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007dc0:	ab09      	add	r3, sp, #36	@ 0x24
 8007dc2:	9300      	str	r3, [sp, #0]
 8007dc4:	6861      	ldr	r1, [r4, #4]
 8007dc6:	ec49 8b10 	vmov	d0, r8, r9
 8007dca:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007dce:	4628      	mov	r0, r5
 8007dd0:	f7ff fed6 	bl	8007b80 <__cvt>
 8007dd4:	9b06      	ldr	r3, [sp, #24]
 8007dd6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007dd8:	2b47      	cmp	r3, #71	@ 0x47
 8007dda:	4680      	mov	r8, r0
 8007ddc:	d129      	bne.n	8007e32 <_printf_float+0x172>
 8007dde:	1cc8      	adds	r0, r1, #3
 8007de0:	db02      	blt.n	8007de8 <_printf_float+0x128>
 8007de2:	6863      	ldr	r3, [r4, #4]
 8007de4:	4299      	cmp	r1, r3
 8007de6:	dd41      	ble.n	8007e6c <_printf_float+0x1ac>
 8007de8:	f1aa 0a02 	sub.w	sl, sl, #2
 8007dec:	fa5f fa8a 	uxtb.w	sl, sl
 8007df0:	3901      	subs	r1, #1
 8007df2:	4652      	mov	r2, sl
 8007df4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007df8:	9109      	str	r1, [sp, #36]	@ 0x24
 8007dfa:	f7ff ff26 	bl	8007c4a <__exponent>
 8007dfe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007e00:	1813      	adds	r3, r2, r0
 8007e02:	2a01      	cmp	r2, #1
 8007e04:	4681      	mov	r9, r0
 8007e06:	6123      	str	r3, [r4, #16]
 8007e08:	dc02      	bgt.n	8007e10 <_printf_float+0x150>
 8007e0a:	6822      	ldr	r2, [r4, #0]
 8007e0c:	07d2      	lsls	r2, r2, #31
 8007e0e:	d501      	bpl.n	8007e14 <_printf_float+0x154>
 8007e10:	3301      	adds	r3, #1
 8007e12:	6123      	str	r3, [r4, #16]
 8007e14:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d0a2      	beq.n	8007d62 <_printf_float+0xa2>
 8007e1c:	232d      	movs	r3, #45	@ 0x2d
 8007e1e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e22:	e79e      	b.n	8007d62 <_printf_float+0xa2>
 8007e24:	9a06      	ldr	r2, [sp, #24]
 8007e26:	2a47      	cmp	r2, #71	@ 0x47
 8007e28:	d1c2      	bne.n	8007db0 <_printf_float+0xf0>
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d1c0      	bne.n	8007db0 <_printf_float+0xf0>
 8007e2e:	2301      	movs	r3, #1
 8007e30:	e7bd      	b.n	8007dae <_printf_float+0xee>
 8007e32:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007e36:	d9db      	bls.n	8007df0 <_printf_float+0x130>
 8007e38:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007e3c:	d118      	bne.n	8007e70 <_printf_float+0x1b0>
 8007e3e:	2900      	cmp	r1, #0
 8007e40:	6863      	ldr	r3, [r4, #4]
 8007e42:	dd0b      	ble.n	8007e5c <_printf_float+0x19c>
 8007e44:	6121      	str	r1, [r4, #16]
 8007e46:	b913      	cbnz	r3, 8007e4e <_printf_float+0x18e>
 8007e48:	6822      	ldr	r2, [r4, #0]
 8007e4a:	07d0      	lsls	r0, r2, #31
 8007e4c:	d502      	bpl.n	8007e54 <_printf_float+0x194>
 8007e4e:	3301      	adds	r3, #1
 8007e50:	440b      	add	r3, r1
 8007e52:	6123      	str	r3, [r4, #16]
 8007e54:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007e56:	f04f 0900 	mov.w	r9, #0
 8007e5a:	e7db      	b.n	8007e14 <_printf_float+0x154>
 8007e5c:	b913      	cbnz	r3, 8007e64 <_printf_float+0x1a4>
 8007e5e:	6822      	ldr	r2, [r4, #0]
 8007e60:	07d2      	lsls	r2, r2, #31
 8007e62:	d501      	bpl.n	8007e68 <_printf_float+0x1a8>
 8007e64:	3302      	adds	r3, #2
 8007e66:	e7f4      	b.n	8007e52 <_printf_float+0x192>
 8007e68:	2301      	movs	r3, #1
 8007e6a:	e7f2      	b.n	8007e52 <_printf_float+0x192>
 8007e6c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007e70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e72:	4299      	cmp	r1, r3
 8007e74:	db05      	blt.n	8007e82 <_printf_float+0x1c2>
 8007e76:	6823      	ldr	r3, [r4, #0]
 8007e78:	6121      	str	r1, [r4, #16]
 8007e7a:	07d8      	lsls	r0, r3, #31
 8007e7c:	d5ea      	bpl.n	8007e54 <_printf_float+0x194>
 8007e7e:	1c4b      	adds	r3, r1, #1
 8007e80:	e7e7      	b.n	8007e52 <_printf_float+0x192>
 8007e82:	2900      	cmp	r1, #0
 8007e84:	bfd4      	ite	le
 8007e86:	f1c1 0202 	rsble	r2, r1, #2
 8007e8a:	2201      	movgt	r2, #1
 8007e8c:	4413      	add	r3, r2
 8007e8e:	e7e0      	b.n	8007e52 <_printf_float+0x192>
 8007e90:	6823      	ldr	r3, [r4, #0]
 8007e92:	055a      	lsls	r2, r3, #21
 8007e94:	d407      	bmi.n	8007ea6 <_printf_float+0x1e6>
 8007e96:	6923      	ldr	r3, [r4, #16]
 8007e98:	4642      	mov	r2, r8
 8007e9a:	4631      	mov	r1, r6
 8007e9c:	4628      	mov	r0, r5
 8007e9e:	47b8      	blx	r7
 8007ea0:	3001      	adds	r0, #1
 8007ea2:	d12b      	bne.n	8007efc <_printf_float+0x23c>
 8007ea4:	e767      	b.n	8007d76 <_printf_float+0xb6>
 8007ea6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007eaa:	f240 80dd 	bls.w	8008068 <_printf_float+0x3a8>
 8007eae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	f7f8 fe07 	bl	8000ac8 <__aeabi_dcmpeq>
 8007eba:	2800      	cmp	r0, #0
 8007ebc:	d033      	beq.n	8007f26 <_printf_float+0x266>
 8007ebe:	4a37      	ldr	r2, [pc, #220]	@ (8007f9c <_printf_float+0x2dc>)
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	4631      	mov	r1, r6
 8007ec4:	4628      	mov	r0, r5
 8007ec6:	47b8      	blx	r7
 8007ec8:	3001      	adds	r0, #1
 8007eca:	f43f af54 	beq.w	8007d76 <_printf_float+0xb6>
 8007ece:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007ed2:	4543      	cmp	r3, r8
 8007ed4:	db02      	blt.n	8007edc <_printf_float+0x21c>
 8007ed6:	6823      	ldr	r3, [r4, #0]
 8007ed8:	07d8      	lsls	r0, r3, #31
 8007eda:	d50f      	bpl.n	8007efc <_printf_float+0x23c>
 8007edc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ee0:	4631      	mov	r1, r6
 8007ee2:	4628      	mov	r0, r5
 8007ee4:	47b8      	blx	r7
 8007ee6:	3001      	adds	r0, #1
 8007ee8:	f43f af45 	beq.w	8007d76 <_printf_float+0xb6>
 8007eec:	f04f 0900 	mov.w	r9, #0
 8007ef0:	f108 38ff 	add.w	r8, r8, #4294967295
 8007ef4:	f104 0a1a 	add.w	sl, r4, #26
 8007ef8:	45c8      	cmp	r8, r9
 8007efa:	dc09      	bgt.n	8007f10 <_printf_float+0x250>
 8007efc:	6823      	ldr	r3, [r4, #0]
 8007efe:	079b      	lsls	r3, r3, #30
 8007f00:	f100 8103 	bmi.w	800810a <_printf_float+0x44a>
 8007f04:	68e0      	ldr	r0, [r4, #12]
 8007f06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007f08:	4298      	cmp	r0, r3
 8007f0a:	bfb8      	it	lt
 8007f0c:	4618      	movlt	r0, r3
 8007f0e:	e734      	b.n	8007d7a <_printf_float+0xba>
 8007f10:	2301      	movs	r3, #1
 8007f12:	4652      	mov	r2, sl
 8007f14:	4631      	mov	r1, r6
 8007f16:	4628      	mov	r0, r5
 8007f18:	47b8      	blx	r7
 8007f1a:	3001      	adds	r0, #1
 8007f1c:	f43f af2b 	beq.w	8007d76 <_printf_float+0xb6>
 8007f20:	f109 0901 	add.w	r9, r9, #1
 8007f24:	e7e8      	b.n	8007ef8 <_printf_float+0x238>
 8007f26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	dc39      	bgt.n	8007fa0 <_printf_float+0x2e0>
 8007f2c:	4a1b      	ldr	r2, [pc, #108]	@ (8007f9c <_printf_float+0x2dc>)
 8007f2e:	2301      	movs	r3, #1
 8007f30:	4631      	mov	r1, r6
 8007f32:	4628      	mov	r0, r5
 8007f34:	47b8      	blx	r7
 8007f36:	3001      	adds	r0, #1
 8007f38:	f43f af1d 	beq.w	8007d76 <_printf_float+0xb6>
 8007f3c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007f40:	ea59 0303 	orrs.w	r3, r9, r3
 8007f44:	d102      	bne.n	8007f4c <_printf_float+0x28c>
 8007f46:	6823      	ldr	r3, [r4, #0]
 8007f48:	07d9      	lsls	r1, r3, #31
 8007f4a:	d5d7      	bpl.n	8007efc <_printf_float+0x23c>
 8007f4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f50:	4631      	mov	r1, r6
 8007f52:	4628      	mov	r0, r5
 8007f54:	47b8      	blx	r7
 8007f56:	3001      	adds	r0, #1
 8007f58:	f43f af0d 	beq.w	8007d76 <_printf_float+0xb6>
 8007f5c:	f04f 0a00 	mov.w	sl, #0
 8007f60:	f104 0b1a 	add.w	fp, r4, #26
 8007f64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f66:	425b      	negs	r3, r3
 8007f68:	4553      	cmp	r3, sl
 8007f6a:	dc01      	bgt.n	8007f70 <_printf_float+0x2b0>
 8007f6c:	464b      	mov	r3, r9
 8007f6e:	e793      	b.n	8007e98 <_printf_float+0x1d8>
 8007f70:	2301      	movs	r3, #1
 8007f72:	465a      	mov	r2, fp
 8007f74:	4631      	mov	r1, r6
 8007f76:	4628      	mov	r0, r5
 8007f78:	47b8      	blx	r7
 8007f7a:	3001      	adds	r0, #1
 8007f7c:	f43f aefb 	beq.w	8007d76 <_printf_float+0xb6>
 8007f80:	f10a 0a01 	add.w	sl, sl, #1
 8007f84:	e7ee      	b.n	8007f64 <_printf_float+0x2a4>
 8007f86:	bf00      	nop
 8007f88:	7fefffff 	.word	0x7fefffff
 8007f8c:	0800d24c 	.word	0x0800d24c
 8007f90:	0800d248 	.word	0x0800d248
 8007f94:	0800d254 	.word	0x0800d254
 8007f98:	0800d250 	.word	0x0800d250
 8007f9c:	0800d38e 	.word	0x0800d38e
 8007fa0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007fa2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007fa6:	4553      	cmp	r3, sl
 8007fa8:	bfa8      	it	ge
 8007faa:	4653      	movge	r3, sl
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	4699      	mov	r9, r3
 8007fb0:	dc36      	bgt.n	8008020 <_printf_float+0x360>
 8007fb2:	f04f 0b00 	mov.w	fp, #0
 8007fb6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007fba:	f104 021a 	add.w	r2, r4, #26
 8007fbe:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007fc0:	9306      	str	r3, [sp, #24]
 8007fc2:	eba3 0309 	sub.w	r3, r3, r9
 8007fc6:	455b      	cmp	r3, fp
 8007fc8:	dc31      	bgt.n	800802e <_printf_float+0x36e>
 8007fca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fcc:	459a      	cmp	sl, r3
 8007fce:	dc3a      	bgt.n	8008046 <_printf_float+0x386>
 8007fd0:	6823      	ldr	r3, [r4, #0]
 8007fd2:	07da      	lsls	r2, r3, #31
 8007fd4:	d437      	bmi.n	8008046 <_printf_float+0x386>
 8007fd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fd8:	ebaa 0903 	sub.w	r9, sl, r3
 8007fdc:	9b06      	ldr	r3, [sp, #24]
 8007fde:	ebaa 0303 	sub.w	r3, sl, r3
 8007fe2:	4599      	cmp	r9, r3
 8007fe4:	bfa8      	it	ge
 8007fe6:	4699      	movge	r9, r3
 8007fe8:	f1b9 0f00 	cmp.w	r9, #0
 8007fec:	dc33      	bgt.n	8008056 <_printf_float+0x396>
 8007fee:	f04f 0800 	mov.w	r8, #0
 8007ff2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007ff6:	f104 0b1a 	add.w	fp, r4, #26
 8007ffa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ffc:	ebaa 0303 	sub.w	r3, sl, r3
 8008000:	eba3 0309 	sub.w	r3, r3, r9
 8008004:	4543      	cmp	r3, r8
 8008006:	f77f af79 	ble.w	8007efc <_printf_float+0x23c>
 800800a:	2301      	movs	r3, #1
 800800c:	465a      	mov	r2, fp
 800800e:	4631      	mov	r1, r6
 8008010:	4628      	mov	r0, r5
 8008012:	47b8      	blx	r7
 8008014:	3001      	adds	r0, #1
 8008016:	f43f aeae 	beq.w	8007d76 <_printf_float+0xb6>
 800801a:	f108 0801 	add.w	r8, r8, #1
 800801e:	e7ec      	b.n	8007ffa <_printf_float+0x33a>
 8008020:	4642      	mov	r2, r8
 8008022:	4631      	mov	r1, r6
 8008024:	4628      	mov	r0, r5
 8008026:	47b8      	blx	r7
 8008028:	3001      	adds	r0, #1
 800802a:	d1c2      	bne.n	8007fb2 <_printf_float+0x2f2>
 800802c:	e6a3      	b.n	8007d76 <_printf_float+0xb6>
 800802e:	2301      	movs	r3, #1
 8008030:	4631      	mov	r1, r6
 8008032:	4628      	mov	r0, r5
 8008034:	9206      	str	r2, [sp, #24]
 8008036:	47b8      	blx	r7
 8008038:	3001      	adds	r0, #1
 800803a:	f43f ae9c 	beq.w	8007d76 <_printf_float+0xb6>
 800803e:	9a06      	ldr	r2, [sp, #24]
 8008040:	f10b 0b01 	add.w	fp, fp, #1
 8008044:	e7bb      	b.n	8007fbe <_printf_float+0x2fe>
 8008046:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800804a:	4631      	mov	r1, r6
 800804c:	4628      	mov	r0, r5
 800804e:	47b8      	blx	r7
 8008050:	3001      	adds	r0, #1
 8008052:	d1c0      	bne.n	8007fd6 <_printf_float+0x316>
 8008054:	e68f      	b.n	8007d76 <_printf_float+0xb6>
 8008056:	9a06      	ldr	r2, [sp, #24]
 8008058:	464b      	mov	r3, r9
 800805a:	4442      	add	r2, r8
 800805c:	4631      	mov	r1, r6
 800805e:	4628      	mov	r0, r5
 8008060:	47b8      	blx	r7
 8008062:	3001      	adds	r0, #1
 8008064:	d1c3      	bne.n	8007fee <_printf_float+0x32e>
 8008066:	e686      	b.n	8007d76 <_printf_float+0xb6>
 8008068:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800806c:	f1ba 0f01 	cmp.w	sl, #1
 8008070:	dc01      	bgt.n	8008076 <_printf_float+0x3b6>
 8008072:	07db      	lsls	r3, r3, #31
 8008074:	d536      	bpl.n	80080e4 <_printf_float+0x424>
 8008076:	2301      	movs	r3, #1
 8008078:	4642      	mov	r2, r8
 800807a:	4631      	mov	r1, r6
 800807c:	4628      	mov	r0, r5
 800807e:	47b8      	blx	r7
 8008080:	3001      	adds	r0, #1
 8008082:	f43f ae78 	beq.w	8007d76 <_printf_float+0xb6>
 8008086:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800808a:	4631      	mov	r1, r6
 800808c:	4628      	mov	r0, r5
 800808e:	47b8      	blx	r7
 8008090:	3001      	adds	r0, #1
 8008092:	f43f ae70 	beq.w	8007d76 <_printf_float+0xb6>
 8008096:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800809a:	2200      	movs	r2, #0
 800809c:	2300      	movs	r3, #0
 800809e:	f10a 3aff 	add.w	sl, sl, #4294967295
 80080a2:	f7f8 fd11 	bl	8000ac8 <__aeabi_dcmpeq>
 80080a6:	b9c0      	cbnz	r0, 80080da <_printf_float+0x41a>
 80080a8:	4653      	mov	r3, sl
 80080aa:	f108 0201 	add.w	r2, r8, #1
 80080ae:	4631      	mov	r1, r6
 80080b0:	4628      	mov	r0, r5
 80080b2:	47b8      	blx	r7
 80080b4:	3001      	adds	r0, #1
 80080b6:	d10c      	bne.n	80080d2 <_printf_float+0x412>
 80080b8:	e65d      	b.n	8007d76 <_printf_float+0xb6>
 80080ba:	2301      	movs	r3, #1
 80080bc:	465a      	mov	r2, fp
 80080be:	4631      	mov	r1, r6
 80080c0:	4628      	mov	r0, r5
 80080c2:	47b8      	blx	r7
 80080c4:	3001      	adds	r0, #1
 80080c6:	f43f ae56 	beq.w	8007d76 <_printf_float+0xb6>
 80080ca:	f108 0801 	add.w	r8, r8, #1
 80080ce:	45d0      	cmp	r8, sl
 80080d0:	dbf3      	blt.n	80080ba <_printf_float+0x3fa>
 80080d2:	464b      	mov	r3, r9
 80080d4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80080d8:	e6df      	b.n	8007e9a <_printf_float+0x1da>
 80080da:	f04f 0800 	mov.w	r8, #0
 80080de:	f104 0b1a 	add.w	fp, r4, #26
 80080e2:	e7f4      	b.n	80080ce <_printf_float+0x40e>
 80080e4:	2301      	movs	r3, #1
 80080e6:	4642      	mov	r2, r8
 80080e8:	e7e1      	b.n	80080ae <_printf_float+0x3ee>
 80080ea:	2301      	movs	r3, #1
 80080ec:	464a      	mov	r2, r9
 80080ee:	4631      	mov	r1, r6
 80080f0:	4628      	mov	r0, r5
 80080f2:	47b8      	blx	r7
 80080f4:	3001      	adds	r0, #1
 80080f6:	f43f ae3e 	beq.w	8007d76 <_printf_float+0xb6>
 80080fa:	f108 0801 	add.w	r8, r8, #1
 80080fe:	68e3      	ldr	r3, [r4, #12]
 8008100:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008102:	1a5b      	subs	r3, r3, r1
 8008104:	4543      	cmp	r3, r8
 8008106:	dcf0      	bgt.n	80080ea <_printf_float+0x42a>
 8008108:	e6fc      	b.n	8007f04 <_printf_float+0x244>
 800810a:	f04f 0800 	mov.w	r8, #0
 800810e:	f104 0919 	add.w	r9, r4, #25
 8008112:	e7f4      	b.n	80080fe <_printf_float+0x43e>

08008114 <_printf_common>:
 8008114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008118:	4616      	mov	r6, r2
 800811a:	4698      	mov	r8, r3
 800811c:	688a      	ldr	r2, [r1, #8]
 800811e:	690b      	ldr	r3, [r1, #16]
 8008120:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008124:	4293      	cmp	r3, r2
 8008126:	bfb8      	it	lt
 8008128:	4613      	movlt	r3, r2
 800812a:	6033      	str	r3, [r6, #0]
 800812c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008130:	4607      	mov	r7, r0
 8008132:	460c      	mov	r4, r1
 8008134:	b10a      	cbz	r2, 800813a <_printf_common+0x26>
 8008136:	3301      	adds	r3, #1
 8008138:	6033      	str	r3, [r6, #0]
 800813a:	6823      	ldr	r3, [r4, #0]
 800813c:	0699      	lsls	r1, r3, #26
 800813e:	bf42      	ittt	mi
 8008140:	6833      	ldrmi	r3, [r6, #0]
 8008142:	3302      	addmi	r3, #2
 8008144:	6033      	strmi	r3, [r6, #0]
 8008146:	6825      	ldr	r5, [r4, #0]
 8008148:	f015 0506 	ands.w	r5, r5, #6
 800814c:	d106      	bne.n	800815c <_printf_common+0x48>
 800814e:	f104 0a19 	add.w	sl, r4, #25
 8008152:	68e3      	ldr	r3, [r4, #12]
 8008154:	6832      	ldr	r2, [r6, #0]
 8008156:	1a9b      	subs	r3, r3, r2
 8008158:	42ab      	cmp	r3, r5
 800815a:	dc26      	bgt.n	80081aa <_printf_common+0x96>
 800815c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008160:	6822      	ldr	r2, [r4, #0]
 8008162:	3b00      	subs	r3, #0
 8008164:	bf18      	it	ne
 8008166:	2301      	movne	r3, #1
 8008168:	0692      	lsls	r2, r2, #26
 800816a:	d42b      	bmi.n	80081c4 <_printf_common+0xb0>
 800816c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008170:	4641      	mov	r1, r8
 8008172:	4638      	mov	r0, r7
 8008174:	47c8      	blx	r9
 8008176:	3001      	adds	r0, #1
 8008178:	d01e      	beq.n	80081b8 <_printf_common+0xa4>
 800817a:	6823      	ldr	r3, [r4, #0]
 800817c:	6922      	ldr	r2, [r4, #16]
 800817e:	f003 0306 	and.w	r3, r3, #6
 8008182:	2b04      	cmp	r3, #4
 8008184:	bf02      	ittt	eq
 8008186:	68e5      	ldreq	r5, [r4, #12]
 8008188:	6833      	ldreq	r3, [r6, #0]
 800818a:	1aed      	subeq	r5, r5, r3
 800818c:	68a3      	ldr	r3, [r4, #8]
 800818e:	bf0c      	ite	eq
 8008190:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008194:	2500      	movne	r5, #0
 8008196:	4293      	cmp	r3, r2
 8008198:	bfc4      	itt	gt
 800819a:	1a9b      	subgt	r3, r3, r2
 800819c:	18ed      	addgt	r5, r5, r3
 800819e:	2600      	movs	r6, #0
 80081a0:	341a      	adds	r4, #26
 80081a2:	42b5      	cmp	r5, r6
 80081a4:	d11a      	bne.n	80081dc <_printf_common+0xc8>
 80081a6:	2000      	movs	r0, #0
 80081a8:	e008      	b.n	80081bc <_printf_common+0xa8>
 80081aa:	2301      	movs	r3, #1
 80081ac:	4652      	mov	r2, sl
 80081ae:	4641      	mov	r1, r8
 80081b0:	4638      	mov	r0, r7
 80081b2:	47c8      	blx	r9
 80081b4:	3001      	adds	r0, #1
 80081b6:	d103      	bne.n	80081c0 <_printf_common+0xac>
 80081b8:	f04f 30ff 	mov.w	r0, #4294967295
 80081bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081c0:	3501      	adds	r5, #1
 80081c2:	e7c6      	b.n	8008152 <_printf_common+0x3e>
 80081c4:	18e1      	adds	r1, r4, r3
 80081c6:	1c5a      	adds	r2, r3, #1
 80081c8:	2030      	movs	r0, #48	@ 0x30
 80081ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80081ce:	4422      	add	r2, r4
 80081d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80081d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80081d8:	3302      	adds	r3, #2
 80081da:	e7c7      	b.n	800816c <_printf_common+0x58>
 80081dc:	2301      	movs	r3, #1
 80081de:	4622      	mov	r2, r4
 80081e0:	4641      	mov	r1, r8
 80081e2:	4638      	mov	r0, r7
 80081e4:	47c8      	blx	r9
 80081e6:	3001      	adds	r0, #1
 80081e8:	d0e6      	beq.n	80081b8 <_printf_common+0xa4>
 80081ea:	3601      	adds	r6, #1
 80081ec:	e7d9      	b.n	80081a2 <_printf_common+0x8e>
	...

080081f0 <_printf_i>:
 80081f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80081f4:	7e0f      	ldrb	r7, [r1, #24]
 80081f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80081f8:	2f78      	cmp	r7, #120	@ 0x78
 80081fa:	4691      	mov	r9, r2
 80081fc:	4680      	mov	r8, r0
 80081fe:	460c      	mov	r4, r1
 8008200:	469a      	mov	sl, r3
 8008202:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008206:	d807      	bhi.n	8008218 <_printf_i+0x28>
 8008208:	2f62      	cmp	r7, #98	@ 0x62
 800820a:	d80a      	bhi.n	8008222 <_printf_i+0x32>
 800820c:	2f00      	cmp	r7, #0
 800820e:	f000 80d1 	beq.w	80083b4 <_printf_i+0x1c4>
 8008212:	2f58      	cmp	r7, #88	@ 0x58
 8008214:	f000 80b8 	beq.w	8008388 <_printf_i+0x198>
 8008218:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800821c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008220:	e03a      	b.n	8008298 <_printf_i+0xa8>
 8008222:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008226:	2b15      	cmp	r3, #21
 8008228:	d8f6      	bhi.n	8008218 <_printf_i+0x28>
 800822a:	a101      	add	r1, pc, #4	@ (adr r1, 8008230 <_printf_i+0x40>)
 800822c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008230:	08008289 	.word	0x08008289
 8008234:	0800829d 	.word	0x0800829d
 8008238:	08008219 	.word	0x08008219
 800823c:	08008219 	.word	0x08008219
 8008240:	08008219 	.word	0x08008219
 8008244:	08008219 	.word	0x08008219
 8008248:	0800829d 	.word	0x0800829d
 800824c:	08008219 	.word	0x08008219
 8008250:	08008219 	.word	0x08008219
 8008254:	08008219 	.word	0x08008219
 8008258:	08008219 	.word	0x08008219
 800825c:	0800839b 	.word	0x0800839b
 8008260:	080082c7 	.word	0x080082c7
 8008264:	08008355 	.word	0x08008355
 8008268:	08008219 	.word	0x08008219
 800826c:	08008219 	.word	0x08008219
 8008270:	080083bd 	.word	0x080083bd
 8008274:	08008219 	.word	0x08008219
 8008278:	080082c7 	.word	0x080082c7
 800827c:	08008219 	.word	0x08008219
 8008280:	08008219 	.word	0x08008219
 8008284:	0800835d 	.word	0x0800835d
 8008288:	6833      	ldr	r3, [r6, #0]
 800828a:	1d1a      	adds	r2, r3, #4
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	6032      	str	r2, [r6, #0]
 8008290:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008294:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008298:	2301      	movs	r3, #1
 800829a:	e09c      	b.n	80083d6 <_printf_i+0x1e6>
 800829c:	6833      	ldr	r3, [r6, #0]
 800829e:	6820      	ldr	r0, [r4, #0]
 80082a0:	1d19      	adds	r1, r3, #4
 80082a2:	6031      	str	r1, [r6, #0]
 80082a4:	0606      	lsls	r6, r0, #24
 80082a6:	d501      	bpl.n	80082ac <_printf_i+0xbc>
 80082a8:	681d      	ldr	r5, [r3, #0]
 80082aa:	e003      	b.n	80082b4 <_printf_i+0xc4>
 80082ac:	0645      	lsls	r5, r0, #25
 80082ae:	d5fb      	bpl.n	80082a8 <_printf_i+0xb8>
 80082b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80082b4:	2d00      	cmp	r5, #0
 80082b6:	da03      	bge.n	80082c0 <_printf_i+0xd0>
 80082b8:	232d      	movs	r3, #45	@ 0x2d
 80082ba:	426d      	negs	r5, r5
 80082bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80082c0:	4858      	ldr	r0, [pc, #352]	@ (8008424 <_printf_i+0x234>)
 80082c2:	230a      	movs	r3, #10
 80082c4:	e011      	b.n	80082ea <_printf_i+0xfa>
 80082c6:	6821      	ldr	r1, [r4, #0]
 80082c8:	6833      	ldr	r3, [r6, #0]
 80082ca:	0608      	lsls	r0, r1, #24
 80082cc:	f853 5b04 	ldr.w	r5, [r3], #4
 80082d0:	d402      	bmi.n	80082d8 <_printf_i+0xe8>
 80082d2:	0649      	lsls	r1, r1, #25
 80082d4:	bf48      	it	mi
 80082d6:	b2ad      	uxthmi	r5, r5
 80082d8:	2f6f      	cmp	r7, #111	@ 0x6f
 80082da:	4852      	ldr	r0, [pc, #328]	@ (8008424 <_printf_i+0x234>)
 80082dc:	6033      	str	r3, [r6, #0]
 80082de:	bf14      	ite	ne
 80082e0:	230a      	movne	r3, #10
 80082e2:	2308      	moveq	r3, #8
 80082e4:	2100      	movs	r1, #0
 80082e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80082ea:	6866      	ldr	r6, [r4, #4]
 80082ec:	60a6      	str	r6, [r4, #8]
 80082ee:	2e00      	cmp	r6, #0
 80082f0:	db05      	blt.n	80082fe <_printf_i+0x10e>
 80082f2:	6821      	ldr	r1, [r4, #0]
 80082f4:	432e      	orrs	r6, r5
 80082f6:	f021 0104 	bic.w	r1, r1, #4
 80082fa:	6021      	str	r1, [r4, #0]
 80082fc:	d04b      	beq.n	8008396 <_printf_i+0x1a6>
 80082fe:	4616      	mov	r6, r2
 8008300:	fbb5 f1f3 	udiv	r1, r5, r3
 8008304:	fb03 5711 	mls	r7, r3, r1, r5
 8008308:	5dc7      	ldrb	r7, [r0, r7]
 800830a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800830e:	462f      	mov	r7, r5
 8008310:	42bb      	cmp	r3, r7
 8008312:	460d      	mov	r5, r1
 8008314:	d9f4      	bls.n	8008300 <_printf_i+0x110>
 8008316:	2b08      	cmp	r3, #8
 8008318:	d10b      	bne.n	8008332 <_printf_i+0x142>
 800831a:	6823      	ldr	r3, [r4, #0]
 800831c:	07df      	lsls	r7, r3, #31
 800831e:	d508      	bpl.n	8008332 <_printf_i+0x142>
 8008320:	6923      	ldr	r3, [r4, #16]
 8008322:	6861      	ldr	r1, [r4, #4]
 8008324:	4299      	cmp	r1, r3
 8008326:	bfde      	ittt	le
 8008328:	2330      	movle	r3, #48	@ 0x30
 800832a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800832e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008332:	1b92      	subs	r2, r2, r6
 8008334:	6122      	str	r2, [r4, #16]
 8008336:	f8cd a000 	str.w	sl, [sp]
 800833a:	464b      	mov	r3, r9
 800833c:	aa03      	add	r2, sp, #12
 800833e:	4621      	mov	r1, r4
 8008340:	4640      	mov	r0, r8
 8008342:	f7ff fee7 	bl	8008114 <_printf_common>
 8008346:	3001      	adds	r0, #1
 8008348:	d14a      	bne.n	80083e0 <_printf_i+0x1f0>
 800834a:	f04f 30ff 	mov.w	r0, #4294967295
 800834e:	b004      	add	sp, #16
 8008350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008354:	6823      	ldr	r3, [r4, #0]
 8008356:	f043 0320 	orr.w	r3, r3, #32
 800835a:	6023      	str	r3, [r4, #0]
 800835c:	4832      	ldr	r0, [pc, #200]	@ (8008428 <_printf_i+0x238>)
 800835e:	2778      	movs	r7, #120	@ 0x78
 8008360:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008364:	6823      	ldr	r3, [r4, #0]
 8008366:	6831      	ldr	r1, [r6, #0]
 8008368:	061f      	lsls	r7, r3, #24
 800836a:	f851 5b04 	ldr.w	r5, [r1], #4
 800836e:	d402      	bmi.n	8008376 <_printf_i+0x186>
 8008370:	065f      	lsls	r7, r3, #25
 8008372:	bf48      	it	mi
 8008374:	b2ad      	uxthmi	r5, r5
 8008376:	6031      	str	r1, [r6, #0]
 8008378:	07d9      	lsls	r1, r3, #31
 800837a:	bf44      	itt	mi
 800837c:	f043 0320 	orrmi.w	r3, r3, #32
 8008380:	6023      	strmi	r3, [r4, #0]
 8008382:	b11d      	cbz	r5, 800838c <_printf_i+0x19c>
 8008384:	2310      	movs	r3, #16
 8008386:	e7ad      	b.n	80082e4 <_printf_i+0xf4>
 8008388:	4826      	ldr	r0, [pc, #152]	@ (8008424 <_printf_i+0x234>)
 800838a:	e7e9      	b.n	8008360 <_printf_i+0x170>
 800838c:	6823      	ldr	r3, [r4, #0]
 800838e:	f023 0320 	bic.w	r3, r3, #32
 8008392:	6023      	str	r3, [r4, #0]
 8008394:	e7f6      	b.n	8008384 <_printf_i+0x194>
 8008396:	4616      	mov	r6, r2
 8008398:	e7bd      	b.n	8008316 <_printf_i+0x126>
 800839a:	6833      	ldr	r3, [r6, #0]
 800839c:	6825      	ldr	r5, [r4, #0]
 800839e:	6961      	ldr	r1, [r4, #20]
 80083a0:	1d18      	adds	r0, r3, #4
 80083a2:	6030      	str	r0, [r6, #0]
 80083a4:	062e      	lsls	r6, r5, #24
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	d501      	bpl.n	80083ae <_printf_i+0x1be>
 80083aa:	6019      	str	r1, [r3, #0]
 80083ac:	e002      	b.n	80083b4 <_printf_i+0x1c4>
 80083ae:	0668      	lsls	r0, r5, #25
 80083b0:	d5fb      	bpl.n	80083aa <_printf_i+0x1ba>
 80083b2:	8019      	strh	r1, [r3, #0]
 80083b4:	2300      	movs	r3, #0
 80083b6:	6123      	str	r3, [r4, #16]
 80083b8:	4616      	mov	r6, r2
 80083ba:	e7bc      	b.n	8008336 <_printf_i+0x146>
 80083bc:	6833      	ldr	r3, [r6, #0]
 80083be:	1d1a      	adds	r2, r3, #4
 80083c0:	6032      	str	r2, [r6, #0]
 80083c2:	681e      	ldr	r6, [r3, #0]
 80083c4:	6862      	ldr	r2, [r4, #4]
 80083c6:	2100      	movs	r1, #0
 80083c8:	4630      	mov	r0, r6
 80083ca:	f7f7 ff01 	bl	80001d0 <memchr>
 80083ce:	b108      	cbz	r0, 80083d4 <_printf_i+0x1e4>
 80083d0:	1b80      	subs	r0, r0, r6
 80083d2:	6060      	str	r0, [r4, #4]
 80083d4:	6863      	ldr	r3, [r4, #4]
 80083d6:	6123      	str	r3, [r4, #16]
 80083d8:	2300      	movs	r3, #0
 80083da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80083de:	e7aa      	b.n	8008336 <_printf_i+0x146>
 80083e0:	6923      	ldr	r3, [r4, #16]
 80083e2:	4632      	mov	r2, r6
 80083e4:	4649      	mov	r1, r9
 80083e6:	4640      	mov	r0, r8
 80083e8:	47d0      	blx	sl
 80083ea:	3001      	adds	r0, #1
 80083ec:	d0ad      	beq.n	800834a <_printf_i+0x15a>
 80083ee:	6823      	ldr	r3, [r4, #0]
 80083f0:	079b      	lsls	r3, r3, #30
 80083f2:	d413      	bmi.n	800841c <_printf_i+0x22c>
 80083f4:	68e0      	ldr	r0, [r4, #12]
 80083f6:	9b03      	ldr	r3, [sp, #12]
 80083f8:	4298      	cmp	r0, r3
 80083fa:	bfb8      	it	lt
 80083fc:	4618      	movlt	r0, r3
 80083fe:	e7a6      	b.n	800834e <_printf_i+0x15e>
 8008400:	2301      	movs	r3, #1
 8008402:	4632      	mov	r2, r6
 8008404:	4649      	mov	r1, r9
 8008406:	4640      	mov	r0, r8
 8008408:	47d0      	blx	sl
 800840a:	3001      	adds	r0, #1
 800840c:	d09d      	beq.n	800834a <_printf_i+0x15a>
 800840e:	3501      	adds	r5, #1
 8008410:	68e3      	ldr	r3, [r4, #12]
 8008412:	9903      	ldr	r1, [sp, #12]
 8008414:	1a5b      	subs	r3, r3, r1
 8008416:	42ab      	cmp	r3, r5
 8008418:	dcf2      	bgt.n	8008400 <_printf_i+0x210>
 800841a:	e7eb      	b.n	80083f4 <_printf_i+0x204>
 800841c:	2500      	movs	r5, #0
 800841e:	f104 0619 	add.w	r6, r4, #25
 8008422:	e7f5      	b.n	8008410 <_printf_i+0x220>
 8008424:	0800d258 	.word	0x0800d258
 8008428:	0800d269 	.word	0x0800d269

0800842c <_scanf_float>:
 800842c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008430:	b087      	sub	sp, #28
 8008432:	4691      	mov	r9, r2
 8008434:	9303      	str	r3, [sp, #12]
 8008436:	688b      	ldr	r3, [r1, #8]
 8008438:	1e5a      	subs	r2, r3, #1
 800843a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800843e:	bf81      	itttt	hi
 8008440:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008444:	eb03 0b05 	addhi.w	fp, r3, r5
 8008448:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800844c:	608b      	strhi	r3, [r1, #8]
 800844e:	680b      	ldr	r3, [r1, #0]
 8008450:	460a      	mov	r2, r1
 8008452:	f04f 0500 	mov.w	r5, #0
 8008456:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800845a:	f842 3b1c 	str.w	r3, [r2], #28
 800845e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008462:	4680      	mov	r8, r0
 8008464:	460c      	mov	r4, r1
 8008466:	bf98      	it	ls
 8008468:	f04f 0b00 	movls.w	fp, #0
 800846c:	9201      	str	r2, [sp, #4]
 800846e:	4616      	mov	r6, r2
 8008470:	46aa      	mov	sl, r5
 8008472:	462f      	mov	r7, r5
 8008474:	9502      	str	r5, [sp, #8]
 8008476:	68a2      	ldr	r2, [r4, #8]
 8008478:	b15a      	cbz	r2, 8008492 <_scanf_float+0x66>
 800847a:	f8d9 3000 	ldr.w	r3, [r9]
 800847e:	781b      	ldrb	r3, [r3, #0]
 8008480:	2b4e      	cmp	r3, #78	@ 0x4e
 8008482:	d863      	bhi.n	800854c <_scanf_float+0x120>
 8008484:	2b40      	cmp	r3, #64	@ 0x40
 8008486:	d83b      	bhi.n	8008500 <_scanf_float+0xd4>
 8008488:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800848c:	b2c8      	uxtb	r0, r1
 800848e:	280e      	cmp	r0, #14
 8008490:	d939      	bls.n	8008506 <_scanf_float+0xda>
 8008492:	b11f      	cbz	r7, 800849c <_scanf_float+0x70>
 8008494:	6823      	ldr	r3, [r4, #0]
 8008496:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800849a:	6023      	str	r3, [r4, #0]
 800849c:	f10a 3aff 	add.w	sl, sl, #4294967295
 80084a0:	f1ba 0f01 	cmp.w	sl, #1
 80084a4:	f200 8114 	bhi.w	80086d0 <_scanf_float+0x2a4>
 80084a8:	9b01      	ldr	r3, [sp, #4]
 80084aa:	429e      	cmp	r6, r3
 80084ac:	f200 8105 	bhi.w	80086ba <_scanf_float+0x28e>
 80084b0:	2001      	movs	r0, #1
 80084b2:	b007      	add	sp, #28
 80084b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084b8:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80084bc:	2a0d      	cmp	r2, #13
 80084be:	d8e8      	bhi.n	8008492 <_scanf_float+0x66>
 80084c0:	a101      	add	r1, pc, #4	@ (adr r1, 80084c8 <_scanf_float+0x9c>)
 80084c2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80084c6:	bf00      	nop
 80084c8:	08008611 	.word	0x08008611
 80084cc:	08008493 	.word	0x08008493
 80084d0:	08008493 	.word	0x08008493
 80084d4:	08008493 	.word	0x08008493
 80084d8:	0800866d 	.word	0x0800866d
 80084dc:	08008647 	.word	0x08008647
 80084e0:	08008493 	.word	0x08008493
 80084e4:	08008493 	.word	0x08008493
 80084e8:	0800861f 	.word	0x0800861f
 80084ec:	08008493 	.word	0x08008493
 80084f0:	08008493 	.word	0x08008493
 80084f4:	08008493 	.word	0x08008493
 80084f8:	08008493 	.word	0x08008493
 80084fc:	080085db 	.word	0x080085db
 8008500:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008504:	e7da      	b.n	80084bc <_scanf_float+0x90>
 8008506:	290e      	cmp	r1, #14
 8008508:	d8c3      	bhi.n	8008492 <_scanf_float+0x66>
 800850a:	a001      	add	r0, pc, #4	@ (adr r0, 8008510 <_scanf_float+0xe4>)
 800850c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008510:	080085cb 	.word	0x080085cb
 8008514:	08008493 	.word	0x08008493
 8008518:	080085cb 	.word	0x080085cb
 800851c:	0800865b 	.word	0x0800865b
 8008520:	08008493 	.word	0x08008493
 8008524:	0800856d 	.word	0x0800856d
 8008528:	080085b1 	.word	0x080085b1
 800852c:	080085b1 	.word	0x080085b1
 8008530:	080085b1 	.word	0x080085b1
 8008534:	080085b1 	.word	0x080085b1
 8008538:	080085b1 	.word	0x080085b1
 800853c:	080085b1 	.word	0x080085b1
 8008540:	080085b1 	.word	0x080085b1
 8008544:	080085b1 	.word	0x080085b1
 8008548:	080085b1 	.word	0x080085b1
 800854c:	2b6e      	cmp	r3, #110	@ 0x6e
 800854e:	d809      	bhi.n	8008564 <_scanf_float+0x138>
 8008550:	2b60      	cmp	r3, #96	@ 0x60
 8008552:	d8b1      	bhi.n	80084b8 <_scanf_float+0x8c>
 8008554:	2b54      	cmp	r3, #84	@ 0x54
 8008556:	d07b      	beq.n	8008650 <_scanf_float+0x224>
 8008558:	2b59      	cmp	r3, #89	@ 0x59
 800855a:	d19a      	bne.n	8008492 <_scanf_float+0x66>
 800855c:	2d07      	cmp	r5, #7
 800855e:	d198      	bne.n	8008492 <_scanf_float+0x66>
 8008560:	2508      	movs	r5, #8
 8008562:	e02f      	b.n	80085c4 <_scanf_float+0x198>
 8008564:	2b74      	cmp	r3, #116	@ 0x74
 8008566:	d073      	beq.n	8008650 <_scanf_float+0x224>
 8008568:	2b79      	cmp	r3, #121	@ 0x79
 800856a:	e7f6      	b.n	800855a <_scanf_float+0x12e>
 800856c:	6821      	ldr	r1, [r4, #0]
 800856e:	05c8      	lsls	r0, r1, #23
 8008570:	d51e      	bpl.n	80085b0 <_scanf_float+0x184>
 8008572:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8008576:	6021      	str	r1, [r4, #0]
 8008578:	3701      	adds	r7, #1
 800857a:	f1bb 0f00 	cmp.w	fp, #0
 800857e:	d003      	beq.n	8008588 <_scanf_float+0x15c>
 8008580:	3201      	adds	r2, #1
 8008582:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008586:	60a2      	str	r2, [r4, #8]
 8008588:	68a3      	ldr	r3, [r4, #8]
 800858a:	3b01      	subs	r3, #1
 800858c:	60a3      	str	r3, [r4, #8]
 800858e:	6923      	ldr	r3, [r4, #16]
 8008590:	3301      	adds	r3, #1
 8008592:	6123      	str	r3, [r4, #16]
 8008594:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8008598:	3b01      	subs	r3, #1
 800859a:	2b00      	cmp	r3, #0
 800859c:	f8c9 3004 	str.w	r3, [r9, #4]
 80085a0:	f340 8082 	ble.w	80086a8 <_scanf_float+0x27c>
 80085a4:	f8d9 3000 	ldr.w	r3, [r9]
 80085a8:	3301      	adds	r3, #1
 80085aa:	f8c9 3000 	str.w	r3, [r9]
 80085ae:	e762      	b.n	8008476 <_scanf_float+0x4a>
 80085b0:	eb1a 0105 	adds.w	r1, sl, r5
 80085b4:	f47f af6d 	bne.w	8008492 <_scanf_float+0x66>
 80085b8:	6822      	ldr	r2, [r4, #0]
 80085ba:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80085be:	6022      	str	r2, [r4, #0]
 80085c0:	460d      	mov	r5, r1
 80085c2:	468a      	mov	sl, r1
 80085c4:	f806 3b01 	strb.w	r3, [r6], #1
 80085c8:	e7de      	b.n	8008588 <_scanf_float+0x15c>
 80085ca:	6822      	ldr	r2, [r4, #0]
 80085cc:	0610      	lsls	r0, r2, #24
 80085ce:	f57f af60 	bpl.w	8008492 <_scanf_float+0x66>
 80085d2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80085d6:	6022      	str	r2, [r4, #0]
 80085d8:	e7f4      	b.n	80085c4 <_scanf_float+0x198>
 80085da:	f1ba 0f00 	cmp.w	sl, #0
 80085de:	d10c      	bne.n	80085fa <_scanf_float+0x1ce>
 80085e0:	b977      	cbnz	r7, 8008600 <_scanf_float+0x1d4>
 80085e2:	6822      	ldr	r2, [r4, #0]
 80085e4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80085e8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80085ec:	d108      	bne.n	8008600 <_scanf_float+0x1d4>
 80085ee:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80085f2:	6022      	str	r2, [r4, #0]
 80085f4:	f04f 0a01 	mov.w	sl, #1
 80085f8:	e7e4      	b.n	80085c4 <_scanf_float+0x198>
 80085fa:	f1ba 0f02 	cmp.w	sl, #2
 80085fe:	d050      	beq.n	80086a2 <_scanf_float+0x276>
 8008600:	2d01      	cmp	r5, #1
 8008602:	d002      	beq.n	800860a <_scanf_float+0x1de>
 8008604:	2d04      	cmp	r5, #4
 8008606:	f47f af44 	bne.w	8008492 <_scanf_float+0x66>
 800860a:	3501      	adds	r5, #1
 800860c:	b2ed      	uxtb	r5, r5
 800860e:	e7d9      	b.n	80085c4 <_scanf_float+0x198>
 8008610:	f1ba 0f01 	cmp.w	sl, #1
 8008614:	f47f af3d 	bne.w	8008492 <_scanf_float+0x66>
 8008618:	f04f 0a02 	mov.w	sl, #2
 800861c:	e7d2      	b.n	80085c4 <_scanf_float+0x198>
 800861e:	b975      	cbnz	r5, 800863e <_scanf_float+0x212>
 8008620:	2f00      	cmp	r7, #0
 8008622:	f47f af37 	bne.w	8008494 <_scanf_float+0x68>
 8008626:	6822      	ldr	r2, [r4, #0]
 8008628:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800862c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008630:	f040 8103 	bne.w	800883a <_scanf_float+0x40e>
 8008634:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008638:	6022      	str	r2, [r4, #0]
 800863a:	2501      	movs	r5, #1
 800863c:	e7c2      	b.n	80085c4 <_scanf_float+0x198>
 800863e:	2d03      	cmp	r5, #3
 8008640:	d0e3      	beq.n	800860a <_scanf_float+0x1de>
 8008642:	2d05      	cmp	r5, #5
 8008644:	e7df      	b.n	8008606 <_scanf_float+0x1da>
 8008646:	2d02      	cmp	r5, #2
 8008648:	f47f af23 	bne.w	8008492 <_scanf_float+0x66>
 800864c:	2503      	movs	r5, #3
 800864e:	e7b9      	b.n	80085c4 <_scanf_float+0x198>
 8008650:	2d06      	cmp	r5, #6
 8008652:	f47f af1e 	bne.w	8008492 <_scanf_float+0x66>
 8008656:	2507      	movs	r5, #7
 8008658:	e7b4      	b.n	80085c4 <_scanf_float+0x198>
 800865a:	6822      	ldr	r2, [r4, #0]
 800865c:	0591      	lsls	r1, r2, #22
 800865e:	f57f af18 	bpl.w	8008492 <_scanf_float+0x66>
 8008662:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8008666:	6022      	str	r2, [r4, #0]
 8008668:	9702      	str	r7, [sp, #8]
 800866a:	e7ab      	b.n	80085c4 <_scanf_float+0x198>
 800866c:	6822      	ldr	r2, [r4, #0]
 800866e:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8008672:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008676:	d005      	beq.n	8008684 <_scanf_float+0x258>
 8008678:	0550      	lsls	r0, r2, #21
 800867a:	f57f af0a 	bpl.w	8008492 <_scanf_float+0x66>
 800867e:	2f00      	cmp	r7, #0
 8008680:	f000 80db 	beq.w	800883a <_scanf_float+0x40e>
 8008684:	0591      	lsls	r1, r2, #22
 8008686:	bf58      	it	pl
 8008688:	9902      	ldrpl	r1, [sp, #8]
 800868a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800868e:	bf58      	it	pl
 8008690:	1a79      	subpl	r1, r7, r1
 8008692:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8008696:	bf58      	it	pl
 8008698:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800869c:	6022      	str	r2, [r4, #0]
 800869e:	2700      	movs	r7, #0
 80086a0:	e790      	b.n	80085c4 <_scanf_float+0x198>
 80086a2:	f04f 0a03 	mov.w	sl, #3
 80086a6:	e78d      	b.n	80085c4 <_scanf_float+0x198>
 80086a8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80086ac:	4649      	mov	r1, r9
 80086ae:	4640      	mov	r0, r8
 80086b0:	4798      	blx	r3
 80086b2:	2800      	cmp	r0, #0
 80086b4:	f43f aedf 	beq.w	8008476 <_scanf_float+0x4a>
 80086b8:	e6eb      	b.n	8008492 <_scanf_float+0x66>
 80086ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80086be:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80086c2:	464a      	mov	r2, r9
 80086c4:	4640      	mov	r0, r8
 80086c6:	4798      	blx	r3
 80086c8:	6923      	ldr	r3, [r4, #16]
 80086ca:	3b01      	subs	r3, #1
 80086cc:	6123      	str	r3, [r4, #16]
 80086ce:	e6eb      	b.n	80084a8 <_scanf_float+0x7c>
 80086d0:	1e6b      	subs	r3, r5, #1
 80086d2:	2b06      	cmp	r3, #6
 80086d4:	d824      	bhi.n	8008720 <_scanf_float+0x2f4>
 80086d6:	2d02      	cmp	r5, #2
 80086d8:	d836      	bhi.n	8008748 <_scanf_float+0x31c>
 80086da:	9b01      	ldr	r3, [sp, #4]
 80086dc:	429e      	cmp	r6, r3
 80086de:	f67f aee7 	bls.w	80084b0 <_scanf_float+0x84>
 80086e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80086e6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80086ea:	464a      	mov	r2, r9
 80086ec:	4640      	mov	r0, r8
 80086ee:	4798      	blx	r3
 80086f0:	6923      	ldr	r3, [r4, #16]
 80086f2:	3b01      	subs	r3, #1
 80086f4:	6123      	str	r3, [r4, #16]
 80086f6:	e7f0      	b.n	80086da <_scanf_float+0x2ae>
 80086f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80086fc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008700:	464a      	mov	r2, r9
 8008702:	4640      	mov	r0, r8
 8008704:	4798      	blx	r3
 8008706:	6923      	ldr	r3, [r4, #16]
 8008708:	3b01      	subs	r3, #1
 800870a:	6123      	str	r3, [r4, #16]
 800870c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008710:	fa5f fa8a 	uxtb.w	sl, sl
 8008714:	f1ba 0f02 	cmp.w	sl, #2
 8008718:	d1ee      	bne.n	80086f8 <_scanf_float+0x2cc>
 800871a:	3d03      	subs	r5, #3
 800871c:	b2ed      	uxtb	r5, r5
 800871e:	1b76      	subs	r6, r6, r5
 8008720:	6823      	ldr	r3, [r4, #0]
 8008722:	05da      	lsls	r2, r3, #23
 8008724:	d530      	bpl.n	8008788 <_scanf_float+0x35c>
 8008726:	055b      	lsls	r3, r3, #21
 8008728:	d511      	bpl.n	800874e <_scanf_float+0x322>
 800872a:	9b01      	ldr	r3, [sp, #4]
 800872c:	429e      	cmp	r6, r3
 800872e:	f67f aebf 	bls.w	80084b0 <_scanf_float+0x84>
 8008732:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008736:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800873a:	464a      	mov	r2, r9
 800873c:	4640      	mov	r0, r8
 800873e:	4798      	blx	r3
 8008740:	6923      	ldr	r3, [r4, #16]
 8008742:	3b01      	subs	r3, #1
 8008744:	6123      	str	r3, [r4, #16]
 8008746:	e7f0      	b.n	800872a <_scanf_float+0x2fe>
 8008748:	46aa      	mov	sl, r5
 800874a:	46b3      	mov	fp, r6
 800874c:	e7de      	b.n	800870c <_scanf_float+0x2e0>
 800874e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008752:	6923      	ldr	r3, [r4, #16]
 8008754:	2965      	cmp	r1, #101	@ 0x65
 8008756:	f103 33ff 	add.w	r3, r3, #4294967295
 800875a:	f106 35ff 	add.w	r5, r6, #4294967295
 800875e:	6123      	str	r3, [r4, #16]
 8008760:	d00c      	beq.n	800877c <_scanf_float+0x350>
 8008762:	2945      	cmp	r1, #69	@ 0x45
 8008764:	d00a      	beq.n	800877c <_scanf_float+0x350>
 8008766:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800876a:	464a      	mov	r2, r9
 800876c:	4640      	mov	r0, r8
 800876e:	4798      	blx	r3
 8008770:	6923      	ldr	r3, [r4, #16]
 8008772:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008776:	3b01      	subs	r3, #1
 8008778:	1eb5      	subs	r5, r6, #2
 800877a:	6123      	str	r3, [r4, #16]
 800877c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008780:	464a      	mov	r2, r9
 8008782:	4640      	mov	r0, r8
 8008784:	4798      	blx	r3
 8008786:	462e      	mov	r6, r5
 8008788:	6822      	ldr	r2, [r4, #0]
 800878a:	f012 0210 	ands.w	r2, r2, #16
 800878e:	d001      	beq.n	8008794 <_scanf_float+0x368>
 8008790:	2000      	movs	r0, #0
 8008792:	e68e      	b.n	80084b2 <_scanf_float+0x86>
 8008794:	7032      	strb	r2, [r6, #0]
 8008796:	6823      	ldr	r3, [r4, #0]
 8008798:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800879c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80087a0:	d125      	bne.n	80087ee <_scanf_float+0x3c2>
 80087a2:	9b02      	ldr	r3, [sp, #8]
 80087a4:	429f      	cmp	r7, r3
 80087a6:	d00a      	beq.n	80087be <_scanf_float+0x392>
 80087a8:	1bda      	subs	r2, r3, r7
 80087aa:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80087ae:	429e      	cmp	r6, r3
 80087b0:	bf28      	it	cs
 80087b2:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80087b6:	4922      	ldr	r1, [pc, #136]	@ (8008840 <_scanf_float+0x414>)
 80087b8:	4630      	mov	r0, r6
 80087ba:	f000 f907 	bl	80089cc <siprintf>
 80087be:	9901      	ldr	r1, [sp, #4]
 80087c0:	2200      	movs	r2, #0
 80087c2:	4640      	mov	r0, r8
 80087c4:	f002 fc40 	bl	800b048 <_strtod_r>
 80087c8:	9b03      	ldr	r3, [sp, #12]
 80087ca:	6821      	ldr	r1, [r4, #0]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f011 0f02 	tst.w	r1, #2
 80087d2:	ec57 6b10 	vmov	r6, r7, d0
 80087d6:	f103 0204 	add.w	r2, r3, #4
 80087da:	d015      	beq.n	8008808 <_scanf_float+0x3dc>
 80087dc:	9903      	ldr	r1, [sp, #12]
 80087de:	600a      	str	r2, [r1, #0]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	e9c3 6700 	strd	r6, r7, [r3]
 80087e6:	68e3      	ldr	r3, [r4, #12]
 80087e8:	3301      	adds	r3, #1
 80087ea:	60e3      	str	r3, [r4, #12]
 80087ec:	e7d0      	b.n	8008790 <_scanf_float+0x364>
 80087ee:	9b04      	ldr	r3, [sp, #16]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d0e4      	beq.n	80087be <_scanf_float+0x392>
 80087f4:	9905      	ldr	r1, [sp, #20]
 80087f6:	230a      	movs	r3, #10
 80087f8:	3101      	adds	r1, #1
 80087fa:	4640      	mov	r0, r8
 80087fc:	f002 fca4 	bl	800b148 <_strtol_r>
 8008800:	9b04      	ldr	r3, [sp, #16]
 8008802:	9e05      	ldr	r6, [sp, #20]
 8008804:	1ac2      	subs	r2, r0, r3
 8008806:	e7d0      	b.n	80087aa <_scanf_float+0x37e>
 8008808:	f011 0f04 	tst.w	r1, #4
 800880c:	9903      	ldr	r1, [sp, #12]
 800880e:	600a      	str	r2, [r1, #0]
 8008810:	d1e6      	bne.n	80087e0 <_scanf_float+0x3b4>
 8008812:	681d      	ldr	r5, [r3, #0]
 8008814:	4632      	mov	r2, r6
 8008816:	463b      	mov	r3, r7
 8008818:	4630      	mov	r0, r6
 800881a:	4639      	mov	r1, r7
 800881c:	f7f8 f986 	bl	8000b2c <__aeabi_dcmpun>
 8008820:	b128      	cbz	r0, 800882e <_scanf_float+0x402>
 8008822:	4808      	ldr	r0, [pc, #32]	@ (8008844 <_scanf_float+0x418>)
 8008824:	f000 fa04 	bl	8008c30 <nanf>
 8008828:	ed85 0a00 	vstr	s0, [r5]
 800882c:	e7db      	b.n	80087e6 <_scanf_float+0x3ba>
 800882e:	4630      	mov	r0, r6
 8008830:	4639      	mov	r1, r7
 8008832:	f7f8 f9d9 	bl	8000be8 <__aeabi_d2f>
 8008836:	6028      	str	r0, [r5, #0]
 8008838:	e7d5      	b.n	80087e6 <_scanf_float+0x3ba>
 800883a:	2700      	movs	r7, #0
 800883c:	e62e      	b.n	800849c <_scanf_float+0x70>
 800883e:	bf00      	nop
 8008840:	0800d27a 	.word	0x0800d27a
 8008844:	0800d3d6 	.word	0x0800d3d6

08008848 <std>:
 8008848:	2300      	movs	r3, #0
 800884a:	b510      	push	{r4, lr}
 800884c:	4604      	mov	r4, r0
 800884e:	e9c0 3300 	strd	r3, r3, [r0]
 8008852:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008856:	6083      	str	r3, [r0, #8]
 8008858:	8181      	strh	r1, [r0, #12]
 800885a:	6643      	str	r3, [r0, #100]	@ 0x64
 800885c:	81c2      	strh	r2, [r0, #14]
 800885e:	6183      	str	r3, [r0, #24]
 8008860:	4619      	mov	r1, r3
 8008862:	2208      	movs	r2, #8
 8008864:	305c      	adds	r0, #92	@ 0x5c
 8008866:	f000 f954 	bl	8008b12 <memset>
 800886a:	4b0d      	ldr	r3, [pc, #52]	@ (80088a0 <std+0x58>)
 800886c:	6263      	str	r3, [r4, #36]	@ 0x24
 800886e:	4b0d      	ldr	r3, [pc, #52]	@ (80088a4 <std+0x5c>)
 8008870:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008872:	4b0d      	ldr	r3, [pc, #52]	@ (80088a8 <std+0x60>)
 8008874:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008876:	4b0d      	ldr	r3, [pc, #52]	@ (80088ac <std+0x64>)
 8008878:	6323      	str	r3, [r4, #48]	@ 0x30
 800887a:	4b0d      	ldr	r3, [pc, #52]	@ (80088b0 <std+0x68>)
 800887c:	6224      	str	r4, [r4, #32]
 800887e:	429c      	cmp	r4, r3
 8008880:	d006      	beq.n	8008890 <std+0x48>
 8008882:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008886:	4294      	cmp	r4, r2
 8008888:	d002      	beq.n	8008890 <std+0x48>
 800888a:	33d0      	adds	r3, #208	@ 0xd0
 800888c:	429c      	cmp	r4, r3
 800888e:	d105      	bne.n	800889c <std+0x54>
 8008890:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008898:	f000 b9b8 	b.w	8008c0c <__retarget_lock_init_recursive>
 800889c:	bd10      	pop	{r4, pc}
 800889e:	bf00      	nop
 80088a0:	08008a69 	.word	0x08008a69
 80088a4:	08008a8f 	.word	0x08008a8f
 80088a8:	08008ac7 	.word	0x08008ac7
 80088ac:	08008aeb 	.word	0x08008aeb
 80088b0:	20000ecc 	.word	0x20000ecc

080088b4 <stdio_exit_handler>:
 80088b4:	4a02      	ldr	r2, [pc, #8]	@ (80088c0 <stdio_exit_handler+0xc>)
 80088b6:	4903      	ldr	r1, [pc, #12]	@ (80088c4 <stdio_exit_handler+0x10>)
 80088b8:	4803      	ldr	r0, [pc, #12]	@ (80088c8 <stdio_exit_handler+0x14>)
 80088ba:	f000 b869 	b.w	8008990 <_fwalk_sglue>
 80088be:	bf00      	nop
 80088c0:	20000028 	.word	0x20000028
 80088c4:	0800bb41 	.word	0x0800bb41
 80088c8:	20000038 	.word	0x20000038

080088cc <cleanup_stdio>:
 80088cc:	6841      	ldr	r1, [r0, #4]
 80088ce:	4b0c      	ldr	r3, [pc, #48]	@ (8008900 <cleanup_stdio+0x34>)
 80088d0:	4299      	cmp	r1, r3
 80088d2:	b510      	push	{r4, lr}
 80088d4:	4604      	mov	r4, r0
 80088d6:	d001      	beq.n	80088dc <cleanup_stdio+0x10>
 80088d8:	f003 f932 	bl	800bb40 <_fflush_r>
 80088dc:	68a1      	ldr	r1, [r4, #8]
 80088de:	4b09      	ldr	r3, [pc, #36]	@ (8008904 <cleanup_stdio+0x38>)
 80088e0:	4299      	cmp	r1, r3
 80088e2:	d002      	beq.n	80088ea <cleanup_stdio+0x1e>
 80088e4:	4620      	mov	r0, r4
 80088e6:	f003 f92b 	bl	800bb40 <_fflush_r>
 80088ea:	68e1      	ldr	r1, [r4, #12]
 80088ec:	4b06      	ldr	r3, [pc, #24]	@ (8008908 <cleanup_stdio+0x3c>)
 80088ee:	4299      	cmp	r1, r3
 80088f0:	d004      	beq.n	80088fc <cleanup_stdio+0x30>
 80088f2:	4620      	mov	r0, r4
 80088f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088f8:	f003 b922 	b.w	800bb40 <_fflush_r>
 80088fc:	bd10      	pop	{r4, pc}
 80088fe:	bf00      	nop
 8008900:	20000ecc 	.word	0x20000ecc
 8008904:	20000f34 	.word	0x20000f34
 8008908:	20000f9c 	.word	0x20000f9c

0800890c <global_stdio_init.part.0>:
 800890c:	b510      	push	{r4, lr}
 800890e:	4b0b      	ldr	r3, [pc, #44]	@ (800893c <global_stdio_init.part.0+0x30>)
 8008910:	4c0b      	ldr	r4, [pc, #44]	@ (8008940 <global_stdio_init.part.0+0x34>)
 8008912:	4a0c      	ldr	r2, [pc, #48]	@ (8008944 <global_stdio_init.part.0+0x38>)
 8008914:	601a      	str	r2, [r3, #0]
 8008916:	4620      	mov	r0, r4
 8008918:	2200      	movs	r2, #0
 800891a:	2104      	movs	r1, #4
 800891c:	f7ff ff94 	bl	8008848 <std>
 8008920:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008924:	2201      	movs	r2, #1
 8008926:	2109      	movs	r1, #9
 8008928:	f7ff ff8e 	bl	8008848 <std>
 800892c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008930:	2202      	movs	r2, #2
 8008932:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008936:	2112      	movs	r1, #18
 8008938:	f7ff bf86 	b.w	8008848 <std>
 800893c:	20001004 	.word	0x20001004
 8008940:	20000ecc 	.word	0x20000ecc
 8008944:	080088b5 	.word	0x080088b5

08008948 <__sfp_lock_acquire>:
 8008948:	4801      	ldr	r0, [pc, #4]	@ (8008950 <__sfp_lock_acquire+0x8>)
 800894a:	f000 b960 	b.w	8008c0e <__retarget_lock_acquire_recursive>
 800894e:	bf00      	nop
 8008950:	2000100d 	.word	0x2000100d

08008954 <__sfp_lock_release>:
 8008954:	4801      	ldr	r0, [pc, #4]	@ (800895c <__sfp_lock_release+0x8>)
 8008956:	f000 b95b 	b.w	8008c10 <__retarget_lock_release_recursive>
 800895a:	bf00      	nop
 800895c:	2000100d 	.word	0x2000100d

08008960 <__sinit>:
 8008960:	b510      	push	{r4, lr}
 8008962:	4604      	mov	r4, r0
 8008964:	f7ff fff0 	bl	8008948 <__sfp_lock_acquire>
 8008968:	6a23      	ldr	r3, [r4, #32]
 800896a:	b11b      	cbz	r3, 8008974 <__sinit+0x14>
 800896c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008970:	f7ff bff0 	b.w	8008954 <__sfp_lock_release>
 8008974:	4b04      	ldr	r3, [pc, #16]	@ (8008988 <__sinit+0x28>)
 8008976:	6223      	str	r3, [r4, #32]
 8008978:	4b04      	ldr	r3, [pc, #16]	@ (800898c <__sinit+0x2c>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d1f5      	bne.n	800896c <__sinit+0xc>
 8008980:	f7ff ffc4 	bl	800890c <global_stdio_init.part.0>
 8008984:	e7f2      	b.n	800896c <__sinit+0xc>
 8008986:	bf00      	nop
 8008988:	080088cd 	.word	0x080088cd
 800898c:	20001004 	.word	0x20001004

08008990 <_fwalk_sglue>:
 8008990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008994:	4607      	mov	r7, r0
 8008996:	4688      	mov	r8, r1
 8008998:	4614      	mov	r4, r2
 800899a:	2600      	movs	r6, #0
 800899c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80089a0:	f1b9 0901 	subs.w	r9, r9, #1
 80089a4:	d505      	bpl.n	80089b2 <_fwalk_sglue+0x22>
 80089a6:	6824      	ldr	r4, [r4, #0]
 80089a8:	2c00      	cmp	r4, #0
 80089aa:	d1f7      	bne.n	800899c <_fwalk_sglue+0xc>
 80089ac:	4630      	mov	r0, r6
 80089ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089b2:	89ab      	ldrh	r3, [r5, #12]
 80089b4:	2b01      	cmp	r3, #1
 80089b6:	d907      	bls.n	80089c8 <_fwalk_sglue+0x38>
 80089b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80089bc:	3301      	adds	r3, #1
 80089be:	d003      	beq.n	80089c8 <_fwalk_sglue+0x38>
 80089c0:	4629      	mov	r1, r5
 80089c2:	4638      	mov	r0, r7
 80089c4:	47c0      	blx	r8
 80089c6:	4306      	orrs	r6, r0
 80089c8:	3568      	adds	r5, #104	@ 0x68
 80089ca:	e7e9      	b.n	80089a0 <_fwalk_sglue+0x10>

080089cc <siprintf>:
 80089cc:	b40e      	push	{r1, r2, r3}
 80089ce:	b510      	push	{r4, lr}
 80089d0:	b09d      	sub	sp, #116	@ 0x74
 80089d2:	ab1f      	add	r3, sp, #124	@ 0x7c
 80089d4:	9002      	str	r0, [sp, #8]
 80089d6:	9006      	str	r0, [sp, #24]
 80089d8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80089dc:	480a      	ldr	r0, [pc, #40]	@ (8008a08 <siprintf+0x3c>)
 80089de:	9107      	str	r1, [sp, #28]
 80089e0:	9104      	str	r1, [sp, #16]
 80089e2:	490a      	ldr	r1, [pc, #40]	@ (8008a0c <siprintf+0x40>)
 80089e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80089e8:	9105      	str	r1, [sp, #20]
 80089ea:	2400      	movs	r4, #0
 80089ec:	a902      	add	r1, sp, #8
 80089ee:	6800      	ldr	r0, [r0, #0]
 80089f0:	9301      	str	r3, [sp, #4]
 80089f2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80089f4:	f002 fc06 	bl	800b204 <_svfiprintf_r>
 80089f8:	9b02      	ldr	r3, [sp, #8]
 80089fa:	701c      	strb	r4, [r3, #0]
 80089fc:	b01d      	add	sp, #116	@ 0x74
 80089fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a02:	b003      	add	sp, #12
 8008a04:	4770      	bx	lr
 8008a06:	bf00      	nop
 8008a08:	20000034 	.word	0x20000034
 8008a0c:	ffff0208 	.word	0xffff0208

08008a10 <siscanf>:
 8008a10:	b40e      	push	{r1, r2, r3}
 8008a12:	b570      	push	{r4, r5, r6, lr}
 8008a14:	b09d      	sub	sp, #116	@ 0x74
 8008a16:	ac21      	add	r4, sp, #132	@ 0x84
 8008a18:	2500      	movs	r5, #0
 8008a1a:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8008a1e:	f854 6b04 	ldr.w	r6, [r4], #4
 8008a22:	f8ad 2014 	strh.w	r2, [sp, #20]
 8008a26:	951b      	str	r5, [sp, #108]	@ 0x6c
 8008a28:	9002      	str	r0, [sp, #8]
 8008a2a:	9006      	str	r0, [sp, #24]
 8008a2c:	f7f7 fc20 	bl	8000270 <strlen>
 8008a30:	4b0b      	ldr	r3, [pc, #44]	@ (8008a60 <siscanf+0x50>)
 8008a32:	9003      	str	r0, [sp, #12]
 8008a34:	9007      	str	r0, [sp, #28]
 8008a36:	480b      	ldr	r0, [pc, #44]	@ (8008a64 <siscanf+0x54>)
 8008a38:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008a3a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008a3e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008a42:	4632      	mov	r2, r6
 8008a44:	4623      	mov	r3, r4
 8008a46:	a902      	add	r1, sp, #8
 8008a48:	6800      	ldr	r0, [r0, #0]
 8008a4a:	950f      	str	r5, [sp, #60]	@ 0x3c
 8008a4c:	9514      	str	r5, [sp, #80]	@ 0x50
 8008a4e:	9401      	str	r4, [sp, #4]
 8008a50:	f002 fd2e 	bl	800b4b0 <__ssvfiscanf_r>
 8008a54:	b01d      	add	sp, #116	@ 0x74
 8008a56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008a5a:	b003      	add	sp, #12
 8008a5c:	4770      	bx	lr
 8008a5e:	bf00      	nop
 8008a60:	08008a8b 	.word	0x08008a8b
 8008a64:	20000034 	.word	0x20000034

08008a68 <__sread>:
 8008a68:	b510      	push	{r4, lr}
 8008a6a:	460c      	mov	r4, r1
 8008a6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a70:	f000 f87e 	bl	8008b70 <_read_r>
 8008a74:	2800      	cmp	r0, #0
 8008a76:	bfab      	itete	ge
 8008a78:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008a7a:	89a3      	ldrhlt	r3, [r4, #12]
 8008a7c:	181b      	addge	r3, r3, r0
 8008a7e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008a82:	bfac      	ite	ge
 8008a84:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008a86:	81a3      	strhlt	r3, [r4, #12]
 8008a88:	bd10      	pop	{r4, pc}

08008a8a <__seofread>:
 8008a8a:	2000      	movs	r0, #0
 8008a8c:	4770      	bx	lr

08008a8e <__swrite>:
 8008a8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a92:	461f      	mov	r7, r3
 8008a94:	898b      	ldrh	r3, [r1, #12]
 8008a96:	05db      	lsls	r3, r3, #23
 8008a98:	4605      	mov	r5, r0
 8008a9a:	460c      	mov	r4, r1
 8008a9c:	4616      	mov	r6, r2
 8008a9e:	d505      	bpl.n	8008aac <__swrite+0x1e>
 8008aa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008aa4:	2302      	movs	r3, #2
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	f000 f850 	bl	8008b4c <_lseek_r>
 8008aac:	89a3      	ldrh	r3, [r4, #12]
 8008aae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ab2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008ab6:	81a3      	strh	r3, [r4, #12]
 8008ab8:	4632      	mov	r2, r6
 8008aba:	463b      	mov	r3, r7
 8008abc:	4628      	mov	r0, r5
 8008abe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ac2:	f000 b867 	b.w	8008b94 <_write_r>

08008ac6 <__sseek>:
 8008ac6:	b510      	push	{r4, lr}
 8008ac8:	460c      	mov	r4, r1
 8008aca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ace:	f000 f83d 	bl	8008b4c <_lseek_r>
 8008ad2:	1c43      	adds	r3, r0, #1
 8008ad4:	89a3      	ldrh	r3, [r4, #12]
 8008ad6:	bf15      	itete	ne
 8008ad8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008ada:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008ade:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008ae2:	81a3      	strheq	r3, [r4, #12]
 8008ae4:	bf18      	it	ne
 8008ae6:	81a3      	strhne	r3, [r4, #12]
 8008ae8:	bd10      	pop	{r4, pc}

08008aea <__sclose>:
 8008aea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008aee:	f000 b81d 	b.w	8008b2c <_close_r>

08008af2 <memcmp>:
 8008af2:	b510      	push	{r4, lr}
 8008af4:	3901      	subs	r1, #1
 8008af6:	4402      	add	r2, r0
 8008af8:	4290      	cmp	r0, r2
 8008afa:	d101      	bne.n	8008b00 <memcmp+0xe>
 8008afc:	2000      	movs	r0, #0
 8008afe:	e005      	b.n	8008b0c <memcmp+0x1a>
 8008b00:	7803      	ldrb	r3, [r0, #0]
 8008b02:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008b06:	42a3      	cmp	r3, r4
 8008b08:	d001      	beq.n	8008b0e <memcmp+0x1c>
 8008b0a:	1b18      	subs	r0, r3, r4
 8008b0c:	bd10      	pop	{r4, pc}
 8008b0e:	3001      	adds	r0, #1
 8008b10:	e7f2      	b.n	8008af8 <memcmp+0x6>

08008b12 <memset>:
 8008b12:	4402      	add	r2, r0
 8008b14:	4603      	mov	r3, r0
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d100      	bne.n	8008b1c <memset+0xa>
 8008b1a:	4770      	bx	lr
 8008b1c:	f803 1b01 	strb.w	r1, [r3], #1
 8008b20:	e7f9      	b.n	8008b16 <memset+0x4>
	...

08008b24 <_localeconv_r>:
 8008b24:	4800      	ldr	r0, [pc, #0]	@ (8008b28 <_localeconv_r+0x4>)
 8008b26:	4770      	bx	lr
 8008b28:	20000174 	.word	0x20000174

08008b2c <_close_r>:
 8008b2c:	b538      	push	{r3, r4, r5, lr}
 8008b2e:	4d06      	ldr	r5, [pc, #24]	@ (8008b48 <_close_r+0x1c>)
 8008b30:	2300      	movs	r3, #0
 8008b32:	4604      	mov	r4, r0
 8008b34:	4608      	mov	r0, r1
 8008b36:	602b      	str	r3, [r5, #0]
 8008b38:	f7f9 f81e 	bl	8001b78 <_close>
 8008b3c:	1c43      	adds	r3, r0, #1
 8008b3e:	d102      	bne.n	8008b46 <_close_r+0x1a>
 8008b40:	682b      	ldr	r3, [r5, #0]
 8008b42:	b103      	cbz	r3, 8008b46 <_close_r+0x1a>
 8008b44:	6023      	str	r3, [r4, #0]
 8008b46:	bd38      	pop	{r3, r4, r5, pc}
 8008b48:	20001008 	.word	0x20001008

08008b4c <_lseek_r>:
 8008b4c:	b538      	push	{r3, r4, r5, lr}
 8008b4e:	4d07      	ldr	r5, [pc, #28]	@ (8008b6c <_lseek_r+0x20>)
 8008b50:	4604      	mov	r4, r0
 8008b52:	4608      	mov	r0, r1
 8008b54:	4611      	mov	r1, r2
 8008b56:	2200      	movs	r2, #0
 8008b58:	602a      	str	r2, [r5, #0]
 8008b5a:	461a      	mov	r2, r3
 8008b5c:	f7f9 f833 	bl	8001bc6 <_lseek>
 8008b60:	1c43      	adds	r3, r0, #1
 8008b62:	d102      	bne.n	8008b6a <_lseek_r+0x1e>
 8008b64:	682b      	ldr	r3, [r5, #0]
 8008b66:	b103      	cbz	r3, 8008b6a <_lseek_r+0x1e>
 8008b68:	6023      	str	r3, [r4, #0]
 8008b6a:	bd38      	pop	{r3, r4, r5, pc}
 8008b6c:	20001008 	.word	0x20001008

08008b70 <_read_r>:
 8008b70:	b538      	push	{r3, r4, r5, lr}
 8008b72:	4d07      	ldr	r5, [pc, #28]	@ (8008b90 <_read_r+0x20>)
 8008b74:	4604      	mov	r4, r0
 8008b76:	4608      	mov	r0, r1
 8008b78:	4611      	mov	r1, r2
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	602a      	str	r2, [r5, #0]
 8008b7e:	461a      	mov	r2, r3
 8008b80:	f7f8 ffc1 	bl	8001b06 <_read>
 8008b84:	1c43      	adds	r3, r0, #1
 8008b86:	d102      	bne.n	8008b8e <_read_r+0x1e>
 8008b88:	682b      	ldr	r3, [r5, #0]
 8008b8a:	b103      	cbz	r3, 8008b8e <_read_r+0x1e>
 8008b8c:	6023      	str	r3, [r4, #0]
 8008b8e:	bd38      	pop	{r3, r4, r5, pc}
 8008b90:	20001008 	.word	0x20001008

08008b94 <_write_r>:
 8008b94:	b538      	push	{r3, r4, r5, lr}
 8008b96:	4d07      	ldr	r5, [pc, #28]	@ (8008bb4 <_write_r+0x20>)
 8008b98:	4604      	mov	r4, r0
 8008b9a:	4608      	mov	r0, r1
 8008b9c:	4611      	mov	r1, r2
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	602a      	str	r2, [r5, #0]
 8008ba2:	461a      	mov	r2, r3
 8008ba4:	f7f8 ffcc 	bl	8001b40 <_write>
 8008ba8:	1c43      	adds	r3, r0, #1
 8008baa:	d102      	bne.n	8008bb2 <_write_r+0x1e>
 8008bac:	682b      	ldr	r3, [r5, #0]
 8008bae:	b103      	cbz	r3, 8008bb2 <_write_r+0x1e>
 8008bb0:	6023      	str	r3, [r4, #0]
 8008bb2:	bd38      	pop	{r3, r4, r5, pc}
 8008bb4:	20001008 	.word	0x20001008

08008bb8 <__errno>:
 8008bb8:	4b01      	ldr	r3, [pc, #4]	@ (8008bc0 <__errno+0x8>)
 8008bba:	6818      	ldr	r0, [r3, #0]
 8008bbc:	4770      	bx	lr
 8008bbe:	bf00      	nop
 8008bc0:	20000034 	.word	0x20000034

08008bc4 <__libc_init_array>:
 8008bc4:	b570      	push	{r4, r5, r6, lr}
 8008bc6:	4d0d      	ldr	r5, [pc, #52]	@ (8008bfc <__libc_init_array+0x38>)
 8008bc8:	4c0d      	ldr	r4, [pc, #52]	@ (8008c00 <__libc_init_array+0x3c>)
 8008bca:	1b64      	subs	r4, r4, r5
 8008bcc:	10a4      	asrs	r4, r4, #2
 8008bce:	2600      	movs	r6, #0
 8008bd0:	42a6      	cmp	r6, r4
 8008bd2:	d109      	bne.n	8008be8 <__libc_init_array+0x24>
 8008bd4:	4d0b      	ldr	r5, [pc, #44]	@ (8008c04 <__libc_init_array+0x40>)
 8008bd6:	4c0c      	ldr	r4, [pc, #48]	@ (8008c08 <__libc_init_array+0x44>)
 8008bd8:	f003 ff7a 	bl	800cad0 <_init>
 8008bdc:	1b64      	subs	r4, r4, r5
 8008bde:	10a4      	asrs	r4, r4, #2
 8008be0:	2600      	movs	r6, #0
 8008be2:	42a6      	cmp	r6, r4
 8008be4:	d105      	bne.n	8008bf2 <__libc_init_array+0x2e>
 8008be6:	bd70      	pop	{r4, r5, r6, pc}
 8008be8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bec:	4798      	blx	r3
 8008bee:	3601      	adds	r6, #1
 8008bf0:	e7ee      	b.n	8008bd0 <__libc_init_array+0xc>
 8008bf2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bf6:	4798      	blx	r3
 8008bf8:	3601      	adds	r6, #1
 8008bfa:	e7f2      	b.n	8008be2 <__libc_init_array+0x1e>
 8008bfc:	0800d694 	.word	0x0800d694
 8008c00:	0800d694 	.word	0x0800d694
 8008c04:	0800d694 	.word	0x0800d694
 8008c08:	0800d698 	.word	0x0800d698

08008c0c <__retarget_lock_init_recursive>:
 8008c0c:	4770      	bx	lr

08008c0e <__retarget_lock_acquire_recursive>:
 8008c0e:	4770      	bx	lr

08008c10 <__retarget_lock_release_recursive>:
 8008c10:	4770      	bx	lr

08008c12 <memcpy>:
 8008c12:	440a      	add	r2, r1
 8008c14:	4291      	cmp	r1, r2
 8008c16:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c1a:	d100      	bne.n	8008c1e <memcpy+0xc>
 8008c1c:	4770      	bx	lr
 8008c1e:	b510      	push	{r4, lr}
 8008c20:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c24:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c28:	4291      	cmp	r1, r2
 8008c2a:	d1f9      	bne.n	8008c20 <memcpy+0xe>
 8008c2c:	bd10      	pop	{r4, pc}
	...

08008c30 <nanf>:
 8008c30:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008c38 <nanf+0x8>
 8008c34:	4770      	bx	lr
 8008c36:	bf00      	nop
 8008c38:	7fc00000 	.word	0x7fc00000

08008c3c <quorem>:
 8008c3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c40:	6903      	ldr	r3, [r0, #16]
 8008c42:	690c      	ldr	r4, [r1, #16]
 8008c44:	42a3      	cmp	r3, r4
 8008c46:	4607      	mov	r7, r0
 8008c48:	db7e      	blt.n	8008d48 <quorem+0x10c>
 8008c4a:	3c01      	subs	r4, #1
 8008c4c:	f101 0814 	add.w	r8, r1, #20
 8008c50:	00a3      	lsls	r3, r4, #2
 8008c52:	f100 0514 	add.w	r5, r0, #20
 8008c56:	9300      	str	r3, [sp, #0]
 8008c58:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008c5c:	9301      	str	r3, [sp, #4]
 8008c5e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008c62:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008c66:	3301      	adds	r3, #1
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008c6e:	fbb2 f6f3 	udiv	r6, r2, r3
 8008c72:	d32e      	bcc.n	8008cd2 <quorem+0x96>
 8008c74:	f04f 0a00 	mov.w	sl, #0
 8008c78:	46c4      	mov	ip, r8
 8008c7a:	46ae      	mov	lr, r5
 8008c7c:	46d3      	mov	fp, sl
 8008c7e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008c82:	b298      	uxth	r0, r3
 8008c84:	fb06 a000 	mla	r0, r6, r0, sl
 8008c88:	0c02      	lsrs	r2, r0, #16
 8008c8a:	0c1b      	lsrs	r3, r3, #16
 8008c8c:	fb06 2303 	mla	r3, r6, r3, r2
 8008c90:	f8de 2000 	ldr.w	r2, [lr]
 8008c94:	b280      	uxth	r0, r0
 8008c96:	b292      	uxth	r2, r2
 8008c98:	1a12      	subs	r2, r2, r0
 8008c9a:	445a      	add	r2, fp
 8008c9c:	f8de 0000 	ldr.w	r0, [lr]
 8008ca0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008ca4:	b29b      	uxth	r3, r3
 8008ca6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008caa:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008cae:	b292      	uxth	r2, r2
 8008cb0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008cb4:	45e1      	cmp	r9, ip
 8008cb6:	f84e 2b04 	str.w	r2, [lr], #4
 8008cba:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008cbe:	d2de      	bcs.n	8008c7e <quorem+0x42>
 8008cc0:	9b00      	ldr	r3, [sp, #0]
 8008cc2:	58eb      	ldr	r3, [r5, r3]
 8008cc4:	b92b      	cbnz	r3, 8008cd2 <quorem+0x96>
 8008cc6:	9b01      	ldr	r3, [sp, #4]
 8008cc8:	3b04      	subs	r3, #4
 8008cca:	429d      	cmp	r5, r3
 8008ccc:	461a      	mov	r2, r3
 8008cce:	d32f      	bcc.n	8008d30 <quorem+0xf4>
 8008cd0:	613c      	str	r4, [r7, #16]
 8008cd2:	4638      	mov	r0, r7
 8008cd4:	f001 f9c8 	bl	800a068 <__mcmp>
 8008cd8:	2800      	cmp	r0, #0
 8008cda:	db25      	blt.n	8008d28 <quorem+0xec>
 8008cdc:	4629      	mov	r1, r5
 8008cde:	2000      	movs	r0, #0
 8008ce0:	f858 2b04 	ldr.w	r2, [r8], #4
 8008ce4:	f8d1 c000 	ldr.w	ip, [r1]
 8008ce8:	fa1f fe82 	uxth.w	lr, r2
 8008cec:	fa1f f38c 	uxth.w	r3, ip
 8008cf0:	eba3 030e 	sub.w	r3, r3, lr
 8008cf4:	4403      	add	r3, r0
 8008cf6:	0c12      	lsrs	r2, r2, #16
 8008cf8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008cfc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008d00:	b29b      	uxth	r3, r3
 8008d02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d06:	45c1      	cmp	r9, r8
 8008d08:	f841 3b04 	str.w	r3, [r1], #4
 8008d0c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008d10:	d2e6      	bcs.n	8008ce0 <quorem+0xa4>
 8008d12:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008d16:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008d1a:	b922      	cbnz	r2, 8008d26 <quorem+0xea>
 8008d1c:	3b04      	subs	r3, #4
 8008d1e:	429d      	cmp	r5, r3
 8008d20:	461a      	mov	r2, r3
 8008d22:	d30b      	bcc.n	8008d3c <quorem+0x100>
 8008d24:	613c      	str	r4, [r7, #16]
 8008d26:	3601      	adds	r6, #1
 8008d28:	4630      	mov	r0, r6
 8008d2a:	b003      	add	sp, #12
 8008d2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d30:	6812      	ldr	r2, [r2, #0]
 8008d32:	3b04      	subs	r3, #4
 8008d34:	2a00      	cmp	r2, #0
 8008d36:	d1cb      	bne.n	8008cd0 <quorem+0x94>
 8008d38:	3c01      	subs	r4, #1
 8008d3a:	e7c6      	b.n	8008cca <quorem+0x8e>
 8008d3c:	6812      	ldr	r2, [r2, #0]
 8008d3e:	3b04      	subs	r3, #4
 8008d40:	2a00      	cmp	r2, #0
 8008d42:	d1ef      	bne.n	8008d24 <quorem+0xe8>
 8008d44:	3c01      	subs	r4, #1
 8008d46:	e7ea      	b.n	8008d1e <quorem+0xe2>
 8008d48:	2000      	movs	r0, #0
 8008d4a:	e7ee      	b.n	8008d2a <quorem+0xee>
 8008d4c:	0000      	movs	r0, r0
	...

08008d50 <_dtoa_r>:
 8008d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d54:	69c7      	ldr	r7, [r0, #28]
 8008d56:	b097      	sub	sp, #92	@ 0x5c
 8008d58:	ed8d 0b04 	vstr	d0, [sp, #16]
 8008d5c:	ec55 4b10 	vmov	r4, r5, d0
 8008d60:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8008d62:	9107      	str	r1, [sp, #28]
 8008d64:	4681      	mov	r9, r0
 8008d66:	920c      	str	r2, [sp, #48]	@ 0x30
 8008d68:	9311      	str	r3, [sp, #68]	@ 0x44
 8008d6a:	b97f      	cbnz	r7, 8008d8c <_dtoa_r+0x3c>
 8008d6c:	2010      	movs	r0, #16
 8008d6e:	f000 fe09 	bl	8009984 <malloc>
 8008d72:	4602      	mov	r2, r0
 8008d74:	f8c9 001c 	str.w	r0, [r9, #28]
 8008d78:	b920      	cbnz	r0, 8008d84 <_dtoa_r+0x34>
 8008d7a:	4ba9      	ldr	r3, [pc, #676]	@ (8009020 <_dtoa_r+0x2d0>)
 8008d7c:	21ef      	movs	r1, #239	@ 0xef
 8008d7e:	48a9      	ldr	r0, [pc, #676]	@ (8009024 <_dtoa_r+0x2d4>)
 8008d80:	f002 ffbe 	bl	800bd00 <__assert_func>
 8008d84:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008d88:	6007      	str	r7, [r0, #0]
 8008d8a:	60c7      	str	r7, [r0, #12]
 8008d8c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008d90:	6819      	ldr	r1, [r3, #0]
 8008d92:	b159      	cbz	r1, 8008dac <_dtoa_r+0x5c>
 8008d94:	685a      	ldr	r2, [r3, #4]
 8008d96:	604a      	str	r2, [r1, #4]
 8008d98:	2301      	movs	r3, #1
 8008d9a:	4093      	lsls	r3, r2
 8008d9c:	608b      	str	r3, [r1, #8]
 8008d9e:	4648      	mov	r0, r9
 8008da0:	f000 fee6 	bl	8009b70 <_Bfree>
 8008da4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008da8:	2200      	movs	r2, #0
 8008daa:	601a      	str	r2, [r3, #0]
 8008dac:	1e2b      	subs	r3, r5, #0
 8008dae:	bfb9      	ittee	lt
 8008db0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008db4:	9305      	strlt	r3, [sp, #20]
 8008db6:	2300      	movge	r3, #0
 8008db8:	6033      	strge	r3, [r6, #0]
 8008dba:	9f05      	ldr	r7, [sp, #20]
 8008dbc:	4b9a      	ldr	r3, [pc, #616]	@ (8009028 <_dtoa_r+0x2d8>)
 8008dbe:	bfbc      	itt	lt
 8008dc0:	2201      	movlt	r2, #1
 8008dc2:	6032      	strlt	r2, [r6, #0]
 8008dc4:	43bb      	bics	r3, r7
 8008dc6:	d112      	bne.n	8008dee <_dtoa_r+0x9e>
 8008dc8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008dca:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008dce:	6013      	str	r3, [r2, #0]
 8008dd0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008dd4:	4323      	orrs	r3, r4
 8008dd6:	f000 855a 	beq.w	800988e <_dtoa_r+0xb3e>
 8008dda:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008ddc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800903c <_dtoa_r+0x2ec>
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	f000 855c 	beq.w	800989e <_dtoa_r+0xb4e>
 8008de6:	f10a 0303 	add.w	r3, sl, #3
 8008dea:	f000 bd56 	b.w	800989a <_dtoa_r+0xb4a>
 8008dee:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008df2:	2200      	movs	r2, #0
 8008df4:	ec51 0b17 	vmov	r0, r1, d7
 8008df8:	2300      	movs	r3, #0
 8008dfa:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8008dfe:	f7f7 fe63 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e02:	4680      	mov	r8, r0
 8008e04:	b158      	cbz	r0, 8008e1e <_dtoa_r+0xce>
 8008e06:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008e08:	2301      	movs	r3, #1
 8008e0a:	6013      	str	r3, [r2, #0]
 8008e0c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008e0e:	b113      	cbz	r3, 8008e16 <_dtoa_r+0xc6>
 8008e10:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008e12:	4b86      	ldr	r3, [pc, #536]	@ (800902c <_dtoa_r+0x2dc>)
 8008e14:	6013      	str	r3, [r2, #0]
 8008e16:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8009040 <_dtoa_r+0x2f0>
 8008e1a:	f000 bd40 	b.w	800989e <_dtoa_r+0xb4e>
 8008e1e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8008e22:	aa14      	add	r2, sp, #80	@ 0x50
 8008e24:	a915      	add	r1, sp, #84	@ 0x54
 8008e26:	4648      	mov	r0, r9
 8008e28:	f001 fa3e 	bl	800a2a8 <__d2b>
 8008e2c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008e30:	9002      	str	r0, [sp, #8]
 8008e32:	2e00      	cmp	r6, #0
 8008e34:	d078      	beq.n	8008f28 <_dtoa_r+0x1d8>
 8008e36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008e38:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8008e3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008e40:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008e44:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008e48:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008e4c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008e50:	4619      	mov	r1, r3
 8008e52:	2200      	movs	r2, #0
 8008e54:	4b76      	ldr	r3, [pc, #472]	@ (8009030 <_dtoa_r+0x2e0>)
 8008e56:	f7f7 fa17 	bl	8000288 <__aeabi_dsub>
 8008e5a:	a36b      	add	r3, pc, #428	@ (adr r3, 8009008 <_dtoa_r+0x2b8>)
 8008e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e60:	f7f7 fbca 	bl	80005f8 <__aeabi_dmul>
 8008e64:	a36a      	add	r3, pc, #424	@ (adr r3, 8009010 <_dtoa_r+0x2c0>)
 8008e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e6a:	f7f7 fa0f 	bl	800028c <__adddf3>
 8008e6e:	4604      	mov	r4, r0
 8008e70:	4630      	mov	r0, r6
 8008e72:	460d      	mov	r5, r1
 8008e74:	f7f7 fb56 	bl	8000524 <__aeabi_i2d>
 8008e78:	a367      	add	r3, pc, #412	@ (adr r3, 8009018 <_dtoa_r+0x2c8>)
 8008e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e7e:	f7f7 fbbb 	bl	80005f8 <__aeabi_dmul>
 8008e82:	4602      	mov	r2, r0
 8008e84:	460b      	mov	r3, r1
 8008e86:	4620      	mov	r0, r4
 8008e88:	4629      	mov	r1, r5
 8008e8a:	f7f7 f9ff 	bl	800028c <__adddf3>
 8008e8e:	4604      	mov	r4, r0
 8008e90:	460d      	mov	r5, r1
 8008e92:	f7f7 fe61 	bl	8000b58 <__aeabi_d2iz>
 8008e96:	2200      	movs	r2, #0
 8008e98:	4607      	mov	r7, r0
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	4620      	mov	r0, r4
 8008e9e:	4629      	mov	r1, r5
 8008ea0:	f7f7 fe1c 	bl	8000adc <__aeabi_dcmplt>
 8008ea4:	b140      	cbz	r0, 8008eb8 <_dtoa_r+0x168>
 8008ea6:	4638      	mov	r0, r7
 8008ea8:	f7f7 fb3c 	bl	8000524 <__aeabi_i2d>
 8008eac:	4622      	mov	r2, r4
 8008eae:	462b      	mov	r3, r5
 8008eb0:	f7f7 fe0a 	bl	8000ac8 <__aeabi_dcmpeq>
 8008eb4:	b900      	cbnz	r0, 8008eb8 <_dtoa_r+0x168>
 8008eb6:	3f01      	subs	r7, #1
 8008eb8:	2f16      	cmp	r7, #22
 8008eba:	d852      	bhi.n	8008f62 <_dtoa_r+0x212>
 8008ebc:	4b5d      	ldr	r3, [pc, #372]	@ (8009034 <_dtoa_r+0x2e4>)
 8008ebe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008eca:	f7f7 fe07 	bl	8000adc <__aeabi_dcmplt>
 8008ece:	2800      	cmp	r0, #0
 8008ed0:	d049      	beq.n	8008f66 <_dtoa_r+0x216>
 8008ed2:	3f01      	subs	r7, #1
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	9310      	str	r3, [sp, #64]	@ 0x40
 8008ed8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008eda:	1b9b      	subs	r3, r3, r6
 8008edc:	1e5a      	subs	r2, r3, #1
 8008ede:	bf45      	ittet	mi
 8008ee0:	f1c3 0301 	rsbmi	r3, r3, #1
 8008ee4:	9300      	strmi	r3, [sp, #0]
 8008ee6:	2300      	movpl	r3, #0
 8008ee8:	2300      	movmi	r3, #0
 8008eea:	9206      	str	r2, [sp, #24]
 8008eec:	bf54      	ite	pl
 8008eee:	9300      	strpl	r3, [sp, #0]
 8008ef0:	9306      	strmi	r3, [sp, #24]
 8008ef2:	2f00      	cmp	r7, #0
 8008ef4:	db39      	blt.n	8008f6a <_dtoa_r+0x21a>
 8008ef6:	9b06      	ldr	r3, [sp, #24]
 8008ef8:	970d      	str	r7, [sp, #52]	@ 0x34
 8008efa:	443b      	add	r3, r7
 8008efc:	9306      	str	r3, [sp, #24]
 8008efe:	2300      	movs	r3, #0
 8008f00:	9308      	str	r3, [sp, #32]
 8008f02:	9b07      	ldr	r3, [sp, #28]
 8008f04:	2b09      	cmp	r3, #9
 8008f06:	d863      	bhi.n	8008fd0 <_dtoa_r+0x280>
 8008f08:	2b05      	cmp	r3, #5
 8008f0a:	bfc4      	itt	gt
 8008f0c:	3b04      	subgt	r3, #4
 8008f0e:	9307      	strgt	r3, [sp, #28]
 8008f10:	9b07      	ldr	r3, [sp, #28]
 8008f12:	f1a3 0302 	sub.w	r3, r3, #2
 8008f16:	bfcc      	ite	gt
 8008f18:	2400      	movgt	r4, #0
 8008f1a:	2401      	movle	r4, #1
 8008f1c:	2b03      	cmp	r3, #3
 8008f1e:	d863      	bhi.n	8008fe8 <_dtoa_r+0x298>
 8008f20:	e8df f003 	tbb	[pc, r3]
 8008f24:	2b375452 	.word	0x2b375452
 8008f28:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8008f2c:	441e      	add	r6, r3
 8008f2e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008f32:	2b20      	cmp	r3, #32
 8008f34:	bfc1      	itttt	gt
 8008f36:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008f3a:	409f      	lslgt	r7, r3
 8008f3c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008f40:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008f44:	bfd6      	itet	le
 8008f46:	f1c3 0320 	rsble	r3, r3, #32
 8008f4a:	ea47 0003 	orrgt.w	r0, r7, r3
 8008f4e:	fa04 f003 	lslle.w	r0, r4, r3
 8008f52:	f7f7 fad7 	bl	8000504 <__aeabi_ui2d>
 8008f56:	2201      	movs	r2, #1
 8008f58:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008f5c:	3e01      	subs	r6, #1
 8008f5e:	9212      	str	r2, [sp, #72]	@ 0x48
 8008f60:	e776      	b.n	8008e50 <_dtoa_r+0x100>
 8008f62:	2301      	movs	r3, #1
 8008f64:	e7b7      	b.n	8008ed6 <_dtoa_r+0x186>
 8008f66:	9010      	str	r0, [sp, #64]	@ 0x40
 8008f68:	e7b6      	b.n	8008ed8 <_dtoa_r+0x188>
 8008f6a:	9b00      	ldr	r3, [sp, #0]
 8008f6c:	1bdb      	subs	r3, r3, r7
 8008f6e:	9300      	str	r3, [sp, #0]
 8008f70:	427b      	negs	r3, r7
 8008f72:	9308      	str	r3, [sp, #32]
 8008f74:	2300      	movs	r3, #0
 8008f76:	930d      	str	r3, [sp, #52]	@ 0x34
 8008f78:	e7c3      	b.n	8008f02 <_dtoa_r+0x1b2>
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f7e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008f80:	eb07 0b03 	add.w	fp, r7, r3
 8008f84:	f10b 0301 	add.w	r3, fp, #1
 8008f88:	2b01      	cmp	r3, #1
 8008f8a:	9303      	str	r3, [sp, #12]
 8008f8c:	bfb8      	it	lt
 8008f8e:	2301      	movlt	r3, #1
 8008f90:	e006      	b.n	8008fa0 <_dtoa_r+0x250>
 8008f92:	2301      	movs	r3, #1
 8008f94:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f96:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	dd28      	ble.n	8008fee <_dtoa_r+0x29e>
 8008f9c:	469b      	mov	fp, r3
 8008f9e:	9303      	str	r3, [sp, #12]
 8008fa0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8008fa4:	2100      	movs	r1, #0
 8008fa6:	2204      	movs	r2, #4
 8008fa8:	f102 0514 	add.w	r5, r2, #20
 8008fac:	429d      	cmp	r5, r3
 8008fae:	d926      	bls.n	8008ffe <_dtoa_r+0x2ae>
 8008fb0:	6041      	str	r1, [r0, #4]
 8008fb2:	4648      	mov	r0, r9
 8008fb4:	f000 fd9c 	bl	8009af0 <_Balloc>
 8008fb8:	4682      	mov	sl, r0
 8008fba:	2800      	cmp	r0, #0
 8008fbc:	d142      	bne.n	8009044 <_dtoa_r+0x2f4>
 8008fbe:	4b1e      	ldr	r3, [pc, #120]	@ (8009038 <_dtoa_r+0x2e8>)
 8008fc0:	4602      	mov	r2, r0
 8008fc2:	f240 11af 	movw	r1, #431	@ 0x1af
 8008fc6:	e6da      	b.n	8008d7e <_dtoa_r+0x2e>
 8008fc8:	2300      	movs	r3, #0
 8008fca:	e7e3      	b.n	8008f94 <_dtoa_r+0x244>
 8008fcc:	2300      	movs	r3, #0
 8008fce:	e7d5      	b.n	8008f7c <_dtoa_r+0x22c>
 8008fd0:	2401      	movs	r4, #1
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	9307      	str	r3, [sp, #28]
 8008fd6:	9409      	str	r4, [sp, #36]	@ 0x24
 8008fd8:	f04f 3bff 	mov.w	fp, #4294967295
 8008fdc:	2200      	movs	r2, #0
 8008fde:	f8cd b00c 	str.w	fp, [sp, #12]
 8008fe2:	2312      	movs	r3, #18
 8008fe4:	920c      	str	r2, [sp, #48]	@ 0x30
 8008fe6:	e7db      	b.n	8008fa0 <_dtoa_r+0x250>
 8008fe8:	2301      	movs	r3, #1
 8008fea:	9309      	str	r3, [sp, #36]	@ 0x24
 8008fec:	e7f4      	b.n	8008fd8 <_dtoa_r+0x288>
 8008fee:	f04f 0b01 	mov.w	fp, #1
 8008ff2:	f8cd b00c 	str.w	fp, [sp, #12]
 8008ff6:	465b      	mov	r3, fp
 8008ff8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8008ffc:	e7d0      	b.n	8008fa0 <_dtoa_r+0x250>
 8008ffe:	3101      	adds	r1, #1
 8009000:	0052      	lsls	r2, r2, #1
 8009002:	e7d1      	b.n	8008fa8 <_dtoa_r+0x258>
 8009004:	f3af 8000 	nop.w
 8009008:	636f4361 	.word	0x636f4361
 800900c:	3fd287a7 	.word	0x3fd287a7
 8009010:	8b60c8b3 	.word	0x8b60c8b3
 8009014:	3fc68a28 	.word	0x3fc68a28
 8009018:	509f79fb 	.word	0x509f79fb
 800901c:	3fd34413 	.word	0x3fd34413
 8009020:	0800d28c 	.word	0x0800d28c
 8009024:	0800d2a3 	.word	0x0800d2a3
 8009028:	7ff00000 	.word	0x7ff00000
 800902c:	0800d38f 	.word	0x0800d38f
 8009030:	3ff80000 	.word	0x3ff80000
 8009034:	0800d470 	.word	0x0800d470
 8009038:	0800d2fb 	.word	0x0800d2fb
 800903c:	0800d288 	.word	0x0800d288
 8009040:	0800d38e 	.word	0x0800d38e
 8009044:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009048:	6018      	str	r0, [r3, #0]
 800904a:	9b03      	ldr	r3, [sp, #12]
 800904c:	2b0e      	cmp	r3, #14
 800904e:	f200 80a1 	bhi.w	8009194 <_dtoa_r+0x444>
 8009052:	2c00      	cmp	r4, #0
 8009054:	f000 809e 	beq.w	8009194 <_dtoa_r+0x444>
 8009058:	2f00      	cmp	r7, #0
 800905a:	dd33      	ble.n	80090c4 <_dtoa_r+0x374>
 800905c:	4b9c      	ldr	r3, [pc, #624]	@ (80092d0 <_dtoa_r+0x580>)
 800905e:	f007 020f 	and.w	r2, r7, #15
 8009062:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009066:	ed93 7b00 	vldr	d7, [r3]
 800906a:	05f8      	lsls	r0, r7, #23
 800906c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8009070:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009074:	d516      	bpl.n	80090a4 <_dtoa_r+0x354>
 8009076:	4b97      	ldr	r3, [pc, #604]	@ (80092d4 <_dtoa_r+0x584>)
 8009078:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800907c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009080:	f7f7 fbe4 	bl	800084c <__aeabi_ddiv>
 8009084:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009088:	f004 040f 	and.w	r4, r4, #15
 800908c:	2603      	movs	r6, #3
 800908e:	4d91      	ldr	r5, [pc, #580]	@ (80092d4 <_dtoa_r+0x584>)
 8009090:	b954      	cbnz	r4, 80090a8 <_dtoa_r+0x358>
 8009092:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009096:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800909a:	f7f7 fbd7 	bl	800084c <__aeabi_ddiv>
 800909e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80090a2:	e028      	b.n	80090f6 <_dtoa_r+0x3a6>
 80090a4:	2602      	movs	r6, #2
 80090a6:	e7f2      	b.n	800908e <_dtoa_r+0x33e>
 80090a8:	07e1      	lsls	r1, r4, #31
 80090aa:	d508      	bpl.n	80090be <_dtoa_r+0x36e>
 80090ac:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80090b0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80090b4:	f7f7 faa0 	bl	80005f8 <__aeabi_dmul>
 80090b8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80090bc:	3601      	adds	r6, #1
 80090be:	1064      	asrs	r4, r4, #1
 80090c0:	3508      	adds	r5, #8
 80090c2:	e7e5      	b.n	8009090 <_dtoa_r+0x340>
 80090c4:	f000 80af 	beq.w	8009226 <_dtoa_r+0x4d6>
 80090c8:	427c      	negs	r4, r7
 80090ca:	4b81      	ldr	r3, [pc, #516]	@ (80092d0 <_dtoa_r+0x580>)
 80090cc:	4d81      	ldr	r5, [pc, #516]	@ (80092d4 <_dtoa_r+0x584>)
 80090ce:	f004 020f 	and.w	r2, r4, #15
 80090d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80090d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090da:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80090de:	f7f7 fa8b 	bl	80005f8 <__aeabi_dmul>
 80090e2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80090e6:	1124      	asrs	r4, r4, #4
 80090e8:	2300      	movs	r3, #0
 80090ea:	2602      	movs	r6, #2
 80090ec:	2c00      	cmp	r4, #0
 80090ee:	f040 808f 	bne.w	8009210 <_dtoa_r+0x4c0>
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d1d3      	bne.n	800909e <_dtoa_r+0x34e>
 80090f6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80090f8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	f000 8094 	beq.w	800922a <_dtoa_r+0x4da>
 8009102:	4b75      	ldr	r3, [pc, #468]	@ (80092d8 <_dtoa_r+0x588>)
 8009104:	2200      	movs	r2, #0
 8009106:	4620      	mov	r0, r4
 8009108:	4629      	mov	r1, r5
 800910a:	f7f7 fce7 	bl	8000adc <__aeabi_dcmplt>
 800910e:	2800      	cmp	r0, #0
 8009110:	f000 808b 	beq.w	800922a <_dtoa_r+0x4da>
 8009114:	9b03      	ldr	r3, [sp, #12]
 8009116:	2b00      	cmp	r3, #0
 8009118:	f000 8087 	beq.w	800922a <_dtoa_r+0x4da>
 800911c:	f1bb 0f00 	cmp.w	fp, #0
 8009120:	dd34      	ble.n	800918c <_dtoa_r+0x43c>
 8009122:	4620      	mov	r0, r4
 8009124:	4b6d      	ldr	r3, [pc, #436]	@ (80092dc <_dtoa_r+0x58c>)
 8009126:	2200      	movs	r2, #0
 8009128:	4629      	mov	r1, r5
 800912a:	f7f7 fa65 	bl	80005f8 <__aeabi_dmul>
 800912e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009132:	f107 38ff 	add.w	r8, r7, #4294967295
 8009136:	3601      	adds	r6, #1
 8009138:	465c      	mov	r4, fp
 800913a:	4630      	mov	r0, r6
 800913c:	f7f7 f9f2 	bl	8000524 <__aeabi_i2d>
 8009140:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009144:	f7f7 fa58 	bl	80005f8 <__aeabi_dmul>
 8009148:	4b65      	ldr	r3, [pc, #404]	@ (80092e0 <_dtoa_r+0x590>)
 800914a:	2200      	movs	r2, #0
 800914c:	f7f7 f89e 	bl	800028c <__adddf3>
 8009150:	4605      	mov	r5, r0
 8009152:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009156:	2c00      	cmp	r4, #0
 8009158:	d16a      	bne.n	8009230 <_dtoa_r+0x4e0>
 800915a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800915e:	4b61      	ldr	r3, [pc, #388]	@ (80092e4 <_dtoa_r+0x594>)
 8009160:	2200      	movs	r2, #0
 8009162:	f7f7 f891 	bl	8000288 <__aeabi_dsub>
 8009166:	4602      	mov	r2, r0
 8009168:	460b      	mov	r3, r1
 800916a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800916e:	462a      	mov	r2, r5
 8009170:	4633      	mov	r3, r6
 8009172:	f7f7 fcd1 	bl	8000b18 <__aeabi_dcmpgt>
 8009176:	2800      	cmp	r0, #0
 8009178:	f040 8298 	bne.w	80096ac <_dtoa_r+0x95c>
 800917c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009180:	462a      	mov	r2, r5
 8009182:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009186:	f7f7 fca9 	bl	8000adc <__aeabi_dcmplt>
 800918a:	bb38      	cbnz	r0, 80091dc <_dtoa_r+0x48c>
 800918c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8009190:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009194:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009196:	2b00      	cmp	r3, #0
 8009198:	f2c0 8157 	blt.w	800944a <_dtoa_r+0x6fa>
 800919c:	2f0e      	cmp	r7, #14
 800919e:	f300 8154 	bgt.w	800944a <_dtoa_r+0x6fa>
 80091a2:	4b4b      	ldr	r3, [pc, #300]	@ (80092d0 <_dtoa_r+0x580>)
 80091a4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80091a8:	ed93 7b00 	vldr	d7, [r3]
 80091ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	ed8d 7b00 	vstr	d7, [sp]
 80091b4:	f280 80e5 	bge.w	8009382 <_dtoa_r+0x632>
 80091b8:	9b03      	ldr	r3, [sp, #12]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	f300 80e1 	bgt.w	8009382 <_dtoa_r+0x632>
 80091c0:	d10c      	bne.n	80091dc <_dtoa_r+0x48c>
 80091c2:	4b48      	ldr	r3, [pc, #288]	@ (80092e4 <_dtoa_r+0x594>)
 80091c4:	2200      	movs	r2, #0
 80091c6:	ec51 0b17 	vmov	r0, r1, d7
 80091ca:	f7f7 fa15 	bl	80005f8 <__aeabi_dmul>
 80091ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80091d2:	f7f7 fc97 	bl	8000b04 <__aeabi_dcmpge>
 80091d6:	2800      	cmp	r0, #0
 80091d8:	f000 8266 	beq.w	80096a8 <_dtoa_r+0x958>
 80091dc:	2400      	movs	r4, #0
 80091de:	4625      	mov	r5, r4
 80091e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80091e2:	4656      	mov	r6, sl
 80091e4:	ea6f 0803 	mvn.w	r8, r3
 80091e8:	2700      	movs	r7, #0
 80091ea:	4621      	mov	r1, r4
 80091ec:	4648      	mov	r0, r9
 80091ee:	f000 fcbf 	bl	8009b70 <_Bfree>
 80091f2:	2d00      	cmp	r5, #0
 80091f4:	f000 80bd 	beq.w	8009372 <_dtoa_r+0x622>
 80091f8:	b12f      	cbz	r7, 8009206 <_dtoa_r+0x4b6>
 80091fa:	42af      	cmp	r7, r5
 80091fc:	d003      	beq.n	8009206 <_dtoa_r+0x4b6>
 80091fe:	4639      	mov	r1, r7
 8009200:	4648      	mov	r0, r9
 8009202:	f000 fcb5 	bl	8009b70 <_Bfree>
 8009206:	4629      	mov	r1, r5
 8009208:	4648      	mov	r0, r9
 800920a:	f000 fcb1 	bl	8009b70 <_Bfree>
 800920e:	e0b0      	b.n	8009372 <_dtoa_r+0x622>
 8009210:	07e2      	lsls	r2, r4, #31
 8009212:	d505      	bpl.n	8009220 <_dtoa_r+0x4d0>
 8009214:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009218:	f7f7 f9ee 	bl	80005f8 <__aeabi_dmul>
 800921c:	3601      	adds	r6, #1
 800921e:	2301      	movs	r3, #1
 8009220:	1064      	asrs	r4, r4, #1
 8009222:	3508      	adds	r5, #8
 8009224:	e762      	b.n	80090ec <_dtoa_r+0x39c>
 8009226:	2602      	movs	r6, #2
 8009228:	e765      	b.n	80090f6 <_dtoa_r+0x3a6>
 800922a:	9c03      	ldr	r4, [sp, #12]
 800922c:	46b8      	mov	r8, r7
 800922e:	e784      	b.n	800913a <_dtoa_r+0x3ea>
 8009230:	4b27      	ldr	r3, [pc, #156]	@ (80092d0 <_dtoa_r+0x580>)
 8009232:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009234:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009238:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800923c:	4454      	add	r4, sl
 800923e:	2900      	cmp	r1, #0
 8009240:	d054      	beq.n	80092ec <_dtoa_r+0x59c>
 8009242:	4929      	ldr	r1, [pc, #164]	@ (80092e8 <_dtoa_r+0x598>)
 8009244:	2000      	movs	r0, #0
 8009246:	f7f7 fb01 	bl	800084c <__aeabi_ddiv>
 800924a:	4633      	mov	r3, r6
 800924c:	462a      	mov	r2, r5
 800924e:	f7f7 f81b 	bl	8000288 <__aeabi_dsub>
 8009252:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009256:	4656      	mov	r6, sl
 8009258:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800925c:	f7f7 fc7c 	bl	8000b58 <__aeabi_d2iz>
 8009260:	4605      	mov	r5, r0
 8009262:	f7f7 f95f 	bl	8000524 <__aeabi_i2d>
 8009266:	4602      	mov	r2, r0
 8009268:	460b      	mov	r3, r1
 800926a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800926e:	f7f7 f80b 	bl	8000288 <__aeabi_dsub>
 8009272:	3530      	adds	r5, #48	@ 0x30
 8009274:	4602      	mov	r2, r0
 8009276:	460b      	mov	r3, r1
 8009278:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800927c:	f806 5b01 	strb.w	r5, [r6], #1
 8009280:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009284:	f7f7 fc2a 	bl	8000adc <__aeabi_dcmplt>
 8009288:	2800      	cmp	r0, #0
 800928a:	d172      	bne.n	8009372 <_dtoa_r+0x622>
 800928c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009290:	4911      	ldr	r1, [pc, #68]	@ (80092d8 <_dtoa_r+0x588>)
 8009292:	2000      	movs	r0, #0
 8009294:	f7f6 fff8 	bl	8000288 <__aeabi_dsub>
 8009298:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800929c:	f7f7 fc1e 	bl	8000adc <__aeabi_dcmplt>
 80092a0:	2800      	cmp	r0, #0
 80092a2:	f040 80b4 	bne.w	800940e <_dtoa_r+0x6be>
 80092a6:	42a6      	cmp	r6, r4
 80092a8:	f43f af70 	beq.w	800918c <_dtoa_r+0x43c>
 80092ac:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80092b0:	4b0a      	ldr	r3, [pc, #40]	@ (80092dc <_dtoa_r+0x58c>)
 80092b2:	2200      	movs	r2, #0
 80092b4:	f7f7 f9a0 	bl	80005f8 <__aeabi_dmul>
 80092b8:	4b08      	ldr	r3, [pc, #32]	@ (80092dc <_dtoa_r+0x58c>)
 80092ba:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80092be:	2200      	movs	r2, #0
 80092c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80092c4:	f7f7 f998 	bl	80005f8 <__aeabi_dmul>
 80092c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80092cc:	e7c4      	b.n	8009258 <_dtoa_r+0x508>
 80092ce:	bf00      	nop
 80092d0:	0800d470 	.word	0x0800d470
 80092d4:	0800d448 	.word	0x0800d448
 80092d8:	3ff00000 	.word	0x3ff00000
 80092dc:	40240000 	.word	0x40240000
 80092e0:	401c0000 	.word	0x401c0000
 80092e4:	40140000 	.word	0x40140000
 80092e8:	3fe00000 	.word	0x3fe00000
 80092ec:	4631      	mov	r1, r6
 80092ee:	4628      	mov	r0, r5
 80092f0:	f7f7 f982 	bl	80005f8 <__aeabi_dmul>
 80092f4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80092f8:	9413      	str	r4, [sp, #76]	@ 0x4c
 80092fa:	4656      	mov	r6, sl
 80092fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009300:	f7f7 fc2a 	bl	8000b58 <__aeabi_d2iz>
 8009304:	4605      	mov	r5, r0
 8009306:	f7f7 f90d 	bl	8000524 <__aeabi_i2d>
 800930a:	4602      	mov	r2, r0
 800930c:	460b      	mov	r3, r1
 800930e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009312:	f7f6 ffb9 	bl	8000288 <__aeabi_dsub>
 8009316:	3530      	adds	r5, #48	@ 0x30
 8009318:	f806 5b01 	strb.w	r5, [r6], #1
 800931c:	4602      	mov	r2, r0
 800931e:	460b      	mov	r3, r1
 8009320:	42a6      	cmp	r6, r4
 8009322:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009326:	f04f 0200 	mov.w	r2, #0
 800932a:	d124      	bne.n	8009376 <_dtoa_r+0x626>
 800932c:	4baf      	ldr	r3, [pc, #700]	@ (80095ec <_dtoa_r+0x89c>)
 800932e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009332:	f7f6 ffab 	bl	800028c <__adddf3>
 8009336:	4602      	mov	r2, r0
 8009338:	460b      	mov	r3, r1
 800933a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800933e:	f7f7 fbeb 	bl	8000b18 <__aeabi_dcmpgt>
 8009342:	2800      	cmp	r0, #0
 8009344:	d163      	bne.n	800940e <_dtoa_r+0x6be>
 8009346:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800934a:	49a8      	ldr	r1, [pc, #672]	@ (80095ec <_dtoa_r+0x89c>)
 800934c:	2000      	movs	r0, #0
 800934e:	f7f6 ff9b 	bl	8000288 <__aeabi_dsub>
 8009352:	4602      	mov	r2, r0
 8009354:	460b      	mov	r3, r1
 8009356:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800935a:	f7f7 fbbf 	bl	8000adc <__aeabi_dcmplt>
 800935e:	2800      	cmp	r0, #0
 8009360:	f43f af14 	beq.w	800918c <_dtoa_r+0x43c>
 8009364:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8009366:	1e73      	subs	r3, r6, #1
 8009368:	9313      	str	r3, [sp, #76]	@ 0x4c
 800936a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800936e:	2b30      	cmp	r3, #48	@ 0x30
 8009370:	d0f8      	beq.n	8009364 <_dtoa_r+0x614>
 8009372:	4647      	mov	r7, r8
 8009374:	e03b      	b.n	80093ee <_dtoa_r+0x69e>
 8009376:	4b9e      	ldr	r3, [pc, #632]	@ (80095f0 <_dtoa_r+0x8a0>)
 8009378:	f7f7 f93e 	bl	80005f8 <__aeabi_dmul>
 800937c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009380:	e7bc      	b.n	80092fc <_dtoa_r+0x5ac>
 8009382:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009386:	4656      	mov	r6, sl
 8009388:	e9dd 2300 	ldrd	r2, r3, [sp]
 800938c:	4620      	mov	r0, r4
 800938e:	4629      	mov	r1, r5
 8009390:	f7f7 fa5c 	bl	800084c <__aeabi_ddiv>
 8009394:	f7f7 fbe0 	bl	8000b58 <__aeabi_d2iz>
 8009398:	4680      	mov	r8, r0
 800939a:	f7f7 f8c3 	bl	8000524 <__aeabi_i2d>
 800939e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80093a2:	f7f7 f929 	bl	80005f8 <__aeabi_dmul>
 80093a6:	4602      	mov	r2, r0
 80093a8:	460b      	mov	r3, r1
 80093aa:	4620      	mov	r0, r4
 80093ac:	4629      	mov	r1, r5
 80093ae:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80093b2:	f7f6 ff69 	bl	8000288 <__aeabi_dsub>
 80093b6:	f806 4b01 	strb.w	r4, [r6], #1
 80093ba:	9d03      	ldr	r5, [sp, #12]
 80093bc:	eba6 040a 	sub.w	r4, r6, sl
 80093c0:	42a5      	cmp	r5, r4
 80093c2:	4602      	mov	r2, r0
 80093c4:	460b      	mov	r3, r1
 80093c6:	d133      	bne.n	8009430 <_dtoa_r+0x6e0>
 80093c8:	f7f6 ff60 	bl	800028c <__adddf3>
 80093cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80093d0:	4604      	mov	r4, r0
 80093d2:	460d      	mov	r5, r1
 80093d4:	f7f7 fba0 	bl	8000b18 <__aeabi_dcmpgt>
 80093d8:	b9c0      	cbnz	r0, 800940c <_dtoa_r+0x6bc>
 80093da:	e9dd 2300 	ldrd	r2, r3, [sp]
 80093de:	4620      	mov	r0, r4
 80093e0:	4629      	mov	r1, r5
 80093e2:	f7f7 fb71 	bl	8000ac8 <__aeabi_dcmpeq>
 80093e6:	b110      	cbz	r0, 80093ee <_dtoa_r+0x69e>
 80093e8:	f018 0f01 	tst.w	r8, #1
 80093ec:	d10e      	bne.n	800940c <_dtoa_r+0x6bc>
 80093ee:	9902      	ldr	r1, [sp, #8]
 80093f0:	4648      	mov	r0, r9
 80093f2:	f000 fbbd 	bl	8009b70 <_Bfree>
 80093f6:	2300      	movs	r3, #0
 80093f8:	7033      	strb	r3, [r6, #0]
 80093fa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80093fc:	3701      	adds	r7, #1
 80093fe:	601f      	str	r7, [r3, #0]
 8009400:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009402:	2b00      	cmp	r3, #0
 8009404:	f000 824b 	beq.w	800989e <_dtoa_r+0xb4e>
 8009408:	601e      	str	r6, [r3, #0]
 800940a:	e248      	b.n	800989e <_dtoa_r+0xb4e>
 800940c:	46b8      	mov	r8, r7
 800940e:	4633      	mov	r3, r6
 8009410:	461e      	mov	r6, r3
 8009412:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009416:	2a39      	cmp	r2, #57	@ 0x39
 8009418:	d106      	bne.n	8009428 <_dtoa_r+0x6d8>
 800941a:	459a      	cmp	sl, r3
 800941c:	d1f8      	bne.n	8009410 <_dtoa_r+0x6c0>
 800941e:	2230      	movs	r2, #48	@ 0x30
 8009420:	f108 0801 	add.w	r8, r8, #1
 8009424:	f88a 2000 	strb.w	r2, [sl]
 8009428:	781a      	ldrb	r2, [r3, #0]
 800942a:	3201      	adds	r2, #1
 800942c:	701a      	strb	r2, [r3, #0]
 800942e:	e7a0      	b.n	8009372 <_dtoa_r+0x622>
 8009430:	4b6f      	ldr	r3, [pc, #444]	@ (80095f0 <_dtoa_r+0x8a0>)
 8009432:	2200      	movs	r2, #0
 8009434:	f7f7 f8e0 	bl	80005f8 <__aeabi_dmul>
 8009438:	2200      	movs	r2, #0
 800943a:	2300      	movs	r3, #0
 800943c:	4604      	mov	r4, r0
 800943e:	460d      	mov	r5, r1
 8009440:	f7f7 fb42 	bl	8000ac8 <__aeabi_dcmpeq>
 8009444:	2800      	cmp	r0, #0
 8009446:	d09f      	beq.n	8009388 <_dtoa_r+0x638>
 8009448:	e7d1      	b.n	80093ee <_dtoa_r+0x69e>
 800944a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800944c:	2a00      	cmp	r2, #0
 800944e:	f000 80ea 	beq.w	8009626 <_dtoa_r+0x8d6>
 8009452:	9a07      	ldr	r2, [sp, #28]
 8009454:	2a01      	cmp	r2, #1
 8009456:	f300 80cd 	bgt.w	80095f4 <_dtoa_r+0x8a4>
 800945a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800945c:	2a00      	cmp	r2, #0
 800945e:	f000 80c1 	beq.w	80095e4 <_dtoa_r+0x894>
 8009462:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009466:	9c08      	ldr	r4, [sp, #32]
 8009468:	9e00      	ldr	r6, [sp, #0]
 800946a:	9a00      	ldr	r2, [sp, #0]
 800946c:	441a      	add	r2, r3
 800946e:	9200      	str	r2, [sp, #0]
 8009470:	9a06      	ldr	r2, [sp, #24]
 8009472:	2101      	movs	r1, #1
 8009474:	441a      	add	r2, r3
 8009476:	4648      	mov	r0, r9
 8009478:	9206      	str	r2, [sp, #24]
 800947a:	f000 fc77 	bl	8009d6c <__i2b>
 800947e:	4605      	mov	r5, r0
 8009480:	b166      	cbz	r6, 800949c <_dtoa_r+0x74c>
 8009482:	9b06      	ldr	r3, [sp, #24]
 8009484:	2b00      	cmp	r3, #0
 8009486:	dd09      	ble.n	800949c <_dtoa_r+0x74c>
 8009488:	42b3      	cmp	r3, r6
 800948a:	9a00      	ldr	r2, [sp, #0]
 800948c:	bfa8      	it	ge
 800948e:	4633      	movge	r3, r6
 8009490:	1ad2      	subs	r2, r2, r3
 8009492:	9200      	str	r2, [sp, #0]
 8009494:	9a06      	ldr	r2, [sp, #24]
 8009496:	1af6      	subs	r6, r6, r3
 8009498:	1ad3      	subs	r3, r2, r3
 800949a:	9306      	str	r3, [sp, #24]
 800949c:	9b08      	ldr	r3, [sp, #32]
 800949e:	b30b      	cbz	r3, 80094e4 <_dtoa_r+0x794>
 80094a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	f000 80c6 	beq.w	8009634 <_dtoa_r+0x8e4>
 80094a8:	2c00      	cmp	r4, #0
 80094aa:	f000 80c0 	beq.w	800962e <_dtoa_r+0x8de>
 80094ae:	4629      	mov	r1, r5
 80094b0:	4622      	mov	r2, r4
 80094b2:	4648      	mov	r0, r9
 80094b4:	f000 fd12 	bl	8009edc <__pow5mult>
 80094b8:	9a02      	ldr	r2, [sp, #8]
 80094ba:	4601      	mov	r1, r0
 80094bc:	4605      	mov	r5, r0
 80094be:	4648      	mov	r0, r9
 80094c0:	f000 fc6a 	bl	8009d98 <__multiply>
 80094c4:	9902      	ldr	r1, [sp, #8]
 80094c6:	4680      	mov	r8, r0
 80094c8:	4648      	mov	r0, r9
 80094ca:	f000 fb51 	bl	8009b70 <_Bfree>
 80094ce:	9b08      	ldr	r3, [sp, #32]
 80094d0:	1b1b      	subs	r3, r3, r4
 80094d2:	9308      	str	r3, [sp, #32]
 80094d4:	f000 80b1 	beq.w	800963a <_dtoa_r+0x8ea>
 80094d8:	9a08      	ldr	r2, [sp, #32]
 80094da:	4641      	mov	r1, r8
 80094dc:	4648      	mov	r0, r9
 80094de:	f000 fcfd 	bl	8009edc <__pow5mult>
 80094e2:	9002      	str	r0, [sp, #8]
 80094e4:	2101      	movs	r1, #1
 80094e6:	4648      	mov	r0, r9
 80094e8:	f000 fc40 	bl	8009d6c <__i2b>
 80094ec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80094ee:	4604      	mov	r4, r0
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	f000 81d8 	beq.w	80098a6 <_dtoa_r+0xb56>
 80094f6:	461a      	mov	r2, r3
 80094f8:	4601      	mov	r1, r0
 80094fa:	4648      	mov	r0, r9
 80094fc:	f000 fcee 	bl	8009edc <__pow5mult>
 8009500:	9b07      	ldr	r3, [sp, #28]
 8009502:	2b01      	cmp	r3, #1
 8009504:	4604      	mov	r4, r0
 8009506:	f300 809f 	bgt.w	8009648 <_dtoa_r+0x8f8>
 800950a:	9b04      	ldr	r3, [sp, #16]
 800950c:	2b00      	cmp	r3, #0
 800950e:	f040 8097 	bne.w	8009640 <_dtoa_r+0x8f0>
 8009512:	9b05      	ldr	r3, [sp, #20]
 8009514:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009518:	2b00      	cmp	r3, #0
 800951a:	f040 8093 	bne.w	8009644 <_dtoa_r+0x8f4>
 800951e:	9b05      	ldr	r3, [sp, #20]
 8009520:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009524:	0d1b      	lsrs	r3, r3, #20
 8009526:	051b      	lsls	r3, r3, #20
 8009528:	b133      	cbz	r3, 8009538 <_dtoa_r+0x7e8>
 800952a:	9b00      	ldr	r3, [sp, #0]
 800952c:	3301      	adds	r3, #1
 800952e:	9300      	str	r3, [sp, #0]
 8009530:	9b06      	ldr	r3, [sp, #24]
 8009532:	3301      	adds	r3, #1
 8009534:	9306      	str	r3, [sp, #24]
 8009536:	2301      	movs	r3, #1
 8009538:	9308      	str	r3, [sp, #32]
 800953a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800953c:	2b00      	cmp	r3, #0
 800953e:	f000 81b8 	beq.w	80098b2 <_dtoa_r+0xb62>
 8009542:	6923      	ldr	r3, [r4, #16]
 8009544:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009548:	6918      	ldr	r0, [r3, #16]
 800954a:	f000 fbc3 	bl	8009cd4 <__hi0bits>
 800954e:	f1c0 0020 	rsb	r0, r0, #32
 8009552:	9b06      	ldr	r3, [sp, #24]
 8009554:	4418      	add	r0, r3
 8009556:	f010 001f 	ands.w	r0, r0, #31
 800955a:	f000 8082 	beq.w	8009662 <_dtoa_r+0x912>
 800955e:	f1c0 0320 	rsb	r3, r0, #32
 8009562:	2b04      	cmp	r3, #4
 8009564:	dd73      	ble.n	800964e <_dtoa_r+0x8fe>
 8009566:	9b00      	ldr	r3, [sp, #0]
 8009568:	f1c0 001c 	rsb	r0, r0, #28
 800956c:	4403      	add	r3, r0
 800956e:	9300      	str	r3, [sp, #0]
 8009570:	9b06      	ldr	r3, [sp, #24]
 8009572:	4403      	add	r3, r0
 8009574:	4406      	add	r6, r0
 8009576:	9306      	str	r3, [sp, #24]
 8009578:	9b00      	ldr	r3, [sp, #0]
 800957a:	2b00      	cmp	r3, #0
 800957c:	dd05      	ble.n	800958a <_dtoa_r+0x83a>
 800957e:	9902      	ldr	r1, [sp, #8]
 8009580:	461a      	mov	r2, r3
 8009582:	4648      	mov	r0, r9
 8009584:	f000 fd04 	bl	8009f90 <__lshift>
 8009588:	9002      	str	r0, [sp, #8]
 800958a:	9b06      	ldr	r3, [sp, #24]
 800958c:	2b00      	cmp	r3, #0
 800958e:	dd05      	ble.n	800959c <_dtoa_r+0x84c>
 8009590:	4621      	mov	r1, r4
 8009592:	461a      	mov	r2, r3
 8009594:	4648      	mov	r0, r9
 8009596:	f000 fcfb 	bl	8009f90 <__lshift>
 800959a:	4604      	mov	r4, r0
 800959c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d061      	beq.n	8009666 <_dtoa_r+0x916>
 80095a2:	9802      	ldr	r0, [sp, #8]
 80095a4:	4621      	mov	r1, r4
 80095a6:	f000 fd5f 	bl	800a068 <__mcmp>
 80095aa:	2800      	cmp	r0, #0
 80095ac:	da5b      	bge.n	8009666 <_dtoa_r+0x916>
 80095ae:	2300      	movs	r3, #0
 80095b0:	9902      	ldr	r1, [sp, #8]
 80095b2:	220a      	movs	r2, #10
 80095b4:	4648      	mov	r0, r9
 80095b6:	f000 fafd 	bl	8009bb4 <__multadd>
 80095ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095bc:	9002      	str	r0, [sp, #8]
 80095be:	f107 38ff 	add.w	r8, r7, #4294967295
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	f000 8177 	beq.w	80098b6 <_dtoa_r+0xb66>
 80095c8:	4629      	mov	r1, r5
 80095ca:	2300      	movs	r3, #0
 80095cc:	220a      	movs	r2, #10
 80095ce:	4648      	mov	r0, r9
 80095d0:	f000 faf0 	bl	8009bb4 <__multadd>
 80095d4:	f1bb 0f00 	cmp.w	fp, #0
 80095d8:	4605      	mov	r5, r0
 80095da:	dc6f      	bgt.n	80096bc <_dtoa_r+0x96c>
 80095dc:	9b07      	ldr	r3, [sp, #28]
 80095de:	2b02      	cmp	r3, #2
 80095e0:	dc49      	bgt.n	8009676 <_dtoa_r+0x926>
 80095e2:	e06b      	b.n	80096bc <_dtoa_r+0x96c>
 80095e4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80095e6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80095ea:	e73c      	b.n	8009466 <_dtoa_r+0x716>
 80095ec:	3fe00000 	.word	0x3fe00000
 80095f0:	40240000 	.word	0x40240000
 80095f4:	9b03      	ldr	r3, [sp, #12]
 80095f6:	1e5c      	subs	r4, r3, #1
 80095f8:	9b08      	ldr	r3, [sp, #32]
 80095fa:	42a3      	cmp	r3, r4
 80095fc:	db09      	blt.n	8009612 <_dtoa_r+0x8c2>
 80095fe:	1b1c      	subs	r4, r3, r4
 8009600:	9b03      	ldr	r3, [sp, #12]
 8009602:	2b00      	cmp	r3, #0
 8009604:	f6bf af30 	bge.w	8009468 <_dtoa_r+0x718>
 8009608:	9b00      	ldr	r3, [sp, #0]
 800960a:	9a03      	ldr	r2, [sp, #12]
 800960c:	1a9e      	subs	r6, r3, r2
 800960e:	2300      	movs	r3, #0
 8009610:	e72b      	b.n	800946a <_dtoa_r+0x71a>
 8009612:	9b08      	ldr	r3, [sp, #32]
 8009614:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009616:	9408      	str	r4, [sp, #32]
 8009618:	1ae3      	subs	r3, r4, r3
 800961a:	441a      	add	r2, r3
 800961c:	9e00      	ldr	r6, [sp, #0]
 800961e:	9b03      	ldr	r3, [sp, #12]
 8009620:	920d      	str	r2, [sp, #52]	@ 0x34
 8009622:	2400      	movs	r4, #0
 8009624:	e721      	b.n	800946a <_dtoa_r+0x71a>
 8009626:	9c08      	ldr	r4, [sp, #32]
 8009628:	9e00      	ldr	r6, [sp, #0]
 800962a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800962c:	e728      	b.n	8009480 <_dtoa_r+0x730>
 800962e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8009632:	e751      	b.n	80094d8 <_dtoa_r+0x788>
 8009634:	9a08      	ldr	r2, [sp, #32]
 8009636:	9902      	ldr	r1, [sp, #8]
 8009638:	e750      	b.n	80094dc <_dtoa_r+0x78c>
 800963a:	f8cd 8008 	str.w	r8, [sp, #8]
 800963e:	e751      	b.n	80094e4 <_dtoa_r+0x794>
 8009640:	2300      	movs	r3, #0
 8009642:	e779      	b.n	8009538 <_dtoa_r+0x7e8>
 8009644:	9b04      	ldr	r3, [sp, #16]
 8009646:	e777      	b.n	8009538 <_dtoa_r+0x7e8>
 8009648:	2300      	movs	r3, #0
 800964a:	9308      	str	r3, [sp, #32]
 800964c:	e779      	b.n	8009542 <_dtoa_r+0x7f2>
 800964e:	d093      	beq.n	8009578 <_dtoa_r+0x828>
 8009650:	9a00      	ldr	r2, [sp, #0]
 8009652:	331c      	adds	r3, #28
 8009654:	441a      	add	r2, r3
 8009656:	9200      	str	r2, [sp, #0]
 8009658:	9a06      	ldr	r2, [sp, #24]
 800965a:	441a      	add	r2, r3
 800965c:	441e      	add	r6, r3
 800965e:	9206      	str	r2, [sp, #24]
 8009660:	e78a      	b.n	8009578 <_dtoa_r+0x828>
 8009662:	4603      	mov	r3, r0
 8009664:	e7f4      	b.n	8009650 <_dtoa_r+0x900>
 8009666:	9b03      	ldr	r3, [sp, #12]
 8009668:	2b00      	cmp	r3, #0
 800966a:	46b8      	mov	r8, r7
 800966c:	dc20      	bgt.n	80096b0 <_dtoa_r+0x960>
 800966e:	469b      	mov	fp, r3
 8009670:	9b07      	ldr	r3, [sp, #28]
 8009672:	2b02      	cmp	r3, #2
 8009674:	dd1e      	ble.n	80096b4 <_dtoa_r+0x964>
 8009676:	f1bb 0f00 	cmp.w	fp, #0
 800967a:	f47f adb1 	bne.w	80091e0 <_dtoa_r+0x490>
 800967e:	4621      	mov	r1, r4
 8009680:	465b      	mov	r3, fp
 8009682:	2205      	movs	r2, #5
 8009684:	4648      	mov	r0, r9
 8009686:	f000 fa95 	bl	8009bb4 <__multadd>
 800968a:	4601      	mov	r1, r0
 800968c:	4604      	mov	r4, r0
 800968e:	9802      	ldr	r0, [sp, #8]
 8009690:	f000 fcea 	bl	800a068 <__mcmp>
 8009694:	2800      	cmp	r0, #0
 8009696:	f77f ada3 	ble.w	80091e0 <_dtoa_r+0x490>
 800969a:	4656      	mov	r6, sl
 800969c:	2331      	movs	r3, #49	@ 0x31
 800969e:	f806 3b01 	strb.w	r3, [r6], #1
 80096a2:	f108 0801 	add.w	r8, r8, #1
 80096a6:	e59f      	b.n	80091e8 <_dtoa_r+0x498>
 80096a8:	9c03      	ldr	r4, [sp, #12]
 80096aa:	46b8      	mov	r8, r7
 80096ac:	4625      	mov	r5, r4
 80096ae:	e7f4      	b.n	800969a <_dtoa_r+0x94a>
 80096b0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80096b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	f000 8101 	beq.w	80098be <_dtoa_r+0xb6e>
 80096bc:	2e00      	cmp	r6, #0
 80096be:	dd05      	ble.n	80096cc <_dtoa_r+0x97c>
 80096c0:	4629      	mov	r1, r5
 80096c2:	4632      	mov	r2, r6
 80096c4:	4648      	mov	r0, r9
 80096c6:	f000 fc63 	bl	8009f90 <__lshift>
 80096ca:	4605      	mov	r5, r0
 80096cc:	9b08      	ldr	r3, [sp, #32]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d05c      	beq.n	800978c <_dtoa_r+0xa3c>
 80096d2:	6869      	ldr	r1, [r5, #4]
 80096d4:	4648      	mov	r0, r9
 80096d6:	f000 fa0b 	bl	8009af0 <_Balloc>
 80096da:	4606      	mov	r6, r0
 80096dc:	b928      	cbnz	r0, 80096ea <_dtoa_r+0x99a>
 80096de:	4b82      	ldr	r3, [pc, #520]	@ (80098e8 <_dtoa_r+0xb98>)
 80096e0:	4602      	mov	r2, r0
 80096e2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80096e6:	f7ff bb4a 	b.w	8008d7e <_dtoa_r+0x2e>
 80096ea:	692a      	ldr	r2, [r5, #16]
 80096ec:	3202      	adds	r2, #2
 80096ee:	0092      	lsls	r2, r2, #2
 80096f0:	f105 010c 	add.w	r1, r5, #12
 80096f4:	300c      	adds	r0, #12
 80096f6:	f7ff fa8c 	bl	8008c12 <memcpy>
 80096fa:	2201      	movs	r2, #1
 80096fc:	4631      	mov	r1, r6
 80096fe:	4648      	mov	r0, r9
 8009700:	f000 fc46 	bl	8009f90 <__lshift>
 8009704:	f10a 0301 	add.w	r3, sl, #1
 8009708:	9300      	str	r3, [sp, #0]
 800970a:	eb0a 030b 	add.w	r3, sl, fp
 800970e:	9308      	str	r3, [sp, #32]
 8009710:	9b04      	ldr	r3, [sp, #16]
 8009712:	f003 0301 	and.w	r3, r3, #1
 8009716:	462f      	mov	r7, r5
 8009718:	9306      	str	r3, [sp, #24]
 800971a:	4605      	mov	r5, r0
 800971c:	9b00      	ldr	r3, [sp, #0]
 800971e:	9802      	ldr	r0, [sp, #8]
 8009720:	4621      	mov	r1, r4
 8009722:	f103 3bff 	add.w	fp, r3, #4294967295
 8009726:	f7ff fa89 	bl	8008c3c <quorem>
 800972a:	4603      	mov	r3, r0
 800972c:	3330      	adds	r3, #48	@ 0x30
 800972e:	9003      	str	r0, [sp, #12]
 8009730:	4639      	mov	r1, r7
 8009732:	9802      	ldr	r0, [sp, #8]
 8009734:	9309      	str	r3, [sp, #36]	@ 0x24
 8009736:	f000 fc97 	bl	800a068 <__mcmp>
 800973a:	462a      	mov	r2, r5
 800973c:	9004      	str	r0, [sp, #16]
 800973e:	4621      	mov	r1, r4
 8009740:	4648      	mov	r0, r9
 8009742:	f000 fcad 	bl	800a0a0 <__mdiff>
 8009746:	68c2      	ldr	r2, [r0, #12]
 8009748:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800974a:	4606      	mov	r6, r0
 800974c:	bb02      	cbnz	r2, 8009790 <_dtoa_r+0xa40>
 800974e:	4601      	mov	r1, r0
 8009750:	9802      	ldr	r0, [sp, #8]
 8009752:	f000 fc89 	bl	800a068 <__mcmp>
 8009756:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009758:	4602      	mov	r2, r0
 800975a:	4631      	mov	r1, r6
 800975c:	4648      	mov	r0, r9
 800975e:	920c      	str	r2, [sp, #48]	@ 0x30
 8009760:	9309      	str	r3, [sp, #36]	@ 0x24
 8009762:	f000 fa05 	bl	8009b70 <_Bfree>
 8009766:	9b07      	ldr	r3, [sp, #28]
 8009768:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800976a:	9e00      	ldr	r6, [sp, #0]
 800976c:	ea42 0103 	orr.w	r1, r2, r3
 8009770:	9b06      	ldr	r3, [sp, #24]
 8009772:	4319      	orrs	r1, r3
 8009774:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009776:	d10d      	bne.n	8009794 <_dtoa_r+0xa44>
 8009778:	2b39      	cmp	r3, #57	@ 0x39
 800977a:	d027      	beq.n	80097cc <_dtoa_r+0xa7c>
 800977c:	9a04      	ldr	r2, [sp, #16]
 800977e:	2a00      	cmp	r2, #0
 8009780:	dd01      	ble.n	8009786 <_dtoa_r+0xa36>
 8009782:	9b03      	ldr	r3, [sp, #12]
 8009784:	3331      	adds	r3, #49	@ 0x31
 8009786:	f88b 3000 	strb.w	r3, [fp]
 800978a:	e52e      	b.n	80091ea <_dtoa_r+0x49a>
 800978c:	4628      	mov	r0, r5
 800978e:	e7b9      	b.n	8009704 <_dtoa_r+0x9b4>
 8009790:	2201      	movs	r2, #1
 8009792:	e7e2      	b.n	800975a <_dtoa_r+0xa0a>
 8009794:	9904      	ldr	r1, [sp, #16]
 8009796:	2900      	cmp	r1, #0
 8009798:	db04      	blt.n	80097a4 <_dtoa_r+0xa54>
 800979a:	9807      	ldr	r0, [sp, #28]
 800979c:	4301      	orrs	r1, r0
 800979e:	9806      	ldr	r0, [sp, #24]
 80097a0:	4301      	orrs	r1, r0
 80097a2:	d120      	bne.n	80097e6 <_dtoa_r+0xa96>
 80097a4:	2a00      	cmp	r2, #0
 80097a6:	ddee      	ble.n	8009786 <_dtoa_r+0xa36>
 80097a8:	9902      	ldr	r1, [sp, #8]
 80097aa:	9300      	str	r3, [sp, #0]
 80097ac:	2201      	movs	r2, #1
 80097ae:	4648      	mov	r0, r9
 80097b0:	f000 fbee 	bl	8009f90 <__lshift>
 80097b4:	4621      	mov	r1, r4
 80097b6:	9002      	str	r0, [sp, #8]
 80097b8:	f000 fc56 	bl	800a068 <__mcmp>
 80097bc:	2800      	cmp	r0, #0
 80097be:	9b00      	ldr	r3, [sp, #0]
 80097c0:	dc02      	bgt.n	80097c8 <_dtoa_r+0xa78>
 80097c2:	d1e0      	bne.n	8009786 <_dtoa_r+0xa36>
 80097c4:	07da      	lsls	r2, r3, #31
 80097c6:	d5de      	bpl.n	8009786 <_dtoa_r+0xa36>
 80097c8:	2b39      	cmp	r3, #57	@ 0x39
 80097ca:	d1da      	bne.n	8009782 <_dtoa_r+0xa32>
 80097cc:	2339      	movs	r3, #57	@ 0x39
 80097ce:	f88b 3000 	strb.w	r3, [fp]
 80097d2:	4633      	mov	r3, r6
 80097d4:	461e      	mov	r6, r3
 80097d6:	3b01      	subs	r3, #1
 80097d8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80097dc:	2a39      	cmp	r2, #57	@ 0x39
 80097de:	d04e      	beq.n	800987e <_dtoa_r+0xb2e>
 80097e0:	3201      	adds	r2, #1
 80097e2:	701a      	strb	r2, [r3, #0]
 80097e4:	e501      	b.n	80091ea <_dtoa_r+0x49a>
 80097e6:	2a00      	cmp	r2, #0
 80097e8:	dd03      	ble.n	80097f2 <_dtoa_r+0xaa2>
 80097ea:	2b39      	cmp	r3, #57	@ 0x39
 80097ec:	d0ee      	beq.n	80097cc <_dtoa_r+0xa7c>
 80097ee:	3301      	adds	r3, #1
 80097f0:	e7c9      	b.n	8009786 <_dtoa_r+0xa36>
 80097f2:	9a00      	ldr	r2, [sp, #0]
 80097f4:	9908      	ldr	r1, [sp, #32]
 80097f6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80097fa:	428a      	cmp	r2, r1
 80097fc:	d028      	beq.n	8009850 <_dtoa_r+0xb00>
 80097fe:	9902      	ldr	r1, [sp, #8]
 8009800:	2300      	movs	r3, #0
 8009802:	220a      	movs	r2, #10
 8009804:	4648      	mov	r0, r9
 8009806:	f000 f9d5 	bl	8009bb4 <__multadd>
 800980a:	42af      	cmp	r7, r5
 800980c:	9002      	str	r0, [sp, #8]
 800980e:	f04f 0300 	mov.w	r3, #0
 8009812:	f04f 020a 	mov.w	r2, #10
 8009816:	4639      	mov	r1, r7
 8009818:	4648      	mov	r0, r9
 800981a:	d107      	bne.n	800982c <_dtoa_r+0xadc>
 800981c:	f000 f9ca 	bl	8009bb4 <__multadd>
 8009820:	4607      	mov	r7, r0
 8009822:	4605      	mov	r5, r0
 8009824:	9b00      	ldr	r3, [sp, #0]
 8009826:	3301      	adds	r3, #1
 8009828:	9300      	str	r3, [sp, #0]
 800982a:	e777      	b.n	800971c <_dtoa_r+0x9cc>
 800982c:	f000 f9c2 	bl	8009bb4 <__multadd>
 8009830:	4629      	mov	r1, r5
 8009832:	4607      	mov	r7, r0
 8009834:	2300      	movs	r3, #0
 8009836:	220a      	movs	r2, #10
 8009838:	4648      	mov	r0, r9
 800983a:	f000 f9bb 	bl	8009bb4 <__multadd>
 800983e:	4605      	mov	r5, r0
 8009840:	e7f0      	b.n	8009824 <_dtoa_r+0xad4>
 8009842:	f1bb 0f00 	cmp.w	fp, #0
 8009846:	bfcc      	ite	gt
 8009848:	465e      	movgt	r6, fp
 800984a:	2601      	movle	r6, #1
 800984c:	4456      	add	r6, sl
 800984e:	2700      	movs	r7, #0
 8009850:	9902      	ldr	r1, [sp, #8]
 8009852:	9300      	str	r3, [sp, #0]
 8009854:	2201      	movs	r2, #1
 8009856:	4648      	mov	r0, r9
 8009858:	f000 fb9a 	bl	8009f90 <__lshift>
 800985c:	4621      	mov	r1, r4
 800985e:	9002      	str	r0, [sp, #8]
 8009860:	f000 fc02 	bl	800a068 <__mcmp>
 8009864:	2800      	cmp	r0, #0
 8009866:	dcb4      	bgt.n	80097d2 <_dtoa_r+0xa82>
 8009868:	d102      	bne.n	8009870 <_dtoa_r+0xb20>
 800986a:	9b00      	ldr	r3, [sp, #0]
 800986c:	07db      	lsls	r3, r3, #31
 800986e:	d4b0      	bmi.n	80097d2 <_dtoa_r+0xa82>
 8009870:	4633      	mov	r3, r6
 8009872:	461e      	mov	r6, r3
 8009874:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009878:	2a30      	cmp	r2, #48	@ 0x30
 800987a:	d0fa      	beq.n	8009872 <_dtoa_r+0xb22>
 800987c:	e4b5      	b.n	80091ea <_dtoa_r+0x49a>
 800987e:	459a      	cmp	sl, r3
 8009880:	d1a8      	bne.n	80097d4 <_dtoa_r+0xa84>
 8009882:	2331      	movs	r3, #49	@ 0x31
 8009884:	f108 0801 	add.w	r8, r8, #1
 8009888:	f88a 3000 	strb.w	r3, [sl]
 800988c:	e4ad      	b.n	80091ea <_dtoa_r+0x49a>
 800988e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009890:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80098ec <_dtoa_r+0xb9c>
 8009894:	b11b      	cbz	r3, 800989e <_dtoa_r+0xb4e>
 8009896:	f10a 0308 	add.w	r3, sl, #8
 800989a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800989c:	6013      	str	r3, [r2, #0]
 800989e:	4650      	mov	r0, sl
 80098a0:	b017      	add	sp, #92	@ 0x5c
 80098a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098a6:	9b07      	ldr	r3, [sp, #28]
 80098a8:	2b01      	cmp	r3, #1
 80098aa:	f77f ae2e 	ble.w	800950a <_dtoa_r+0x7ba>
 80098ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80098b0:	9308      	str	r3, [sp, #32]
 80098b2:	2001      	movs	r0, #1
 80098b4:	e64d      	b.n	8009552 <_dtoa_r+0x802>
 80098b6:	f1bb 0f00 	cmp.w	fp, #0
 80098ba:	f77f aed9 	ble.w	8009670 <_dtoa_r+0x920>
 80098be:	4656      	mov	r6, sl
 80098c0:	9802      	ldr	r0, [sp, #8]
 80098c2:	4621      	mov	r1, r4
 80098c4:	f7ff f9ba 	bl	8008c3c <quorem>
 80098c8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80098cc:	f806 3b01 	strb.w	r3, [r6], #1
 80098d0:	eba6 020a 	sub.w	r2, r6, sl
 80098d4:	4593      	cmp	fp, r2
 80098d6:	ddb4      	ble.n	8009842 <_dtoa_r+0xaf2>
 80098d8:	9902      	ldr	r1, [sp, #8]
 80098da:	2300      	movs	r3, #0
 80098dc:	220a      	movs	r2, #10
 80098de:	4648      	mov	r0, r9
 80098e0:	f000 f968 	bl	8009bb4 <__multadd>
 80098e4:	9002      	str	r0, [sp, #8]
 80098e6:	e7eb      	b.n	80098c0 <_dtoa_r+0xb70>
 80098e8:	0800d2fb 	.word	0x0800d2fb
 80098ec:	0800d27f 	.word	0x0800d27f

080098f0 <_free_r>:
 80098f0:	b538      	push	{r3, r4, r5, lr}
 80098f2:	4605      	mov	r5, r0
 80098f4:	2900      	cmp	r1, #0
 80098f6:	d041      	beq.n	800997c <_free_r+0x8c>
 80098f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098fc:	1f0c      	subs	r4, r1, #4
 80098fe:	2b00      	cmp	r3, #0
 8009900:	bfb8      	it	lt
 8009902:	18e4      	addlt	r4, r4, r3
 8009904:	f000 f8e8 	bl	8009ad8 <__malloc_lock>
 8009908:	4a1d      	ldr	r2, [pc, #116]	@ (8009980 <_free_r+0x90>)
 800990a:	6813      	ldr	r3, [r2, #0]
 800990c:	b933      	cbnz	r3, 800991c <_free_r+0x2c>
 800990e:	6063      	str	r3, [r4, #4]
 8009910:	6014      	str	r4, [r2, #0]
 8009912:	4628      	mov	r0, r5
 8009914:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009918:	f000 b8e4 	b.w	8009ae4 <__malloc_unlock>
 800991c:	42a3      	cmp	r3, r4
 800991e:	d908      	bls.n	8009932 <_free_r+0x42>
 8009920:	6820      	ldr	r0, [r4, #0]
 8009922:	1821      	adds	r1, r4, r0
 8009924:	428b      	cmp	r3, r1
 8009926:	bf01      	itttt	eq
 8009928:	6819      	ldreq	r1, [r3, #0]
 800992a:	685b      	ldreq	r3, [r3, #4]
 800992c:	1809      	addeq	r1, r1, r0
 800992e:	6021      	streq	r1, [r4, #0]
 8009930:	e7ed      	b.n	800990e <_free_r+0x1e>
 8009932:	461a      	mov	r2, r3
 8009934:	685b      	ldr	r3, [r3, #4]
 8009936:	b10b      	cbz	r3, 800993c <_free_r+0x4c>
 8009938:	42a3      	cmp	r3, r4
 800993a:	d9fa      	bls.n	8009932 <_free_r+0x42>
 800993c:	6811      	ldr	r1, [r2, #0]
 800993e:	1850      	adds	r0, r2, r1
 8009940:	42a0      	cmp	r0, r4
 8009942:	d10b      	bne.n	800995c <_free_r+0x6c>
 8009944:	6820      	ldr	r0, [r4, #0]
 8009946:	4401      	add	r1, r0
 8009948:	1850      	adds	r0, r2, r1
 800994a:	4283      	cmp	r3, r0
 800994c:	6011      	str	r1, [r2, #0]
 800994e:	d1e0      	bne.n	8009912 <_free_r+0x22>
 8009950:	6818      	ldr	r0, [r3, #0]
 8009952:	685b      	ldr	r3, [r3, #4]
 8009954:	6053      	str	r3, [r2, #4]
 8009956:	4408      	add	r0, r1
 8009958:	6010      	str	r0, [r2, #0]
 800995a:	e7da      	b.n	8009912 <_free_r+0x22>
 800995c:	d902      	bls.n	8009964 <_free_r+0x74>
 800995e:	230c      	movs	r3, #12
 8009960:	602b      	str	r3, [r5, #0]
 8009962:	e7d6      	b.n	8009912 <_free_r+0x22>
 8009964:	6820      	ldr	r0, [r4, #0]
 8009966:	1821      	adds	r1, r4, r0
 8009968:	428b      	cmp	r3, r1
 800996a:	bf04      	itt	eq
 800996c:	6819      	ldreq	r1, [r3, #0]
 800996e:	685b      	ldreq	r3, [r3, #4]
 8009970:	6063      	str	r3, [r4, #4]
 8009972:	bf04      	itt	eq
 8009974:	1809      	addeq	r1, r1, r0
 8009976:	6021      	streq	r1, [r4, #0]
 8009978:	6054      	str	r4, [r2, #4]
 800997a:	e7ca      	b.n	8009912 <_free_r+0x22>
 800997c:	bd38      	pop	{r3, r4, r5, pc}
 800997e:	bf00      	nop
 8009980:	20001014 	.word	0x20001014

08009984 <malloc>:
 8009984:	4b02      	ldr	r3, [pc, #8]	@ (8009990 <malloc+0xc>)
 8009986:	4601      	mov	r1, r0
 8009988:	6818      	ldr	r0, [r3, #0]
 800998a:	f000 b825 	b.w	80099d8 <_malloc_r>
 800998e:	bf00      	nop
 8009990:	20000034 	.word	0x20000034

08009994 <sbrk_aligned>:
 8009994:	b570      	push	{r4, r5, r6, lr}
 8009996:	4e0f      	ldr	r6, [pc, #60]	@ (80099d4 <sbrk_aligned+0x40>)
 8009998:	460c      	mov	r4, r1
 800999a:	6831      	ldr	r1, [r6, #0]
 800999c:	4605      	mov	r5, r0
 800999e:	b911      	cbnz	r1, 80099a6 <sbrk_aligned+0x12>
 80099a0:	f002 f996 	bl	800bcd0 <_sbrk_r>
 80099a4:	6030      	str	r0, [r6, #0]
 80099a6:	4621      	mov	r1, r4
 80099a8:	4628      	mov	r0, r5
 80099aa:	f002 f991 	bl	800bcd0 <_sbrk_r>
 80099ae:	1c43      	adds	r3, r0, #1
 80099b0:	d103      	bne.n	80099ba <sbrk_aligned+0x26>
 80099b2:	f04f 34ff 	mov.w	r4, #4294967295
 80099b6:	4620      	mov	r0, r4
 80099b8:	bd70      	pop	{r4, r5, r6, pc}
 80099ba:	1cc4      	adds	r4, r0, #3
 80099bc:	f024 0403 	bic.w	r4, r4, #3
 80099c0:	42a0      	cmp	r0, r4
 80099c2:	d0f8      	beq.n	80099b6 <sbrk_aligned+0x22>
 80099c4:	1a21      	subs	r1, r4, r0
 80099c6:	4628      	mov	r0, r5
 80099c8:	f002 f982 	bl	800bcd0 <_sbrk_r>
 80099cc:	3001      	adds	r0, #1
 80099ce:	d1f2      	bne.n	80099b6 <sbrk_aligned+0x22>
 80099d0:	e7ef      	b.n	80099b2 <sbrk_aligned+0x1e>
 80099d2:	bf00      	nop
 80099d4:	20001010 	.word	0x20001010

080099d8 <_malloc_r>:
 80099d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099dc:	1ccd      	adds	r5, r1, #3
 80099de:	f025 0503 	bic.w	r5, r5, #3
 80099e2:	3508      	adds	r5, #8
 80099e4:	2d0c      	cmp	r5, #12
 80099e6:	bf38      	it	cc
 80099e8:	250c      	movcc	r5, #12
 80099ea:	2d00      	cmp	r5, #0
 80099ec:	4606      	mov	r6, r0
 80099ee:	db01      	blt.n	80099f4 <_malloc_r+0x1c>
 80099f0:	42a9      	cmp	r1, r5
 80099f2:	d904      	bls.n	80099fe <_malloc_r+0x26>
 80099f4:	230c      	movs	r3, #12
 80099f6:	6033      	str	r3, [r6, #0]
 80099f8:	2000      	movs	r0, #0
 80099fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009ad4 <_malloc_r+0xfc>
 8009a02:	f000 f869 	bl	8009ad8 <__malloc_lock>
 8009a06:	f8d8 3000 	ldr.w	r3, [r8]
 8009a0a:	461c      	mov	r4, r3
 8009a0c:	bb44      	cbnz	r4, 8009a60 <_malloc_r+0x88>
 8009a0e:	4629      	mov	r1, r5
 8009a10:	4630      	mov	r0, r6
 8009a12:	f7ff ffbf 	bl	8009994 <sbrk_aligned>
 8009a16:	1c43      	adds	r3, r0, #1
 8009a18:	4604      	mov	r4, r0
 8009a1a:	d158      	bne.n	8009ace <_malloc_r+0xf6>
 8009a1c:	f8d8 4000 	ldr.w	r4, [r8]
 8009a20:	4627      	mov	r7, r4
 8009a22:	2f00      	cmp	r7, #0
 8009a24:	d143      	bne.n	8009aae <_malloc_r+0xd6>
 8009a26:	2c00      	cmp	r4, #0
 8009a28:	d04b      	beq.n	8009ac2 <_malloc_r+0xea>
 8009a2a:	6823      	ldr	r3, [r4, #0]
 8009a2c:	4639      	mov	r1, r7
 8009a2e:	4630      	mov	r0, r6
 8009a30:	eb04 0903 	add.w	r9, r4, r3
 8009a34:	f002 f94c 	bl	800bcd0 <_sbrk_r>
 8009a38:	4581      	cmp	r9, r0
 8009a3a:	d142      	bne.n	8009ac2 <_malloc_r+0xea>
 8009a3c:	6821      	ldr	r1, [r4, #0]
 8009a3e:	1a6d      	subs	r5, r5, r1
 8009a40:	4629      	mov	r1, r5
 8009a42:	4630      	mov	r0, r6
 8009a44:	f7ff ffa6 	bl	8009994 <sbrk_aligned>
 8009a48:	3001      	adds	r0, #1
 8009a4a:	d03a      	beq.n	8009ac2 <_malloc_r+0xea>
 8009a4c:	6823      	ldr	r3, [r4, #0]
 8009a4e:	442b      	add	r3, r5
 8009a50:	6023      	str	r3, [r4, #0]
 8009a52:	f8d8 3000 	ldr.w	r3, [r8]
 8009a56:	685a      	ldr	r2, [r3, #4]
 8009a58:	bb62      	cbnz	r2, 8009ab4 <_malloc_r+0xdc>
 8009a5a:	f8c8 7000 	str.w	r7, [r8]
 8009a5e:	e00f      	b.n	8009a80 <_malloc_r+0xa8>
 8009a60:	6822      	ldr	r2, [r4, #0]
 8009a62:	1b52      	subs	r2, r2, r5
 8009a64:	d420      	bmi.n	8009aa8 <_malloc_r+0xd0>
 8009a66:	2a0b      	cmp	r2, #11
 8009a68:	d917      	bls.n	8009a9a <_malloc_r+0xc2>
 8009a6a:	1961      	adds	r1, r4, r5
 8009a6c:	42a3      	cmp	r3, r4
 8009a6e:	6025      	str	r5, [r4, #0]
 8009a70:	bf18      	it	ne
 8009a72:	6059      	strne	r1, [r3, #4]
 8009a74:	6863      	ldr	r3, [r4, #4]
 8009a76:	bf08      	it	eq
 8009a78:	f8c8 1000 	streq.w	r1, [r8]
 8009a7c:	5162      	str	r2, [r4, r5]
 8009a7e:	604b      	str	r3, [r1, #4]
 8009a80:	4630      	mov	r0, r6
 8009a82:	f000 f82f 	bl	8009ae4 <__malloc_unlock>
 8009a86:	f104 000b 	add.w	r0, r4, #11
 8009a8a:	1d23      	adds	r3, r4, #4
 8009a8c:	f020 0007 	bic.w	r0, r0, #7
 8009a90:	1ac2      	subs	r2, r0, r3
 8009a92:	bf1c      	itt	ne
 8009a94:	1a1b      	subne	r3, r3, r0
 8009a96:	50a3      	strne	r3, [r4, r2]
 8009a98:	e7af      	b.n	80099fa <_malloc_r+0x22>
 8009a9a:	6862      	ldr	r2, [r4, #4]
 8009a9c:	42a3      	cmp	r3, r4
 8009a9e:	bf0c      	ite	eq
 8009aa0:	f8c8 2000 	streq.w	r2, [r8]
 8009aa4:	605a      	strne	r2, [r3, #4]
 8009aa6:	e7eb      	b.n	8009a80 <_malloc_r+0xa8>
 8009aa8:	4623      	mov	r3, r4
 8009aaa:	6864      	ldr	r4, [r4, #4]
 8009aac:	e7ae      	b.n	8009a0c <_malloc_r+0x34>
 8009aae:	463c      	mov	r4, r7
 8009ab0:	687f      	ldr	r7, [r7, #4]
 8009ab2:	e7b6      	b.n	8009a22 <_malloc_r+0x4a>
 8009ab4:	461a      	mov	r2, r3
 8009ab6:	685b      	ldr	r3, [r3, #4]
 8009ab8:	42a3      	cmp	r3, r4
 8009aba:	d1fb      	bne.n	8009ab4 <_malloc_r+0xdc>
 8009abc:	2300      	movs	r3, #0
 8009abe:	6053      	str	r3, [r2, #4]
 8009ac0:	e7de      	b.n	8009a80 <_malloc_r+0xa8>
 8009ac2:	230c      	movs	r3, #12
 8009ac4:	6033      	str	r3, [r6, #0]
 8009ac6:	4630      	mov	r0, r6
 8009ac8:	f000 f80c 	bl	8009ae4 <__malloc_unlock>
 8009acc:	e794      	b.n	80099f8 <_malloc_r+0x20>
 8009ace:	6005      	str	r5, [r0, #0]
 8009ad0:	e7d6      	b.n	8009a80 <_malloc_r+0xa8>
 8009ad2:	bf00      	nop
 8009ad4:	20001014 	.word	0x20001014

08009ad8 <__malloc_lock>:
 8009ad8:	4801      	ldr	r0, [pc, #4]	@ (8009ae0 <__malloc_lock+0x8>)
 8009ada:	f7ff b898 	b.w	8008c0e <__retarget_lock_acquire_recursive>
 8009ade:	bf00      	nop
 8009ae0:	2000100c 	.word	0x2000100c

08009ae4 <__malloc_unlock>:
 8009ae4:	4801      	ldr	r0, [pc, #4]	@ (8009aec <__malloc_unlock+0x8>)
 8009ae6:	f7ff b893 	b.w	8008c10 <__retarget_lock_release_recursive>
 8009aea:	bf00      	nop
 8009aec:	2000100c 	.word	0x2000100c

08009af0 <_Balloc>:
 8009af0:	b570      	push	{r4, r5, r6, lr}
 8009af2:	69c6      	ldr	r6, [r0, #28]
 8009af4:	4604      	mov	r4, r0
 8009af6:	460d      	mov	r5, r1
 8009af8:	b976      	cbnz	r6, 8009b18 <_Balloc+0x28>
 8009afa:	2010      	movs	r0, #16
 8009afc:	f7ff ff42 	bl	8009984 <malloc>
 8009b00:	4602      	mov	r2, r0
 8009b02:	61e0      	str	r0, [r4, #28]
 8009b04:	b920      	cbnz	r0, 8009b10 <_Balloc+0x20>
 8009b06:	4b18      	ldr	r3, [pc, #96]	@ (8009b68 <_Balloc+0x78>)
 8009b08:	4818      	ldr	r0, [pc, #96]	@ (8009b6c <_Balloc+0x7c>)
 8009b0a:	216b      	movs	r1, #107	@ 0x6b
 8009b0c:	f002 f8f8 	bl	800bd00 <__assert_func>
 8009b10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009b14:	6006      	str	r6, [r0, #0]
 8009b16:	60c6      	str	r6, [r0, #12]
 8009b18:	69e6      	ldr	r6, [r4, #28]
 8009b1a:	68f3      	ldr	r3, [r6, #12]
 8009b1c:	b183      	cbz	r3, 8009b40 <_Balloc+0x50>
 8009b1e:	69e3      	ldr	r3, [r4, #28]
 8009b20:	68db      	ldr	r3, [r3, #12]
 8009b22:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009b26:	b9b8      	cbnz	r0, 8009b58 <_Balloc+0x68>
 8009b28:	2101      	movs	r1, #1
 8009b2a:	fa01 f605 	lsl.w	r6, r1, r5
 8009b2e:	1d72      	adds	r2, r6, #5
 8009b30:	0092      	lsls	r2, r2, #2
 8009b32:	4620      	mov	r0, r4
 8009b34:	f002 f902 	bl	800bd3c <_calloc_r>
 8009b38:	b160      	cbz	r0, 8009b54 <_Balloc+0x64>
 8009b3a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009b3e:	e00e      	b.n	8009b5e <_Balloc+0x6e>
 8009b40:	2221      	movs	r2, #33	@ 0x21
 8009b42:	2104      	movs	r1, #4
 8009b44:	4620      	mov	r0, r4
 8009b46:	f002 f8f9 	bl	800bd3c <_calloc_r>
 8009b4a:	69e3      	ldr	r3, [r4, #28]
 8009b4c:	60f0      	str	r0, [r6, #12]
 8009b4e:	68db      	ldr	r3, [r3, #12]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d1e4      	bne.n	8009b1e <_Balloc+0x2e>
 8009b54:	2000      	movs	r0, #0
 8009b56:	bd70      	pop	{r4, r5, r6, pc}
 8009b58:	6802      	ldr	r2, [r0, #0]
 8009b5a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009b5e:	2300      	movs	r3, #0
 8009b60:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009b64:	e7f7      	b.n	8009b56 <_Balloc+0x66>
 8009b66:	bf00      	nop
 8009b68:	0800d28c 	.word	0x0800d28c
 8009b6c:	0800d30c 	.word	0x0800d30c

08009b70 <_Bfree>:
 8009b70:	b570      	push	{r4, r5, r6, lr}
 8009b72:	69c6      	ldr	r6, [r0, #28]
 8009b74:	4605      	mov	r5, r0
 8009b76:	460c      	mov	r4, r1
 8009b78:	b976      	cbnz	r6, 8009b98 <_Bfree+0x28>
 8009b7a:	2010      	movs	r0, #16
 8009b7c:	f7ff ff02 	bl	8009984 <malloc>
 8009b80:	4602      	mov	r2, r0
 8009b82:	61e8      	str	r0, [r5, #28]
 8009b84:	b920      	cbnz	r0, 8009b90 <_Bfree+0x20>
 8009b86:	4b09      	ldr	r3, [pc, #36]	@ (8009bac <_Bfree+0x3c>)
 8009b88:	4809      	ldr	r0, [pc, #36]	@ (8009bb0 <_Bfree+0x40>)
 8009b8a:	218f      	movs	r1, #143	@ 0x8f
 8009b8c:	f002 f8b8 	bl	800bd00 <__assert_func>
 8009b90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009b94:	6006      	str	r6, [r0, #0]
 8009b96:	60c6      	str	r6, [r0, #12]
 8009b98:	b13c      	cbz	r4, 8009baa <_Bfree+0x3a>
 8009b9a:	69eb      	ldr	r3, [r5, #28]
 8009b9c:	6862      	ldr	r2, [r4, #4]
 8009b9e:	68db      	ldr	r3, [r3, #12]
 8009ba0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009ba4:	6021      	str	r1, [r4, #0]
 8009ba6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009baa:	bd70      	pop	{r4, r5, r6, pc}
 8009bac:	0800d28c 	.word	0x0800d28c
 8009bb0:	0800d30c 	.word	0x0800d30c

08009bb4 <__multadd>:
 8009bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bb8:	690d      	ldr	r5, [r1, #16]
 8009bba:	4607      	mov	r7, r0
 8009bbc:	460c      	mov	r4, r1
 8009bbe:	461e      	mov	r6, r3
 8009bc0:	f101 0c14 	add.w	ip, r1, #20
 8009bc4:	2000      	movs	r0, #0
 8009bc6:	f8dc 3000 	ldr.w	r3, [ip]
 8009bca:	b299      	uxth	r1, r3
 8009bcc:	fb02 6101 	mla	r1, r2, r1, r6
 8009bd0:	0c1e      	lsrs	r6, r3, #16
 8009bd2:	0c0b      	lsrs	r3, r1, #16
 8009bd4:	fb02 3306 	mla	r3, r2, r6, r3
 8009bd8:	b289      	uxth	r1, r1
 8009bda:	3001      	adds	r0, #1
 8009bdc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009be0:	4285      	cmp	r5, r0
 8009be2:	f84c 1b04 	str.w	r1, [ip], #4
 8009be6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009bea:	dcec      	bgt.n	8009bc6 <__multadd+0x12>
 8009bec:	b30e      	cbz	r6, 8009c32 <__multadd+0x7e>
 8009bee:	68a3      	ldr	r3, [r4, #8]
 8009bf0:	42ab      	cmp	r3, r5
 8009bf2:	dc19      	bgt.n	8009c28 <__multadd+0x74>
 8009bf4:	6861      	ldr	r1, [r4, #4]
 8009bf6:	4638      	mov	r0, r7
 8009bf8:	3101      	adds	r1, #1
 8009bfa:	f7ff ff79 	bl	8009af0 <_Balloc>
 8009bfe:	4680      	mov	r8, r0
 8009c00:	b928      	cbnz	r0, 8009c0e <__multadd+0x5a>
 8009c02:	4602      	mov	r2, r0
 8009c04:	4b0c      	ldr	r3, [pc, #48]	@ (8009c38 <__multadd+0x84>)
 8009c06:	480d      	ldr	r0, [pc, #52]	@ (8009c3c <__multadd+0x88>)
 8009c08:	21ba      	movs	r1, #186	@ 0xba
 8009c0a:	f002 f879 	bl	800bd00 <__assert_func>
 8009c0e:	6922      	ldr	r2, [r4, #16]
 8009c10:	3202      	adds	r2, #2
 8009c12:	f104 010c 	add.w	r1, r4, #12
 8009c16:	0092      	lsls	r2, r2, #2
 8009c18:	300c      	adds	r0, #12
 8009c1a:	f7fe fffa 	bl	8008c12 <memcpy>
 8009c1e:	4621      	mov	r1, r4
 8009c20:	4638      	mov	r0, r7
 8009c22:	f7ff ffa5 	bl	8009b70 <_Bfree>
 8009c26:	4644      	mov	r4, r8
 8009c28:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009c2c:	3501      	adds	r5, #1
 8009c2e:	615e      	str	r6, [r3, #20]
 8009c30:	6125      	str	r5, [r4, #16]
 8009c32:	4620      	mov	r0, r4
 8009c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c38:	0800d2fb 	.word	0x0800d2fb
 8009c3c:	0800d30c 	.word	0x0800d30c

08009c40 <__s2b>:
 8009c40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c44:	460c      	mov	r4, r1
 8009c46:	4615      	mov	r5, r2
 8009c48:	461f      	mov	r7, r3
 8009c4a:	2209      	movs	r2, #9
 8009c4c:	3308      	adds	r3, #8
 8009c4e:	4606      	mov	r6, r0
 8009c50:	fb93 f3f2 	sdiv	r3, r3, r2
 8009c54:	2100      	movs	r1, #0
 8009c56:	2201      	movs	r2, #1
 8009c58:	429a      	cmp	r2, r3
 8009c5a:	db09      	blt.n	8009c70 <__s2b+0x30>
 8009c5c:	4630      	mov	r0, r6
 8009c5e:	f7ff ff47 	bl	8009af0 <_Balloc>
 8009c62:	b940      	cbnz	r0, 8009c76 <__s2b+0x36>
 8009c64:	4602      	mov	r2, r0
 8009c66:	4b19      	ldr	r3, [pc, #100]	@ (8009ccc <__s2b+0x8c>)
 8009c68:	4819      	ldr	r0, [pc, #100]	@ (8009cd0 <__s2b+0x90>)
 8009c6a:	21d3      	movs	r1, #211	@ 0xd3
 8009c6c:	f002 f848 	bl	800bd00 <__assert_func>
 8009c70:	0052      	lsls	r2, r2, #1
 8009c72:	3101      	adds	r1, #1
 8009c74:	e7f0      	b.n	8009c58 <__s2b+0x18>
 8009c76:	9b08      	ldr	r3, [sp, #32]
 8009c78:	6143      	str	r3, [r0, #20]
 8009c7a:	2d09      	cmp	r5, #9
 8009c7c:	f04f 0301 	mov.w	r3, #1
 8009c80:	6103      	str	r3, [r0, #16]
 8009c82:	dd16      	ble.n	8009cb2 <__s2b+0x72>
 8009c84:	f104 0909 	add.w	r9, r4, #9
 8009c88:	46c8      	mov	r8, r9
 8009c8a:	442c      	add	r4, r5
 8009c8c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009c90:	4601      	mov	r1, r0
 8009c92:	3b30      	subs	r3, #48	@ 0x30
 8009c94:	220a      	movs	r2, #10
 8009c96:	4630      	mov	r0, r6
 8009c98:	f7ff ff8c 	bl	8009bb4 <__multadd>
 8009c9c:	45a0      	cmp	r8, r4
 8009c9e:	d1f5      	bne.n	8009c8c <__s2b+0x4c>
 8009ca0:	f1a5 0408 	sub.w	r4, r5, #8
 8009ca4:	444c      	add	r4, r9
 8009ca6:	1b2d      	subs	r5, r5, r4
 8009ca8:	1963      	adds	r3, r4, r5
 8009caa:	42bb      	cmp	r3, r7
 8009cac:	db04      	blt.n	8009cb8 <__s2b+0x78>
 8009cae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009cb2:	340a      	adds	r4, #10
 8009cb4:	2509      	movs	r5, #9
 8009cb6:	e7f6      	b.n	8009ca6 <__s2b+0x66>
 8009cb8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009cbc:	4601      	mov	r1, r0
 8009cbe:	3b30      	subs	r3, #48	@ 0x30
 8009cc0:	220a      	movs	r2, #10
 8009cc2:	4630      	mov	r0, r6
 8009cc4:	f7ff ff76 	bl	8009bb4 <__multadd>
 8009cc8:	e7ee      	b.n	8009ca8 <__s2b+0x68>
 8009cca:	bf00      	nop
 8009ccc:	0800d2fb 	.word	0x0800d2fb
 8009cd0:	0800d30c 	.word	0x0800d30c

08009cd4 <__hi0bits>:
 8009cd4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009cd8:	4603      	mov	r3, r0
 8009cda:	bf36      	itet	cc
 8009cdc:	0403      	lslcc	r3, r0, #16
 8009cde:	2000      	movcs	r0, #0
 8009ce0:	2010      	movcc	r0, #16
 8009ce2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009ce6:	bf3c      	itt	cc
 8009ce8:	021b      	lslcc	r3, r3, #8
 8009cea:	3008      	addcc	r0, #8
 8009cec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009cf0:	bf3c      	itt	cc
 8009cf2:	011b      	lslcc	r3, r3, #4
 8009cf4:	3004      	addcc	r0, #4
 8009cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009cfa:	bf3c      	itt	cc
 8009cfc:	009b      	lslcc	r3, r3, #2
 8009cfe:	3002      	addcc	r0, #2
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	db05      	blt.n	8009d10 <__hi0bits+0x3c>
 8009d04:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009d08:	f100 0001 	add.w	r0, r0, #1
 8009d0c:	bf08      	it	eq
 8009d0e:	2020      	moveq	r0, #32
 8009d10:	4770      	bx	lr

08009d12 <__lo0bits>:
 8009d12:	6803      	ldr	r3, [r0, #0]
 8009d14:	4602      	mov	r2, r0
 8009d16:	f013 0007 	ands.w	r0, r3, #7
 8009d1a:	d00b      	beq.n	8009d34 <__lo0bits+0x22>
 8009d1c:	07d9      	lsls	r1, r3, #31
 8009d1e:	d421      	bmi.n	8009d64 <__lo0bits+0x52>
 8009d20:	0798      	lsls	r0, r3, #30
 8009d22:	bf49      	itett	mi
 8009d24:	085b      	lsrmi	r3, r3, #1
 8009d26:	089b      	lsrpl	r3, r3, #2
 8009d28:	2001      	movmi	r0, #1
 8009d2a:	6013      	strmi	r3, [r2, #0]
 8009d2c:	bf5c      	itt	pl
 8009d2e:	6013      	strpl	r3, [r2, #0]
 8009d30:	2002      	movpl	r0, #2
 8009d32:	4770      	bx	lr
 8009d34:	b299      	uxth	r1, r3
 8009d36:	b909      	cbnz	r1, 8009d3c <__lo0bits+0x2a>
 8009d38:	0c1b      	lsrs	r3, r3, #16
 8009d3a:	2010      	movs	r0, #16
 8009d3c:	b2d9      	uxtb	r1, r3
 8009d3e:	b909      	cbnz	r1, 8009d44 <__lo0bits+0x32>
 8009d40:	3008      	adds	r0, #8
 8009d42:	0a1b      	lsrs	r3, r3, #8
 8009d44:	0719      	lsls	r1, r3, #28
 8009d46:	bf04      	itt	eq
 8009d48:	091b      	lsreq	r3, r3, #4
 8009d4a:	3004      	addeq	r0, #4
 8009d4c:	0799      	lsls	r1, r3, #30
 8009d4e:	bf04      	itt	eq
 8009d50:	089b      	lsreq	r3, r3, #2
 8009d52:	3002      	addeq	r0, #2
 8009d54:	07d9      	lsls	r1, r3, #31
 8009d56:	d403      	bmi.n	8009d60 <__lo0bits+0x4e>
 8009d58:	085b      	lsrs	r3, r3, #1
 8009d5a:	f100 0001 	add.w	r0, r0, #1
 8009d5e:	d003      	beq.n	8009d68 <__lo0bits+0x56>
 8009d60:	6013      	str	r3, [r2, #0]
 8009d62:	4770      	bx	lr
 8009d64:	2000      	movs	r0, #0
 8009d66:	4770      	bx	lr
 8009d68:	2020      	movs	r0, #32
 8009d6a:	4770      	bx	lr

08009d6c <__i2b>:
 8009d6c:	b510      	push	{r4, lr}
 8009d6e:	460c      	mov	r4, r1
 8009d70:	2101      	movs	r1, #1
 8009d72:	f7ff febd 	bl	8009af0 <_Balloc>
 8009d76:	4602      	mov	r2, r0
 8009d78:	b928      	cbnz	r0, 8009d86 <__i2b+0x1a>
 8009d7a:	4b05      	ldr	r3, [pc, #20]	@ (8009d90 <__i2b+0x24>)
 8009d7c:	4805      	ldr	r0, [pc, #20]	@ (8009d94 <__i2b+0x28>)
 8009d7e:	f240 1145 	movw	r1, #325	@ 0x145
 8009d82:	f001 ffbd 	bl	800bd00 <__assert_func>
 8009d86:	2301      	movs	r3, #1
 8009d88:	6144      	str	r4, [r0, #20]
 8009d8a:	6103      	str	r3, [r0, #16]
 8009d8c:	bd10      	pop	{r4, pc}
 8009d8e:	bf00      	nop
 8009d90:	0800d2fb 	.word	0x0800d2fb
 8009d94:	0800d30c 	.word	0x0800d30c

08009d98 <__multiply>:
 8009d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d9c:	4617      	mov	r7, r2
 8009d9e:	690a      	ldr	r2, [r1, #16]
 8009da0:	693b      	ldr	r3, [r7, #16]
 8009da2:	429a      	cmp	r2, r3
 8009da4:	bfa8      	it	ge
 8009da6:	463b      	movge	r3, r7
 8009da8:	4689      	mov	r9, r1
 8009daa:	bfa4      	itt	ge
 8009dac:	460f      	movge	r7, r1
 8009dae:	4699      	movge	r9, r3
 8009db0:	693d      	ldr	r5, [r7, #16]
 8009db2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	6879      	ldr	r1, [r7, #4]
 8009dba:	eb05 060a 	add.w	r6, r5, sl
 8009dbe:	42b3      	cmp	r3, r6
 8009dc0:	b085      	sub	sp, #20
 8009dc2:	bfb8      	it	lt
 8009dc4:	3101      	addlt	r1, #1
 8009dc6:	f7ff fe93 	bl	8009af0 <_Balloc>
 8009dca:	b930      	cbnz	r0, 8009dda <__multiply+0x42>
 8009dcc:	4602      	mov	r2, r0
 8009dce:	4b41      	ldr	r3, [pc, #260]	@ (8009ed4 <__multiply+0x13c>)
 8009dd0:	4841      	ldr	r0, [pc, #260]	@ (8009ed8 <__multiply+0x140>)
 8009dd2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009dd6:	f001 ff93 	bl	800bd00 <__assert_func>
 8009dda:	f100 0414 	add.w	r4, r0, #20
 8009dde:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8009de2:	4623      	mov	r3, r4
 8009de4:	2200      	movs	r2, #0
 8009de6:	4573      	cmp	r3, lr
 8009de8:	d320      	bcc.n	8009e2c <__multiply+0x94>
 8009dea:	f107 0814 	add.w	r8, r7, #20
 8009dee:	f109 0114 	add.w	r1, r9, #20
 8009df2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8009df6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8009dfa:	9302      	str	r3, [sp, #8]
 8009dfc:	1beb      	subs	r3, r5, r7
 8009dfe:	3b15      	subs	r3, #21
 8009e00:	f023 0303 	bic.w	r3, r3, #3
 8009e04:	3304      	adds	r3, #4
 8009e06:	3715      	adds	r7, #21
 8009e08:	42bd      	cmp	r5, r7
 8009e0a:	bf38      	it	cc
 8009e0c:	2304      	movcc	r3, #4
 8009e0e:	9301      	str	r3, [sp, #4]
 8009e10:	9b02      	ldr	r3, [sp, #8]
 8009e12:	9103      	str	r1, [sp, #12]
 8009e14:	428b      	cmp	r3, r1
 8009e16:	d80c      	bhi.n	8009e32 <__multiply+0x9a>
 8009e18:	2e00      	cmp	r6, #0
 8009e1a:	dd03      	ble.n	8009e24 <__multiply+0x8c>
 8009e1c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d055      	beq.n	8009ed0 <__multiply+0x138>
 8009e24:	6106      	str	r6, [r0, #16]
 8009e26:	b005      	add	sp, #20
 8009e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e2c:	f843 2b04 	str.w	r2, [r3], #4
 8009e30:	e7d9      	b.n	8009de6 <__multiply+0x4e>
 8009e32:	f8b1 a000 	ldrh.w	sl, [r1]
 8009e36:	f1ba 0f00 	cmp.w	sl, #0
 8009e3a:	d01f      	beq.n	8009e7c <__multiply+0xe4>
 8009e3c:	46c4      	mov	ip, r8
 8009e3e:	46a1      	mov	r9, r4
 8009e40:	2700      	movs	r7, #0
 8009e42:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009e46:	f8d9 3000 	ldr.w	r3, [r9]
 8009e4a:	fa1f fb82 	uxth.w	fp, r2
 8009e4e:	b29b      	uxth	r3, r3
 8009e50:	fb0a 330b 	mla	r3, sl, fp, r3
 8009e54:	443b      	add	r3, r7
 8009e56:	f8d9 7000 	ldr.w	r7, [r9]
 8009e5a:	0c12      	lsrs	r2, r2, #16
 8009e5c:	0c3f      	lsrs	r7, r7, #16
 8009e5e:	fb0a 7202 	mla	r2, sl, r2, r7
 8009e62:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8009e66:	b29b      	uxth	r3, r3
 8009e68:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e6c:	4565      	cmp	r5, ip
 8009e6e:	f849 3b04 	str.w	r3, [r9], #4
 8009e72:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8009e76:	d8e4      	bhi.n	8009e42 <__multiply+0xaa>
 8009e78:	9b01      	ldr	r3, [sp, #4]
 8009e7a:	50e7      	str	r7, [r4, r3]
 8009e7c:	9b03      	ldr	r3, [sp, #12]
 8009e7e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009e82:	3104      	adds	r1, #4
 8009e84:	f1b9 0f00 	cmp.w	r9, #0
 8009e88:	d020      	beq.n	8009ecc <__multiply+0x134>
 8009e8a:	6823      	ldr	r3, [r4, #0]
 8009e8c:	4647      	mov	r7, r8
 8009e8e:	46a4      	mov	ip, r4
 8009e90:	f04f 0a00 	mov.w	sl, #0
 8009e94:	f8b7 b000 	ldrh.w	fp, [r7]
 8009e98:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8009e9c:	fb09 220b 	mla	r2, r9, fp, r2
 8009ea0:	4452      	add	r2, sl
 8009ea2:	b29b      	uxth	r3, r3
 8009ea4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009ea8:	f84c 3b04 	str.w	r3, [ip], #4
 8009eac:	f857 3b04 	ldr.w	r3, [r7], #4
 8009eb0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009eb4:	f8bc 3000 	ldrh.w	r3, [ip]
 8009eb8:	fb09 330a 	mla	r3, r9, sl, r3
 8009ebc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8009ec0:	42bd      	cmp	r5, r7
 8009ec2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009ec6:	d8e5      	bhi.n	8009e94 <__multiply+0xfc>
 8009ec8:	9a01      	ldr	r2, [sp, #4]
 8009eca:	50a3      	str	r3, [r4, r2]
 8009ecc:	3404      	adds	r4, #4
 8009ece:	e79f      	b.n	8009e10 <__multiply+0x78>
 8009ed0:	3e01      	subs	r6, #1
 8009ed2:	e7a1      	b.n	8009e18 <__multiply+0x80>
 8009ed4:	0800d2fb 	.word	0x0800d2fb
 8009ed8:	0800d30c 	.word	0x0800d30c

08009edc <__pow5mult>:
 8009edc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ee0:	4615      	mov	r5, r2
 8009ee2:	f012 0203 	ands.w	r2, r2, #3
 8009ee6:	4607      	mov	r7, r0
 8009ee8:	460e      	mov	r6, r1
 8009eea:	d007      	beq.n	8009efc <__pow5mult+0x20>
 8009eec:	4c25      	ldr	r4, [pc, #148]	@ (8009f84 <__pow5mult+0xa8>)
 8009eee:	3a01      	subs	r2, #1
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009ef6:	f7ff fe5d 	bl	8009bb4 <__multadd>
 8009efa:	4606      	mov	r6, r0
 8009efc:	10ad      	asrs	r5, r5, #2
 8009efe:	d03d      	beq.n	8009f7c <__pow5mult+0xa0>
 8009f00:	69fc      	ldr	r4, [r7, #28]
 8009f02:	b97c      	cbnz	r4, 8009f24 <__pow5mult+0x48>
 8009f04:	2010      	movs	r0, #16
 8009f06:	f7ff fd3d 	bl	8009984 <malloc>
 8009f0a:	4602      	mov	r2, r0
 8009f0c:	61f8      	str	r0, [r7, #28]
 8009f0e:	b928      	cbnz	r0, 8009f1c <__pow5mult+0x40>
 8009f10:	4b1d      	ldr	r3, [pc, #116]	@ (8009f88 <__pow5mult+0xac>)
 8009f12:	481e      	ldr	r0, [pc, #120]	@ (8009f8c <__pow5mult+0xb0>)
 8009f14:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009f18:	f001 fef2 	bl	800bd00 <__assert_func>
 8009f1c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009f20:	6004      	str	r4, [r0, #0]
 8009f22:	60c4      	str	r4, [r0, #12]
 8009f24:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009f28:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009f2c:	b94c      	cbnz	r4, 8009f42 <__pow5mult+0x66>
 8009f2e:	f240 2171 	movw	r1, #625	@ 0x271
 8009f32:	4638      	mov	r0, r7
 8009f34:	f7ff ff1a 	bl	8009d6c <__i2b>
 8009f38:	2300      	movs	r3, #0
 8009f3a:	f8c8 0008 	str.w	r0, [r8, #8]
 8009f3e:	4604      	mov	r4, r0
 8009f40:	6003      	str	r3, [r0, #0]
 8009f42:	f04f 0900 	mov.w	r9, #0
 8009f46:	07eb      	lsls	r3, r5, #31
 8009f48:	d50a      	bpl.n	8009f60 <__pow5mult+0x84>
 8009f4a:	4631      	mov	r1, r6
 8009f4c:	4622      	mov	r2, r4
 8009f4e:	4638      	mov	r0, r7
 8009f50:	f7ff ff22 	bl	8009d98 <__multiply>
 8009f54:	4631      	mov	r1, r6
 8009f56:	4680      	mov	r8, r0
 8009f58:	4638      	mov	r0, r7
 8009f5a:	f7ff fe09 	bl	8009b70 <_Bfree>
 8009f5e:	4646      	mov	r6, r8
 8009f60:	106d      	asrs	r5, r5, #1
 8009f62:	d00b      	beq.n	8009f7c <__pow5mult+0xa0>
 8009f64:	6820      	ldr	r0, [r4, #0]
 8009f66:	b938      	cbnz	r0, 8009f78 <__pow5mult+0x9c>
 8009f68:	4622      	mov	r2, r4
 8009f6a:	4621      	mov	r1, r4
 8009f6c:	4638      	mov	r0, r7
 8009f6e:	f7ff ff13 	bl	8009d98 <__multiply>
 8009f72:	6020      	str	r0, [r4, #0]
 8009f74:	f8c0 9000 	str.w	r9, [r0]
 8009f78:	4604      	mov	r4, r0
 8009f7a:	e7e4      	b.n	8009f46 <__pow5mult+0x6a>
 8009f7c:	4630      	mov	r0, r6
 8009f7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f82:	bf00      	nop
 8009f84:	0800d438 	.word	0x0800d438
 8009f88:	0800d28c 	.word	0x0800d28c
 8009f8c:	0800d30c 	.word	0x0800d30c

08009f90 <__lshift>:
 8009f90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f94:	460c      	mov	r4, r1
 8009f96:	6849      	ldr	r1, [r1, #4]
 8009f98:	6923      	ldr	r3, [r4, #16]
 8009f9a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009f9e:	68a3      	ldr	r3, [r4, #8]
 8009fa0:	4607      	mov	r7, r0
 8009fa2:	4691      	mov	r9, r2
 8009fa4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009fa8:	f108 0601 	add.w	r6, r8, #1
 8009fac:	42b3      	cmp	r3, r6
 8009fae:	db0b      	blt.n	8009fc8 <__lshift+0x38>
 8009fb0:	4638      	mov	r0, r7
 8009fb2:	f7ff fd9d 	bl	8009af0 <_Balloc>
 8009fb6:	4605      	mov	r5, r0
 8009fb8:	b948      	cbnz	r0, 8009fce <__lshift+0x3e>
 8009fba:	4602      	mov	r2, r0
 8009fbc:	4b28      	ldr	r3, [pc, #160]	@ (800a060 <__lshift+0xd0>)
 8009fbe:	4829      	ldr	r0, [pc, #164]	@ (800a064 <__lshift+0xd4>)
 8009fc0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009fc4:	f001 fe9c 	bl	800bd00 <__assert_func>
 8009fc8:	3101      	adds	r1, #1
 8009fca:	005b      	lsls	r3, r3, #1
 8009fcc:	e7ee      	b.n	8009fac <__lshift+0x1c>
 8009fce:	2300      	movs	r3, #0
 8009fd0:	f100 0114 	add.w	r1, r0, #20
 8009fd4:	f100 0210 	add.w	r2, r0, #16
 8009fd8:	4618      	mov	r0, r3
 8009fda:	4553      	cmp	r3, sl
 8009fdc:	db33      	blt.n	800a046 <__lshift+0xb6>
 8009fde:	6920      	ldr	r0, [r4, #16]
 8009fe0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009fe4:	f104 0314 	add.w	r3, r4, #20
 8009fe8:	f019 091f 	ands.w	r9, r9, #31
 8009fec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009ff0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009ff4:	d02b      	beq.n	800a04e <__lshift+0xbe>
 8009ff6:	f1c9 0e20 	rsb	lr, r9, #32
 8009ffa:	468a      	mov	sl, r1
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	6818      	ldr	r0, [r3, #0]
 800a000:	fa00 f009 	lsl.w	r0, r0, r9
 800a004:	4310      	orrs	r0, r2
 800a006:	f84a 0b04 	str.w	r0, [sl], #4
 800a00a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a00e:	459c      	cmp	ip, r3
 800a010:	fa22 f20e 	lsr.w	r2, r2, lr
 800a014:	d8f3      	bhi.n	8009ffe <__lshift+0x6e>
 800a016:	ebac 0304 	sub.w	r3, ip, r4
 800a01a:	3b15      	subs	r3, #21
 800a01c:	f023 0303 	bic.w	r3, r3, #3
 800a020:	3304      	adds	r3, #4
 800a022:	f104 0015 	add.w	r0, r4, #21
 800a026:	4560      	cmp	r0, ip
 800a028:	bf88      	it	hi
 800a02a:	2304      	movhi	r3, #4
 800a02c:	50ca      	str	r2, [r1, r3]
 800a02e:	b10a      	cbz	r2, 800a034 <__lshift+0xa4>
 800a030:	f108 0602 	add.w	r6, r8, #2
 800a034:	3e01      	subs	r6, #1
 800a036:	4638      	mov	r0, r7
 800a038:	612e      	str	r6, [r5, #16]
 800a03a:	4621      	mov	r1, r4
 800a03c:	f7ff fd98 	bl	8009b70 <_Bfree>
 800a040:	4628      	mov	r0, r5
 800a042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a046:	f842 0f04 	str.w	r0, [r2, #4]!
 800a04a:	3301      	adds	r3, #1
 800a04c:	e7c5      	b.n	8009fda <__lshift+0x4a>
 800a04e:	3904      	subs	r1, #4
 800a050:	f853 2b04 	ldr.w	r2, [r3], #4
 800a054:	f841 2f04 	str.w	r2, [r1, #4]!
 800a058:	459c      	cmp	ip, r3
 800a05a:	d8f9      	bhi.n	800a050 <__lshift+0xc0>
 800a05c:	e7ea      	b.n	800a034 <__lshift+0xa4>
 800a05e:	bf00      	nop
 800a060:	0800d2fb 	.word	0x0800d2fb
 800a064:	0800d30c 	.word	0x0800d30c

0800a068 <__mcmp>:
 800a068:	690a      	ldr	r2, [r1, #16]
 800a06a:	4603      	mov	r3, r0
 800a06c:	6900      	ldr	r0, [r0, #16]
 800a06e:	1a80      	subs	r0, r0, r2
 800a070:	b530      	push	{r4, r5, lr}
 800a072:	d10e      	bne.n	800a092 <__mcmp+0x2a>
 800a074:	3314      	adds	r3, #20
 800a076:	3114      	adds	r1, #20
 800a078:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a07c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a080:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a084:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a088:	4295      	cmp	r5, r2
 800a08a:	d003      	beq.n	800a094 <__mcmp+0x2c>
 800a08c:	d205      	bcs.n	800a09a <__mcmp+0x32>
 800a08e:	f04f 30ff 	mov.w	r0, #4294967295
 800a092:	bd30      	pop	{r4, r5, pc}
 800a094:	42a3      	cmp	r3, r4
 800a096:	d3f3      	bcc.n	800a080 <__mcmp+0x18>
 800a098:	e7fb      	b.n	800a092 <__mcmp+0x2a>
 800a09a:	2001      	movs	r0, #1
 800a09c:	e7f9      	b.n	800a092 <__mcmp+0x2a>
	...

0800a0a0 <__mdiff>:
 800a0a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0a4:	4689      	mov	r9, r1
 800a0a6:	4606      	mov	r6, r0
 800a0a8:	4611      	mov	r1, r2
 800a0aa:	4648      	mov	r0, r9
 800a0ac:	4614      	mov	r4, r2
 800a0ae:	f7ff ffdb 	bl	800a068 <__mcmp>
 800a0b2:	1e05      	subs	r5, r0, #0
 800a0b4:	d112      	bne.n	800a0dc <__mdiff+0x3c>
 800a0b6:	4629      	mov	r1, r5
 800a0b8:	4630      	mov	r0, r6
 800a0ba:	f7ff fd19 	bl	8009af0 <_Balloc>
 800a0be:	4602      	mov	r2, r0
 800a0c0:	b928      	cbnz	r0, 800a0ce <__mdiff+0x2e>
 800a0c2:	4b3f      	ldr	r3, [pc, #252]	@ (800a1c0 <__mdiff+0x120>)
 800a0c4:	f240 2137 	movw	r1, #567	@ 0x237
 800a0c8:	483e      	ldr	r0, [pc, #248]	@ (800a1c4 <__mdiff+0x124>)
 800a0ca:	f001 fe19 	bl	800bd00 <__assert_func>
 800a0ce:	2301      	movs	r3, #1
 800a0d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a0d4:	4610      	mov	r0, r2
 800a0d6:	b003      	add	sp, #12
 800a0d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0dc:	bfbc      	itt	lt
 800a0de:	464b      	movlt	r3, r9
 800a0e0:	46a1      	movlt	r9, r4
 800a0e2:	4630      	mov	r0, r6
 800a0e4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a0e8:	bfba      	itte	lt
 800a0ea:	461c      	movlt	r4, r3
 800a0ec:	2501      	movlt	r5, #1
 800a0ee:	2500      	movge	r5, #0
 800a0f0:	f7ff fcfe 	bl	8009af0 <_Balloc>
 800a0f4:	4602      	mov	r2, r0
 800a0f6:	b918      	cbnz	r0, 800a100 <__mdiff+0x60>
 800a0f8:	4b31      	ldr	r3, [pc, #196]	@ (800a1c0 <__mdiff+0x120>)
 800a0fa:	f240 2145 	movw	r1, #581	@ 0x245
 800a0fe:	e7e3      	b.n	800a0c8 <__mdiff+0x28>
 800a100:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a104:	6926      	ldr	r6, [r4, #16]
 800a106:	60c5      	str	r5, [r0, #12]
 800a108:	f109 0310 	add.w	r3, r9, #16
 800a10c:	f109 0514 	add.w	r5, r9, #20
 800a110:	f104 0e14 	add.w	lr, r4, #20
 800a114:	f100 0b14 	add.w	fp, r0, #20
 800a118:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a11c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a120:	9301      	str	r3, [sp, #4]
 800a122:	46d9      	mov	r9, fp
 800a124:	f04f 0c00 	mov.w	ip, #0
 800a128:	9b01      	ldr	r3, [sp, #4]
 800a12a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a12e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a132:	9301      	str	r3, [sp, #4]
 800a134:	fa1f f38a 	uxth.w	r3, sl
 800a138:	4619      	mov	r1, r3
 800a13a:	b283      	uxth	r3, r0
 800a13c:	1acb      	subs	r3, r1, r3
 800a13e:	0c00      	lsrs	r0, r0, #16
 800a140:	4463      	add	r3, ip
 800a142:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a146:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a14a:	b29b      	uxth	r3, r3
 800a14c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a150:	4576      	cmp	r6, lr
 800a152:	f849 3b04 	str.w	r3, [r9], #4
 800a156:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a15a:	d8e5      	bhi.n	800a128 <__mdiff+0x88>
 800a15c:	1b33      	subs	r3, r6, r4
 800a15e:	3b15      	subs	r3, #21
 800a160:	f023 0303 	bic.w	r3, r3, #3
 800a164:	3415      	adds	r4, #21
 800a166:	3304      	adds	r3, #4
 800a168:	42a6      	cmp	r6, r4
 800a16a:	bf38      	it	cc
 800a16c:	2304      	movcc	r3, #4
 800a16e:	441d      	add	r5, r3
 800a170:	445b      	add	r3, fp
 800a172:	461e      	mov	r6, r3
 800a174:	462c      	mov	r4, r5
 800a176:	4544      	cmp	r4, r8
 800a178:	d30e      	bcc.n	800a198 <__mdiff+0xf8>
 800a17a:	f108 0103 	add.w	r1, r8, #3
 800a17e:	1b49      	subs	r1, r1, r5
 800a180:	f021 0103 	bic.w	r1, r1, #3
 800a184:	3d03      	subs	r5, #3
 800a186:	45a8      	cmp	r8, r5
 800a188:	bf38      	it	cc
 800a18a:	2100      	movcc	r1, #0
 800a18c:	440b      	add	r3, r1
 800a18e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a192:	b191      	cbz	r1, 800a1ba <__mdiff+0x11a>
 800a194:	6117      	str	r7, [r2, #16]
 800a196:	e79d      	b.n	800a0d4 <__mdiff+0x34>
 800a198:	f854 1b04 	ldr.w	r1, [r4], #4
 800a19c:	46e6      	mov	lr, ip
 800a19e:	0c08      	lsrs	r0, r1, #16
 800a1a0:	fa1c fc81 	uxtah	ip, ip, r1
 800a1a4:	4471      	add	r1, lr
 800a1a6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a1aa:	b289      	uxth	r1, r1
 800a1ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a1b0:	f846 1b04 	str.w	r1, [r6], #4
 800a1b4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a1b8:	e7dd      	b.n	800a176 <__mdiff+0xd6>
 800a1ba:	3f01      	subs	r7, #1
 800a1bc:	e7e7      	b.n	800a18e <__mdiff+0xee>
 800a1be:	bf00      	nop
 800a1c0:	0800d2fb 	.word	0x0800d2fb
 800a1c4:	0800d30c 	.word	0x0800d30c

0800a1c8 <__ulp>:
 800a1c8:	b082      	sub	sp, #8
 800a1ca:	ed8d 0b00 	vstr	d0, [sp]
 800a1ce:	9a01      	ldr	r2, [sp, #4]
 800a1d0:	4b0f      	ldr	r3, [pc, #60]	@ (800a210 <__ulp+0x48>)
 800a1d2:	4013      	ands	r3, r2
 800a1d4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	dc08      	bgt.n	800a1ee <__ulp+0x26>
 800a1dc:	425b      	negs	r3, r3
 800a1de:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a1e2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a1e6:	da04      	bge.n	800a1f2 <__ulp+0x2a>
 800a1e8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a1ec:	4113      	asrs	r3, r2
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	e008      	b.n	800a204 <__ulp+0x3c>
 800a1f2:	f1a2 0314 	sub.w	r3, r2, #20
 800a1f6:	2b1e      	cmp	r3, #30
 800a1f8:	bfda      	itte	le
 800a1fa:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a1fe:	40da      	lsrle	r2, r3
 800a200:	2201      	movgt	r2, #1
 800a202:	2300      	movs	r3, #0
 800a204:	4619      	mov	r1, r3
 800a206:	4610      	mov	r0, r2
 800a208:	ec41 0b10 	vmov	d0, r0, r1
 800a20c:	b002      	add	sp, #8
 800a20e:	4770      	bx	lr
 800a210:	7ff00000 	.word	0x7ff00000

0800a214 <__b2d>:
 800a214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a218:	6906      	ldr	r6, [r0, #16]
 800a21a:	f100 0814 	add.w	r8, r0, #20
 800a21e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a222:	1f37      	subs	r7, r6, #4
 800a224:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a228:	4610      	mov	r0, r2
 800a22a:	f7ff fd53 	bl	8009cd4 <__hi0bits>
 800a22e:	f1c0 0320 	rsb	r3, r0, #32
 800a232:	280a      	cmp	r0, #10
 800a234:	600b      	str	r3, [r1, #0]
 800a236:	491b      	ldr	r1, [pc, #108]	@ (800a2a4 <__b2d+0x90>)
 800a238:	dc15      	bgt.n	800a266 <__b2d+0x52>
 800a23a:	f1c0 0c0b 	rsb	ip, r0, #11
 800a23e:	fa22 f30c 	lsr.w	r3, r2, ip
 800a242:	45b8      	cmp	r8, r7
 800a244:	ea43 0501 	orr.w	r5, r3, r1
 800a248:	bf34      	ite	cc
 800a24a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a24e:	2300      	movcs	r3, #0
 800a250:	3015      	adds	r0, #21
 800a252:	fa02 f000 	lsl.w	r0, r2, r0
 800a256:	fa23 f30c 	lsr.w	r3, r3, ip
 800a25a:	4303      	orrs	r3, r0
 800a25c:	461c      	mov	r4, r3
 800a25e:	ec45 4b10 	vmov	d0, r4, r5
 800a262:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a266:	45b8      	cmp	r8, r7
 800a268:	bf3a      	itte	cc
 800a26a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a26e:	f1a6 0708 	subcc.w	r7, r6, #8
 800a272:	2300      	movcs	r3, #0
 800a274:	380b      	subs	r0, #11
 800a276:	d012      	beq.n	800a29e <__b2d+0x8a>
 800a278:	f1c0 0120 	rsb	r1, r0, #32
 800a27c:	fa23 f401 	lsr.w	r4, r3, r1
 800a280:	4082      	lsls	r2, r0
 800a282:	4322      	orrs	r2, r4
 800a284:	4547      	cmp	r7, r8
 800a286:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a28a:	bf8c      	ite	hi
 800a28c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a290:	2200      	movls	r2, #0
 800a292:	4083      	lsls	r3, r0
 800a294:	40ca      	lsrs	r2, r1
 800a296:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a29a:	4313      	orrs	r3, r2
 800a29c:	e7de      	b.n	800a25c <__b2d+0x48>
 800a29e:	ea42 0501 	orr.w	r5, r2, r1
 800a2a2:	e7db      	b.n	800a25c <__b2d+0x48>
 800a2a4:	3ff00000 	.word	0x3ff00000

0800a2a8 <__d2b>:
 800a2a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a2ac:	460f      	mov	r7, r1
 800a2ae:	2101      	movs	r1, #1
 800a2b0:	ec59 8b10 	vmov	r8, r9, d0
 800a2b4:	4616      	mov	r6, r2
 800a2b6:	f7ff fc1b 	bl	8009af0 <_Balloc>
 800a2ba:	4604      	mov	r4, r0
 800a2bc:	b930      	cbnz	r0, 800a2cc <__d2b+0x24>
 800a2be:	4602      	mov	r2, r0
 800a2c0:	4b23      	ldr	r3, [pc, #140]	@ (800a350 <__d2b+0xa8>)
 800a2c2:	4824      	ldr	r0, [pc, #144]	@ (800a354 <__d2b+0xac>)
 800a2c4:	f240 310f 	movw	r1, #783	@ 0x30f
 800a2c8:	f001 fd1a 	bl	800bd00 <__assert_func>
 800a2cc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a2d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a2d4:	b10d      	cbz	r5, 800a2da <__d2b+0x32>
 800a2d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a2da:	9301      	str	r3, [sp, #4]
 800a2dc:	f1b8 0300 	subs.w	r3, r8, #0
 800a2e0:	d023      	beq.n	800a32a <__d2b+0x82>
 800a2e2:	4668      	mov	r0, sp
 800a2e4:	9300      	str	r3, [sp, #0]
 800a2e6:	f7ff fd14 	bl	8009d12 <__lo0bits>
 800a2ea:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a2ee:	b1d0      	cbz	r0, 800a326 <__d2b+0x7e>
 800a2f0:	f1c0 0320 	rsb	r3, r0, #32
 800a2f4:	fa02 f303 	lsl.w	r3, r2, r3
 800a2f8:	430b      	orrs	r3, r1
 800a2fa:	40c2      	lsrs	r2, r0
 800a2fc:	6163      	str	r3, [r4, #20]
 800a2fe:	9201      	str	r2, [sp, #4]
 800a300:	9b01      	ldr	r3, [sp, #4]
 800a302:	61a3      	str	r3, [r4, #24]
 800a304:	2b00      	cmp	r3, #0
 800a306:	bf0c      	ite	eq
 800a308:	2201      	moveq	r2, #1
 800a30a:	2202      	movne	r2, #2
 800a30c:	6122      	str	r2, [r4, #16]
 800a30e:	b1a5      	cbz	r5, 800a33a <__d2b+0x92>
 800a310:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a314:	4405      	add	r5, r0
 800a316:	603d      	str	r5, [r7, #0]
 800a318:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a31c:	6030      	str	r0, [r6, #0]
 800a31e:	4620      	mov	r0, r4
 800a320:	b003      	add	sp, #12
 800a322:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a326:	6161      	str	r1, [r4, #20]
 800a328:	e7ea      	b.n	800a300 <__d2b+0x58>
 800a32a:	a801      	add	r0, sp, #4
 800a32c:	f7ff fcf1 	bl	8009d12 <__lo0bits>
 800a330:	9b01      	ldr	r3, [sp, #4]
 800a332:	6163      	str	r3, [r4, #20]
 800a334:	3020      	adds	r0, #32
 800a336:	2201      	movs	r2, #1
 800a338:	e7e8      	b.n	800a30c <__d2b+0x64>
 800a33a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a33e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a342:	6038      	str	r0, [r7, #0]
 800a344:	6918      	ldr	r0, [r3, #16]
 800a346:	f7ff fcc5 	bl	8009cd4 <__hi0bits>
 800a34a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a34e:	e7e5      	b.n	800a31c <__d2b+0x74>
 800a350:	0800d2fb 	.word	0x0800d2fb
 800a354:	0800d30c 	.word	0x0800d30c

0800a358 <__ratio>:
 800a358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a35c:	b085      	sub	sp, #20
 800a35e:	e9cd 1000 	strd	r1, r0, [sp]
 800a362:	a902      	add	r1, sp, #8
 800a364:	f7ff ff56 	bl	800a214 <__b2d>
 800a368:	9800      	ldr	r0, [sp, #0]
 800a36a:	a903      	add	r1, sp, #12
 800a36c:	ec55 4b10 	vmov	r4, r5, d0
 800a370:	f7ff ff50 	bl	800a214 <__b2d>
 800a374:	9b01      	ldr	r3, [sp, #4]
 800a376:	6919      	ldr	r1, [r3, #16]
 800a378:	9b00      	ldr	r3, [sp, #0]
 800a37a:	691b      	ldr	r3, [r3, #16]
 800a37c:	1ac9      	subs	r1, r1, r3
 800a37e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a382:	1a9b      	subs	r3, r3, r2
 800a384:	ec5b ab10 	vmov	sl, fp, d0
 800a388:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	bfce      	itee	gt
 800a390:	462a      	movgt	r2, r5
 800a392:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a396:	465a      	movle	r2, fp
 800a398:	462f      	mov	r7, r5
 800a39a:	46d9      	mov	r9, fp
 800a39c:	bfcc      	ite	gt
 800a39e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a3a2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a3a6:	464b      	mov	r3, r9
 800a3a8:	4652      	mov	r2, sl
 800a3aa:	4620      	mov	r0, r4
 800a3ac:	4639      	mov	r1, r7
 800a3ae:	f7f6 fa4d 	bl	800084c <__aeabi_ddiv>
 800a3b2:	ec41 0b10 	vmov	d0, r0, r1
 800a3b6:	b005      	add	sp, #20
 800a3b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a3bc <__copybits>:
 800a3bc:	3901      	subs	r1, #1
 800a3be:	b570      	push	{r4, r5, r6, lr}
 800a3c0:	1149      	asrs	r1, r1, #5
 800a3c2:	6914      	ldr	r4, [r2, #16]
 800a3c4:	3101      	adds	r1, #1
 800a3c6:	f102 0314 	add.w	r3, r2, #20
 800a3ca:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a3ce:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a3d2:	1f05      	subs	r5, r0, #4
 800a3d4:	42a3      	cmp	r3, r4
 800a3d6:	d30c      	bcc.n	800a3f2 <__copybits+0x36>
 800a3d8:	1aa3      	subs	r3, r4, r2
 800a3da:	3b11      	subs	r3, #17
 800a3dc:	f023 0303 	bic.w	r3, r3, #3
 800a3e0:	3211      	adds	r2, #17
 800a3e2:	42a2      	cmp	r2, r4
 800a3e4:	bf88      	it	hi
 800a3e6:	2300      	movhi	r3, #0
 800a3e8:	4418      	add	r0, r3
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	4288      	cmp	r0, r1
 800a3ee:	d305      	bcc.n	800a3fc <__copybits+0x40>
 800a3f0:	bd70      	pop	{r4, r5, r6, pc}
 800a3f2:	f853 6b04 	ldr.w	r6, [r3], #4
 800a3f6:	f845 6f04 	str.w	r6, [r5, #4]!
 800a3fa:	e7eb      	b.n	800a3d4 <__copybits+0x18>
 800a3fc:	f840 3b04 	str.w	r3, [r0], #4
 800a400:	e7f4      	b.n	800a3ec <__copybits+0x30>

0800a402 <__any_on>:
 800a402:	f100 0214 	add.w	r2, r0, #20
 800a406:	6900      	ldr	r0, [r0, #16]
 800a408:	114b      	asrs	r3, r1, #5
 800a40a:	4298      	cmp	r0, r3
 800a40c:	b510      	push	{r4, lr}
 800a40e:	db11      	blt.n	800a434 <__any_on+0x32>
 800a410:	dd0a      	ble.n	800a428 <__any_on+0x26>
 800a412:	f011 011f 	ands.w	r1, r1, #31
 800a416:	d007      	beq.n	800a428 <__any_on+0x26>
 800a418:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a41c:	fa24 f001 	lsr.w	r0, r4, r1
 800a420:	fa00 f101 	lsl.w	r1, r0, r1
 800a424:	428c      	cmp	r4, r1
 800a426:	d10b      	bne.n	800a440 <__any_on+0x3e>
 800a428:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a42c:	4293      	cmp	r3, r2
 800a42e:	d803      	bhi.n	800a438 <__any_on+0x36>
 800a430:	2000      	movs	r0, #0
 800a432:	bd10      	pop	{r4, pc}
 800a434:	4603      	mov	r3, r0
 800a436:	e7f7      	b.n	800a428 <__any_on+0x26>
 800a438:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a43c:	2900      	cmp	r1, #0
 800a43e:	d0f5      	beq.n	800a42c <__any_on+0x2a>
 800a440:	2001      	movs	r0, #1
 800a442:	e7f6      	b.n	800a432 <__any_on+0x30>

0800a444 <sulp>:
 800a444:	b570      	push	{r4, r5, r6, lr}
 800a446:	4604      	mov	r4, r0
 800a448:	460d      	mov	r5, r1
 800a44a:	ec45 4b10 	vmov	d0, r4, r5
 800a44e:	4616      	mov	r6, r2
 800a450:	f7ff feba 	bl	800a1c8 <__ulp>
 800a454:	ec51 0b10 	vmov	r0, r1, d0
 800a458:	b17e      	cbz	r6, 800a47a <sulp+0x36>
 800a45a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a45e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a462:	2b00      	cmp	r3, #0
 800a464:	dd09      	ble.n	800a47a <sulp+0x36>
 800a466:	051b      	lsls	r3, r3, #20
 800a468:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800a46c:	2400      	movs	r4, #0
 800a46e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800a472:	4622      	mov	r2, r4
 800a474:	462b      	mov	r3, r5
 800a476:	f7f6 f8bf 	bl	80005f8 <__aeabi_dmul>
 800a47a:	ec41 0b10 	vmov	d0, r0, r1
 800a47e:	bd70      	pop	{r4, r5, r6, pc}

0800a480 <_strtod_l>:
 800a480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a484:	b09f      	sub	sp, #124	@ 0x7c
 800a486:	460c      	mov	r4, r1
 800a488:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a48a:	2200      	movs	r2, #0
 800a48c:	921a      	str	r2, [sp, #104]	@ 0x68
 800a48e:	9005      	str	r0, [sp, #20]
 800a490:	f04f 0a00 	mov.w	sl, #0
 800a494:	f04f 0b00 	mov.w	fp, #0
 800a498:	460a      	mov	r2, r1
 800a49a:	9219      	str	r2, [sp, #100]	@ 0x64
 800a49c:	7811      	ldrb	r1, [r2, #0]
 800a49e:	292b      	cmp	r1, #43	@ 0x2b
 800a4a0:	d04a      	beq.n	800a538 <_strtod_l+0xb8>
 800a4a2:	d838      	bhi.n	800a516 <_strtod_l+0x96>
 800a4a4:	290d      	cmp	r1, #13
 800a4a6:	d832      	bhi.n	800a50e <_strtod_l+0x8e>
 800a4a8:	2908      	cmp	r1, #8
 800a4aa:	d832      	bhi.n	800a512 <_strtod_l+0x92>
 800a4ac:	2900      	cmp	r1, #0
 800a4ae:	d03b      	beq.n	800a528 <_strtod_l+0xa8>
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	920e      	str	r2, [sp, #56]	@ 0x38
 800a4b4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800a4b6:	782a      	ldrb	r2, [r5, #0]
 800a4b8:	2a30      	cmp	r2, #48	@ 0x30
 800a4ba:	f040 80b2 	bne.w	800a622 <_strtod_l+0x1a2>
 800a4be:	786a      	ldrb	r2, [r5, #1]
 800a4c0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a4c4:	2a58      	cmp	r2, #88	@ 0x58
 800a4c6:	d16e      	bne.n	800a5a6 <_strtod_l+0x126>
 800a4c8:	9302      	str	r3, [sp, #8]
 800a4ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a4cc:	9301      	str	r3, [sp, #4]
 800a4ce:	ab1a      	add	r3, sp, #104	@ 0x68
 800a4d0:	9300      	str	r3, [sp, #0]
 800a4d2:	4a8f      	ldr	r2, [pc, #572]	@ (800a710 <_strtod_l+0x290>)
 800a4d4:	9805      	ldr	r0, [sp, #20]
 800a4d6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a4d8:	a919      	add	r1, sp, #100	@ 0x64
 800a4da:	f001 fcab 	bl	800be34 <__gethex>
 800a4de:	f010 060f 	ands.w	r6, r0, #15
 800a4e2:	4604      	mov	r4, r0
 800a4e4:	d005      	beq.n	800a4f2 <_strtod_l+0x72>
 800a4e6:	2e06      	cmp	r6, #6
 800a4e8:	d128      	bne.n	800a53c <_strtod_l+0xbc>
 800a4ea:	3501      	adds	r5, #1
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	9519      	str	r5, [sp, #100]	@ 0x64
 800a4f0:	930e      	str	r3, [sp, #56]	@ 0x38
 800a4f2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	f040 858e 	bne.w	800b016 <_strtod_l+0xb96>
 800a4fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a4fc:	b1cb      	cbz	r3, 800a532 <_strtod_l+0xb2>
 800a4fe:	4652      	mov	r2, sl
 800a500:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800a504:	ec43 2b10 	vmov	d0, r2, r3
 800a508:	b01f      	add	sp, #124	@ 0x7c
 800a50a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a50e:	2920      	cmp	r1, #32
 800a510:	d1ce      	bne.n	800a4b0 <_strtod_l+0x30>
 800a512:	3201      	adds	r2, #1
 800a514:	e7c1      	b.n	800a49a <_strtod_l+0x1a>
 800a516:	292d      	cmp	r1, #45	@ 0x2d
 800a518:	d1ca      	bne.n	800a4b0 <_strtod_l+0x30>
 800a51a:	2101      	movs	r1, #1
 800a51c:	910e      	str	r1, [sp, #56]	@ 0x38
 800a51e:	1c51      	adds	r1, r2, #1
 800a520:	9119      	str	r1, [sp, #100]	@ 0x64
 800a522:	7852      	ldrb	r2, [r2, #1]
 800a524:	2a00      	cmp	r2, #0
 800a526:	d1c5      	bne.n	800a4b4 <_strtod_l+0x34>
 800a528:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a52a:	9419      	str	r4, [sp, #100]	@ 0x64
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	f040 8570 	bne.w	800b012 <_strtod_l+0xb92>
 800a532:	4652      	mov	r2, sl
 800a534:	465b      	mov	r3, fp
 800a536:	e7e5      	b.n	800a504 <_strtod_l+0x84>
 800a538:	2100      	movs	r1, #0
 800a53a:	e7ef      	b.n	800a51c <_strtod_l+0x9c>
 800a53c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a53e:	b13a      	cbz	r2, 800a550 <_strtod_l+0xd0>
 800a540:	2135      	movs	r1, #53	@ 0x35
 800a542:	a81c      	add	r0, sp, #112	@ 0x70
 800a544:	f7ff ff3a 	bl	800a3bc <__copybits>
 800a548:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a54a:	9805      	ldr	r0, [sp, #20]
 800a54c:	f7ff fb10 	bl	8009b70 <_Bfree>
 800a550:	3e01      	subs	r6, #1
 800a552:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a554:	2e04      	cmp	r6, #4
 800a556:	d806      	bhi.n	800a566 <_strtod_l+0xe6>
 800a558:	e8df f006 	tbb	[pc, r6]
 800a55c:	201d0314 	.word	0x201d0314
 800a560:	14          	.byte	0x14
 800a561:	00          	.byte	0x00
 800a562:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800a566:	05e1      	lsls	r1, r4, #23
 800a568:	bf48      	it	mi
 800a56a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a56e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a572:	0d1b      	lsrs	r3, r3, #20
 800a574:	051b      	lsls	r3, r3, #20
 800a576:	2b00      	cmp	r3, #0
 800a578:	d1bb      	bne.n	800a4f2 <_strtod_l+0x72>
 800a57a:	f7fe fb1d 	bl	8008bb8 <__errno>
 800a57e:	2322      	movs	r3, #34	@ 0x22
 800a580:	6003      	str	r3, [r0, #0]
 800a582:	e7b6      	b.n	800a4f2 <_strtod_l+0x72>
 800a584:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800a588:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a58c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a590:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a594:	e7e7      	b.n	800a566 <_strtod_l+0xe6>
 800a596:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800a718 <_strtod_l+0x298>
 800a59a:	e7e4      	b.n	800a566 <_strtod_l+0xe6>
 800a59c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a5a0:	f04f 3aff 	mov.w	sl, #4294967295
 800a5a4:	e7df      	b.n	800a566 <_strtod_l+0xe6>
 800a5a6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a5a8:	1c5a      	adds	r2, r3, #1
 800a5aa:	9219      	str	r2, [sp, #100]	@ 0x64
 800a5ac:	785b      	ldrb	r3, [r3, #1]
 800a5ae:	2b30      	cmp	r3, #48	@ 0x30
 800a5b0:	d0f9      	beq.n	800a5a6 <_strtod_l+0x126>
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d09d      	beq.n	800a4f2 <_strtod_l+0x72>
 800a5b6:	2301      	movs	r3, #1
 800a5b8:	2700      	movs	r7, #0
 800a5ba:	9308      	str	r3, [sp, #32]
 800a5bc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a5be:	930c      	str	r3, [sp, #48]	@ 0x30
 800a5c0:	970b      	str	r7, [sp, #44]	@ 0x2c
 800a5c2:	46b9      	mov	r9, r7
 800a5c4:	220a      	movs	r2, #10
 800a5c6:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a5c8:	7805      	ldrb	r5, [r0, #0]
 800a5ca:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800a5ce:	b2d9      	uxtb	r1, r3
 800a5d0:	2909      	cmp	r1, #9
 800a5d2:	d928      	bls.n	800a626 <_strtod_l+0x1a6>
 800a5d4:	494f      	ldr	r1, [pc, #316]	@ (800a714 <_strtod_l+0x294>)
 800a5d6:	2201      	movs	r2, #1
 800a5d8:	f001 fb67 	bl	800bcaa <strncmp>
 800a5dc:	2800      	cmp	r0, #0
 800a5de:	d032      	beq.n	800a646 <_strtod_l+0x1c6>
 800a5e0:	2000      	movs	r0, #0
 800a5e2:	462a      	mov	r2, r5
 800a5e4:	900a      	str	r0, [sp, #40]	@ 0x28
 800a5e6:	464d      	mov	r5, r9
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	2a65      	cmp	r2, #101	@ 0x65
 800a5ec:	d001      	beq.n	800a5f2 <_strtod_l+0x172>
 800a5ee:	2a45      	cmp	r2, #69	@ 0x45
 800a5f0:	d114      	bne.n	800a61c <_strtod_l+0x19c>
 800a5f2:	b91d      	cbnz	r5, 800a5fc <_strtod_l+0x17c>
 800a5f4:	9a08      	ldr	r2, [sp, #32]
 800a5f6:	4302      	orrs	r2, r0
 800a5f8:	d096      	beq.n	800a528 <_strtod_l+0xa8>
 800a5fa:	2500      	movs	r5, #0
 800a5fc:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800a5fe:	1c62      	adds	r2, r4, #1
 800a600:	9219      	str	r2, [sp, #100]	@ 0x64
 800a602:	7862      	ldrb	r2, [r4, #1]
 800a604:	2a2b      	cmp	r2, #43	@ 0x2b
 800a606:	d07a      	beq.n	800a6fe <_strtod_l+0x27e>
 800a608:	2a2d      	cmp	r2, #45	@ 0x2d
 800a60a:	d07e      	beq.n	800a70a <_strtod_l+0x28a>
 800a60c:	f04f 0c00 	mov.w	ip, #0
 800a610:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a614:	2909      	cmp	r1, #9
 800a616:	f240 8085 	bls.w	800a724 <_strtod_l+0x2a4>
 800a61a:	9419      	str	r4, [sp, #100]	@ 0x64
 800a61c:	f04f 0800 	mov.w	r8, #0
 800a620:	e0a5      	b.n	800a76e <_strtod_l+0x2ee>
 800a622:	2300      	movs	r3, #0
 800a624:	e7c8      	b.n	800a5b8 <_strtod_l+0x138>
 800a626:	f1b9 0f08 	cmp.w	r9, #8
 800a62a:	bfd8      	it	le
 800a62c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800a62e:	f100 0001 	add.w	r0, r0, #1
 800a632:	bfda      	itte	le
 800a634:	fb02 3301 	mlale	r3, r2, r1, r3
 800a638:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800a63a:	fb02 3707 	mlagt	r7, r2, r7, r3
 800a63e:	f109 0901 	add.w	r9, r9, #1
 800a642:	9019      	str	r0, [sp, #100]	@ 0x64
 800a644:	e7bf      	b.n	800a5c6 <_strtod_l+0x146>
 800a646:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a648:	1c5a      	adds	r2, r3, #1
 800a64a:	9219      	str	r2, [sp, #100]	@ 0x64
 800a64c:	785a      	ldrb	r2, [r3, #1]
 800a64e:	f1b9 0f00 	cmp.w	r9, #0
 800a652:	d03b      	beq.n	800a6cc <_strtod_l+0x24c>
 800a654:	900a      	str	r0, [sp, #40]	@ 0x28
 800a656:	464d      	mov	r5, r9
 800a658:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800a65c:	2b09      	cmp	r3, #9
 800a65e:	d912      	bls.n	800a686 <_strtod_l+0x206>
 800a660:	2301      	movs	r3, #1
 800a662:	e7c2      	b.n	800a5ea <_strtod_l+0x16a>
 800a664:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a666:	1c5a      	adds	r2, r3, #1
 800a668:	9219      	str	r2, [sp, #100]	@ 0x64
 800a66a:	785a      	ldrb	r2, [r3, #1]
 800a66c:	3001      	adds	r0, #1
 800a66e:	2a30      	cmp	r2, #48	@ 0x30
 800a670:	d0f8      	beq.n	800a664 <_strtod_l+0x1e4>
 800a672:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a676:	2b08      	cmp	r3, #8
 800a678:	f200 84d2 	bhi.w	800b020 <_strtod_l+0xba0>
 800a67c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a67e:	900a      	str	r0, [sp, #40]	@ 0x28
 800a680:	2000      	movs	r0, #0
 800a682:	930c      	str	r3, [sp, #48]	@ 0x30
 800a684:	4605      	mov	r5, r0
 800a686:	3a30      	subs	r2, #48	@ 0x30
 800a688:	f100 0301 	add.w	r3, r0, #1
 800a68c:	d018      	beq.n	800a6c0 <_strtod_l+0x240>
 800a68e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a690:	4419      	add	r1, r3
 800a692:	910a      	str	r1, [sp, #40]	@ 0x28
 800a694:	462e      	mov	r6, r5
 800a696:	f04f 0e0a 	mov.w	lr, #10
 800a69a:	1c71      	adds	r1, r6, #1
 800a69c:	eba1 0c05 	sub.w	ip, r1, r5
 800a6a0:	4563      	cmp	r3, ip
 800a6a2:	dc15      	bgt.n	800a6d0 <_strtod_l+0x250>
 800a6a4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800a6a8:	182b      	adds	r3, r5, r0
 800a6aa:	2b08      	cmp	r3, #8
 800a6ac:	f105 0501 	add.w	r5, r5, #1
 800a6b0:	4405      	add	r5, r0
 800a6b2:	dc1a      	bgt.n	800a6ea <_strtod_l+0x26a>
 800a6b4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a6b6:	230a      	movs	r3, #10
 800a6b8:	fb03 2301 	mla	r3, r3, r1, r2
 800a6bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a6be:	2300      	movs	r3, #0
 800a6c0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a6c2:	1c51      	adds	r1, r2, #1
 800a6c4:	9119      	str	r1, [sp, #100]	@ 0x64
 800a6c6:	7852      	ldrb	r2, [r2, #1]
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	e7c5      	b.n	800a658 <_strtod_l+0x1d8>
 800a6cc:	4648      	mov	r0, r9
 800a6ce:	e7ce      	b.n	800a66e <_strtod_l+0x1ee>
 800a6d0:	2e08      	cmp	r6, #8
 800a6d2:	dc05      	bgt.n	800a6e0 <_strtod_l+0x260>
 800a6d4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800a6d6:	fb0e f606 	mul.w	r6, lr, r6
 800a6da:	960b      	str	r6, [sp, #44]	@ 0x2c
 800a6dc:	460e      	mov	r6, r1
 800a6de:	e7dc      	b.n	800a69a <_strtod_l+0x21a>
 800a6e0:	2910      	cmp	r1, #16
 800a6e2:	bfd8      	it	le
 800a6e4:	fb0e f707 	mulle.w	r7, lr, r7
 800a6e8:	e7f8      	b.n	800a6dc <_strtod_l+0x25c>
 800a6ea:	2b0f      	cmp	r3, #15
 800a6ec:	bfdc      	itt	le
 800a6ee:	230a      	movle	r3, #10
 800a6f0:	fb03 2707 	mlale	r7, r3, r7, r2
 800a6f4:	e7e3      	b.n	800a6be <_strtod_l+0x23e>
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	930a      	str	r3, [sp, #40]	@ 0x28
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	e77a      	b.n	800a5f4 <_strtod_l+0x174>
 800a6fe:	f04f 0c00 	mov.w	ip, #0
 800a702:	1ca2      	adds	r2, r4, #2
 800a704:	9219      	str	r2, [sp, #100]	@ 0x64
 800a706:	78a2      	ldrb	r2, [r4, #2]
 800a708:	e782      	b.n	800a610 <_strtod_l+0x190>
 800a70a:	f04f 0c01 	mov.w	ip, #1
 800a70e:	e7f8      	b.n	800a702 <_strtod_l+0x282>
 800a710:	0800d54c 	.word	0x0800d54c
 800a714:	0800d365 	.word	0x0800d365
 800a718:	7ff00000 	.word	0x7ff00000
 800a71c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a71e:	1c51      	adds	r1, r2, #1
 800a720:	9119      	str	r1, [sp, #100]	@ 0x64
 800a722:	7852      	ldrb	r2, [r2, #1]
 800a724:	2a30      	cmp	r2, #48	@ 0x30
 800a726:	d0f9      	beq.n	800a71c <_strtod_l+0x29c>
 800a728:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a72c:	2908      	cmp	r1, #8
 800a72e:	f63f af75 	bhi.w	800a61c <_strtod_l+0x19c>
 800a732:	3a30      	subs	r2, #48	@ 0x30
 800a734:	9209      	str	r2, [sp, #36]	@ 0x24
 800a736:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a738:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a73a:	f04f 080a 	mov.w	r8, #10
 800a73e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a740:	1c56      	adds	r6, r2, #1
 800a742:	9619      	str	r6, [sp, #100]	@ 0x64
 800a744:	7852      	ldrb	r2, [r2, #1]
 800a746:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a74a:	f1be 0f09 	cmp.w	lr, #9
 800a74e:	d939      	bls.n	800a7c4 <_strtod_l+0x344>
 800a750:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a752:	1a76      	subs	r6, r6, r1
 800a754:	2e08      	cmp	r6, #8
 800a756:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a75a:	dc03      	bgt.n	800a764 <_strtod_l+0x2e4>
 800a75c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a75e:	4588      	cmp	r8, r1
 800a760:	bfa8      	it	ge
 800a762:	4688      	movge	r8, r1
 800a764:	f1bc 0f00 	cmp.w	ip, #0
 800a768:	d001      	beq.n	800a76e <_strtod_l+0x2ee>
 800a76a:	f1c8 0800 	rsb	r8, r8, #0
 800a76e:	2d00      	cmp	r5, #0
 800a770:	d14e      	bne.n	800a810 <_strtod_l+0x390>
 800a772:	9908      	ldr	r1, [sp, #32]
 800a774:	4308      	orrs	r0, r1
 800a776:	f47f aebc 	bne.w	800a4f2 <_strtod_l+0x72>
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	f47f aed4 	bne.w	800a528 <_strtod_l+0xa8>
 800a780:	2a69      	cmp	r2, #105	@ 0x69
 800a782:	d028      	beq.n	800a7d6 <_strtod_l+0x356>
 800a784:	dc25      	bgt.n	800a7d2 <_strtod_l+0x352>
 800a786:	2a49      	cmp	r2, #73	@ 0x49
 800a788:	d025      	beq.n	800a7d6 <_strtod_l+0x356>
 800a78a:	2a4e      	cmp	r2, #78	@ 0x4e
 800a78c:	f47f aecc 	bne.w	800a528 <_strtod_l+0xa8>
 800a790:	499a      	ldr	r1, [pc, #616]	@ (800a9fc <_strtod_l+0x57c>)
 800a792:	a819      	add	r0, sp, #100	@ 0x64
 800a794:	f001 fd70 	bl	800c278 <__match>
 800a798:	2800      	cmp	r0, #0
 800a79a:	f43f aec5 	beq.w	800a528 <_strtod_l+0xa8>
 800a79e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a7a0:	781b      	ldrb	r3, [r3, #0]
 800a7a2:	2b28      	cmp	r3, #40	@ 0x28
 800a7a4:	d12e      	bne.n	800a804 <_strtod_l+0x384>
 800a7a6:	4996      	ldr	r1, [pc, #600]	@ (800aa00 <_strtod_l+0x580>)
 800a7a8:	aa1c      	add	r2, sp, #112	@ 0x70
 800a7aa:	a819      	add	r0, sp, #100	@ 0x64
 800a7ac:	f001 fd78 	bl	800c2a0 <__hexnan>
 800a7b0:	2805      	cmp	r0, #5
 800a7b2:	d127      	bne.n	800a804 <_strtod_l+0x384>
 800a7b4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a7b6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a7ba:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a7be:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a7c2:	e696      	b.n	800a4f2 <_strtod_l+0x72>
 800a7c4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a7c6:	fb08 2101 	mla	r1, r8, r1, r2
 800a7ca:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a7ce:	9209      	str	r2, [sp, #36]	@ 0x24
 800a7d0:	e7b5      	b.n	800a73e <_strtod_l+0x2be>
 800a7d2:	2a6e      	cmp	r2, #110	@ 0x6e
 800a7d4:	e7da      	b.n	800a78c <_strtod_l+0x30c>
 800a7d6:	498b      	ldr	r1, [pc, #556]	@ (800aa04 <_strtod_l+0x584>)
 800a7d8:	a819      	add	r0, sp, #100	@ 0x64
 800a7da:	f001 fd4d 	bl	800c278 <__match>
 800a7de:	2800      	cmp	r0, #0
 800a7e0:	f43f aea2 	beq.w	800a528 <_strtod_l+0xa8>
 800a7e4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a7e6:	4988      	ldr	r1, [pc, #544]	@ (800aa08 <_strtod_l+0x588>)
 800a7e8:	3b01      	subs	r3, #1
 800a7ea:	a819      	add	r0, sp, #100	@ 0x64
 800a7ec:	9319      	str	r3, [sp, #100]	@ 0x64
 800a7ee:	f001 fd43 	bl	800c278 <__match>
 800a7f2:	b910      	cbnz	r0, 800a7fa <_strtod_l+0x37a>
 800a7f4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a7f6:	3301      	adds	r3, #1
 800a7f8:	9319      	str	r3, [sp, #100]	@ 0x64
 800a7fa:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800aa18 <_strtod_l+0x598>
 800a7fe:	f04f 0a00 	mov.w	sl, #0
 800a802:	e676      	b.n	800a4f2 <_strtod_l+0x72>
 800a804:	4881      	ldr	r0, [pc, #516]	@ (800aa0c <_strtod_l+0x58c>)
 800a806:	f001 fa73 	bl	800bcf0 <nan>
 800a80a:	ec5b ab10 	vmov	sl, fp, d0
 800a80e:	e670      	b.n	800a4f2 <_strtod_l+0x72>
 800a810:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a812:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800a814:	eba8 0303 	sub.w	r3, r8, r3
 800a818:	f1b9 0f00 	cmp.w	r9, #0
 800a81c:	bf08      	it	eq
 800a81e:	46a9      	moveq	r9, r5
 800a820:	2d10      	cmp	r5, #16
 800a822:	9309      	str	r3, [sp, #36]	@ 0x24
 800a824:	462c      	mov	r4, r5
 800a826:	bfa8      	it	ge
 800a828:	2410      	movge	r4, #16
 800a82a:	f7f5 fe6b 	bl	8000504 <__aeabi_ui2d>
 800a82e:	2d09      	cmp	r5, #9
 800a830:	4682      	mov	sl, r0
 800a832:	468b      	mov	fp, r1
 800a834:	dc13      	bgt.n	800a85e <_strtod_l+0x3de>
 800a836:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a838:	2b00      	cmp	r3, #0
 800a83a:	f43f ae5a 	beq.w	800a4f2 <_strtod_l+0x72>
 800a83e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a840:	dd78      	ble.n	800a934 <_strtod_l+0x4b4>
 800a842:	2b16      	cmp	r3, #22
 800a844:	dc5f      	bgt.n	800a906 <_strtod_l+0x486>
 800a846:	4972      	ldr	r1, [pc, #456]	@ (800aa10 <_strtod_l+0x590>)
 800a848:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a84c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a850:	4652      	mov	r2, sl
 800a852:	465b      	mov	r3, fp
 800a854:	f7f5 fed0 	bl	80005f8 <__aeabi_dmul>
 800a858:	4682      	mov	sl, r0
 800a85a:	468b      	mov	fp, r1
 800a85c:	e649      	b.n	800a4f2 <_strtod_l+0x72>
 800a85e:	4b6c      	ldr	r3, [pc, #432]	@ (800aa10 <_strtod_l+0x590>)
 800a860:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a864:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a868:	f7f5 fec6 	bl	80005f8 <__aeabi_dmul>
 800a86c:	4682      	mov	sl, r0
 800a86e:	4638      	mov	r0, r7
 800a870:	468b      	mov	fp, r1
 800a872:	f7f5 fe47 	bl	8000504 <__aeabi_ui2d>
 800a876:	4602      	mov	r2, r0
 800a878:	460b      	mov	r3, r1
 800a87a:	4650      	mov	r0, sl
 800a87c:	4659      	mov	r1, fp
 800a87e:	f7f5 fd05 	bl	800028c <__adddf3>
 800a882:	2d0f      	cmp	r5, #15
 800a884:	4682      	mov	sl, r0
 800a886:	468b      	mov	fp, r1
 800a888:	ddd5      	ble.n	800a836 <_strtod_l+0x3b6>
 800a88a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a88c:	1b2c      	subs	r4, r5, r4
 800a88e:	441c      	add	r4, r3
 800a890:	2c00      	cmp	r4, #0
 800a892:	f340 8093 	ble.w	800a9bc <_strtod_l+0x53c>
 800a896:	f014 030f 	ands.w	r3, r4, #15
 800a89a:	d00a      	beq.n	800a8b2 <_strtod_l+0x432>
 800a89c:	495c      	ldr	r1, [pc, #368]	@ (800aa10 <_strtod_l+0x590>)
 800a89e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a8a2:	4652      	mov	r2, sl
 800a8a4:	465b      	mov	r3, fp
 800a8a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a8aa:	f7f5 fea5 	bl	80005f8 <__aeabi_dmul>
 800a8ae:	4682      	mov	sl, r0
 800a8b0:	468b      	mov	fp, r1
 800a8b2:	f034 040f 	bics.w	r4, r4, #15
 800a8b6:	d073      	beq.n	800a9a0 <_strtod_l+0x520>
 800a8b8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a8bc:	dd49      	ble.n	800a952 <_strtod_l+0x4d2>
 800a8be:	2400      	movs	r4, #0
 800a8c0:	46a0      	mov	r8, r4
 800a8c2:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a8c4:	46a1      	mov	r9, r4
 800a8c6:	9a05      	ldr	r2, [sp, #20]
 800a8c8:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800aa18 <_strtod_l+0x598>
 800a8cc:	2322      	movs	r3, #34	@ 0x22
 800a8ce:	6013      	str	r3, [r2, #0]
 800a8d0:	f04f 0a00 	mov.w	sl, #0
 800a8d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	f43f ae0b 	beq.w	800a4f2 <_strtod_l+0x72>
 800a8dc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a8de:	9805      	ldr	r0, [sp, #20]
 800a8e0:	f7ff f946 	bl	8009b70 <_Bfree>
 800a8e4:	9805      	ldr	r0, [sp, #20]
 800a8e6:	4649      	mov	r1, r9
 800a8e8:	f7ff f942 	bl	8009b70 <_Bfree>
 800a8ec:	9805      	ldr	r0, [sp, #20]
 800a8ee:	4641      	mov	r1, r8
 800a8f0:	f7ff f93e 	bl	8009b70 <_Bfree>
 800a8f4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a8f6:	9805      	ldr	r0, [sp, #20]
 800a8f8:	f7ff f93a 	bl	8009b70 <_Bfree>
 800a8fc:	9805      	ldr	r0, [sp, #20]
 800a8fe:	4621      	mov	r1, r4
 800a900:	f7ff f936 	bl	8009b70 <_Bfree>
 800a904:	e5f5      	b.n	800a4f2 <_strtod_l+0x72>
 800a906:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a908:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a90c:	4293      	cmp	r3, r2
 800a90e:	dbbc      	blt.n	800a88a <_strtod_l+0x40a>
 800a910:	4c3f      	ldr	r4, [pc, #252]	@ (800aa10 <_strtod_l+0x590>)
 800a912:	f1c5 050f 	rsb	r5, r5, #15
 800a916:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a91a:	4652      	mov	r2, sl
 800a91c:	465b      	mov	r3, fp
 800a91e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a922:	f7f5 fe69 	bl	80005f8 <__aeabi_dmul>
 800a926:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a928:	1b5d      	subs	r5, r3, r5
 800a92a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a92e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a932:	e78f      	b.n	800a854 <_strtod_l+0x3d4>
 800a934:	3316      	adds	r3, #22
 800a936:	dba8      	blt.n	800a88a <_strtod_l+0x40a>
 800a938:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a93a:	eba3 0808 	sub.w	r8, r3, r8
 800a93e:	4b34      	ldr	r3, [pc, #208]	@ (800aa10 <_strtod_l+0x590>)
 800a940:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a944:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a948:	4650      	mov	r0, sl
 800a94a:	4659      	mov	r1, fp
 800a94c:	f7f5 ff7e 	bl	800084c <__aeabi_ddiv>
 800a950:	e782      	b.n	800a858 <_strtod_l+0x3d8>
 800a952:	2300      	movs	r3, #0
 800a954:	4f2f      	ldr	r7, [pc, #188]	@ (800aa14 <_strtod_l+0x594>)
 800a956:	1124      	asrs	r4, r4, #4
 800a958:	4650      	mov	r0, sl
 800a95a:	4659      	mov	r1, fp
 800a95c:	461e      	mov	r6, r3
 800a95e:	2c01      	cmp	r4, #1
 800a960:	dc21      	bgt.n	800a9a6 <_strtod_l+0x526>
 800a962:	b10b      	cbz	r3, 800a968 <_strtod_l+0x4e8>
 800a964:	4682      	mov	sl, r0
 800a966:	468b      	mov	fp, r1
 800a968:	492a      	ldr	r1, [pc, #168]	@ (800aa14 <_strtod_l+0x594>)
 800a96a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a96e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a972:	4652      	mov	r2, sl
 800a974:	465b      	mov	r3, fp
 800a976:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a97a:	f7f5 fe3d 	bl	80005f8 <__aeabi_dmul>
 800a97e:	4b26      	ldr	r3, [pc, #152]	@ (800aa18 <_strtod_l+0x598>)
 800a980:	460a      	mov	r2, r1
 800a982:	400b      	ands	r3, r1
 800a984:	4925      	ldr	r1, [pc, #148]	@ (800aa1c <_strtod_l+0x59c>)
 800a986:	428b      	cmp	r3, r1
 800a988:	4682      	mov	sl, r0
 800a98a:	d898      	bhi.n	800a8be <_strtod_l+0x43e>
 800a98c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a990:	428b      	cmp	r3, r1
 800a992:	bf86      	itte	hi
 800a994:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800aa20 <_strtod_l+0x5a0>
 800a998:	f04f 3aff 	movhi.w	sl, #4294967295
 800a99c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	9308      	str	r3, [sp, #32]
 800a9a4:	e076      	b.n	800aa94 <_strtod_l+0x614>
 800a9a6:	07e2      	lsls	r2, r4, #31
 800a9a8:	d504      	bpl.n	800a9b4 <_strtod_l+0x534>
 800a9aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a9ae:	f7f5 fe23 	bl	80005f8 <__aeabi_dmul>
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	3601      	adds	r6, #1
 800a9b6:	1064      	asrs	r4, r4, #1
 800a9b8:	3708      	adds	r7, #8
 800a9ba:	e7d0      	b.n	800a95e <_strtod_l+0x4de>
 800a9bc:	d0f0      	beq.n	800a9a0 <_strtod_l+0x520>
 800a9be:	4264      	negs	r4, r4
 800a9c0:	f014 020f 	ands.w	r2, r4, #15
 800a9c4:	d00a      	beq.n	800a9dc <_strtod_l+0x55c>
 800a9c6:	4b12      	ldr	r3, [pc, #72]	@ (800aa10 <_strtod_l+0x590>)
 800a9c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a9cc:	4650      	mov	r0, sl
 800a9ce:	4659      	mov	r1, fp
 800a9d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9d4:	f7f5 ff3a 	bl	800084c <__aeabi_ddiv>
 800a9d8:	4682      	mov	sl, r0
 800a9da:	468b      	mov	fp, r1
 800a9dc:	1124      	asrs	r4, r4, #4
 800a9de:	d0df      	beq.n	800a9a0 <_strtod_l+0x520>
 800a9e0:	2c1f      	cmp	r4, #31
 800a9e2:	dd1f      	ble.n	800aa24 <_strtod_l+0x5a4>
 800a9e4:	2400      	movs	r4, #0
 800a9e6:	46a0      	mov	r8, r4
 800a9e8:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a9ea:	46a1      	mov	r9, r4
 800a9ec:	9a05      	ldr	r2, [sp, #20]
 800a9ee:	2322      	movs	r3, #34	@ 0x22
 800a9f0:	f04f 0a00 	mov.w	sl, #0
 800a9f4:	f04f 0b00 	mov.w	fp, #0
 800a9f8:	6013      	str	r3, [r2, #0]
 800a9fa:	e76b      	b.n	800a8d4 <_strtod_l+0x454>
 800a9fc:	0800d255 	.word	0x0800d255
 800aa00:	0800d538 	.word	0x0800d538
 800aa04:	0800d24d 	.word	0x0800d24d
 800aa08:	0800d282 	.word	0x0800d282
 800aa0c:	0800d3d6 	.word	0x0800d3d6
 800aa10:	0800d470 	.word	0x0800d470
 800aa14:	0800d448 	.word	0x0800d448
 800aa18:	7ff00000 	.word	0x7ff00000
 800aa1c:	7ca00000 	.word	0x7ca00000
 800aa20:	7fefffff 	.word	0x7fefffff
 800aa24:	f014 0310 	ands.w	r3, r4, #16
 800aa28:	bf18      	it	ne
 800aa2a:	236a      	movne	r3, #106	@ 0x6a
 800aa2c:	4ea9      	ldr	r6, [pc, #676]	@ (800acd4 <_strtod_l+0x854>)
 800aa2e:	9308      	str	r3, [sp, #32]
 800aa30:	4650      	mov	r0, sl
 800aa32:	4659      	mov	r1, fp
 800aa34:	2300      	movs	r3, #0
 800aa36:	07e7      	lsls	r7, r4, #31
 800aa38:	d504      	bpl.n	800aa44 <_strtod_l+0x5c4>
 800aa3a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800aa3e:	f7f5 fddb 	bl	80005f8 <__aeabi_dmul>
 800aa42:	2301      	movs	r3, #1
 800aa44:	1064      	asrs	r4, r4, #1
 800aa46:	f106 0608 	add.w	r6, r6, #8
 800aa4a:	d1f4      	bne.n	800aa36 <_strtod_l+0x5b6>
 800aa4c:	b10b      	cbz	r3, 800aa52 <_strtod_l+0x5d2>
 800aa4e:	4682      	mov	sl, r0
 800aa50:	468b      	mov	fp, r1
 800aa52:	9b08      	ldr	r3, [sp, #32]
 800aa54:	b1b3      	cbz	r3, 800aa84 <_strtod_l+0x604>
 800aa56:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800aa5a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	4659      	mov	r1, fp
 800aa62:	dd0f      	ble.n	800aa84 <_strtod_l+0x604>
 800aa64:	2b1f      	cmp	r3, #31
 800aa66:	dd56      	ble.n	800ab16 <_strtod_l+0x696>
 800aa68:	2b34      	cmp	r3, #52	@ 0x34
 800aa6a:	bfde      	ittt	le
 800aa6c:	f04f 33ff 	movle.w	r3, #4294967295
 800aa70:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800aa74:	4093      	lslle	r3, r2
 800aa76:	f04f 0a00 	mov.w	sl, #0
 800aa7a:	bfcc      	ite	gt
 800aa7c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800aa80:	ea03 0b01 	andle.w	fp, r3, r1
 800aa84:	2200      	movs	r2, #0
 800aa86:	2300      	movs	r3, #0
 800aa88:	4650      	mov	r0, sl
 800aa8a:	4659      	mov	r1, fp
 800aa8c:	f7f6 f81c 	bl	8000ac8 <__aeabi_dcmpeq>
 800aa90:	2800      	cmp	r0, #0
 800aa92:	d1a7      	bne.n	800a9e4 <_strtod_l+0x564>
 800aa94:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aa96:	9300      	str	r3, [sp, #0]
 800aa98:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800aa9a:	9805      	ldr	r0, [sp, #20]
 800aa9c:	462b      	mov	r3, r5
 800aa9e:	464a      	mov	r2, r9
 800aaa0:	f7ff f8ce 	bl	8009c40 <__s2b>
 800aaa4:	900b      	str	r0, [sp, #44]	@ 0x2c
 800aaa6:	2800      	cmp	r0, #0
 800aaa8:	f43f af09 	beq.w	800a8be <_strtod_l+0x43e>
 800aaac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aaae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aab0:	2a00      	cmp	r2, #0
 800aab2:	eba3 0308 	sub.w	r3, r3, r8
 800aab6:	bfa8      	it	ge
 800aab8:	2300      	movge	r3, #0
 800aaba:	9312      	str	r3, [sp, #72]	@ 0x48
 800aabc:	2400      	movs	r4, #0
 800aabe:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800aac2:	9316      	str	r3, [sp, #88]	@ 0x58
 800aac4:	46a0      	mov	r8, r4
 800aac6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aac8:	9805      	ldr	r0, [sp, #20]
 800aaca:	6859      	ldr	r1, [r3, #4]
 800aacc:	f7ff f810 	bl	8009af0 <_Balloc>
 800aad0:	4681      	mov	r9, r0
 800aad2:	2800      	cmp	r0, #0
 800aad4:	f43f aef7 	beq.w	800a8c6 <_strtod_l+0x446>
 800aad8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aada:	691a      	ldr	r2, [r3, #16]
 800aadc:	3202      	adds	r2, #2
 800aade:	f103 010c 	add.w	r1, r3, #12
 800aae2:	0092      	lsls	r2, r2, #2
 800aae4:	300c      	adds	r0, #12
 800aae6:	f7fe f894 	bl	8008c12 <memcpy>
 800aaea:	ec4b ab10 	vmov	d0, sl, fp
 800aaee:	9805      	ldr	r0, [sp, #20]
 800aaf0:	aa1c      	add	r2, sp, #112	@ 0x70
 800aaf2:	a91b      	add	r1, sp, #108	@ 0x6c
 800aaf4:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800aaf8:	f7ff fbd6 	bl	800a2a8 <__d2b>
 800aafc:	901a      	str	r0, [sp, #104]	@ 0x68
 800aafe:	2800      	cmp	r0, #0
 800ab00:	f43f aee1 	beq.w	800a8c6 <_strtod_l+0x446>
 800ab04:	9805      	ldr	r0, [sp, #20]
 800ab06:	2101      	movs	r1, #1
 800ab08:	f7ff f930 	bl	8009d6c <__i2b>
 800ab0c:	4680      	mov	r8, r0
 800ab0e:	b948      	cbnz	r0, 800ab24 <_strtod_l+0x6a4>
 800ab10:	f04f 0800 	mov.w	r8, #0
 800ab14:	e6d7      	b.n	800a8c6 <_strtod_l+0x446>
 800ab16:	f04f 32ff 	mov.w	r2, #4294967295
 800ab1a:	fa02 f303 	lsl.w	r3, r2, r3
 800ab1e:	ea03 0a0a 	and.w	sl, r3, sl
 800ab22:	e7af      	b.n	800aa84 <_strtod_l+0x604>
 800ab24:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800ab26:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800ab28:	2d00      	cmp	r5, #0
 800ab2a:	bfab      	itete	ge
 800ab2c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800ab2e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800ab30:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800ab32:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800ab34:	bfac      	ite	ge
 800ab36:	18ef      	addge	r7, r5, r3
 800ab38:	1b5e      	sublt	r6, r3, r5
 800ab3a:	9b08      	ldr	r3, [sp, #32]
 800ab3c:	1aed      	subs	r5, r5, r3
 800ab3e:	4415      	add	r5, r2
 800ab40:	4b65      	ldr	r3, [pc, #404]	@ (800acd8 <_strtod_l+0x858>)
 800ab42:	3d01      	subs	r5, #1
 800ab44:	429d      	cmp	r5, r3
 800ab46:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800ab4a:	da50      	bge.n	800abee <_strtod_l+0x76e>
 800ab4c:	1b5b      	subs	r3, r3, r5
 800ab4e:	2b1f      	cmp	r3, #31
 800ab50:	eba2 0203 	sub.w	r2, r2, r3
 800ab54:	f04f 0101 	mov.w	r1, #1
 800ab58:	dc3d      	bgt.n	800abd6 <_strtod_l+0x756>
 800ab5a:	fa01 f303 	lsl.w	r3, r1, r3
 800ab5e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ab60:	2300      	movs	r3, #0
 800ab62:	9310      	str	r3, [sp, #64]	@ 0x40
 800ab64:	18bd      	adds	r5, r7, r2
 800ab66:	9b08      	ldr	r3, [sp, #32]
 800ab68:	42af      	cmp	r7, r5
 800ab6a:	4416      	add	r6, r2
 800ab6c:	441e      	add	r6, r3
 800ab6e:	463b      	mov	r3, r7
 800ab70:	bfa8      	it	ge
 800ab72:	462b      	movge	r3, r5
 800ab74:	42b3      	cmp	r3, r6
 800ab76:	bfa8      	it	ge
 800ab78:	4633      	movge	r3, r6
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	bfc2      	ittt	gt
 800ab7e:	1aed      	subgt	r5, r5, r3
 800ab80:	1af6      	subgt	r6, r6, r3
 800ab82:	1aff      	subgt	r7, r7, r3
 800ab84:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	dd16      	ble.n	800abb8 <_strtod_l+0x738>
 800ab8a:	4641      	mov	r1, r8
 800ab8c:	9805      	ldr	r0, [sp, #20]
 800ab8e:	461a      	mov	r2, r3
 800ab90:	f7ff f9a4 	bl	8009edc <__pow5mult>
 800ab94:	4680      	mov	r8, r0
 800ab96:	2800      	cmp	r0, #0
 800ab98:	d0ba      	beq.n	800ab10 <_strtod_l+0x690>
 800ab9a:	4601      	mov	r1, r0
 800ab9c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ab9e:	9805      	ldr	r0, [sp, #20]
 800aba0:	f7ff f8fa 	bl	8009d98 <__multiply>
 800aba4:	900a      	str	r0, [sp, #40]	@ 0x28
 800aba6:	2800      	cmp	r0, #0
 800aba8:	f43f ae8d 	beq.w	800a8c6 <_strtod_l+0x446>
 800abac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800abae:	9805      	ldr	r0, [sp, #20]
 800abb0:	f7fe ffde 	bl	8009b70 <_Bfree>
 800abb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800abb6:	931a      	str	r3, [sp, #104]	@ 0x68
 800abb8:	2d00      	cmp	r5, #0
 800abba:	dc1d      	bgt.n	800abf8 <_strtod_l+0x778>
 800abbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	dd23      	ble.n	800ac0a <_strtod_l+0x78a>
 800abc2:	4649      	mov	r1, r9
 800abc4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800abc6:	9805      	ldr	r0, [sp, #20]
 800abc8:	f7ff f988 	bl	8009edc <__pow5mult>
 800abcc:	4681      	mov	r9, r0
 800abce:	b9e0      	cbnz	r0, 800ac0a <_strtod_l+0x78a>
 800abd0:	f04f 0900 	mov.w	r9, #0
 800abd4:	e677      	b.n	800a8c6 <_strtod_l+0x446>
 800abd6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800abda:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800abde:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800abe2:	35e2      	adds	r5, #226	@ 0xe2
 800abe4:	fa01 f305 	lsl.w	r3, r1, r5
 800abe8:	9310      	str	r3, [sp, #64]	@ 0x40
 800abea:	9113      	str	r1, [sp, #76]	@ 0x4c
 800abec:	e7ba      	b.n	800ab64 <_strtod_l+0x6e4>
 800abee:	2300      	movs	r3, #0
 800abf0:	9310      	str	r3, [sp, #64]	@ 0x40
 800abf2:	2301      	movs	r3, #1
 800abf4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800abf6:	e7b5      	b.n	800ab64 <_strtod_l+0x6e4>
 800abf8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800abfa:	9805      	ldr	r0, [sp, #20]
 800abfc:	462a      	mov	r2, r5
 800abfe:	f7ff f9c7 	bl	8009f90 <__lshift>
 800ac02:	901a      	str	r0, [sp, #104]	@ 0x68
 800ac04:	2800      	cmp	r0, #0
 800ac06:	d1d9      	bne.n	800abbc <_strtod_l+0x73c>
 800ac08:	e65d      	b.n	800a8c6 <_strtod_l+0x446>
 800ac0a:	2e00      	cmp	r6, #0
 800ac0c:	dd07      	ble.n	800ac1e <_strtod_l+0x79e>
 800ac0e:	4649      	mov	r1, r9
 800ac10:	9805      	ldr	r0, [sp, #20]
 800ac12:	4632      	mov	r2, r6
 800ac14:	f7ff f9bc 	bl	8009f90 <__lshift>
 800ac18:	4681      	mov	r9, r0
 800ac1a:	2800      	cmp	r0, #0
 800ac1c:	d0d8      	beq.n	800abd0 <_strtod_l+0x750>
 800ac1e:	2f00      	cmp	r7, #0
 800ac20:	dd08      	ble.n	800ac34 <_strtod_l+0x7b4>
 800ac22:	4641      	mov	r1, r8
 800ac24:	9805      	ldr	r0, [sp, #20]
 800ac26:	463a      	mov	r2, r7
 800ac28:	f7ff f9b2 	bl	8009f90 <__lshift>
 800ac2c:	4680      	mov	r8, r0
 800ac2e:	2800      	cmp	r0, #0
 800ac30:	f43f ae49 	beq.w	800a8c6 <_strtod_l+0x446>
 800ac34:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ac36:	9805      	ldr	r0, [sp, #20]
 800ac38:	464a      	mov	r2, r9
 800ac3a:	f7ff fa31 	bl	800a0a0 <__mdiff>
 800ac3e:	4604      	mov	r4, r0
 800ac40:	2800      	cmp	r0, #0
 800ac42:	f43f ae40 	beq.w	800a8c6 <_strtod_l+0x446>
 800ac46:	68c3      	ldr	r3, [r0, #12]
 800ac48:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	60c3      	str	r3, [r0, #12]
 800ac4e:	4641      	mov	r1, r8
 800ac50:	f7ff fa0a 	bl	800a068 <__mcmp>
 800ac54:	2800      	cmp	r0, #0
 800ac56:	da45      	bge.n	800ace4 <_strtod_l+0x864>
 800ac58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac5a:	ea53 030a 	orrs.w	r3, r3, sl
 800ac5e:	d16b      	bne.n	800ad38 <_strtod_l+0x8b8>
 800ac60:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d167      	bne.n	800ad38 <_strtod_l+0x8b8>
 800ac68:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ac6c:	0d1b      	lsrs	r3, r3, #20
 800ac6e:	051b      	lsls	r3, r3, #20
 800ac70:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ac74:	d960      	bls.n	800ad38 <_strtod_l+0x8b8>
 800ac76:	6963      	ldr	r3, [r4, #20]
 800ac78:	b913      	cbnz	r3, 800ac80 <_strtod_l+0x800>
 800ac7a:	6923      	ldr	r3, [r4, #16]
 800ac7c:	2b01      	cmp	r3, #1
 800ac7e:	dd5b      	ble.n	800ad38 <_strtod_l+0x8b8>
 800ac80:	4621      	mov	r1, r4
 800ac82:	2201      	movs	r2, #1
 800ac84:	9805      	ldr	r0, [sp, #20]
 800ac86:	f7ff f983 	bl	8009f90 <__lshift>
 800ac8a:	4641      	mov	r1, r8
 800ac8c:	4604      	mov	r4, r0
 800ac8e:	f7ff f9eb 	bl	800a068 <__mcmp>
 800ac92:	2800      	cmp	r0, #0
 800ac94:	dd50      	ble.n	800ad38 <_strtod_l+0x8b8>
 800ac96:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ac9a:	9a08      	ldr	r2, [sp, #32]
 800ac9c:	0d1b      	lsrs	r3, r3, #20
 800ac9e:	051b      	lsls	r3, r3, #20
 800aca0:	2a00      	cmp	r2, #0
 800aca2:	d06a      	beq.n	800ad7a <_strtod_l+0x8fa>
 800aca4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800aca8:	d867      	bhi.n	800ad7a <_strtod_l+0x8fa>
 800acaa:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800acae:	f67f ae9d 	bls.w	800a9ec <_strtod_l+0x56c>
 800acb2:	4b0a      	ldr	r3, [pc, #40]	@ (800acdc <_strtod_l+0x85c>)
 800acb4:	4650      	mov	r0, sl
 800acb6:	4659      	mov	r1, fp
 800acb8:	2200      	movs	r2, #0
 800acba:	f7f5 fc9d 	bl	80005f8 <__aeabi_dmul>
 800acbe:	4b08      	ldr	r3, [pc, #32]	@ (800ace0 <_strtod_l+0x860>)
 800acc0:	400b      	ands	r3, r1
 800acc2:	4682      	mov	sl, r0
 800acc4:	468b      	mov	fp, r1
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	f47f ae08 	bne.w	800a8dc <_strtod_l+0x45c>
 800accc:	9a05      	ldr	r2, [sp, #20]
 800acce:	2322      	movs	r3, #34	@ 0x22
 800acd0:	6013      	str	r3, [r2, #0]
 800acd2:	e603      	b.n	800a8dc <_strtod_l+0x45c>
 800acd4:	0800d560 	.word	0x0800d560
 800acd8:	fffffc02 	.word	0xfffffc02
 800acdc:	39500000 	.word	0x39500000
 800ace0:	7ff00000 	.word	0x7ff00000
 800ace4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800ace8:	d165      	bne.n	800adb6 <_strtod_l+0x936>
 800acea:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800acec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800acf0:	b35a      	cbz	r2, 800ad4a <_strtod_l+0x8ca>
 800acf2:	4a9f      	ldr	r2, [pc, #636]	@ (800af70 <_strtod_l+0xaf0>)
 800acf4:	4293      	cmp	r3, r2
 800acf6:	d12b      	bne.n	800ad50 <_strtod_l+0x8d0>
 800acf8:	9b08      	ldr	r3, [sp, #32]
 800acfa:	4651      	mov	r1, sl
 800acfc:	b303      	cbz	r3, 800ad40 <_strtod_l+0x8c0>
 800acfe:	4b9d      	ldr	r3, [pc, #628]	@ (800af74 <_strtod_l+0xaf4>)
 800ad00:	465a      	mov	r2, fp
 800ad02:	4013      	ands	r3, r2
 800ad04:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800ad08:	f04f 32ff 	mov.w	r2, #4294967295
 800ad0c:	d81b      	bhi.n	800ad46 <_strtod_l+0x8c6>
 800ad0e:	0d1b      	lsrs	r3, r3, #20
 800ad10:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ad14:	fa02 f303 	lsl.w	r3, r2, r3
 800ad18:	4299      	cmp	r1, r3
 800ad1a:	d119      	bne.n	800ad50 <_strtod_l+0x8d0>
 800ad1c:	4b96      	ldr	r3, [pc, #600]	@ (800af78 <_strtod_l+0xaf8>)
 800ad1e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ad20:	429a      	cmp	r2, r3
 800ad22:	d102      	bne.n	800ad2a <_strtod_l+0x8aa>
 800ad24:	3101      	adds	r1, #1
 800ad26:	f43f adce 	beq.w	800a8c6 <_strtod_l+0x446>
 800ad2a:	4b92      	ldr	r3, [pc, #584]	@ (800af74 <_strtod_l+0xaf4>)
 800ad2c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ad2e:	401a      	ands	r2, r3
 800ad30:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800ad34:	f04f 0a00 	mov.w	sl, #0
 800ad38:	9b08      	ldr	r3, [sp, #32]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d1b9      	bne.n	800acb2 <_strtod_l+0x832>
 800ad3e:	e5cd      	b.n	800a8dc <_strtod_l+0x45c>
 800ad40:	f04f 33ff 	mov.w	r3, #4294967295
 800ad44:	e7e8      	b.n	800ad18 <_strtod_l+0x898>
 800ad46:	4613      	mov	r3, r2
 800ad48:	e7e6      	b.n	800ad18 <_strtod_l+0x898>
 800ad4a:	ea53 030a 	orrs.w	r3, r3, sl
 800ad4e:	d0a2      	beq.n	800ac96 <_strtod_l+0x816>
 800ad50:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ad52:	b1db      	cbz	r3, 800ad8c <_strtod_l+0x90c>
 800ad54:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ad56:	4213      	tst	r3, r2
 800ad58:	d0ee      	beq.n	800ad38 <_strtod_l+0x8b8>
 800ad5a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad5c:	9a08      	ldr	r2, [sp, #32]
 800ad5e:	4650      	mov	r0, sl
 800ad60:	4659      	mov	r1, fp
 800ad62:	b1bb      	cbz	r3, 800ad94 <_strtod_l+0x914>
 800ad64:	f7ff fb6e 	bl	800a444 <sulp>
 800ad68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ad6c:	ec53 2b10 	vmov	r2, r3, d0
 800ad70:	f7f5 fa8c 	bl	800028c <__adddf3>
 800ad74:	4682      	mov	sl, r0
 800ad76:	468b      	mov	fp, r1
 800ad78:	e7de      	b.n	800ad38 <_strtod_l+0x8b8>
 800ad7a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800ad7e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ad82:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ad86:	f04f 3aff 	mov.w	sl, #4294967295
 800ad8a:	e7d5      	b.n	800ad38 <_strtod_l+0x8b8>
 800ad8c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ad8e:	ea13 0f0a 	tst.w	r3, sl
 800ad92:	e7e1      	b.n	800ad58 <_strtod_l+0x8d8>
 800ad94:	f7ff fb56 	bl	800a444 <sulp>
 800ad98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ad9c:	ec53 2b10 	vmov	r2, r3, d0
 800ada0:	f7f5 fa72 	bl	8000288 <__aeabi_dsub>
 800ada4:	2200      	movs	r2, #0
 800ada6:	2300      	movs	r3, #0
 800ada8:	4682      	mov	sl, r0
 800adaa:	468b      	mov	fp, r1
 800adac:	f7f5 fe8c 	bl	8000ac8 <__aeabi_dcmpeq>
 800adb0:	2800      	cmp	r0, #0
 800adb2:	d0c1      	beq.n	800ad38 <_strtod_l+0x8b8>
 800adb4:	e61a      	b.n	800a9ec <_strtod_l+0x56c>
 800adb6:	4641      	mov	r1, r8
 800adb8:	4620      	mov	r0, r4
 800adba:	f7ff facd 	bl	800a358 <__ratio>
 800adbe:	ec57 6b10 	vmov	r6, r7, d0
 800adc2:	2200      	movs	r2, #0
 800adc4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800adc8:	4630      	mov	r0, r6
 800adca:	4639      	mov	r1, r7
 800adcc:	f7f5 fe90 	bl	8000af0 <__aeabi_dcmple>
 800add0:	2800      	cmp	r0, #0
 800add2:	d06f      	beq.n	800aeb4 <_strtod_l+0xa34>
 800add4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800add6:	2b00      	cmp	r3, #0
 800add8:	d17a      	bne.n	800aed0 <_strtod_l+0xa50>
 800adda:	f1ba 0f00 	cmp.w	sl, #0
 800adde:	d158      	bne.n	800ae92 <_strtod_l+0xa12>
 800ade0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ade2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d15a      	bne.n	800aea0 <_strtod_l+0xa20>
 800adea:	4b64      	ldr	r3, [pc, #400]	@ (800af7c <_strtod_l+0xafc>)
 800adec:	2200      	movs	r2, #0
 800adee:	4630      	mov	r0, r6
 800adf0:	4639      	mov	r1, r7
 800adf2:	f7f5 fe73 	bl	8000adc <__aeabi_dcmplt>
 800adf6:	2800      	cmp	r0, #0
 800adf8:	d159      	bne.n	800aeae <_strtod_l+0xa2e>
 800adfa:	4630      	mov	r0, r6
 800adfc:	4639      	mov	r1, r7
 800adfe:	4b60      	ldr	r3, [pc, #384]	@ (800af80 <_strtod_l+0xb00>)
 800ae00:	2200      	movs	r2, #0
 800ae02:	f7f5 fbf9 	bl	80005f8 <__aeabi_dmul>
 800ae06:	4606      	mov	r6, r0
 800ae08:	460f      	mov	r7, r1
 800ae0a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800ae0e:	9606      	str	r6, [sp, #24]
 800ae10:	9307      	str	r3, [sp, #28]
 800ae12:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ae16:	4d57      	ldr	r5, [pc, #348]	@ (800af74 <_strtod_l+0xaf4>)
 800ae18:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ae1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae1e:	401d      	ands	r5, r3
 800ae20:	4b58      	ldr	r3, [pc, #352]	@ (800af84 <_strtod_l+0xb04>)
 800ae22:	429d      	cmp	r5, r3
 800ae24:	f040 80b2 	bne.w	800af8c <_strtod_l+0xb0c>
 800ae28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae2a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800ae2e:	ec4b ab10 	vmov	d0, sl, fp
 800ae32:	f7ff f9c9 	bl	800a1c8 <__ulp>
 800ae36:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ae3a:	ec51 0b10 	vmov	r0, r1, d0
 800ae3e:	f7f5 fbdb 	bl	80005f8 <__aeabi_dmul>
 800ae42:	4652      	mov	r2, sl
 800ae44:	465b      	mov	r3, fp
 800ae46:	f7f5 fa21 	bl	800028c <__adddf3>
 800ae4a:	460b      	mov	r3, r1
 800ae4c:	4949      	ldr	r1, [pc, #292]	@ (800af74 <_strtod_l+0xaf4>)
 800ae4e:	4a4e      	ldr	r2, [pc, #312]	@ (800af88 <_strtod_l+0xb08>)
 800ae50:	4019      	ands	r1, r3
 800ae52:	4291      	cmp	r1, r2
 800ae54:	4682      	mov	sl, r0
 800ae56:	d942      	bls.n	800aede <_strtod_l+0xa5e>
 800ae58:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ae5a:	4b47      	ldr	r3, [pc, #284]	@ (800af78 <_strtod_l+0xaf8>)
 800ae5c:	429a      	cmp	r2, r3
 800ae5e:	d103      	bne.n	800ae68 <_strtod_l+0x9e8>
 800ae60:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ae62:	3301      	adds	r3, #1
 800ae64:	f43f ad2f 	beq.w	800a8c6 <_strtod_l+0x446>
 800ae68:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800af78 <_strtod_l+0xaf8>
 800ae6c:	f04f 3aff 	mov.w	sl, #4294967295
 800ae70:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ae72:	9805      	ldr	r0, [sp, #20]
 800ae74:	f7fe fe7c 	bl	8009b70 <_Bfree>
 800ae78:	9805      	ldr	r0, [sp, #20]
 800ae7a:	4649      	mov	r1, r9
 800ae7c:	f7fe fe78 	bl	8009b70 <_Bfree>
 800ae80:	9805      	ldr	r0, [sp, #20]
 800ae82:	4641      	mov	r1, r8
 800ae84:	f7fe fe74 	bl	8009b70 <_Bfree>
 800ae88:	9805      	ldr	r0, [sp, #20]
 800ae8a:	4621      	mov	r1, r4
 800ae8c:	f7fe fe70 	bl	8009b70 <_Bfree>
 800ae90:	e619      	b.n	800aac6 <_strtod_l+0x646>
 800ae92:	f1ba 0f01 	cmp.w	sl, #1
 800ae96:	d103      	bne.n	800aea0 <_strtod_l+0xa20>
 800ae98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	f43f ada6 	beq.w	800a9ec <_strtod_l+0x56c>
 800aea0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800af50 <_strtod_l+0xad0>
 800aea4:	4f35      	ldr	r7, [pc, #212]	@ (800af7c <_strtod_l+0xafc>)
 800aea6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800aeaa:	2600      	movs	r6, #0
 800aeac:	e7b1      	b.n	800ae12 <_strtod_l+0x992>
 800aeae:	4f34      	ldr	r7, [pc, #208]	@ (800af80 <_strtod_l+0xb00>)
 800aeb0:	2600      	movs	r6, #0
 800aeb2:	e7aa      	b.n	800ae0a <_strtod_l+0x98a>
 800aeb4:	4b32      	ldr	r3, [pc, #200]	@ (800af80 <_strtod_l+0xb00>)
 800aeb6:	4630      	mov	r0, r6
 800aeb8:	4639      	mov	r1, r7
 800aeba:	2200      	movs	r2, #0
 800aebc:	f7f5 fb9c 	bl	80005f8 <__aeabi_dmul>
 800aec0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aec2:	4606      	mov	r6, r0
 800aec4:	460f      	mov	r7, r1
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d09f      	beq.n	800ae0a <_strtod_l+0x98a>
 800aeca:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800aece:	e7a0      	b.n	800ae12 <_strtod_l+0x992>
 800aed0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800af58 <_strtod_l+0xad8>
 800aed4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800aed8:	ec57 6b17 	vmov	r6, r7, d7
 800aedc:	e799      	b.n	800ae12 <_strtod_l+0x992>
 800aede:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800aee2:	9b08      	ldr	r3, [sp, #32]
 800aee4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d1c1      	bne.n	800ae70 <_strtod_l+0x9f0>
 800aeec:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800aef0:	0d1b      	lsrs	r3, r3, #20
 800aef2:	051b      	lsls	r3, r3, #20
 800aef4:	429d      	cmp	r5, r3
 800aef6:	d1bb      	bne.n	800ae70 <_strtod_l+0x9f0>
 800aef8:	4630      	mov	r0, r6
 800aefa:	4639      	mov	r1, r7
 800aefc:	f7f5 fedc 	bl	8000cb8 <__aeabi_d2lz>
 800af00:	f7f5 fb4c 	bl	800059c <__aeabi_l2d>
 800af04:	4602      	mov	r2, r0
 800af06:	460b      	mov	r3, r1
 800af08:	4630      	mov	r0, r6
 800af0a:	4639      	mov	r1, r7
 800af0c:	f7f5 f9bc 	bl	8000288 <__aeabi_dsub>
 800af10:	460b      	mov	r3, r1
 800af12:	4602      	mov	r2, r0
 800af14:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800af18:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800af1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af1e:	ea46 060a 	orr.w	r6, r6, sl
 800af22:	431e      	orrs	r6, r3
 800af24:	d06f      	beq.n	800b006 <_strtod_l+0xb86>
 800af26:	a30e      	add	r3, pc, #56	@ (adr r3, 800af60 <_strtod_l+0xae0>)
 800af28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af2c:	f7f5 fdd6 	bl	8000adc <__aeabi_dcmplt>
 800af30:	2800      	cmp	r0, #0
 800af32:	f47f acd3 	bne.w	800a8dc <_strtod_l+0x45c>
 800af36:	a30c      	add	r3, pc, #48	@ (adr r3, 800af68 <_strtod_l+0xae8>)
 800af38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af3c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800af40:	f7f5 fdea 	bl	8000b18 <__aeabi_dcmpgt>
 800af44:	2800      	cmp	r0, #0
 800af46:	d093      	beq.n	800ae70 <_strtod_l+0x9f0>
 800af48:	e4c8      	b.n	800a8dc <_strtod_l+0x45c>
 800af4a:	bf00      	nop
 800af4c:	f3af 8000 	nop.w
 800af50:	00000000 	.word	0x00000000
 800af54:	bff00000 	.word	0xbff00000
 800af58:	00000000 	.word	0x00000000
 800af5c:	3ff00000 	.word	0x3ff00000
 800af60:	94a03595 	.word	0x94a03595
 800af64:	3fdfffff 	.word	0x3fdfffff
 800af68:	35afe535 	.word	0x35afe535
 800af6c:	3fe00000 	.word	0x3fe00000
 800af70:	000fffff 	.word	0x000fffff
 800af74:	7ff00000 	.word	0x7ff00000
 800af78:	7fefffff 	.word	0x7fefffff
 800af7c:	3ff00000 	.word	0x3ff00000
 800af80:	3fe00000 	.word	0x3fe00000
 800af84:	7fe00000 	.word	0x7fe00000
 800af88:	7c9fffff 	.word	0x7c9fffff
 800af8c:	9b08      	ldr	r3, [sp, #32]
 800af8e:	b323      	cbz	r3, 800afda <_strtod_l+0xb5a>
 800af90:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800af94:	d821      	bhi.n	800afda <_strtod_l+0xb5a>
 800af96:	a328      	add	r3, pc, #160	@ (adr r3, 800b038 <_strtod_l+0xbb8>)
 800af98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af9c:	4630      	mov	r0, r6
 800af9e:	4639      	mov	r1, r7
 800afa0:	f7f5 fda6 	bl	8000af0 <__aeabi_dcmple>
 800afa4:	b1a0      	cbz	r0, 800afd0 <_strtod_l+0xb50>
 800afa6:	4639      	mov	r1, r7
 800afa8:	4630      	mov	r0, r6
 800afaa:	f7f5 fdfd 	bl	8000ba8 <__aeabi_d2uiz>
 800afae:	2801      	cmp	r0, #1
 800afb0:	bf38      	it	cc
 800afb2:	2001      	movcc	r0, #1
 800afb4:	f7f5 faa6 	bl	8000504 <__aeabi_ui2d>
 800afb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800afba:	4606      	mov	r6, r0
 800afbc:	460f      	mov	r7, r1
 800afbe:	b9fb      	cbnz	r3, 800b000 <_strtod_l+0xb80>
 800afc0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800afc4:	9014      	str	r0, [sp, #80]	@ 0x50
 800afc6:	9315      	str	r3, [sp, #84]	@ 0x54
 800afc8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800afcc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800afd0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800afd2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800afd6:	1b5b      	subs	r3, r3, r5
 800afd8:	9311      	str	r3, [sp, #68]	@ 0x44
 800afda:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800afde:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800afe2:	f7ff f8f1 	bl	800a1c8 <__ulp>
 800afe6:	4650      	mov	r0, sl
 800afe8:	ec53 2b10 	vmov	r2, r3, d0
 800afec:	4659      	mov	r1, fp
 800afee:	f7f5 fb03 	bl	80005f8 <__aeabi_dmul>
 800aff2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800aff6:	f7f5 f949 	bl	800028c <__adddf3>
 800affa:	4682      	mov	sl, r0
 800affc:	468b      	mov	fp, r1
 800affe:	e770      	b.n	800aee2 <_strtod_l+0xa62>
 800b000:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b004:	e7e0      	b.n	800afc8 <_strtod_l+0xb48>
 800b006:	a30e      	add	r3, pc, #56	@ (adr r3, 800b040 <_strtod_l+0xbc0>)
 800b008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b00c:	f7f5 fd66 	bl	8000adc <__aeabi_dcmplt>
 800b010:	e798      	b.n	800af44 <_strtod_l+0xac4>
 800b012:	2300      	movs	r3, #0
 800b014:	930e      	str	r3, [sp, #56]	@ 0x38
 800b016:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b018:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b01a:	6013      	str	r3, [r2, #0]
 800b01c:	f7ff ba6d 	b.w	800a4fa <_strtod_l+0x7a>
 800b020:	2a65      	cmp	r2, #101	@ 0x65
 800b022:	f43f ab68 	beq.w	800a6f6 <_strtod_l+0x276>
 800b026:	2a45      	cmp	r2, #69	@ 0x45
 800b028:	f43f ab65 	beq.w	800a6f6 <_strtod_l+0x276>
 800b02c:	2301      	movs	r3, #1
 800b02e:	f7ff bba0 	b.w	800a772 <_strtod_l+0x2f2>
 800b032:	bf00      	nop
 800b034:	f3af 8000 	nop.w
 800b038:	ffc00000 	.word	0xffc00000
 800b03c:	41dfffff 	.word	0x41dfffff
 800b040:	94a03595 	.word	0x94a03595
 800b044:	3fcfffff 	.word	0x3fcfffff

0800b048 <_strtod_r>:
 800b048:	4b01      	ldr	r3, [pc, #4]	@ (800b050 <_strtod_r+0x8>)
 800b04a:	f7ff ba19 	b.w	800a480 <_strtod_l>
 800b04e:	bf00      	nop
 800b050:	20000084 	.word	0x20000084

0800b054 <_strtol_l.isra.0>:
 800b054:	2b24      	cmp	r3, #36	@ 0x24
 800b056:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b05a:	4686      	mov	lr, r0
 800b05c:	4690      	mov	r8, r2
 800b05e:	d801      	bhi.n	800b064 <_strtol_l.isra.0+0x10>
 800b060:	2b01      	cmp	r3, #1
 800b062:	d106      	bne.n	800b072 <_strtol_l.isra.0+0x1e>
 800b064:	f7fd fda8 	bl	8008bb8 <__errno>
 800b068:	2316      	movs	r3, #22
 800b06a:	6003      	str	r3, [r0, #0]
 800b06c:	2000      	movs	r0, #0
 800b06e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b072:	4834      	ldr	r0, [pc, #208]	@ (800b144 <_strtol_l.isra.0+0xf0>)
 800b074:	460d      	mov	r5, r1
 800b076:	462a      	mov	r2, r5
 800b078:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b07c:	5d06      	ldrb	r6, [r0, r4]
 800b07e:	f016 0608 	ands.w	r6, r6, #8
 800b082:	d1f8      	bne.n	800b076 <_strtol_l.isra.0+0x22>
 800b084:	2c2d      	cmp	r4, #45	@ 0x2d
 800b086:	d110      	bne.n	800b0aa <_strtol_l.isra.0+0x56>
 800b088:	782c      	ldrb	r4, [r5, #0]
 800b08a:	2601      	movs	r6, #1
 800b08c:	1c95      	adds	r5, r2, #2
 800b08e:	f033 0210 	bics.w	r2, r3, #16
 800b092:	d115      	bne.n	800b0c0 <_strtol_l.isra.0+0x6c>
 800b094:	2c30      	cmp	r4, #48	@ 0x30
 800b096:	d10d      	bne.n	800b0b4 <_strtol_l.isra.0+0x60>
 800b098:	782a      	ldrb	r2, [r5, #0]
 800b09a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b09e:	2a58      	cmp	r2, #88	@ 0x58
 800b0a0:	d108      	bne.n	800b0b4 <_strtol_l.isra.0+0x60>
 800b0a2:	786c      	ldrb	r4, [r5, #1]
 800b0a4:	3502      	adds	r5, #2
 800b0a6:	2310      	movs	r3, #16
 800b0a8:	e00a      	b.n	800b0c0 <_strtol_l.isra.0+0x6c>
 800b0aa:	2c2b      	cmp	r4, #43	@ 0x2b
 800b0ac:	bf04      	itt	eq
 800b0ae:	782c      	ldrbeq	r4, [r5, #0]
 800b0b0:	1c95      	addeq	r5, r2, #2
 800b0b2:	e7ec      	b.n	800b08e <_strtol_l.isra.0+0x3a>
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d1f6      	bne.n	800b0a6 <_strtol_l.isra.0+0x52>
 800b0b8:	2c30      	cmp	r4, #48	@ 0x30
 800b0ba:	bf14      	ite	ne
 800b0bc:	230a      	movne	r3, #10
 800b0be:	2308      	moveq	r3, #8
 800b0c0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b0c4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	fbbc f9f3 	udiv	r9, ip, r3
 800b0ce:	4610      	mov	r0, r2
 800b0d0:	fb03 ca19 	mls	sl, r3, r9, ip
 800b0d4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b0d8:	2f09      	cmp	r7, #9
 800b0da:	d80f      	bhi.n	800b0fc <_strtol_l.isra.0+0xa8>
 800b0dc:	463c      	mov	r4, r7
 800b0de:	42a3      	cmp	r3, r4
 800b0e0:	dd1b      	ble.n	800b11a <_strtol_l.isra.0+0xc6>
 800b0e2:	1c57      	adds	r7, r2, #1
 800b0e4:	d007      	beq.n	800b0f6 <_strtol_l.isra.0+0xa2>
 800b0e6:	4581      	cmp	r9, r0
 800b0e8:	d314      	bcc.n	800b114 <_strtol_l.isra.0+0xc0>
 800b0ea:	d101      	bne.n	800b0f0 <_strtol_l.isra.0+0x9c>
 800b0ec:	45a2      	cmp	sl, r4
 800b0ee:	db11      	blt.n	800b114 <_strtol_l.isra.0+0xc0>
 800b0f0:	fb00 4003 	mla	r0, r0, r3, r4
 800b0f4:	2201      	movs	r2, #1
 800b0f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b0fa:	e7eb      	b.n	800b0d4 <_strtol_l.isra.0+0x80>
 800b0fc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b100:	2f19      	cmp	r7, #25
 800b102:	d801      	bhi.n	800b108 <_strtol_l.isra.0+0xb4>
 800b104:	3c37      	subs	r4, #55	@ 0x37
 800b106:	e7ea      	b.n	800b0de <_strtol_l.isra.0+0x8a>
 800b108:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b10c:	2f19      	cmp	r7, #25
 800b10e:	d804      	bhi.n	800b11a <_strtol_l.isra.0+0xc6>
 800b110:	3c57      	subs	r4, #87	@ 0x57
 800b112:	e7e4      	b.n	800b0de <_strtol_l.isra.0+0x8a>
 800b114:	f04f 32ff 	mov.w	r2, #4294967295
 800b118:	e7ed      	b.n	800b0f6 <_strtol_l.isra.0+0xa2>
 800b11a:	1c53      	adds	r3, r2, #1
 800b11c:	d108      	bne.n	800b130 <_strtol_l.isra.0+0xdc>
 800b11e:	2322      	movs	r3, #34	@ 0x22
 800b120:	f8ce 3000 	str.w	r3, [lr]
 800b124:	4660      	mov	r0, ip
 800b126:	f1b8 0f00 	cmp.w	r8, #0
 800b12a:	d0a0      	beq.n	800b06e <_strtol_l.isra.0+0x1a>
 800b12c:	1e69      	subs	r1, r5, #1
 800b12e:	e006      	b.n	800b13e <_strtol_l.isra.0+0xea>
 800b130:	b106      	cbz	r6, 800b134 <_strtol_l.isra.0+0xe0>
 800b132:	4240      	negs	r0, r0
 800b134:	f1b8 0f00 	cmp.w	r8, #0
 800b138:	d099      	beq.n	800b06e <_strtol_l.isra.0+0x1a>
 800b13a:	2a00      	cmp	r2, #0
 800b13c:	d1f6      	bne.n	800b12c <_strtol_l.isra.0+0xd8>
 800b13e:	f8c8 1000 	str.w	r1, [r8]
 800b142:	e794      	b.n	800b06e <_strtol_l.isra.0+0x1a>
 800b144:	0800d589 	.word	0x0800d589

0800b148 <_strtol_r>:
 800b148:	f7ff bf84 	b.w	800b054 <_strtol_l.isra.0>

0800b14c <__ssputs_r>:
 800b14c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b150:	688e      	ldr	r6, [r1, #8]
 800b152:	461f      	mov	r7, r3
 800b154:	42be      	cmp	r6, r7
 800b156:	680b      	ldr	r3, [r1, #0]
 800b158:	4682      	mov	sl, r0
 800b15a:	460c      	mov	r4, r1
 800b15c:	4690      	mov	r8, r2
 800b15e:	d82d      	bhi.n	800b1bc <__ssputs_r+0x70>
 800b160:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b164:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b168:	d026      	beq.n	800b1b8 <__ssputs_r+0x6c>
 800b16a:	6965      	ldr	r5, [r4, #20]
 800b16c:	6909      	ldr	r1, [r1, #16]
 800b16e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b172:	eba3 0901 	sub.w	r9, r3, r1
 800b176:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b17a:	1c7b      	adds	r3, r7, #1
 800b17c:	444b      	add	r3, r9
 800b17e:	106d      	asrs	r5, r5, #1
 800b180:	429d      	cmp	r5, r3
 800b182:	bf38      	it	cc
 800b184:	461d      	movcc	r5, r3
 800b186:	0553      	lsls	r3, r2, #21
 800b188:	d527      	bpl.n	800b1da <__ssputs_r+0x8e>
 800b18a:	4629      	mov	r1, r5
 800b18c:	f7fe fc24 	bl	80099d8 <_malloc_r>
 800b190:	4606      	mov	r6, r0
 800b192:	b360      	cbz	r0, 800b1ee <__ssputs_r+0xa2>
 800b194:	6921      	ldr	r1, [r4, #16]
 800b196:	464a      	mov	r2, r9
 800b198:	f7fd fd3b 	bl	8008c12 <memcpy>
 800b19c:	89a3      	ldrh	r3, [r4, #12]
 800b19e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b1a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b1a6:	81a3      	strh	r3, [r4, #12]
 800b1a8:	6126      	str	r6, [r4, #16]
 800b1aa:	6165      	str	r5, [r4, #20]
 800b1ac:	444e      	add	r6, r9
 800b1ae:	eba5 0509 	sub.w	r5, r5, r9
 800b1b2:	6026      	str	r6, [r4, #0]
 800b1b4:	60a5      	str	r5, [r4, #8]
 800b1b6:	463e      	mov	r6, r7
 800b1b8:	42be      	cmp	r6, r7
 800b1ba:	d900      	bls.n	800b1be <__ssputs_r+0x72>
 800b1bc:	463e      	mov	r6, r7
 800b1be:	6820      	ldr	r0, [r4, #0]
 800b1c0:	4632      	mov	r2, r6
 800b1c2:	4641      	mov	r1, r8
 800b1c4:	f000 fd57 	bl	800bc76 <memmove>
 800b1c8:	68a3      	ldr	r3, [r4, #8]
 800b1ca:	1b9b      	subs	r3, r3, r6
 800b1cc:	60a3      	str	r3, [r4, #8]
 800b1ce:	6823      	ldr	r3, [r4, #0]
 800b1d0:	4433      	add	r3, r6
 800b1d2:	6023      	str	r3, [r4, #0]
 800b1d4:	2000      	movs	r0, #0
 800b1d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1da:	462a      	mov	r2, r5
 800b1dc:	f001 f90d 	bl	800c3fa <_realloc_r>
 800b1e0:	4606      	mov	r6, r0
 800b1e2:	2800      	cmp	r0, #0
 800b1e4:	d1e0      	bne.n	800b1a8 <__ssputs_r+0x5c>
 800b1e6:	6921      	ldr	r1, [r4, #16]
 800b1e8:	4650      	mov	r0, sl
 800b1ea:	f7fe fb81 	bl	80098f0 <_free_r>
 800b1ee:	230c      	movs	r3, #12
 800b1f0:	f8ca 3000 	str.w	r3, [sl]
 800b1f4:	89a3      	ldrh	r3, [r4, #12]
 800b1f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b1fa:	81a3      	strh	r3, [r4, #12]
 800b1fc:	f04f 30ff 	mov.w	r0, #4294967295
 800b200:	e7e9      	b.n	800b1d6 <__ssputs_r+0x8a>
	...

0800b204 <_svfiprintf_r>:
 800b204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b208:	4698      	mov	r8, r3
 800b20a:	898b      	ldrh	r3, [r1, #12]
 800b20c:	061b      	lsls	r3, r3, #24
 800b20e:	b09d      	sub	sp, #116	@ 0x74
 800b210:	4607      	mov	r7, r0
 800b212:	460d      	mov	r5, r1
 800b214:	4614      	mov	r4, r2
 800b216:	d510      	bpl.n	800b23a <_svfiprintf_r+0x36>
 800b218:	690b      	ldr	r3, [r1, #16]
 800b21a:	b973      	cbnz	r3, 800b23a <_svfiprintf_r+0x36>
 800b21c:	2140      	movs	r1, #64	@ 0x40
 800b21e:	f7fe fbdb 	bl	80099d8 <_malloc_r>
 800b222:	6028      	str	r0, [r5, #0]
 800b224:	6128      	str	r0, [r5, #16]
 800b226:	b930      	cbnz	r0, 800b236 <_svfiprintf_r+0x32>
 800b228:	230c      	movs	r3, #12
 800b22a:	603b      	str	r3, [r7, #0]
 800b22c:	f04f 30ff 	mov.w	r0, #4294967295
 800b230:	b01d      	add	sp, #116	@ 0x74
 800b232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b236:	2340      	movs	r3, #64	@ 0x40
 800b238:	616b      	str	r3, [r5, #20]
 800b23a:	2300      	movs	r3, #0
 800b23c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b23e:	2320      	movs	r3, #32
 800b240:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b244:	f8cd 800c 	str.w	r8, [sp, #12]
 800b248:	2330      	movs	r3, #48	@ 0x30
 800b24a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b3e8 <_svfiprintf_r+0x1e4>
 800b24e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b252:	f04f 0901 	mov.w	r9, #1
 800b256:	4623      	mov	r3, r4
 800b258:	469a      	mov	sl, r3
 800b25a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b25e:	b10a      	cbz	r2, 800b264 <_svfiprintf_r+0x60>
 800b260:	2a25      	cmp	r2, #37	@ 0x25
 800b262:	d1f9      	bne.n	800b258 <_svfiprintf_r+0x54>
 800b264:	ebba 0b04 	subs.w	fp, sl, r4
 800b268:	d00b      	beq.n	800b282 <_svfiprintf_r+0x7e>
 800b26a:	465b      	mov	r3, fp
 800b26c:	4622      	mov	r2, r4
 800b26e:	4629      	mov	r1, r5
 800b270:	4638      	mov	r0, r7
 800b272:	f7ff ff6b 	bl	800b14c <__ssputs_r>
 800b276:	3001      	adds	r0, #1
 800b278:	f000 80a7 	beq.w	800b3ca <_svfiprintf_r+0x1c6>
 800b27c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b27e:	445a      	add	r2, fp
 800b280:	9209      	str	r2, [sp, #36]	@ 0x24
 800b282:	f89a 3000 	ldrb.w	r3, [sl]
 800b286:	2b00      	cmp	r3, #0
 800b288:	f000 809f 	beq.w	800b3ca <_svfiprintf_r+0x1c6>
 800b28c:	2300      	movs	r3, #0
 800b28e:	f04f 32ff 	mov.w	r2, #4294967295
 800b292:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b296:	f10a 0a01 	add.w	sl, sl, #1
 800b29a:	9304      	str	r3, [sp, #16]
 800b29c:	9307      	str	r3, [sp, #28]
 800b29e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b2a2:	931a      	str	r3, [sp, #104]	@ 0x68
 800b2a4:	4654      	mov	r4, sl
 800b2a6:	2205      	movs	r2, #5
 800b2a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2ac:	484e      	ldr	r0, [pc, #312]	@ (800b3e8 <_svfiprintf_r+0x1e4>)
 800b2ae:	f7f4 ff8f 	bl	80001d0 <memchr>
 800b2b2:	9a04      	ldr	r2, [sp, #16]
 800b2b4:	b9d8      	cbnz	r0, 800b2ee <_svfiprintf_r+0xea>
 800b2b6:	06d0      	lsls	r0, r2, #27
 800b2b8:	bf44      	itt	mi
 800b2ba:	2320      	movmi	r3, #32
 800b2bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b2c0:	0711      	lsls	r1, r2, #28
 800b2c2:	bf44      	itt	mi
 800b2c4:	232b      	movmi	r3, #43	@ 0x2b
 800b2c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b2ca:	f89a 3000 	ldrb.w	r3, [sl]
 800b2ce:	2b2a      	cmp	r3, #42	@ 0x2a
 800b2d0:	d015      	beq.n	800b2fe <_svfiprintf_r+0xfa>
 800b2d2:	9a07      	ldr	r2, [sp, #28]
 800b2d4:	4654      	mov	r4, sl
 800b2d6:	2000      	movs	r0, #0
 800b2d8:	f04f 0c0a 	mov.w	ip, #10
 800b2dc:	4621      	mov	r1, r4
 800b2de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b2e2:	3b30      	subs	r3, #48	@ 0x30
 800b2e4:	2b09      	cmp	r3, #9
 800b2e6:	d94b      	bls.n	800b380 <_svfiprintf_r+0x17c>
 800b2e8:	b1b0      	cbz	r0, 800b318 <_svfiprintf_r+0x114>
 800b2ea:	9207      	str	r2, [sp, #28]
 800b2ec:	e014      	b.n	800b318 <_svfiprintf_r+0x114>
 800b2ee:	eba0 0308 	sub.w	r3, r0, r8
 800b2f2:	fa09 f303 	lsl.w	r3, r9, r3
 800b2f6:	4313      	orrs	r3, r2
 800b2f8:	9304      	str	r3, [sp, #16]
 800b2fa:	46a2      	mov	sl, r4
 800b2fc:	e7d2      	b.n	800b2a4 <_svfiprintf_r+0xa0>
 800b2fe:	9b03      	ldr	r3, [sp, #12]
 800b300:	1d19      	adds	r1, r3, #4
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	9103      	str	r1, [sp, #12]
 800b306:	2b00      	cmp	r3, #0
 800b308:	bfbb      	ittet	lt
 800b30a:	425b      	neglt	r3, r3
 800b30c:	f042 0202 	orrlt.w	r2, r2, #2
 800b310:	9307      	strge	r3, [sp, #28]
 800b312:	9307      	strlt	r3, [sp, #28]
 800b314:	bfb8      	it	lt
 800b316:	9204      	strlt	r2, [sp, #16]
 800b318:	7823      	ldrb	r3, [r4, #0]
 800b31a:	2b2e      	cmp	r3, #46	@ 0x2e
 800b31c:	d10a      	bne.n	800b334 <_svfiprintf_r+0x130>
 800b31e:	7863      	ldrb	r3, [r4, #1]
 800b320:	2b2a      	cmp	r3, #42	@ 0x2a
 800b322:	d132      	bne.n	800b38a <_svfiprintf_r+0x186>
 800b324:	9b03      	ldr	r3, [sp, #12]
 800b326:	1d1a      	adds	r2, r3, #4
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	9203      	str	r2, [sp, #12]
 800b32c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b330:	3402      	adds	r4, #2
 800b332:	9305      	str	r3, [sp, #20]
 800b334:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b3f8 <_svfiprintf_r+0x1f4>
 800b338:	7821      	ldrb	r1, [r4, #0]
 800b33a:	2203      	movs	r2, #3
 800b33c:	4650      	mov	r0, sl
 800b33e:	f7f4 ff47 	bl	80001d0 <memchr>
 800b342:	b138      	cbz	r0, 800b354 <_svfiprintf_r+0x150>
 800b344:	9b04      	ldr	r3, [sp, #16]
 800b346:	eba0 000a 	sub.w	r0, r0, sl
 800b34a:	2240      	movs	r2, #64	@ 0x40
 800b34c:	4082      	lsls	r2, r0
 800b34e:	4313      	orrs	r3, r2
 800b350:	3401      	adds	r4, #1
 800b352:	9304      	str	r3, [sp, #16]
 800b354:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b358:	4824      	ldr	r0, [pc, #144]	@ (800b3ec <_svfiprintf_r+0x1e8>)
 800b35a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b35e:	2206      	movs	r2, #6
 800b360:	f7f4 ff36 	bl	80001d0 <memchr>
 800b364:	2800      	cmp	r0, #0
 800b366:	d036      	beq.n	800b3d6 <_svfiprintf_r+0x1d2>
 800b368:	4b21      	ldr	r3, [pc, #132]	@ (800b3f0 <_svfiprintf_r+0x1ec>)
 800b36a:	bb1b      	cbnz	r3, 800b3b4 <_svfiprintf_r+0x1b0>
 800b36c:	9b03      	ldr	r3, [sp, #12]
 800b36e:	3307      	adds	r3, #7
 800b370:	f023 0307 	bic.w	r3, r3, #7
 800b374:	3308      	adds	r3, #8
 800b376:	9303      	str	r3, [sp, #12]
 800b378:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b37a:	4433      	add	r3, r6
 800b37c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b37e:	e76a      	b.n	800b256 <_svfiprintf_r+0x52>
 800b380:	fb0c 3202 	mla	r2, ip, r2, r3
 800b384:	460c      	mov	r4, r1
 800b386:	2001      	movs	r0, #1
 800b388:	e7a8      	b.n	800b2dc <_svfiprintf_r+0xd8>
 800b38a:	2300      	movs	r3, #0
 800b38c:	3401      	adds	r4, #1
 800b38e:	9305      	str	r3, [sp, #20]
 800b390:	4619      	mov	r1, r3
 800b392:	f04f 0c0a 	mov.w	ip, #10
 800b396:	4620      	mov	r0, r4
 800b398:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b39c:	3a30      	subs	r2, #48	@ 0x30
 800b39e:	2a09      	cmp	r2, #9
 800b3a0:	d903      	bls.n	800b3aa <_svfiprintf_r+0x1a6>
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d0c6      	beq.n	800b334 <_svfiprintf_r+0x130>
 800b3a6:	9105      	str	r1, [sp, #20]
 800b3a8:	e7c4      	b.n	800b334 <_svfiprintf_r+0x130>
 800b3aa:	fb0c 2101 	mla	r1, ip, r1, r2
 800b3ae:	4604      	mov	r4, r0
 800b3b0:	2301      	movs	r3, #1
 800b3b2:	e7f0      	b.n	800b396 <_svfiprintf_r+0x192>
 800b3b4:	ab03      	add	r3, sp, #12
 800b3b6:	9300      	str	r3, [sp, #0]
 800b3b8:	462a      	mov	r2, r5
 800b3ba:	4b0e      	ldr	r3, [pc, #56]	@ (800b3f4 <_svfiprintf_r+0x1f0>)
 800b3bc:	a904      	add	r1, sp, #16
 800b3be:	4638      	mov	r0, r7
 800b3c0:	f7fc fc7e 	bl	8007cc0 <_printf_float>
 800b3c4:	1c42      	adds	r2, r0, #1
 800b3c6:	4606      	mov	r6, r0
 800b3c8:	d1d6      	bne.n	800b378 <_svfiprintf_r+0x174>
 800b3ca:	89ab      	ldrh	r3, [r5, #12]
 800b3cc:	065b      	lsls	r3, r3, #25
 800b3ce:	f53f af2d 	bmi.w	800b22c <_svfiprintf_r+0x28>
 800b3d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b3d4:	e72c      	b.n	800b230 <_svfiprintf_r+0x2c>
 800b3d6:	ab03      	add	r3, sp, #12
 800b3d8:	9300      	str	r3, [sp, #0]
 800b3da:	462a      	mov	r2, r5
 800b3dc:	4b05      	ldr	r3, [pc, #20]	@ (800b3f4 <_svfiprintf_r+0x1f0>)
 800b3de:	a904      	add	r1, sp, #16
 800b3e0:	4638      	mov	r0, r7
 800b3e2:	f7fc ff05 	bl	80081f0 <_printf_i>
 800b3e6:	e7ed      	b.n	800b3c4 <_svfiprintf_r+0x1c0>
 800b3e8:	0800d367 	.word	0x0800d367
 800b3ec:	0800d371 	.word	0x0800d371
 800b3f0:	08007cc1 	.word	0x08007cc1
 800b3f4:	0800b14d 	.word	0x0800b14d
 800b3f8:	0800d36d 	.word	0x0800d36d

0800b3fc <_sungetc_r>:
 800b3fc:	b538      	push	{r3, r4, r5, lr}
 800b3fe:	1c4b      	adds	r3, r1, #1
 800b400:	4614      	mov	r4, r2
 800b402:	d103      	bne.n	800b40c <_sungetc_r+0x10>
 800b404:	f04f 35ff 	mov.w	r5, #4294967295
 800b408:	4628      	mov	r0, r5
 800b40a:	bd38      	pop	{r3, r4, r5, pc}
 800b40c:	8993      	ldrh	r3, [r2, #12]
 800b40e:	f023 0320 	bic.w	r3, r3, #32
 800b412:	8193      	strh	r3, [r2, #12]
 800b414:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b416:	6852      	ldr	r2, [r2, #4]
 800b418:	b2cd      	uxtb	r5, r1
 800b41a:	b18b      	cbz	r3, 800b440 <_sungetc_r+0x44>
 800b41c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800b41e:	4293      	cmp	r3, r2
 800b420:	dd08      	ble.n	800b434 <_sungetc_r+0x38>
 800b422:	6823      	ldr	r3, [r4, #0]
 800b424:	1e5a      	subs	r2, r3, #1
 800b426:	6022      	str	r2, [r4, #0]
 800b428:	f803 5c01 	strb.w	r5, [r3, #-1]
 800b42c:	6863      	ldr	r3, [r4, #4]
 800b42e:	3301      	adds	r3, #1
 800b430:	6063      	str	r3, [r4, #4]
 800b432:	e7e9      	b.n	800b408 <_sungetc_r+0xc>
 800b434:	4621      	mov	r1, r4
 800b436:	f000 fbe4 	bl	800bc02 <__submore>
 800b43a:	2800      	cmp	r0, #0
 800b43c:	d0f1      	beq.n	800b422 <_sungetc_r+0x26>
 800b43e:	e7e1      	b.n	800b404 <_sungetc_r+0x8>
 800b440:	6921      	ldr	r1, [r4, #16]
 800b442:	6823      	ldr	r3, [r4, #0]
 800b444:	b151      	cbz	r1, 800b45c <_sungetc_r+0x60>
 800b446:	4299      	cmp	r1, r3
 800b448:	d208      	bcs.n	800b45c <_sungetc_r+0x60>
 800b44a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800b44e:	42a9      	cmp	r1, r5
 800b450:	d104      	bne.n	800b45c <_sungetc_r+0x60>
 800b452:	3b01      	subs	r3, #1
 800b454:	3201      	adds	r2, #1
 800b456:	6023      	str	r3, [r4, #0]
 800b458:	6062      	str	r2, [r4, #4]
 800b45a:	e7d5      	b.n	800b408 <_sungetc_r+0xc>
 800b45c:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 800b460:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b464:	6363      	str	r3, [r4, #52]	@ 0x34
 800b466:	2303      	movs	r3, #3
 800b468:	63a3      	str	r3, [r4, #56]	@ 0x38
 800b46a:	4623      	mov	r3, r4
 800b46c:	f803 5f46 	strb.w	r5, [r3, #70]!
 800b470:	6023      	str	r3, [r4, #0]
 800b472:	2301      	movs	r3, #1
 800b474:	e7dc      	b.n	800b430 <_sungetc_r+0x34>

0800b476 <__ssrefill_r>:
 800b476:	b510      	push	{r4, lr}
 800b478:	460c      	mov	r4, r1
 800b47a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800b47c:	b169      	cbz	r1, 800b49a <__ssrefill_r+0x24>
 800b47e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b482:	4299      	cmp	r1, r3
 800b484:	d001      	beq.n	800b48a <__ssrefill_r+0x14>
 800b486:	f7fe fa33 	bl	80098f0 <_free_r>
 800b48a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b48c:	6063      	str	r3, [r4, #4]
 800b48e:	2000      	movs	r0, #0
 800b490:	6360      	str	r0, [r4, #52]	@ 0x34
 800b492:	b113      	cbz	r3, 800b49a <__ssrefill_r+0x24>
 800b494:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800b496:	6023      	str	r3, [r4, #0]
 800b498:	bd10      	pop	{r4, pc}
 800b49a:	6923      	ldr	r3, [r4, #16]
 800b49c:	6023      	str	r3, [r4, #0]
 800b49e:	2300      	movs	r3, #0
 800b4a0:	6063      	str	r3, [r4, #4]
 800b4a2:	89a3      	ldrh	r3, [r4, #12]
 800b4a4:	f043 0320 	orr.w	r3, r3, #32
 800b4a8:	81a3      	strh	r3, [r4, #12]
 800b4aa:	f04f 30ff 	mov.w	r0, #4294967295
 800b4ae:	e7f3      	b.n	800b498 <__ssrefill_r+0x22>

0800b4b0 <__ssvfiscanf_r>:
 800b4b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4b4:	460c      	mov	r4, r1
 800b4b6:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 800b4ba:	2100      	movs	r1, #0
 800b4bc:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800b4c0:	49a6      	ldr	r1, [pc, #664]	@ (800b75c <__ssvfiscanf_r+0x2ac>)
 800b4c2:	91a0      	str	r1, [sp, #640]	@ 0x280
 800b4c4:	f10d 0804 	add.w	r8, sp, #4
 800b4c8:	49a5      	ldr	r1, [pc, #660]	@ (800b760 <__ssvfiscanf_r+0x2b0>)
 800b4ca:	4fa6      	ldr	r7, [pc, #664]	@ (800b764 <__ssvfiscanf_r+0x2b4>)
 800b4cc:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800b4d0:	4606      	mov	r6, r0
 800b4d2:	91a1      	str	r1, [sp, #644]	@ 0x284
 800b4d4:	9300      	str	r3, [sp, #0]
 800b4d6:	f892 9000 	ldrb.w	r9, [r2]
 800b4da:	f1b9 0f00 	cmp.w	r9, #0
 800b4de:	f000 8158 	beq.w	800b792 <__ssvfiscanf_r+0x2e2>
 800b4e2:	f817 3009 	ldrb.w	r3, [r7, r9]
 800b4e6:	f013 0308 	ands.w	r3, r3, #8
 800b4ea:	f102 0501 	add.w	r5, r2, #1
 800b4ee:	d019      	beq.n	800b524 <__ssvfiscanf_r+0x74>
 800b4f0:	6863      	ldr	r3, [r4, #4]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	dd0f      	ble.n	800b516 <__ssvfiscanf_r+0x66>
 800b4f6:	6823      	ldr	r3, [r4, #0]
 800b4f8:	781a      	ldrb	r2, [r3, #0]
 800b4fa:	5cba      	ldrb	r2, [r7, r2]
 800b4fc:	0712      	lsls	r2, r2, #28
 800b4fe:	d401      	bmi.n	800b504 <__ssvfiscanf_r+0x54>
 800b500:	462a      	mov	r2, r5
 800b502:	e7e8      	b.n	800b4d6 <__ssvfiscanf_r+0x26>
 800b504:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800b506:	3201      	adds	r2, #1
 800b508:	9245      	str	r2, [sp, #276]	@ 0x114
 800b50a:	6862      	ldr	r2, [r4, #4]
 800b50c:	3301      	adds	r3, #1
 800b50e:	3a01      	subs	r2, #1
 800b510:	6062      	str	r2, [r4, #4]
 800b512:	6023      	str	r3, [r4, #0]
 800b514:	e7ec      	b.n	800b4f0 <__ssvfiscanf_r+0x40>
 800b516:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800b518:	4621      	mov	r1, r4
 800b51a:	4630      	mov	r0, r6
 800b51c:	4798      	blx	r3
 800b51e:	2800      	cmp	r0, #0
 800b520:	d0e9      	beq.n	800b4f6 <__ssvfiscanf_r+0x46>
 800b522:	e7ed      	b.n	800b500 <__ssvfiscanf_r+0x50>
 800b524:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 800b528:	f040 8085 	bne.w	800b636 <__ssvfiscanf_r+0x186>
 800b52c:	9341      	str	r3, [sp, #260]	@ 0x104
 800b52e:	9343      	str	r3, [sp, #268]	@ 0x10c
 800b530:	7853      	ldrb	r3, [r2, #1]
 800b532:	2b2a      	cmp	r3, #42	@ 0x2a
 800b534:	bf02      	ittt	eq
 800b536:	2310      	moveq	r3, #16
 800b538:	1c95      	addeq	r5, r2, #2
 800b53a:	9341      	streq	r3, [sp, #260]	@ 0x104
 800b53c:	220a      	movs	r2, #10
 800b53e:	46aa      	mov	sl, r5
 800b540:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800b544:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800b548:	2b09      	cmp	r3, #9
 800b54a:	d91e      	bls.n	800b58a <__ssvfiscanf_r+0xda>
 800b54c:	f8df b218 	ldr.w	fp, [pc, #536]	@ 800b768 <__ssvfiscanf_r+0x2b8>
 800b550:	2203      	movs	r2, #3
 800b552:	4658      	mov	r0, fp
 800b554:	f7f4 fe3c 	bl	80001d0 <memchr>
 800b558:	b138      	cbz	r0, 800b56a <__ssvfiscanf_r+0xba>
 800b55a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800b55c:	eba0 000b 	sub.w	r0, r0, fp
 800b560:	2301      	movs	r3, #1
 800b562:	4083      	lsls	r3, r0
 800b564:	4313      	orrs	r3, r2
 800b566:	9341      	str	r3, [sp, #260]	@ 0x104
 800b568:	4655      	mov	r5, sl
 800b56a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b56e:	2b78      	cmp	r3, #120	@ 0x78
 800b570:	d806      	bhi.n	800b580 <__ssvfiscanf_r+0xd0>
 800b572:	2b57      	cmp	r3, #87	@ 0x57
 800b574:	d810      	bhi.n	800b598 <__ssvfiscanf_r+0xe8>
 800b576:	2b25      	cmp	r3, #37	@ 0x25
 800b578:	d05d      	beq.n	800b636 <__ssvfiscanf_r+0x186>
 800b57a:	d857      	bhi.n	800b62c <__ssvfiscanf_r+0x17c>
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d075      	beq.n	800b66c <__ssvfiscanf_r+0x1bc>
 800b580:	2303      	movs	r3, #3
 800b582:	9347      	str	r3, [sp, #284]	@ 0x11c
 800b584:	230a      	movs	r3, #10
 800b586:	9342      	str	r3, [sp, #264]	@ 0x108
 800b588:	e088      	b.n	800b69c <__ssvfiscanf_r+0x1ec>
 800b58a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800b58c:	fb02 1103 	mla	r1, r2, r3, r1
 800b590:	3930      	subs	r1, #48	@ 0x30
 800b592:	9143      	str	r1, [sp, #268]	@ 0x10c
 800b594:	4655      	mov	r5, sl
 800b596:	e7d2      	b.n	800b53e <__ssvfiscanf_r+0x8e>
 800b598:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800b59c:	2a20      	cmp	r2, #32
 800b59e:	d8ef      	bhi.n	800b580 <__ssvfiscanf_r+0xd0>
 800b5a0:	a101      	add	r1, pc, #4	@ (adr r1, 800b5a8 <__ssvfiscanf_r+0xf8>)
 800b5a2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b5a6:	bf00      	nop
 800b5a8:	0800b67b 	.word	0x0800b67b
 800b5ac:	0800b581 	.word	0x0800b581
 800b5b0:	0800b581 	.word	0x0800b581
 800b5b4:	0800b6d5 	.word	0x0800b6d5
 800b5b8:	0800b581 	.word	0x0800b581
 800b5bc:	0800b581 	.word	0x0800b581
 800b5c0:	0800b581 	.word	0x0800b581
 800b5c4:	0800b581 	.word	0x0800b581
 800b5c8:	0800b581 	.word	0x0800b581
 800b5cc:	0800b581 	.word	0x0800b581
 800b5d0:	0800b581 	.word	0x0800b581
 800b5d4:	0800b6eb 	.word	0x0800b6eb
 800b5d8:	0800b6d1 	.word	0x0800b6d1
 800b5dc:	0800b633 	.word	0x0800b633
 800b5e0:	0800b633 	.word	0x0800b633
 800b5e4:	0800b633 	.word	0x0800b633
 800b5e8:	0800b581 	.word	0x0800b581
 800b5ec:	0800b68d 	.word	0x0800b68d
 800b5f0:	0800b581 	.word	0x0800b581
 800b5f4:	0800b581 	.word	0x0800b581
 800b5f8:	0800b581 	.word	0x0800b581
 800b5fc:	0800b581 	.word	0x0800b581
 800b600:	0800b6fb 	.word	0x0800b6fb
 800b604:	0800b695 	.word	0x0800b695
 800b608:	0800b673 	.word	0x0800b673
 800b60c:	0800b581 	.word	0x0800b581
 800b610:	0800b581 	.word	0x0800b581
 800b614:	0800b6f7 	.word	0x0800b6f7
 800b618:	0800b581 	.word	0x0800b581
 800b61c:	0800b6d1 	.word	0x0800b6d1
 800b620:	0800b581 	.word	0x0800b581
 800b624:	0800b581 	.word	0x0800b581
 800b628:	0800b67b 	.word	0x0800b67b
 800b62c:	3b45      	subs	r3, #69	@ 0x45
 800b62e:	2b02      	cmp	r3, #2
 800b630:	d8a6      	bhi.n	800b580 <__ssvfiscanf_r+0xd0>
 800b632:	2305      	movs	r3, #5
 800b634:	e031      	b.n	800b69a <__ssvfiscanf_r+0x1ea>
 800b636:	6863      	ldr	r3, [r4, #4]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	dd0d      	ble.n	800b658 <__ssvfiscanf_r+0x1a8>
 800b63c:	6823      	ldr	r3, [r4, #0]
 800b63e:	781a      	ldrb	r2, [r3, #0]
 800b640:	454a      	cmp	r2, r9
 800b642:	f040 80a6 	bne.w	800b792 <__ssvfiscanf_r+0x2e2>
 800b646:	3301      	adds	r3, #1
 800b648:	6862      	ldr	r2, [r4, #4]
 800b64a:	6023      	str	r3, [r4, #0]
 800b64c:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800b64e:	3a01      	subs	r2, #1
 800b650:	3301      	adds	r3, #1
 800b652:	6062      	str	r2, [r4, #4]
 800b654:	9345      	str	r3, [sp, #276]	@ 0x114
 800b656:	e753      	b.n	800b500 <__ssvfiscanf_r+0x50>
 800b658:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800b65a:	4621      	mov	r1, r4
 800b65c:	4630      	mov	r0, r6
 800b65e:	4798      	blx	r3
 800b660:	2800      	cmp	r0, #0
 800b662:	d0eb      	beq.n	800b63c <__ssvfiscanf_r+0x18c>
 800b664:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800b666:	2800      	cmp	r0, #0
 800b668:	f040 808b 	bne.w	800b782 <__ssvfiscanf_r+0x2d2>
 800b66c:	f04f 30ff 	mov.w	r0, #4294967295
 800b670:	e08b      	b.n	800b78a <__ssvfiscanf_r+0x2da>
 800b672:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800b674:	f042 0220 	orr.w	r2, r2, #32
 800b678:	9241      	str	r2, [sp, #260]	@ 0x104
 800b67a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800b67c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b680:	9241      	str	r2, [sp, #260]	@ 0x104
 800b682:	2210      	movs	r2, #16
 800b684:	2b6e      	cmp	r3, #110	@ 0x6e
 800b686:	9242      	str	r2, [sp, #264]	@ 0x108
 800b688:	d902      	bls.n	800b690 <__ssvfiscanf_r+0x1e0>
 800b68a:	e005      	b.n	800b698 <__ssvfiscanf_r+0x1e8>
 800b68c:	2300      	movs	r3, #0
 800b68e:	9342      	str	r3, [sp, #264]	@ 0x108
 800b690:	2303      	movs	r3, #3
 800b692:	e002      	b.n	800b69a <__ssvfiscanf_r+0x1ea>
 800b694:	2308      	movs	r3, #8
 800b696:	9342      	str	r3, [sp, #264]	@ 0x108
 800b698:	2304      	movs	r3, #4
 800b69a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800b69c:	6863      	ldr	r3, [r4, #4]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	dd39      	ble.n	800b716 <__ssvfiscanf_r+0x266>
 800b6a2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800b6a4:	0659      	lsls	r1, r3, #25
 800b6a6:	d404      	bmi.n	800b6b2 <__ssvfiscanf_r+0x202>
 800b6a8:	6823      	ldr	r3, [r4, #0]
 800b6aa:	781a      	ldrb	r2, [r3, #0]
 800b6ac:	5cba      	ldrb	r2, [r7, r2]
 800b6ae:	0712      	lsls	r2, r2, #28
 800b6b0:	d438      	bmi.n	800b724 <__ssvfiscanf_r+0x274>
 800b6b2:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800b6b4:	2b02      	cmp	r3, #2
 800b6b6:	dc47      	bgt.n	800b748 <__ssvfiscanf_r+0x298>
 800b6b8:	466b      	mov	r3, sp
 800b6ba:	4622      	mov	r2, r4
 800b6bc:	a941      	add	r1, sp, #260	@ 0x104
 800b6be:	4630      	mov	r0, r6
 800b6c0:	f000 f86c 	bl	800b79c <_scanf_chars>
 800b6c4:	2801      	cmp	r0, #1
 800b6c6:	d064      	beq.n	800b792 <__ssvfiscanf_r+0x2e2>
 800b6c8:	2802      	cmp	r0, #2
 800b6ca:	f47f af19 	bne.w	800b500 <__ssvfiscanf_r+0x50>
 800b6ce:	e7c9      	b.n	800b664 <__ssvfiscanf_r+0x1b4>
 800b6d0:	220a      	movs	r2, #10
 800b6d2:	e7d7      	b.n	800b684 <__ssvfiscanf_r+0x1d4>
 800b6d4:	4629      	mov	r1, r5
 800b6d6:	4640      	mov	r0, r8
 800b6d8:	f000 fa5a 	bl	800bb90 <__sccl>
 800b6dc:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800b6de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b6e2:	9341      	str	r3, [sp, #260]	@ 0x104
 800b6e4:	4605      	mov	r5, r0
 800b6e6:	2301      	movs	r3, #1
 800b6e8:	e7d7      	b.n	800b69a <__ssvfiscanf_r+0x1ea>
 800b6ea:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800b6ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b6f0:	9341      	str	r3, [sp, #260]	@ 0x104
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	e7d1      	b.n	800b69a <__ssvfiscanf_r+0x1ea>
 800b6f6:	2302      	movs	r3, #2
 800b6f8:	e7cf      	b.n	800b69a <__ssvfiscanf_r+0x1ea>
 800b6fa:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800b6fc:	06c3      	lsls	r3, r0, #27
 800b6fe:	f53f aeff 	bmi.w	800b500 <__ssvfiscanf_r+0x50>
 800b702:	9b00      	ldr	r3, [sp, #0]
 800b704:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800b706:	1d19      	adds	r1, r3, #4
 800b708:	9100      	str	r1, [sp, #0]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	07c0      	lsls	r0, r0, #31
 800b70e:	bf4c      	ite	mi
 800b710:	801a      	strhmi	r2, [r3, #0]
 800b712:	601a      	strpl	r2, [r3, #0]
 800b714:	e6f4      	b.n	800b500 <__ssvfiscanf_r+0x50>
 800b716:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800b718:	4621      	mov	r1, r4
 800b71a:	4630      	mov	r0, r6
 800b71c:	4798      	blx	r3
 800b71e:	2800      	cmp	r0, #0
 800b720:	d0bf      	beq.n	800b6a2 <__ssvfiscanf_r+0x1f2>
 800b722:	e79f      	b.n	800b664 <__ssvfiscanf_r+0x1b4>
 800b724:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800b726:	3201      	adds	r2, #1
 800b728:	9245      	str	r2, [sp, #276]	@ 0x114
 800b72a:	6862      	ldr	r2, [r4, #4]
 800b72c:	3a01      	subs	r2, #1
 800b72e:	2a00      	cmp	r2, #0
 800b730:	6062      	str	r2, [r4, #4]
 800b732:	dd02      	ble.n	800b73a <__ssvfiscanf_r+0x28a>
 800b734:	3301      	adds	r3, #1
 800b736:	6023      	str	r3, [r4, #0]
 800b738:	e7b6      	b.n	800b6a8 <__ssvfiscanf_r+0x1f8>
 800b73a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800b73c:	4621      	mov	r1, r4
 800b73e:	4630      	mov	r0, r6
 800b740:	4798      	blx	r3
 800b742:	2800      	cmp	r0, #0
 800b744:	d0b0      	beq.n	800b6a8 <__ssvfiscanf_r+0x1f8>
 800b746:	e78d      	b.n	800b664 <__ssvfiscanf_r+0x1b4>
 800b748:	2b04      	cmp	r3, #4
 800b74a:	dc0f      	bgt.n	800b76c <__ssvfiscanf_r+0x2bc>
 800b74c:	466b      	mov	r3, sp
 800b74e:	4622      	mov	r2, r4
 800b750:	a941      	add	r1, sp, #260	@ 0x104
 800b752:	4630      	mov	r0, r6
 800b754:	f000 f87c 	bl	800b850 <_scanf_i>
 800b758:	e7b4      	b.n	800b6c4 <__ssvfiscanf_r+0x214>
 800b75a:	bf00      	nop
 800b75c:	0800b3fd 	.word	0x0800b3fd
 800b760:	0800b477 	.word	0x0800b477
 800b764:	0800d589 	.word	0x0800d589
 800b768:	0800d36d 	.word	0x0800d36d
 800b76c:	4b0a      	ldr	r3, [pc, #40]	@ (800b798 <__ssvfiscanf_r+0x2e8>)
 800b76e:	2b00      	cmp	r3, #0
 800b770:	f43f aec6 	beq.w	800b500 <__ssvfiscanf_r+0x50>
 800b774:	466b      	mov	r3, sp
 800b776:	4622      	mov	r2, r4
 800b778:	a941      	add	r1, sp, #260	@ 0x104
 800b77a:	4630      	mov	r0, r6
 800b77c:	f7fc fe56 	bl	800842c <_scanf_float>
 800b780:	e7a0      	b.n	800b6c4 <__ssvfiscanf_r+0x214>
 800b782:	89a3      	ldrh	r3, [r4, #12]
 800b784:	065b      	lsls	r3, r3, #25
 800b786:	f53f af71 	bmi.w	800b66c <__ssvfiscanf_r+0x1bc>
 800b78a:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 800b78e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b792:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800b794:	e7f9      	b.n	800b78a <__ssvfiscanf_r+0x2da>
 800b796:	bf00      	nop
 800b798:	0800842d 	.word	0x0800842d

0800b79c <_scanf_chars>:
 800b79c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7a0:	4615      	mov	r5, r2
 800b7a2:	688a      	ldr	r2, [r1, #8]
 800b7a4:	4680      	mov	r8, r0
 800b7a6:	460c      	mov	r4, r1
 800b7a8:	b932      	cbnz	r2, 800b7b8 <_scanf_chars+0x1c>
 800b7aa:	698a      	ldr	r2, [r1, #24]
 800b7ac:	2a00      	cmp	r2, #0
 800b7ae:	bf14      	ite	ne
 800b7b0:	f04f 32ff 	movne.w	r2, #4294967295
 800b7b4:	2201      	moveq	r2, #1
 800b7b6:	608a      	str	r2, [r1, #8]
 800b7b8:	6822      	ldr	r2, [r4, #0]
 800b7ba:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800b84c <_scanf_chars+0xb0>
 800b7be:	06d1      	lsls	r1, r2, #27
 800b7c0:	bf5f      	itttt	pl
 800b7c2:	681a      	ldrpl	r2, [r3, #0]
 800b7c4:	1d11      	addpl	r1, r2, #4
 800b7c6:	6019      	strpl	r1, [r3, #0]
 800b7c8:	6816      	ldrpl	r6, [r2, #0]
 800b7ca:	2700      	movs	r7, #0
 800b7cc:	69a0      	ldr	r0, [r4, #24]
 800b7ce:	b188      	cbz	r0, 800b7f4 <_scanf_chars+0x58>
 800b7d0:	2801      	cmp	r0, #1
 800b7d2:	d107      	bne.n	800b7e4 <_scanf_chars+0x48>
 800b7d4:	682b      	ldr	r3, [r5, #0]
 800b7d6:	781a      	ldrb	r2, [r3, #0]
 800b7d8:	6963      	ldr	r3, [r4, #20]
 800b7da:	5c9b      	ldrb	r3, [r3, r2]
 800b7dc:	b953      	cbnz	r3, 800b7f4 <_scanf_chars+0x58>
 800b7de:	2f00      	cmp	r7, #0
 800b7e0:	d031      	beq.n	800b846 <_scanf_chars+0xaa>
 800b7e2:	e022      	b.n	800b82a <_scanf_chars+0x8e>
 800b7e4:	2802      	cmp	r0, #2
 800b7e6:	d120      	bne.n	800b82a <_scanf_chars+0x8e>
 800b7e8:	682b      	ldr	r3, [r5, #0]
 800b7ea:	781b      	ldrb	r3, [r3, #0]
 800b7ec:	f819 3003 	ldrb.w	r3, [r9, r3]
 800b7f0:	071b      	lsls	r3, r3, #28
 800b7f2:	d41a      	bmi.n	800b82a <_scanf_chars+0x8e>
 800b7f4:	6823      	ldr	r3, [r4, #0]
 800b7f6:	06da      	lsls	r2, r3, #27
 800b7f8:	bf5e      	ittt	pl
 800b7fa:	682b      	ldrpl	r3, [r5, #0]
 800b7fc:	781b      	ldrbpl	r3, [r3, #0]
 800b7fe:	f806 3b01 	strbpl.w	r3, [r6], #1
 800b802:	682a      	ldr	r2, [r5, #0]
 800b804:	686b      	ldr	r3, [r5, #4]
 800b806:	3201      	adds	r2, #1
 800b808:	602a      	str	r2, [r5, #0]
 800b80a:	68a2      	ldr	r2, [r4, #8]
 800b80c:	3b01      	subs	r3, #1
 800b80e:	3a01      	subs	r2, #1
 800b810:	606b      	str	r3, [r5, #4]
 800b812:	3701      	adds	r7, #1
 800b814:	60a2      	str	r2, [r4, #8]
 800b816:	b142      	cbz	r2, 800b82a <_scanf_chars+0x8e>
 800b818:	2b00      	cmp	r3, #0
 800b81a:	dcd7      	bgt.n	800b7cc <_scanf_chars+0x30>
 800b81c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b820:	4629      	mov	r1, r5
 800b822:	4640      	mov	r0, r8
 800b824:	4798      	blx	r3
 800b826:	2800      	cmp	r0, #0
 800b828:	d0d0      	beq.n	800b7cc <_scanf_chars+0x30>
 800b82a:	6823      	ldr	r3, [r4, #0]
 800b82c:	f013 0310 	ands.w	r3, r3, #16
 800b830:	d105      	bne.n	800b83e <_scanf_chars+0xa2>
 800b832:	68e2      	ldr	r2, [r4, #12]
 800b834:	3201      	adds	r2, #1
 800b836:	60e2      	str	r2, [r4, #12]
 800b838:	69a2      	ldr	r2, [r4, #24]
 800b83a:	b102      	cbz	r2, 800b83e <_scanf_chars+0xa2>
 800b83c:	7033      	strb	r3, [r6, #0]
 800b83e:	6923      	ldr	r3, [r4, #16]
 800b840:	443b      	add	r3, r7
 800b842:	6123      	str	r3, [r4, #16]
 800b844:	2000      	movs	r0, #0
 800b846:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b84a:	bf00      	nop
 800b84c:	0800d589 	.word	0x0800d589

0800b850 <_scanf_i>:
 800b850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b854:	4698      	mov	r8, r3
 800b856:	4b74      	ldr	r3, [pc, #464]	@ (800ba28 <_scanf_i+0x1d8>)
 800b858:	460c      	mov	r4, r1
 800b85a:	4682      	mov	sl, r0
 800b85c:	4616      	mov	r6, r2
 800b85e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b862:	b087      	sub	sp, #28
 800b864:	ab03      	add	r3, sp, #12
 800b866:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b86a:	4b70      	ldr	r3, [pc, #448]	@ (800ba2c <_scanf_i+0x1dc>)
 800b86c:	69a1      	ldr	r1, [r4, #24]
 800b86e:	4a70      	ldr	r2, [pc, #448]	@ (800ba30 <_scanf_i+0x1e0>)
 800b870:	2903      	cmp	r1, #3
 800b872:	bf08      	it	eq
 800b874:	461a      	moveq	r2, r3
 800b876:	68a3      	ldr	r3, [r4, #8]
 800b878:	9201      	str	r2, [sp, #4]
 800b87a:	1e5a      	subs	r2, r3, #1
 800b87c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800b880:	bf88      	it	hi
 800b882:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800b886:	4627      	mov	r7, r4
 800b888:	bf82      	ittt	hi
 800b88a:	eb03 0905 	addhi.w	r9, r3, r5
 800b88e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800b892:	60a3      	strhi	r3, [r4, #8]
 800b894:	f857 3b1c 	ldr.w	r3, [r7], #28
 800b898:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800b89c:	bf98      	it	ls
 800b89e:	f04f 0900 	movls.w	r9, #0
 800b8a2:	6023      	str	r3, [r4, #0]
 800b8a4:	463d      	mov	r5, r7
 800b8a6:	f04f 0b00 	mov.w	fp, #0
 800b8aa:	6831      	ldr	r1, [r6, #0]
 800b8ac:	ab03      	add	r3, sp, #12
 800b8ae:	7809      	ldrb	r1, [r1, #0]
 800b8b0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800b8b4:	2202      	movs	r2, #2
 800b8b6:	f7f4 fc8b 	bl	80001d0 <memchr>
 800b8ba:	b328      	cbz	r0, 800b908 <_scanf_i+0xb8>
 800b8bc:	f1bb 0f01 	cmp.w	fp, #1
 800b8c0:	d159      	bne.n	800b976 <_scanf_i+0x126>
 800b8c2:	6862      	ldr	r2, [r4, #4]
 800b8c4:	b92a      	cbnz	r2, 800b8d2 <_scanf_i+0x82>
 800b8c6:	6822      	ldr	r2, [r4, #0]
 800b8c8:	2108      	movs	r1, #8
 800b8ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b8ce:	6061      	str	r1, [r4, #4]
 800b8d0:	6022      	str	r2, [r4, #0]
 800b8d2:	6822      	ldr	r2, [r4, #0]
 800b8d4:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800b8d8:	6022      	str	r2, [r4, #0]
 800b8da:	68a2      	ldr	r2, [r4, #8]
 800b8dc:	1e51      	subs	r1, r2, #1
 800b8de:	60a1      	str	r1, [r4, #8]
 800b8e0:	b192      	cbz	r2, 800b908 <_scanf_i+0xb8>
 800b8e2:	6832      	ldr	r2, [r6, #0]
 800b8e4:	1c51      	adds	r1, r2, #1
 800b8e6:	6031      	str	r1, [r6, #0]
 800b8e8:	7812      	ldrb	r2, [r2, #0]
 800b8ea:	f805 2b01 	strb.w	r2, [r5], #1
 800b8ee:	6872      	ldr	r2, [r6, #4]
 800b8f0:	3a01      	subs	r2, #1
 800b8f2:	2a00      	cmp	r2, #0
 800b8f4:	6072      	str	r2, [r6, #4]
 800b8f6:	dc07      	bgt.n	800b908 <_scanf_i+0xb8>
 800b8f8:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800b8fc:	4631      	mov	r1, r6
 800b8fe:	4650      	mov	r0, sl
 800b900:	4790      	blx	r2
 800b902:	2800      	cmp	r0, #0
 800b904:	f040 8085 	bne.w	800ba12 <_scanf_i+0x1c2>
 800b908:	f10b 0b01 	add.w	fp, fp, #1
 800b90c:	f1bb 0f03 	cmp.w	fp, #3
 800b910:	d1cb      	bne.n	800b8aa <_scanf_i+0x5a>
 800b912:	6863      	ldr	r3, [r4, #4]
 800b914:	b90b      	cbnz	r3, 800b91a <_scanf_i+0xca>
 800b916:	230a      	movs	r3, #10
 800b918:	6063      	str	r3, [r4, #4]
 800b91a:	6863      	ldr	r3, [r4, #4]
 800b91c:	4945      	ldr	r1, [pc, #276]	@ (800ba34 <_scanf_i+0x1e4>)
 800b91e:	6960      	ldr	r0, [r4, #20]
 800b920:	1ac9      	subs	r1, r1, r3
 800b922:	f000 f935 	bl	800bb90 <__sccl>
 800b926:	f04f 0b00 	mov.w	fp, #0
 800b92a:	68a3      	ldr	r3, [r4, #8]
 800b92c:	6822      	ldr	r2, [r4, #0]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d03d      	beq.n	800b9ae <_scanf_i+0x15e>
 800b932:	6831      	ldr	r1, [r6, #0]
 800b934:	6960      	ldr	r0, [r4, #20]
 800b936:	f891 c000 	ldrb.w	ip, [r1]
 800b93a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800b93e:	2800      	cmp	r0, #0
 800b940:	d035      	beq.n	800b9ae <_scanf_i+0x15e>
 800b942:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800b946:	d124      	bne.n	800b992 <_scanf_i+0x142>
 800b948:	0510      	lsls	r0, r2, #20
 800b94a:	d522      	bpl.n	800b992 <_scanf_i+0x142>
 800b94c:	f10b 0b01 	add.w	fp, fp, #1
 800b950:	f1b9 0f00 	cmp.w	r9, #0
 800b954:	d003      	beq.n	800b95e <_scanf_i+0x10e>
 800b956:	3301      	adds	r3, #1
 800b958:	f109 39ff 	add.w	r9, r9, #4294967295
 800b95c:	60a3      	str	r3, [r4, #8]
 800b95e:	6873      	ldr	r3, [r6, #4]
 800b960:	3b01      	subs	r3, #1
 800b962:	2b00      	cmp	r3, #0
 800b964:	6073      	str	r3, [r6, #4]
 800b966:	dd1b      	ble.n	800b9a0 <_scanf_i+0x150>
 800b968:	6833      	ldr	r3, [r6, #0]
 800b96a:	3301      	adds	r3, #1
 800b96c:	6033      	str	r3, [r6, #0]
 800b96e:	68a3      	ldr	r3, [r4, #8]
 800b970:	3b01      	subs	r3, #1
 800b972:	60a3      	str	r3, [r4, #8]
 800b974:	e7d9      	b.n	800b92a <_scanf_i+0xda>
 800b976:	f1bb 0f02 	cmp.w	fp, #2
 800b97a:	d1ae      	bne.n	800b8da <_scanf_i+0x8a>
 800b97c:	6822      	ldr	r2, [r4, #0]
 800b97e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800b982:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800b986:	d1c4      	bne.n	800b912 <_scanf_i+0xc2>
 800b988:	2110      	movs	r1, #16
 800b98a:	6061      	str	r1, [r4, #4]
 800b98c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b990:	e7a2      	b.n	800b8d8 <_scanf_i+0x88>
 800b992:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800b996:	6022      	str	r2, [r4, #0]
 800b998:	780b      	ldrb	r3, [r1, #0]
 800b99a:	f805 3b01 	strb.w	r3, [r5], #1
 800b99e:	e7de      	b.n	800b95e <_scanf_i+0x10e>
 800b9a0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b9a4:	4631      	mov	r1, r6
 800b9a6:	4650      	mov	r0, sl
 800b9a8:	4798      	blx	r3
 800b9aa:	2800      	cmp	r0, #0
 800b9ac:	d0df      	beq.n	800b96e <_scanf_i+0x11e>
 800b9ae:	6823      	ldr	r3, [r4, #0]
 800b9b0:	05d9      	lsls	r1, r3, #23
 800b9b2:	d50d      	bpl.n	800b9d0 <_scanf_i+0x180>
 800b9b4:	42bd      	cmp	r5, r7
 800b9b6:	d909      	bls.n	800b9cc <_scanf_i+0x17c>
 800b9b8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b9bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b9c0:	4632      	mov	r2, r6
 800b9c2:	4650      	mov	r0, sl
 800b9c4:	4798      	blx	r3
 800b9c6:	f105 39ff 	add.w	r9, r5, #4294967295
 800b9ca:	464d      	mov	r5, r9
 800b9cc:	42bd      	cmp	r5, r7
 800b9ce:	d028      	beq.n	800ba22 <_scanf_i+0x1d2>
 800b9d0:	6822      	ldr	r2, [r4, #0]
 800b9d2:	f012 0210 	ands.w	r2, r2, #16
 800b9d6:	d113      	bne.n	800ba00 <_scanf_i+0x1b0>
 800b9d8:	702a      	strb	r2, [r5, #0]
 800b9da:	6863      	ldr	r3, [r4, #4]
 800b9dc:	9e01      	ldr	r6, [sp, #4]
 800b9de:	4639      	mov	r1, r7
 800b9e0:	4650      	mov	r0, sl
 800b9e2:	47b0      	blx	r6
 800b9e4:	f8d8 3000 	ldr.w	r3, [r8]
 800b9e8:	6821      	ldr	r1, [r4, #0]
 800b9ea:	1d1a      	adds	r2, r3, #4
 800b9ec:	f8c8 2000 	str.w	r2, [r8]
 800b9f0:	f011 0f20 	tst.w	r1, #32
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	d00f      	beq.n	800ba18 <_scanf_i+0x1c8>
 800b9f8:	6018      	str	r0, [r3, #0]
 800b9fa:	68e3      	ldr	r3, [r4, #12]
 800b9fc:	3301      	adds	r3, #1
 800b9fe:	60e3      	str	r3, [r4, #12]
 800ba00:	6923      	ldr	r3, [r4, #16]
 800ba02:	1bed      	subs	r5, r5, r7
 800ba04:	445d      	add	r5, fp
 800ba06:	442b      	add	r3, r5
 800ba08:	6123      	str	r3, [r4, #16]
 800ba0a:	2000      	movs	r0, #0
 800ba0c:	b007      	add	sp, #28
 800ba0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba12:	f04f 0b00 	mov.w	fp, #0
 800ba16:	e7ca      	b.n	800b9ae <_scanf_i+0x15e>
 800ba18:	07ca      	lsls	r2, r1, #31
 800ba1a:	bf4c      	ite	mi
 800ba1c:	8018      	strhmi	r0, [r3, #0]
 800ba1e:	6018      	strpl	r0, [r3, #0]
 800ba20:	e7eb      	b.n	800b9fa <_scanf_i+0x1aa>
 800ba22:	2001      	movs	r0, #1
 800ba24:	e7f2      	b.n	800ba0c <_scanf_i+0x1bc>
 800ba26:	bf00      	nop
 800ba28:	0800cb84 	.word	0x0800cb84
 800ba2c:	0800b149 	.word	0x0800b149
 800ba30:	0800c535 	.word	0x0800c535
 800ba34:	0800d388 	.word	0x0800d388

0800ba38 <__sflush_r>:
 800ba38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ba3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba40:	0716      	lsls	r6, r2, #28
 800ba42:	4605      	mov	r5, r0
 800ba44:	460c      	mov	r4, r1
 800ba46:	d454      	bmi.n	800baf2 <__sflush_r+0xba>
 800ba48:	684b      	ldr	r3, [r1, #4]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	dc02      	bgt.n	800ba54 <__sflush_r+0x1c>
 800ba4e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	dd48      	ble.n	800bae6 <__sflush_r+0xae>
 800ba54:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ba56:	2e00      	cmp	r6, #0
 800ba58:	d045      	beq.n	800bae6 <__sflush_r+0xae>
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ba60:	682f      	ldr	r7, [r5, #0]
 800ba62:	6a21      	ldr	r1, [r4, #32]
 800ba64:	602b      	str	r3, [r5, #0]
 800ba66:	d030      	beq.n	800baca <__sflush_r+0x92>
 800ba68:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ba6a:	89a3      	ldrh	r3, [r4, #12]
 800ba6c:	0759      	lsls	r1, r3, #29
 800ba6e:	d505      	bpl.n	800ba7c <__sflush_r+0x44>
 800ba70:	6863      	ldr	r3, [r4, #4]
 800ba72:	1ad2      	subs	r2, r2, r3
 800ba74:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ba76:	b10b      	cbz	r3, 800ba7c <__sflush_r+0x44>
 800ba78:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ba7a:	1ad2      	subs	r2, r2, r3
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ba80:	6a21      	ldr	r1, [r4, #32]
 800ba82:	4628      	mov	r0, r5
 800ba84:	47b0      	blx	r6
 800ba86:	1c43      	adds	r3, r0, #1
 800ba88:	89a3      	ldrh	r3, [r4, #12]
 800ba8a:	d106      	bne.n	800ba9a <__sflush_r+0x62>
 800ba8c:	6829      	ldr	r1, [r5, #0]
 800ba8e:	291d      	cmp	r1, #29
 800ba90:	d82b      	bhi.n	800baea <__sflush_r+0xb2>
 800ba92:	4a2a      	ldr	r2, [pc, #168]	@ (800bb3c <__sflush_r+0x104>)
 800ba94:	40ca      	lsrs	r2, r1
 800ba96:	07d6      	lsls	r6, r2, #31
 800ba98:	d527      	bpl.n	800baea <__sflush_r+0xb2>
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	6062      	str	r2, [r4, #4]
 800ba9e:	04d9      	lsls	r1, r3, #19
 800baa0:	6922      	ldr	r2, [r4, #16]
 800baa2:	6022      	str	r2, [r4, #0]
 800baa4:	d504      	bpl.n	800bab0 <__sflush_r+0x78>
 800baa6:	1c42      	adds	r2, r0, #1
 800baa8:	d101      	bne.n	800baae <__sflush_r+0x76>
 800baaa:	682b      	ldr	r3, [r5, #0]
 800baac:	b903      	cbnz	r3, 800bab0 <__sflush_r+0x78>
 800baae:	6560      	str	r0, [r4, #84]	@ 0x54
 800bab0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bab2:	602f      	str	r7, [r5, #0]
 800bab4:	b1b9      	cbz	r1, 800bae6 <__sflush_r+0xae>
 800bab6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800baba:	4299      	cmp	r1, r3
 800babc:	d002      	beq.n	800bac4 <__sflush_r+0x8c>
 800babe:	4628      	mov	r0, r5
 800bac0:	f7fd ff16 	bl	80098f0 <_free_r>
 800bac4:	2300      	movs	r3, #0
 800bac6:	6363      	str	r3, [r4, #52]	@ 0x34
 800bac8:	e00d      	b.n	800bae6 <__sflush_r+0xae>
 800baca:	2301      	movs	r3, #1
 800bacc:	4628      	mov	r0, r5
 800bace:	47b0      	blx	r6
 800bad0:	4602      	mov	r2, r0
 800bad2:	1c50      	adds	r0, r2, #1
 800bad4:	d1c9      	bne.n	800ba6a <__sflush_r+0x32>
 800bad6:	682b      	ldr	r3, [r5, #0]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d0c6      	beq.n	800ba6a <__sflush_r+0x32>
 800badc:	2b1d      	cmp	r3, #29
 800bade:	d001      	beq.n	800bae4 <__sflush_r+0xac>
 800bae0:	2b16      	cmp	r3, #22
 800bae2:	d11e      	bne.n	800bb22 <__sflush_r+0xea>
 800bae4:	602f      	str	r7, [r5, #0]
 800bae6:	2000      	movs	r0, #0
 800bae8:	e022      	b.n	800bb30 <__sflush_r+0xf8>
 800baea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800baee:	b21b      	sxth	r3, r3
 800baf0:	e01b      	b.n	800bb2a <__sflush_r+0xf2>
 800baf2:	690f      	ldr	r7, [r1, #16]
 800baf4:	2f00      	cmp	r7, #0
 800baf6:	d0f6      	beq.n	800bae6 <__sflush_r+0xae>
 800baf8:	0793      	lsls	r3, r2, #30
 800bafa:	680e      	ldr	r6, [r1, #0]
 800bafc:	bf08      	it	eq
 800bafe:	694b      	ldreq	r3, [r1, #20]
 800bb00:	600f      	str	r7, [r1, #0]
 800bb02:	bf18      	it	ne
 800bb04:	2300      	movne	r3, #0
 800bb06:	eba6 0807 	sub.w	r8, r6, r7
 800bb0a:	608b      	str	r3, [r1, #8]
 800bb0c:	f1b8 0f00 	cmp.w	r8, #0
 800bb10:	dde9      	ble.n	800bae6 <__sflush_r+0xae>
 800bb12:	6a21      	ldr	r1, [r4, #32]
 800bb14:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bb16:	4643      	mov	r3, r8
 800bb18:	463a      	mov	r2, r7
 800bb1a:	4628      	mov	r0, r5
 800bb1c:	47b0      	blx	r6
 800bb1e:	2800      	cmp	r0, #0
 800bb20:	dc08      	bgt.n	800bb34 <__sflush_r+0xfc>
 800bb22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bb2a:	81a3      	strh	r3, [r4, #12]
 800bb2c:	f04f 30ff 	mov.w	r0, #4294967295
 800bb30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb34:	4407      	add	r7, r0
 800bb36:	eba8 0800 	sub.w	r8, r8, r0
 800bb3a:	e7e7      	b.n	800bb0c <__sflush_r+0xd4>
 800bb3c:	20400001 	.word	0x20400001

0800bb40 <_fflush_r>:
 800bb40:	b538      	push	{r3, r4, r5, lr}
 800bb42:	690b      	ldr	r3, [r1, #16]
 800bb44:	4605      	mov	r5, r0
 800bb46:	460c      	mov	r4, r1
 800bb48:	b913      	cbnz	r3, 800bb50 <_fflush_r+0x10>
 800bb4a:	2500      	movs	r5, #0
 800bb4c:	4628      	mov	r0, r5
 800bb4e:	bd38      	pop	{r3, r4, r5, pc}
 800bb50:	b118      	cbz	r0, 800bb5a <_fflush_r+0x1a>
 800bb52:	6a03      	ldr	r3, [r0, #32]
 800bb54:	b90b      	cbnz	r3, 800bb5a <_fflush_r+0x1a>
 800bb56:	f7fc ff03 	bl	8008960 <__sinit>
 800bb5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d0f3      	beq.n	800bb4a <_fflush_r+0xa>
 800bb62:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bb64:	07d0      	lsls	r0, r2, #31
 800bb66:	d404      	bmi.n	800bb72 <_fflush_r+0x32>
 800bb68:	0599      	lsls	r1, r3, #22
 800bb6a:	d402      	bmi.n	800bb72 <_fflush_r+0x32>
 800bb6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bb6e:	f7fd f84e 	bl	8008c0e <__retarget_lock_acquire_recursive>
 800bb72:	4628      	mov	r0, r5
 800bb74:	4621      	mov	r1, r4
 800bb76:	f7ff ff5f 	bl	800ba38 <__sflush_r>
 800bb7a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bb7c:	07da      	lsls	r2, r3, #31
 800bb7e:	4605      	mov	r5, r0
 800bb80:	d4e4      	bmi.n	800bb4c <_fflush_r+0xc>
 800bb82:	89a3      	ldrh	r3, [r4, #12]
 800bb84:	059b      	lsls	r3, r3, #22
 800bb86:	d4e1      	bmi.n	800bb4c <_fflush_r+0xc>
 800bb88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bb8a:	f7fd f841 	bl	8008c10 <__retarget_lock_release_recursive>
 800bb8e:	e7dd      	b.n	800bb4c <_fflush_r+0xc>

0800bb90 <__sccl>:
 800bb90:	b570      	push	{r4, r5, r6, lr}
 800bb92:	780b      	ldrb	r3, [r1, #0]
 800bb94:	4604      	mov	r4, r0
 800bb96:	2b5e      	cmp	r3, #94	@ 0x5e
 800bb98:	bf0b      	itete	eq
 800bb9a:	784b      	ldrbeq	r3, [r1, #1]
 800bb9c:	1c4a      	addne	r2, r1, #1
 800bb9e:	1c8a      	addeq	r2, r1, #2
 800bba0:	2100      	movne	r1, #0
 800bba2:	bf08      	it	eq
 800bba4:	2101      	moveq	r1, #1
 800bba6:	3801      	subs	r0, #1
 800bba8:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800bbac:	f800 1f01 	strb.w	r1, [r0, #1]!
 800bbb0:	42a8      	cmp	r0, r5
 800bbb2:	d1fb      	bne.n	800bbac <__sccl+0x1c>
 800bbb4:	b90b      	cbnz	r3, 800bbba <__sccl+0x2a>
 800bbb6:	1e50      	subs	r0, r2, #1
 800bbb8:	bd70      	pop	{r4, r5, r6, pc}
 800bbba:	f081 0101 	eor.w	r1, r1, #1
 800bbbe:	54e1      	strb	r1, [r4, r3]
 800bbc0:	4610      	mov	r0, r2
 800bbc2:	4602      	mov	r2, r0
 800bbc4:	f812 5b01 	ldrb.w	r5, [r2], #1
 800bbc8:	2d2d      	cmp	r5, #45	@ 0x2d
 800bbca:	d005      	beq.n	800bbd8 <__sccl+0x48>
 800bbcc:	2d5d      	cmp	r5, #93	@ 0x5d
 800bbce:	d016      	beq.n	800bbfe <__sccl+0x6e>
 800bbd0:	2d00      	cmp	r5, #0
 800bbd2:	d0f1      	beq.n	800bbb8 <__sccl+0x28>
 800bbd4:	462b      	mov	r3, r5
 800bbd6:	e7f2      	b.n	800bbbe <__sccl+0x2e>
 800bbd8:	7846      	ldrb	r6, [r0, #1]
 800bbda:	2e5d      	cmp	r6, #93	@ 0x5d
 800bbdc:	d0fa      	beq.n	800bbd4 <__sccl+0x44>
 800bbde:	42b3      	cmp	r3, r6
 800bbe0:	dcf8      	bgt.n	800bbd4 <__sccl+0x44>
 800bbe2:	3002      	adds	r0, #2
 800bbe4:	461a      	mov	r2, r3
 800bbe6:	3201      	adds	r2, #1
 800bbe8:	4296      	cmp	r6, r2
 800bbea:	54a1      	strb	r1, [r4, r2]
 800bbec:	dcfb      	bgt.n	800bbe6 <__sccl+0x56>
 800bbee:	1af2      	subs	r2, r6, r3
 800bbf0:	3a01      	subs	r2, #1
 800bbf2:	1c5d      	adds	r5, r3, #1
 800bbf4:	42b3      	cmp	r3, r6
 800bbf6:	bfa8      	it	ge
 800bbf8:	2200      	movge	r2, #0
 800bbfa:	18ab      	adds	r3, r5, r2
 800bbfc:	e7e1      	b.n	800bbc2 <__sccl+0x32>
 800bbfe:	4610      	mov	r0, r2
 800bc00:	e7da      	b.n	800bbb8 <__sccl+0x28>

0800bc02 <__submore>:
 800bc02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc06:	460c      	mov	r4, r1
 800bc08:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800bc0a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bc0e:	4299      	cmp	r1, r3
 800bc10:	d11d      	bne.n	800bc4e <__submore+0x4c>
 800bc12:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800bc16:	f7fd fedf 	bl	80099d8 <_malloc_r>
 800bc1a:	b918      	cbnz	r0, 800bc24 <__submore+0x22>
 800bc1c:	f04f 30ff 	mov.w	r0, #4294967295
 800bc20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc24:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bc28:	63a3      	str	r3, [r4, #56]	@ 0x38
 800bc2a:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800bc2e:	6360      	str	r0, [r4, #52]	@ 0x34
 800bc30:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800bc34:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800bc38:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800bc3c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800bc40:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800bc44:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800bc48:	6020      	str	r0, [r4, #0]
 800bc4a:	2000      	movs	r0, #0
 800bc4c:	e7e8      	b.n	800bc20 <__submore+0x1e>
 800bc4e:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800bc50:	0077      	lsls	r7, r6, #1
 800bc52:	463a      	mov	r2, r7
 800bc54:	f000 fbd1 	bl	800c3fa <_realloc_r>
 800bc58:	4605      	mov	r5, r0
 800bc5a:	2800      	cmp	r0, #0
 800bc5c:	d0de      	beq.n	800bc1c <__submore+0x1a>
 800bc5e:	eb00 0806 	add.w	r8, r0, r6
 800bc62:	4601      	mov	r1, r0
 800bc64:	4632      	mov	r2, r6
 800bc66:	4640      	mov	r0, r8
 800bc68:	f7fc ffd3 	bl	8008c12 <memcpy>
 800bc6c:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800bc70:	f8c4 8000 	str.w	r8, [r4]
 800bc74:	e7e9      	b.n	800bc4a <__submore+0x48>

0800bc76 <memmove>:
 800bc76:	4288      	cmp	r0, r1
 800bc78:	b510      	push	{r4, lr}
 800bc7a:	eb01 0402 	add.w	r4, r1, r2
 800bc7e:	d902      	bls.n	800bc86 <memmove+0x10>
 800bc80:	4284      	cmp	r4, r0
 800bc82:	4623      	mov	r3, r4
 800bc84:	d807      	bhi.n	800bc96 <memmove+0x20>
 800bc86:	1e43      	subs	r3, r0, #1
 800bc88:	42a1      	cmp	r1, r4
 800bc8a:	d008      	beq.n	800bc9e <memmove+0x28>
 800bc8c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bc90:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bc94:	e7f8      	b.n	800bc88 <memmove+0x12>
 800bc96:	4402      	add	r2, r0
 800bc98:	4601      	mov	r1, r0
 800bc9a:	428a      	cmp	r2, r1
 800bc9c:	d100      	bne.n	800bca0 <memmove+0x2a>
 800bc9e:	bd10      	pop	{r4, pc}
 800bca0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bca4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bca8:	e7f7      	b.n	800bc9a <memmove+0x24>

0800bcaa <strncmp>:
 800bcaa:	b510      	push	{r4, lr}
 800bcac:	b16a      	cbz	r2, 800bcca <strncmp+0x20>
 800bcae:	3901      	subs	r1, #1
 800bcb0:	1884      	adds	r4, r0, r2
 800bcb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bcb6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800bcba:	429a      	cmp	r2, r3
 800bcbc:	d103      	bne.n	800bcc6 <strncmp+0x1c>
 800bcbe:	42a0      	cmp	r0, r4
 800bcc0:	d001      	beq.n	800bcc6 <strncmp+0x1c>
 800bcc2:	2a00      	cmp	r2, #0
 800bcc4:	d1f5      	bne.n	800bcb2 <strncmp+0x8>
 800bcc6:	1ad0      	subs	r0, r2, r3
 800bcc8:	bd10      	pop	{r4, pc}
 800bcca:	4610      	mov	r0, r2
 800bccc:	e7fc      	b.n	800bcc8 <strncmp+0x1e>
	...

0800bcd0 <_sbrk_r>:
 800bcd0:	b538      	push	{r3, r4, r5, lr}
 800bcd2:	4d06      	ldr	r5, [pc, #24]	@ (800bcec <_sbrk_r+0x1c>)
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	4604      	mov	r4, r0
 800bcd8:	4608      	mov	r0, r1
 800bcda:	602b      	str	r3, [r5, #0]
 800bcdc:	f7f5 ff80 	bl	8001be0 <_sbrk>
 800bce0:	1c43      	adds	r3, r0, #1
 800bce2:	d102      	bne.n	800bcea <_sbrk_r+0x1a>
 800bce4:	682b      	ldr	r3, [r5, #0]
 800bce6:	b103      	cbz	r3, 800bcea <_sbrk_r+0x1a>
 800bce8:	6023      	str	r3, [r4, #0]
 800bcea:	bd38      	pop	{r3, r4, r5, pc}
 800bcec:	20001008 	.word	0x20001008

0800bcf0 <nan>:
 800bcf0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800bcf8 <nan+0x8>
 800bcf4:	4770      	bx	lr
 800bcf6:	bf00      	nop
 800bcf8:	00000000 	.word	0x00000000
 800bcfc:	7ff80000 	.word	0x7ff80000

0800bd00 <__assert_func>:
 800bd00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bd02:	4614      	mov	r4, r2
 800bd04:	461a      	mov	r2, r3
 800bd06:	4b09      	ldr	r3, [pc, #36]	@ (800bd2c <__assert_func+0x2c>)
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	4605      	mov	r5, r0
 800bd0c:	68d8      	ldr	r0, [r3, #12]
 800bd0e:	b14c      	cbz	r4, 800bd24 <__assert_func+0x24>
 800bd10:	4b07      	ldr	r3, [pc, #28]	@ (800bd30 <__assert_func+0x30>)
 800bd12:	9100      	str	r1, [sp, #0]
 800bd14:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bd18:	4906      	ldr	r1, [pc, #24]	@ (800bd34 <__assert_func+0x34>)
 800bd1a:	462b      	mov	r3, r5
 800bd1c:	f000 fc1a 	bl	800c554 <fiprintf>
 800bd20:	f000 fc2a 	bl	800c578 <abort>
 800bd24:	4b04      	ldr	r3, [pc, #16]	@ (800bd38 <__assert_func+0x38>)
 800bd26:	461c      	mov	r4, r3
 800bd28:	e7f3      	b.n	800bd12 <__assert_func+0x12>
 800bd2a:	bf00      	nop
 800bd2c:	20000034 	.word	0x20000034
 800bd30:	0800d39b 	.word	0x0800d39b
 800bd34:	0800d3a8 	.word	0x0800d3a8
 800bd38:	0800d3d6 	.word	0x0800d3d6

0800bd3c <_calloc_r>:
 800bd3c:	b570      	push	{r4, r5, r6, lr}
 800bd3e:	fba1 5402 	umull	r5, r4, r1, r2
 800bd42:	b934      	cbnz	r4, 800bd52 <_calloc_r+0x16>
 800bd44:	4629      	mov	r1, r5
 800bd46:	f7fd fe47 	bl	80099d8 <_malloc_r>
 800bd4a:	4606      	mov	r6, r0
 800bd4c:	b928      	cbnz	r0, 800bd5a <_calloc_r+0x1e>
 800bd4e:	4630      	mov	r0, r6
 800bd50:	bd70      	pop	{r4, r5, r6, pc}
 800bd52:	220c      	movs	r2, #12
 800bd54:	6002      	str	r2, [r0, #0]
 800bd56:	2600      	movs	r6, #0
 800bd58:	e7f9      	b.n	800bd4e <_calloc_r+0x12>
 800bd5a:	462a      	mov	r2, r5
 800bd5c:	4621      	mov	r1, r4
 800bd5e:	f7fc fed8 	bl	8008b12 <memset>
 800bd62:	e7f4      	b.n	800bd4e <_calloc_r+0x12>

0800bd64 <rshift>:
 800bd64:	6903      	ldr	r3, [r0, #16]
 800bd66:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bd6a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bd6e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800bd72:	f100 0414 	add.w	r4, r0, #20
 800bd76:	dd45      	ble.n	800be04 <rshift+0xa0>
 800bd78:	f011 011f 	ands.w	r1, r1, #31
 800bd7c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bd80:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bd84:	d10c      	bne.n	800bda0 <rshift+0x3c>
 800bd86:	f100 0710 	add.w	r7, r0, #16
 800bd8a:	4629      	mov	r1, r5
 800bd8c:	42b1      	cmp	r1, r6
 800bd8e:	d334      	bcc.n	800bdfa <rshift+0x96>
 800bd90:	1a9b      	subs	r3, r3, r2
 800bd92:	009b      	lsls	r3, r3, #2
 800bd94:	1eea      	subs	r2, r5, #3
 800bd96:	4296      	cmp	r6, r2
 800bd98:	bf38      	it	cc
 800bd9a:	2300      	movcc	r3, #0
 800bd9c:	4423      	add	r3, r4
 800bd9e:	e015      	b.n	800bdcc <rshift+0x68>
 800bda0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bda4:	f1c1 0820 	rsb	r8, r1, #32
 800bda8:	40cf      	lsrs	r7, r1
 800bdaa:	f105 0e04 	add.w	lr, r5, #4
 800bdae:	46a1      	mov	r9, r4
 800bdb0:	4576      	cmp	r6, lr
 800bdb2:	46f4      	mov	ip, lr
 800bdb4:	d815      	bhi.n	800bde2 <rshift+0x7e>
 800bdb6:	1a9a      	subs	r2, r3, r2
 800bdb8:	0092      	lsls	r2, r2, #2
 800bdba:	3a04      	subs	r2, #4
 800bdbc:	3501      	adds	r5, #1
 800bdbe:	42ae      	cmp	r6, r5
 800bdc0:	bf38      	it	cc
 800bdc2:	2200      	movcc	r2, #0
 800bdc4:	18a3      	adds	r3, r4, r2
 800bdc6:	50a7      	str	r7, [r4, r2]
 800bdc8:	b107      	cbz	r7, 800bdcc <rshift+0x68>
 800bdca:	3304      	adds	r3, #4
 800bdcc:	1b1a      	subs	r2, r3, r4
 800bdce:	42a3      	cmp	r3, r4
 800bdd0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bdd4:	bf08      	it	eq
 800bdd6:	2300      	moveq	r3, #0
 800bdd8:	6102      	str	r2, [r0, #16]
 800bdda:	bf08      	it	eq
 800bddc:	6143      	streq	r3, [r0, #20]
 800bdde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bde2:	f8dc c000 	ldr.w	ip, [ip]
 800bde6:	fa0c fc08 	lsl.w	ip, ip, r8
 800bdea:	ea4c 0707 	orr.w	r7, ip, r7
 800bdee:	f849 7b04 	str.w	r7, [r9], #4
 800bdf2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bdf6:	40cf      	lsrs	r7, r1
 800bdf8:	e7da      	b.n	800bdb0 <rshift+0x4c>
 800bdfa:	f851 cb04 	ldr.w	ip, [r1], #4
 800bdfe:	f847 cf04 	str.w	ip, [r7, #4]!
 800be02:	e7c3      	b.n	800bd8c <rshift+0x28>
 800be04:	4623      	mov	r3, r4
 800be06:	e7e1      	b.n	800bdcc <rshift+0x68>

0800be08 <__hexdig_fun>:
 800be08:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800be0c:	2b09      	cmp	r3, #9
 800be0e:	d802      	bhi.n	800be16 <__hexdig_fun+0xe>
 800be10:	3820      	subs	r0, #32
 800be12:	b2c0      	uxtb	r0, r0
 800be14:	4770      	bx	lr
 800be16:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800be1a:	2b05      	cmp	r3, #5
 800be1c:	d801      	bhi.n	800be22 <__hexdig_fun+0x1a>
 800be1e:	3847      	subs	r0, #71	@ 0x47
 800be20:	e7f7      	b.n	800be12 <__hexdig_fun+0xa>
 800be22:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800be26:	2b05      	cmp	r3, #5
 800be28:	d801      	bhi.n	800be2e <__hexdig_fun+0x26>
 800be2a:	3827      	subs	r0, #39	@ 0x27
 800be2c:	e7f1      	b.n	800be12 <__hexdig_fun+0xa>
 800be2e:	2000      	movs	r0, #0
 800be30:	4770      	bx	lr
	...

0800be34 <__gethex>:
 800be34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be38:	b085      	sub	sp, #20
 800be3a:	468a      	mov	sl, r1
 800be3c:	9302      	str	r3, [sp, #8]
 800be3e:	680b      	ldr	r3, [r1, #0]
 800be40:	9001      	str	r0, [sp, #4]
 800be42:	4690      	mov	r8, r2
 800be44:	1c9c      	adds	r4, r3, #2
 800be46:	46a1      	mov	r9, r4
 800be48:	f814 0b01 	ldrb.w	r0, [r4], #1
 800be4c:	2830      	cmp	r0, #48	@ 0x30
 800be4e:	d0fa      	beq.n	800be46 <__gethex+0x12>
 800be50:	eba9 0303 	sub.w	r3, r9, r3
 800be54:	f1a3 0b02 	sub.w	fp, r3, #2
 800be58:	f7ff ffd6 	bl	800be08 <__hexdig_fun>
 800be5c:	4605      	mov	r5, r0
 800be5e:	2800      	cmp	r0, #0
 800be60:	d168      	bne.n	800bf34 <__gethex+0x100>
 800be62:	49a0      	ldr	r1, [pc, #640]	@ (800c0e4 <__gethex+0x2b0>)
 800be64:	2201      	movs	r2, #1
 800be66:	4648      	mov	r0, r9
 800be68:	f7ff ff1f 	bl	800bcaa <strncmp>
 800be6c:	4607      	mov	r7, r0
 800be6e:	2800      	cmp	r0, #0
 800be70:	d167      	bne.n	800bf42 <__gethex+0x10e>
 800be72:	f899 0001 	ldrb.w	r0, [r9, #1]
 800be76:	4626      	mov	r6, r4
 800be78:	f7ff ffc6 	bl	800be08 <__hexdig_fun>
 800be7c:	2800      	cmp	r0, #0
 800be7e:	d062      	beq.n	800bf46 <__gethex+0x112>
 800be80:	4623      	mov	r3, r4
 800be82:	7818      	ldrb	r0, [r3, #0]
 800be84:	2830      	cmp	r0, #48	@ 0x30
 800be86:	4699      	mov	r9, r3
 800be88:	f103 0301 	add.w	r3, r3, #1
 800be8c:	d0f9      	beq.n	800be82 <__gethex+0x4e>
 800be8e:	f7ff ffbb 	bl	800be08 <__hexdig_fun>
 800be92:	fab0 f580 	clz	r5, r0
 800be96:	096d      	lsrs	r5, r5, #5
 800be98:	f04f 0b01 	mov.w	fp, #1
 800be9c:	464a      	mov	r2, r9
 800be9e:	4616      	mov	r6, r2
 800bea0:	3201      	adds	r2, #1
 800bea2:	7830      	ldrb	r0, [r6, #0]
 800bea4:	f7ff ffb0 	bl	800be08 <__hexdig_fun>
 800bea8:	2800      	cmp	r0, #0
 800beaa:	d1f8      	bne.n	800be9e <__gethex+0x6a>
 800beac:	498d      	ldr	r1, [pc, #564]	@ (800c0e4 <__gethex+0x2b0>)
 800beae:	2201      	movs	r2, #1
 800beb0:	4630      	mov	r0, r6
 800beb2:	f7ff fefa 	bl	800bcaa <strncmp>
 800beb6:	2800      	cmp	r0, #0
 800beb8:	d13f      	bne.n	800bf3a <__gethex+0x106>
 800beba:	b944      	cbnz	r4, 800bece <__gethex+0x9a>
 800bebc:	1c74      	adds	r4, r6, #1
 800bebe:	4622      	mov	r2, r4
 800bec0:	4616      	mov	r6, r2
 800bec2:	3201      	adds	r2, #1
 800bec4:	7830      	ldrb	r0, [r6, #0]
 800bec6:	f7ff ff9f 	bl	800be08 <__hexdig_fun>
 800beca:	2800      	cmp	r0, #0
 800becc:	d1f8      	bne.n	800bec0 <__gethex+0x8c>
 800bece:	1ba4      	subs	r4, r4, r6
 800bed0:	00a7      	lsls	r7, r4, #2
 800bed2:	7833      	ldrb	r3, [r6, #0]
 800bed4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800bed8:	2b50      	cmp	r3, #80	@ 0x50
 800beda:	d13e      	bne.n	800bf5a <__gethex+0x126>
 800bedc:	7873      	ldrb	r3, [r6, #1]
 800bede:	2b2b      	cmp	r3, #43	@ 0x2b
 800bee0:	d033      	beq.n	800bf4a <__gethex+0x116>
 800bee2:	2b2d      	cmp	r3, #45	@ 0x2d
 800bee4:	d034      	beq.n	800bf50 <__gethex+0x11c>
 800bee6:	1c71      	adds	r1, r6, #1
 800bee8:	2400      	movs	r4, #0
 800beea:	7808      	ldrb	r0, [r1, #0]
 800beec:	f7ff ff8c 	bl	800be08 <__hexdig_fun>
 800bef0:	1e43      	subs	r3, r0, #1
 800bef2:	b2db      	uxtb	r3, r3
 800bef4:	2b18      	cmp	r3, #24
 800bef6:	d830      	bhi.n	800bf5a <__gethex+0x126>
 800bef8:	f1a0 0210 	sub.w	r2, r0, #16
 800befc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bf00:	f7ff ff82 	bl	800be08 <__hexdig_fun>
 800bf04:	f100 3cff 	add.w	ip, r0, #4294967295
 800bf08:	fa5f fc8c 	uxtb.w	ip, ip
 800bf0c:	f1bc 0f18 	cmp.w	ip, #24
 800bf10:	f04f 030a 	mov.w	r3, #10
 800bf14:	d91e      	bls.n	800bf54 <__gethex+0x120>
 800bf16:	b104      	cbz	r4, 800bf1a <__gethex+0xe6>
 800bf18:	4252      	negs	r2, r2
 800bf1a:	4417      	add	r7, r2
 800bf1c:	f8ca 1000 	str.w	r1, [sl]
 800bf20:	b1ed      	cbz	r5, 800bf5e <__gethex+0x12a>
 800bf22:	f1bb 0f00 	cmp.w	fp, #0
 800bf26:	bf0c      	ite	eq
 800bf28:	2506      	moveq	r5, #6
 800bf2a:	2500      	movne	r5, #0
 800bf2c:	4628      	mov	r0, r5
 800bf2e:	b005      	add	sp, #20
 800bf30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf34:	2500      	movs	r5, #0
 800bf36:	462c      	mov	r4, r5
 800bf38:	e7b0      	b.n	800be9c <__gethex+0x68>
 800bf3a:	2c00      	cmp	r4, #0
 800bf3c:	d1c7      	bne.n	800bece <__gethex+0x9a>
 800bf3e:	4627      	mov	r7, r4
 800bf40:	e7c7      	b.n	800bed2 <__gethex+0x9e>
 800bf42:	464e      	mov	r6, r9
 800bf44:	462f      	mov	r7, r5
 800bf46:	2501      	movs	r5, #1
 800bf48:	e7c3      	b.n	800bed2 <__gethex+0x9e>
 800bf4a:	2400      	movs	r4, #0
 800bf4c:	1cb1      	adds	r1, r6, #2
 800bf4e:	e7cc      	b.n	800beea <__gethex+0xb6>
 800bf50:	2401      	movs	r4, #1
 800bf52:	e7fb      	b.n	800bf4c <__gethex+0x118>
 800bf54:	fb03 0002 	mla	r0, r3, r2, r0
 800bf58:	e7ce      	b.n	800bef8 <__gethex+0xc4>
 800bf5a:	4631      	mov	r1, r6
 800bf5c:	e7de      	b.n	800bf1c <__gethex+0xe8>
 800bf5e:	eba6 0309 	sub.w	r3, r6, r9
 800bf62:	3b01      	subs	r3, #1
 800bf64:	4629      	mov	r1, r5
 800bf66:	2b07      	cmp	r3, #7
 800bf68:	dc0a      	bgt.n	800bf80 <__gethex+0x14c>
 800bf6a:	9801      	ldr	r0, [sp, #4]
 800bf6c:	f7fd fdc0 	bl	8009af0 <_Balloc>
 800bf70:	4604      	mov	r4, r0
 800bf72:	b940      	cbnz	r0, 800bf86 <__gethex+0x152>
 800bf74:	4b5c      	ldr	r3, [pc, #368]	@ (800c0e8 <__gethex+0x2b4>)
 800bf76:	4602      	mov	r2, r0
 800bf78:	21e4      	movs	r1, #228	@ 0xe4
 800bf7a:	485c      	ldr	r0, [pc, #368]	@ (800c0ec <__gethex+0x2b8>)
 800bf7c:	f7ff fec0 	bl	800bd00 <__assert_func>
 800bf80:	3101      	adds	r1, #1
 800bf82:	105b      	asrs	r3, r3, #1
 800bf84:	e7ef      	b.n	800bf66 <__gethex+0x132>
 800bf86:	f100 0a14 	add.w	sl, r0, #20
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	4655      	mov	r5, sl
 800bf8e:	469b      	mov	fp, r3
 800bf90:	45b1      	cmp	r9, r6
 800bf92:	d337      	bcc.n	800c004 <__gethex+0x1d0>
 800bf94:	f845 bb04 	str.w	fp, [r5], #4
 800bf98:	eba5 050a 	sub.w	r5, r5, sl
 800bf9c:	10ad      	asrs	r5, r5, #2
 800bf9e:	6125      	str	r5, [r4, #16]
 800bfa0:	4658      	mov	r0, fp
 800bfa2:	f7fd fe97 	bl	8009cd4 <__hi0bits>
 800bfa6:	016d      	lsls	r5, r5, #5
 800bfa8:	f8d8 6000 	ldr.w	r6, [r8]
 800bfac:	1a2d      	subs	r5, r5, r0
 800bfae:	42b5      	cmp	r5, r6
 800bfb0:	dd54      	ble.n	800c05c <__gethex+0x228>
 800bfb2:	1bad      	subs	r5, r5, r6
 800bfb4:	4629      	mov	r1, r5
 800bfb6:	4620      	mov	r0, r4
 800bfb8:	f7fe fa23 	bl	800a402 <__any_on>
 800bfbc:	4681      	mov	r9, r0
 800bfbe:	b178      	cbz	r0, 800bfe0 <__gethex+0x1ac>
 800bfc0:	1e6b      	subs	r3, r5, #1
 800bfc2:	1159      	asrs	r1, r3, #5
 800bfc4:	f003 021f 	and.w	r2, r3, #31
 800bfc8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800bfcc:	f04f 0901 	mov.w	r9, #1
 800bfd0:	fa09 f202 	lsl.w	r2, r9, r2
 800bfd4:	420a      	tst	r2, r1
 800bfd6:	d003      	beq.n	800bfe0 <__gethex+0x1ac>
 800bfd8:	454b      	cmp	r3, r9
 800bfda:	dc36      	bgt.n	800c04a <__gethex+0x216>
 800bfdc:	f04f 0902 	mov.w	r9, #2
 800bfe0:	4629      	mov	r1, r5
 800bfe2:	4620      	mov	r0, r4
 800bfe4:	f7ff febe 	bl	800bd64 <rshift>
 800bfe8:	442f      	add	r7, r5
 800bfea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bfee:	42bb      	cmp	r3, r7
 800bff0:	da42      	bge.n	800c078 <__gethex+0x244>
 800bff2:	9801      	ldr	r0, [sp, #4]
 800bff4:	4621      	mov	r1, r4
 800bff6:	f7fd fdbb 	bl	8009b70 <_Bfree>
 800bffa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bffc:	2300      	movs	r3, #0
 800bffe:	6013      	str	r3, [r2, #0]
 800c000:	25a3      	movs	r5, #163	@ 0xa3
 800c002:	e793      	b.n	800bf2c <__gethex+0xf8>
 800c004:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c008:	2a2e      	cmp	r2, #46	@ 0x2e
 800c00a:	d012      	beq.n	800c032 <__gethex+0x1fe>
 800c00c:	2b20      	cmp	r3, #32
 800c00e:	d104      	bne.n	800c01a <__gethex+0x1e6>
 800c010:	f845 bb04 	str.w	fp, [r5], #4
 800c014:	f04f 0b00 	mov.w	fp, #0
 800c018:	465b      	mov	r3, fp
 800c01a:	7830      	ldrb	r0, [r6, #0]
 800c01c:	9303      	str	r3, [sp, #12]
 800c01e:	f7ff fef3 	bl	800be08 <__hexdig_fun>
 800c022:	9b03      	ldr	r3, [sp, #12]
 800c024:	f000 000f 	and.w	r0, r0, #15
 800c028:	4098      	lsls	r0, r3
 800c02a:	ea4b 0b00 	orr.w	fp, fp, r0
 800c02e:	3304      	adds	r3, #4
 800c030:	e7ae      	b.n	800bf90 <__gethex+0x15c>
 800c032:	45b1      	cmp	r9, r6
 800c034:	d8ea      	bhi.n	800c00c <__gethex+0x1d8>
 800c036:	492b      	ldr	r1, [pc, #172]	@ (800c0e4 <__gethex+0x2b0>)
 800c038:	9303      	str	r3, [sp, #12]
 800c03a:	2201      	movs	r2, #1
 800c03c:	4630      	mov	r0, r6
 800c03e:	f7ff fe34 	bl	800bcaa <strncmp>
 800c042:	9b03      	ldr	r3, [sp, #12]
 800c044:	2800      	cmp	r0, #0
 800c046:	d1e1      	bne.n	800c00c <__gethex+0x1d8>
 800c048:	e7a2      	b.n	800bf90 <__gethex+0x15c>
 800c04a:	1ea9      	subs	r1, r5, #2
 800c04c:	4620      	mov	r0, r4
 800c04e:	f7fe f9d8 	bl	800a402 <__any_on>
 800c052:	2800      	cmp	r0, #0
 800c054:	d0c2      	beq.n	800bfdc <__gethex+0x1a8>
 800c056:	f04f 0903 	mov.w	r9, #3
 800c05a:	e7c1      	b.n	800bfe0 <__gethex+0x1ac>
 800c05c:	da09      	bge.n	800c072 <__gethex+0x23e>
 800c05e:	1b75      	subs	r5, r6, r5
 800c060:	4621      	mov	r1, r4
 800c062:	9801      	ldr	r0, [sp, #4]
 800c064:	462a      	mov	r2, r5
 800c066:	f7fd ff93 	bl	8009f90 <__lshift>
 800c06a:	1b7f      	subs	r7, r7, r5
 800c06c:	4604      	mov	r4, r0
 800c06e:	f100 0a14 	add.w	sl, r0, #20
 800c072:	f04f 0900 	mov.w	r9, #0
 800c076:	e7b8      	b.n	800bfea <__gethex+0x1b6>
 800c078:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c07c:	42bd      	cmp	r5, r7
 800c07e:	dd6f      	ble.n	800c160 <__gethex+0x32c>
 800c080:	1bed      	subs	r5, r5, r7
 800c082:	42ae      	cmp	r6, r5
 800c084:	dc34      	bgt.n	800c0f0 <__gethex+0x2bc>
 800c086:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c08a:	2b02      	cmp	r3, #2
 800c08c:	d022      	beq.n	800c0d4 <__gethex+0x2a0>
 800c08e:	2b03      	cmp	r3, #3
 800c090:	d024      	beq.n	800c0dc <__gethex+0x2a8>
 800c092:	2b01      	cmp	r3, #1
 800c094:	d115      	bne.n	800c0c2 <__gethex+0x28e>
 800c096:	42ae      	cmp	r6, r5
 800c098:	d113      	bne.n	800c0c2 <__gethex+0x28e>
 800c09a:	2e01      	cmp	r6, #1
 800c09c:	d10b      	bne.n	800c0b6 <__gethex+0x282>
 800c09e:	9a02      	ldr	r2, [sp, #8]
 800c0a0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c0a4:	6013      	str	r3, [r2, #0]
 800c0a6:	2301      	movs	r3, #1
 800c0a8:	6123      	str	r3, [r4, #16]
 800c0aa:	f8ca 3000 	str.w	r3, [sl]
 800c0ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c0b0:	2562      	movs	r5, #98	@ 0x62
 800c0b2:	601c      	str	r4, [r3, #0]
 800c0b4:	e73a      	b.n	800bf2c <__gethex+0xf8>
 800c0b6:	1e71      	subs	r1, r6, #1
 800c0b8:	4620      	mov	r0, r4
 800c0ba:	f7fe f9a2 	bl	800a402 <__any_on>
 800c0be:	2800      	cmp	r0, #0
 800c0c0:	d1ed      	bne.n	800c09e <__gethex+0x26a>
 800c0c2:	9801      	ldr	r0, [sp, #4]
 800c0c4:	4621      	mov	r1, r4
 800c0c6:	f7fd fd53 	bl	8009b70 <_Bfree>
 800c0ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	6013      	str	r3, [r2, #0]
 800c0d0:	2550      	movs	r5, #80	@ 0x50
 800c0d2:	e72b      	b.n	800bf2c <__gethex+0xf8>
 800c0d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d1f3      	bne.n	800c0c2 <__gethex+0x28e>
 800c0da:	e7e0      	b.n	800c09e <__gethex+0x26a>
 800c0dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d1dd      	bne.n	800c09e <__gethex+0x26a>
 800c0e2:	e7ee      	b.n	800c0c2 <__gethex+0x28e>
 800c0e4:	0800d365 	.word	0x0800d365
 800c0e8:	0800d2fb 	.word	0x0800d2fb
 800c0ec:	0800d3d7 	.word	0x0800d3d7
 800c0f0:	1e6f      	subs	r7, r5, #1
 800c0f2:	f1b9 0f00 	cmp.w	r9, #0
 800c0f6:	d130      	bne.n	800c15a <__gethex+0x326>
 800c0f8:	b127      	cbz	r7, 800c104 <__gethex+0x2d0>
 800c0fa:	4639      	mov	r1, r7
 800c0fc:	4620      	mov	r0, r4
 800c0fe:	f7fe f980 	bl	800a402 <__any_on>
 800c102:	4681      	mov	r9, r0
 800c104:	117a      	asrs	r2, r7, #5
 800c106:	2301      	movs	r3, #1
 800c108:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c10c:	f007 071f 	and.w	r7, r7, #31
 800c110:	40bb      	lsls	r3, r7
 800c112:	4213      	tst	r3, r2
 800c114:	4629      	mov	r1, r5
 800c116:	4620      	mov	r0, r4
 800c118:	bf18      	it	ne
 800c11a:	f049 0902 	orrne.w	r9, r9, #2
 800c11e:	f7ff fe21 	bl	800bd64 <rshift>
 800c122:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c126:	1b76      	subs	r6, r6, r5
 800c128:	2502      	movs	r5, #2
 800c12a:	f1b9 0f00 	cmp.w	r9, #0
 800c12e:	d047      	beq.n	800c1c0 <__gethex+0x38c>
 800c130:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c134:	2b02      	cmp	r3, #2
 800c136:	d015      	beq.n	800c164 <__gethex+0x330>
 800c138:	2b03      	cmp	r3, #3
 800c13a:	d017      	beq.n	800c16c <__gethex+0x338>
 800c13c:	2b01      	cmp	r3, #1
 800c13e:	d109      	bne.n	800c154 <__gethex+0x320>
 800c140:	f019 0f02 	tst.w	r9, #2
 800c144:	d006      	beq.n	800c154 <__gethex+0x320>
 800c146:	f8da 3000 	ldr.w	r3, [sl]
 800c14a:	ea49 0903 	orr.w	r9, r9, r3
 800c14e:	f019 0f01 	tst.w	r9, #1
 800c152:	d10e      	bne.n	800c172 <__gethex+0x33e>
 800c154:	f045 0510 	orr.w	r5, r5, #16
 800c158:	e032      	b.n	800c1c0 <__gethex+0x38c>
 800c15a:	f04f 0901 	mov.w	r9, #1
 800c15e:	e7d1      	b.n	800c104 <__gethex+0x2d0>
 800c160:	2501      	movs	r5, #1
 800c162:	e7e2      	b.n	800c12a <__gethex+0x2f6>
 800c164:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c166:	f1c3 0301 	rsb	r3, r3, #1
 800c16a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c16c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d0f0      	beq.n	800c154 <__gethex+0x320>
 800c172:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c176:	f104 0314 	add.w	r3, r4, #20
 800c17a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c17e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c182:	f04f 0c00 	mov.w	ip, #0
 800c186:	4618      	mov	r0, r3
 800c188:	f853 2b04 	ldr.w	r2, [r3], #4
 800c18c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c190:	d01b      	beq.n	800c1ca <__gethex+0x396>
 800c192:	3201      	adds	r2, #1
 800c194:	6002      	str	r2, [r0, #0]
 800c196:	2d02      	cmp	r5, #2
 800c198:	f104 0314 	add.w	r3, r4, #20
 800c19c:	d13c      	bne.n	800c218 <__gethex+0x3e4>
 800c19e:	f8d8 2000 	ldr.w	r2, [r8]
 800c1a2:	3a01      	subs	r2, #1
 800c1a4:	42b2      	cmp	r2, r6
 800c1a6:	d109      	bne.n	800c1bc <__gethex+0x388>
 800c1a8:	1171      	asrs	r1, r6, #5
 800c1aa:	2201      	movs	r2, #1
 800c1ac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c1b0:	f006 061f 	and.w	r6, r6, #31
 800c1b4:	fa02 f606 	lsl.w	r6, r2, r6
 800c1b8:	421e      	tst	r6, r3
 800c1ba:	d13a      	bne.n	800c232 <__gethex+0x3fe>
 800c1bc:	f045 0520 	orr.w	r5, r5, #32
 800c1c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c1c2:	601c      	str	r4, [r3, #0]
 800c1c4:	9b02      	ldr	r3, [sp, #8]
 800c1c6:	601f      	str	r7, [r3, #0]
 800c1c8:	e6b0      	b.n	800bf2c <__gethex+0xf8>
 800c1ca:	4299      	cmp	r1, r3
 800c1cc:	f843 cc04 	str.w	ip, [r3, #-4]
 800c1d0:	d8d9      	bhi.n	800c186 <__gethex+0x352>
 800c1d2:	68a3      	ldr	r3, [r4, #8]
 800c1d4:	459b      	cmp	fp, r3
 800c1d6:	db17      	blt.n	800c208 <__gethex+0x3d4>
 800c1d8:	6861      	ldr	r1, [r4, #4]
 800c1da:	9801      	ldr	r0, [sp, #4]
 800c1dc:	3101      	adds	r1, #1
 800c1de:	f7fd fc87 	bl	8009af0 <_Balloc>
 800c1e2:	4681      	mov	r9, r0
 800c1e4:	b918      	cbnz	r0, 800c1ee <__gethex+0x3ba>
 800c1e6:	4b1a      	ldr	r3, [pc, #104]	@ (800c250 <__gethex+0x41c>)
 800c1e8:	4602      	mov	r2, r0
 800c1ea:	2184      	movs	r1, #132	@ 0x84
 800c1ec:	e6c5      	b.n	800bf7a <__gethex+0x146>
 800c1ee:	6922      	ldr	r2, [r4, #16]
 800c1f0:	3202      	adds	r2, #2
 800c1f2:	f104 010c 	add.w	r1, r4, #12
 800c1f6:	0092      	lsls	r2, r2, #2
 800c1f8:	300c      	adds	r0, #12
 800c1fa:	f7fc fd0a 	bl	8008c12 <memcpy>
 800c1fe:	4621      	mov	r1, r4
 800c200:	9801      	ldr	r0, [sp, #4]
 800c202:	f7fd fcb5 	bl	8009b70 <_Bfree>
 800c206:	464c      	mov	r4, r9
 800c208:	6923      	ldr	r3, [r4, #16]
 800c20a:	1c5a      	adds	r2, r3, #1
 800c20c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c210:	6122      	str	r2, [r4, #16]
 800c212:	2201      	movs	r2, #1
 800c214:	615a      	str	r2, [r3, #20]
 800c216:	e7be      	b.n	800c196 <__gethex+0x362>
 800c218:	6922      	ldr	r2, [r4, #16]
 800c21a:	455a      	cmp	r2, fp
 800c21c:	dd0b      	ble.n	800c236 <__gethex+0x402>
 800c21e:	2101      	movs	r1, #1
 800c220:	4620      	mov	r0, r4
 800c222:	f7ff fd9f 	bl	800bd64 <rshift>
 800c226:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c22a:	3701      	adds	r7, #1
 800c22c:	42bb      	cmp	r3, r7
 800c22e:	f6ff aee0 	blt.w	800bff2 <__gethex+0x1be>
 800c232:	2501      	movs	r5, #1
 800c234:	e7c2      	b.n	800c1bc <__gethex+0x388>
 800c236:	f016 061f 	ands.w	r6, r6, #31
 800c23a:	d0fa      	beq.n	800c232 <__gethex+0x3fe>
 800c23c:	4453      	add	r3, sl
 800c23e:	f1c6 0620 	rsb	r6, r6, #32
 800c242:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c246:	f7fd fd45 	bl	8009cd4 <__hi0bits>
 800c24a:	42b0      	cmp	r0, r6
 800c24c:	dbe7      	blt.n	800c21e <__gethex+0x3ea>
 800c24e:	e7f0      	b.n	800c232 <__gethex+0x3fe>
 800c250:	0800d2fb 	.word	0x0800d2fb

0800c254 <L_shift>:
 800c254:	f1c2 0208 	rsb	r2, r2, #8
 800c258:	0092      	lsls	r2, r2, #2
 800c25a:	b570      	push	{r4, r5, r6, lr}
 800c25c:	f1c2 0620 	rsb	r6, r2, #32
 800c260:	6843      	ldr	r3, [r0, #4]
 800c262:	6804      	ldr	r4, [r0, #0]
 800c264:	fa03 f506 	lsl.w	r5, r3, r6
 800c268:	432c      	orrs	r4, r5
 800c26a:	40d3      	lsrs	r3, r2
 800c26c:	6004      	str	r4, [r0, #0]
 800c26e:	f840 3f04 	str.w	r3, [r0, #4]!
 800c272:	4288      	cmp	r0, r1
 800c274:	d3f4      	bcc.n	800c260 <L_shift+0xc>
 800c276:	bd70      	pop	{r4, r5, r6, pc}

0800c278 <__match>:
 800c278:	b530      	push	{r4, r5, lr}
 800c27a:	6803      	ldr	r3, [r0, #0]
 800c27c:	3301      	adds	r3, #1
 800c27e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c282:	b914      	cbnz	r4, 800c28a <__match+0x12>
 800c284:	6003      	str	r3, [r0, #0]
 800c286:	2001      	movs	r0, #1
 800c288:	bd30      	pop	{r4, r5, pc}
 800c28a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c28e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c292:	2d19      	cmp	r5, #25
 800c294:	bf98      	it	ls
 800c296:	3220      	addls	r2, #32
 800c298:	42a2      	cmp	r2, r4
 800c29a:	d0f0      	beq.n	800c27e <__match+0x6>
 800c29c:	2000      	movs	r0, #0
 800c29e:	e7f3      	b.n	800c288 <__match+0x10>

0800c2a0 <__hexnan>:
 800c2a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2a4:	680b      	ldr	r3, [r1, #0]
 800c2a6:	6801      	ldr	r1, [r0, #0]
 800c2a8:	115e      	asrs	r6, r3, #5
 800c2aa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c2ae:	f013 031f 	ands.w	r3, r3, #31
 800c2b2:	b087      	sub	sp, #28
 800c2b4:	bf18      	it	ne
 800c2b6:	3604      	addne	r6, #4
 800c2b8:	2500      	movs	r5, #0
 800c2ba:	1f37      	subs	r7, r6, #4
 800c2bc:	4682      	mov	sl, r0
 800c2be:	4690      	mov	r8, r2
 800c2c0:	9301      	str	r3, [sp, #4]
 800c2c2:	f846 5c04 	str.w	r5, [r6, #-4]
 800c2c6:	46b9      	mov	r9, r7
 800c2c8:	463c      	mov	r4, r7
 800c2ca:	9502      	str	r5, [sp, #8]
 800c2cc:	46ab      	mov	fp, r5
 800c2ce:	784a      	ldrb	r2, [r1, #1]
 800c2d0:	1c4b      	adds	r3, r1, #1
 800c2d2:	9303      	str	r3, [sp, #12]
 800c2d4:	b342      	cbz	r2, 800c328 <__hexnan+0x88>
 800c2d6:	4610      	mov	r0, r2
 800c2d8:	9105      	str	r1, [sp, #20]
 800c2da:	9204      	str	r2, [sp, #16]
 800c2dc:	f7ff fd94 	bl	800be08 <__hexdig_fun>
 800c2e0:	2800      	cmp	r0, #0
 800c2e2:	d151      	bne.n	800c388 <__hexnan+0xe8>
 800c2e4:	9a04      	ldr	r2, [sp, #16]
 800c2e6:	9905      	ldr	r1, [sp, #20]
 800c2e8:	2a20      	cmp	r2, #32
 800c2ea:	d818      	bhi.n	800c31e <__hexnan+0x7e>
 800c2ec:	9b02      	ldr	r3, [sp, #8]
 800c2ee:	459b      	cmp	fp, r3
 800c2f0:	dd13      	ble.n	800c31a <__hexnan+0x7a>
 800c2f2:	454c      	cmp	r4, r9
 800c2f4:	d206      	bcs.n	800c304 <__hexnan+0x64>
 800c2f6:	2d07      	cmp	r5, #7
 800c2f8:	dc04      	bgt.n	800c304 <__hexnan+0x64>
 800c2fa:	462a      	mov	r2, r5
 800c2fc:	4649      	mov	r1, r9
 800c2fe:	4620      	mov	r0, r4
 800c300:	f7ff ffa8 	bl	800c254 <L_shift>
 800c304:	4544      	cmp	r4, r8
 800c306:	d952      	bls.n	800c3ae <__hexnan+0x10e>
 800c308:	2300      	movs	r3, #0
 800c30a:	f1a4 0904 	sub.w	r9, r4, #4
 800c30e:	f844 3c04 	str.w	r3, [r4, #-4]
 800c312:	f8cd b008 	str.w	fp, [sp, #8]
 800c316:	464c      	mov	r4, r9
 800c318:	461d      	mov	r5, r3
 800c31a:	9903      	ldr	r1, [sp, #12]
 800c31c:	e7d7      	b.n	800c2ce <__hexnan+0x2e>
 800c31e:	2a29      	cmp	r2, #41	@ 0x29
 800c320:	d157      	bne.n	800c3d2 <__hexnan+0x132>
 800c322:	3102      	adds	r1, #2
 800c324:	f8ca 1000 	str.w	r1, [sl]
 800c328:	f1bb 0f00 	cmp.w	fp, #0
 800c32c:	d051      	beq.n	800c3d2 <__hexnan+0x132>
 800c32e:	454c      	cmp	r4, r9
 800c330:	d206      	bcs.n	800c340 <__hexnan+0xa0>
 800c332:	2d07      	cmp	r5, #7
 800c334:	dc04      	bgt.n	800c340 <__hexnan+0xa0>
 800c336:	462a      	mov	r2, r5
 800c338:	4649      	mov	r1, r9
 800c33a:	4620      	mov	r0, r4
 800c33c:	f7ff ff8a 	bl	800c254 <L_shift>
 800c340:	4544      	cmp	r4, r8
 800c342:	d936      	bls.n	800c3b2 <__hexnan+0x112>
 800c344:	f1a8 0204 	sub.w	r2, r8, #4
 800c348:	4623      	mov	r3, r4
 800c34a:	f853 1b04 	ldr.w	r1, [r3], #4
 800c34e:	f842 1f04 	str.w	r1, [r2, #4]!
 800c352:	429f      	cmp	r7, r3
 800c354:	d2f9      	bcs.n	800c34a <__hexnan+0xaa>
 800c356:	1b3b      	subs	r3, r7, r4
 800c358:	f023 0303 	bic.w	r3, r3, #3
 800c35c:	3304      	adds	r3, #4
 800c35e:	3401      	adds	r4, #1
 800c360:	3e03      	subs	r6, #3
 800c362:	42b4      	cmp	r4, r6
 800c364:	bf88      	it	hi
 800c366:	2304      	movhi	r3, #4
 800c368:	4443      	add	r3, r8
 800c36a:	2200      	movs	r2, #0
 800c36c:	f843 2b04 	str.w	r2, [r3], #4
 800c370:	429f      	cmp	r7, r3
 800c372:	d2fb      	bcs.n	800c36c <__hexnan+0xcc>
 800c374:	683b      	ldr	r3, [r7, #0]
 800c376:	b91b      	cbnz	r3, 800c380 <__hexnan+0xe0>
 800c378:	4547      	cmp	r7, r8
 800c37a:	d128      	bne.n	800c3ce <__hexnan+0x12e>
 800c37c:	2301      	movs	r3, #1
 800c37e:	603b      	str	r3, [r7, #0]
 800c380:	2005      	movs	r0, #5
 800c382:	b007      	add	sp, #28
 800c384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c388:	3501      	adds	r5, #1
 800c38a:	2d08      	cmp	r5, #8
 800c38c:	f10b 0b01 	add.w	fp, fp, #1
 800c390:	dd06      	ble.n	800c3a0 <__hexnan+0x100>
 800c392:	4544      	cmp	r4, r8
 800c394:	d9c1      	bls.n	800c31a <__hexnan+0x7a>
 800c396:	2300      	movs	r3, #0
 800c398:	f844 3c04 	str.w	r3, [r4, #-4]
 800c39c:	2501      	movs	r5, #1
 800c39e:	3c04      	subs	r4, #4
 800c3a0:	6822      	ldr	r2, [r4, #0]
 800c3a2:	f000 000f 	and.w	r0, r0, #15
 800c3a6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c3aa:	6020      	str	r0, [r4, #0]
 800c3ac:	e7b5      	b.n	800c31a <__hexnan+0x7a>
 800c3ae:	2508      	movs	r5, #8
 800c3b0:	e7b3      	b.n	800c31a <__hexnan+0x7a>
 800c3b2:	9b01      	ldr	r3, [sp, #4]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d0dd      	beq.n	800c374 <__hexnan+0xd4>
 800c3b8:	f1c3 0320 	rsb	r3, r3, #32
 800c3bc:	f04f 32ff 	mov.w	r2, #4294967295
 800c3c0:	40da      	lsrs	r2, r3
 800c3c2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c3c6:	4013      	ands	r3, r2
 800c3c8:	f846 3c04 	str.w	r3, [r6, #-4]
 800c3cc:	e7d2      	b.n	800c374 <__hexnan+0xd4>
 800c3ce:	3f04      	subs	r7, #4
 800c3d0:	e7d0      	b.n	800c374 <__hexnan+0xd4>
 800c3d2:	2004      	movs	r0, #4
 800c3d4:	e7d5      	b.n	800c382 <__hexnan+0xe2>

0800c3d6 <__ascii_mbtowc>:
 800c3d6:	b082      	sub	sp, #8
 800c3d8:	b901      	cbnz	r1, 800c3dc <__ascii_mbtowc+0x6>
 800c3da:	a901      	add	r1, sp, #4
 800c3dc:	b142      	cbz	r2, 800c3f0 <__ascii_mbtowc+0x1a>
 800c3de:	b14b      	cbz	r3, 800c3f4 <__ascii_mbtowc+0x1e>
 800c3e0:	7813      	ldrb	r3, [r2, #0]
 800c3e2:	600b      	str	r3, [r1, #0]
 800c3e4:	7812      	ldrb	r2, [r2, #0]
 800c3e6:	1e10      	subs	r0, r2, #0
 800c3e8:	bf18      	it	ne
 800c3ea:	2001      	movne	r0, #1
 800c3ec:	b002      	add	sp, #8
 800c3ee:	4770      	bx	lr
 800c3f0:	4610      	mov	r0, r2
 800c3f2:	e7fb      	b.n	800c3ec <__ascii_mbtowc+0x16>
 800c3f4:	f06f 0001 	mvn.w	r0, #1
 800c3f8:	e7f8      	b.n	800c3ec <__ascii_mbtowc+0x16>

0800c3fa <_realloc_r>:
 800c3fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3fe:	4607      	mov	r7, r0
 800c400:	4614      	mov	r4, r2
 800c402:	460d      	mov	r5, r1
 800c404:	b921      	cbnz	r1, 800c410 <_realloc_r+0x16>
 800c406:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c40a:	4611      	mov	r1, r2
 800c40c:	f7fd bae4 	b.w	80099d8 <_malloc_r>
 800c410:	b92a      	cbnz	r2, 800c41e <_realloc_r+0x24>
 800c412:	f7fd fa6d 	bl	80098f0 <_free_r>
 800c416:	4625      	mov	r5, r4
 800c418:	4628      	mov	r0, r5
 800c41a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c41e:	f000 f8b2 	bl	800c586 <_malloc_usable_size_r>
 800c422:	4284      	cmp	r4, r0
 800c424:	4606      	mov	r6, r0
 800c426:	d802      	bhi.n	800c42e <_realloc_r+0x34>
 800c428:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c42c:	d8f4      	bhi.n	800c418 <_realloc_r+0x1e>
 800c42e:	4621      	mov	r1, r4
 800c430:	4638      	mov	r0, r7
 800c432:	f7fd fad1 	bl	80099d8 <_malloc_r>
 800c436:	4680      	mov	r8, r0
 800c438:	b908      	cbnz	r0, 800c43e <_realloc_r+0x44>
 800c43a:	4645      	mov	r5, r8
 800c43c:	e7ec      	b.n	800c418 <_realloc_r+0x1e>
 800c43e:	42b4      	cmp	r4, r6
 800c440:	4622      	mov	r2, r4
 800c442:	4629      	mov	r1, r5
 800c444:	bf28      	it	cs
 800c446:	4632      	movcs	r2, r6
 800c448:	f7fc fbe3 	bl	8008c12 <memcpy>
 800c44c:	4629      	mov	r1, r5
 800c44e:	4638      	mov	r0, r7
 800c450:	f7fd fa4e 	bl	80098f0 <_free_r>
 800c454:	e7f1      	b.n	800c43a <_realloc_r+0x40>
	...

0800c458 <_strtoul_l.isra.0>:
 800c458:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c45c:	4e34      	ldr	r6, [pc, #208]	@ (800c530 <_strtoul_l.isra.0+0xd8>)
 800c45e:	4686      	mov	lr, r0
 800c460:	460d      	mov	r5, r1
 800c462:	4628      	mov	r0, r5
 800c464:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c468:	5d37      	ldrb	r7, [r6, r4]
 800c46a:	f017 0708 	ands.w	r7, r7, #8
 800c46e:	d1f8      	bne.n	800c462 <_strtoul_l.isra.0+0xa>
 800c470:	2c2d      	cmp	r4, #45	@ 0x2d
 800c472:	d110      	bne.n	800c496 <_strtoul_l.isra.0+0x3e>
 800c474:	782c      	ldrb	r4, [r5, #0]
 800c476:	2701      	movs	r7, #1
 800c478:	1c85      	adds	r5, r0, #2
 800c47a:	f033 0010 	bics.w	r0, r3, #16
 800c47e:	d115      	bne.n	800c4ac <_strtoul_l.isra.0+0x54>
 800c480:	2c30      	cmp	r4, #48	@ 0x30
 800c482:	d10d      	bne.n	800c4a0 <_strtoul_l.isra.0+0x48>
 800c484:	7828      	ldrb	r0, [r5, #0]
 800c486:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800c48a:	2858      	cmp	r0, #88	@ 0x58
 800c48c:	d108      	bne.n	800c4a0 <_strtoul_l.isra.0+0x48>
 800c48e:	786c      	ldrb	r4, [r5, #1]
 800c490:	3502      	adds	r5, #2
 800c492:	2310      	movs	r3, #16
 800c494:	e00a      	b.n	800c4ac <_strtoul_l.isra.0+0x54>
 800c496:	2c2b      	cmp	r4, #43	@ 0x2b
 800c498:	bf04      	itt	eq
 800c49a:	782c      	ldrbeq	r4, [r5, #0]
 800c49c:	1c85      	addeq	r5, r0, #2
 800c49e:	e7ec      	b.n	800c47a <_strtoul_l.isra.0+0x22>
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d1f6      	bne.n	800c492 <_strtoul_l.isra.0+0x3a>
 800c4a4:	2c30      	cmp	r4, #48	@ 0x30
 800c4a6:	bf14      	ite	ne
 800c4a8:	230a      	movne	r3, #10
 800c4aa:	2308      	moveq	r3, #8
 800c4ac:	f04f 38ff 	mov.w	r8, #4294967295
 800c4b0:	2600      	movs	r6, #0
 800c4b2:	fbb8 f8f3 	udiv	r8, r8, r3
 800c4b6:	fb03 f908 	mul.w	r9, r3, r8
 800c4ba:	ea6f 0909 	mvn.w	r9, r9
 800c4be:	4630      	mov	r0, r6
 800c4c0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800c4c4:	f1bc 0f09 	cmp.w	ip, #9
 800c4c8:	d810      	bhi.n	800c4ec <_strtoul_l.isra.0+0x94>
 800c4ca:	4664      	mov	r4, ip
 800c4cc:	42a3      	cmp	r3, r4
 800c4ce:	dd1e      	ble.n	800c50e <_strtoul_l.isra.0+0xb6>
 800c4d0:	f1b6 3fff 	cmp.w	r6, #4294967295
 800c4d4:	d007      	beq.n	800c4e6 <_strtoul_l.isra.0+0x8e>
 800c4d6:	4580      	cmp	r8, r0
 800c4d8:	d316      	bcc.n	800c508 <_strtoul_l.isra.0+0xb0>
 800c4da:	d101      	bne.n	800c4e0 <_strtoul_l.isra.0+0x88>
 800c4dc:	45a1      	cmp	r9, r4
 800c4de:	db13      	blt.n	800c508 <_strtoul_l.isra.0+0xb0>
 800c4e0:	fb00 4003 	mla	r0, r0, r3, r4
 800c4e4:	2601      	movs	r6, #1
 800c4e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c4ea:	e7e9      	b.n	800c4c0 <_strtoul_l.isra.0+0x68>
 800c4ec:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800c4f0:	f1bc 0f19 	cmp.w	ip, #25
 800c4f4:	d801      	bhi.n	800c4fa <_strtoul_l.isra.0+0xa2>
 800c4f6:	3c37      	subs	r4, #55	@ 0x37
 800c4f8:	e7e8      	b.n	800c4cc <_strtoul_l.isra.0+0x74>
 800c4fa:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800c4fe:	f1bc 0f19 	cmp.w	ip, #25
 800c502:	d804      	bhi.n	800c50e <_strtoul_l.isra.0+0xb6>
 800c504:	3c57      	subs	r4, #87	@ 0x57
 800c506:	e7e1      	b.n	800c4cc <_strtoul_l.isra.0+0x74>
 800c508:	f04f 36ff 	mov.w	r6, #4294967295
 800c50c:	e7eb      	b.n	800c4e6 <_strtoul_l.isra.0+0x8e>
 800c50e:	1c73      	adds	r3, r6, #1
 800c510:	d106      	bne.n	800c520 <_strtoul_l.isra.0+0xc8>
 800c512:	2322      	movs	r3, #34	@ 0x22
 800c514:	f8ce 3000 	str.w	r3, [lr]
 800c518:	4630      	mov	r0, r6
 800c51a:	b932      	cbnz	r2, 800c52a <_strtoul_l.isra.0+0xd2>
 800c51c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c520:	b107      	cbz	r7, 800c524 <_strtoul_l.isra.0+0xcc>
 800c522:	4240      	negs	r0, r0
 800c524:	2a00      	cmp	r2, #0
 800c526:	d0f9      	beq.n	800c51c <_strtoul_l.isra.0+0xc4>
 800c528:	b106      	cbz	r6, 800c52c <_strtoul_l.isra.0+0xd4>
 800c52a:	1e69      	subs	r1, r5, #1
 800c52c:	6011      	str	r1, [r2, #0]
 800c52e:	e7f5      	b.n	800c51c <_strtoul_l.isra.0+0xc4>
 800c530:	0800d589 	.word	0x0800d589

0800c534 <_strtoul_r>:
 800c534:	f7ff bf90 	b.w	800c458 <_strtoul_l.isra.0>

0800c538 <__ascii_wctomb>:
 800c538:	4603      	mov	r3, r0
 800c53a:	4608      	mov	r0, r1
 800c53c:	b141      	cbz	r1, 800c550 <__ascii_wctomb+0x18>
 800c53e:	2aff      	cmp	r2, #255	@ 0xff
 800c540:	d904      	bls.n	800c54c <__ascii_wctomb+0x14>
 800c542:	228a      	movs	r2, #138	@ 0x8a
 800c544:	601a      	str	r2, [r3, #0]
 800c546:	f04f 30ff 	mov.w	r0, #4294967295
 800c54a:	4770      	bx	lr
 800c54c:	700a      	strb	r2, [r1, #0]
 800c54e:	2001      	movs	r0, #1
 800c550:	4770      	bx	lr
	...

0800c554 <fiprintf>:
 800c554:	b40e      	push	{r1, r2, r3}
 800c556:	b503      	push	{r0, r1, lr}
 800c558:	4601      	mov	r1, r0
 800c55a:	ab03      	add	r3, sp, #12
 800c55c:	4805      	ldr	r0, [pc, #20]	@ (800c574 <fiprintf+0x20>)
 800c55e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c562:	6800      	ldr	r0, [r0, #0]
 800c564:	9301      	str	r3, [sp, #4]
 800c566:	f000 f83f 	bl	800c5e8 <_vfiprintf_r>
 800c56a:	b002      	add	sp, #8
 800c56c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c570:	b003      	add	sp, #12
 800c572:	4770      	bx	lr
 800c574:	20000034 	.word	0x20000034

0800c578 <abort>:
 800c578:	b508      	push	{r3, lr}
 800c57a:	2006      	movs	r0, #6
 800c57c:	f000 fa08 	bl	800c990 <raise>
 800c580:	2001      	movs	r0, #1
 800c582:	f7f5 fab5 	bl	8001af0 <_exit>

0800c586 <_malloc_usable_size_r>:
 800c586:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c58a:	1f18      	subs	r0, r3, #4
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	bfbc      	itt	lt
 800c590:	580b      	ldrlt	r3, [r1, r0]
 800c592:	18c0      	addlt	r0, r0, r3
 800c594:	4770      	bx	lr

0800c596 <__sfputc_r>:
 800c596:	6893      	ldr	r3, [r2, #8]
 800c598:	3b01      	subs	r3, #1
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	b410      	push	{r4}
 800c59e:	6093      	str	r3, [r2, #8]
 800c5a0:	da08      	bge.n	800c5b4 <__sfputc_r+0x1e>
 800c5a2:	6994      	ldr	r4, [r2, #24]
 800c5a4:	42a3      	cmp	r3, r4
 800c5a6:	db01      	blt.n	800c5ac <__sfputc_r+0x16>
 800c5a8:	290a      	cmp	r1, #10
 800c5aa:	d103      	bne.n	800c5b4 <__sfputc_r+0x1e>
 800c5ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c5b0:	f000 b932 	b.w	800c818 <__swbuf_r>
 800c5b4:	6813      	ldr	r3, [r2, #0]
 800c5b6:	1c58      	adds	r0, r3, #1
 800c5b8:	6010      	str	r0, [r2, #0]
 800c5ba:	7019      	strb	r1, [r3, #0]
 800c5bc:	4608      	mov	r0, r1
 800c5be:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c5c2:	4770      	bx	lr

0800c5c4 <__sfputs_r>:
 800c5c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5c6:	4606      	mov	r6, r0
 800c5c8:	460f      	mov	r7, r1
 800c5ca:	4614      	mov	r4, r2
 800c5cc:	18d5      	adds	r5, r2, r3
 800c5ce:	42ac      	cmp	r4, r5
 800c5d0:	d101      	bne.n	800c5d6 <__sfputs_r+0x12>
 800c5d2:	2000      	movs	r0, #0
 800c5d4:	e007      	b.n	800c5e6 <__sfputs_r+0x22>
 800c5d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5da:	463a      	mov	r2, r7
 800c5dc:	4630      	mov	r0, r6
 800c5de:	f7ff ffda 	bl	800c596 <__sfputc_r>
 800c5e2:	1c43      	adds	r3, r0, #1
 800c5e4:	d1f3      	bne.n	800c5ce <__sfputs_r+0xa>
 800c5e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c5e8 <_vfiprintf_r>:
 800c5e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5ec:	460d      	mov	r5, r1
 800c5ee:	b09d      	sub	sp, #116	@ 0x74
 800c5f0:	4614      	mov	r4, r2
 800c5f2:	4698      	mov	r8, r3
 800c5f4:	4606      	mov	r6, r0
 800c5f6:	b118      	cbz	r0, 800c600 <_vfiprintf_r+0x18>
 800c5f8:	6a03      	ldr	r3, [r0, #32]
 800c5fa:	b90b      	cbnz	r3, 800c600 <_vfiprintf_r+0x18>
 800c5fc:	f7fc f9b0 	bl	8008960 <__sinit>
 800c600:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c602:	07d9      	lsls	r1, r3, #31
 800c604:	d405      	bmi.n	800c612 <_vfiprintf_r+0x2a>
 800c606:	89ab      	ldrh	r3, [r5, #12]
 800c608:	059a      	lsls	r2, r3, #22
 800c60a:	d402      	bmi.n	800c612 <_vfiprintf_r+0x2a>
 800c60c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c60e:	f7fc fafe 	bl	8008c0e <__retarget_lock_acquire_recursive>
 800c612:	89ab      	ldrh	r3, [r5, #12]
 800c614:	071b      	lsls	r3, r3, #28
 800c616:	d501      	bpl.n	800c61c <_vfiprintf_r+0x34>
 800c618:	692b      	ldr	r3, [r5, #16]
 800c61a:	b99b      	cbnz	r3, 800c644 <_vfiprintf_r+0x5c>
 800c61c:	4629      	mov	r1, r5
 800c61e:	4630      	mov	r0, r6
 800c620:	f000 f938 	bl	800c894 <__swsetup_r>
 800c624:	b170      	cbz	r0, 800c644 <_vfiprintf_r+0x5c>
 800c626:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c628:	07dc      	lsls	r4, r3, #31
 800c62a:	d504      	bpl.n	800c636 <_vfiprintf_r+0x4e>
 800c62c:	f04f 30ff 	mov.w	r0, #4294967295
 800c630:	b01d      	add	sp, #116	@ 0x74
 800c632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c636:	89ab      	ldrh	r3, [r5, #12]
 800c638:	0598      	lsls	r0, r3, #22
 800c63a:	d4f7      	bmi.n	800c62c <_vfiprintf_r+0x44>
 800c63c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c63e:	f7fc fae7 	bl	8008c10 <__retarget_lock_release_recursive>
 800c642:	e7f3      	b.n	800c62c <_vfiprintf_r+0x44>
 800c644:	2300      	movs	r3, #0
 800c646:	9309      	str	r3, [sp, #36]	@ 0x24
 800c648:	2320      	movs	r3, #32
 800c64a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c64e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c652:	2330      	movs	r3, #48	@ 0x30
 800c654:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c804 <_vfiprintf_r+0x21c>
 800c658:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c65c:	f04f 0901 	mov.w	r9, #1
 800c660:	4623      	mov	r3, r4
 800c662:	469a      	mov	sl, r3
 800c664:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c668:	b10a      	cbz	r2, 800c66e <_vfiprintf_r+0x86>
 800c66a:	2a25      	cmp	r2, #37	@ 0x25
 800c66c:	d1f9      	bne.n	800c662 <_vfiprintf_r+0x7a>
 800c66e:	ebba 0b04 	subs.w	fp, sl, r4
 800c672:	d00b      	beq.n	800c68c <_vfiprintf_r+0xa4>
 800c674:	465b      	mov	r3, fp
 800c676:	4622      	mov	r2, r4
 800c678:	4629      	mov	r1, r5
 800c67a:	4630      	mov	r0, r6
 800c67c:	f7ff ffa2 	bl	800c5c4 <__sfputs_r>
 800c680:	3001      	adds	r0, #1
 800c682:	f000 80a7 	beq.w	800c7d4 <_vfiprintf_r+0x1ec>
 800c686:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c688:	445a      	add	r2, fp
 800c68a:	9209      	str	r2, [sp, #36]	@ 0x24
 800c68c:	f89a 3000 	ldrb.w	r3, [sl]
 800c690:	2b00      	cmp	r3, #0
 800c692:	f000 809f 	beq.w	800c7d4 <_vfiprintf_r+0x1ec>
 800c696:	2300      	movs	r3, #0
 800c698:	f04f 32ff 	mov.w	r2, #4294967295
 800c69c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c6a0:	f10a 0a01 	add.w	sl, sl, #1
 800c6a4:	9304      	str	r3, [sp, #16]
 800c6a6:	9307      	str	r3, [sp, #28]
 800c6a8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c6ac:	931a      	str	r3, [sp, #104]	@ 0x68
 800c6ae:	4654      	mov	r4, sl
 800c6b0:	2205      	movs	r2, #5
 800c6b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6b6:	4853      	ldr	r0, [pc, #332]	@ (800c804 <_vfiprintf_r+0x21c>)
 800c6b8:	f7f3 fd8a 	bl	80001d0 <memchr>
 800c6bc:	9a04      	ldr	r2, [sp, #16]
 800c6be:	b9d8      	cbnz	r0, 800c6f8 <_vfiprintf_r+0x110>
 800c6c0:	06d1      	lsls	r1, r2, #27
 800c6c2:	bf44      	itt	mi
 800c6c4:	2320      	movmi	r3, #32
 800c6c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c6ca:	0713      	lsls	r3, r2, #28
 800c6cc:	bf44      	itt	mi
 800c6ce:	232b      	movmi	r3, #43	@ 0x2b
 800c6d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c6d4:	f89a 3000 	ldrb.w	r3, [sl]
 800c6d8:	2b2a      	cmp	r3, #42	@ 0x2a
 800c6da:	d015      	beq.n	800c708 <_vfiprintf_r+0x120>
 800c6dc:	9a07      	ldr	r2, [sp, #28]
 800c6de:	4654      	mov	r4, sl
 800c6e0:	2000      	movs	r0, #0
 800c6e2:	f04f 0c0a 	mov.w	ip, #10
 800c6e6:	4621      	mov	r1, r4
 800c6e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c6ec:	3b30      	subs	r3, #48	@ 0x30
 800c6ee:	2b09      	cmp	r3, #9
 800c6f0:	d94b      	bls.n	800c78a <_vfiprintf_r+0x1a2>
 800c6f2:	b1b0      	cbz	r0, 800c722 <_vfiprintf_r+0x13a>
 800c6f4:	9207      	str	r2, [sp, #28]
 800c6f6:	e014      	b.n	800c722 <_vfiprintf_r+0x13a>
 800c6f8:	eba0 0308 	sub.w	r3, r0, r8
 800c6fc:	fa09 f303 	lsl.w	r3, r9, r3
 800c700:	4313      	orrs	r3, r2
 800c702:	9304      	str	r3, [sp, #16]
 800c704:	46a2      	mov	sl, r4
 800c706:	e7d2      	b.n	800c6ae <_vfiprintf_r+0xc6>
 800c708:	9b03      	ldr	r3, [sp, #12]
 800c70a:	1d19      	adds	r1, r3, #4
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	9103      	str	r1, [sp, #12]
 800c710:	2b00      	cmp	r3, #0
 800c712:	bfbb      	ittet	lt
 800c714:	425b      	neglt	r3, r3
 800c716:	f042 0202 	orrlt.w	r2, r2, #2
 800c71a:	9307      	strge	r3, [sp, #28]
 800c71c:	9307      	strlt	r3, [sp, #28]
 800c71e:	bfb8      	it	lt
 800c720:	9204      	strlt	r2, [sp, #16]
 800c722:	7823      	ldrb	r3, [r4, #0]
 800c724:	2b2e      	cmp	r3, #46	@ 0x2e
 800c726:	d10a      	bne.n	800c73e <_vfiprintf_r+0x156>
 800c728:	7863      	ldrb	r3, [r4, #1]
 800c72a:	2b2a      	cmp	r3, #42	@ 0x2a
 800c72c:	d132      	bne.n	800c794 <_vfiprintf_r+0x1ac>
 800c72e:	9b03      	ldr	r3, [sp, #12]
 800c730:	1d1a      	adds	r2, r3, #4
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	9203      	str	r2, [sp, #12]
 800c736:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c73a:	3402      	adds	r4, #2
 800c73c:	9305      	str	r3, [sp, #20]
 800c73e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c814 <_vfiprintf_r+0x22c>
 800c742:	7821      	ldrb	r1, [r4, #0]
 800c744:	2203      	movs	r2, #3
 800c746:	4650      	mov	r0, sl
 800c748:	f7f3 fd42 	bl	80001d0 <memchr>
 800c74c:	b138      	cbz	r0, 800c75e <_vfiprintf_r+0x176>
 800c74e:	9b04      	ldr	r3, [sp, #16]
 800c750:	eba0 000a 	sub.w	r0, r0, sl
 800c754:	2240      	movs	r2, #64	@ 0x40
 800c756:	4082      	lsls	r2, r0
 800c758:	4313      	orrs	r3, r2
 800c75a:	3401      	adds	r4, #1
 800c75c:	9304      	str	r3, [sp, #16]
 800c75e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c762:	4829      	ldr	r0, [pc, #164]	@ (800c808 <_vfiprintf_r+0x220>)
 800c764:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c768:	2206      	movs	r2, #6
 800c76a:	f7f3 fd31 	bl	80001d0 <memchr>
 800c76e:	2800      	cmp	r0, #0
 800c770:	d03f      	beq.n	800c7f2 <_vfiprintf_r+0x20a>
 800c772:	4b26      	ldr	r3, [pc, #152]	@ (800c80c <_vfiprintf_r+0x224>)
 800c774:	bb1b      	cbnz	r3, 800c7be <_vfiprintf_r+0x1d6>
 800c776:	9b03      	ldr	r3, [sp, #12]
 800c778:	3307      	adds	r3, #7
 800c77a:	f023 0307 	bic.w	r3, r3, #7
 800c77e:	3308      	adds	r3, #8
 800c780:	9303      	str	r3, [sp, #12]
 800c782:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c784:	443b      	add	r3, r7
 800c786:	9309      	str	r3, [sp, #36]	@ 0x24
 800c788:	e76a      	b.n	800c660 <_vfiprintf_r+0x78>
 800c78a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c78e:	460c      	mov	r4, r1
 800c790:	2001      	movs	r0, #1
 800c792:	e7a8      	b.n	800c6e6 <_vfiprintf_r+0xfe>
 800c794:	2300      	movs	r3, #0
 800c796:	3401      	adds	r4, #1
 800c798:	9305      	str	r3, [sp, #20]
 800c79a:	4619      	mov	r1, r3
 800c79c:	f04f 0c0a 	mov.w	ip, #10
 800c7a0:	4620      	mov	r0, r4
 800c7a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c7a6:	3a30      	subs	r2, #48	@ 0x30
 800c7a8:	2a09      	cmp	r2, #9
 800c7aa:	d903      	bls.n	800c7b4 <_vfiprintf_r+0x1cc>
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d0c6      	beq.n	800c73e <_vfiprintf_r+0x156>
 800c7b0:	9105      	str	r1, [sp, #20]
 800c7b2:	e7c4      	b.n	800c73e <_vfiprintf_r+0x156>
 800c7b4:	fb0c 2101 	mla	r1, ip, r1, r2
 800c7b8:	4604      	mov	r4, r0
 800c7ba:	2301      	movs	r3, #1
 800c7bc:	e7f0      	b.n	800c7a0 <_vfiprintf_r+0x1b8>
 800c7be:	ab03      	add	r3, sp, #12
 800c7c0:	9300      	str	r3, [sp, #0]
 800c7c2:	462a      	mov	r2, r5
 800c7c4:	4b12      	ldr	r3, [pc, #72]	@ (800c810 <_vfiprintf_r+0x228>)
 800c7c6:	a904      	add	r1, sp, #16
 800c7c8:	4630      	mov	r0, r6
 800c7ca:	f7fb fa79 	bl	8007cc0 <_printf_float>
 800c7ce:	4607      	mov	r7, r0
 800c7d0:	1c78      	adds	r0, r7, #1
 800c7d2:	d1d6      	bne.n	800c782 <_vfiprintf_r+0x19a>
 800c7d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c7d6:	07d9      	lsls	r1, r3, #31
 800c7d8:	d405      	bmi.n	800c7e6 <_vfiprintf_r+0x1fe>
 800c7da:	89ab      	ldrh	r3, [r5, #12]
 800c7dc:	059a      	lsls	r2, r3, #22
 800c7de:	d402      	bmi.n	800c7e6 <_vfiprintf_r+0x1fe>
 800c7e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c7e2:	f7fc fa15 	bl	8008c10 <__retarget_lock_release_recursive>
 800c7e6:	89ab      	ldrh	r3, [r5, #12]
 800c7e8:	065b      	lsls	r3, r3, #25
 800c7ea:	f53f af1f 	bmi.w	800c62c <_vfiprintf_r+0x44>
 800c7ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c7f0:	e71e      	b.n	800c630 <_vfiprintf_r+0x48>
 800c7f2:	ab03      	add	r3, sp, #12
 800c7f4:	9300      	str	r3, [sp, #0]
 800c7f6:	462a      	mov	r2, r5
 800c7f8:	4b05      	ldr	r3, [pc, #20]	@ (800c810 <_vfiprintf_r+0x228>)
 800c7fa:	a904      	add	r1, sp, #16
 800c7fc:	4630      	mov	r0, r6
 800c7fe:	f7fb fcf7 	bl	80081f0 <_printf_i>
 800c802:	e7e4      	b.n	800c7ce <_vfiprintf_r+0x1e6>
 800c804:	0800d367 	.word	0x0800d367
 800c808:	0800d371 	.word	0x0800d371
 800c80c:	08007cc1 	.word	0x08007cc1
 800c810:	0800c5c5 	.word	0x0800c5c5
 800c814:	0800d36d 	.word	0x0800d36d

0800c818 <__swbuf_r>:
 800c818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c81a:	460e      	mov	r6, r1
 800c81c:	4614      	mov	r4, r2
 800c81e:	4605      	mov	r5, r0
 800c820:	b118      	cbz	r0, 800c82a <__swbuf_r+0x12>
 800c822:	6a03      	ldr	r3, [r0, #32]
 800c824:	b90b      	cbnz	r3, 800c82a <__swbuf_r+0x12>
 800c826:	f7fc f89b 	bl	8008960 <__sinit>
 800c82a:	69a3      	ldr	r3, [r4, #24]
 800c82c:	60a3      	str	r3, [r4, #8]
 800c82e:	89a3      	ldrh	r3, [r4, #12]
 800c830:	071a      	lsls	r2, r3, #28
 800c832:	d501      	bpl.n	800c838 <__swbuf_r+0x20>
 800c834:	6923      	ldr	r3, [r4, #16]
 800c836:	b943      	cbnz	r3, 800c84a <__swbuf_r+0x32>
 800c838:	4621      	mov	r1, r4
 800c83a:	4628      	mov	r0, r5
 800c83c:	f000 f82a 	bl	800c894 <__swsetup_r>
 800c840:	b118      	cbz	r0, 800c84a <__swbuf_r+0x32>
 800c842:	f04f 37ff 	mov.w	r7, #4294967295
 800c846:	4638      	mov	r0, r7
 800c848:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c84a:	6823      	ldr	r3, [r4, #0]
 800c84c:	6922      	ldr	r2, [r4, #16]
 800c84e:	1a98      	subs	r0, r3, r2
 800c850:	6963      	ldr	r3, [r4, #20]
 800c852:	b2f6      	uxtb	r6, r6
 800c854:	4283      	cmp	r3, r0
 800c856:	4637      	mov	r7, r6
 800c858:	dc05      	bgt.n	800c866 <__swbuf_r+0x4e>
 800c85a:	4621      	mov	r1, r4
 800c85c:	4628      	mov	r0, r5
 800c85e:	f7ff f96f 	bl	800bb40 <_fflush_r>
 800c862:	2800      	cmp	r0, #0
 800c864:	d1ed      	bne.n	800c842 <__swbuf_r+0x2a>
 800c866:	68a3      	ldr	r3, [r4, #8]
 800c868:	3b01      	subs	r3, #1
 800c86a:	60a3      	str	r3, [r4, #8]
 800c86c:	6823      	ldr	r3, [r4, #0]
 800c86e:	1c5a      	adds	r2, r3, #1
 800c870:	6022      	str	r2, [r4, #0]
 800c872:	701e      	strb	r6, [r3, #0]
 800c874:	6962      	ldr	r2, [r4, #20]
 800c876:	1c43      	adds	r3, r0, #1
 800c878:	429a      	cmp	r2, r3
 800c87a:	d004      	beq.n	800c886 <__swbuf_r+0x6e>
 800c87c:	89a3      	ldrh	r3, [r4, #12]
 800c87e:	07db      	lsls	r3, r3, #31
 800c880:	d5e1      	bpl.n	800c846 <__swbuf_r+0x2e>
 800c882:	2e0a      	cmp	r6, #10
 800c884:	d1df      	bne.n	800c846 <__swbuf_r+0x2e>
 800c886:	4621      	mov	r1, r4
 800c888:	4628      	mov	r0, r5
 800c88a:	f7ff f959 	bl	800bb40 <_fflush_r>
 800c88e:	2800      	cmp	r0, #0
 800c890:	d0d9      	beq.n	800c846 <__swbuf_r+0x2e>
 800c892:	e7d6      	b.n	800c842 <__swbuf_r+0x2a>

0800c894 <__swsetup_r>:
 800c894:	b538      	push	{r3, r4, r5, lr}
 800c896:	4b29      	ldr	r3, [pc, #164]	@ (800c93c <__swsetup_r+0xa8>)
 800c898:	4605      	mov	r5, r0
 800c89a:	6818      	ldr	r0, [r3, #0]
 800c89c:	460c      	mov	r4, r1
 800c89e:	b118      	cbz	r0, 800c8a8 <__swsetup_r+0x14>
 800c8a0:	6a03      	ldr	r3, [r0, #32]
 800c8a2:	b90b      	cbnz	r3, 800c8a8 <__swsetup_r+0x14>
 800c8a4:	f7fc f85c 	bl	8008960 <__sinit>
 800c8a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c8ac:	0719      	lsls	r1, r3, #28
 800c8ae:	d422      	bmi.n	800c8f6 <__swsetup_r+0x62>
 800c8b0:	06da      	lsls	r2, r3, #27
 800c8b2:	d407      	bmi.n	800c8c4 <__swsetup_r+0x30>
 800c8b4:	2209      	movs	r2, #9
 800c8b6:	602a      	str	r2, [r5, #0]
 800c8b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c8bc:	81a3      	strh	r3, [r4, #12]
 800c8be:	f04f 30ff 	mov.w	r0, #4294967295
 800c8c2:	e033      	b.n	800c92c <__swsetup_r+0x98>
 800c8c4:	0758      	lsls	r0, r3, #29
 800c8c6:	d512      	bpl.n	800c8ee <__swsetup_r+0x5a>
 800c8c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c8ca:	b141      	cbz	r1, 800c8de <__swsetup_r+0x4a>
 800c8cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c8d0:	4299      	cmp	r1, r3
 800c8d2:	d002      	beq.n	800c8da <__swsetup_r+0x46>
 800c8d4:	4628      	mov	r0, r5
 800c8d6:	f7fd f80b 	bl	80098f0 <_free_r>
 800c8da:	2300      	movs	r3, #0
 800c8dc:	6363      	str	r3, [r4, #52]	@ 0x34
 800c8de:	89a3      	ldrh	r3, [r4, #12]
 800c8e0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c8e4:	81a3      	strh	r3, [r4, #12]
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	6063      	str	r3, [r4, #4]
 800c8ea:	6923      	ldr	r3, [r4, #16]
 800c8ec:	6023      	str	r3, [r4, #0]
 800c8ee:	89a3      	ldrh	r3, [r4, #12]
 800c8f0:	f043 0308 	orr.w	r3, r3, #8
 800c8f4:	81a3      	strh	r3, [r4, #12]
 800c8f6:	6923      	ldr	r3, [r4, #16]
 800c8f8:	b94b      	cbnz	r3, 800c90e <__swsetup_r+0x7a>
 800c8fa:	89a3      	ldrh	r3, [r4, #12]
 800c8fc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c900:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c904:	d003      	beq.n	800c90e <__swsetup_r+0x7a>
 800c906:	4621      	mov	r1, r4
 800c908:	4628      	mov	r0, r5
 800c90a:	f000 f883 	bl	800ca14 <__smakebuf_r>
 800c90e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c912:	f013 0201 	ands.w	r2, r3, #1
 800c916:	d00a      	beq.n	800c92e <__swsetup_r+0x9a>
 800c918:	2200      	movs	r2, #0
 800c91a:	60a2      	str	r2, [r4, #8]
 800c91c:	6962      	ldr	r2, [r4, #20]
 800c91e:	4252      	negs	r2, r2
 800c920:	61a2      	str	r2, [r4, #24]
 800c922:	6922      	ldr	r2, [r4, #16]
 800c924:	b942      	cbnz	r2, 800c938 <__swsetup_r+0xa4>
 800c926:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c92a:	d1c5      	bne.n	800c8b8 <__swsetup_r+0x24>
 800c92c:	bd38      	pop	{r3, r4, r5, pc}
 800c92e:	0799      	lsls	r1, r3, #30
 800c930:	bf58      	it	pl
 800c932:	6962      	ldrpl	r2, [r4, #20]
 800c934:	60a2      	str	r2, [r4, #8]
 800c936:	e7f4      	b.n	800c922 <__swsetup_r+0x8e>
 800c938:	2000      	movs	r0, #0
 800c93a:	e7f7      	b.n	800c92c <__swsetup_r+0x98>
 800c93c:	20000034 	.word	0x20000034

0800c940 <_raise_r>:
 800c940:	291f      	cmp	r1, #31
 800c942:	b538      	push	{r3, r4, r5, lr}
 800c944:	4605      	mov	r5, r0
 800c946:	460c      	mov	r4, r1
 800c948:	d904      	bls.n	800c954 <_raise_r+0x14>
 800c94a:	2316      	movs	r3, #22
 800c94c:	6003      	str	r3, [r0, #0]
 800c94e:	f04f 30ff 	mov.w	r0, #4294967295
 800c952:	bd38      	pop	{r3, r4, r5, pc}
 800c954:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c956:	b112      	cbz	r2, 800c95e <_raise_r+0x1e>
 800c958:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c95c:	b94b      	cbnz	r3, 800c972 <_raise_r+0x32>
 800c95e:	4628      	mov	r0, r5
 800c960:	f000 f830 	bl	800c9c4 <_getpid_r>
 800c964:	4622      	mov	r2, r4
 800c966:	4601      	mov	r1, r0
 800c968:	4628      	mov	r0, r5
 800c96a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c96e:	f000 b817 	b.w	800c9a0 <_kill_r>
 800c972:	2b01      	cmp	r3, #1
 800c974:	d00a      	beq.n	800c98c <_raise_r+0x4c>
 800c976:	1c59      	adds	r1, r3, #1
 800c978:	d103      	bne.n	800c982 <_raise_r+0x42>
 800c97a:	2316      	movs	r3, #22
 800c97c:	6003      	str	r3, [r0, #0]
 800c97e:	2001      	movs	r0, #1
 800c980:	e7e7      	b.n	800c952 <_raise_r+0x12>
 800c982:	2100      	movs	r1, #0
 800c984:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c988:	4620      	mov	r0, r4
 800c98a:	4798      	blx	r3
 800c98c:	2000      	movs	r0, #0
 800c98e:	e7e0      	b.n	800c952 <_raise_r+0x12>

0800c990 <raise>:
 800c990:	4b02      	ldr	r3, [pc, #8]	@ (800c99c <raise+0xc>)
 800c992:	4601      	mov	r1, r0
 800c994:	6818      	ldr	r0, [r3, #0]
 800c996:	f7ff bfd3 	b.w	800c940 <_raise_r>
 800c99a:	bf00      	nop
 800c99c:	20000034 	.word	0x20000034

0800c9a0 <_kill_r>:
 800c9a0:	b538      	push	{r3, r4, r5, lr}
 800c9a2:	4d07      	ldr	r5, [pc, #28]	@ (800c9c0 <_kill_r+0x20>)
 800c9a4:	2300      	movs	r3, #0
 800c9a6:	4604      	mov	r4, r0
 800c9a8:	4608      	mov	r0, r1
 800c9aa:	4611      	mov	r1, r2
 800c9ac:	602b      	str	r3, [r5, #0]
 800c9ae:	f7f5 f88f 	bl	8001ad0 <_kill>
 800c9b2:	1c43      	adds	r3, r0, #1
 800c9b4:	d102      	bne.n	800c9bc <_kill_r+0x1c>
 800c9b6:	682b      	ldr	r3, [r5, #0]
 800c9b8:	b103      	cbz	r3, 800c9bc <_kill_r+0x1c>
 800c9ba:	6023      	str	r3, [r4, #0]
 800c9bc:	bd38      	pop	{r3, r4, r5, pc}
 800c9be:	bf00      	nop
 800c9c0:	20001008 	.word	0x20001008

0800c9c4 <_getpid_r>:
 800c9c4:	f7f5 b87c 	b.w	8001ac0 <_getpid>

0800c9c8 <__swhatbuf_r>:
 800c9c8:	b570      	push	{r4, r5, r6, lr}
 800c9ca:	460c      	mov	r4, r1
 800c9cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9d0:	2900      	cmp	r1, #0
 800c9d2:	b096      	sub	sp, #88	@ 0x58
 800c9d4:	4615      	mov	r5, r2
 800c9d6:	461e      	mov	r6, r3
 800c9d8:	da0d      	bge.n	800c9f6 <__swhatbuf_r+0x2e>
 800c9da:	89a3      	ldrh	r3, [r4, #12]
 800c9dc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c9e0:	f04f 0100 	mov.w	r1, #0
 800c9e4:	bf14      	ite	ne
 800c9e6:	2340      	movne	r3, #64	@ 0x40
 800c9e8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c9ec:	2000      	movs	r0, #0
 800c9ee:	6031      	str	r1, [r6, #0]
 800c9f0:	602b      	str	r3, [r5, #0]
 800c9f2:	b016      	add	sp, #88	@ 0x58
 800c9f4:	bd70      	pop	{r4, r5, r6, pc}
 800c9f6:	466a      	mov	r2, sp
 800c9f8:	f000 f848 	bl	800ca8c <_fstat_r>
 800c9fc:	2800      	cmp	r0, #0
 800c9fe:	dbec      	blt.n	800c9da <__swhatbuf_r+0x12>
 800ca00:	9901      	ldr	r1, [sp, #4]
 800ca02:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ca06:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ca0a:	4259      	negs	r1, r3
 800ca0c:	4159      	adcs	r1, r3
 800ca0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ca12:	e7eb      	b.n	800c9ec <__swhatbuf_r+0x24>

0800ca14 <__smakebuf_r>:
 800ca14:	898b      	ldrh	r3, [r1, #12]
 800ca16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ca18:	079d      	lsls	r5, r3, #30
 800ca1a:	4606      	mov	r6, r0
 800ca1c:	460c      	mov	r4, r1
 800ca1e:	d507      	bpl.n	800ca30 <__smakebuf_r+0x1c>
 800ca20:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ca24:	6023      	str	r3, [r4, #0]
 800ca26:	6123      	str	r3, [r4, #16]
 800ca28:	2301      	movs	r3, #1
 800ca2a:	6163      	str	r3, [r4, #20]
 800ca2c:	b003      	add	sp, #12
 800ca2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca30:	ab01      	add	r3, sp, #4
 800ca32:	466a      	mov	r2, sp
 800ca34:	f7ff ffc8 	bl	800c9c8 <__swhatbuf_r>
 800ca38:	9f00      	ldr	r7, [sp, #0]
 800ca3a:	4605      	mov	r5, r0
 800ca3c:	4639      	mov	r1, r7
 800ca3e:	4630      	mov	r0, r6
 800ca40:	f7fc ffca 	bl	80099d8 <_malloc_r>
 800ca44:	b948      	cbnz	r0, 800ca5a <__smakebuf_r+0x46>
 800ca46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca4a:	059a      	lsls	r2, r3, #22
 800ca4c:	d4ee      	bmi.n	800ca2c <__smakebuf_r+0x18>
 800ca4e:	f023 0303 	bic.w	r3, r3, #3
 800ca52:	f043 0302 	orr.w	r3, r3, #2
 800ca56:	81a3      	strh	r3, [r4, #12]
 800ca58:	e7e2      	b.n	800ca20 <__smakebuf_r+0xc>
 800ca5a:	89a3      	ldrh	r3, [r4, #12]
 800ca5c:	6020      	str	r0, [r4, #0]
 800ca5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ca62:	81a3      	strh	r3, [r4, #12]
 800ca64:	9b01      	ldr	r3, [sp, #4]
 800ca66:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ca6a:	b15b      	cbz	r3, 800ca84 <__smakebuf_r+0x70>
 800ca6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ca70:	4630      	mov	r0, r6
 800ca72:	f000 f81d 	bl	800cab0 <_isatty_r>
 800ca76:	b128      	cbz	r0, 800ca84 <__smakebuf_r+0x70>
 800ca78:	89a3      	ldrh	r3, [r4, #12]
 800ca7a:	f023 0303 	bic.w	r3, r3, #3
 800ca7e:	f043 0301 	orr.w	r3, r3, #1
 800ca82:	81a3      	strh	r3, [r4, #12]
 800ca84:	89a3      	ldrh	r3, [r4, #12]
 800ca86:	431d      	orrs	r5, r3
 800ca88:	81a5      	strh	r5, [r4, #12]
 800ca8a:	e7cf      	b.n	800ca2c <__smakebuf_r+0x18>

0800ca8c <_fstat_r>:
 800ca8c:	b538      	push	{r3, r4, r5, lr}
 800ca8e:	4d07      	ldr	r5, [pc, #28]	@ (800caac <_fstat_r+0x20>)
 800ca90:	2300      	movs	r3, #0
 800ca92:	4604      	mov	r4, r0
 800ca94:	4608      	mov	r0, r1
 800ca96:	4611      	mov	r1, r2
 800ca98:	602b      	str	r3, [r5, #0]
 800ca9a:	f7f5 f879 	bl	8001b90 <_fstat>
 800ca9e:	1c43      	adds	r3, r0, #1
 800caa0:	d102      	bne.n	800caa8 <_fstat_r+0x1c>
 800caa2:	682b      	ldr	r3, [r5, #0]
 800caa4:	b103      	cbz	r3, 800caa8 <_fstat_r+0x1c>
 800caa6:	6023      	str	r3, [r4, #0]
 800caa8:	bd38      	pop	{r3, r4, r5, pc}
 800caaa:	bf00      	nop
 800caac:	20001008 	.word	0x20001008

0800cab0 <_isatty_r>:
 800cab0:	b538      	push	{r3, r4, r5, lr}
 800cab2:	4d06      	ldr	r5, [pc, #24]	@ (800cacc <_isatty_r+0x1c>)
 800cab4:	2300      	movs	r3, #0
 800cab6:	4604      	mov	r4, r0
 800cab8:	4608      	mov	r0, r1
 800caba:	602b      	str	r3, [r5, #0]
 800cabc:	f7f5 f878 	bl	8001bb0 <_isatty>
 800cac0:	1c43      	adds	r3, r0, #1
 800cac2:	d102      	bne.n	800caca <_isatty_r+0x1a>
 800cac4:	682b      	ldr	r3, [r5, #0]
 800cac6:	b103      	cbz	r3, 800caca <_isatty_r+0x1a>
 800cac8:	6023      	str	r3, [r4, #0]
 800caca:	bd38      	pop	{r3, r4, r5, pc}
 800cacc:	20001008 	.word	0x20001008

0800cad0 <_init>:
 800cad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cad2:	bf00      	nop
 800cad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cad6:	bc08      	pop	{r3}
 800cad8:	469e      	mov	lr, r3
 800cada:	4770      	bx	lr

0800cadc <_fini>:
 800cadc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cade:	bf00      	nop
 800cae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cae2:	bc08      	pop	{r3}
 800cae4:	469e      	mov	lr, r3
 800cae6:	4770      	bx	lr
