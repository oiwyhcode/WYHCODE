
STM32F407VGT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d028  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b7c  0800d1b8  0800d1b8  0000e1b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dd34  0800dd34  0000f208  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800dd34  0800dd34  0000ed34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dd3c  0800dd3c  0000f208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dd3c  0800dd3c  0000ed3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dd40  0800dd40  0000ed40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000208  20000000  0800dd44  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f208  2**0
                  CONTENTS
 10 .bss          0000143c  20000208  20000208  0000f208  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001644  20001644  0000f208  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f208  2**0
                  CONTENTS, READONLY
 13 .debug_info   000151d3  00000000  00000000  0000f238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033ae  00000000  00000000  0002440b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001348  00000000  00000000  000277c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f04  00000000  00000000  00028b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023e1a  00000000  00000000  00029a0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000193f6  00000000  00000000  0004d826  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d12fd  00000000  00000000  00066c1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00137f19  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000066cc  00000000  00000000  00137f5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000053  00000000  00000000  0013e628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000208 	.word	0x20000208
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d1a0 	.word	0x0800d1a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000020c 	.word	0x2000020c
 80001cc:	0800d1a0 	.word	0x0800d1a0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	607b      	str	r3, [r7, #4]
 800102a:	4b3f      	ldr	r3, [pc, #252]	@ (8001128 <MX_DMA_Init+0x108>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102e:	4a3e      	ldr	r2, [pc, #248]	@ (8001128 <MX_DMA_Init+0x108>)
 8001030:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001034:	6313      	str	r3, [r2, #48]	@ 0x30
 8001036:	4b3c      	ldr	r3, [pc, #240]	@ (8001128 <MX_DMA_Init+0x108>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800103e:	607b      	str	r3, [r7, #4]
 8001040:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	603b      	str	r3, [r7, #0]
 8001046:	4b38      	ldr	r3, [pc, #224]	@ (8001128 <MX_DMA_Init+0x108>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104a:	4a37      	ldr	r2, [pc, #220]	@ (8001128 <MX_DMA_Init+0x108>)
 800104c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001050:	6313      	str	r3, [r2, #48]	@ 0x30
 8001052:	4b35      	ldr	r3, [pc, #212]	@ (8001128 <MX_DMA_Init+0x108>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001056:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800105a:	603b      	str	r3, [r7, #0]
 800105c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800105e:	2200      	movs	r2, #0
 8001060:	2100      	movs	r1, #0
 8001062:	200b      	movs	r0, #11
 8001064:	f002 fe83 	bl	8003d6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001068:	200b      	movs	r0, #11
 800106a:	f002 fe9c 	bl	8003da6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800106e:	2200      	movs	r2, #0
 8001070:	2100      	movs	r1, #0
 8001072:	200c      	movs	r0, #12
 8001074:	f002 fe7b 	bl	8003d6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001078:	200c      	movs	r0, #12
 800107a:	f002 fe94 	bl	8003da6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800107e:	2200      	movs	r2, #0
 8001080:	2100      	movs	r1, #0
 8001082:	200d      	movs	r0, #13
 8001084:	f002 fe73 	bl	8003d6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001088:	200d      	movs	r0, #13
 800108a:	f002 fe8c 	bl	8003da6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800108e:	2200      	movs	r2, #0
 8001090:	2100      	movs	r1, #0
 8001092:	200e      	movs	r0, #14
 8001094:	f002 fe6b 	bl	8003d6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001098:	200e      	movs	r0, #14
 800109a:	f002 fe84 	bl	8003da6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800109e:	2200      	movs	r2, #0
 80010a0:	2100      	movs	r1, #0
 80010a2:	200f      	movs	r0, #15
 80010a4:	f002 fe63 	bl	8003d6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80010a8:	200f      	movs	r0, #15
 80010aa:	f002 fe7c 	bl	8003da6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2100      	movs	r1, #0
 80010b2:	2010      	movs	r0, #16
 80010b4:	f002 fe5b 	bl	8003d6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80010b8:	2010      	movs	r0, #16
 80010ba:	f002 fe74 	bl	8003da6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80010be:	2200      	movs	r2, #0
 80010c0:	2100      	movs	r1, #0
 80010c2:	2011      	movs	r0, #17
 80010c4:	f002 fe53 	bl	8003d6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80010c8:	2011      	movs	r0, #17
 80010ca:	f002 fe6c 	bl	8003da6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80010ce:	2200      	movs	r2, #0
 80010d0:	2100      	movs	r1, #0
 80010d2:	202f      	movs	r0, #47	@ 0x2f
 80010d4:	f002 fe4b 	bl	8003d6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80010d8:	202f      	movs	r0, #47	@ 0x2f
 80010da:	f002 fe64 	bl	8003da6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80010de:	2200      	movs	r2, #0
 80010e0:	2100      	movs	r1, #0
 80010e2:	2039      	movs	r0, #57	@ 0x39
 80010e4:	f002 fe43 	bl	8003d6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80010e8:	2039      	movs	r0, #57	@ 0x39
 80010ea:	f002 fe5c 	bl	8003da6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80010ee:	2200      	movs	r2, #0
 80010f0:	2100      	movs	r1, #0
 80010f2:	203a      	movs	r0, #58	@ 0x3a
 80010f4:	f002 fe3b 	bl	8003d6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80010f8:	203a      	movs	r0, #58	@ 0x3a
 80010fa:	f002 fe54 	bl	8003da6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80010fe:	2200      	movs	r2, #0
 8001100:	2100      	movs	r1, #0
 8001102:	2045      	movs	r0, #69	@ 0x45
 8001104:	f002 fe33 	bl	8003d6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001108:	2045      	movs	r0, #69	@ 0x45
 800110a:	f002 fe4c 	bl	8003da6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800110e:	2200      	movs	r2, #0
 8001110:	2100      	movs	r1, #0
 8001112:	2046      	movs	r0, #70	@ 0x46
 8001114:	f002 fe2b 	bl	8003d6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001118:	2046      	movs	r0, #70	@ 0x46
 800111a:	f002 fe44 	bl	8003da6 <HAL_NVIC_EnableIRQ>

}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40023800 	.word	0x40023800

0800112c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b08c      	sub	sp, #48	@ 0x30
 8001130:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001132:	f107 031c 	add.w	r3, r7, #28
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]
 800113c:	609a      	str	r2, [r3, #8]
 800113e:	60da      	str	r2, [r3, #12]
 8001140:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	61bb      	str	r3, [r7, #24]
 8001146:	4b55      	ldr	r3, [pc, #340]	@ (800129c <MX_GPIO_Init+0x170>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114a:	4a54      	ldr	r2, [pc, #336]	@ (800129c <MX_GPIO_Init+0x170>)
 800114c:	f043 0310 	orr.w	r3, r3, #16
 8001150:	6313      	str	r3, [r2, #48]	@ 0x30
 8001152:	4b52      	ldr	r3, [pc, #328]	@ (800129c <MX_GPIO_Init+0x170>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001156:	f003 0310 	and.w	r3, r3, #16
 800115a:	61bb      	str	r3, [r7, #24]
 800115c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	617b      	str	r3, [r7, #20]
 8001162:	4b4e      	ldr	r3, [pc, #312]	@ (800129c <MX_GPIO_Init+0x170>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001166:	4a4d      	ldr	r2, [pc, #308]	@ (800129c <MX_GPIO_Init+0x170>)
 8001168:	f043 0304 	orr.w	r3, r3, #4
 800116c:	6313      	str	r3, [r2, #48]	@ 0x30
 800116e:	4b4b      	ldr	r3, [pc, #300]	@ (800129c <MX_GPIO_Init+0x170>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001172:	f003 0304 	and.w	r3, r3, #4
 8001176:	617b      	str	r3, [r7, #20]
 8001178:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	613b      	str	r3, [r7, #16]
 800117e:	4b47      	ldr	r3, [pc, #284]	@ (800129c <MX_GPIO_Init+0x170>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001182:	4a46      	ldr	r2, [pc, #280]	@ (800129c <MX_GPIO_Init+0x170>)
 8001184:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001188:	6313      	str	r3, [r2, #48]	@ 0x30
 800118a:	4b44      	ldr	r3, [pc, #272]	@ (800129c <MX_GPIO_Init+0x170>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001192:	613b      	str	r3, [r7, #16]
 8001194:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	60fb      	str	r3, [r7, #12]
 800119a:	4b40      	ldr	r3, [pc, #256]	@ (800129c <MX_GPIO_Init+0x170>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119e:	4a3f      	ldr	r2, [pc, #252]	@ (800129c <MX_GPIO_Init+0x170>)
 80011a0:	f043 0301 	orr.w	r3, r3, #1
 80011a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011a6:	4b3d      	ldr	r3, [pc, #244]	@ (800129c <MX_GPIO_Init+0x170>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	60bb      	str	r3, [r7, #8]
 80011b6:	4b39      	ldr	r3, [pc, #228]	@ (800129c <MX_GPIO_Init+0x170>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ba:	4a38      	ldr	r2, [pc, #224]	@ (800129c <MX_GPIO_Init+0x170>)
 80011bc:	f043 0302 	orr.w	r3, r3, #2
 80011c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011c2:	4b36      	ldr	r3, [pc, #216]	@ (800129c <MX_GPIO_Init+0x170>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c6:	f003 0302 	and.w	r3, r3, #2
 80011ca:	60bb      	str	r3, [r7, #8]
 80011cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	607b      	str	r3, [r7, #4]
 80011d2:	4b32      	ldr	r3, [pc, #200]	@ (800129c <MX_GPIO_Init+0x170>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d6:	4a31      	ldr	r2, [pc, #196]	@ (800129c <MX_GPIO_Init+0x170>)
 80011d8:	f043 0308 	orr.w	r3, r3, #8
 80011dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011de:	4b2f      	ldr	r3, [pc, #188]	@ (800129c <MX_GPIO_Init+0x170>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e2:	f003 0308 	and.w	r3, r3, #8
 80011e6:	607b      	str	r3, [r7, #4]
 80011e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, motorA_IN1_Pin|motorA_IN2_Pin|motorB_IN1_Pin|motorB_IN2_Pin
 80011ea:	2200      	movs	r2, #0
 80011ec:	213f      	movs	r1, #63	@ 0x3f
 80011ee:	482c      	ldr	r0, [pc, #176]	@ (80012a0 <MX_GPIO_Init+0x174>)
 80011f0:	f003 fb92 	bl	8004918 <HAL_GPIO_WritePin>
                          |motorC_IN2_Pin|motorC_IN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BUZZ_Pin|LED_Pin, GPIO_PIN_SET);
 80011f4:	2201      	movs	r2, #1
 80011f6:	210c      	movs	r1, #12
 80011f8:	482a      	ldr	r0, [pc, #168]	@ (80012a4 <MX_GPIO_Init+0x178>)
 80011fa:	f003 fb8d 	bl	8004918 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, motorD_IN2_Pin|motorD_IN1_Pin, GPIO_PIN_RESET);
 80011fe:	2200      	movs	r2, #0
 8001200:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8001204:	4828      	ldr	r0, [pc, #160]	@ (80012a8 <MX_GPIO_Init+0x17c>)
 8001206:	f003 fb87 	bl	8004918 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : motorA_IN1_Pin motorA_IN2_Pin motorB_IN1_Pin motorB_IN2_Pin
                           motorC_IN2_Pin motorC_IN1_Pin */
  GPIO_InitStruct.Pin = motorA_IN1_Pin|motorA_IN2_Pin|motorB_IN1_Pin|motorB_IN2_Pin
 800120a:	233f      	movs	r3, #63	@ 0x3f
 800120c:	61fb      	str	r3, [r7, #28]
                          |motorC_IN2_Pin|motorC_IN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800120e:	2301      	movs	r3, #1
 8001210:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001216:	2300      	movs	r3, #0
 8001218:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800121a:	f107 031c 	add.w	r3, r7, #28
 800121e:	4619      	mov	r1, r3
 8001220:	481f      	ldr	r0, [pc, #124]	@ (80012a0 <MX_GPIO_Init+0x174>)
 8001222:	f003 f9dd 	bl	80045e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY1_Pin KEY2_Pin */
  GPIO_InitStruct.Pin = KEY1_Pin|KEY2_Pin;
 8001226:	2303      	movs	r3, #3
 8001228:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800122a:	2300      	movs	r3, #0
 800122c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001232:	f107 031c 	add.w	r3, r7, #28
 8001236:	4619      	mov	r1, r3
 8001238:	481a      	ldr	r0, [pc, #104]	@ (80012a4 <MX_GPIO_Init+0x178>)
 800123a:	f003 f9d1 	bl	80045e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUZZ_Pin LED_Pin */
  GPIO_InitStruct.Pin = BUZZ_Pin|LED_Pin;
 800123e:	230c      	movs	r3, #12
 8001240:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001242:	2301      	movs	r3, #1
 8001244:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	2300      	movs	r3, #0
 8001248:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124a:	2300      	movs	r3, #0
 800124c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800124e:	f107 031c 	add.w	r3, r7, #28
 8001252:	4619      	mov	r1, r3
 8001254:	4813      	ldr	r0, [pc, #76]	@ (80012a4 <MX_GPIO_Init+0x178>)
 8001256:	f003 f9c3 	bl	80045e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT1_Pin OUT2_Pin OUT3_Pin OUT4_Pin
                           OUT5_Pin OUT6_Pin OUT7_Pin OUT8_Pin */
  GPIO_InitStruct.Pin = OUT1_Pin|OUT2_Pin|OUT3_Pin|OUT4_Pin
 800125a:	f64f 5380 	movw	r3, #64896	@ 0xfd80
 800125e:	61fb      	str	r3, [r7, #28]
                          |OUT5_Pin|OUT6_Pin|OUT7_Pin|OUT8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001260:	2300      	movs	r3, #0
 8001262:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001268:	f107 031c 	add.w	r3, r7, #28
 800126c:	4619      	mov	r1, r3
 800126e:	480c      	ldr	r0, [pc, #48]	@ (80012a0 <MX_GPIO_Init+0x174>)
 8001270:	f003 f9b6 	bl	80045e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : motorD_IN2_Pin motorD_IN1_Pin */
  GPIO_InitStruct.Pin = motorD_IN2_Pin|motorD_IN1_Pin;
 8001274:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001278:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800127a:	2301      	movs	r3, #1
 800127c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001282:	2300      	movs	r3, #0
 8001284:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001286:	f107 031c 	add.w	r3, r7, #28
 800128a:	4619      	mov	r1, r3
 800128c:	4806      	ldr	r0, [pc, #24]	@ (80012a8 <MX_GPIO_Init+0x17c>)
 800128e:	f003 f9a7 	bl	80045e0 <HAL_GPIO_Init>

}
 8001292:	bf00      	nop
 8001294:	3730      	adds	r7, #48	@ 0x30
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40023800 	.word	0x40023800
 80012a0:	40021000 	.word	0x40021000
 80012a4:	40020800 	.word	0x40020800
 80012a8:	40020400 	.word	0x40020400

080012ac <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012b0:	4b12      	ldr	r3, [pc, #72]	@ (80012fc <MX_I2C1_Init+0x50>)
 80012b2:	4a13      	ldr	r2, [pc, #76]	@ (8001300 <MX_I2C1_Init+0x54>)
 80012b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80012b6:	4b11      	ldr	r3, [pc, #68]	@ (80012fc <MX_I2C1_Init+0x50>)
 80012b8:	4a12      	ldr	r2, [pc, #72]	@ (8001304 <MX_I2C1_Init+0x58>)
 80012ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012bc:	4b0f      	ldr	r3, [pc, #60]	@ (80012fc <MX_I2C1_Init+0x50>)
 80012be:	2200      	movs	r2, #0
 80012c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012c2:	4b0e      	ldr	r3, [pc, #56]	@ (80012fc <MX_I2C1_Init+0x50>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012c8:	4b0c      	ldr	r3, [pc, #48]	@ (80012fc <MX_I2C1_Init+0x50>)
 80012ca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80012ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012d0:	4b0a      	ldr	r3, [pc, #40]	@ (80012fc <MX_I2C1_Init+0x50>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012d6:	4b09      	ldr	r3, [pc, #36]	@ (80012fc <MX_I2C1_Init+0x50>)
 80012d8:	2200      	movs	r2, #0
 80012da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012dc:	4b07      	ldr	r3, [pc, #28]	@ (80012fc <MX_I2C1_Init+0x50>)
 80012de:	2200      	movs	r2, #0
 80012e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012e2:	4b06      	ldr	r3, [pc, #24]	@ (80012fc <MX_I2C1_Init+0x50>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012e8:	4804      	ldr	r0, [pc, #16]	@ (80012fc <MX_I2C1_Init+0x50>)
 80012ea:	f003 fb2f 	bl	800494c <HAL_I2C_Init>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012f4:	f000 fc34 	bl	8001b60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012f8:	bf00      	nop
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	20000224 	.word	0x20000224
 8001300:	40005400 	.word	0x40005400
 8001304:	00061a80 	.word	0x00061a80

08001308 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08a      	sub	sp, #40	@ 0x28
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	f107 0314 	add.w	r3, r7, #20
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a19      	ldr	r2, [pc, #100]	@ (800138c <HAL_I2C_MspInit+0x84>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d12b      	bne.n	8001382 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	613b      	str	r3, [r7, #16]
 800132e:	4b18      	ldr	r3, [pc, #96]	@ (8001390 <HAL_I2C_MspInit+0x88>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001332:	4a17      	ldr	r2, [pc, #92]	@ (8001390 <HAL_I2C_MspInit+0x88>)
 8001334:	f043 0302 	orr.w	r3, r3, #2
 8001338:	6313      	str	r3, [r2, #48]	@ 0x30
 800133a:	4b15      	ldr	r3, [pc, #84]	@ (8001390 <HAL_I2C_MspInit+0x88>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	613b      	str	r3, [r7, #16]
 8001344:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin;
 8001346:	23c0      	movs	r3, #192	@ 0xc0
 8001348:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800134a:	2312      	movs	r3, #18
 800134c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001352:	2303      	movs	r3, #3
 8001354:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001356:	2304      	movs	r3, #4
 8001358:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800135a:	f107 0314 	add.w	r3, r7, #20
 800135e:	4619      	mov	r1, r3
 8001360:	480c      	ldr	r0, [pc, #48]	@ (8001394 <HAL_I2C_MspInit+0x8c>)
 8001362:	f003 f93d 	bl	80045e0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	60fb      	str	r3, [r7, #12]
 800136a:	4b09      	ldr	r3, [pc, #36]	@ (8001390 <HAL_I2C_MspInit+0x88>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800136e:	4a08      	ldr	r2, [pc, #32]	@ (8001390 <HAL_I2C_MspInit+0x88>)
 8001370:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001374:	6413      	str	r3, [r2, #64]	@ 0x40
 8001376:	4b06      	ldr	r3, [pc, #24]	@ (8001390 <HAL_I2C_MspInit+0x88>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800137a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001382:	bf00      	nop
 8001384:	3728      	adds	r7, #40	@ 0x28
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40005400 	.word	0x40005400
 8001390:	40023800 	.word	0x40023800
 8001394:	40020400 	.word	0x40020400

08001398 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
Trace_PID.target_val=0;
 800139e:	4bb6      	ldr	r3, [pc, #728]	@ (8001678 <main+0x2e0>)
 80013a0:	f04f 0200 	mov.w	r2, #0
 80013a4:	619a      	str	r2, [r3, #24]
Angle_PID.target_val=0;
 80013a6:	4bb5      	ldr	r3, [pc, #724]	@ (800167c <main+0x2e4>)
 80013a8:	f04f 0200 	mov.w	r2, #0
 80013ac:	619a      	str	r2, [r3, #24]
Servo_PID_Down.target_val=320;
 80013ae:	4bb4      	ldr	r3, [pc, #720]	@ (8001680 <main+0x2e8>)
 80013b0:	4ab4      	ldr	r2, [pc, #720]	@ (8001684 <main+0x2ec>)
 80013b2:	601a      	str	r2, [r3, #0]
Servo_PID_Up.target_val=240;
 80013b4:	4bb4      	ldr	r3, [pc, #720]	@ (8001688 <main+0x2f0>)
 80013b6:	4ab5      	ldr	r2, [pc, #724]	@ (800168c <main+0x2f4>)
 80013b8:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013ba:	f002 fb67 	bl	8003a8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013be:	f000 f9b5 	bl	800172c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013c2:	f7ff feb3 	bl	800112c <MX_GPIO_Init>
  MX_DMA_Init();
 80013c6:	f7ff fe2b 	bl	8001020 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80013ca:	f001 f99f 	bl	800270c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80013ce:	f7ff ff6d 	bl	80012ac <MX_I2C1_Init>
  MX_USART3_UART_Init();
 80013d2:	f001 f9c5 	bl	8002760 <MX_USART3_UART_Init>
  MX_TIM12_Init();
 80013d6:	f000 ff3b 	bl	8002250 <MX_TIM12_Init>
  MX_TIM7_Init();
 80013da:	f000 ff03 	bl	80021e4 <MX_TIM7_Init>
  MX_UART4_Init();
 80013de:	f001 f917 	bl	8002610 <MX_UART4_Init>
  MX_UART5_Init();
 80013e2:	f001 f93f 	bl	8002664 <MX_UART5_Init>
  MX_TIM2_Init();
 80013e6:	f000 fdb9 	bl	8001f5c <MX_TIM2_Init>
  MX_TIM4_Init();
 80013ea:	f000 fea7 	bl	800213c <MX_TIM4_Init>
  MX_USART6_UART_Init();
 80013ee:	f001 f9e1 	bl	80027b4 <MX_USART6_UART_Init>
  MX_TIM3_Init();
 80013f2:	f000 fe4f 	bl	8002094 <MX_TIM3_Init>
  MX_TIM14_Init();
 80013f6:	f000 ff99 	bl	800232c <MX_TIM14_Init>
  MX_USART1_UART_Init();
 80013fa:	f001 f95d 	bl	80026b8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  /*USER Init BEGIN*/
  HAL_Delay(20);
 80013fe:	2014      	movs	r0, #20
 8001400:	f002 fbb6 	bl	8003b70 <HAL_Delay>
  OLED_Init();
 8001404:	f001 ffde 	bl	80033c4 <OLED_Init>

  PID_Trace_init(&Trace_PID,Trace_PID.target_val,Trace_PID_Kp,Trace_PID_Ki,Trace_PID_Kd);
 8001408:	4b9b      	ldr	r3, [pc, #620]	@ (8001678 <main+0x2e0>)
 800140a:	edd3 7a06 	vldr	s15, [r3, #24]
 800140e:	4ba0      	ldr	r3, [pc, #640]	@ (8001690 <main+0x2f8>)
 8001410:	ed93 7a00 	vldr	s14, [r3]
 8001414:	4b9f      	ldr	r3, [pc, #636]	@ (8001694 <main+0x2fc>)
 8001416:	edd3 6a00 	vldr	s13, [r3]
 800141a:	4b9f      	ldr	r3, [pc, #636]	@ (8001698 <main+0x300>)
 800141c:	ed93 6a00 	vldr	s12, [r3]
 8001420:	eef0 1a46 	vmov.f32	s3, s12
 8001424:	eeb0 1a66 	vmov.f32	s2, s13
 8001428:	eef0 0a47 	vmov.f32	s1, s14
 800142c:	eeb0 0a67 	vmov.f32	s0, s15
 8001430:	4891      	ldr	r0, [pc, #580]	@ (8001678 <main+0x2e0>)
 8001432:	f001 fecb 	bl	80031cc <PID_Trace_init>
  PID_param_init(&PIDL,PIDL.target_val,PIDL_Kp,PIDL_Ki,PIDL_Kd);
 8001436:	4b99      	ldr	r3, [pc, #612]	@ (800169c <main+0x304>)
 8001438:	edd3 7a00 	vldr	s15, [r3]
 800143c:	4b98      	ldr	r3, [pc, #608]	@ (80016a0 <main+0x308>)
 800143e:	ed93 7a00 	vldr	s14, [r3]
 8001442:	4b98      	ldr	r3, [pc, #608]	@ (80016a4 <main+0x30c>)
 8001444:	edd3 6a00 	vldr	s13, [r3]
 8001448:	4b97      	ldr	r3, [pc, #604]	@ (80016a8 <main+0x310>)
 800144a:	ed93 6a00 	vldr	s12, [r3]
 800144e:	eef0 1a46 	vmov.f32	s3, s12
 8001452:	eeb0 1a66 	vmov.f32	s2, s13
 8001456:	eef0 0a47 	vmov.f32	s1, s14
 800145a:	eeb0 0a67 	vmov.f32	s0, s15
 800145e:	488f      	ldr	r0, [pc, #572]	@ (800169c <main+0x304>)
 8001460:	f002 fad8 	bl	8003a14 <PID_param_init>
  PID_param_init(&PIDR,PIDR.target_val,PIDR_Kp,PIDR_Ki,PIDR_Kd);
 8001464:	4b91      	ldr	r3, [pc, #580]	@ (80016ac <main+0x314>)
 8001466:	edd3 7a00 	vldr	s15, [r3]
 800146a:	4b91      	ldr	r3, [pc, #580]	@ (80016b0 <main+0x318>)
 800146c:	ed93 7a00 	vldr	s14, [r3]
 8001470:	4b90      	ldr	r3, [pc, #576]	@ (80016b4 <main+0x31c>)
 8001472:	edd3 6a00 	vldr	s13, [r3]
 8001476:	4b90      	ldr	r3, [pc, #576]	@ (80016b8 <main+0x320>)
 8001478:	ed93 6a00 	vldr	s12, [r3]
 800147c:	eef0 1a46 	vmov.f32	s3, s12
 8001480:	eeb0 1a66 	vmov.f32	s2, s13
 8001484:	eef0 0a47 	vmov.f32	s1, s14
 8001488:	eeb0 0a67 	vmov.f32	s0, s15
 800148c:	4887      	ldr	r0, [pc, #540]	@ (80016ac <main+0x314>)
 800148e:	f002 fac1 	bl	8003a14 <PID_param_init>
  PID_Angle_init(&Angle_PID, Angle_PID.target_val, Angle_PID_Kp, Angle_PID_Ki, Angle_PID_Kd);
 8001492:	4b7a      	ldr	r3, [pc, #488]	@ (800167c <main+0x2e4>)
 8001494:	edd3 7a06 	vldr	s15, [r3, #24]
 8001498:	4b88      	ldr	r3, [pc, #544]	@ (80016bc <main+0x324>)
 800149a:	ed93 7a00 	vldr	s14, [r3]
 800149e:	4b88      	ldr	r3, [pc, #544]	@ (80016c0 <main+0x328>)
 80014a0:	edd3 6a00 	vldr	s13, [r3]
 80014a4:	4b87      	ldr	r3, [pc, #540]	@ (80016c4 <main+0x32c>)
 80014a6:	ed93 6a00 	vldr	s12, [r3]
 80014aa:	eef0 1a46 	vmov.f32	s3, s12
 80014ae:	eeb0 1a66 	vmov.f32	s2, s13
 80014b2:	eef0 0a47 	vmov.f32	s1, s14
 80014b6:	eeb0 0a67 	vmov.f32	s0, s15
 80014ba:	4870      	ldr	r0, [pc, #448]	@ (800167c <main+0x2e4>)
 80014bc:	f001 fddb 	bl	8003076 <PID_Angle_init>
  PID_Servo_init(&Servo_PID_Down, Servo_PID_Down.target_val, Servo_PID_Kp, Servo_PID_Ki, Servo_PID_Kd);
 80014c0:	4b6f      	ldr	r3, [pc, #444]	@ (8001680 <main+0x2e8>)
 80014c2:	edd3 7a00 	vldr	s15, [r3]
 80014c6:	4b80      	ldr	r3, [pc, #512]	@ (80016c8 <main+0x330>)
 80014c8:	ed93 7a00 	vldr	s14, [r3]
 80014cc:	4b7f      	ldr	r3, [pc, #508]	@ (80016cc <main+0x334>)
 80014ce:	edd3 6a00 	vldr	s13, [r3]
 80014d2:	4b7f      	ldr	r3, [pc, #508]	@ (80016d0 <main+0x338>)
 80014d4:	ed93 6a00 	vldr	s12, [r3]
 80014d8:	eef0 1a46 	vmov.f32	s3, s12
 80014dc:	eeb0 1a66 	vmov.f32	s2, s13
 80014e0:	eef0 0a47 	vmov.f32	s1, s14
 80014e4:	eeb0 0a67 	vmov.f32	s0, s15
 80014e8:	4865      	ldr	r0, [pc, #404]	@ (8001680 <main+0x2e8>)
 80014ea:	f002 fab1 	bl	8003a50 <PID_Servo_init>
  PID_Servo_init(&Servo_PID_Up, Servo_PID_Up.target_val, Servo_PID_Kp, Servo_PID_Ki, Servo_PID_Kd);
 80014ee:	4b66      	ldr	r3, [pc, #408]	@ (8001688 <main+0x2f0>)
 80014f0:	edd3 7a00 	vldr	s15, [r3]
 80014f4:	4b74      	ldr	r3, [pc, #464]	@ (80016c8 <main+0x330>)
 80014f6:	ed93 7a00 	vldr	s14, [r3]
 80014fa:	4b74      	ldr	r3, [pc, #464]	@ (80016cc <main+0x334>)
 80014fc:	edd3 6a00 	vldr	s13, [r3]
 8001500:	4b73      	ldr	r3, [pc, #460]	@ (80016d0 <main+0x338>)
 8001502:	ed93 6a00 	vldr	s12, [r3]
 8001506:	eef0 1a46 	vmov.f32	s3, s12
 800150a:	eeb0 1a66 	vmov.f32	s2, s13
 800150e:	eef0 0a47 	vmov.f32	s1, s14
 8001512:	eeb0 0a67 	vmov.f32	s0, s15
 8001516:	485c      	ldr	r0, [pc, #368]	@ (8001688 <main+0x2f0>)
 8001518:	f002 fa9a 	bl	8003a50 <PID_Servo_init>
  /*USER Init END*/
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *)RxBuffer,sizeof(RxBuffer));   //开启接受不定长
 800151c:	22ff      	movs	r2, #255	@ 0xff
 800151e:	496d      	ldr	r1, [pc, #436]	@ (80016d4 <main+0x33c>)
 8001520:	486d      	ldr	r0, [pc, #436]	@ (80016d8 <main+0x340>)
 8001522:	f005 fd33 	bl	8006f8c <HAL_UARTEx_ReceiveToIdle_DMA>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart6, (uint8_t *)RxBuffer2,sizeof(RxBuffer2));   //开启接受不定长
 8001526:	22ff      	movs	r2, #255	@ 0xff
 8001528:	496c      	ldr	r1, [pc, #432]	@ (80016dc <main+0x344>)
 800152a:	486d      	ldr	r0, [pc, #436]	@ (80016e0 <main+0x348>)
 800152c:	f005 fd2e 	bl	8006f8c <HAL_UARTEx_ReceiveToIdle_DMA>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t *)RxBuffer3,sizeof(RxBuffer3));   //开启接受不定长
 8001530:	22ff      	movs	r2, #255	@ 0xff
 8001532:	496c      	ldr	r1, [pc, #432]	@ (80016e4 <main+0x34c>)
 8001534:	486c      	ldr	r0, [pc, #432]	@ (80016e8 <main+0x350>)
 8001536:	f005 fd29 	bl	8006f8c <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(huart2.hdmarx, DMA_IT_HT);          //关闭接受半中断
 800153a:	4b67      	ldr	r3, [pc, #412]	@ (80016d8 <main+0x340>)
 800153c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	4b65      	ldr	r3, [pc, #404]	@ (80016d8 <main+0x340>)
 8001544:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f022 0208 	bic.w	r2, r2, #8
 800154c:	601a      	str	r2, [r3, #0]
  __HAL_DMA_DISABLE_IT(huart3.hdmarx, DMA_IT_HT);          //关闭接受半中断
 800154e:	4b66      	ldr	r3, [pc, #408]	@ (80016e8 <main+0x350>)
 8001550:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	4b64      	ldr	r3, [pc, #400]	@ (80016e8 <main+0x350>)
 8001558:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f022 0208 	bic.w	r2, r2, #8
 8001560:	601a      	str	r2, [r3, #0]
  __HAL_DMA_DISABLE_IT(huart1.hdmarx, DMA_IT_HT);          //关闭接受半中断
 8001562:	4b62      	ldr	r3, [pc, #392]	@ (80016ec <main+0x354>)
 8001564:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	4b60      	ldr	r3, [pc, #384]	@ (80016ec <main+0x354>)
 800156c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f022 0208 	bic.w	r2, r2, #8
 8001574:	601a      	str	r2, [r3, #0]

  HAL_UART_Transmit_DMA(&huart2, JY62_z_Zero, sizeof(JY62_z_Zero));
 8001576:	2203      	movs	r2, #3
 8001578:	495d      	ldr	r1, [pc, #372]	@ (80016f0 <main+0x358>)
 800157a:	4857      	ldr	r0, [pc, #348]	@ (80016d8 <main+0x340>)
 800157c:	f005 fc8a 	bl	8006e94 <HAL_UART_Transmit_DMA>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001580:	2100      	movs	r1, #0
 8001582:	485c      	ldr	r0, [pc, #368]	@ (80016f4 <main+0x35c>)
 8001584:	f004 fbf2 	bl	8005d6c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001588:	2104      	movs	r1, #4
 800158a:	485a      	ldr	r0, [pc, #360]	@ (80016f4 <main+0x35c>)
 800158c:	f004 fbee 	bl	8005d6c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001590:	2108      	movs	r1, #8
 8001592:	4858      	ldr	r0, [pc, #352]	@ (80016f4 <main+0x35c>)
 8001594:	f004 fbea 	bl	8005d6c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001598:	210c      	movs	r1, #12
 800159a:	4856      	ldr	r0, [pc, #344]	@ (80016f4 <main+0x35c>)
 800159c:	f004 fbe6 	bl	8005d6c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 80015a0:	2100      	movs	r1, #0
 80015a2:	4855      	ldr	r0, [pc, #340]	@ (80016f8 <main+0x360>)
 80015a4:	f004 fbe2 	bl	8005d6c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);
 80015a8:	2104      	movs	r1, #4
 80015aa:	4853      	ldr	r0, [pc, #332]	@ (80016f8 <main+0x360>)
 80015ac:	f004 fbde 	bl	8005d6c <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start_IT(&htim7);
 80015b0:	4852      	ldr	r0, [pc, #328]	@ (80016fc <main+0x364>)
 80015b2:	f004 fb11 	bl	8005bd8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim14);
 80015b6:	4852      	ldr	r0, [pc, #328]	@ (8001700 <main+0x368>)
 80015b8:	f004 fb0e 	bl	8005bd8 <HAL_TIM_Base_Start_IT>

  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80015bc:	213c      	movs	r1, #60	@ 0x3c
 80015be:	4851      	ldr	r0, [pc, #324]	@ (8001704 <main+0x36c>)
 80015c0:	f004 fd42 	bl	8006048 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80015c4:	213c      	movs	r1, #60	@ 0x3c
 80015c6:	4850      	ldr	r0, [pc, #320]	@ (8001708 <main+0x370>)
 80015c8:	f004 fd3e 	bl	8006048 <HAL_TIM_Encoder_Start>
  __HAL_TIM_SetCompare(&htim12,TIM_CHANNEL_2,500);
 80015cc:	4b4a      	ldr	r3, [pc, #296]	@ (80016f8 <main+0x360>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80015d4:	639a      	str	r2, [r3, #56]	@ 0x38
  __HAL_TIM_SetCompare(&htim12,TIM_CHANNEL_1,2000);
 80015d6:	4b48      	ldr	r3, [pc, #288]	@ (80016f8 <main+0x360>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80015de:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SetCompare(&htim2,TIM_CHANNEL_2,0);
 80015e0:	4b44      	ldr	r3, [pc, #272]	@ (80016f4 <main+0x35c>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2200      	movs	r2, #0
 80015e6:	639a      	str	r2, [r3, #56]	@ 0x38
  __HAL_TIM_SetCompare(&htim2,TIM_CHANNEL_1,0);
 80015e8:	4b42      	ldr	r3, [pc, #264]	@ (80016f4 <main+0x35c>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2200      	movs	r2, #0
 80015ee:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SetCompare(&htim2,TIM_CHANNEL_3,0);
 80015f0:	4b40      	ldr	r3, [pc, #256]	@ (80016f4 <main+0x35c>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2200      	movs	r2, #0
 80015f6:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_TIM_SetCompare(&htim2,TIM_CHANNEL_4,0);
 80015f8:	4b3e      	ldr	r3, [pc, #248]	@ (80016f4 <main+0x35c>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2200      	movs	r2, #0
 80015fe:	641a      	str	r2, [r3, #64]	@ 0x40
  {

//	  now_angle_down=Get_Servo_Angle_Down();
//    now_angle_up=Get_Servo_Angle_Up();
//	Get_Sensor_Trace();
	 OLED_NewFrame();
 8001600:	f001 ff3c 	bl	800347c <OLED_NewFrame>
		  sprintf(message,"distanceR:%.2f",Angle_y);
 8001604:	4b41      	ldr	r3, [pc, #260]	@ (800170c <main+0x374>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4618      	mov	r0, r3
 800160a:	f7fe ff9d 	bl	8000548 <__aeabi_f2d>
 800160e:	4602      	mov	r2, r0
 8001610:	460b      	mov	r3, r1
 8001612:	493f      	ldr	r1, [pc, #252]	@ (8001710 <main+0x378>)
 8001614:	483f      	ldr	r0, [pc, #252]	@ (8001714 <main+0x37c>)
 8001616:	f007 fd41 	bl	800909c <siprintf>
		  OLED_PrintString(1, 16, message, &font16x16, 0);
 800161a:	2300      	movs	r3, #0
 800161c:	9300      	str	r3, [sp, #0]
 800161e:	4b3e      	ldr	r3, [pc, #248]	@ (8001718 <main+0x380>)
 8001620:	4a3c      	ldr	r2, [pc, #240]	@ (8001714 <main+0x37c>)
 8001622:	2110      	movs	r1, #16
 8001624:	2001      	movs	r0, #1
 8001626:	f002 f94f 	bl	80038c8 <OLED_PrintString>
		  sprintf(message,"speedl:%.2f",Angle_x);
 800162a:	4b3c      	ldr	r3, [pc, #240]	@ (800171c <main+0x384>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4618      	mov	r0, r3
 8001630:	f7fe ff8a 	bl	8000548 <__aeabi_f2d>
 8001634:	4602      	mov	r2, r0
 8001636:	460b      	mov	r3, r1
 8001638:	4939      	ldr	r1, [pc, #228]	@ (8001720 <main+0x388>)
 800163a:	4836      	ldr	r0, [pc, #216]	@ (8001714 <main+0x37c>)
 800163c:	f007 fd2e 	bl	800909c <siprintf>
		  OLED_PrintString(1, 32, message, &font16x16, 0);
 8001640:	2300      	movs	r3, #0
 8001642:	9300      	str	r3, [sp, #0]
 8001644:	4b34      	ldr	r3, [pc, #208]	@ (8001718 <main+0x380>)
 8001646:	4a33      	ldr	r2, [pc, #204]	@ (8001714 <main+0x37c>)
 8001648:	2120      	movs	r1, #32
 800164a:	2001      	movs	r0, #1
 800164c:	f002 f93c 	bl	80038c8 <OLED_PrintString>
		  sprintf(message,"speedr:%d",speednow2);
 8001650:	4b34      	ldr	r3, [pc, #208]	@ (8001724 <main+0x38c>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	461a      	mov	r2, r3
 8001656:	4934      	ldr	r1, [pc, #208]	@ (8001728 <main+0x390>)
 8001658:	482e      	ldr	r0, [pc, #184]	@ (8001714 <main+0x37c>)
 800165a:	f007 fd1f 	bl	800909c <siprintf>
		  OLED_PrintString(1, 48, message, &font16x16, 0);
 800165e:	2300      	movs	r3, #0
 8001660:	9300      	str	r3, [sp, #0]
 8001662:	4b2d      	ldr	r3, [pc, #180]	@ (8001718 <main+0x380>)
 8001664:	4a2b      	ldr	r2, [pc, #172]	@ (8001714 <main+0x37c>)
 8001666:	2130      	movs	r1, #48	@ 0x30
 8001668:	2001      	movs	r0, #1
 800166a:	f002 f92d 	bl	80038c8 <OLED_PrintString>
		  OLED_ShowFrame();
 800166e:	f001 ff11 	bl	8003494 <OLED_ShowFrame>
	 OLED_NewFrame();
 8001672:	bf00      	nop
 8001674:	e7c4      	b.n	8001600 <main+0x268>
 8001676:	bf00      	nop
 8001678:	200002dc 	.word	0x200002dc
 800167c:	200002fc 	.word	0x200002fc
 8001680:	2000031c 	.word	0x2000031c
 8001684:	43a00000 	.word	0x43a00000
 8001688:	20000340 	.word	0x20000340
 800168c:	43700000 	.word	0x43700000
 8001690:	20000278 	.word	0x20000278
 8001694:	2000027c 	.word	0x2000027c
 8001698:	20000280 	.word	0x20000280
 800169c:	2000028c 	.word	0x2000028c
 80016a0:	20000000 	.word	0x20000000
 80016a4:	20000004 	.word	0x20000004
 80016a8:	20000008 	.word	0x20000008
 80016ac:	200002b4 	.word	0x200002b4
 80016b0:	2000000c 	.word	0x2000000c
 80016b4:	20000010 	.word	0x20000010
 80016b8:	20000014 	.word	0x20000014
 80016bc:	20000018 	.word	0x20000018
 80016c0:	2000001c 	.word	0x2000001c
 80016c4:	20000020 	.word	0x20000020
 80016c8:	20000284 	.word	0x20000284
 80016cc:	20000024 	.word	0x20000024
 80016d0:	20000288 	.word	0x20000288
 80016d4:	20000464 	.word	0x20000464
 80016d8:	20000b0c 	.word	0x20000b0c
 80016dc:	20000564 	.word	0x20000564
 80016e0:	20000b9c 	.word	0x20000b9c
 80016e4:	20000664 	.word	0x20000664
 80016e8:	20000b54 	.word	0x20000b54
 80016ec:	20000ac4 	.word	0x20000ac4
 80016f0:	20000028 	.word	0x20000028
 80016f4:	20000884 	.word	0x20000884
 80016f8:	200009a4 	.word	0x200009a4
 80016fc:	2000095c 	.word	0x2000095c
 8001700:	200009ec 	.word	0x200009ec
 8001704:	200008cc 	.word	0x200008cc
 8001708:	20000914 	.word	0x20000914
 800170c:	20000030 	.word	0x20000030
 8001710:	0800d1b8 	.word	0x0800d1b8
 8001714:	20000364 	.word	0x20000364
 8001718:	0800d8d8 	.word	0x0800d8d8
 800171c:	2000002c 	.word	0x2000002c
 8001720:	0800d1c8 	.word	0x0800d1c8
 8001724:	2000087c 	.word	0x2000087c
 8001728:	0800d1d4 	.word	0x0800d1d4

0800172c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b094      	sub	sp, #80	@ 0x50
 8001730:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001732:	f107 0320 	add.w	r3, r7, #32
 8001736:	2230      	movs	r2, #48	@ 0x30
 8001738:	2100      	movs	r1, #0
 800173a:	4618      	mov	r0, r3
 800173c:	f007 fd51 	bl	80091e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001740:	f107 030c 	add.w	r3, r7, #12
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	605a      	str	r2, [r3, #4]
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	60da      	str	r2, [r3, #12]
 800174e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001750:	2300      	movs	r3, #0
 8001752:	60bb      	str	r3, [r7, #8]
 8001754:	4b28      	ldr	r3, [pc, #160]	@ (80017f8 <SystemClock_Config+0xcc>)
 8001756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001758:	4a27      	ldr	r2, [pc, #156]	@ (80017f8 <SystemClock_Config+0xcc>)
 800175a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800175e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001760:	4b25      	ldr	r3, [pc, #148]	@ (80017f8 <SystemClock_Config+0xcc>)
 8001762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001764:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001768:	60bb      	str	r3, [r7, #8]
 800176a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800176c:	2300      	movs	r3, #0
 800176e:	607b      	str	r3, [r7, #4]
 8001770:	4b22      	ldr	r3, [pc, #136]	@ (80017fc <SystemClock_Config+0xd0>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a21      	ldr	r2, [pc, #132]	@ (80017fc <SystemClock_Config+0xd0>)
 8001776:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800177a:	6013      	str	r3, [r2, #0]
 800177c:	4b1f      	ldr	r3, [pc, #124]	@ (80017fc <SystemClock_Config+0xd0>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001784:	607b      	str	r3, [r7, #4]
 8001786:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001788:	2302      	movs	r3, #2
 800178a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800178c:	2301      	movs	r3, #1
 800178e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001790:	2310      	movs	r3, #16
 8001792:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001794:	2302      	movs	r3, #2
 8001796:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001798:	2300      	movs	r3, #0
 800179a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800179c:	2308      	movs	r3, #8
 800179e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80017a0:	23a8      	movs	r3, #168	@ 0xa8
 80017a2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017a4:	2302      	movs	r3, #2
 80017a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80017a8:	2304      	movs	r3, #4
 80017aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017ac:	f107 0320 	add.w	r3, r7, #32
 80017b0:	4618      	mov	r0, r3
 80017b2:	f003 fd69 	bl	8005288 <HAL_RCC_OscConfig>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80017bc:	f000 f9d0 	bl	8001b60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017c0:	230f      	movs	r3, #15
 80017c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017c4:	2302      	movs	r3, #2
 80017c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017c8:	2300      	movs	r3, #0
 80017ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80017cc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80017d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80017d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80017d8:	f107 030c 	add.w	r3, r7, #12
 80017dc:	2105      	movs	r1, #5
 80017de:	4618      	mov	r0, r3
 80017e0:	f003 ffca 	bl	8005778 <HAL_RCC_ClockConfig>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80017ea:	f000 f9b9 	bl	8001b60 <Error_Handler>
  }
}
 80017ee:	bf00      	nop
 80017f0:	3750      	adds	r7, #80	@ 0x50
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40023800 	.word	0x40023800
 80017fc:	40007000 	.word	0x40007000

08001800 <HAL_UARTEx_RxEventCallback>:
}




void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){ //串口接收中断
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af02      	add	r7, sp, #8
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	460b      	mov	r3, r1
 800180a:	807b      	strh	r3, [r7, #2]
	if(huart==&huart6){
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	4a75      	ldr	r2, [pc, #468]	@ (80019e4 <HAL_UARTEx_RxEventCallback+0x1e4>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d141      	bne.n	8001898 <HAL_UARTEx_RxEventCallback+0x98>
		memset(message, 0, sizeof(message));  // 整个数组
 8001814:	22ff      	movs	r2, #255	@ 0xff
 8001816:	2100      	movs	r1, #0
 8001818:	4873      	ldr	r0, [pc, #460]	@ (80019e8 <HAL_UARTEx_RxEventCallback+0x1e8>)
 800181a:	f007 fce2 	bl	80091e2 <memset>
		 if (Size < sizeof(RxBuffer2)) {
 800181e:	887b      	ldrh	r3, [r7, #2]
 8001820:	2bfe      	cmp	r3, #254	@ 0xfe
 8001822:	d804      	bhi.n	800182e <HAL_UARTEx_RxEventCallback+0x2e>
		            RxBuffer2[Size] = '\0';  // 添加字符串结束符
 8001824:	887b      	ldrh	r3, [r7, #2]
 8001826:	4a71      	ldr	r2, [pc, #452]	@ (80019ec <HAL_UARTEx_RxEventCallback+0x1ec>)
 8001828:	2100      	movs	r1, #0
 800182a:	54d1      	strb	r1, [r2, r3]
 800182c:	e003      	b.n	8001836 <HAL_UARTEx_RxEventCallback+0x36>
		        } else {
		            RxBuffer2[sizeof(RxBuffer2) - 1] = '\0';  // 防止越界
 800182e:	4b6f      	ldr	r3, [pc, #444]	@ (80019ec <HAL_UARTEx_RxEventCallback+0x1ec>)
 8001830:	2200      	movs	r2, #0
 8001832:	f883 20fe 	strb.w	r2, [r3, #254]	@ 0xfe
		        }
//左边电机PID在线调参

		 if  (sscanf(RxBuffer2, "anglex %f,angley %f", &Angle_x,&Angle_y)== 2){
 8001836:	4b6e      	ldr	r3, [pc, #440]	@ (80019f0 <HAL_UARTEx_RxEventCallback+0x1f0>)
 8001838:	4a6e      	ldr	r2, [pc, #440]	@ (80019f4 <HAL_UARTEx_RxEventCallback+0x1f4>)
 800183a:	496f      	ldr	r1, [pc, #444]	@ (80019f8 <HAL_UARTEx_RxEventCallback+0x1f8>)
 800183c:	486b      	ldr	r0, [pc, #428]	@ (80019ec <HAL_UARTEx_RxEventCallback+0x1ec>)
 800183e:	f007 fc4f 	bl	80090e0 <siscanf>
 8001842:	4603      	mov	r3, r0
 8001844:	2b02      	cmp	r3, #2
 8001846:	d022      	beq.n	800188e <HAL_UARTEx_RxEventCallback+0x8e>



		        }
		 else if (sscanf(RxBuffer2, "speedl %f", &PIDL.target_val)== 1) {
 8001848:	4a6c      	ldr	r2, [pc, #432]	@ (80019fc <HAL_UARTEx_RxEventCallback+0x1fc>)
 800184a:	496d      	ldr	r1, [pc, #436]	@ (8001a00 <HAL_UARTEx_RxEventCallback+0x200>)
 800184c:	4867      	ldr	r0, [pc, #412]	@ (80019ec <HAL_UARTEx_RxEventCallback+0x1ec>)
 800184e:	f007 fc47 	bl	80090e0 <siscanf>
 8001852:	4603      	mov	r3, r0
 8001854:	2b01      	cmp	r3, #1
 8001856:	d01a      	beq.n	800188e <HAL_UARTEx_RxEventCallback+0x8e>


	         }

//右边电机PID在线调参
		 else if (sscanf(RxBuffer2, "PIDR %f %f %f", &PIDR_Kp, &PIDR_Ki, &PIDR_Kd) == 3) {
 8001858:	4b6a      	ldr	r3, [pc, #424]	@ (8001a04 <HAL_UARTEx_RxEventCallback+0x204>)
 800185a:	9300      	str	r3, [sp, #0]
 800185c:	4b6a      	ldr	r3, [pc, #424]	@ (8001a08 <HAL_UARTEx_RxEventCallback+0x208>)
 800185e:	4a6b      	ldr	r2, [pc, #428]	@ (8001a0c <HAL_UARTEx_RxEventCallback+0x20c>)
 8001860:	496b      	ldr	r1, [pc, #428]	@ (8001a10 <HAL_UARTEx_RxEventCallback+0x210>)
 8001862:	4862      	ldr	r0, [pc, #392]	@ (80019ec <HAL_UARTEx_RxEventCallback+0x1ec>)
 8001864:	f007 fc3c 	bl	80090e0 <siscanf>
 8001868:	4603      	mov	r3, r0
 800186a:	2b03      	cmp	r3, #3
 800186c:	d00f      	beq.n	800188e <HAL_UARTEx_RxEventCallback+0x8e>

		        }
		 else if (sscanf(RxBuffer2, "speedr %f", &PIDR.target_val)== 1) {
 800186e:	4a69      	ldr	r2, [pc, #420]	@ (8001a14 <HAL_UARTEx_RxEventCallback+0x214>)
 8001870:	4969      	ldr	r1, [pc, #420]	@ (8001a18 <HAL_UARTEx_RxEventCallback+0x218>)
 8001872:	485e      	ldr	r0, [pc, #376]	@ (80019ec <HAL_UARTEx_RxEventCallback+0x1ec>)
 8001874:	f007 fc34 	bl	80090e0 <siscanf>
 8001878:	4603      	mov	r3, r0
 800187a:	2b01      	cmp	r3, #1
 800187c:	d007      	beq.n	800188e <HAL_UARTEx_RxEventCallback+0x8e>


	         }
		 else if  (sscanf(RxBuffer2, "PIDL %f %f %f", &PIDL_Kp, &PIDL_Ki, &PIDL_Kd) == 3){
 800187e:	4b67      	ldr	r3, [pc, #412]	@ (8001a1c <HAL_UARTEx_RxEventCallback+0x21c>)
 8001880:	9300      	str	r3, [sp, #0]
 8001882:	4b67      	ldr	r3, [pc, #412]	@ (8001a20 <HAL_UARTEx_RxEventCallback+0x220>)
 8001884:	4a67      	ldr	r2, [pc, #412]	@ (8001a24 <HAL_UARTEx_RxEventCallback+0x224>)
 8001886:	4968      	ldr	r1, [pc, #416]	@ (8001a28 <HAL_UARTEx_RxEventCallback+0x228>)
 8001888:	4858      	ldr	r0, [pc, #352]	@ (80019ec <HAL_UARTEx_RxEventCallback+0x1ec>)
 800188a:	f007 fc29 	bl	80090e0 <siscanf>
//
 //        }

           //sprintf(message,"RECEIVE:%s\n",RxBuffer2);
           //HAL_UART_Transmit_DMA(&huart6, (uint8_t*)message, strlen(message));
           HAL_UARTEx_ReceiveToIdle_DMA(&huart6, (uint8_t *)RxBuffer2,sizeof(RxBuffer2));   //开启接受不定长
 800188e:	22ff      	movs	r2, #255	@ 0xff
 8001890:	4956      	ldr	r1, [pc, #344]	@ (80019ec <HAL_UARTEx_RxEventCallback+0x1ec>)
 8001892:	4854      	ldr	r0, [pc, #336]	@ (80019e4 <HAL_UARTEx_RxEventCallback+0x1e4>)
 8001894:	f005 fb7a 	bl	8006f8c <HAL_UARTEx_ReceiveToIdle_DMA>
	}


	if(huart==&huart2){  //接收JY62 数据中断
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4a64      	ldr	r2, [pc, #400]	@ (8001a2c <HAL_UARTEx_RxEventCallback+0x22c>)
 800189c:	4293      	cmp	r3, r2
 800189e:	f040 8082 	bne.w	80019a6 <HAL_UARTEx_RxEventCallback+0x1a6>
		if(RxBuffer[22]==0x55){
 80018a2:	4b63      	ldr	r3, [pc, #396]	@ (8001a30 <HAL_UARTEx_RxEventCallback+0x230>)
 80018a4:	7d9b      	ldrb	r3, [r3, #22]
 80018a6:	2b55      	cmp	r3, #85	@ 0x55
 80018a8:	d16e      	bne.n	8001988 <HAL_UARTEx_RxEventCallback+0x188>
			if(RxBuffer[23]==0x53){
 80018aa:	4b61      	ldr	r3, [pc, #388]	@ (8001a30 <HAL_UARTEx_RxEventCallback+0x230>)
 80018ac:	7ddb      	ldrb	r3, [r3, #23]
 80018ae:	2b53      	cmp	r3, #83	@ 0x53
 80018b0:	d16a      	bne.n	8001988 <HAL_UARTEx_RxEventCallback+0x188>
				RollX = (float)(((short)(RxBuffer[25]<<8)|RxBuffer[24])/32768.0*180);//处理数据，依据官方所给文档
 80018b2:	4b5f      	ldr	r3, [pc, #380]	@ (8001a30 <HAL_UARTEx_RxEventCallback+0x230>)
 80018b4:	7e5b      	ldrb	r3, [r3, #25]
 80018b6:	b21b      	sxth	r3, r3
 80018b8:	021b      	lsls	r3, r3, #8
 80018ba:	b21b      	sxth	r3, r3
 80018bc:	461a      	mov	r2, r3
 80018be:	4b5c      	ldr	r3, [pc, #368]	@ (8001a30 <HAL_UARTEx_RxEventCallback+0x230>)
 80018c0:	7e1b      	ldrb	r3, [r3, #24]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7fe fe2d 	bl	8000524 <__aeabi_i2d>
 80018ca:	f04f 0200 	mov.w	r2, #0
 80018ce:	4b59      	ldr	r3, [pc, #356]	@ (8001a34 <HAL_UARTEx_RxEventCallback+0x234>)
 80018d0:	f7fe ffbc 	bl	800084c <__aeabi_ddiv>
 80018d4:	4602      	mov	r2, r0
 80018d6:	460b      	mov	r3, r1
 80018d8:	4610      	mov	r0, r2
 80018da:	4619      	mov	r1, r3
 80018dc:	f04f 0200 	mov.w	r2, #0
 80018e0:	4b55      	ldr	r3, [pc, #340]	@ (8001a38 <HAL_UARTEx_RxEventCallback+0x238>)
 80018e2:	f7fe fe89 	bl	80005f8 <__aeabi_dmul>
 80018e6:	4602      	mov	r2, r0
 80018e8:	460b      	mov	r3, r1
 80018ea:	4610      	mov	r0, r2
 80018ec:	4619      	mov	r1, r3
 80018ee:	f7ff f97b 	bl	8000be8 <__aeabi_d2f>
 80018f2:	4603      	mov	r3, r0
 80018f4:	4a51      	ldr	r2, [pc, #324]	@ (8001a3c <HAL_UARTEx_RxEventCallback+0x23c>)
 80018f6:	6013      	str	r3, [r2, #0]
				PitchY = (float)((short)((RxBuffer[27]<<8)|RxBuffer[26])/32768.0*180);
 80018f8:	4b4d      	ldr	r3, [pc, #308]	@ (8001a30 <HAL_UARTEx_RxEventCallback+0x230>)
 80018fa:	7edb      	ldrb	r3, [r3, #27]
 80018fc:	b21b      	sxth	r3, r3
 80018fe:	021b      	lsls	r3, r3, #8
 8001900:	b21a      	sxth	r2, r3
 8001902:	4b4b      	ldr	r3, [pc, #300]	@ (8001a30 <HAL_UARTEx_RxEventCallback+0x230>)
 8001904:	7e9b      	ldrb	r3, [r3, #26]
 8001906:	b21b      	sxth	r3, r3
 8001908:	4313      	orrs	r3, r2
 800190a:	b21b      	sxth	r3, r3
 800190c:	4618      	mov	r0, r3
 800190e:	f7fe fe09 	bl	8000524 <__aeabi_i2d>
 8001912:	f04f 0200 	mov.w	r2, #0
 8001916:	4b47      	ldr	r3, [pc, #284]	@ (8001a34 <HAL_UARTEx_RxEventCallback+0x234>)
 8001918:	f7fe ff98 	bl	800084c <__aeabi_ddiv>
 800191c:	4602      	mov	r2, r0
 800191e:	460b      	mov	r3, r1
 8001920:	4610      	mov	r0, r2
 8001922:	4619      	mov	r1, r3
 8001924:	f04f 0200 	mov.w	r2, #0
 8001928:	4b43      	ldr	r3, [pc, #268]	@ (8001a38 <HAL_UARTEx_RxEventCallback+0x238>)
 800192a:	f7fe fe65 	bl	80005f8 <__aeabi_dmul>
 800192e:	4602      	mov	r2, r0
 8001930:	460b      	mov	r3, r1
 8001932:	4610      	mov	r0, r2
 8001934:	4619      	mov	r1, r3
 8001936:	f7ff f957 	bl	8000be8 <__aeabi_d2f>
 800193a:	4603      	mov	r3, r0
 800193c:	4a40      	ldr	r2, [pc, #256]	@ (8001a40 <HAL_UARTEx_RxEventCallback+0x240>)
 800193e:	6013      	str	r3, [r2, #0]
				YawZ = (float)((short)((RxBuffer[29]<<8)|RxBuffer[28])/32768.0*180);
 8001940:	4b3b      	ldr	r3, [pc, #236]	@ (8001a30 <HAL_UARTEx_RxEventCallback+0x230>)
 8001942:	7f5b      	ldrb	r3, [r3, #29]
 8001944:	b21b      	sxth	r3, r3
 8001946:	021b      	lsls	r3, r3, #8
 8001948:	b21a      	sxth	r2, r3
 800194a:	4b39      	ldr	r3, [pc, #228]	@ (8001a30 <HAL_UARTEx_RxEventCallback+0x230>)
 800194c:	7f1b      	ldrb	r3, [r3, #28]
 800194e:	b21b      	sxth	r3, r3
 8001950:	4313      	orrs	r3, r2
 8001952:	b21b      	sxth	r3, r3
 8001954:	4618      	mov	r0, r3
 8001956:	f7fe fde5 	bl	8000524 <__aeabi_i2d>
 800195a:	f04f 0200 	mov.w	r2, #0
 800195e:	4b35      	ldr	r3, [pc, #212]	@ (8001a34 <HAL_UARTEx_RxEventCallback+0x234>)
 8001960:	f7fe ff74 	bl	800084c <__aeabi_ddiv>
 8001964:	4602      	mov	r2, r0
 8001966:	460b      	mov	r3, r1
 8001968:	4610      	mov	r0, r2
 800196a:	4619      	mov	r1, r3
 800196c:	f04f 0200 	mov.w	r2, #0
 8001970:	4b31      	ldr	r3, [pc, #196]	@ (8001a38 <HAL_UARTEx_RxEventCallback+0x238>)
 8001972:	f7fe fe41 	bl	80005f8 <__aeabi_dmul>
 8001976:	4602      	mov	r2, r0
 8001978:	460b      	mov	r3, r1
 800197a:	4610      	mov	r0, r2
 800197c:	4619      	mov	r1, r3
 800197e:	f7ff f933 	bl	8000be8 <__aeabi_d2f>
 8001982:	4603      	mov	r3, r0
 8001984:	4a2f      	ldr	r2, [pc, #188]	@ (8001a44 <HAL_UARTEx_RxEventCallback+0x244>)
 8001986:	6013      	str	r3, [r2, #0]

		//sprintf(TxBuffer,"%.2f,%.2f,%.2f,%d,%d,%.2f,%.2f,%.2f,%.2f\n",
		//		RollX,PitchY,YawZ,speednow,speednow2,
		//		PIDL.target_val,PIDL.output_val,PIDR.target_val,PIDR.output_val);
		//sprintf(TxBuffer,"%.2f,%.2f,%.2f,%.2f\n",Servo_PID_Up.target_val,Angle_y,Servo_PID_Up.output_val,Servo_PID_Up.Error);
     	HAL_UART_Transmit_DMA(&huart6, (uint8_t *)TxBuffer, strlen(TxBuffer));   //将数据通过串口一发送出去
 8001988:	482f      	ldr	r0, [pc, #188]	@ (8001a48 <HAL_UARTEx_RxEventCallback+0x248>)
 800198a:	f7fe fc71 	bl	8000270 <strlen>
 800198e:	4603      	mov	r3, r0
 8001990:	b29b      	uxth	r3, r3
 8001992:	461a      	mov	r2, r3
 8001994:	492c      	ldr	r1, [pc, #176]	@ (8001a48 <HAL_UARTEx_RxEventCallback+0x248>)
 8001996:	4813      	ldr	r0, [pc, #76]	@ (80019e4 <HAL_UARTEx_RxEventCallback+0x1e4>)
 8001998:	f005 fa7c 	bl	8006e94 <HAL_UART_Transmit_DMA>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *)RxBuffer,sizeof(RxBuffer));   //开启接受不定长
 800199c:	22ff      	movs	r2, #255	@ 0xff
 800199e:	4924      	ldr	r1, [pc, #144]	@ (8001a30 <HAL_UARTEx_RxEventCallback+0x230>)
 80019a0:	4822      	ldr	r0, [pc, #136]	@ (8001a2c <HAL_UARTEx_RxEventCallback+0x22c>)
 80019a2:	f005 faf3 	bl	8006f8c <HAL_UARTEx_ReceiveToIdle_DMA>
	}


	if(huart==&huart3){
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a28      	ldr	r2, [pc, #160]	@ (8001a4c <HAL_UARTEx_RxEventCallback+0x24c>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d115      	bne.n	80019da <HAL_UARTEx_RxEventCallback+0x1da>
		memset(message, 0, sizeof(message));  // 整个数组
 80019ae:	22ff      	movs	r2, #255	@ 0xff
 80019b0:	2100      	movs	r1, #0
 80019b2:	480d      	ldr	r0, [pc, #52]	@ (80019e8 <HAL_UARTEx_RxEventCallback+0x1e8>)
 80019b4:	f007 fc15 	bl	80091e2 <memset>
		 if (Size < sizeof(RxBuffer3)) {
 80019b8:	887b      	ldrh	r3, [r7, #2]
 80019ba:	2bfe      	cmp	r3, #254	@ 0xfe
 80019bc:	d804      	bhi.n	80019c8 <HAL_UARTEx_RxEventCallback+0x1c8>
		            RxBuffer3[Size] = '\0';  // 添加字符串结束符
 80019be:	887b      	ldrh	r3, [r7, #2]
 80019c0:	4a23      	ldr	r2, [pc, #140]	@ (8001a50 <HAL_UARTEx_RxEventCallback+0x250>)
 80019c2:	2100      	movs	r1, #0
 80019c4:	54d1      	strb	r1, [r2, r3]
 80019c6:	e003      	b.n	80019d0 <HAL_UARTEx_RxEventCallback+0x1d0>
		        } else {
		            RxBuffer3[sizeof(RxBuffer3) - 1] = '\0';  // 防止越界
 80019c8:	4b21      	ldr	r3, [pc, #132]	@ (8001a50 <HAL_UARTEx_RxEventCallback+0x250>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	f883 20fe 	strb.w	r2, [r3, #254]	@ 0xfe
		        }

//
//		HAL_UART_Transmit_DMA(&huart3, (uint8_t *)RxBuffer3, strlen(RxBuffer3));
		HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t *)RxBuffer3,sizeof(RxBuffer3));   //开启接受不定长
 80019d0:	22ff      	movs	r2, #255	@ 0xff
 80019d2:	491f      	ldr	r1, [pc, #124]	@ (8001a50 <HAL_UARTEx_RxEventCallback+0x250>)
 80019d4:	481d      	ldr	r0, [pc, #116]	@ (8001a4c <HAL_UARTEx_RxEventCallback+0x24c>)
 80019d6:	f005 fad9 	bl	8006f8c <HAL_UARTEx_ReceiveToIdle_DMA>





}
 80019da:	bf00      	nop
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	20000b9c 	.word	0x20000b9c
 80019e8:	20000364 	.word	0x20000364
 80019ec:	20000564 	.word	0x20000564
 80019f0:	20000030 	.word	0x20000030
 80019f4:	2000002c 	.word	0x2000002c
 80019f8:	0800d1e0 	.word	0x0800d1e0
 80019fc:	2000028c 	.word	0x2000028c
 8001a00:	0800d1f4 	.word	0x0800d1f4
 8001a04:	20000014 	.word	0x20000014
 8001a08:	20000010 	.word	0x20000010
 8001a0c:	2000000c 	.word	0x2000000c
 8001a10:	0800d200 	.word	0x0800d200
 8001a14:	200002b4 	.word	0x200002b4
 8001a18:	0800d210 	.word	0x0800d210
 8001a1c:	20000008 	.word	0x20000008
 8001a20:	20000004 	.word	0x20000004
 8001a24:	20000000 	.word	0x20000000
 8001a28:	0800d21c 	.word	0x0800d21c
 8001a2c:	20000b0c 	.word	0x20000b0c
 8001a30:	20000464 	.word	0x20000464
 8001a34:	40e00000 	.word	0x40e00000
 8001a38:	40668000 	.word	0x40668000
 8001a3c:	20000864 	.word	0x20000864
 8001a40:	20000868 	.word	0x20000868
 8001a44:	2000086c 	.word	0x2000086c
 8001a48:	20000764 	.word	0x20000764
 8001a4c:	20000b54 	.word	0x20000b54
 8001a50:	20000664 	.word	0x20000664

08001a54 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {//处理数据发送完成后的操作
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
	if(huart==&huart6){


	}

	if(huart == &huart2) {
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	4a06      	ldr	r2, [pc, #24]	@ (8001a78 <HAL_UART_TxCpltCallback+0x24>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d104      	bne.n	8001a6e <HAL_UART_TxCpltCallback+0x1a>

	     memset(TxBuffer, 0, sizeof(TxBuffer));
 8001a64:	22ff      	movs	r2, #255	@ 0xff
 8001a66:	2100      	movs	r1, #0
 8001a68:	4804      	ldr	r0, [pc, #16]	@ (8001a7c <HAL_UART_TxCpltCallback+0x28>)
 8001a6a:	f007 fbba 	bl	80091e2 <memset>


  }
}
 8001a6e:	bf00      	nop
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	20000b0c 	.word	0x20000b0c
 8001a7c:	20000764 	.word	0x20000764

08001a80 <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
    	//PID_Servo_realize(&Servo_PID_Down,Angle_x);
    	//PID_Servo_realize(&Servo_PID_Up,Angle_y);
    	//Set_Servo_Angle_Down(Get_Servo_Angle_Down()+Servo_PID_Down.output_val);
    	//Set_Servo_Angle_Up(Get_Servo_Angle_Up()+Servo_PID_Up.output_val);
    }
	if(htim==&htim7){
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	4a2a      	ldr	r2, [pc, #168]	@ (8001b34 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d14c      	bne.n	8001b2a <HAL_TIM_PeriodElapsedCallback+0xaa>
		speednow=10*(short)__HAL_TIM_GetCounter(&htim3);
 8001a90:	4b29      	ldr	r3, [pc, #164]	@ (8001b38 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a96:	b21b      	sxth	r3, r3
 8001a98:	461a      	mov	r2, r3
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	4413      	add	r3, r2
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	4b25      	ldr	r3, [pc, #148]	@ (8001b3c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001aa6:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SetCounter(&htim3,0);
 8001aa8:	4b23      	ldr	r3, [pc, #140]	@ (8001b38 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2200      	movs	r2, #0
 8001aae:	625a      	str	r2, [r3, #36]	@ 0x24
        distance+=speednow/10;
 8001ab0:	4b22      	ldr	r3, [pc, #136]	@ (8001b3c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a22      	ldr	r2, [pc, #136]	@ (8001b40 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001ab6:	fb82 1203 	smull	r1, r2, r2, r3
 8001aba:	1092      	asrs	r2, r2, #2
 8001abc:	17db      	asrs	r3, r3, #31
 8001abe:	1ad2      	subs	r2, r2, r3
 8001ac0:	4b20      	ldr	r3, [pc, #128]	@ (8001b44 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	4a1f      	ldr	r2, [pc, #124]	@ (8001b44 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001ac8:	6013      	str	r3, [r2, #0]

        speednow2=10*(short)__HAL_TIM_GetCounter(&htim4);
 8001aca:	4b1f      	ldr	r3, [pc, #124]	@ (8001b48 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ad0:	b21b      	sxth	r3, r3
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	4413      	add	r3, r2
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	461a      	mov	r2, r3
 8001ade:	4b1b      	ldr	r3, [pc, #108]	@ (8001b4c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001ae0:	601a      	str	r2, [r3, #0]
        __HAL_TIM_SetCounter(&htim4,0);
 8001ae2:	4b19      	ldr	r3, [pc, #100]	@ (8001b48 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	625a      	str	r2, [r3, #36]	@ 0x24
        distance2+=(speednow2)/10;
 8001aea:	4b18      	ldr	r3, [pc, #96]	@ (8001b4c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a14      	ldr	r2, [pc, #80]	@ (8001b40 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001af0:	fb82 1203 	smull	r1, r2, r2, r3
 8001af4:	1092      	asrs	r2, r2, #2
 8001af6:	17db      	asrs	r3, r3, #31
 8001af8:	1ad2      	subs	r2, r2, r3
 8001afa:	4b15      	ldr	r3, [pc, #84]	@ (8001b50 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4413      	add	r3, r2
 8001b00:	4a13      	ldr	r2, [pc, #76]	@ (8001b50 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001b02:	6013      	str	r3, [r2, #0]


        PID_Trace_realize(&Trace_PID, Trace_error());
 8001b04:	f001 fb80 	bl	8003208 <Trace_error>
 8001b08:	ee07 0a90 	vmov	s15, r0
 8001b0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b10:	eeb0 0a67 	vmov.f32	s0, s15
 8001b14:	480f      	ldr	r0, [pc, #60]	@ (8001b54 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001b16:	f001 fba3 	bl	8003260 <PID_Trace_realize>
        PID_Angle_realize(&Angle_PID,YawZ);
 8001b1a:	4b0f      	ldr	r3, [pc, #60]	@ (8001b58 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001b1c:	edd3 7a00 	vldr	s15, [r3]
 8001b20:	eeb0 0a67 	vmov.f32	s0, s15
 8001b24:	480d      	ldr	r0, [pc, #52]	@ (8001b5c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001b26:	f001 fac5 	bl	80030b4 <PID_Angle_realize>





}
 8001b2a:	bf00      	nop
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	2000095c 	.word	0x2000095c
 8001b38:	200008cc 	.word	0x200008cc
 8001b3c:	20000874 	.word	0x20000874
 8001b40:	66666667 	.word	0x66666667
 8001b44:	20000870 	.word	0x20000870
 8001b48:	20000914 	.word	0x20000914
 8001b4c:	2000087c 	.word	0x2000087c
 8001b50:	20000878 	.word	0x20000878
 8001b54:	200002dc 	.word	0x200002dc
 8001b58:	2000086c 	.word	0x2000086c
 8001b5c:	200002fc 	.word	0x200002fc

08001b60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b64:	b672      	cpsid	i
}
 8001b66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b68:	bf00      	nop
 8001b6a:	e7fd      	b.n	8001b68 <Error_Handler+0x8>

08001b6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b72:	2300      	movs	r3, #0
 8001b74:	607b      	str	r3, [r7, #4]
 8001b76:	4b10      	ldr	r3, [pc, #64]	@ (8001bb8 <HAL_MspInit+0x4c>)
 8001b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b7a:	4a0f      	ldr	r2, [pc, #60]	@ (8001bb8 <HAL_MspInit+0x4c>)
 8001b7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b80:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b82:	4b0d      	ldr	r3, [pc, #52]	@ (8001bb8 <HAL_MspInit+0x4c>)
 8001b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b8a:	607b      	str	r3, [r7, #4]
 8001b8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b8e:	2300      	movs	r3, #0
 8001b90:	603b      	str	r3, [r7, #0]
 8001b92:	4b09      	ldr	r3, [pc, #36]	@ (8001bb8 <HAL_MspInit+0x4c>)
 8001b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b96:	4a08      	ldr	r2, [pc, #32]	@ (8001bb8 <HAL_MspInit+0x4c>)
 8001b98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b9e:	4b06      	ldr	r3, [pc, #24]	@ (8001bb8 <HAL_MspInit+0x4c>)
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ba6:	603b      	str	r3, [r7, #0]
 8001ba8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001baa:	bf00      	nop
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	40023800 	.word	0x40023800

08001bbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bc0:	bf00      	nop
 8001bc2:	e7fd      	b.n	8001bc0 <NMI_Handler+0x4>

08001bc4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bc8:	bf00      	nop
 8001bca:	e7fd      	b.n	8001bc8 <HardFault_Handler+0x4>

08001bcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bd0:	bf00      	nop
 8001bd2:	e7fd      	b.n	8001bd0 <MemManage_Handler+0x4>

08001bd4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bd8:	bf00      	nop
 8001bda:	e7fd      	b.n	8001bd8 <BusFault_Handler+0x4>

08001bdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001be0:	bf00      	nop
 8001be2:	e7fd      	b.n	8001be0 <UsageFault_Handler+0x4>

08001be4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001be8:	bf00      	nop
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr

08001bf2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bf6:	bf00      	nop
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c04:	bf00      	nop
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c12:	f001 ff8d 	bl	8003b30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c16:	bf00      	nop
 8001c18:	bd80      	pop	{r7, pc}
	...

08001c1c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8001c20:	4802      	ldr	r0, [pc, #8]	@ (8001c2c <DMA1_Stream0_IRQHandler+0x10>)
 8001c22:	f002 fa73 	bl	800410c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001c26:	bf00      	nop
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	20000ca4 	.word	0x20000ca4

08001c30 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001c34:	4802      	ldr	r0, [pc, #8]	@ (8001c40 <DMA1_Stream1_IRQHandler+0x10>)
 8001c36:	f002 fa69 	bl	800410c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001c3a:	bf00      	nop
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	20000ee4 	.word	0x20000ee4

08001c44 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001c48:	4802      	ldr	r0, [pc, #8]	@ (8001c54 <DMA1_Stream2_IRQHandler+0x10>)
 8001c4a:	f002 fa5f 	bl	800410c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001c4e:	bf00      	nop
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	20000be4 	.word	0x20000be4

08001c58 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001c5c:	4802      	ldr	r0, [pc, #8]	@ (8001c68 <DMA1_Stream3_IRQHandler+0x10>)
 8001c5e:	f002 fa55 	bl	800410c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001c62:	bf00      	nop
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	20000f44 	.word	0x20000f44

08001c6c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8001c70:	4802      	ldr	r0, [pc, #8]	@ (8001c7c <DMA1_Stream4_IRQHandler+0x10>)
 8001c72:	f002 fa4b 	bl	800410c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001c76:	bf00      	nop
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	20000c44 	.word	0x20000c44

08001c80 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001c84:	4802      	ldr	r0, [pc, #8]	@ (8001c90 <DMA1_Stream5_IRQHandler+0x10>)
 8001c86:	f002 fa41 	bl	800410c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001c8a:	bf00      	nop
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	20000e24 	.word	0x20000e24

08001c94 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001c98:	4802      	ldr	r0, [pc, #8]	@ (8001ca4 <DMA1_Stream6_IRQHandler+0x10>)
 8001c9a:	f002 fa37 	bl	800410c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001c9e:	bf00      	nop
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	20000e84 	.word	0x20000e84

08001ca8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001cac:	4802      	ldr	r0, [pc, #8]	@ (8001cb8 <USART1_IRQHandler+0x10>)
 8001cae:	f005 f9c7 	bl	8007040 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001cb2:	bf00      	nop
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	20000ac4 	.word	0x20000ac4

08001cbc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001cc0:	4802      	ldr	r0, [pc, #8]	@ (8001ccc <USART2_IRQHandler+0x10>)
 8001cc2:	f005 f9bd 	bl	8007040 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001cc6:	bf00      	nop
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	20000b0c 	.word	0x20000b0c

08001cd0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001cd4:	4802      	ldr	r0, [pc, #8]	@ (8001ce0 <USART3_IRQHandler+0x10>)
 8001cd6:	f005 f9b3 	bl	8007040 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001cda:	bf00      	nop
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	20000b54 	.word	0x20000b54

08001ce4 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001ce8:	4802      	ldr	r0, [pc, #8]	@ (8001cf4 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001cea:	f004 fa3b 	bl	8006164 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001cee:	bf00      	nop
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	200009ec 	.word	0x200009ec

08001cf8 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8001cfc:	4802      	ldr	r0, [pc, #8]	@ (8001d08 <DMA1_Stream7_IRQHandler+0x10>)
 8001cfe:	f002 fa05 	bl	800410c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	20000d04 	.word	0x20000d04

08001d0c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001d10:	4802      	ldr	r0, [pc, #8]	@ (8001d1c <UART4_IRQHandler+0x10>)
 8001d12:	f005 f995 	bl	8007040 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001d16:	bf00      	nop
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	20000a34 	.word	0x20000a34

08001d20 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001d24:	4802      	ldr	r0, [pc, #8]	@ (8001d30 <UART5_IRQHandler+0x10>)
 8001d26:	f005 f98b 	bl	8007040 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001d2a:	bf00      	nop
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	20000a7c 	.word	0x20000a7c

08001d34 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001d38:	4802      	ldr	r0, [pc, #8]	@ (8001d44 <TIM7_IRQHandler+0x10>)
 8001d3a:	f004 fa13 	bl	8006164 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	2000095c 	.word	0x2000095c

08001d48 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001d4c:	4802      	ldr	r0, [pc, #8]	@ (8001d58 <DMA2_Stream1_IRQHandler+0x10>)
 8001d4e:	f002 f9dd 	bl	800410c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001d52:	bf00      	nop
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	20000fa4 	.word	0x20000fa4

08001d5c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001d60:	4802      	ldr	r0, [pc, #8]	@ (8001d6c <DMA2_Stream2_IRQHandler+0x10>)
 8001d62:	f002 f9d3 	bl	800410c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001d66:	bf00      	nop
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	20000d64 	.word	0x20000d64

08001d70 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8001d74:	4802      	ldr	r0, [pc, #8]	@ (8001d80 <DMA2_Stream6_IRQHandler+0x10>)
 8001d76:	f002 f9c9 	bl	800410c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001d7a:	bf00      	nop
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	20001004 	.word	0x20001004

08001d84 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001d88:	4802      	ldr	r0, [pc, #8]	@ (8001d94 <DMA2_Stream7_IRQHandler+0x10>)
 8001d8a:	f002 f9bf 	bl	800410c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001d8e:	bf00      	nop
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	20000dc4 	.word	0x20000dc4

08001d98 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001d9c:	4802      	ldr	r0, [pc, #8]	@ (8001da8 <USART6_IRQHandler+0x10>)
 8001d9e:	f005 f94f 	bl	8007040 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001da2:	bf00      	nop
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	20000b9c 	.word	0x20000b9c

08001dac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  return 1;
 8001db0:	2301      	movs	r3, #1
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <_kill>:

int _kill(int pid, int sig)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001dc6:	f007 fa5f 	bl	8009288 <__errno>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2216      	movs	r2, #22
 8001dce:	601a      	str	r2, [r3, #0]
  return -1;
 8001dd0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3708      	adds	r7, #8
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <_exit>:

void _exit (int status)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001de4:	f04f 31ff 	mov.w	r1, #4294967295
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f7ff ffe7 	bl	8001dbc <_kill>
  while (1) {}    /* Make sure we hang here */
 8001dee:	bf00      	nop
 8001df0:	e7fd      	b.n	8001dee <_exit+0x12>

08001df2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b086      	sub	sp, #24
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	60f8      	str	r0, [r7, #12]
 8001dfa:	60b9      	str	r1, [r7, #8]
 8001dfc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dfe:	2300      	movs	r3, #0
 8001e00:	617b      	str	r3, [r7, #20]
 8001e02:	e00a      	b.n	8001e1a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e04:	f3af 8000 	nop.w
 8001e08:	4601      	mov	r1, r0
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	1c5a      	adds	r2, r3, #1
 8001e0e:	60ba      	str	r2, [r7, #8]
 8001e10:	b2ca      	uxtb	r2, r1
 8001e12:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	3301      	adds	r3, #1
 8001e18:	617b      	str	r3, [r7, #20]
 8001e1a:	697a      	ldr	r2, [r7, #20]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	dbf0      	blt.n	8001e04 <_read+0x12>
  }

  return len;
 8001e22:	687b      	ldr	r3, [r7, #4]
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3718      	adds	r7, #24
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	60b9      	str	r1, [r7, #8]
 8001e36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e38:	2300      	movs	r3, #0
 8001e3a:	617b      	str	r3, [r7, #20]
 8001e3c:	e009      	b.n	8001e52 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	1c5a      	adds	r2, r3, #1
 8001e42:	60ba      	str	r2, [r7, #8]
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	3301      	adds	r3, #1
 8001e50:	617b      	str	r3, [r7, #20]
 8001e52:	697a      	ldr	r2, [r7, #20]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	dbf1      	blt.n	8001e3e <_write+0x12>
  }
  return len;
 8001e5a:	687b      	ldr	r3, [r7, #4]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3718      	adds	r7, #24
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <_close>:

int _close(int file)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e8c:	605a      	str	r2, [r3, #4]
  return 0;
 8001e8e:	2300      	movs	r3, #0
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <_isatty>:

int _isatty(int file)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ea4:	2301      	movs	r3, #1
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr

08001eb2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	b085      	sub	sp, #20
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	60f8      	str	r0, [r7, #12]
 8001eba:	60b9      	str	r1, [r7, #8]
 8001ebc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ebe:	2300      	movs	r3, #0
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3714      	adds	r7, #20
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b086      	sub	sp, #24
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ed4:	4a14      	ldr	r2, [pc, #80]	@ (8001f28 <_sbrk+0x5c>)
 8001ed6:	4b15      	ldr	r3, [pc, #84]	@ (8001f2c <_sbrk+0x60>)
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ee0:	4b13      	ldr	r3, [pc, #76]	@ (8001f30 <_sbrk+0x64>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d102      	bne.n	8001eee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ee8:	4b11      	ldr	r3, [pc, #68]	@ (8001f30 <_sbrk+0x64>)
 8001eea:	4a12      	ldr	r2, [pc, #72]	@ (8001f34 <_sbrk+0x68>)
 8001eec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001eee:	4b10      	ldr	r3, [pc, #64]	@ (8001f30 <_sbrk+0x64>)
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	693a      	ldr	r2, [r7, #16]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d207      	bcs.n	8001f0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001efc:	f007 f9c4 	bl	8009288 <__errno>
 8001f00:	4603      	mov	r3, r0
 8001f02:	220c      	movs	r2, #12
 8001f04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f06:	f04f 33ff 	mov.w	r3, #4294967295
 8001f0a:	e009      	b.n	8001f20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f0c:	4b08      	ldr	r3, [pc, #32]	@ (8001f30 <_sbrk+0x64>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f12:	4b07      	ldr	r3, [pc, #28]	@ (8001f30 <_sbrk+0x64>)
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4413      	add	r3, r2
 8001f1a:	4a05      	ldr	r2, [pc, #20]	@ (8001f30 <_sbrk+0x64>)
 8001f1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3718      	adds	r7, #24
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	20020000 	.word	0x20020000
 8001f2c:	00000400 	.word	0x00000400
 8001f30:	20000880 	.word	0x20000880
 8001f34:	20001648 	.word	0x20001648

08001f38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f3c:	4b06      	ldr	r3, [pc, #24]	@ (8001f58 <SystemInit+0x20>)
 8001f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f42:	4a05      	ldr	r2, [pc, #20]	@ (8001f58 <SystemInit+0x20>)
 8001f44:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f4c:	bf00      	nop
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	e000ed00 	.word	0xe000ed00

08001f5c <MX_TIM2_Init>:
TIM_HandleTypeDef htim12;
TIM_HandleTypeDef htim14;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b08e      	sub	sp, #56	@ 0x38
 8001f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f62:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f66:	2200      	movs	r2, #0
 8001f68:	601a      	str	r2, [r3, #0]
 8001f6a:	605a      	str	r2, [r3, #4]
 8001f6c:	609a      	str	r2, [r3, #8]
 8001f6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f70:	f107 0320 	add.w	r3, r7, #32
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f7a:	1d3b      	adds	r3, r7, #4
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	605a      	str	r2, [r3, #4]
 8001f82:	609a      	str	r2, [r3, #8]
 8001f84:	60da      	str	r2, [r3, #12]
 8001f86:	611a      	str	r2, [r3, #16]
 8001f88:	615a      	str	r2, [r3, #20]
 8001f8a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f8c:	4b40      	ldr	r3, [pc, #256]	@ (8002090 <MX_TIM2_Init+0x134>)
 8001f8e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001f92:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8001f94:	4b3e      	ldr	r3, [pc, #248]	@ (8002090 <MX_TIM2_Init+0x134>)
 8001f96:	2253      	movs	r2, #83	@ 0x53
 8001f98:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f9a:	4b3d      	ldr	r3, [pc, #244]	@ (8002090 <MX_TIM2_Init+0x134>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001fa0:	4b3b      	ldr	r3, [pc, #236]	@ (8002090 <MX_TIM2_Init+0x134>)
 8001fa2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001fa6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fa8:	4b39      	ldr	r3, [pc, #228]	@ (8002090 <MX_TIM2_Init+0x134>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fae:	4b38      	ldr	r3, [pc, #224]	@ (8002090 <MX_TIM2_Init+0x134>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001fb4:	4836      	ldr	r0, [pc, #216]	@ (8002090 <MX_TIM2_Init+0x134>)
 8001fb6:	f003 fdbf 	bl	8005b38 <HAL_TIM_Base_Init>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001fc0:	f7ff fdce 	bl	8001b60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fc4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001fca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001fce:	4619      	mov	r1, r3
 8001fd0:	482f      	ldr	r0, [pc, #188]	@ (8002090 <MX_TIM2_Init+0x134>)
 8001fd2:	f004 fa79 	bl	80064c8 <HAL_TIM_ConfigClockSource>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001fdc:	f7ff fdc0 	bl	8001b60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001fe0:	482b      	ldr	r0, [pc, #172]	@ (8002090 <MX_TIM2_Init+0x134>)
 8001fe2:	f003 fe69 	bl	8005cb8 <HAL_TIM_PWM_Init>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001fec:	f7ff fdb8 	bl	8001b60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ff8:	f107 0320 	add.w	r3, r7, #32
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	4824      	ldr	r0, [pc, #144]	@ (8002090 <MX_TIM2_Init+0x134>)
 8002000:	f004 fe68 	bl	8006cd4 <HAL_TIMEx_MasterConfigSynchronization>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800200a:	f7ff fda9 	bl	8001b60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800200e:	2360      	movs	r3, #96	@ 0x60
 8002010:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002012:	2300      	movs	r3, #0
 8002014:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002016:	2300      	movs	r3, #0
 8002018:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800201a:	2300      	movs	r3, #0
 800201c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800201e:	1d3b      	adds	r3, r7, #4
 8002020:	2200      	movs	r2, #0
 8002022:	4619      	mov	r1, r3
 8002024:	481a      	ldr	r0, [pc, #104]	@ (8002090 <MX_TIM2_Init+0x134>)
 8002026:	f004 f98d 	bl	8006344 <HAL_TIM_PWM_ConfigChannel>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002030:	f7ff fd96 	bl	8001b60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002034:	1d3b      	adds	r3, r7, #4
 8002036:	2204      	movs	r2, #4
 8002038:	4619      	mov	r1, r3
 800203a:	4815      	ldr	r0, [pc, #84]	@ (8002090 <MX_TIM2_Init+0x134>)
 800203c:	f004 f982 	bl	8006344 <HAL_TIM_PWM_ConfigChannel>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8002046:	f7ff fd8b 	bl	8001b60 <Error_Handler>
  }
  sConfigOC.Pulse = 100;
 800204a:	2364      	movs	r3, #100	@ 0x64
 800204c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800204e:	1d3b      	adds	r3, r7, #4
 8002050:	2208      	movs	r2, #8
 8002052:	4619      	mov	r1, r3
 8002054:	480e      	ldr	r0, [pc, #56]	@ (8002090 <MX_TIM2_Init+0x134>)
 8002056:	f004 f975 	bl	8006344 <HAL_TIM_PWM_ConfigChannel>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <MX_TIM2_Init+0x108>
  {
    Error_Handler();
 8002060:	f7ff fd7e 	bl	8001b60 <Error_Handler>
  }
  sConfigOC.Pulse = 500;
 8002064:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002068:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800206a:	1d3b      	adds	r3, r7, #4
 800206c:	220c      	movs	r2, #12
 800206e:	4619      	mov	r1, r3
 8002070:	4807      	ldr	r0, [pc, #28]	@ (8002090 <MX_TIM2_Init+0x134>)
 8002072:	f004 f967 	bl	8006344 <HAL_TIM_PWM_ConfigChannel>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <MX_TIM2_Init+0x124>
  {
    Error_Handler();
 800207c:	f7ff fd70 	bl	8001b60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002080:	4803      	ldr	r0, [pc, #12]	@ (8002090 <MX_TIM2_Init+0x134>)
 8002082:	f000 fa65 	bl	8002550 <HAL_TIM_MspPostInit>

}
 8002086:	bf00      	nop
 8002088:	3738      	adds	r7, #56	@ 0x38
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	20000884 	.word	0x20000884

08002094 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b08c      	sub	sp, #48	@ 0x30
 8002098:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800209a:	f107 030c 	add.w	r3, r7, #12
 800209e:	2224      	movs	r2, #36	@ 0x24
 80020a0:	2100      	movs	r1, #0
 80020a2:	4618      	mov	r0, r3
 80020a4:	f007 f89d 	bl	80091e2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020a8:	1d3b      	adds	r3, r7, #4
 80020aa:	2200      	movs	r2, #0
 80020ac:	601a      	str	r2, [r3, #0]
 80020ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80020b0:	4b20      	ldr	r3, [pc, #128]	@ (8002134 <MX_TIM3_Init+0xa0>)
 80020b2:	4a21      	ldr	r2, [pc, #132]	@ (8002138 <MX_TIM3_Init+0xa4>)
 80020b4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80020b6:	4b1f      	ldr	r3, [pc, #124]	@ (8002134 <MX_TIM3_Init+0xa0>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020bc:	4b1d      	ldr	r3, [pc, #116]	@ (8002134 <MX_TIM3_Init+0xa0>)
 80020be:	2200      	movs	r2, #0
 80020c0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80020c2:	4b1c      	ldr	r3, [pc, #112]	@ (8002134 <MX_TIM3_Init+0xa0>)
 80020c4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80020c8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020ca:	4b1a      	ldr	r3, [pc, #104]	@ (8002134 <MX_TIM3_Init+0xa0>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020d0:	4b18      	ldr	r3, [pc, #96]	@ (8002134 <MX_TIM3_Init+0xa0>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80020d6:	2301      	movs	r3, #1
 80020d8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80020da:	2300      	movs	r3, #0
 80020dc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80020de:	2301      	movs	r3, #1
 80020e0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80020e2:	2300      	movs	r3, #0
 80020e4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80020e6:	2300      	movs	r3, #0
 80020e8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80020ea:	2300      	movs	r3, #0
 80020ec:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80020ee:	2301      	movs	r3, #1
 80020f0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80020f2:	2300      	movs	r3, #0
 80020f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80020f6:	2300      	movs	r3, #0
 80020f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80020fa:	f107 030c 	add.w	r3, r7, #12
 80020fe:	4619      	mov	r1, r3
 8002100:	480c      	ldr	r0, [pc, #48]	@ (8002134 <MX_TIM3_Init+0xa0>)
 8002102:	f003 fefb 	bl	8005efc <HAL_TIM_Encoder_Init>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800210c:	f7ff fd28 	bl	8001b60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002110:	2300      	movs	r3, #0
 8002112:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002114:	2300      	movs	r3, #0
 8002116:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002118:	1d3b      	adds	r3, r7, #4
 800211a:	4619      	mov	r1, r3
 800211c:	4805      	ldr	r0, [pc, #20]	@ (8002134 <MX_TIM3_Init+0xa0>)
 800211e:	f004 fdd9 	bl	8006cd4 <HAL_TIMEx_MasterConfigSynchronization>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002128:	f7ff fd1a 	bl	8001b60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800212c:	bf00      	nop
 800212e:	3730      	adds	r7, #48	@ 0x30
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	200008cc 	.word	0x200008cc
 8002138:	40000400 	.word	0x40000400

0800213c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b08c      	sub	sp, #48	@ 0x30
 8002140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002142:	f107 030c 	add.w	r3, r7, #12
 8002146:	2224      	movs	r2, #36	@ 0x24
 8002148:	2100      	movs	r1, #0
 800214a:	4618      	mov	r0, r3
 800214c:	f007 f849 	bl	80091e2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002150:	1d3b      	adds	r3, r7, #4
 8002152:	2200      	movs	r2, #0
 8002154:	601a      	str	r2, [r3, #0]
 8002156:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002158:	4b20      	ldr	r3, [pc, #128]	@ (80021dc <MX_TIM4_Init+0xa0>)
 800215a:	4a21      	ldr	r2, [pc, #132]	@ (80021e0 <MX_TIM4_Init+0xa4>)
 800215c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800215e:	4b1f      	ldr	r3, [pc, #124]	@ (80021dc <MX_TIM4_Init+0xa0>)
 8002160:	2200      	movs	r2, #0
 8002162:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002164:	4b1d      	ldr	r3, [pc, #116]	@ (80021dc <MX_TIM4_Init+0xa0>)
 8002166:	2200      	movs	r2, #0
 8002168:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800216a:	4b1c      	ldr	r3, [pc, #112]	@ (80021dc <MX_TIM4_Init+0xa0>)
 800216c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002170:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002172:	4b1a      	ldr	r3, [pc, #104]	@ (80021dc <MX_TIM4_Init+0xa0>)
 8002174:	2200      	movs	r2, #0
 8002176:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002178:	4b18      	ldr	r3, [pc, #96]	@ (80021dc <MX_TIM4_Init+0xa0>)
 800217a:	2200      	movs	r2, #0
 800217c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800217e:	2301      	movs	r3, #1
 8002180:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002182:	2300      	movs	r3, #0
 8002184:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002186:	2301      	movs	r3, #1
 8002188:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800218a:	2300      	movs	r3, #0
 800218c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800218e:	2300      	movs	r3, #0
 8002190:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002192:	2300      	movs	r3, #0
 8002194:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002196:	2301      	movs	r3, #1
 8002198:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800219a:	2300      	movs	r3, #0
 800219c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800219e:	2300      	movs	r3, #0
 80021a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80021a2:	f107 030c 	add.w	r3, r7, #12
 80021a6:	4619      	mov	r1, r3
 80021a8:	480c      	ldr	r0, [pc, #48]	@ (80021dc <MX_TIM4_Init+0xa0>)
 80021aa:	f003 fea7 	bl	8005efc <HAL_TIM_Encoder_Init>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d001      	beq.n	80021b8 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80021b4:	f7ff fcd4 	bl	8001b60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021b8:	2300      	movs	r3, #0
 80021ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021bc:	2300      	movs	r3, #0
 80021be:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80021c0:	1d3b      	adds	r3, r7, #4
 80021c2:	4619      	mov	r1, r3
 80021c4:	4805      	ldr	r0, [pc, #20]	@ (80021dc <MX_TIM4_Init+0xa0>)
 80021c6:	f004 fd85 	bl	8006cd4 <HAL_TIMEx_MasterConfigSynchronization>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80021d0:	f7ff fcc6 	bl	8001b60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80021d4:	bf00      	nop
 80021d6:	3730      	adds	r7, #48	@ 0x30
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	20000914 	.word	0x20000914
 80021e0:	40000800 	.word	0x40000800

080021e4 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021ea:	463b      	mov	r3, r7
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80021f2:	4b15      	ldr	r3, [pc, #84]	@ (8002248 <MX_TIM7_Init+0x64>)
 80021f4:	4a15      	ldr	r2, [pc, #84]	@ (800224c <MX_TIM7_Init+0x68>)
 80021f6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8400-1;
 80021f8:	4b13      	ldr	r3, [pc, #76]	@ (8002248 <MX_TIM7_Init+0x64>)
 80021fa:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80021fe:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002200:	4b11      	ldr	r3, [pc, #68]	@ (8002248 <MX_TIM7_Init+0x64>)
 8002202:	2200      	movs	r2, #0
 8002204:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 100-1;
 8002206:	4b10      	ldr	r3, [pc, #64]	@ (8002248 <MX_TIM7_Init+0x64>)
 8002208:	2263      	movs	r2, #99	@ 0x63
 800220a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800220c:	4b0e      	ldr	r3, [pc, #56]	@ (8002248 <MX_TIM7_Init+0x64>)
 800220e:	2200      	movs	r2, #0
 8002210:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002212:	480d      	ldr	r0, [pc, #52]	@ (8002248 <MX_TIM7_Init+0x64>)
 8002214:	f003 fc90 	bl	8005b38 <HAL_TIM_Base_Init>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800221e:	f7ff fc9f 	bl	8001b60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002222:	2300      	movs	r3, #0
 8002224:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002226:	2300      	movs	r3, #0
 8002228:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800222a:	463b      	mov	r3, r7
 800222c:	4619      	mov	r1, r3
 800222e:	4806      	ldr	r0, [pc, #24]	@ (8002248 <MX_TIM7_Init+0x64>)
 8002230:	f004 fd50 	bl	8006cd4 <HAL_TIMEx_MasterConfigSynchronization>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800223a:	f7ff fc91 	bl	8001b60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800223e:	bf00      	nop
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	2000095c 	.word	0x2000095c
 800224c:	40001400 	.word	0x40001400

08002250 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b08c      	sub	sp, #48	@ 0x30
 8002254:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002256:	f107 0320 	add.w	r3, r7, #32
 800225a:	2200      	movs	r2, #0
 800225c:	601a      	str	r2, [r3, #0]
 800225e:	605a      	str	r2, [r3, #4]
 8002260:	609a      	str	r2, [r3, #8]
 8002262:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002264:	1d3b      	adds	r3, r7, #4
 8002266:	2200      	movs	r2, #0
 8002268:	601a      	str	r2, [r3, #0]
 800226a:	605a      	str	r2, [r3, #4]
 800226c:	609a      	str	r2, [r3, #8]
 800226e:	60da      	str	r2, [r3, #12]
 8002270:	611a      	str	r2, [r3, #16]
 8002272:	615a      	str	r2, [r3, #20]
 8002274:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002276:	4b2b      	ldr	r3, [pc, #172]	@ (8002324 <MX_TIM12_Init+0xd4>)
 8002278:	4a2b      	ldr	r2, [pc, #172]	@ (8002328 <MX_TIM12_Init+0xd8>)
 800227a:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 840-1;
 800227c:	4b29      	ldr	r3, [pc, #164]	@ (8002324 <MX_TIM12_Init+0xd4>)
 800227e:	f240 3247 	movw	r2, #839	@ 0x347
 8002282:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002284:	4b27      	ldr	r3, [pc, #156]	@ (8002324 <MX_TIM12_Init+0xd4>)
 8002286:	2200      	movs	r2, #0
 8002288:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 2000-1;
 800228a:	4b26      	ldr	r3, [pc, #152]	@ (8002324 <MX_TIM12_Init+0xd4>)
 800228c:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8002290:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002292:	4b24      	ldr	r3, [pc, #144]	@ (8002324 <MX_TIM12_Init+0xd4>)
 8002294:	2200      	movs	r2, #0
 8002296:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002298:	4b22      	ldr	r3, [pc, #136]	@ (8002324 <MX_TIM12_Init+0xd4>)
 800229a:	2200      	movs	r2, #0
 800229c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 800229e:	4821      	ldr	r0, [pc, #132]	@ (8002324 <MX_TIM12_Init+0xd4>)
 80022a0:	f003 fc4a 	bl	8005b38 <HAL_TIM_Base_Init>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <MX_TIM12_Init+0x5e>
  {
    Error_Handler();
 80022aa:	f7ff fc59 	bl	8001b60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022b2:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80022b4:	f107 0320 	add.w	r3, r7, #32
 80022b8:	4619      	mov	r1, r3
 80022ba:	481a      	ldr	r0, [pc, #104]	@ (8002324 <MX_TIM12_Init+0xd4>)
 80022bc:	f004 f904 	bl	80064c8 <HAL_TIM_ConfigClockSource>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <MX_TIM12_Init+0x7a>
  {
    Error_Handler();
 80022c6:	f7ff fc4b 	bl	8001b60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80022ca:	4816      	ldr	r0, [pc, #88]	@ (8002324 <MX_TIM12_Init+0xd4>)
 80022cc:	f003 fcf4 	bl	8005cb8 <HAL_TIM_PWM_Init>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 80022d6:	f7ff fc43 	bl	8001b60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022da:	2360      	movs	r3, #96	@ 0x60
 80022dc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80022de:	2300      	movs	r3, #0
 80022e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022e2:	2300      	movs	r3, #0
 80022e4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022e6:	2300      	movs	r3, #0
 80022e8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022ea:	1d3b      	adds	r3, r7, #4
 80022ec:	2200      	movs	r2, #0
 80022ee:	4619      	mov	r1, r3
 80022f0:	480c      	ldr	r0, [pc, #48]	@ (8002324 <MX_TIM12_Init+0xd4>)
 80022f2:	f004 f827 	bl	8006344 <HAL_TIM_PWM_ConfigChannel>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <MX_TIM12_Init+0xb0>
  {
    Error_Handler();
 80022fc:	f7ff fc30 	bl	8001b60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002300:	1d3b      	adds	r3, r7, #4
 8002302:	2204      	movs	r2, #4
 8002304:	4619      	mov	r1, r3
 8002306:	4807      	ldr	r0, [pc, #28]	@ (8002324 <MX_TIM12_Init+0xd4>)
 8002308:	f004 f81c 	bl	8006344 <HAL_TIM_PWM_ConfigChannel>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <MX_TIM12_Init+0xc6>
  {
    Error_Handler();
 8002312:	f7ff fc25 	bl	8001b60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8002316:	4803      	ldr	r0, [pc, #12]	@ (8002324 <MX_TIM12_Init+0xd4>)
 8002318:	f000 f91a 	bl	8002550 <HAL_TIM_MspPostInit>

}
 800231c:	bf00      	nop
 800231e:	3730      	adds	r7, #48	@ 0x30
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	200009a4 	.word	0x200009a4
 8002328:	40001800 	.word	0x40001800

0800232c <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8002330:	4b0e      	ldr	r3, [pc, #56]	@ (800236c <MX_TIM14_Init+0x40>)
 8002332:	4a0f      	ldr	r2, [pc, #60]	@ (8002370 <MX_TIM14_Init+0x44>)
 8002334:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 3000-1;
 8002336:	4b0d      	ldr	r3, [pc, #52]	@ (800236c <MX_TIM14_Init+0x40>)
 8002338:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 800233c:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800233e:	4b0b      	ldr	r3, [pc, #44]	@ (800236c <MX_TIM14_Init+0x40>)
 8002340:	2200      	movs	r2, #0
 8002342:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 8400-1;
 8002344:	4b09      	ldr	r3, [pc, #36]	@ (800236c <MX_TIM14_Init+0x40>)
 8002346:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 800234a:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800234c:	4b07      	ldr	r3, [pc, #28]	@ (800236c <MX_TIM14_Init+0x40>)
 800234e:	2200      	movs	r2, #0
 8002350:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002352:	4b06      	ldr	r3, [pc, #24]	@ (800236c <MX_TIM14_Init+0x40>)
 8002354:	2200      	movs	r2, #0
 8002356:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002358:	4804      	ldr	r0, [pc, #16]	@ (800236c <MX_TIM14_Init+0x40>)
 800235a:	f003 fbed 	bl	8005b38 <HAL_TIM_Base_Init>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 8002364:	f7ff fbfc 	bl	8001b60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8002368:	bf00      	nop
 800236a:	bd80      	pop	{r7, pc}
 800236c:	200009ec 	.word	0x200009ec
 8002370:	40002000 	.word	0x40002000

08002374 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b086      	sub	sp, #24
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002384:	d10e      	bne.n	80023a4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002386:	2300      	movs	r3, #0
 8002388:	617b      	str	r3, [r7, #20]
 800238a:	4b2e      	ldr	r3, [pc, #184]	@ (8002444 <HAL_TIM_Base_MspInit+0xd0>)
 800238c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800238e:	4a2d      	ldr	r2, [pc, #180]	@ (8002444 <HAL_TIM_Base_MspInit+0xd0>)
 8002390:	f043 0301 	orr.w	r3, r3, #1
 8002394:	6413      	str	r3, [r2, #64]	@ 0x40
 8002396:	4b2b      	ldr	r3, [pc, #172]	@ (8002444 <HAL_TIM_Base_MspInit+0xd0>)
 8002398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800239a:	f003 0301 	and.w	r3, r3, #1
 800239e:	617b      	str	r3, [r7, #20]
 80023a0:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 80023a2:	e04a      	b.n	800243a <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM7)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a27      	ldr	r2, [pc, #156]	@ (8002448 <HAL_TIM_Base_MspInit+0xd4>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d116      	bne.n	80023dc <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80023ae:	2300      	movs	r3, #0
 80023b0:	613b      	str	r3, [r7, #16]
 80023b2:	4b24      	ldr	r3, [pc, #144]	@ (8002444 <HAL_TIM_Base_MspInit+0xd0>)
 80023b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b6:	4a23      	ldr	r2, [pc, #140]	@ (8002444 <HAL_TIM_Base_MspInit+0xd0>)
 80023b8:	f043 0320 	orr.w	r3, r3, #32
 80023bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80023be:	4b21      	ldr	r3, [pc, #132]	@ (8002444 <HAL_TIM_Base_MspInit+0xd0>)
 80023c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c2:	f003 0320 	and.w	r3, r3, #32
 80023c6:	613b      	str	r3, [r7, #16]
 80023c8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 80023ca:	2200      	movs	r2, #0
 80023cc:	2101      	movs	r1, #1
 80023ce:	2037      	movs	r0, #55	@ 0x37
 80023d0:	f001 fccd 	bl	8003d6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80023d4:	2037      	movs	r0, #55	@ 0x37
 80023d6:	f001 fce6 	bl	8003da6 <HAL_NVIC_EnableIRQ>
}
 80023da:	e02e      	b.n	800243a <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM12)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a1a      	ldr	r2, [pc, #104]	@ (800244c <HAL_TIM_Base_MspInit+0xd8>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d10e      	bne.n	8002404 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80023e6:	2300      	movs	r3, #0
 80023e8:	60fb      	str	r3, [r7, #12]
 80023ea:	4b16      	ldr	r3, [pc, #88]	@ (8002444 <HAL_TIM_Base_MspInit+0xd0>)
 80023ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ee:	4a15      	ldr	r2, [pc, #84]	@ (8002444 <HAL_TIM_Base_MspInit+0xd0>)
 80023f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80023f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80023f6:	4b13      	ldr	r3, [pc, #76]	@ (8002444 <HAL_TIM_Base_MspInit+0xd0>)
 80023f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023fe:	60fb      	str	r3, [r7, #12]
 8002400:	68fb      	ldr	r3, [r7, #12]
}
 8002402:	e01a      	b.n	800243a <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM14)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a11      	ldr	r2, [pc, #68]	@ (8002450 <HAL_TIM_Base_MspInit+0xdc>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d115      	bne.n	800243a <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800240e:	2300      	movs	r3, #0
 8002410:	60bb      	str	r3, [r7, #8]
 8002412:	4b0c      	ldr	r3, [pc, #48]	@ (8002444 <HAL_TIM_Base_MspInit+0xd0>)
 8002414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002416:	4a0b      	ldr	r2, [pc, #44]	@ (8002444 <HAL_TIM_Base_MspInit+0xd0>)
 8002418:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800241c:	6413      	str	r3, [r2, #64]	@ 0x40
 800241e:	4b09      	ldr	r3, [pc, #36]	@ (8002444 <HAL_TIM_Base_MspInit+0xd0>)
 8002420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002422:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002426:	60bb      	str	r3, [r7, #8]
 8002428:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800242a:	2200      	movs	r2, #0
 800242c:	2100      	movs	r1, #0
 800242e:	202d      	movs	r0, #45	@ 0x2d
 8002430:	f001 fc9d 	bl	8003d6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002434:	202d      	movs	r0, #45	@ 0x2d
 8002436:	f001 fcb6 	bl	8003da6 <HAL_NVIC_EnableIRQ>
}
 800243a:	bf00      	nop
 800243c:	3718      	adds	r7, #24
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	40023800 	.word	0x40023800
 8002448:	40001400 	.word	0x40001400
 800244c:	40001800 	.word	0x40001800
 8002450:	40002000 	.word	0x40002000

08002454 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b08c      	sub	sp, #48	@ 0x30
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800245c:	f107 031c 	add.w	r3, r7, #28
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	605a      	str	r2, [r3, #4]
 8002466:	609a      	str	r2, [r3, #8]
 8002468:	60da      	str	r2, [r3, #12]
 800246a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a32      	ldr	r2, [pc, #200]	@ (800253c <HAL_TIM_Encoder_MspInit+0xe8>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d12c      	bne.n	80024d0 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002476:	2300      	movs	r3, #0
 8002478:	61bb      	str	r3, [r7, #24]
 800247a:	4b31      	ldr	r3, [pc, #196]	@ (8002540 <HAL_TIM_Encoder_MspInit+0xec>)
 800247c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800247e:	4a30      	ldr	r2, [pc, #192]	@ (8002540 <HAL_TIM_Encoder_MspInit+0xec>)
 8002480:	f043 0302 	orr.w	r3, r3, #2
 8002484:	6413      	str	r3, [r2, #64]	@ 0x40
 8002486:	4b2e      	ldr	r3, [pc, #184]	@ (8002540 <HAL_TIM_Encoder_MspInit+0xec>)
 8002488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248a:	f003 0302 	and.w	r3, r3, #2
 800248e:	61bb      	str	r3, [r7, #24]
 8002490:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002492:	2300      	movs	r3, #0
 8002494:	617b      	str	r3, [r7, #20]
 8002496:	4b2a      	ldr	r3, [pc, #168]	@ (8002540 <HAL_TIM_Encoder_MspInit+0xec>)
 8002498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800249a:	4a29      	ldr	r2, [pc, #164]	@ (8002540 <HAL_TIM_Encoder_MspInit+0xec>)
 800249c:	f043 0301 	orr.w	r3, r3, #1
 80024a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80024a2:	4b27      	ldr	r3, [pc, #156]	@ (8002540 <HAL_TIM_Encoder_MspInit+0xec>)
 80024a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	617b      	str	r3, [r7, #20]
 80024ac:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENCODERB_1_Pin|ENCODERB_2_Pin;
 80024ae:	23c0      	movs	r3, #192	@ 0xc0
 80024b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b2:	2302      	movs	r3, #2
 80024b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b6:	2300      	movs	r3, #0
 80024b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ba:	2300      	movs	r3, #0
 80024bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80024be:	2302      	movs	r3, #2
 80024c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024c2:	f107 031c 	add.w	r3, r7, #28
 80024c6:	4619      	mov	r1, r3
 80024c8:	481e      	ldr	r0, [pc, #120]	@ (8002544 <HAL_TIM_Encoder_MspInit+0xf0>)
 80024ca:	f002 f889 	bl	80045e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80024ce:	e031      	b.n	8002534 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(tim_encoderHandle->Instance==TIM4)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a1c      	ldr	r2, [pc, #112]	@ (8002548 <HAL_TIM_Encoder_MspInit+0xf4>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d12c      	bne.n	8002534 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80024da:	2300      	movs	r3, #0
 80024dc:	613b      	str	r3, [r7, #16]
 80024de:	4b18      	ldr	r3, [pc, #96]	@ (8002540 <HAL_TIM_Encoder_MspInit+0xec>)
 80024e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e2:	4a17      	ldr	r2, [pc, #92]	@ (8002540 <HAL_TIM_Encoder_MspInit+0xec>)
 80024e4:	f043 0304 	orr.w	r3, r3, #4
 80024e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80024ea:	4b15      	ldr	r3, [pc, #84]	@ (8002540 <HAL_TIM_Encoder_MspInit+0xec>)
 80024ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ee:	f003 0304 	and.w	r3, r3, #4
 80024f2:	613b      	str	r3, [r7, #16]
 80024f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024f6:	2300      	movs	r3, #0
 80024f8:	60fb      	str	r3, [r7, #12]
 80024fa:	4b11      	ldr	r3, [pc, #68]	@ (8002540 <HAL_TIM_Encoder_MspInit+0xec>)
 80024fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024fe:	4a10      	ldr	r2, [pc, #64]	@ (8002540 <HAL_TIM_Encoder_MspInit+0xec>)
 8002500:	f043 0308 	orr.w	r3, r3, #8
 8002504:	6313      	str	r3, [r2, #48]	@ 0x30
 8002506:	4b0e      	ldr	r3, [pc, #56]	@ (8002540 <HAL_TIM_Encoder_MspInit+0xec>)
 8002508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800250a:	f003 0308 	and.w	r3, r3, #8
 800250e:	60fb      	str	r3, [r7, #12]
 8002510:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCODERA_1_Pin|ENCODERA_2_Pin;
 8002512:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002516:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002518:	2302      	movs	r3, #2
 800251a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251c:	2300      	movs	r3, #0
 800251e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002520:	2300      	movs	r3, #0
 8002522:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002524:	2302      	movs	r3, #2
 8002526:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002528:	f107 031c 	add.w	r3, r7, #28
 800252c:	4619      	mov	r1, r3
 800252e:	4807      	ldr	r0, [pc, #28]	@ (800254c <HAL_TIM_Encoder_MspInit+0xf8>)
 8002530:	f002 f856 	bl	80045e0 <HAL_GPIO_Init>
}
 8002534:	bf00      	nop
 8002536:	3730      	adds	r7, #48	@ 0x30
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	40000400 	.word	0x40000400
 8002540:	40023800 	.word	0x40023800
 8002544:	40020000 	.word	0x40020000
 8002548:	40000800 	.word	0x40000800
 800254c:	40020c00 	.word	0x40020c00

08002550 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b08a      	sub	sp, #40	@ 0x28
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002558:	f107 0314 	add.w	r3, r7, #20
 800255c:	2200      	movs	r2, #0
 800255e:	601a      	str	r2, [r3, #0]
 8002560:	605a      	str	r2, [r3, #4]
 8002562:	609a      	str	r2, [r3, #8]
 8002564:	60da      	str	r2, [r3, #12]
 8002566:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002570:	d11e      	bne.n	80025b0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002572:	2300      	movs	r3, #0
 8002574:	613b      	str	r3, [r7, #16]
 8002576:	4b22      	ldr	r3, [pc, #136]	@ (8002600 <HAL_TIM_MspPostInit+0xb0>)
 8002578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800257a:	4a21      	ldr	r2, [pc, #132]	@ (8002600 <HAL_TIM_MspPostInit+0xb0>)
 800257c:	f043 0301 	orr.w	r3, r3, #1
 8002580:	6313      	str	r3, [r2, #48]	@ 0x30
 8002582:	4b1f      	ldr	r3, [pc, #124]	@ (8002600 <HAL_TIM_MspPostInit+0xb0>)
 8002584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	613b      	str	r3, [r7, #16]
 800258c:	693b      	ldr	r3, [r7, #16]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MOTOR4_PWM_Pin|MOTOR3_PWM_Pin|MOTOR2_PWM_Pin|MOTOR1_PWM_Pin;
 800258e:	230f      	movs	r3, #15
 8002590:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002592:	2302      	movs	r3, #2
 8002594:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002596:	2300      	movs	r3, #0
 8002598:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800259a:	2300      	movs	r3, #0
 800259c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800259e:	2301      	movs	r3, #1
 80025a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025a2:	f107 0314 	add.w	r3, r7, #20
 80025a6:	4619      	mov	r1, r3
 80025a8:	4816      	ldr	r0, [pc, #88]	@ (8002604 <HAL_TIM_MspPostInit+0xb4>)
 80025aa:	f002 f819 	bl	80045e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80025ae:	e023      	b.n	80025f8 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM12)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a14      	ldr	r2, [pc, #80]	@ (8002608 <HAL_TIM_MspPostInit+0xb8>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d11e      	bne.n	80025f8 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025ba:	2300      	movs	r3, #0
 80025bc:	60fb      	str	r3, [r7, #12]
 80025be:	4b10      	ldr	r3, [pc, #64]	@ (8002600 <HAL_TIM_MspPostInit+0xb0>)
 80025c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c2:	4a0f      	ldr	r2, [pc, #60]	@ (8002600 <HAL_TIM_MspPostInit+0xb0>)
 80025c4:	f043 0302 	orr.w	r3, r3, #2
 80025c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80025ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002600 <HAL_TIM_MspPostInit+0xb0>)
 80025cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	60fb      	str	r3, [r7, #12]
 80025d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO_PWM2_Pin|SERVO_PWM1_Pin;
 80025d6:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80025da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025dc:	2302      	movs	r3, #2
 80025de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e0:	2300      	movs	r3, #0
 80025e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e4:	2300      	movs	r3, #0
 80025e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80025e8:	2309      	movs	r3, #9
 80025ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025ec:	f107 0314 	add.w	r3, r7, #20
 80025f0:	4619      	mov	r1, r3
 80025f2:	4806      	ldr	r0, [pc, #24]	@ (800260c <HAL_TIM_MspPostInit+0xbc>)
 80025f4:	f001 fff4 	bl	80045e0 <HAL_GPIO_Init>
}
 80025f8:	bf00      	nop
 80025fa:	3728      	adds	r7, #40	@ 0x28
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	40023800 	.word	0x40023800
 8002604:	40020000 	.word	0x40020000
 8002608:	40001800 	.word	0x40001800
 800260c:	40020400 	.word	0x40020400

08002610 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart6_rx;
DMA_HandleTypeDef hdma_usart6_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002614:	4b11      	ldr	r3, [pc, #68]	@ (800265c <MX_UART4_Init+0x4c>)
 8002616:	4a12      	ldr	r2, [pc, #72]	@ (8002660 <MX_UART4_Init+0x50>)
 8002618:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800261a:	4b10      	ldr	r3, [pc, #64]	@ (800265c <MX_UART4_Init+0x4c>)
 800261c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002620:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002622:	4b0e      	ldr	r3, [pc, #56]	@ (800265c <MX_UART4_Init+0x4c>)
 8002624:	2200      	movs	r2, #0
 8002626:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002628:	4b0c      	ldr	r3, [pc, #48]	@ (800265c <MX_UART4_Init+0x4c>)
 800262a:	2200      	movs	r2, #0
 800262c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800262e:	4b0b      	ldr	r3, [pc, #44]	@ (800265c <MX_UART4_Init+0x4c>)
 8002630:	2200      	movs	r2, #0
 8002632:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002634:	4b09      	ldr	r3, [pc, #36]	@ (800265c <MX_UART4_Init+0x4c>)
 8002636:	220c      	movs	r2, #12
 8002638:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800263a:	4b08      	ldr	r3, [pc, #32]	@ (800265c <MX_UART4_Init+0x4c>)
 800263c:	2200      	movs	r2, #0
 800263e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002640:	4b06      	ldr	r3, [pc, #24]	@ (800265c <MX_UART4_Init+0x4c>)
 8002642:	2200      	movs	r2, #0
 8002644:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002646:	4805      	ldr	r0, [pc, #20]	@ (800265c <MX_UART4_Init+0x4c>)
 8002648:	f004 fbd4 	bl	8006df4 <HAL_UART_Init>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8002652:	f7ff fa85 	bl	8001b60 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002656:	bf00      	nop
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	20000a34 	.word	0x20000a34
 8002660:	40004c00 	.word	0x40004c00

08002664 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002668:	4b11      	ldr	r3, [pc, #68]	@ (80026b0 <MX_UART5_Init+0x4c>)
 800266a:	4a12      	ldr	r2, [pc, #72]	@ (80026b4 <MX_UART5_Init+0x50>)
 800266c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800266e:	4b10      	ldr	r3, [pc, #64]	@ (80026b0 <MX_UART5_Init+0x4c>)
 8002670:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002674:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002676:	4b0e      	ldr	r3, [pc, #56]	@ (80026b0 <MX_UART5_Init+0x4c>)
 8002678:	2200      	movs	r2, #0
 800267a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800267c:	4b0c      	ldr	r3, [pc, #48]	@ (80026b0 <MX_UART5_Init+0x4c>)
 800267e:	2200      	movs	r2, #0
 8002680:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002682:	4b0b      	ldr	r3, [pc, #44]	@ (80026b0 <MX_UART5_Init+0x4c>)
 8002684:	2200      	movs	r2, #0
 8002686:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002688:	4b09      	ldr	r3, [pc, #36]	@ (80026b0 <MX_UART5_Init+0x4c>)
 800268a:	220c      	movs	r2, #12
 800268c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800268e:	4b08      	ldr	r3, [pc, #32]	@ (80026b0 <MX_UART5_Init+0x4c>)
 8002690:	2200      	movs	r2, #0
 8002692:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002694:	4b06      	ldr	r3, [pc, #24]	@ (80026b0 <MX_UART5_Init+0x4c>)
 8002696:	2200      	movs	r2, #0
 8002698:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800269a:	4805      	ldr	r0, [pc, #20]	@ (80026b0 <MX_UART5_Init+0x4c>)
 800269c:	f004 fbaa 	bl	8006df4 <HAL_UART_Init>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80026a6:	f7ff fa5b 	bl	8001b60 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80026aa:	bf00      	nop
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	20000a7c 	.word	0x20000a7c
 80026b4:	40005000 	.word	0x40005000

080026b8 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80026bc:	4b11      	ldr	r3, [pc, #68]	@ (8002704 <MX_USART1_UART_Init+0x4c>)
 80026be:	4a12      	ldr	r2, [pc, #72]	@ (8002708 <MX_USART1_UART_Init+0x50>)
 80026c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80026c2:	4b10      	ldr	r3, [pc, #64]	@ (8002704 <MX_USART1_UART_Init+0x4c>)
 80026c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80026c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002704 <MX_USART1_UART_Init+0x4c>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80026d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002704 <MX_USART1_UART_Init+0x4c>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80026d6:	4b0b      	ldr	r3, [pc, #44]	@ (8002704 <MX_USART1_UART_Init+0x4c>)
 80026d8:	2200      	movs	r2, #0
 80026da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80026dc:	4b09      	ldr	r3, [pc, #36]	@ (8002704 <MX_USART1_UART_Init+0x4c>)
 80026de:	220c      	movs	r2, #12
 80026e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026e2:	4b08      	ldr	r3, [pc, #32]	@ (8002704 <MX_USART1_UART_Init+0x4c>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80026e8:	4b06      	ldr	r3, [pc, #24]	@ (8002704 <MX_USART1_UART_Init+0x4c>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80026ee:	4805      	ldr	r0, [pc, #20]	@ (8002704 <MX_USART1_UART_Init+0x4c>)
 80026f0:	f004 fb80 	bl	8006df4 <HAL_UART_Init>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80026fa:	f7ff fa31 	bl	8001b60 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80026fe:	bf00      	nop
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	20000ac4 	.word	0x20000ac4
 8002708:	40011000 	.word	0x40011000

0800270c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002710:	4b11      	ldr	r3, [pc, #68]	@ (8002758 <MX_USART2_UART_Init+0x4c>)
 8002712:	4a12      	ldr	r2, [pc, #72]	@ (800275c <MX_USART2_UART_Init+0x50>)
 8002714:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002716:	4b10      	ldr	r3, [pc, #64]	@ (8002758 <MX_USART2_UART_Init+0x4c>)
 8002718:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800271c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800271e:	4b0e      	ldr	r3, [pc, #56]	@ (8002758 <MX_USART2_UART_Init+0x4c>)
 8002720:	2200      	movs	r2, #0
 8002722:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002724:	4b0c      	ldr	r3, [pc, #48]	@ (8002758 <MX_USART2_UART_Init+0x4c>)
 8002726:	2200      	movs	r2, #0
 8002728:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800272a:	4b0b      	ldr	r3, [pc, #44]	@ (8002758 <MX_USART2_UART_Init+0x4c>)
 800272c:	2200      	movs	r2, #0
 800272e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002730:	4b09      	ldr	r3, [pc, #36]	@ (8002758 <MX_USART2_UART_Init+0x4c>)
 8002732:	220c      	movs	r2, #12
 8002734:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002736:	4b08      	ldr	r3, [pc, #32]	@ (8002758 <MX_USART2_UART_Init+0x4c>)
 8002738:	2200      	movs	r2, #0
 800273a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800273c:	4b06      	ldr	r3, [pc, #24]	@ (8002758 <MX_USART2_UART_Init+0x4c>)
 800273e:	2200      	movs	r2, #0
 8002740:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002742:	4805      	ldr	r0, [pc, #20]	@ (8002758 <MX_USART2_UART_Init+0x4c>)
 8002744:	f004 fb56 	bl	8006df4 <HAL_UART_Init>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800274e:	f7ff fa07 	bl	8001b60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002752:	bf00      	nop
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	20000b0c 	.word	0x20000b0c
 800275c:	40004400 	.word	0x40004400

08002760 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002764:	4b11      	ldr	r3, [pc, #68]	@ (80027ac <MX_USART3_UART_Init+0x4c>)
 8002766:	4a12      	ldr	r2, [pc, #72]	@ (80027b0 <MX_USART3_UART_Init+0x50>)
 8002768:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800276a:	4b10      	ldr	r3, [pc, #64]	@ (80027ac <MX_USART3_UART_Init+0x4c>)
 800276c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002770:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002772:	4b0e      	ldr	r3, [pc, #56]	@ (80027ac <MX_USART3_UART_Init+0x4c>)
 8002774:	2200      	movs	r2, #0
 8002776:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002778:	4b0c      	ldr	r3, [pc, #48]	@ (80027ac <MX_USART3_UART_Init+0x4c>)
 800277a:	2200      	movs	r2, #0
 800277c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800277e:	4b0b      	ldr	r3, [pc, #44]	@ (80027ac <MX_USART3_UART_Init+0x4c>)
 8002780:	2200      	movs	r2, #0
 8002782:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002784:	4b09      	ldr	r3, [pc, #36]	@ (80027ac <MX_USART3_UART_Init+0x4c>)
 8002786:	220c      	movs	r2, #12
 8002788:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800278a:	4b08      	ldr	r3, [pc, #32]	@ (80027ac <MX_USART3_UART_Init+0x4c>)
 800278c:	2200      	movs	r2, #0
 800278e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002790:	4b06      	ldr	r3, [pc, #24]	@ (80027ac <MX_USART3_UART_Init+0x4c>)
 8002792:	2200      	movs	r2, #0
 8002794:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002796:	4805      	ldr	r0, [pc, #20]	@ (80027ac <MX_USART3_UART_Init+0x4c>)
 8002798:	f004 fb2c 	bl	8006df4 <HAL_UART_Init>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80027a2:	f7ff f9dd 	bl	8001b60 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80027a6:	bf00      	nop
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	20000b54 	.word	0x20000b54
 80027b0:	40004800 	.word	0x40004800

080027b4 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80027b8:	4b11      	ldr	r3, [pc, #68]	@ (8002800 <MX_USART6_UART_Init+0x4c>)
 80027ba:	4a12      	ldr	r2, [pc, #72]	@ (8002804 <MX_USART6_UART_Init+0x50>)
 80027bc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80027be:	4b10      	ldr	r3, [pc, #64]	@ (8002800 <MX_USART6_UART_Init+0x4c>)
 80027c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80027c4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80027c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002800 <MX_USART6_UART_Init+0x4c>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80027cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002800 <MX_USART6_UART_Init+0x4c>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80027d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002800 <MX_USART6_UART_Init+0x4c>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80027d8:	4b09      	ldr	r3, [pc, #36]	@ (8002800 <MX_USART6_UART_Init+0x4c>)
 80027da:	220c      	movs	r2, #12
 80027dc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027de:	4b08      	ldr	r3, [pc, #32]	@ (8002800 <MX_USART6_UART_Init+0x4c>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80027e4:	4b06      	ldr	r3, [pc, #24]	@ (8002800 <MX_USART6_UART_Init+0x4c>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80027ea:	4805      	ldr	r0, [pc, #20]	@ (8002800 <MX_USART6_UART_Init+0x4c>)
 80027ec:	f004 fb02 	bl	8006df4 <HAL_UART_Init>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80027f6:	f7ff f9b3 	bl	8001b60 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80027fa:	bf00      	nop
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	20000b9c 	.word	0x20000b9c
 8002804:	40011400 	.word	0x40011400

08002808 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b094      	sub	sp, #80	@ 0x50
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002810:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002814:	2200      	movs	r2, #0
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	605a      	str	r2, [r3, #4]
 800281a:	609a      	str	r2, [r3, #8]
 800281c:	60da      	str	r2, [r3, #12]
 800281e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a4a      	ldr	r2, [pc, #296]	@ (8002950 <HAL_UART_MspInit+0x148>)
 8002826:	4293      	cmp	r3, r2
 8002828:	f040 80a0 	bne.w	800296c <HAL_UART_MspInit+0x164>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800282c:	2300      	movs	r3, #0
 800282e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002830:	4b48      	ldr	r3, [pc, #288]	@ (8002954 <HAL_UART_MspInit+0x14c>)
 8002832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002834:	4a47      	ldr	r2, [pc, #284]	@ (8002954 <HAL_UART_MspInit+0x14c>)
 8002836:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800283a:	6413      	str	r3, [r2, #64]	@ 0x40
 800283c:	4b45      	ldr	r3, [pc, #276]	@ (8002954 <HAL_UART_MspInit+0x14c>)
 800283e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002840:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002844:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002848:	2300      	movs	r3, #0
 800284a:	637b      	str	r3, [r7, #52]	@ 0x34
 800284c:	4b41      	ldr	r3, [pc, #260]	@ (8002954 <HAL_UART_MspInit+0x14c>)
 800284e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002850:	4a40      	ldr	r2, [pc, #256]	@ (8002954 <HAL_UART_MspInit+0x14c>)
 8002852:	f043 0304 	orr.w	r3, r3, #4
 8002856:	6313      	str	r3, [r2, #48]	@ 0x30
 8002858:	4b3e      	ldr	r3, [pc, #248]	@ (8002954 <HAL_UART_MspInit+0x14c>)
 800285a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800285c:	f003 0304 	and.w	r3, r3, #4
 8002860:	637b      	str	r3, [r7, #52]	@ 0x34
 8002862:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = HS100_TX_Pin|Hs100_RX_Pin;
 8002864:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002868:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800286a:	2302      	movs	r3, #2
 800286c:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286e:	2300      	movs	r3, #0
 8002870:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002872:	2303      	movs	r3, #3
 8002874:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002876:	2308      	movs	r3, #8
 8002878:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800287a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800287e:	4619      	mov	r1, r3
 8002880:	4835      	ldr	r0, [pc, #212]	@ (8002958 <HAL_UART_MspInit+0x150>)
 8002882:	f001 fead 	bl	80045e0 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8002886:	4b35      	ldr	r3, [pc, #212]	@ (800295c <HAL_UART_MspInit+0x154>)
 8002888:	4a35      	ldr	r2, [pc, #212]	@ (8002960 <HAL_UART_MspInit+0x158>)
 800288a:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 800288c:	4b33      	ldr	r3, [pc, #204]	@ (800295c <HAL_UART_MspInit+0x154>)
 800288e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002892:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002894:	4b31      	ldr	r3, [pc, #196]	@ (800295c <HAL_UART_MspInit+0x154>)
 8002896:	2200      	movs	r2, #0
 8002898:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800289a:	4b30      	ldr	r3, [pc, #192]	@ (800295c <HAL_UART_MspInit+0x154>)
 800289c:	2200      	movs	r2, #0
 800289e:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80028a0:	4b2e      	ldr	r3, [pc, #184]	@ (800295c <HAL_UART_MspInit+0x154>)
 80028a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80028a6:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028a8:	4b2c      	ldr	r3, [pc, #176]	@ (800295c <HAL_UART_MspInit+0x154>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028ae:	4b2b      	ldr	r3, [pc, #172]	@ (800295c <HAL_UART_MspInit+0x154>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80028b4:	4b29      	ldr	r3, [pc, #164]	@ (800295c <HAL_UART_MspInit+0x154>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80028ba:	4b28      	ldr	r3, [pc, #160]	@ (800295c <HAL_UART_MspInit+0x154>)
 80028bc:	2200      	movs	r2, #0
 80028be:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028c0:	4b26      	ldr	r3, [pc, #152]	@ (800295c <HAL_UART_MspInit+0x154>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80028c6:	4825      	ldr	r0, [pc, #148]	@ (800295c <HAL_UART_MspInit+0x154>)
 80028c8:	f001 fa88 	bl	8003ddc <HAL_DMA_Init>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80028d2:	f7ff f945 	bl	8001b60 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a20      	ldr	r2, [pc, #128]	@ (800295c <HAL_UART_MspInit+0x154>)
 80028da:	63da      	str	r2, [r3, #60]	@ 0x3c
 80028dc:	4a1f      	ldr	r2, [pc, #124]	@ (800295c <HAL_UART_MspInit+0x154>)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 80028e2:	4b20      	ldr	r3, [pc, #128]	@ (8002964 <HAL_UART_MspInit+0x15c>)
 80028e4:	4a20      	ldr	r2, [pc, #128]	@ (8002968 <HAL_UART_MspInit+0x160>)
 80028e6:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 80028e8:	4b1e      	ldr	r3, [pc, #120]	@ (8002964 <HAL_UART_MspInit+0x15c>)
 80028ea:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80028ee:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80028f0:	4b1c      	ldr	r3, [pc, #112]	@ (8002964 <HAL_UART_MspInit+0x15c>)
 80028f2:	2240      	movs	r2, #64	@ 0x40
 80028f4:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028f6:	4b1b      	ldr	r3, [pc, #108]	@ (8002964 <HAL_UART_MspInit+0x15c>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80028fc:	4b19      	ldr	r3, [pc, #100]	@ (8002964 <HAL_UART_MspInit+0x15c>)
 80028fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002902:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002904:	4b17      	ldr	r3, [pc, #92]	@ (8002964 <HAL_UART_MspInit+0x15c>)
 8002906:	2200      	movs	r2, #0
 8002908:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800290a:	4b16      	ldr	r3, [pc, #88]	@ (8002964 <HAL_UART_MspInit+0x15c>)
 800290c:	2200      	movs	r2, #0
 800290e:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8002910:	4b14      	ldr	r3, [pc, #80]	@ (8002964 <HAL_UART_MspInit+0x15c>)
 8002912:	2200      	movs	r2, #0
 8002914:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002916:	4b13      	ldr	r3, [pc, #76]	@ (8002964 <HAL_UART_MspInit+0x15c>)
 8002918:	2200      	movs	r2, #0
 800291a:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800291c:	4b11      	ldr	r3, [pc, #68]	@ (8002964 <HAL_UART_MspInit+0x15c>)
 800291e:	2200      	movs	r2, #0
 8002920:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8002922:	4810      	ldr	r0, [pc, #64]	@ (8002964 <HAL_UART_MspInit+0x15c>)
 8002924:	f001 fa5a 	bl	8003ddc <HAL_DMA_Init>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 800292e:	f7ff f917 	bl	8001b60 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a0b      	ldr	r2, [pc, #44]	@ (8002964 <HAL_UART_MspInit+0x15c>)
 8002936:	639a      	str	r2, [r3, #56]	@ 0x38
 8002938:	4a0a      	ldr	r2, [pc, #40]	@ (8002964 <HAL_UART_MspInit+0x15c>)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800293e:	2200      	movs	r2, #0
 8002940:	2100      	movs	r1, #0
 8002942:	2034      	movs	r0, #52	@ 0x34
 8002944:	f001 fa13 	bl	8003d6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002948:	2034      	movs	r0, #52	@ 0x34
 800294a:	f001 fa2c 	bl	8003da6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800294e:	e34b      	b.n	8002fe8 <HAL_UART_MspInit+0x7e0>
 8002950:	40004c00 	.word	0x40004c00
 8002954:	40023800 	.word	0x40023800
 8002958:	40020800 	.word	0x40020800
 800295c:	20000be4 	.word	0x20000be4
 8002960:	40026040 	.word	0x40026040
 8002964:	20000c44 	.word	0x20000c44
 8002968:	40026070 	.word	0x40026070
  else if(uartHandle->Instance==UART5)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a59      	ldr	r2, [pc, #356]	@ (8002ad8 <HAL_UART_MspInit+0x2d0>)
 8002972:	4293      	cmp	r3, r2
 8002974:	f040 80c0 	bne.w	8002af8 <HAL_UART_MspInit+0x2f0>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002978:	2300      	movs	r3, #0
 800297a:	633b      	str	r3, [r7, #48]	@ 0x30
 800297c:	4b57      	ldr	r3, [pc, #348]	@ (8002adc <HAL_UART_MspInit+0x2d4>)
 800297e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002980:	4a56      	ldr	r2, [pc, #344]	@ (8002adc <HAL_UART_MspInit+0x2d4>)
 8002982:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002986:	6413      	str	r3, [r2, #64]	@ 0x40
 8002988:	4b54      	ldr	r3, [pc, #336]	@ (8002adc <HAL_UART_MspInit+0x2d4>)
 800298a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002990:	633b      	str	r3, [r7, #48]	@ 0x30
 8002992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002994:	2300      	movs	r3, #0
 8002996:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002998:	4b50      	ldr	r3, [pc, #320]	@ (8002adc <HAL_UART_MspInit+0x2d4>)
 800299a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800299c:	4a4f      	ldr	r2, [pc, #316]	@ (8002adc <HAL_UART_MspInit+0x2d4>)
 800299e:	f043 0304 	orr.w	r3, r3, #4
 80029a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80029a4:	4b4d      	ldr	r3, [pc, #308]	@ (8002adc <HAL_UART_MspInit+0x2d4>)
 80029a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a8:	f003 0304 	and.w	r3, r3, #4
 80029ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80029b0:	2300      	movs	r3, #0
 80029b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80029b4:	4b49      	ldr	r3, [pc, #292]	@ (8002adc <HAL_UART_MspInit+0x2d4>)
 80029b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b8:	4a48      	ldr	r2, [pc, #288]	@ (8002adc <HAL_UART_MspInit+0x2d4>)
 80029ba:	f043 0308 	orr.w	r3, r3, #8
 80029be:	6313      	str	r3, [r2, #48]	@ 0x30
 80029c0:	4b46      	ldr	r3, [pc, #280]	@ (8002adc <HAL_UART_MspInit+0x2d4>)
 80029c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029c4:	f003 0308 	and.w	r3, r3, #8
 80029c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80029ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = HC06_RX_Pin;
 80029cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d2:	2302      	movs	r3, #2
 80029d4:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d6:	2300      	movs	r3, #0
 80029d8:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029da:	2303      	movs	r3, #3
 80029dc:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80029de:	2308      	movs	r3, #8
 80029e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(HC06_RX_GPIO_Port, &GPIO_InitStruct);
 80029e2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80029e6:	4619      	mov	r1, r3
 80029e8:	483d      	ldr	r0, [pc, #244]	@ (8002ae0 <HAL_UART_MspInit+0x2d8>)
 80029ea:	f001 fdf9 	bl	80045e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = HC06_TX_Pin;
 80029ee:	2304      	movs	r3, #4
 80029f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f2:	2302      	movs	r3, #2
 80029f4:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f6:	2300      	movs	r3, #0
 80029f8:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029fa:	2303      	movs	r3, #3
 80029fc:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80029fe:	2308      	movs	r3, #8
 8002a00:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(HC06_TX_GPIO_Port, &GPIO_InitStruct);
 8002a02:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002a06:	4619      	mov	r1, r3
 8002a08:	4836      	ldr	r0, [pc, #216]	@ (8002ae4 <HAL_UART_MspInit+0x2dc>)
 8002a0a:	f001 fde9 	bl	80045e0 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8002a0e:	4b36      	ldr	r3, [pc, #216]	@ (8002ae8 <HAL_UART_MspInit+0x2e0>)
 8002a10:	4a36      	ldr	r2, [pc, #216]	@ (8002aec <HAL_UART_MspInit+0x2e4>)
 8002a12:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8002a14:	4b34      	ldr	r3, [pc, #208]	@ (8002ae8 <HAL_UART_MspInit+0x2e0>)
 8002a16:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002a1a:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a1c:	4b32      	ldr	r3, [pc, #200]	@ (8002ae8 <HAL_UART_MspInit+0x2e0>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a22:	4b31      	ldr	r3, [pc, #196]	@ (8002ae8 <HAL_UART_MspInit+0x2e0>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a28:	4b2f      	ldr	r3, [pc, #188]	@ (8002ae8 <HAL_UART_MspInit+0x2e0>)
 8002a2a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a2e:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a30:	4b2d      	ldr	r3, [pc, #180]	@ (8002ae8 <HAL_UART_MspInit+0x2e0>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a36:	4b2c      	ldr	r3, [pc, #176]	@ (8002ae8 <HAL_UART_MspInit+0x2e0>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8002a3c:	4b2a      	ldr	r3, [pc, #168]	@ (8002ae8 <HAL_UART_MspInit+0x2e0>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002a42:	4b29      	ldr	r3, [pc, #164]	@ (8002ae8 <HAL_UART_MspInit+0x2e0>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a48:	4b27      	ldr	r3, [pc, #156]	@ (8002ae8 <HAL_UART_MspInit+0x2e0>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8002a4e:	4826      	ldr	r0, [pc, #152]	@ (8002ae8 <HAL_UART_MspInit+0x2e0>)
 8002a50:	f001 f9c4 	bl	8003ddc <HAL_DMA_Init>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <HAL_UART_MspInit+0x256>
      Error_Handler();
 8002a5a:	f7ff f881 	bl	8001b60 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a21      	ldr	r2, [pc, #132]	@ (8002ae8 <HAL_UART_MspInit+0x2e0>)
 8002a62:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002a64:	4a20      	ldr	r2, [pc, #128]	@ (8002ae8 <HAL_UART_MspInit+0x2e0>)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_uart5_tx.Instance = DMA1_Stream7;
 8002a6a:	4b21      	ldr	r3, [pc, #132]	@ (8002af0 <HAL_UART_MspInit+0x2e8>)
 8002a6c:	4a21      	ldr	r2, [pc, #132]	@ (8002af4 <HAL_UART_MspInit+0x2ec>)
 8002a6e:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 8002a70:	4b1f      	ldr	r3, [pc, #124]	@ (8002af0 <HAL_UART_MspInit+0x2e8>)
 8002a72:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002a76:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a78:	4b1d      	ldr	r3, [pc, #116]	@ (8002af0 <HAL_UART_MspInit+0x2e8>)
 8002a7a:	2240      	movs	r2, #64	@ 0x40
 8002a7c:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a7e:	4b1c      	ldr	r3, [pc, #112]	@ (8002af0 <HAL_UART_MspInit+0x2e8>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a84:	4b1a      	ldr	r3, [pc, #104]	@ (8002af0 <HAL_UART_MspInit+0x2e8>)
 8002a86:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a8a:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a8c:	4b18      	ldr	r3, [pc, #96]	@ (8002af0 <HAL_UART_MspInit+0x2e8>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a92:	4b17      	ldr	r3, [pc, #92]	@ (8002af0 <HAL_UART_MspInit+0x2e8>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8002a98:	4b15      	ldr	r3, [pc, #84]	@ (8002af0 <HAL_UART_MspInit+0x2e8>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002a9e:	4b14      	ldr	r3, [pc, #80]	@ (8002af0 <HAL_UART_MspInit+0x2e8>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002aa4:	4b12      	ldr	r3, [pc, #72]	@ (8002af0 <HAL_UART_MspInit+0x2e8>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8002aaa:	4811      	ldr	r0, [pc, #68]	@ (8002af0 <HAL_UART_MspInit+0x2e8>)
 8002aac:	f001 f996 	bl	8003ddc <HAL_DMA_Init>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <HAL_UART_MspInit+0x2b2>
      Error_Handler();
 8002ab6:	f7ff f853 	bl	8001b60 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a0c      	ldr	r2, [pc, #48]	@ (8002af0 <HAL_UART_MspInit+0x2e8>)
 8002abe:	639a      	str	r2, [r3, #56]	@ 0x38
 8002ac0:	4a0b      	ldr	r2, [pc, #44]	@ (8002af0 <HAL_UART_MspInit+0x2e8>)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	2100      	movs	r1, #0
 8002aca:	2035      	movs	r0, #53	@ 0x35
 8002acc:	f001 f94f 	bl	8003d6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8002ad0:	2035      	movs	r0, #53	@ 0x35
 8002ad2:	f001 f968 	bl	8003da6 <HAL_NVIC_EnableIRQ>
}
 8002ad6:	e287      	b.n	8002fe8 <HAL_UART_MspInit+0x7e0>
 8002ad8:	40005000 	.word	0x40005000
 8002adc:	40023800 	.word	0x40023800
 8002ae0:	40020800 	.word	0x40020800
 8002ae4:	40020c00 	.word	0x40020c00
 8002ae8:	20000ca4 	.word	0x20000ca4
 8002aec:	40026010 	.word	0x40026010
 8002af0:	20000d04 	.word	0x20000d04
 8002af4:	400260b8 	.word	0x400260b8
  else if(uartHandle->Instance==USART1)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a96      	ldr	r2, [pc, #600]	@ (8002d58 <HAL_UART_MspInit+0x550>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	f040 8092 	bne.w	8002c28 <HAL_UART_MspInit+0x420>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b04:	2300      	movs	r3, #0
 8002b06:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b08:	4b94      	ldr	r3, [pc, #592]	@ (8002d5c <HAL_UART_MspInit+0x554>)
 8002b0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b0c:	4a93      	ldr	r2, [pc, #588]	@ (8002d5c <HAL_UART_MspInit+0x554>)
 8002b0e:	f043 0310 	orr.w	r3, r3, #16
 8002b12:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b14:	4b91      	ldr	r3, [pc, #580]	@ (8002d5c <HAL_UART_MspInit+0x554>)
 8002b16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b18:	f003 0310 	and.w	r3, r3, #16
 8002b1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b20:	2300      	movs	r3, #0
 8002b22:	623b      	str	r3, [r7, #32]
 8002b24:	4b8d      	ldr	r3, [pc, #564]	@ (8002d5c <HAL_UART_MspInit+0x554>)
 8002b26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b28:	4a8c      	ldr	r2, [pc, #560]	@ (8002d5c <HAL_UART_MspInit+0x554>)
 8002b2a:	f043 0301 	orr.w	r3, r3, #1
 8002b2e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b30:	4b8a      	ldr	r3, [pc, #552]	@ (8002d5c <HAL_UART_MspInit+0x554>)
 8002b32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b34:	f003 0301 	and.w	r3, r3, #1
 8002b38:	623b      	str	r3, [r7, #32]
 8002b3a:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002b3c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002b40:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b42:	2302      	movs	r3, #2
 8002b44:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b46:	2300      	movs	r3, #0
 8002b48:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b4e:	2307      	movs	r3, #7
 8002b50:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b52:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002b56:	4619      	mov	r1, r3
 8002b58:	4881      	ldr	r0, [pc, #516]	@ (8002d60 <HAL_UART_MspInit+0x558>)
 8002b5a:	f001 fd41 	bl	80045e0 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002b5e:	4b81      	ldr	r3, [pc, #516]	@ (8002d64 <HAL_UART_MspInit+0x55c>)
 8002b60:	4a81      	ldr	r2, [pc, #516]	@ (8002d68 <HAL_UART_MspInit+0x560>)
 8002b62:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002b64:	4b7f      	ldr	r3, [pc, #508]	@ (8002d64 <HAL_UART_MspInit+0x55c>)
 8002b66:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002b6a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b6c:	4b7d      	ldr	r3, [pc, #500]	@ (8002d64 <HAL_UART_MspInit+0x55c>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b72:	4b7c      	ldr	r3, [pc, #496]	@ (8002d64 <HAL_UART_MspInit+0x55c>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b78:	4b7a      	ldr	r3, [pc, #488]	@ (8002d64 <HAL_UART_MspInit+0x55c>)
 8002b7a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b7e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b80:	4b78      	ldr	r3, [pc, #480]	@ (8002d64 <HAL_UART_MspInit+0x55c>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b86:	4b77      	ldr	r3, [pc, #476]	@ (8002d64 <HAL_UART_MspInit+0x55c>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002b8c:	4b75      	ldr	r3, [pc, #468]	@ (8002d64 <HAL_UART_MspInit+0x55c>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002b92:	4b74      	ldr	r3, [pc, #464]	@ (8002d64 <HAL_UART_MspInit+0x55c>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b98:	4b72      	ldr	r3, [pc, #456]	@ (8002d64 <HAL_UART_MspInit+0x55c>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002b9e:	4871      	ldr	r0, [pc, #452]	@ (8002d64 <HAL_UART_MspInit+0x55c>)
 8002ba0:	f001 f91c 	bl	8003ddc <HAL_DMA_Init>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d001      	beq.n	8002bae <HAL_UART_MspInit+0x3a6>
      Error_Handler();
 8002baa:	f7fe ffd9 	bl	8001b60 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a6c      	ldr	r2, [pc, #432]	@ (8002d64 <HAL_UART_MspInit+0x55c>)
 8002bb2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002bb4:	4a6b      	ldr	r2, [pc, #428]	@ (8002d64 <HAL_UART_MspInit+0x55c>)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002bba:	4b6c      	ldr	r3, [pc, #432]	@ (8002d6c <HAL_UART_MspInit+0x564>)
 8002bbc:	4a6c      	ldr	r2, [pc, #432]	@ (8002d70 <HAL_UART_MspInit+0x568>)
 8002bbe:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002bc0:	4b6a      	ldr	r3, [pc, #424]	@ (8002d6c <HAL_UART_MspInit+0x564>)
 8002bc2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002bc6:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002bc8:	4b68      	ldr	r3, [pc, #416]	@ (8002d6c <HAL_UART_MspInit+0x564>)
 8002bca:	2240      	movs	r2, #64	@ 0x40
 8002bcc:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bce:	4b67      	ldr	r3, [pc, #412]	@ (8002d6c <HAL_UART_MspInit+0x564>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002bd4:	4b65      	ldr	r3, [pc, #404]	@ (8002d6c <HAL_UART_MspInit+0x564>)
 8002bd6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002bda:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002bdc:	4b63      	ldr	r3, [pc, #396]	@ (8002d6c <HAL_UART_MspInit+0x564>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002be2:	4b62      	ldr	r3, [pc, #392]	@ (8002d6c <HAL_UART_MspInit+0x564>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002be8:	4b60      	ldr	r3, [pc, #384]	@ (8002d6c <HAL_UART_MspInit+0x564>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002bee:	4b5f      	ldr	r3, [pc, #380]	@ (8002d6c <HAL_UART_MspInit+0x564>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002bf4:	4b5d      	ldr	r3, [pc, #372]	@ (8002d6c <HAL_UART_MspInit+0x564>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002bfa:	485c      	ldr	r0, [pc, #368]	@ (8002d6c <HAL_UART_MspInit+0x564>)
 8002bfc:	f001 f8ee 	bl	8003ddc <HAL_DMA_Init>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <HAL_UART_MspInit+0x402>
      Error_Handler();
 8002c06:	f7fe ffab 	bl	8001b60 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a57      	ldr	r2, [pc, #348]	@ (8002d6c <HAL_UART_MspInit+0x564>)
 8002c0e:	639a      	str	r2, [r3, #56]	@ 0x38
 8002c10:	4a56      	ldr	r2, [pc, #344]	@ (8002d6c <HAL_UART_MspInit+0x564>)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002c16:	2200      	movs	r2, #0
 8002c18:	2100      	movs	r1, #0
 8002c1a:	2025      	movs	r0, #37	@ 0x25
 8002c1c:	f001 f8a7 	bl	8003d6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002c20:	2025      	movs	r0, #37	@ 0x25
 8002c22:	f001 f8c0 	bl	8003da6 <HAL_NVIC_EnableIRQ>
}
 8002c26:	e1df      	b.n	8002fe8 <HAL_UART_MspInit+0x7e0>
  else if(uartHandle->Instance==USART2)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a51      	ldr	r2, [pc, #324]	@ (8002d74 <HAL_UART_MspInit+0x56c>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	f040 80ac 	bne.w	8002d8c <HAL_UART_MspInit+0x584>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c34:	2300      	movs	r3, #0
 8002c36:	61fb      	str	r3, [r7, #28]
 8002c38:	4b48      	ldr	r3, [pc, #288]	@ (8002d5c <HAL_UART_MspInit+0x554>)
 8002c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c3c:	4a47      	ldr	r2, [pc, #284]	@ (8002d5c <HAL_UART_MspInit+0x554>)
 8002c3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c42:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c44:	4b45      	ldr	r3, [pc, #276]	@ (8002d5c <HAL_UART_MspInit+0x554>)
 8002c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c4c:	61fb      	str	r3, [r7, #28]
 8002c4e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c50:	2300      	movs	r3, #0
 8002c52:	61bb      	str	r3, [r7, #24]
 8002c54:	4b41      	ldr	r3, [pc, #260]	@ (8002d5c <HAL_UART_MspInit+0x554>)
 8002c56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c58:	4a40      	ldr	r2, [pc, #256]	@ (8002d5c <HAL_UART_MspInit+0x554>)
 8002c5a:	f043 0308 	orr.w	r3, r3, #8
 8002c5e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c60:	4b3e      	ldr	r3, [pc, #248]	@ (8002d5c <HAL_UART_MspInit+0x554>)
 8002c62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c64:	f003 0308 	and.w	r3, r3, #8
 8002c68:	61bb      	str	r3, [r7, #24]
 8002c6a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = JY62_TX_Pin|JY62_RX_Pin;
 8002c6c:	2360      	movs	r3, #96	@ 0x60
 8002c6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c70:	2302      	movs	r3, #2
 8002c72:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c74:	2300      	movs	r3, #0
 8002c76:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c7c:	2307      	movs	r3, #7
 8002c7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c80:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002c84:	4619      	mov	r1, r3
 8002c86:	483c      	ldr	r0, [pc, #240]	@ (8002d78 <HAL_UART_MspInit+0x570>)
 8002c88:	f001 fcaa 	bl	80045e0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002c8c:	4b3b      	ldr	r3, [pc, #236]	@ (8002d7c <HAL_UART_MspInit+0x574>)
 8002c8e:	4a3c      	ldr	r2, [pc, #240]	@ (8002d80 <HAL_UART_MspInit+0x578>)
 8002c90:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002c92:	4b3a      	ldr	r3, [pc, #232]	@ (8002d7c <HAL_UART_MspInit+0x574>)
 8002c94:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002c98:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c9a:	4b38      	ldr	r3, [pc, #224]	@ (8002d7c <HAL_UART_MspInit+0x574>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ca0:	4b36      	ldr	r3, [pc, #216]	@ (8002d7c <HAL_UART_MspInit+0x574>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ca6:	4b35      	ldr	r3, [pc, #212]	@ (8002d7c <HAL_UART_MspInit+0x574>)
 8002ca8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002cac:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002cae:	4b33      	ldr	r3, [pc, #204]	@ (8002d7c <HAL_UART_MspInit+0x574>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002cb4:	4b31      	ldr	r3, [pc, #196]	@ (8002d7c <HAL_UART_MspInit+0x574>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002cba:	4b30      	ldr	r3, [pc, #192]	@ (8002d7c <HAL_UART_MspInit+0x574>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002cc0:	4b2e      	ldr	r3, [pc, #184]	@ (8002d7c <HAL_UART_MspInit+0x574>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002cc6:	4b2d      	ldr	r3, [pc, #180]	@ (8002d7c <HAL_UART_MspInit+0x574>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002ccc:	482b      	ldr	r0, [pc, #172]	@ (8002d7c <HAL_UART_MspInit+0x574>)
 8002cce:	f001 f885 	bl	8003ddc <HAL_DMA_Init>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d001      	beq.n	8002cdc <HAL_UART_MspInit+0x4d4>
      Error_Handler();
 8002cd8:	f7fe ff42 	bl	8001b60 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4a27      	ldr	r2, [pc, #156]	@ (8002d7c <HAL_UART_MspInit+0x574>)
 8002ce0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002ce2:	4a26      	ldr	r2, [pc, #152]	@ (8002d7c <HAL_UART_MspInit+0x574>)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002ce8:	4b26      	ldr	r3, [pc, #152]	@ (8002d84 <HAL_UART_MspInit+0x57c>)
 8002cea:	4a27      	ldr	r2, [pc, #156]	@ (8002d88 <HAL_UART_MspInit+0x580>)
 8002cec:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002cee:	4b25      	ldr	r3, [pc, #148]	@ (8002d84 <HAL_UART_MspInit+0x57c>)
 8002cf0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002cf4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002cf6:	4b23      	ldr	r3, [pc, #140]	@ (8002d84 <HAL_UART_MspInit+0x57c>)
 8002cf8:	2240      	movs	r2, #64	@ 0x40
 8002cfa:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cfc:	4b21      	ldr	r3, [pc, #132]	@ (8002d84 <HAL_UART_MspInit+0x57c>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002d02:	4b20      	ldr	r3, [pc, #128]	@ (8002d84 <HAL_UART_MspInit+0x57c>)
 8002d04:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d08:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d0a:	4b1e      	ldr	r3, [pc, #120]	@ (8002d84 <HAL_UART_MspInit+0x57c>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d10:	4b1c      	ldr	r3, [pc, #112]	@ (8002d84 <HAL_UART_MspInit+0x57c>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002d16:	4b1b      	ldr	r3, [pc, #108]	@ (8002d84 <HAL_UART_MspInit+0x57c>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002d1c:	4b19      	ldr	r3, [pc, #100]	@ (8002d84 <HAL_UART_MspInit+0x57c>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d22:	4b18      	ldr	r3, [pc, #96]	@ (8002d84 <HAL_UART_MspInit+0x57c>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002d28:	4816      	ldr	r0, [pc, #88]	@ (8002d84 <HAL_UART_MspInit+0x57c>)
 8002d2a:	f001 f857 	bl	8003ddc <HAL_DMA_Init>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d001      	beq.n	8002d38 <HAL_UART_MspInit+0x530>
      Error_Handler();
 8002d34:	f7fe ff14 	bl	8001b60 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a12      	ldr	r2, [pc, #72]	@ (8002d84 <HAL_UART_MspInit+0x57c>)
 8002d3c:	639a      	str	r2, [r3, #56]	@ 0x38
 8002d3e:	4a11      	ldr	r2, [pc, #68]	@ (8002d84 <HAL_UART_MspInit+0x57c>)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002d44:	2200      	movs	r2, #0
 8002d46:	2100      	movs	r1, #0
 8002d48:	2026      	movs	r0, #38	@ 0x26
 8002d4a:	f001 f810 	bl	8003d6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002d4e:	2026      	movs	r0, #38	@ 0x26
 8002d50:	f001 f829 	bl	8003da6 <HAL_NVIC_EnableIRQ>
}
 8002d54:	e148      	b.n	8002fe8 <HAL_UART_MspInit+0x7e0>
 8002d56:	bf00      	nop
 8002d58:	40011000 	.word	0x40011000
 8002d5c:	40023800 	.word	0x40023800
 8002d60:	40020000 	.word	0x40020000
 8002d64:	20000d64 	.word	0x20000d64
 8002d68:	40026440 	.word	0x40026440
 8002d6c:	20000dc4 	.word	0x20000dc4
 8002d70:	400264b8 	.word	0x400264b8
 8002d74:	40004400 	.word	0x40004400
 8002d78:	40020c00 	.word	0x40020c00
 8002d7c:	20000e24 	.word	0x20000e24
 8002d80:	40026088 	.word	0x40026088
 8002d84:	20000e84 	.word	0x20000e84
 8002d88:	400260a0 	.word	0x400260a0
  else if(uartHandle->Instance==USART3)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a97      	ldr	r2, [pc, #604]	@ (8002ff0 <HAL_UART_MspInit+0x7e8>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	f040 8092 	bne.w	8002ebc <HAL_UART_MspInit+0x6b4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002d98:	2300      	movs	r3, #0
 8002d9a:	617b      	str	r3, [r7, #20]
 8002d9c:	4b95      	ldr	r3, [pc, #596]	@ (8002ff4 <HAL_UART_MspInit+0x7ec>)
 8002d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da0:	4a94      	ldr	r2, [pc, #592]	@ (8002ff4 <HAL_UART_MspInit+0x7ec>)
 8002da2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002da6:	6413      	str	r3, [r2, #64]	@ 0x40
 8002da8:	4b92      	ldr	r3, [pc, #584]	@ (8002ff4 <HAL_UART_MspInit+0x7ec>)
 8002daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002db0:	617b      	str	r3, [r7, #20]
 8002db2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002db4:	2300      	movs	r3, #0
 8002db6:	613b      	str	r3, [r7, #16]
 8002db8:	4b8e      	ldr	r3, [pc, #568]	@ (8002ff4 <HAL_UART_MspInit+0x7ec>)
 8002dba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dbc:	4a8d      	ldr	r2, [pc, #564]	@ (8002ff4 <HAL_UART_MspInit+0x7ec>)
 8002dbe:	f043 0302 	orr.w	r3, r3, #2
 8002dc2:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dc4:	4b8b      	ldr	r3, [pc, #556]	@ (8002ff4 <HAL_UART_MspInit+0x7ec>)
 8002dc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dc8:	f003 0302 	and.w	r3, r3, #2
 8002dcc:	613b      	str	r3, [r7, #16]
 8002dce:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002dd0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002dd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dd6:	2302      	movs	r3, #2
 8002dd8:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dde:	2303      	movs	r3, #3
 8002de0:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002de2:	2307      	movs	r3, #7
 8002de4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002de6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002dea:	4619      	mov	r1, r3
 8002dec:	4882      	ldr	r0, [pc, #520]	@ (8002ff8 <HAL_UART_MspInit+0x7f0>)
 8002dee:	f001 fbf7 	bl	80045e0 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002df2:	4b82      	ldr	r3, [pc, #520]	@ (8002ffc <HAL_UART_MspInit+0x7f4>)
 8002df4:	4a82      	ldr	r2, [pc, #520]	@ (8003000 <HAL_UART_MspInit+0x7f8>)
 8002df6:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002df8:	4b80      	ldr	r3, [pc, #512]	@ (8002ffc <HAL_UART_MspInit+0x7f4>)
 8002dfa:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002dfe:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e00:	4b7e      	ldr	r3, [pc, #504]	@ (8002ffc <HAL_UART_MspInit+0x7f4>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e06:	4b7d      	ldr	r3, [pc, #500]	@ (8002ffc <HAL_UART_MspInit+0x7f4>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002e0c:	4b7b      	ldr	r3, [pc, #492]	@ (8002ffc <HAL_UART_MspInit+0x7f4>)
 8002e0e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002e12:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e14:	4b79      	ldr	r3, [pc, #484]	@ (8002ffc <HAL_UART_MspInit+0x7f4>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e1a:	4b78      	ldr	r3, [pc, #480]	@ (8002ffc <HAL_UART_MspInit+0x7f4>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002e20:	4b76      	ldr	r3, [pc, #472]	@ (8002ffc <HAL_UART_MspInit+0x7f4>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002e26:	4b75      	ldr	r3, [pc, #468]	@ (8002ffc <HAL_UART_MspInit+0x7f4>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e2c:	4b73      	ldr	r3, [pc, #460]	@ (8002ffc <HAL_UART_MspInit+0x7f4>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002e32:	4872      	ldr	r0, [pc, #456]	@ (8002ffc <HAL_UART_MspInit+0x7f4>)
 8002e34:	f000 ffd2 	bl	8003ddc <HAL_DMA_Init>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d001      	beq.n	8002e42 <HAL_UART_MspInit+0x63a>
      Error_Handler();
 8002e3e:	f7fe fe8f 	bl	8001b60 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a6d      	ldr	r2, [pc, #436]	@ (8002ffc <HAL_UART_MspInit+0x7f4>)
 8002e46:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002e48:	4a6c      	ldr	r2, [pc, #432]	@ (8002ffc <HAL_UART_MspInit+0x7f4>)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8002e4e:	4b6d      	ldr	r3, [pc, #436]	@ (8003004 <HAL_UART_MspInit+0x7fc>)
 8002e50:	4a6d      	ldr	r2, [pc, #436]	@ (8003008 <HAL_UART_MspInit+0x800>)
 8002e52:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8002e54:	4b6b      	ldr	r3, [pc, #428]	@ (8003004 <HAL_UART_MspInit+0x7fc>)
 8002e56:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002e5a:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e5c:	4b69      	ldr	r3, [pc, #420]	@ (8003004 <HAL_UART_MspInit+0x7fc>)
 8002e5e:	2240      	movs	r2, #64	@ 0x40
 8002e60:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e62:	4b68      	ldr	r3, [pc, #416]	@ (8003004 <HAL_UART_MspInit+0x7fc>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002e68:	4b66      	ldr	r3, [pc, #408]	@ (8003004 <HAL_UART_MspInit+0x7fc>)
 8002e6a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002e6e:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e70:	4b64      	ldr	r3, [pc, #400]	@ (8003004 <HAL_UART_MspInit+0x7fc>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e76:	4b63      	ldr	r3, [pc, #396]	@ (8003004 <HAL_UART_MspInit+0x7fc>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002e7c:	4b61      	ldr	r3, [pc, #388]	@ (8003004 <HAL_UART_MspInit+0x7fc>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002e82:	4b60      	ldr	r3, [pc, #384]	@ (8003004 <HAL_UART_MspInit+0x7fc>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e88:	4b5e      	ldr	r3, [pc, #376]	@ (8003004 <HAL_UART_MspInit+0x7fc>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002e8e:	485d      	ldr	r0, [pc, #372]	@ (8003004 <HAL_UART_MspInit+0x7fc>)
 8002e90:	f000 ffa4 	bl	8003ddc <HAL_DMA_Init>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <HAL_UART_MspInit+0x696>
      Error_Handler();
 8002e9a:	f7fe fe61 	bl	8001b60 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a58      	ldr	r2, [pc, #352]	@ (8003004 <HAL_UART_MspInit+0x7fc>)
 8002ea2:	639a      	str	r2, [r3, #56]	@ 0x38
 8002ea4:	4a57      	ldr	r2, [pc, #348]	@ (8003004 <HAL_UART_MspInit+0x7fc>)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002eaa:	2200      	movs	r2, #0
 8002eac:	2100      	movs	r1, #0
 8002eae:	2027      	movs	r0, #39	@ 0x27
 8002eb0:	f000 ff5d 	bl	8003d6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002eb4:	2027      	movs	r0, #39	@ 0x27
 8002eb6:	f000 ff76 	bl	8003da6 <HAL_NVIC_EnableIRQ>
}
 8002eba:	e095      	b.n	8002fe8 <HAL_UART_MspInit+0x7e0>
  else if(uartHandle->Instance==USART6)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a52      	ldr	r2, [pc, #328]	@ (800300c <HAL_UART_MspInit+0x804>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	f040 8090 	bne.w	8002fe8 <HAL_UART_MspInit+0x7e0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002ec8:	2300      	movs	r3, #0
 8002eca:	60fb      	str	r3, [r7, #12]
 8002ecc:	4b49      	ldr	r3, [pc, #292]	@ (8002ff4 <HAL_UART_MspInit+0x7ec>)
 8002ece:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ed0:	4a48      	ldr	r2, [pc, #288]	@ (8002ff4 <HAL_UART_MspInit+0x7ec>)
 8002ed2:	f043 0320 	orr.w	r3, r3, #32
 8002ed6:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ed8:	4b46      	ldr	r3, [pc, #280]	@ (8002ff4 <HAL_UART_MspInit+0x7ec>)
 8002eda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002edc:	f003 0320 	and.w	r3, r3, #32
 8002ee0:	60fb      	str	r3, [r7, #12]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	60bb      	str	r3, [r7, #8]
 8002ee8:	4b42      	ldr	r3, [pc, #264]	@ (8002ff4 <HAL_UART_MspInit+0x7ec>)
 8002eea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eec:	4a41      	ldr	r2, [pc, #260]	@ (8002ff4 <HAL_UART_MspInit+0x7ec>)
 8002eee:	f043 0304 	orr.w	r3, r3, #4
 8002ef2:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ef4:	4b3f      	ldr	r3, [pc, #252]	@ (8002ff4 <HAL_UART_MspInit+0x7ec>)
 8002ef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef8:	f003 0304 	and.w	r3, r3, #4
 8002efc:	60bb      	str	r3, [r7, #8]
 8002efe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002f00:	23c0      	movs	r3, #192	@ 0xc0
 8002f02:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f04:	2302      	movs	r3, #2
 8002f06:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002f10:	2308      	movs	r3, #8
 8002f12:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f14:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002f18:	4619      	mov	r1, r3
 8002f1a:	483d      	ldr	r0, [pc, #244]	@ (8003010 <HAL_UART_MspInit+0x808>)
 8002f1c:	f001 fb60 	bl	80045e0 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8002f20:	4b3c      	ldr	r3, [pc, #240]	@ (8003014 <HAL_UART_MspInit+0x80c>)
 8002f22:	4a3d      	ldr	r2, [pc, #244]	@ (8003018 <HAL_UART_MspInit+0x810>)
 8002f24:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8002f26:	4b3b      	ldr	r3, [pc, #236]	@ (8003014 <HAL_UART_MspInit+0x80c>)
 8002f28:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8002f2c:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f2e:	4b39      	ldr	r3, [pc, #228]	@ (8003014 <HAL_UART_MspInit+0x80c>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f34:	4b37      	ldr	r3, [pc, #220]	@ (8003014 <HAL_UART_MspInit+0x80c>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002f3a:	4b36      	ldr	r3, [pc, #216]	@ (8003014 <HAL_UART_MspInit+0x80c>)
 8002f3c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002f40:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f42:	4b34      	ldr	r3, [pc, #208]	@ (8003014 <HAL_UART_MspInit+0x80c>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f48:	4b32      	ldr	r3, [pc, #200]	@ (8003014 <HAL_UART_MspInit+0x80c>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8002f4e:	4b31      	ldr	r3, [pc, #196]	@ (8003014 <HAL_UART_MspInit+0x80c>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002f54:	4b2f      	ldr	r3, [pc, #188]	@ (8003014 <HAL_UART_MspInit+0x80c>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f5a:	4b2e      	ldr	r3, [pc, #184]	@ (8003014 <HAL_UART_MspInit+0x80c>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8002f60:	482c      	ldr	r0, [pc, #176]	@ (8003014 <HAL_UART_MspInit+0x80c>)
 8002f62:	f000 ff3b 	bl	8003ddc <HAL_DMA_Init>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d001      	beq.n	8002f70 <HAL_UART_MspInit+0x768>
      Error_Handler();
 8002f6c:	f7fe fdf8 	bl	8001b60 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4a28      	ldr	r2, [pc, #160]	@ (8003014 <HAL_UART_MspInit+0x80c>)
 8002f74:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002f76:	4a27      	ldr	r2, [pc, #156]	@ (8003014 <HAL_UART_MspInit+0x80c>)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8002f7c:	4b27      	ldr	r3, [pc, #156]	@ (800301c <HAL_UART_MspInit+0x814>)
 8002f7e:	4a28      	ldr	r2, [pc, #160]	@ (8003020 <HAL_UART_MspInit+0x818>)
 8002f80:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8002f82:	4b26      	ldr	r3, [pc, #152]	@ (800301c <HAL_UART_MspInit+0x814>)
 8002f84:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8002f88:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f8a:	4b24      	ldr	r3, [pc, #144]	@ (800301c <HAL_UART_MspInit+0x814>)
 8002f8c:	2240      	movs	r2, #64	@ 0x40
 8002f8e:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f90:	4b22      	ldr	r3, [pc, #136]	@ (800301c <HAL_UART_MspInit+0x814>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f96:	4b21      	ldr	r3, [pc, #132]	@ (800301c <HAL_UART_MspInit+0x814>)
 8002f98:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002f9c:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f9e:	4b1f      	ldr	r3, [pc, #124]	@ (800301c <HAL_UART_MspInit+0x814>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002fa4:	4b1d      	ldr	r3, [pc, #116]	@ (800301c <HAL_UART_MspInit+0x814>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8002faa:	4b1c      	ldr	r3, [pc, #112]	@ (800301c <HAL_UART_MspInit+0x814>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002fb0:	4b1a      	ldr	r3, [pc, #104]	@ (800301c <HAL_UART_MspInit+0x814>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002fb6:	4b19      	ldr	r3, [pc, #100]	@ (800301c <HAL_UART_MspInit+0x814>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8002fbc:	4817      	ldr	r0, [pc, #92]	@ (800301c <HAL_UART_MspInit+0x814>)
 8002fbe:	f000 ff0d 	bl	8003ddc <HAL_DMA_Init>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d001      	beq.n	8002fcc <HAL_UART_MspInit+0x7c4>
      Error_Handler();
 8002fc8:	f7fe fdca 	bl	8001b60 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4a13      	ldr	r2, [pc, #76]	@ (800301c <HAL_UART_MspInit+0x814>)
 8002fd0:	639a      	str	r2, [r3, #56]	@ 0x38
 8002fd2:	4a12      	ldr	r2, [pc, #72]	@ (800301c <HAL_UART_MspInit+0x814>)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002fd8:	2200      	movs	r2, #0
 8002fda:	2100      	movs	r1, #0
 8002fdc:	2047      	movs	r0, #71	@ 0x47
 8002fde:	f000 fec6 	bl	8003d6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002fe2:	2047      	movs	r0, #71	@ 0x47
 8002fe4:	f000 fedf 	bl	8003da6 <HAL_NVIC_EnableIRQ>
}
 8002fe8:	bf00      	nop
 8002fea:	3750      	adds	r7, #80	@ 0x50
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	40004800 	.word	0x40004800
 8002ff4:	40023800 	.word	0x40023800
 8002ff8:	40020400 	.word	0x40020400
 8002ffc:	20000ee4 	.word	0x20000ee4
 8003000:	40026028 	.word	0x40026028
 8003004:	20000f44 	.word	0x20000f44
 8003008:	40026058 	.word	0x40026058
 800300c:	40011400 	.word	0x40011400
 8003010:	40020800 	.word	0x40020800
 8003014:	20000fa4 	.word	0x20000fa4
 8003018:	40026428 	.word	0x40026428
 800301c:	20001004 	.word	0x20001004
 8003020:	400264a0 	.word	0x400264a0

08003024 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003024:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800305c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003028:	f7fe ff86 	bl	8001f38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800302c:	480c      	ldr	r0, [pc, #48]	@ (8003060 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800302e:	490d      	ldr	r1, [pc, #52]	@ (8003064 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003030:	4a0d      	ldr	r2, [pc, #52]	@ (8003068 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003032:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003034:	e002      	b.n	800303c <LoopCopyDataInit>

08003036 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003036:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003038:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800303a:	3304      	adds	r3, #4

0800303c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800303c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800303e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003040:	d3f9      	bcc.n	8003036 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003042:	4a0a      	ldr	r2, [pc, #40]	@ (800306c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003044:	4c0a      	ldr	r4, [pc, #40]	@ (8003070 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003046:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003048:	e001      	b.n	800304e <LoopFillZerobss>

0800304a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800304a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800304c:	3204      	adds	r2, #4

0800304e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800304e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003050:	d3fb      	bcc.n	800304a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003052:	f006 f91f 	bl	8009294 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003056:	f7fe f99f 	bl	8001398 <main>
  bx  lr    
 800305a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800305c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003060:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003064:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 8003068:	0800dd44 	.word	0x0800dd44
  ldr r2, =_sbss
 800306c:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8003070:	20001644 	.word	0x20001644

08003074 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003074:	e7fe      	b.n	8003074 <ADC_IRQHandler>

08003076 <PID_Angle_init>:
#include "Angle_PID.h"

void PID_Angle_init(PID_Angle *pid,float target_val,float Kp,float Ki,float Kd)
{
 8003076:	b480      	push	{r7}
 8003078:	b087      	sub	sp, #28
 800307a:	af00      	add	r7, sp, #0
 800307c:	6178      	str	r0, [r7, #20]
 800307e:	ed87 0a04 	vstr	s0, [r7, #16]
 8003082:	edc7 0a03 	vstr	s1, [r7, #12]
 8003086:	ed87 1a02 	vstr	s2, [r7, #8]
 800308a:	edc7 1a01 	vstr	s3, [r7, #4]
	pid->target_val=target_val;
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	693a      	ldr	r2, [r7, #16]
 8003092:	619a      	str	r2, [r3, #24]
	pid->Kp = Kp;
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	601a      	str	r2, [r3, #0]
	pid->Ki = Ki;
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	68ba      	ldr	r2, [r7, #8]
 800309e:	605a      	str	r2, [r3, #4]
	pid->Kd = Kd;
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	609a      	str	r2, [r3, #8]


}
 80030a6:	bf00      	nop
 80030a8:	371c      	adds	r7, #28
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
	...

080030b4 <PID_Angle_realize>:


void PID_Angle_realize(PID_Angle *pid, float CurrentAngle) {
 80030b4:	b480      	push	{r7}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	ed87 0a00 	vstr	s0, [r7]
    // 1. 计算当前误差
    pid->Error = pid->target_val - CurrentAngle;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	ed93 7a06 	vldr	s14, [r3, #24]
 80030c6:	edd7 7a00 	vldr	s15, [r7]
 80030ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	edc3 7a03 	vstr	s15, [r3, #12]

    // 2. 计算积分项 (带积分限幅，防止积分饱和)
    pid->Integral += pid->Error;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	ed93 7a05 	vldr	s14, [r3, #20]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	edd3 7a03 	vldr	s15, [r3, #12]
 80030e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	edc3 7a05 	vstr	s15, [r3, #20]
    if (pid->Integral > 300) pid->Integral = 300;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	edd3 7a05 	vldr	s15, [r3, #20]
 80030f0:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80031b8 <PID_Angle_realize+0x104>
 80030f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030fc:	dd02      	ble.n	8003104 <PID_Angle_realize+0x50>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a2e      	ldr	r2, [pc, #184]	@ (80031bc <PID_Angle_realize+0x108>)
 8003102:	615a      	str	r2, [r3, #20]
    if (pid->Integral < -300) pid->Integral = -300;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	edd3 7a05 	vldr	s15, [r3, #20]
 800310a:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 80031c0 <PID_Angle_realize+0x10c>
 800310e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003116:	d502      	bpl.n	800311e <PID_Angle_realize+0x6a>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	4a2a      	ldr	r2, [pc, #168]	@ (80031c4 <PID_Angle_realize+0x110>)
 800311c:	615a      	str	r2, [r3, #20]

    // 3. 计算微分项
    float derivative = pid->Error - pid->LastError;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	ed93 7a03 	vldr	s14, [r3, #12]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	edd3 7a04 	vldr	s15, [r3, #16]
 800312a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800312e:	edc7 7a03 	vstr	s15, [r7, #12]

    // 4. 计算总输出
    pid->output_val = (pid->Kp * pid->Error) +
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	ed93 7a00 	vldr	s14, [r3]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	edd3 7a03 	vldr	s15, [r3, #12]
 800313e:	ee27 7a27 	vmul.f32	s14, s14, s15
                  (pid->Ki * pid->Integral) +
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	edd3 6a01 	vldr	s13, [r3, #4]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	edd3 7a05 	vldr	s15, [r3, #20]
 800314e:	ee66 7aa7 	vmul.f32	s15, s13, s15
    pid->output_val = (pid->Kp * pid->Error) +
 8003152:	ee37 7a27 	vadd.f32	s14, s14, s15
                  (pid->Kd * derivative);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	edd3 6a02 	vldr	s13, [r3, #8]
 800315c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003160:	ee66 7aa7 	vmul.f32	s15, s13, s15
                  (pid->Ki * pid->Integral) +
 8003164:	ee77 7a27 	vadd.f32	s15, s14, s15
    pid->output_val = (pid->Kp * pid->Error) +
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	edc3 7a07 	vstr	s15, [r3, #28]
    if (pid->output_val > 300) pid->output_val = 300;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	edd3 7a07 	vldr	s15, [r3, #28]
 8003174:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80031b8 <PID_Angle_realize+0x104>
 8003178:	eef4 7ac7 	vcmpe.f32	s15, s14
 800317c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003180:	dd02      	ble.n	8003188 <PID_Angle_realize+0xd4>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a0d      	ldr	r2, [pc, #52]	@ (80031bc <PID_Angle_realize+0x108>)
 8003186:	61da      	str	r2, [r3, #28]
    if (pid->output_val < -500) pid->output_val = -300;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	edd3 7a07 	vldr	s15, [r3, #28]
 800318e:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80031c8 <PID_Angle_realize+0x114>
 8003192:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800319a:	d502      	bpl.n	80031a2 <PID_Angle_realize+0xee>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	4a09      	ldr	r2, [pc, #36]	@ (80031c4 <PID_Angle_realize+0x110>)
 80031a0:	61da      	str	r2, [r3, #28]
    // 5. 更新上次误差
    pid->LastError = pid->Error;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	68da      	ldr	r2, [r3, #12]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	611a      	str	r2, [r3, #16]
}
 80031aa:	bf00      	nop
 80031ac:	3714      	adds	r7, #20
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop
 80031b8:	43960000 	.word	0x43960000
 80031bc:	43960000 	.word	0x43960000
 80031c0:	c3960000 	.word	0xc3960000
 80031c4:	c3960000 	.word	0xc3960000
 80031c8:	c3fa0000 	.word	0xc3fa0000

080031cc <PID_Trace_init>:


}

void PID_Trace_init(PID_Trace *pid,float target_val,float Kp,float Ki,float Kd)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b087      	sub	sp, #28
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6178      	str	r0, [r7, #20]
 80031d4:	ed87 0a04 	vstr	s0, [r7, #16]
 80031d8:	edc7 0a03 	vstr	s1, [r7, #12]
 80031dc:	ed87 1a02 	vstr	s2, [r7, #8]
 80031e0:	edc7 1a01 	vstr	s3, [r7, #4]
	pid->target_val=target_val;
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	693a      	ldr	r2, [r7, #16]
 80031e8:	619a      	str	r2, [r3, #24]
	pid->Kp = Kp;
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	68fa      	ldr	r2, [r7, #12]
 80031ee:	601a      	str	r2, [r3, #0]
	pid->Ki = Ki;
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	68ba      	ldr	r2, [r7, #8]
 80031f4:	605a      	str	r2, [r3, #4]
	pid->Kd = Kd;
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	609a      	str	r2, [r3, #8]


}
 80031fc:	bf00      	nop
 80031fe:	371c      	adds	r7, #28
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <Trace_error>:

int Trace_error(void) {
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
//	float Error = 222;
    int Error = (-3 * Data_Trace[7])+(-2 * Data_Trace[6]) + (-1 * Data_Trace[5]) + (0 * Data_Trace[4]) + (0* Data_Trace[3]) + (1 * Data_Trace[2])+ (2 * Data_Trace[1])+ (3 * Data_Trace[0]);
 800320e:	4b13      	ldr	r3, [pc, #76]	@ (800325c <Trace_error+0x54>)
 8003210:	79db      	ldrb	r3, [r3, #7]
 8003212:	461a      	mov	r2, r3
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	1ad2      	subs	r2, r2, r3
 8003218:	4b10      	ldr	r3, [pc, #64]	@ (800325c <Trace_error+0x54>)
 800321a:	799b      	ldrb	r3, [r3, #6]
 800321c:	4619      	mov	r1, r3
 800321e:	460b      	mov	r3, r1
 8003220:	07db      	lsls	r3, r3, #31
 8003222:	1a5b      	subs	r3, r3, r1
 8003224:	005b      	lsls	r3, r3, #1
 8003226:	4413      	add	r3, r2
 8003228:	4a0c      	ldr	r2, [pc, #48]	@ (800325c <Trace_error+0x54>)
 800322a:	7952      	ldrb	r2, [r2, #5]
 800322c:	1a9b      	subs	r3, r3, r2
 800322e:	4a0b      	ldr	r2, [pc, #44]	@ (800325c <Trace_error+0x54>)
 8003230:	7892      	ldrb	r2, [r2, #2]
 8003232:	441a      	add	r2, r3
 8003234:	4b09      	ldr	r3, [pc, #36]	@ (800325c <Trace_error+0x54>)
 8003236:	785b      	ldrb	r3, [r3, #1]
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	441a      	add	r2, r3
 800323c:	4b07      	ldr	r3, [pc, #28]	@ (800325c <Trace_error+0x54>)
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	4619      	mov	r1, r3
 8003242:	460b      	mov	r3, r1
 8003244:	005b      	lsls	r3, r3, #1
 8003246:	440b      	add	r3, r1
 8003248:	4413      	add	r3, r2
 800324a:	607b      	str	r3, [r7, #4]
    return Error;
 800324c:	687b      	ldr	r3, [r7, #4]

}
 800324e:	4618      	mov	r0, r3
 8003250:	370c      	adds	r7, #12
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	20001064 	.word	0x20001064

08003260 <PID_Trace_realize>:
//    return Error;
//
//}


void PID_Trace_realize(PID_Trace *pid, float CurrentValue) {
 8003260:	b480      	push	{r7}
 8003262:	b085      	sub	sp, #20
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	ed87 0a00 	vstr	s0, [r7]
    // 1. 计算当前误差
    pid->Error = pid->target_val - CurrentValue;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	ed93 7a06 	vldr	s14, [r3, #24]
 8003272:	edd7 7a00 	vldr	s15, [r7]
 8003276:	ee77 7a67 	vsub.f32	s15, s14, s15
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	edc3 7a03 	vstr	s15, [r3, #12]

    // 2. 计算积分项 (带积分限幅，防止积分饱和)
    pid->Integral += pid->Error;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	ed93 7a05 	vldr	s14, [r3, #20]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	edd3 7a03 	vldr	s15, [r3, #12]
 800328c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	edc3 7a05 	vstr	s15, [r3, #20]
    if (pid->Integral > 500) pid->Integral = 500;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	edd3 7a05 	vldr	s15, [r3, #20]
 800329c:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8003364 <PID_Trace_realize+0x104>
 80032a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032a8:	dd02      	ble.n	80032b0 <PID_Trace_realize+0x50>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a2e      	ldr	r2, [pc, #184]	@ (8003368 <PID_Trace_realize+0x108>)
 80032ae:	615a      	str	r2, [r3, #20]
    if (pid->Integral < -500) pid->Integral = -500;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	edd3 7a05 	vldr	s15, [r3, #20]
 80032b6:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 800336c <PID_Trace_realize+0x10c>
 80032ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032c2:	d502      	bpl.n	80032ca <PID_Trace_realize+0x6a>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	4a2a      	ldr	r2, [pc, #168]	@ (8003370 <PID_Trace_realize+0x110>)
 80032c8:	615a      	str	r2, [r3, #20]

    // 3. 计算微分项
    float derivative = pid->Error - pid->LastError;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	ed93 7a03 	vldr	s14, [r3, #12]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	edd3 7a04 	vldr	s15, [r3, #16]
 80032d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032da:	edc7 7a03 	vstr	s15, [r7, #12]

    // 4. 计算总输出
    pid->output_val = (pid->Kp * pid->Error) +
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	ed93 7a00 	vldr	s14, [r3]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	edd3 7a03 	vldr	s15, [r3, #12]
 80032ea:	ee27 7a27 	vmul.f32	s14, s14, s15
                  (pid->Ki * pid->Integral) +
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	edd3 6a01 	vldr	s13, [r3, #4]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	edd3 7a05 	vldr	s15, [r3, #20]
 80032fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
    pid->output_val = (pid->Kp * pid->Error) +
 80032fe:	ee37 7a27 	vadd.f32	s14, s14, s15
                  (pid->Kd * derivative);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	edd3 6a02 	vldr	s13, [r3, #8]
 8003308:	edd7 7a03 	vldr	s15, [r7, #12]
 800330c:	ee66 7aa7 	vmul.f32	s15, s13, s15
                  (pid->Ki * pid->Integral) +
 8003310:	ee77 7a27 	vadd.f32	s15, s14, s15
    pid->output_val = (pid->Kp * pid->Error) +
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	edc3 7a07 	vstr	s15, [r3, #28]
    if (pid->output_val > 500) pid->output_val = 500;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	edd3 7a07 	vldr	s15, [r3, #28]
 8003320:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8003364 <PID_Trace_realize+0x104>
 8003324:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800332c:	dd02      	ble.n	8003334 <PID_Trace_realize+0xd4>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a0d      	ldr	r2, [pc, #52]	@ (8003368 <PID_Trace_realize+0x108>)
 8003332:	61da      	str	r2, [r3, #28]
    if (pid->output_val < -500) pid->output_val = -500;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	edd3 7a07 	vldr	s15, [r3, #28]
 800333a:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800336c <PID_Trace_realize+0x10c>
 800333e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003346:	d502      	bpl.n	800334e <PID_Trace_realize+0xee>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a09      	ldr	r2, [pc, #36]	@ (8003370 <PID_Trace_realize+0x110>)
 800334c:	61da      	str	r2, [r3, #28]
    // 5. 更新上次误差
    pid->LastError = pid->Error;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	68da      	ldr	r2, [r3, #12]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	611a      	str	r2, [r3, #16]
}
 8003356:	bf00      	nop
 8003358:	3714      	adds	r7, #20
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	43fa0000 	.word	0x43fa0000
 8003368:	43fa0000 	.word	0x43fa0000
 800336c:	c3fa0000 	.word	0xc3fa0000
 8003370:	c3fa0000 	.word	0xc3fa0000

08003374 <OLED_Send>:
 * @param len 要发送的数据长度
 * @return None
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他平台时应根据实际情况修改此函数
 */
void OLED_Send(uint8_t *data, uint8_t len)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af02      	add	r7, sp, #8
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	460b      	mov	r3, r1
 800337e:	70fb      	strb	r3, [r7, #3]
  HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, data, len, HAL_MAX_DELAY);
 8003380:	78fb      	ldrb	r3, [r7, #3]
 8003382:	b29b      	uxth	r3, r3
 8003384:	f04f 32ff 	mov.w	r2, #4294967295
 8003388:	9200      	str	r2, [sp, #0]
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	2178      	movs	r1, #120	@ 0x78
 800338e:	4803      	ldr	r0, [pc, #12]	@ (800339c <OLED_Send+0x28>)
 8003390:	f001 fc20 	bl	8004bd4 <HAL_I2C_Master_Transmit>
}
 8003394:	bf00      	nop
 8003396:	3708      	adds	r7, #8
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	20000224 	.word	0x20000224

080033a0 <OLED_SendCmd>:

/**
 * @brief 向OLED发送指令
 */
void OLED_SendCmd(uint8_t cmd)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	4603      	mov	r3, r0
 80033a8:	71fb      	strb	r3, [r7, #7]
  static uint8_t sendBuffer[2] = {0};
  sendBuffer[1] = cmd;
 80033aa:	4a05      	ldr	r2, [pc, #20]	@ (80033c0 <OLED_SendCmd+0x20>)
 80033ac:	79fb      	ldrb	r3, [r7, #7]
 80033ae:	7053      	strb	r3, [r2, #1]
  OLED_Send(sendBuffer, 2);
 80033b0:	2102      	movs	r1, #2
 80033b2:	4803      	ldr	r0, [pc, #12]	@ (80033c0 <OLED_SendCmd+0x20>)
 80033b4:	f7ff ffde 	bl	8003374 <OLED_Send>
}
 80033b8:	bf00      	nop
 80033ba:	3708      	adds	r7, #8
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	2000146c 	.word	0x2000146c

080033c4 <OLED_Init>:
/**
 * @brief 初始化OLED (SSD1306)
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_Init()
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	af00      	add	r7, sp, #0
  OLED_SendCmd(0xAE); /*关闭显示 display off*/
 80033c8:	20ae      	movs	r0, #174	@ 0xae
 80033ca:	f7ff ffe9 	bl	80033a0 <OLED_SendCmd>

  OLED_SendCmd(0x20);
 80033ce:	2020      	movs	r0, #32
 80033d0:	f7ff ffe6 	bl	80033a0 <OLED_SendCmd>
  OLED_SendCmd(0x10);
 80033d4:	2010      	movs	r0, #16
 80033d6:	f7ff ffe3 	bl	80033a0 <OLED_SendCmd>

  OLED_SendCmd(0xB0);
 80033da:	20b0      	movs	r0, #176	@ 0xb0
 80033dc:	f7ff ffe0 	bl	80033a0 <OLED_SendCmd>

  OLED_SendCmd(0xC8);
 80033e0:	20c8      	movs	r0, #200	@ 0xc8
 80033e2:	f7ff ffdd 	bl	80033a0 <OLED_SendCmd>

  OLED_SendCmd(0x00);
 80033e6:	2000      	movs	r0, #0
 80033e8:	f7ff ffda 	bl	80033a0 <OLED_SendCmd>
  OLED_SendCmd(0x10);
 80033ec:	2010      	movs	r0, #16
 80033ee:	f7ff ffd7 	bl	80033a0 <OLED_SendCmd>

  OLED_SendCmd(0x40);
 80033f2:	2040      	movs	r0, #64	@ 0x40
 80033f4:	f7ff ffd4 	bl	80033a0 <OLED_SendCmd>

  OLED_SendCmd(0x81);
 80033f8:	2081      	movs	r0, #129	@ 0x81
 80033fa:	f7ff ffd1 	bl	80033a0 <OLED_SendCmd>

  OLED_SendCmd(0xDF);
 80033fe:	20df      	movs	r0, #223	@ 0xdf
 8003400:	f7ff ffce 	bl	80033a0 <OLED_SendCmd>
  OLED_SendCmd(0xA1);
 8003404:	20a1      	movs	r0, #161	@ 0xa1
 8003406:	f7ff ffcb 	bl	80033a0 <OLED_SendCmd>

  OLED_SendCmd(0xA6);
 800340a:	20a6      	movs	r0, #166	@ 0xa6
 800340c:	f7ff ffc8 	bl	80033a0 <OLED_SendCmd>
  OLED_SendCmd(0xA8);
 8003410:	20a8      	movs	r0, #168	@ 0xa8
 8003412:	f7ff ffc5 	bl	80033a0 <OLED_SendCmd>

  OLED_SendCmd(0x3F);
 8003416:	203f      	movs	r0, #63	@ 0x3f
 8003418:	f7ff ffc2 	bl	80033a0 <OLED_SendCmd>

  OLED_SendCmd(0xA4);
 800341c:	20a4      	movs	r0, #164	@ 0xa4
 800341e:	f7ff ffbf 	bl	80033a0 <OLED_SendCmd>

  OLED_SendCmd(0xD3);
 8003422:	20d3      	movs	r0, #211	@ 0xd3
 8003424:	f7ff ffbc 	bl	80033a0 <OLED_SendCmd>
  OLED_SendCmd(0x00);
 8003428:	2000      	movs	r0, #0
 800342a:	f7ff ffb9 	bl	80033a0 <OLED_SendCmd>

  OLED_SendCmd(0xD5);
 800342e:	20d5      	movs	r0, #213	@ 0xd5
 8003430:	f7ff ffb6 	bl	80033a0 <OLED_SendCmd>
  OLED_SendCmd(0xF0);
 8003434:	20f0      	movs	r0, #240	@ 0xf0
 8003436:	f7ff ffb3 	bl	80033a0 <OLED_SendCmd>

  OLED_SendCmd(0xD9);
 800343a:	20d9      	movs	r0, #217	@ 0xd9
 800343c:	f7ff ffb0 	bl	80033a0 <OLED_SendCmd>
  OLED_SendCmd(0x22);
 8003440:	2022      	movs	r0, #34	@ 0x22
 8003442:	f7ff ffad 	bl	80033a0 <OLED_SendCmd>

  OLED_SendCmd(0xDA);
 8003446:	20da      	movs	r0, #218	@ 0xda
 8003448:	f7ff ffaa 	bl	80033a0 <OLED_SendCmd>
  OLED_SendCmd(0x12);
 800344c:	2012      	movs	r0, #18
 800344e:	f7ff ffa7 	bl	80033a0 <OLED_SendCmd>

  OLED_SendCmd(0xDB);
 8003452:	20db      	movs	r0, #219	@ 0xdb
 8003454:	f7ff ffa4 	bl	80033a0 <OLED_SendCmd>
  OLED_SendCmd(0x20);
 8003458:	2020      	movs	r0, #32
 800345a:	f7ff ffa1 	bl	80033a0 <OLED_SendCmd>

  OLED_SendCmd(0x8D);
 800345e:	208d      	movs	r0, #141	@ 0x8d
 8003460:	f7ff ff9e 	bl	80033a0 <OLED_SendCmd>
  OLED_SendCmd(0x14);
 8003464:	2014      	movs	r0, #20
 8003466:	f7ff ff9b 	bl	80033a0 <OLED_SendCmd>

  OLED_NewFrame();
 800346a:	f000 f807 	bl	800347c <OLED_NewFrame>
  OLED_ShowFrame();
 800346e:	f000 f811 	bl	8003494 <OLED_ShowFrame>

  OLED_SendCmd(0xAF); /*开启显示 display ON*/
 8003472:	20af      	movs	r0, #175	@ 0xaf
 8003474:	f7ff ff94 	bl	80033a0 <OLED_SendCmd>
}
 8003478:	bf00      	nop
 800347a:	bd80      	pop	{r7, pc}

0800347c <OLED_NewFrame>:

/**
 * @brief 清空显存 绘制新的一帧
 */
void OLED_NewFrame()
{
 800347c:	b580      	push	{r7, lr}
 800347e:	af00      	add	r7, sp, #0
  memset(OLED_GRAM, 0, sizeof(OLED_GRAM));
 8003480:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003484:	2100      	movs	r1, #0
 8003486:	4802      	ldr	r0, [pc, #8]	@ (8003490 <OLED_NewFrame+0x14>)
 8003488:	f005 feab 	bl	80091e2 <memset>
}
 800348c:	bf00      	nop
 800348e:	bd80      	pop	{r7, pc}
 8003490:	2000106c 	.word	0x2000106c

08003494 <OLED_ShowFrame>:
/**
 * @brief 将当前显存显示到屏幕上
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_ShowFrame()
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
  static uint8_t sendBuffer[OLED_COLUMN + 1];
  sendBuffer[0] = 0x40;
 800349a:	4b15      	ldr	r3, [pc, #84]	@ (80034f0 <OLED_ShowFrame+0x5c>)
 800349c:	2240      	movs	r2, #64	@ 0x40
 800349e:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < OLED_PAGE; i++)
 80034a0:	2300      	movs	r3, #0
 80034a2:	71fb      	strb	r3, [r7, #7]
 80034a4:	e01b      	b.n	80034de <OLED_ShowFrame+0x4a>
  {
    OLED_SendCmd(0xB0 + i); // 设置页地址
 80034a6:	79fb      	ldrb	r3, [r7, #7]
 80034a8:	3b50      	subs	r3, #80	@ 0x50
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	4618      	mov	r0, r3
 80034ae:	f7ff ff77 	bl	80033a0 <OLED_SendCmd>
    OLED_SendCmd(0x00);     // 设置列地址低4位
 80034b2:	2000      	movs	r0, #0
 80034b4:	f7ff ff74 	bl	80033a0 <OLED_SendCmd>
    OLED_SendCmd(0x10);     // 设置列地址高4位
 80034b8:	2010      	movs	r0, #16
 80034ba:	f7ff ff71 	bl	80033a0 <OLED_SendCmd>
    memcpy(sendBuffer + 1, OLED_GRAM[i], OLED_COLUMN);
 80034be:	480d      	ldr	r0, [pc, #52]	@ (80034f4 <OLED_ShowFrame+0x60>)
 80034c0:	79fb      	ldrb	r3, [r7, #7]
 80034c2:	01db      	lsls	r3, r3, #7
 80034c4:	4a0c      	ldr	r2, [pc, #48]	@ (80034f8 <OLED_ShowFrame+0x64>)
 80034c6:	4413      	add	r3, r2
 80034c8:	2280      	movs	r2, #128	@ 0x80
 80034ca:	4619      	mov	r1, r3
 80034cc:	f005 ff09 	bl	80092e2 <memcpy>
    OLED_Send(sendBuffer, OLED_COLUMN + 1);
 80034d0:	2181      	movs	r1, #129	@ 0x81
 80034d2:	4807      	ldr	r0, [pc, #28]	@ (80034f0 <OLED_ShowFrame+0x5c>)
 80034d4:	f7ff ff4e 	bl	8003374 <OLED_Send>
  for (uint8_t i = 0; i < OLED_PAGE; i++)
 80034d8:	79fb      	ldrb	r3, [r7, #7]
 80034da:	3301      	adds	r3, #1
 80034dc:	71fb      	strb	r3, [r7, #7]
 80034de:	79fb      	ldrb	r3, [r7, #7]
 80034e0:	2b07      	cmp	r3, #7
 80034e2:	d9e0      	bls.n	80034a6 <OLED_ShowFrame+0x12>
  }
}
 80034e4:	bf00      	nop
 80034e6:	bf00      	nop
 80034e8:	3708      	adds	r7, #8
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	20001470 	.word	0x20001470
 80034f4:	20001471 	.word	0x20001471
 80034f8:	2000106c 	.word	0x2000106c

080034fc <OLED_SetByte_Fine>:
 * @note 此函数将显存中的某一字节的第start位到第end位设置为与data相同
 * @note start和end的范围为0-7, start必须小于等于end
 * @note 此函数与OLED_SetByte_Fine的区别在于此函数只能设置显存中的某一真实字节
 */
void OLED_SetByte_Fine(uint8_t page, uint8_t column, uint8_t data, uint8_t start, uint8_t end, OLED_ColorMode color)
{
 80034fc:	b490      	push	{r4, r7}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	4604      	mov	r4, r0
 8003504:	4608      	mov	r0, r1
 8003506:	4611      	mov	r1, r2
 8003508:	461a      	mov	r2, r3
 800350a:	4623      	mov	r3, r4
 800350c:	71fb      	strb	r3, [r7, #7]
 800350e:	4603      	mov	r3, r0
 8003510:	71bb      	strb	r3, [r7, #6]
 8003512:	460b      	mov	r3, r1
 8003514:	717b      	strb	r3, [r7, #5]
 8003516:	4613      	mov	r3, r2
 8003518:	713b      	strb	r3, [r7, #4]
  static uint8_t temp;
  if (page >= OLED_PAGE || column >= OLED_COLUMN)
 800351a:	79fb      	ldrb	r3, [r7, #7]
 800351c:	2b07      	cmp	r3, #7
 800351e:	d85f      	bhi.n	80035e0 <OLED_SetByte_Fine+0xe4>
 8003520:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003524:	2b00      	cmp	r3, #0
 8003526:	db5b      	blt.n	80035e0 <OLED_SetByte_Fine+0xe4>
    return;
  if (color)
 8003528:	7d3b      	ldrb	r3, [r7, #20]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d002      	beq.n	8003534 <OLED_SetByte_Fine+0x38>
    data = ~data;
 800352e:	797b      	ldrb	r3, [r7, #5]
 8003530:	43db      	mvns	r3, r3
 8003532:	717b      	strb	r3, [r7, #5]

  temp = data | (0xff << (end + 1)) | (0xff >> (8 - start));
 8003534:	7c3b      	ldrb	r3, [r7, #16]
 8003536:	3301      	adds	r3, #1
 8003538:	22ff      	movs	r2, #255	@ 0xff
 800353a:	fa02 f303 	lsl.w	r3, r2, r3
 800353e:	b25a      	sxtb	r2, r3
 8003540:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8003544:	4313      	orrs	r3, r2
 8003546:	b25a      	sxtb	r2, r3
 8003548:	793b      	ldrb	r3, [r7, #4]
 800354a:	f1c3 0308 	rsb	r3, r3, #8
 800354e:	21ff      	movs	r1, #255	@ 0xff
 8003550:	fa41 f303 	asr.w	r3, r1, r3
 8003554:	b25b      	sxtb	r3, r3
 8003556:	4313      	orrs	r3, r2
 8003558:	b25b      	sxtb	r3, r3
 800355a:	b2da      	uxtb	r2, r3
 800355c:	4b23      	ldr	r3, [pc, #140]	@ (80035ec <OLED_SetByte_Fine+0xf0>)
 800355e:	701a      	strb	r2, [r3, #0]
  OLED_GRAM[page][column] &= temp;
 8003560:	79fa      	ldrb	r2, [r7, #7]
 8003562:	79bb      	ldrb	r3, [r7, #6]
 8003564:	4922      	ldr	r1, [pc, #136]	@ (80035f0 <OLED_SetByte_Fine+0xf4>)
 8003566:	01d2      	lsls	r2, r2, #7
 8003568:	440a      	add	r2, r1
 800356a:	4413      	add	r3, r2
 800356c:	7818      	ldrb	r0, [r3, #0]
 800356e:	4b1f      	ldr	r3, [pc, #124]	@ (80035ec <OLED_SetByte_Fine+0xf0>)
 8003570:	7819      	ldrb	r1, [r3, #0]
 8003572:	79fa      	ldrb	r2, [r7, #7]
 8003574:	79bb      	ldrb	r3, [r7, #6]
 8003576:	4001      	ands	r1, r0
 8003578:	b2c8      	uxtb	r0, r1
 800357a:	491d      	ldr	r1, [pc, #116]	@ (80035f0 <OLED_SetByte_Fine+0xf4>)
 800357c:	01d2      	lsls	r2, r2, #7
 800357e:	440a      	add	r2, r1
 8003580:	4413      	add	r3, r2
 8003582:	4602      	mov	r2, r0
 8003584:	701a      	strb	r2, [r3, #0]
  temp = data & ~(0xff << (end + 1)) & ~(0xff >> (8 - start));
 8003586:	7c3b      	ldrb	r3, [r7, #16]
 8003588:	3301      	adds	r3, #1
 800358a:	22ff      	movs	r2, #255	@ 0xff
 800358c:	fa02 f303 	lsl.w	r3, r2, r3
 8003590:	b25b      	sxtb	r3, r3
 8003592:	43db      	mvns	r3, r3
 8003594:	b25a      	sxtb	r2, r3
 8003596:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800359a:	4013      	ands	r3, r2
 800359c:	b25a      	sxtb	r2, r3
 800359e:	793b      	ldrb	r3, [r7, #4]
 80035a0:	f1c3 0308 	rsb	r3, r3, #8
 80035a4:	f06f 01ff 	mvn.w	r1, #255	@ 0xff
 80035a8:	fa41 f303 	asr.w	r3, r1, r3
 80035ac:	b25b      	sxtb	r3, r3
 80035ae:	4013      	ands	r3, r2
 80035b0:	b25b      	sxtb	r3, r3
 80035b2:	b2da      	uxtb	r2, r3
 80035b4:	4b0d      	ldr	r3, [pc, #52]	@ (80035ec <OLED_SetByte_Fine+0xf0>)
 80035b6:	701a      	strb	r2, [r3, #0]
  OLED_GRAM[page][column] |= temp;
 80035b8:	79fa      	ldrb	r2, [r7, #7]
 80035ba:	79bb      	ldrb	r3, [r7, #6]
 80035bc:	490c      	ldr	r1, [pc, #48]	@ (80035f0 <OLED_SetByte_Fine+0xf4>)
 80035be:	01d2      	lsls	r2, r2, #7
 80035c0:	440a      	add	r2, r1
 80035c2:	4413      	add	r3, r2
 80035c4:	7818      	ldrb	r0, [r3, #0]
 80035c6:	4b09      	ldr	r3, [pc, #36]	@ (80035ec <OLED_SetByte_Fine+0xf0>)
 80035c8:	7819      	ldrb	r1, [r3, #0]
 80035ca:	79fa      	ldrb	r2, [r7, #7]
 80035cc:	79bb      	ldrb	r3, [r7, #6]
 80035ce:	4301      	orrs	r1, r0
 80035d0:	b2c8      	uxtb	r0, r1
 80035d2:	4907      	ldr	r1, [pc, #28]	@ (80035f0 <OLED_SetByte_Fine+0xf4>)
 80035d4:	01d2      	lsls	r2, r2, #7
 80035d6:	440a      	add	r2, r1
 80035d8:	4413      	add	r3, r2
 80035da:	4602      	mov	r2, r0
 80035dc:	701a      	strb	r2, [r3, #0]
 80035de:	e000      	b.n	80035e2 <OLED_SetByte_Fine+0xe6>
    return;
 80035e0:	bf00      	nop
  // 使用OLED_SetPixel实现
  // for (uint8_t i = start; i <= end; i++) {
  //   OLED_SetPixel(column, page * 8 + i, !((data >> i) & 0x01));
  // }
}
 80035e2:	3708      	adds	r7, #8
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bc90      	pop	{r4, r7}
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	200014f1 	.word	0x200014f1
 80035f0:	2000106c 	.word	0x2000106c

080035f4 <OLED_SetBits_Fine>:
 * @note 此函数将显存中从(x,y)开始向下数len位设置为与data相同
 * @note len的范围为1-8
 * @note 此函数与OLED_SetByte_Fine的区别在于此函数的横坐标和纵坐标是以像素为单位的, 可能出现跨两个真实字节的情况(跨页)
 */
void OLED_SetBits_Fine(uint8_t x, uint8_t y, uint8_t data, uint8_t len, OLED_ColorMode color)
{
 80035f4:	b5b0      	push	{r4, r5, r7, lr}
 80035f6:	b086      	sub	sp, #24
 80035f8:	af02      	add	r7, sp, #8
 80035fa:	4604      	mov	r4, r0
 80035fc:	4608      	mov	r0, r1
 80035fe:	4611      	mov	r1, r2
 8003600:	461a      	mov	r2, r3
 8003602:	4623      	mov	r3, r4
 8003604:	71fb      	strb	r3, [r7, #7]
 8003606:	4603      	mov	r3, r0
 8003608:	71bb      	strb	r3, [r7, #6]
 800360a:	460b      	mov	r3, r1
 800360c:	717b      	strb	r3, [r7, #5]
 800360e:	4613      	mov	r3, r2
 8003610:	713b      	strb	r3, [r7, #4]
  uint8_t page = y / 8;
 8003612:	79bb      	ldrb	r3, [r7, #6]
 8003614:	08db      	lsrs	r3, r3, #3
 8003616:	73fb      	strb	r3, [r7, #15]
  uint8_t bit = y % 8;
 8003618:	79bb      	ldrb	r3, [r7, #6]
 800361a:	f003 0307 	and.w	r3, r3, #7
 800361e:	73bb      	strb	r3, [r7, #14]
  if (bit + len > 8)
 8003620:	7bba      	ldrb	r2, [r7, #14]
 8003622:	793b      	ldrb	r3, [r7, #4]
 8003624:	4413      	add	r3, r2
 8003626:	2b08      	cmp	r3, #8
 8003628:	dd29      	ble.n	800367e <OLED_SetBits_Fine+0x8a>
  {
    OLED_SetByte_Fine(page, x, data << bit, bit, 7, color);
 800362a:	797a      	ldrb	r2, [r7, #5]
 800362c:	7bbb      	ldrb	r3, [r7, #14]
 800362e:	fa02 f303 	lsl.w	r3, r2, r3
 8003632:	b2da      	uxtb	r2, r3
 8003634:	7bbc      	ldrb	r4, [r7, #14]
 8003636:	79f9      	ldrb	r1, [r7, #7]
 8003638:	7bf8      	ldrb	r0, [r7, #15]
 800363a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800363e:	9301      	str	r3, [sp, #4]
 8003640:	2307      	movs	r3, #7
 8003642:	9300      	str	r3, [sp, #0]
 8003644:	4623      	mov	r3, r4
 8003646:	f7ff ff59 	bl	80034fc <OLED_SetByte_Fine>
    OLED_SetByte_Fine(page + 1, x, data >> (8 - bit), 0, len + bit - 1 - 8, color);
 800364a:	7bfb      	ldrb	r3, [r7, #15]
 800364c:	3301      	adds	r3, #1
 800364e:	b2d8      	uxtb	r0, r3
 8003650:	797a      	ldrb	r2, [r7, #5]
 8003652:	7bbb      	ldrb	r3, [r7, #14]
 8003654:	f1c3 0308 	rsb	r3, r3, #8
 8003658:	fa42 f303 	asr.w	r3, r2, r3
 800365c:	b2dc      	uxtb	r4, r3
 800365e:	793a      	ldrb	r2, [r7, #4]
 8003660:	7bbb      	ldrb	r3, [r7, #14]
 8003662:	4413      	add	r3, r2
 8003664:	b2db      	uxtb	r3, r3
 8003666:	3b09      	subs	r3, #9
 8003668:	b2db      	uxtb	r3, r3
 800366a:	79f9      	ldrb	r1, [r7, #7]
 800366c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003670:	9201      	str	r2, [sp, #4]
 8003672:	9300      	str	r3, [sp, #0]
 8003674:	2300      	movs	r3, #0
 8003676:	4622      	mov	r2, r4
 8003678:	f7ff ff40 	bl	80034fc <OLED_SetByte_Fine>
  }
  // 使用OLED_SetPixel实现
  // for (uint8_t i = 0; i < len; i++) {
  //   OLED_SetPixel(x, y + i, !((data >> i) & 0x01));
  // }
}
 800367c:	e015      	b.n	80036aa <OLED_SetBits_Fine+0xb6>
    OLED_SetByte_Fine(page, x, data << bit, bit, bit + len - 1, color);
 800367e:	797a      	ldrb	r2, [r7, #5]
 8003680:	7bbb      	ldrb	r3, [r7, #14]
 8003682:	fa02 f303 	lsl.w	r3, r2, r3
 8003686:	b2dc      	uxtb	r4, r3
 8003688:	7bba      	ldrb	r2, [r7, #14]
 800368a:	793b      	ldrb	r3, [r7, #4]
 800368c:	4413      	add	r3, r2
 800368e:	b2db      	uxtb	r3, r3
 8003690:	3b01      	subs	r3, #1
 8003692:	b2db      	uxtb	r3, r3
 8003694:	7bbd      	ldrb	r5, [r7, #14]
 8003696:	79f9      	ldrb	r1, [r7, #7]
 8003698:	7bf8      	ldrb	r0, [r7, #15]
 800369a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800369e:	9201      	str	r2, [sp, #4]
 80036a0:	9300      	str	r3, [sp, #0]
 80036a2:	462b      	mov	r3, r5
 80036a4:	4622      	mov	r2, r4
 80036a6:	f7ff ff29 	bl	80034fc <OLED_SetByte_Fine>
}
 80036aa:	bf00      	nop
 80036ac:	3710      	adds	r7, #16
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bdb0      	pop	{r4, r5, r7, pc}

080036b2 <OLED_SetBits>:
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始向下数8位设置为与data相同
 * @note 此函数与OLED_SetByte的区别在于此函数的横坐标和纵坐标是以像素为单位的, 可能出现跨两个真实字节的情况(跨页)
 */
void OLED_SetBits(uint8_t x, uint8_t y, uint8_t data, OLED_ColorMode color)
{
 80036b2:	b590      	push	{r4, r7, lr}
 80036b4:	b087      	sub	sp, #28
 80036b6:	af02      	add	r7, sp, #8
 80036b8:	4604      	mov	r4, r0
 80036ba:	4608      	mov	r0, r1
 80036bc:	4611      	mov	r1, r2
 80036be:	461a      	mov	r2, r3
 80036c0:	4623      	mov	r3, r4
 80036c2:	71fb      	strb	r3, [r7, #7]
 80036c4:	4603      	mov	r3, r0
 80036c6:	71bb      	strb	r3, [r7, #6]
 80036c8:	460b      	mov	r3, r1
 80036ca:	717b      	strb	r3, [r7, #5]
 80036cc:	4613      	mov	r3, r2
 80036ce:	713b      	strb	r3, [r7, #4]
  uint8_t page = y / 8;
 80036d0:	79bb      	ldrb	r3, [r7, #6]
 80036d2:	08db      	lsrs	r3, r3, #3
 80036d4:	73fb      	strb	r3, [r7, #15]
  uint8_t bit = y % 8;
 80036d6:	79bb      	ldrb	r3, [r7, #6]
 80036d8:	f003 0307 	and.w	r3, r3, #7
 80036dc:	73bb      	strb	r3, [r7, #14]
  OLED_SetByte_Fine(page, x, data << bit, bit, 7, color);
 80036de:	797a      	ldrb	r2, [r7, #5]
 80036e0:	7bbb      	ldrb	r3, [r7, #14]
 80036e2:	fa02 f303 	lsl.w	r3, r2, r3
 80036e6:	b2da      	uxtb	r2, r3
 80036e8:	7bbc      	ldrb	r4, [r7, #14]
 80036ea:	79f9      	ldrb	r1, [r7, #7]
 80036ec:	7bf8      	ldrb	r0, [r7, #15]
 80036ee:	793b      	ldrb	r3, [r7, #4]
 80036f0:	9301      	str	r3, [sp, #4]
 80036f2:	2307      	movs	r3, #7
 80036f4:	9300      	str	r3, [sp, #0]
 80036f6:	4623      	mov	r3, r4
 80036f8:	f7ff ff00 	bl	80034fc <OLED_SetByte_Fine>
  if (bit)
 80036fc:	7bbb      	ldrb	r3, [r7, #14]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d014      	beq.n	800372c <OLED_SetBits+0x7a>
  {
    OLED_SetByte_Fine(page + 1, x, data >> (8 - bit), 0, bit - 1, color);
 8003702:	7bfb      	ldrb	r3, [r7, #15]
 8003704:	3301      	adds	r3, #1
 8003706:	b2d8      	uxtb	r0, r3
 8003708:	797a      	ldrb	r2, [r7, #5]
 800370a:	7bbb      	ldrb	r3, [r7, #14]
 800370c:	f1c3 0308 	rsb	r3, r3, #8
 8003710:	fa42 f303 	asr.w	r3, r2, r3
 8003714:	b2dc      	uxtb	r4, r3
 8003716:	7bbb      	ldrb	r3, [r7, #14]
 8003718:	3b01      	subs	r3, #1
 800371a:	b2db      	uxtb	r3, r3
 800371c:	79f9      	ldrb	r1, [r7, #7]
 800371e:	793a      	ldrb	r2, [r7, #4]
 8003720:	9201      	str	r2, [sp, #4]
 8003722:	9300      	str	r3, [sp, #0]
 8003724:	2300      	movs	r3, #0
 8003726:	4622      	mov	r2, r4
 8003728:	f7ff fee8 	bl	80034fc <OLED_SetByte_Fine>
  }
}
 800372c:	bf00      	nop
 800372e:	3714      	adds	r7, #20
 8003730:	46bd      	mov	sp, r7
 8003732:	bd90      	pop	{r4, r7, pc}

08003734 <OLED_SetBlock>:
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始的w*h个像素设置为data中的数据
 * @note data的数据应该采用列行式排列
 */
void OLED_SetBlock(uint8_t x, uint8_t y, const uint8_t *data, uint8_t w, uint8_t h, OLED_ColorMode color)
{
 8003734:	b590      	push	{r4, r7, lr}
 8003736:	b087      	sub	sp, #28
 8003738:	af02      	add	r7, sp, #8
 800373a:	603a      	str	r2, [r7, #0]
 800373c:	461a      	mov	r2, r3
 800373e:	4603      	mov	r3, r0
 8003740:	71fb      	strb	r3, [r7, #7]
 8003742:	460b      	mov	r3, r1
 8003744:	71bb      	strb	r3, [r7, #6]
 8003746:	4613      	mov	r3, r2
 8003748:	717b      	strb	r3, [r7, #5]
  uint8_t fullRow = h / 8; // 完整的行数
 800374a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800374e:	08db      	lsrs	r3, r3, #3
 8003750:	733b      	strb	r3, [r7, #12]
  uint8_t partBit = h % 8; // 不完整的字节中的有效位数
 8003752:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003756:	f003 0307 	and.w	r3, r3, #7
 800375a:	72fb      	strb	r3, [r7, #11]
  for (uint8_t i = 0; i < w; i++)
 800375c:	2300      	movs	r3, #0
 800375e:	73fb      	strb	r3, [r7, #15]
 8003760:	e025      	b.n	80037ae <OLED_SetBlock+0x7a>
  {
    for (uint8_t j = 0; j < fullRow; j++)
 8003762:	2300      	movs	r3, #0
 8003764:	73bb      	strb	r3, [r7, #14]
 8003766:	e01b      	b.n	80037a0 <OLED_SetBlock+0x6c>
    {
      OLED_SetBits(x + i, y + j * 8, data[i + j * w], color);
 8003768:	79fa      	ldrb	r2, [r7, #7]
 800376a:	7bfb      	ldrb	r3, [r7, #15]
 800376c:	4413      	add	r3, r2
 800376e:	b2d8      	uxtb	r0, r3
 8003770:	7bbb      	ldrb	r3, [r7, #14]
 8003772:	00db      	lsls	r3, r3, #3
 8003774:	b2da      	uxtb	r2, r3
 8003776:	79bb      	ldrb	r3, [r7, #6]
 8003778:	4413      	add	r3, r2
 800377a:	b2dc      	uxtb	r4, r3
 800377c:	7bfa      	ldrb	r2, [r7, #15]
 800377e:	7bbb      	ldrb	r3, [r7, #14]
 8003780:	7979      	ldrb	r1, [r7, #5]
 8003782:	fb01 f303 	mul.w	r3, r1, r3
 8003786:	4413      	add	r3, r2
 8003788:	461a      	mov	r2, r3
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	4413      	add	r3, r2
 800378e:	781a      	ldrb	r2, [r3, #0]
 8003790:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003794:	4621      	mov	r1, r4
 8003796:	f7ff ff8c 	bl	80036b2 <OLED_SetBits>
    for (uint8_t j = 0; j < fullRow; j++)
 800379a:	7bbb      	ldrb	r3, [r7, #14]
 800379c:	3301      	adds	r3, #1
 800379e:	73bb      	strb	r3, [r7, #14]
 80037a0:	7bba      	ldrb	r2, [r7, #14]
 80037a2:	7b3b      	ldrb	r3, [r7, #12]
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d3df      	bcc.n	8003768 <OLED_SetBlock+0x34>
  for (uint8_t i = 0; i < w; i++)
 80037a8:	7bfb      	ldrb	r3, [r7, #15]
 80037aa:	3301      	adds	r3, #1
 80037ac:	73fb      	strb	r3, [r7, #15]
 80037ae:	7bfa      	ldrb	r2, [r7, #15]
 80037b0:	797b      	ldrb	r3, [r7, #5]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d3d5      	bcc.n	8003762 <OLED_SetBlock+0x2e>
    }
  }
  if (partBit)
 80037b6:	7afb      	ldrb	r3, [r7, #11]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d028      	beq.n	800380e <OLED_SetBlock+0xda>
  {
    uint16_t fullNum = w * fullRow; // 完整的字节数
 80037bc:	797b      	ldrb	r3, [r7, #5]
 80037be:	b29a      	uxth	r2, r3
 80037c0:	7b3b      	ldrb	r3, [r7, #12]
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	fb12 f303 	smulbb	r3, r2, r3
 80037c8:	813b      	strh	r3, [r7, #8]
    for (uint8_t i = 0; i < w; i++)
 80037ca:	2300      	movs	r3, #0
 80037cc:	737b      	strb	r3, [r7, #13]
 80037ce:	e01a      	b.n	8003806 <OLED_SetBlock+0xd2>
    {
      OLED_SetBits_Fine(x + i, y + (fullRow * 8), data[fullNum + i], partBit, color);
 80037d0:	79fa      	ldrb	r2, [r7, #7]
 80037d2:	7b7b      	ldrb	r3, [r7, #13]
 80037d4:	4413      	add	r3, r2
 80037d6:	b2d8      	uxtb	r0, r3
 80037d8:	7b3b      	ldrb	r3, [r7, #12]
 80037da:	00db      	lsls	r3, r3, #3
 80037dc:	b2da      	uxtb	r2, r3
 80037de:	79bb      	ldrb	r3, [r7, #6]
 80037e0:	4413      	add	r3, r2
 80037e2:	b2d9      	uxtb	r1, r3
 80037e4:	893a      	ldrh	r2, [r7, #8]
 80037e6:	7b7b      	ldrb	r3, [r7, #13]
 80037e8:	4413      	add	r3, r2
 80037ea:	461a      	mov	r2, r3
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	4413      	add	r3, r2
 80037f0:	781a      	ldrb	r2, [r3, #0]
 80037f2:	7afc      	ldrb	r4, [r7, #11]
 80037f4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80037f8:	9300      	str	r3, [sp, #0]
 80037fa:	4623      	mov	r3, r4
 80037fc:	f7ff fefa 	bl	80035f4 <OLED_SetBits_Fine>
    for (uint8_t i = 0; i < w; i++)
 8003800:	7b7b      	ldrb	r3, [r7, #13]
 8003802:	3301      	adds	r3, #1
 8003804:	737b      	strb	r3, [r7, #13]
 8003806:	7b7a      	ldrb	r2, [r7, #13]
 8003808:	797b      	ldrb	r3, [r7, #5]
 800380a:	429a      	cmp	r2, r3
 800380c:	d3e0      	bcc.n	80037d0 <OLED_SetBlock+0x9c>
  //       if (j * 8 + k >= h) break; // 防止越界(不完整的字节
  //       OLED_SetPixel(x + i, y + j * 8 + k, !((data[i + j * w] >> k) & 0x01));
  //     }
  //   }
  // }
}
 800380e:	bf00      	nop
 8003810:	3714      	adds	r7, #20
 8003812:	46bd      	mov	sp, r7
 8003814:	bd90      	pop	{r4, r7, pc}

08003816 <OLED_PrintASCIIChar>:
 * @param ch 字符
 * @param font 字体
 * @param color 颜色
 */
void OLED_PrintASCIIChar(uint8_t x, uint8_t y, char ch, const ASCIIFont *font, OLED_ColorMode color)
{
 8003816:	b5b0      	push	{r4, r5, r7, lr}
 8003818:	b084      	sub	sp, #16
 800381a:	af02      	add	r7, sp, #8
 800381c:	603b      	str	r3, [r7, #0]
 800381e:	4603      	mov	r3, r0
 8003820:	71fb      	strb	r3, [r7, #7]
 8003822:	460b      	mov	r3, r1
 8003824:	71bb      	strb	r3, [r7, #6]
 8003826:	4613      	mov	r3, r2
 8003828:	717b      	strb	r3, [r7, #5]
  OLED_SetBlock(x, y, font->chars + (ch - ' ') * (((font->h + 7) / 8) * font->w), font->w, font->h, color);
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	685a      	ldr	r2, [r3, #4]
 800382e:	797b      	ldrb	r3, [r7, #5]
 8003830:	f1a3 0120 	sub.w	r1, r3, #32
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	3307      	adds	r3, #7
 800383a:	2b00      	cmp	r3, #0
 800383c:	da00      	bge.n	8003840 <OLED_PrintASCIIChar+0x2a>
 800383e:	3307      	adds	r3, #7
 8003840:	10db      	asrs	r3, r3, #3
 8003842:	4618      	mov	r0, r3
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	785b      	ldrb	r3, [r3, #1]
 8003848:	fb00 f303 	mul.w	r3, r0, r3
 800384c:	fb01 f303 	mul.w	r3, r1, r3
 8003850:	18d4      	adds	r4, r2, r3
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	785d      	ldrb	r5, [r3, #1]
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	79b9      	ldrb	r1, [r7, #6]
 800385c:	79f8      	ldrb	r0, [r7, #7]
 800385e:	7e3a      	ldrb	r2, [r7, #24]
 8003860:	9201      	str	r2, [sp, #4]
 8003862:	9300      	str	r3, [sp, #0]
 8003864:	462b      	mov	r3, r5
 8003866:	4622      	mov	r2, r4
 8003868:	f7ff ff64 	bl	8003734 <OLED_SetBlock>
}
 800386c:	bf00      	nop
 800386e:	3708      	adds	r7, #8
 8003870:	46bd      	mov	sp, r7
 8003872:	bdb0      	pop	{r4, r5, r7, pc}

08003874 <_OLED_GetUTF8Len>:

/**
 * @brief 获取UTF-8编码的字符长度
 */
uint8_t _OLED_GetUTF8Len(char *string)
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  if ((string[0] & 0x80) == 0x00)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	b25b      	sxtb	r3, r3
 8003882:	2b00      	cmp	r3, #0
 8003884:	db01      	blt.n	800388a <_OLED_GetUTF8Len+0x16>
  {
    return 1;
 8003886:	2301      	movs	r3, #1
 8003888:	e018      	b.n	80038bc <_OLED_GetUTF8Len+0x48>
  }
  else if ((string[0] & 0xE0) == 0xC0)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8003892:	2bc0      	cmp	r3, #192	@ 0xc0
 8003894:	d101      	bne.n	800389a <_OLED_GetUTF8Len+0x26>
  {
    return 2;
 8003896:	2302      	movs	r3, #2
 8003898:	e010      	b.n	80038bc <_OLED_GetUTF8Len+0x48>
  }
  else if ((string[0] & 0xF0) == 0xE0)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80038a2:	2be0      	cmp	r3, #224	@ 0xe0
 80038a4:	d101      	bne.n	80038aa <_OLED_GetUTF8Len+0x36>
  {
    return 3;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e008      	b.n	80038bc <_OLED_GetUTF8Len+0x48>
  }
  else if ((string[0] & 0xF8) == 0xF0)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 80038b2:	2bf0      	cmp	r3, #240	@ 0xf0
 80038b4:	d101      	bne.n	80038ba <_OLED_GetUTF8Len+0x46>
  {
    return 4;
 80038b6:	2304      	movs	r3, #4
 80038b8:	e000      	b.n	80038bc <_OLED_GetUTF8Len+0x48>
  }
  return 0;
 80038ba:	2300      	movs	r3, #0
}
 80038bc:	4618      	mov	r0, r3
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <OLED_PrintString>:
 * @note 为保证字符串中的中文会被自动识别并绘制, 需:
 * 1. 编译器字符集设置为UTF-8
 * 2. 使用波特律动LED取模工具生成字模(https://led.baud-dance.com)
 */
void OLED_PrintString(uint8_t x, uint8_t y, char *str, const Font *font, OLED_ColorMode color)
{
 80038c8:	b5b0      	push	{r4, r5, r7, lr}
 80038ca:	b08a      	sub	sp, #40	@ 0x28
 80038cc:	af02      	add	r7, sp, #8
 80038ce:	60ba      	str	r2, [r7, #8]
 80038d0:	607b      	str	r3, [r7, #4]
 80038d2:	4603      	mov	r3, r0
 80038d4:	73fb      	strb	r3, [r7, #15]
 80038d6:	460b      	mov	r3, r1
 80038d8:	73bb      	strb	r3, [r7, #14]
  uint16_t i = 0;                                       // 字符串索引
 80038da:	2300      	movs	r3, #0
 80038dc:	83fb      	strh	r3, [r7, #30]
  uint8_t oneLen = (((font->h + 7) / 8) * font->w) + 4; // 一个字模占多少字节
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	3307      	adds	r3, #7
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	da00      	bge.n	80038ea <OLED_PrintString+0x22>
 80038e8:	3307      	adds	r3, #7
 80038ea:	10db      	asrs	r3, r3, #3
 80038ec:	b2da      	uxtb	r2, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	785b      	ldrb	r3, [r3, #1]
 80038f2:	fb12 f303 	smulbb	r3, r2, r3
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	3304      	adds	r3, #4
 80038fa:	76fb      	strb	r3, [r7, #27]
  uint8_t found;                                        // 是否找到字模
  uint8_t utf8Len;                                      // UTF-8编码长度
  uint8_t *head;                                        // 字模头指针
  while (str[i])
 80038fc:	e07d      	b.n	80039fa <OLED_PrintString+0x132>
  {
    found = 0;
 80038fe:	2300      	movs	r3, #0
 8003900:	777b      	strb	r3, [r7, #29]
    utf8Len = _OLED_GetUTF8Len(str + i);
 8003902:	8bfb      	ldrh	r3, [r7, #30]
 8003904:	68ba      	ldr	r2, [r7, #8]
 8003906:	4413      	add	r3, r2
 8003908:	4618      	mov	r0, r3
 800390a:	f7ff ffb3 	bl	8003874 <_OLED_GetUTF8Len>
 800390e:	4603      	mov	r3, r0
 8003910:	76bb      	strb	r3, [r7, #26]
    if (utf8Len == 0)
 8003912:	7ebb      	ldrb	r3, [r7, #26]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d078      	beq.n	8003a0a <OLED_PrintString+0x142>
      break; // 有问题的UTF-8编码

    // 寻找字符  TODO 优化查找算法, 二分查找或者hash
    for (uint8_t j = 0; j < font->len; j++)
 8003918:	2300      	movs	r3, #0
 800391a:	773b      	strb	r3, [r7, #28]
 800391c:	e032      	b.n	8003984 <OLED_PrintString+0xbc>
    {
      head = (uint8_t *)(font->chars) + (j * oneLen);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	7f3a      	ldrb	r2, [r7, #28]
 8003924:	7ef9      	ldrb	r1, [r7, #27]
 8003926:	fb01 f202 	mul.w	r2, r1, r2
 800392a:	4413      	add	r3, r2
 800392c:	617b      	str	r3, [r7, #20]
      if (memcmp(str + i, head, utf8Len) == 0)
 800392e:	8bfb      	ldrh	r3, [r7, #30]
 8003930:	68ba      	ldr	r2, [r7, #8]
 8003932:	4413      	add	r3, r2
 8003934:	7eba      	ldrb	r2, [r7, #26]
 8003936:	6979      	ldr	r1, [r7, #20]
 8003938:	4618      	mov	r0, r3
 800393a:	f005 fc42 	bl	80091c2 <memcmp>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d11c      	bne.n	800397e <OLED_PrintString+0xb6>
      {
        OLED_SetBlock(x, y, head + 4, font->w, font->h, color);
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	1d1c      	adds	r4, r3, #4
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	785d      	ldrb	r5, [r3, #1]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	7bb9      	ldrb	r1, [r7, #14]
 8003952:	7bf8      	ldrb	r0, [r7, #15]
 8003954:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8003958:	9201      	str	r2, [sp, #4]
 800395a:	9300      	str	r3, [sp, #0]
 800395c:	462b      	mov	r3, r5
 800395e:	4622      	mov	r2, r4
 8003960:	f7ff fee8 	bl	8003734 <OLED_SetBlock>
        // 移动光标
        x += font->w;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	785a      	ldrb	r2, [r3, #1]
 8003968:	7bfb      	ldrb	r3, [r7, #15]
 800396a:	4413      	add	r3, r2
 800396c:	73fb      	strb	r3, [r7, #15]
        i += utf8Len;
 800396e:	7ebb      	ldrb	r3, [r7, #26]
 8003970:	b29a      	uxth	r2, r3
 8003972:	8bfb      	ldrh	r3, [r7, #30]
 8003974:	4413      	add	r3, r2
 8003976:	83fb      	strh	r3, [r7, #30]
        found = 1;
 8003978:	2301      	movs	r3, #1
 800397a:	777b      	strb	r3, [r7, #29]
        break;
 800397c:	e007      	b.n	800398e <OLED_PrintString+0xc6>
    for (uint8_t j = 0; j < font->len; j++)
 800397e:	7f3b      	ldrb	r3, [r7, #28]
 8003980:	3301      	adds	r3, #1
 8003982:	773b      	strb	r3, [r7, #28]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	7a1b      	ldrb	r3, [r3, #8]
 8003988:	7f3a      	ldrb	r2, [r7, #28]
 800398a:	429a      	cmp	r2, r3
 800398c:	d3c7      	bcc.n	800391e <OLED_PrintString+0x56>
      }
    }

    // 若未找到字模,且为ASCII字符, 则缺省显示ASCII字符
    if (found == 0)
 800398e:	7f7b      	ldrb	r3, [r7, #29]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d132      	bne.n	80039fa <OLED_PrintString+0x132>
    {
      if (utf8Len == 1)
 8003994:	7ebb      	ldrb	r3, [r7, #26]
 8003996:	2b01      	cmp	r3, #1
 8003998:	d119      	bne.n	80039ce <OLED_PrintString+0x106>
      {
        OLED_PrintASCIIChar(x, y, str[i], font->ascii, color);
 800399a:	8bfb      	ldrh	r3, [r7, #30]
 800399c:	68ba      	ldr	r2, [r7, #8]
 800399e:	4413      	add	r3, r2
 80039a0:	781a      	ldrb	r2, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	68dc      	ldr	r4, [r3, #12]
 80039a6:	7bb9      	ldrb	r1, [r7, #14]
 80039a8:	7bf8      	ldrb	r0, [r7, #15]
 80039aa:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80039ae:	9300      	str	r3, [sp, #0]
 80039b0:	4623      	mov	r3, r4
 80039b2:	f7ff ff30 	bl	8003816 <OLED_PrintASCIIChar>
        // 移动光标
        x += font->ascii->w;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	785a      	ldrb	r2, [r3, #1]
 80039bc:	7bfb      	ldrb	r3, [r7, #15]
 80039be:	4413      	add	r3, r2
 80039c0:	73fb      	strb	r3, [r7, #15]
        i += utf8Len;
 80039c2:	7ebb      	ldrb	r3, [r7, #26]
 80039c4:	b29a      	uxth	r2, r3
 80039c6:	8bfb      	ldrh	r3, [r7, #30]
 80039c8:	4413      	add	r3, r2
 80039ca:	83fb      	strh	r3, [r7, #30]
 80039cc:	e015      	b.n	80039fa <OLED_PrintString+0x132>
      }
      else
      {
        OLED_PrintASCIIChar(x, y, ' ', font->ascii, color);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	68da      	ldr	r2, [r3, #12]
 80039d2:	7bb9      	ldrb	r1, [r7, #14]
 80039d4:	7bf8      	ldrb	r0, [r7, #15]
 80039d6:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80039da:	9300      	str	r3, [sp, #0]
 80039dc:	4613      	mov	r3, r2
 80039de:	2220      	movs	r2, #32
 80039e0:	f7ff ff19 	bl	8003816 <OLED_PrintASCIIChar>
        x += font->ascii->w;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	785a      	ldrb	r2, [r3, #1]
 80039ea:	7bfb      	ldrb	r3, [r7, #15]
 80039ec:	4413      	add	r3, r2
 80039ee:	73fb      	strb	r3, [r7, #15]
        i += utf8Len;
 80039f0:	7ebb      	ldrb	r3, [r7, #26]
 80039f2:	b29a      	uxth	r2, r3
 80039f4:	8bfb      	ldrh	r3, [r7, #30]
 80039f6:	4413      	add	r3, r2
 80039f8:	83fb      	strh	r3, [r7, #30]
  while (str[i])
 80039fa:	8bfb      	ldrh	r3, [r7, #30]
 80039fc:	68ba      	ldr	r2, [r7, #8]
 80039fe:	4413      	add	r3, r2
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	f47f af7b 	bne.w	80038fe <OLED_PrintString+0x36>
      }
    }
  }
}
 8003a08:	e000      	b.n	8003a0c <OLED_PrintString+0x144>
      break; // 有问题的UTF-8编码
 8003a0a:	bf00      	nop
}
 8003a0c:	bf00      	nop
 8003a0e:	3720      	adds	r7, #32
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bdb0      	pop	{r4, r5, r7, pc}

08003a14 <PID_param_init>:
  * @brief  PID参数初始化
  *	@note 	无
  * @retval 无
  */
void PID_param_init(PID *pid,float target_val,float Kp,float Ki,float Kd)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b087      	sub	sp, #28
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6178      	str	r0, [r7, #20]
 8003a1c:	ed87 0a04 	vstr	s0, [r7, #16]
 8003a20:	edc7 0a03 	vstr	s1, [r7, #12]
 8003a24:	ed87 1a02 	vstr	s2, [r7, #8]
 8003a28:	edc7 1a01 	vstr	s3, [r7, #4]
	pid->target_val=target_val;
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	601a      	str	r2, [r3, #0]
	pid->Kp = Kp;
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	68fa      	ldr	r2, [r7, #12]
 8003a36:	611a      	str	r2, [r3, #16]
	pid->Ki = Ki;
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	68ba      	ldr	r2, [r7, #8]
 8003a3c:	615a      	str	r2, [r3, #20]
	pid->Kd = Kd;
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	619a      	str	r2, [r3, #24]


}
 8003a44:	bf00      	nop
 8003a46:	371c      	adds	r7, #28
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <PID_Servo_init>:
#include "servo.h"

void PID_Servo_init(PID_Servo *pid,float target_val,float Kp,float Ki,float Kd)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b087      	sub	sp, #28
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6178      	str	r0, [r7, #20]
 8003a58:	ed87 0a04 	vstr	s0, [r7, #16]
 8003a5c:	edc7 0a03 	vstr	s1, [r7, #12]
 8003a60:	ed87 1a02 	vstr	s2, [r7, #8]
 8003a64:	edc7 1a01 	vstr	s3, [r7, #4]
	pid->target_val=target_val;
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	693a      	ldr	r2, [r7, #16]
 8003a6c:	601a      	str	r2, [r3, #0]
	pid->Kp = Kp;
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	611a      	str	r2, [r3, #16]
	pid->Ki = Ki;
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	68ba      	ldr	r2, [r7, #8]
 8003a78:	615a      	str	r2, [r3, #20]
	pid->Kd = Kd;
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	619a      	str	r2, [r3, #24]
}
 8003a80:	bf00      	nop
 8003a82:	371c      	adds	r7, #28
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003a90:	4b0e      	ldr	r3, [pc, #56]	@ (8003acc <HAL_Init+0x40>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a0d      	ldr	r2, [pc, #52]	@ (8003acc <HAL_Init+0x40>)
 8003a96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003a9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003a9c:	4b0b      	ldr	r3, [pc, #44]	@ (8003acc <HAL_Init+0x40>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a0a      	ldr	r2, [pc, #40]	@ (8003acc <HAL_Init+0x40>)
 8003aa2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003aa6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003aa8:	4b08      	ldr	r3, [pc, #32]	@ (8003acc <HAL_Init+0x40>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a07      	ldr	r2, [pc, #28]	@ (8003acc <HAL_Init+0x40>)
 8003aae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ab2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ab4:	2003      	movs	r0, #3
 8003ab6:	f000 f94f 	bl	8003d58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003aba:	2000      	movs	r0, #0
 8003abc:	f000 f808 	bl	8003ad0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003ac0:	f7fe f854 	bl	8001b6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	40023c00 	.word	0x40023c00

08003ad0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003ad8:	4b12      	ldr	r3, [pc, #72]	@ (8003b24 <HAL_InitTick+0x54>)
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	4b12      	ldr	r3, [pc, #72]	@ (8003b28 <HAL_InitTick+0x58>)
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003ae6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aee:	4618      	mov	r0, r3
 8003af0:	f000 f967 	bl	8003dc2 <HAL_SYSTICK_Config>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d001      	beq.n	8003afe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e00e      	b.n	8003b1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2b0f      	cmp	r3, #15
 8003b02:	d80a      	bhi.n	8003b1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b04:	2200      	movs	r2, #0
 8003b06:	6879      	ldr	r1, [r7, #4]
 8003b08:	f04f 30ff 	mov.w	r0, #4294967295
 8003b0c:	f000 f92f 	bl	8003d6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b10:	4a06      	ldr	r2, [pc, #24]	@ (8003b2c <HAL_InitTick+0x5c>)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003b16:	2300      	movs	r3, #0
 8003b18:	e000      	b.n	8003b1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3708      	adds	r7, #8
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	20000034 	.word	0x20000034
 8003b28:	2000003c 	.word	0x2000003c
 8003b2c:	20000038 	.word	0x20000038

08003b30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b30:	b480      	push	{r7}
 8003b32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b34:	4b06      	ldr	r3, [pc, #24]	@ (8003b50 <HAL_IncTick+0x20>)
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	461a      	mov	r2, r3
 8003b3a:	4b06      	ldr	r3, [pc, #24]	@ (8003b54 <HAL_IncTick+0x24>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4413      	add	r3, r2
 8003b40:	4a04      	ldr	r2, [pc, #16]	@ (8003b54 <HAL_IncTick+0x24>)
 8003b42:	6013      	str	r3, [r2, #0]
}
 8003b44:	bf00      	nop
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	2000003c 	.word	0x2000003c
 8003b54:	200014f4 	.word	0x200014f4

08003b58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	af00      	add	r7, sp, #0
  return uwTick;
 8003b5c:	4b03      	ldr	r3, [pc, #12]	@ (8003b6c <HAL_GetTick+0x14>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
 8003b6a:	bf00      	nop
 8003b6c:	200014f4 	.word	0x200014f4

08003b70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b78:	f7ff ffee 	bl	8003b58 <HAL_GetTick>
 8003b7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b88:	d005      	beq.n	8003b96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b8a:	4b0a      	ldr	r3, [pc, #40]	@ (8003bb4 <HAL_Delay+0x44>)
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	461a      	mov	r2, r3
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	4413      	add	r3, r2
 8003b94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003b96:	bf00      	nop
 8003b98:	f7ff ffde 	bl	8003b58 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	68fa      	ldr	r2, [r7, #12]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d8f7      	bhi.n	8003b98 <HAL_Delay+0x28>
  {
  }
}
 8003ba8:	bf00      	nop
 8003baa:	bf00      	nop
 8003bac:	3710      	adds	r7, #16
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	2000003c 	.word	0x2000003c

08003bb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b085      	sub	sp, #20
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f003 0307 	and.w	r3, r3, #7
 8003bc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bc8:	4b0c      	ldr	r3, [pc, #48]	@ (8003bfc <__NVIC_SetPriorityGrouping+0x44>)
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bce:	68ba      	ldr	r2, [r7, #8]
 8003bd0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003be0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003be4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003be8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bea:	4a04      	ldr	r2, [pc, #16]	@ (8003bfc <__NVIC_SetPriorityGrouping+0x44>)
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	60d3      	str	r3, [r2, #12]
}
 8003bf0:	bf00      	nop
 8003bf2:	3714      	adds	r7, #20
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr
 8003bfc:	e000ed00 	.word	0xe000ed00

08003c00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c00:	b480      	push	{r7}
 8003c02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c04:	4b04      	ldr	r3, [pc, #16]	@ (8003c18 <__NVIC_GetPriorityGrouping+0x18>)
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	0a1b      	lsrs	r3, r3, #8
 8003c0a:	f003 0307 	and.w	r3, r3, #7
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr
 8003c18:	e000ed00 	.word	0xe000ed00

08003c1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	4603      	mov	r3, r0
 8003c24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	db0b      	blt.n	8003c46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c2e:	79fb      	ldrb	r3, [r7, #7]
 8003c30:	f003 021f 	and.w	r2, r3, #31
 8003c34:	4907      	ldr	r1, [pc, #28]	@ (8003c54 <__NVIC_EnableIRQ+0x38>)
 8003c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c3a:	095b      	lsrs	r3, r3, #5
 8003c3c:	2001      	movs	r0, #1
 8003c3e:	fa00 f202 	lsl.w	r2, r0, r2
 8003c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003c46:	bf00      	nop
 8003c48:	370c      	adds	r7, #12
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
 8003c52:	bf00      	nop
 8003c54:	e000e100 	.word	0xe000e100

08003c58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	4603      	mov	r3, r0
 8003c60:	6039      	str	r1, [r7, #0]
 8003c62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	db0a      	blt.n	8003c82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	b2da      	uxtb	r2, r3
 8003c70:	490c      	ldr	r1, [pc, #48]	@ (8003ca4 <__NVIC_SetPriority+0x4c>)
 8003c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c76:	0112      	lsls	r2, r2, #4
 8003c78:	b2d2      	uxtb	r2, r2
 8003c7a:	440b      	add	r3, r1
 8003c7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c80:	e00a      	b.n	8003c98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	b2da      	uxtb	r2, r3
 8003c86:	4908      	ldr	r1, [pc, #32]	@ (8003ca8 <__NVIC_SetPriority+0x50>)
 8003c88:	79fb      	ldrb	r3, [r7, #7]
 8003c8a:	f003 030f 	and.w	r3, r3, #15
 8003c8e:	3b04      	subs	r3, #4
 8003c90:	0112      	lsls	r2, r2, #4
 8003c92:	b2d2      	uxtb	r2, r2
 8003c94:	440b      	add	r3, r1
 8003c96:	761a      	strb	r2, [r3, #24]
}
 8003c98:	bf00      	nop
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr
 8003ca4:	e000e100 	.word	0xe000e100
 8003ca8:	e000ed00 	.word	0xe000ed00

08003cac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b089      	sub	sp, #36	@ 0x24
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	60b9      	str	r1, [r7, #8]
 8003cb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f003 0307 	and.w	r3, r3, #7
 8003cbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	f1c3 0307 	rsb	r3, r3, #7
 8003cc6:	2b04      	cmp	r3, #4
 8003cc8:	bf28      	it	cs
 8003cca:	2304      	movcs	r3, #4
 8003ccc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	3304      	adds	r3, #4
 8003cd2:	2b06      	cmp	r3, #6
 8003cd4:	d902      	bls.n	8003cdc <NVIC_EncodePriority+0x30>
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	3b03      	subs	r3, #3
 8003cda:	e000      	b.n	8003cde <NVIC_EncodePriority+0x32>
 8003cdc:	2300      	movs	r3, #0
 8003cde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cea:	43da      	mvns	r2, r3
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	401a      	ands	r2, r3
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cf4:	f04f 31ff 	mov.w	r1, #4294967295
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8003cfe:	43d9      	mvns	r1, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d04:	4313      	orrs	r3, r2
         );
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3724      	adds	r7, #36	@ 0x24
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
	...

08003d14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	3b01      	subs	r3, #1
 8003d20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d24:	d301      	bcc.n	8003d2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d26:	2301      	movs	r3, #1
 8003d28:	e00f      	b.n	8003d4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d2a:	4a0a      	ldr	r2, [pc, #40]	@ (8003d54 <SysTick_Config+0x40>)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	3b01      	subs	r3, #1
 8003d30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d32:	210f      	movs	r1, #15
 8003d34:	f04f 30ff 	mov.w	r0, #4294967295
 8003d38:	f7ff ff8e 	bl	8003c58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d3c:	4b05      	ldr	r3, [pc, #20]	@ (8003d54 <SysTick_Config+0x40>)
 8003d3e:	2200      	movs	r2, #0
 8003d40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d42:	4b04      	ldr	r3, [pc, #16]	@ (8003d54 <SysTick_Config+0x40>)
 8003d44:	2207      	movs	r2, #7
 8003d46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3708      	adds	r7, #8
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	e000e010 	.word	0xe000e010

08003d58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f7ff ff29 	bl	8003bb8 <__NVIC_SetPriorityGrouping>
}
 8003d66:	bf00      	nop
 8003d68:	3708      	adds	r7, #8
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d6e:	b580      	push	{r7, lr}
 8003d70:	b086      	sub	sp, #24
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	4603      	mov	r3, r0
 8003d76:	60b9      	str	r1, [r7, #8]
 8003d78:	607a      	str	r2, [r7, #4]
 8003d7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d80:	f7ff ff3e 	bl	8003c00 <__NVIC_GetPriorityGrouping>
 8003d84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	68b9      	ldr	r1, [r7, #8]
 8003d8a:	6978      	ldr	r0, [r7, #20]
 8003d8c:	f7ff ff8e 	bl	8003cac <NVIC_EncodePriority>
 8003d90:	4602      	mov	r2, r0
 8003d92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d96:	4611      	mov	r1, r2
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f7ff ff5d 	bl	8003c58 <__NVIC_SetPriority>
}
 8003d9e:	bf00      	nop
 8003da0:	3718      	adds	r7, #24
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}

08003da6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b082      	sub	sp, #8
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	4603      	mov	r3, r0
 8003dae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003db4:	4618      	mov	r0, r3
 8003db6:	f7ff ff31 	bl	8003c1c <__NVIC_EnableIRQ>
}
 8003dba:	bf00      	nop
 8003dbc:	3708      	adds	r7, #8
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}

08003dc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003dc2:	b580      	push	{r7, lr}
 8003dc4:	b082      	sub	sp, #8
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f7ff ffa2 	bl	8003d14 <SysTick_Config>
 8003dd0:	4603      	mov	r3, r0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3708      	adds	r7, #8
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
	...

08003ddc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b086      	sub	sp, #24
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003de4:	2300      	movs	r3, #0
 8003de6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003de8:	f7ff feb6 	bl	8003b58 <HAL_GetTick>
 8003dec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d101      	bne.n	8003df8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e099      	b.n	8003f2c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2202      	movs	r2, #2
 8003dfc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f022 0201 	bic.w	r2, r2, #1
 8003e16:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e18:	e00f      	b.n	8003e3a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e1a:	f7ff fe9d 	bl	8003b58 <HAL_GetTick>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	2b05      	cmp	r3, #5
 8003e26:	d908      	bls.n	8003e3a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2220      	movs	r2, #32
 8003e2c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2203      	movs	r2, #3
 8003e32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e078      	b.n	8003f2c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0301 	and.w	r3, r3, #1
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d1e8      	bne.n	8003e1a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003e50:	697a      	ldr	r2, [r7, #20]
 8003e52:	4b38      	ldr	r3, [pc, #224]	@ (8003f34 <HAL_DMA_Init+0x158>)
 8003e54:	4013      	ands	r3, r2
 8003e56:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685a      	ldr	r2, [r3, #4]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e66:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	691b      	ldr	r3, [r3, #16]
 8003e6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	699b      	ldr	r3, [r3, #24]
 8003e78:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6a1b      	ldr	r3, [r3, #32]
 8003e84:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e86:	697a      	ldr	r2, [r7, #20]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e90:	2b04      	cmp	r3, #4
 8003e92:	d107      	bne.n	8003ea4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	697a      	ldr	r2, [r7, #20]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	697a      	ldr	r2, [r7, #20]
 8003eaa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	695b      	ldr	r3, [r3, #20]
 8003eb2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	f023 0307 	bic.w	r3, r3, #7
 8003eba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec0:	697a      	ldr	r2, [r7, #20]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eca:	2b04      	cmp	r3, #4
 8003ecc:	d117      	bne.n	8003efe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ed2:	697a      	ldr	r2, [r7, #20]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d00e      	beq.n	8003efe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f000 fb01 	bl	80044e8 <DMA_CheckFifoParam>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d008      	beq.n	8003efe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2240      	movs	r2, #64	@ 0x40
 8003ef0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003efa:	2301      	movs	r3, #1
 8003efc:	e016      	b.n	8003f2c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	697a      	ldr	r2, [r7, #20]
 8003f04:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 fab8 	bl	800447c <DMA_CalcBaseAndBitshift>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f14:	223f      	movs	r2, #63	@ 0x3f
 8003f16:	409a      	lsls	r2, r3
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2201      	movs	r2, #1
 8003f26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003f2a:	2300      	movs	r3, #0
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3718      	adds	r7, #24
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	f010803f 	.word	0xf010803f

08003f38 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b086      	sub	sp, #24
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	607a      	str	r2, [r7, #4]
 8003f44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f46:	2300      	movs	r3, #0
 8003f48:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f4e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d101      	bne.n	8003f5e <HAL_DMA_Start_IT+0x26>
 8003f5a:	2302      	movs	r3, #2
 8003f5c:	e040      	b.n	8003fe0 <HAL_DMA_Start_IT+0xa8>
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2201      	movs	r2, #1
 8003f62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d12f      	bne.n	8003fd2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2202      	movs	r2, #2
 8003f76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	68b9      	ldr	r1, [r7, #8]
 8003f86:	68f8      	ldr	r0, [r7, #12]
 8003f88:	f000 fa4a 	bl	8004420 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f90:	223f      	movs	r2, #63	@ 0x3f
 8003f92:	409a      	lsls	r2, r3
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f042 0216 	orr.w	r2, r2, #22
 8003fa6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d007      	beq.n	8003fc0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f042 0208 	orr.w	r2, r2, #8
 8003fbe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f042 0201 	orr.w	r2, r2, #1
 8003fce:	601a      	str	r2, [r3, #0]
 8003fd0:	e005      	b.n	8003fde <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003fda:	2302      	movs	r3, #2
 8003fdc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003fde:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3718      	adds	r7, #24
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ff4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003ff6:	f7ff fdaf 	bl	8003b58 <HAL_GetTick>
 8003ffa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004002:	b2db      	uxtb	r3, r3
 8004004:	2b02      	cmp	r3, #2
 8004006:	d008      	beq.n	800401a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2280      	movs	r2, #128	@ 0x80
 800400c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e052      	b.n	80040c0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f022 0216 	bic.w	r2, r2, #22
 8004028:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	695a      	ldr	r2, [r3, #20]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004038:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800403e:	2b00      	cmp	r3, #0
 8004040:	d103      	bne.n	800404a <HAL_DMA_Abort+0x62>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004046:	2b00      	cmp	r3, #0
 8004048:	d007      	beq.n	800405a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f022 0208 	bic.w	r2, r2, #8
 8004058:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f022 0201 	bic.w	r2, r2, #1
 8004068:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800406a:	e013      	b.n	8004094 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800406c:	f7ff fd74 	bl	8003b58 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	2b05      	cmp	r3, #5
 8004078:	d90c      	bls.n	8004094 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2220      	movs	r2, #32
 800407e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2203      	movs	r2, #3
 8004084:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e015      	b.n	80040c0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0301 	and.w	r3, r3, #1
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d1e4      	bne.n	800406c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040a6:	223f      	movs	r2, #63	@ 0x3f
 80040a8:	409a      	lsls	r2, r3
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2201      	movs	r2, #1
 80040b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80040be:	2300      	movs	r3, #0
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3710      	adds	r7, #16
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d004      	beq.n	80040e6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2280      	movs	r2, #128	@ 0x80
 80040e0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e00c      	b.n	8004100 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2205      	movs	r2, #5
 80040ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f022 0201 	bic.w	r2, r2, #1
 80040fc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80040fe:	2300      	movs	r3, #0
}
 8004100:	4618      	mov	r0, r3
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b086      	sub	sp, #24
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004114:	2300      	movs	r3, #0
 8004116:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004118:	4b8e      	ldr	r3, [pc, #568]	@ (8004354 <HAL_DMA_IRQHandler+0x248>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a8e      	ldr	r2, [pc, #568]	@ (8004358 <HAL_DMA_IRQHandler+0x24c>)
 800411e:	fba2 2303 	umull	r2, r3, r2, r3
 8004122:	0a9b      	lsrs	r3, r3, #10
 8004124:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800412a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004136:	2208      	movs	r2, #8
 8004138:	409a      	lsls	r2, r3
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	4013      	ands	r3, r2
 800413e:	2b00      	cmp	r3, #0
 8004140:	d01a      	beq.n	8004178 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0304 	and.w	r3, r3, #4
 800414c:	2b00      	cmp	r3, #0
 800414e:	d013      	beq.n	8004178 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f022 0204 	bic.w	r2, r2, #4
 800415e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004164:	2208      	movs	r2, #8
 8004166:	409a      	lsls	r2, r3
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004170:	f043 0201 	orr.w	r2, r3, #1
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800417c:	2201      	movs	r2, #1
 800417e:	409a      	lsls	r2, r3
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	4013      	ands	r3, r2
 8004184:	2b00      	cmp	r3, #0
 8004186:	d012      	beq.n	80041ae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	695b      	ldr	r3, [r3, #20]
 800418e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00b      	beq.n	80041ae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800419a:	2201      	movs	r2, #1
 800419c:	409a      	lsls	r2, r3
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041a6:	f043 0202 	orr.w	r2, r3, #2
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041b2:	2204      	movs	r2, #4
 80041b4:	409a      	lsls	r2, r3
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	4013      	ands	r3, r2
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d012      	beq.n	80041e4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0302 	and.w	r3, r3, #2
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d00b      	beq.n	80041e4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041d0:	2204      	movs	r2, #4
 80041d2:	409a      	lsls	r2, r3
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041dc:	f043 0204 	orr.w	r2, r3, #4
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041e8:	2210      	movs	r2, #16
 80041ea:	409a      	lsls	r2, r3
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	4013      	ands	r3, r2
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d043      	beq.n	800427c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0308 	and.w	r3, r3, #8
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d03c      	beq.n	800427c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004206:	2210      	movs	r2, #16
 8004208:	409a      	lsls	r2, r3
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d018      	beq.n	800424e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d108      	bne.n	800423c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800422e:	2b00      	cmp	r3, #0
 8004230:	d024      	beq.n	800427c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	4798      	blx	r3
 800423a:	e01f      	b.n	800427c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004240:	2b00      	cmp	r3, #0
 8004242:	d01b      	beq.n	800427c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	4798      	blx	r3
 800424c:	e016      	b.n	800427c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004258:	2b00      	cmp	r3, #0
 800425a:	d107      	bne.n	800426c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f022 0208 	bic.w	r2, r2, #8
 800426a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004270:	2b00      	cmp	r3, #0
 8004272:	d003      	beq.n	800427c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004280:	2220      	movs	r2, #32
 8004282:	409a      	lsls	r2, r3
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	4013      	ands	r3, r2
 8004288:	2b00      	cmp	r3, #0
 800428a:	f000 808f 	beq.w	80043ac <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0310 	and.w	r3, r3, #16
 8004298:	2b00      	cmp	r3, #0
 800429a:	f000 8087 	beq.w	80043ac <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042a2:	2220      	movs	r2, #32
 80042a4:	409a      	lsls	r2, r3
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	2b05      	cmp	r3, #5
 80042b4:	d136      	bne.n	8004324 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f022 0216 	bic.w	r2, r2, #22
 80042c4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	695a      	ldr	r2, [r3, #20]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80042d4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d103      	bne.n	80042e6 <HAL_DMA_IRQHandler+0x1da>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d007      	beq.n	80042f6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f022 0208 	bic.w	r2, r2, #8
 80042f4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042fa:	223f      	movs	r2, #63	@ 0x3f
 80042fc:	409a      	lsls	r2, r3
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2201      	movs	r2, #1
 8004306:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004316:	2b00      	cmp	r3, #0
 8004318:	d07e      	beq.n	8004418 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	4798      	blx	r3
        }
        return;
 8004322:	e079      	b.n	8004418 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800432e:	2b00      	cmp	r3, #0
 8004330:	d01d      	beq.n	800436e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d10d      	bne.n	800435c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004344:	2b00      	cmp	r3, #0
 8004346:	d031      	beq.n	80043ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	4798      	blx	r3
 8004350:	e02c      	b.n	80043ac <HAL_DMA_IRQHandler+0x2a0>
 8004352:	bf00      	nop
 8004354:	20000034 	.word	0x20000034
 8004358:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004360:	2b00      	cmp	r3, #0
 8004362:	d023      	beq.n	80043ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	4798      	blx	r3
 800436c:	e01e      	b.n	80043ac <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004378:	2b00      	cmp	r3, #0
 800437a:	d10f      	bne.n	800439c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f022 0210 	bic.w	r2, r2, #16
 800438a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d003      	beq.n	80043ac <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d032      	beq.n	800441a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043b8:	f003 0301 	and.w	r3, r3, #1
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d022      	beq.n	8004406 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2205      	movs	r2, #5
 80043c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f022 0201 	bic.w	r2, r2, #1
 80043d6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	3301      	adds	r3, #1
 80043dc:	60bb      	str	r3, [r7, #8]
 80043de:	697a      	ldr	r2, [r7, #20]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d307      	bcc.n	80043f4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0301 	and.w	r3, r3, #1
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1f2      	bne.n	80043d8 <HAL_DMA_IRQHandler+0x2cc>
 80043f2:	e000      	b.n	80043f6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80043f4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2201      	movs	r2, #1
 80043fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800440a:	2b00      	cmp	r3, #0
 800440c:	d005      	beq.n	800441a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	4798      	blx	r3
 8004416:	e000      	b.n	800441a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004418:	bf00      	nop
    }
  }
}
 800441a:	3718      	adds	r7, #24
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}

08004420 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004420:	b480      	push	{r7}
 8004422:	b085      	sub	sp, #20
 8004424:	af00      	add	r7, sp, #0
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	607a      	str	r2, [r7, #4]
 800442c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800443c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	683a      	ldr	r2, [r7, #0]
 8004444:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	2b40      	cmp	r3, #64	@ 0x40
 800444c:	d108      	bne.n	8004460 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	68ba      	ldr	r2, [r7, #8]
 800445c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800445e:	e007      	b.n	8004470 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	68ba      	ldr	r2, [r7, #8]
 8004466:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	60da      	str	r2, [r3, #12]
}
 8004470:	bf00      	nop
 8004472:	3714      	adds	r7, #20
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800447c:	b480      	push	{r7}
 800447e:	b085      	sub	sp, #20
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	b2db      	uxtb	r3, r3
 800448a:	3b10      	subs	r3, #16
 800448c:	4a14      	ldr	r2, [pc, #80]	@ (80044e0 <DMA_CalcBaseAndBitshift+0x64>)
 800448e:	fba2 2303 	umull	r2, r3, r2, r3
 8004492:	091b      	lsrs	r3, r3, #4
 8004494:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004496:	4a13      	ldr	r2, [pc, #76]	@ (80044e4 <DMA_CalcBaseAndBitshift+0x68>)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	4413      	add	r3, r2
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	461a      	mov	r2, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2b03      	cmp	r3, #3
 80044a8:	d909      	bls.n	80044be <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80044b2:	f023 0303 	bic.w	r3, r3, #3
 80044b6:	1d1a      	adds	r2, r3, #4
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	659a      	str	r2, [r3, #88]	@ 0x58
 80044bc:	e007      	b.n	80044ce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80044c6:	f023 0303 	bic.w	r3, r3, #3
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3714      	adds	r7, #20
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	aaaaaaab 	.word	0xaaaaaaab
 80044e4:	0800d8e8 	.word	0x0800d8e8

080044e8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b085      	sub	sp, #20
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044f0:	2300      	movs	r3, #0
 80044f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044f8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	699b      	ldr	r3, [r3, #24]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d11f      	bne.n	8004542 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	2b03      	cmp	r3, #3
 8004506:	d856      	bhi.n	80045b6 <DMA_CheckFifoParam+0xce>
 8004508:	a201      	add	r2, pc, #4	@ (adr r2, 8004510 <DMA_CheckFifoParam+0x28>)
 800450a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800450e:	bf00      	nop
 8004510:	08004521 	.word	0x08004521
 8004514:	08004533 	.word	0x08004533
 8004518:	08004521 	.word	0x08004521
 800451c:	080045b7 	.word	0x080045b7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004524:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d046      	beq.n	80045ba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004530:	e043      	b.n	80045ba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004536:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800453a:	d140      	bne.n	80045be <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004540:	e03d      	b.n	80045be <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	699b      	ldr	r3, [r3, #24]
 8004546:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800454a:	d121      	bne.n	8004590 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	2b03      	cmp	r3, #3
 8004550:	d837      	bhi.n	80045c2 <DMA_CheckFifoParam+0xda>
 8004552:	a201      	add	r2, pc, #4	@ (adr r2, 8004558 <DMA_CheckFifoParam+0x70>)
 8004554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004558:	08004569 	.word	0x08004569
 800455c:	0800456f 	.word	0x0800456f
 8004560:	08004569 	.word	0x08004569
 8004564:	08004581 	.word	0x08004581
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	73fb      	strb	r3, [r7, #15]
      break;
 800456c:	e030      	b.n	80045d0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004572:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d025      	beq.n	80045c6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800457e:	e022      	b.n	80045c6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004584:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004588:	d11f      	bne.n	80045ca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800458e:	e01c      	b.n	80045ca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	2b02      	cmp	r3, #2
 8004594:	d903      	bls.n	800459e <DMA_CheckFifoParam+0xb6>
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	2b03      	cmp	r3, #3
 800459a:	d003      	beq.n	80045a4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800459c:	e018      	b.n	80045d0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	73fb      	strb	r3, [r7, #15]
      break;
 80045a2:	e015      	b.n	80045d0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d00e      	beq.n	80045ce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	73fb      	strb	r3, [r7, #15]
      break;
 80045b4:	e00b      	b.n	80045ce <DMA_CheckFifoParam+0xe6>
      break;
 80045b6:	bf00      	nop
 80045b8:	e00a      	b.n	80045d0 <DMA_CheckFifoParam+0xe8>
      break;
 80045ba:	bf00      	nop
 80045bc:	e008      	b.n	80045d0 <DMA_CheckFifoParam+0xe8>
      break;
 80045be:	bf00      	nop
 80045c0:	e006      	b.n	80045d0 <DMA_CheckFifoParam+0xe8>
      break;
 80045c2:	bf00      	nop
 80045c4:	e004      	b.n	80045d0 <DMA_CheckFifoParam+0xe8>
      break;
 80045c6:	bf00      	nop
 80045c8:	e002      	b.n	80045d0 <DMA_CheckFifoParam+0xe8>
      break;   
 80045ca:	bf00      	nop
 80045cc:	e000      	b.n	80045d0 <DMA_CheckFifoParam+0xe8>
      break;
 80045ce:	bf00      	nop
    }
  } 
  
  return status; 
 80045d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3714      	adds	r7, #20
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr
 80045de:	bf00      	nop

080045e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b089      	sub	sp, #36	@ 0x24
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80045ea:	2300      	movs	r3, #0
 80045ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80045ee:	2300      	movs	r3, #0
 80045f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80045f2:	2300      	movs	r3, #0
 80045f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045f6:	2300      	movs	r3, #0
 80045f8:	61fb      	str	r3, [r7, #28]
 80045fa:	e16b      	b.n	80048d4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80045fc:	2201      	movs	r2, #1
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	fa02 f303 	lsl.w	r3, r2, r3
 8004604:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	697a      	ldr	r2, [r7, #20]
 800460c:	4013      	ands	r3, r2
 800460e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004610:	693a      	ldr	r2, [r7, #16]
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	429a      	cmp	r2, r3
 8004616:	f040 815a 	bne.w	80048ce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	f003 0303 	and.w	r3, r3, #3
 8004622:	2b01      	cmp	r3, #1
 8004624:	d005      	beq.n	8004632 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800462e:	2b02      	cmp	r3, #2
 8004630:	d130      	bne.n	8004694 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	005b      	lsls	r3, r3, #1
 800463c:	2203      	movs	r2, #3
 800463e:	fa02 f303 	lsl.w	r3, r2, r3
 8004642:	43db      	mvns	r3, r3
 8004644:	69ba      	ldr	r2, [r7, #24]
 8004646:	4013      	ands	r3, r2
 8004648:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	68da      	ldr	r2, [r3, #12]
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	005b      	lsls	r3, r3, #1
 8004652:	fa02 f303 	lsl.w	r3, r2, r3
 8004656:	69ba      	ldr	r2, [r7, #24]
 8004658:	4313      	orrs	r3, r2
 800465a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	69ba      	ldr	r2, [r7, #24]
 8004660:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004668:	2201      	movs	r2, #1
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	fa02 f303 	lsl.w	r3, r2, r3
 8004670:	43db      	mvns	r3, r3
 8004672:	69ba      	ldr	r2, [r7, #24]
 8004674:	4013      	ands	r3, r2
 8004676:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	091b      	lsrs	r3, r3, #4
 800467e:	f003 0201 	and.w	r2, r3, #1
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	fa02 f303 	lsl.w	r3, r2, r3
 8004688:	69ba      	ldr	r2, [r7, #24]
 800468a:	4313      	orrs	r3, r2
 800468c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	69ba      	ldr	r2, [r7, #24]
 8004692:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	f003 0303 	and.w	r3, r3, #3
 800469c:	2b03      	cmp	r3, #3
 800469e:	d017      	beq.n	80046d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	005b      	lsls	r3, r3, #1
 80046aa:	2203      	movs	r2, #3
 80046ac:	fa02 f303 	lsl.w	r3, r2, r3
 80046b0:	43db      	mvns	r3, r3
 80046b2:	69ba      	ldr	r2, [r7, #24]
 80046b4:	4013      	ands	r3, r2
 80046b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	689a      	ldr	r2, [r3, #8]
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	005b      	lsls	r3, r3, #1
 80046c0:	fa02 f303 	lsl.w	r3, r2, r3
 80046c4:	69ba      	ldr	r2, [r7, #24]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	69ba      	ldr	r2, [r7, #24]
 80046ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	f003 0303 	and.w	r3, r3, #3
 80046d8:	2b02      	cmp	r3, #2
 80046da:	d123      	bne.n	8004724 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	08da      	lsrs	r2, r3, #3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	3208      	adds	r2, #8
 80046e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	f003 0307 	and.w	r3, r3, #7
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	220f      	movs	r2, #15
 80046f4:	fa02 f303 	lsl.w	r3, r2, r3
 80046f8:	43db      	mvns	r3, r3
 80046fa:	69ba      	ldr	r2, [r7, #24]
 80046fc:	4013      	ands	r3, r2
 80046fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	691a      	ldr	r2, [r3, #16]
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	f003 0307 	and.w	r3, r3, #7
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	fa02 f303 	lsl.w	r3, r2, r3
 8004710:	69ba      	ldr	r2, [r7, #24]
 8004712:	4313      	orrs	r3, r2
 8004714:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	08da      	lsrs	r2, r3, #3
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	3208      	adds	r2, #8
 800471e:	69b9      	ldr	r1, [r7, #24]
 8004720:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	005b      	lsls	r3, r3, #1
 800472e:	2203      	movs	r2, #3
 8004730:	fa02 f303 	lsl.w	r3, r2, r3
 8004734:	43db      	mvns	r3, r3
 8004736:	69ba      	ldr	r2, [r7, #24]
 8004738:	4013      	ands	r3, r2
 800473a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	f003 0203 	and.w	r2, r3, #3
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	005b      	lsls	r3, r3, #1
 8004748:	fa02 f303 	lsl.w	r3, r2, r3
 800474c:	69ba      	ldr	r2, [r7, #24]
 800474e:	4313      	orrs	r3, r2
 8004750:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	69ba      	ldr	r2, [r7, #24]
 8004756:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004760:	2b00      	cmp	r3, #0
 8004762:	f000 80b4 	beq.w	80048ce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004766:	2300      	movs	r3, #0
 8004768:	60fb      	str	r3, [r7, #12]
 800476a:	4b60      	ldr	r3, [pc, #384]	@ (80048ec <HAL_GPIO_Init+0x30c>)
 800476c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800476e:	4a5f      	ldr	r2, [pc, #380]	@ (80048ec <HAL_GPIO_Init+0x30c>)
 8004770:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004774:	6453      	str	r3, [r2, #68]	@ 0x44
 8004776:	4b5d      	ldr	r3, [pc, #372]	@ (80048ec <HAL_GPIO_Init+0x30c>)
 8004778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800477a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800477e:	60fb      	str	r3, [r7, #12]
 8004780:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004782:	4a5b      	ldr	r2, [pc, #364]	@ (80048f0 <HAL_GPIO_Init+0x310>)
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	089b      	lsrs	r3, r3, #2
 8004788:	3302      	adds	r3, #2
 800478a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800478e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004790:	69fb      	ldr	r3, [r7, #28]
 8004792:	f003 0303 	and.w	r3, r3, #3
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	220f      	movs	r2, #15
 800479a:	fa02 f303 	lsl.w	r3, r2, r3
 800479e:	43db      	mvns	r3, r3
 80047a0:	69ba      	ldr	r2, [r7, #24]
 80047a2:	4013      	ands	r3, r2
 80047a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a52      	ldr	r2, [pc, #328]	@ (80048f4 <HAL_GPIO_Init+0x314>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d02b      	beq.n	8004806 <HAL_GPIO_Init+0x226>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a51      	ldr	r2, [pc, #324]	@ (80048f8 <HAL_GPIO_Init+0x318>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d025      	beq.n	8004802 <HAL_GPIO_Init+0x222>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a50      	ldr	r2, [pc, #320]	@ (80048fc <HAL_GPIO_Init+0x31c>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d01f      	beq.n	80047fe <HAL_GPIO_Init+0x21e>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a4f      	ldr	r2, [pc, #316]	@ (8004900 <HAL_GPIO_Init+0x320>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d019      	beq.n	80047fa <HAL_GPIO_Init+0x21a>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a4e      	ldr	r2, [pc, #312]	@ (8004904 <HAL_GPIO_Init+0x324>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d013      	beq.n	80047f6 <HAL_GPIO_Init+0x216>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a4d      	ldr	r2, [pc, #308]	@ (8004908 <HAL_GPIO_Init+0x328>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d00d      	beq.n	80047f2 <HAL_GPIO_Init+0x212>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a4c      	ldr	r2, [pc, #304]	@ (800490c <HAL_GPIO_Init+0x32c>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d007      	beq.n	80047ee <HAL_GPIO_Init+0x20e>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a4b      	ldr	r2, [pc, #300]	@ (8004910 <HAL_GPIO_Init+0x330>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d101      	bne.n	80047ea <HAL_GPIO_Init+0x20a>
 80047e6:	2307      	movs	r3, #7
 80047e8:	e00e      	b.n	8004808 <HAL_GPIO_Init+0x228>
 80047ea:	2308      	movs	r3, #8
 80047ec:	e00c      	b.n	8004808 <HAL_GPIO_Init+0x228>
 80047ee:	2306      	movs	r3, #6
 80047f0:	e00a      	b.n	8004808 <HAL_GPIO_Init+0x228>
 80047f2:	2305      	movs	r3, #5
 80047f4:	e008      	b.n	8004808 <HAL_GPIO_Init+0x228>
 80047f6:	2304      	movs	r3, #4
 80047f8:	e006      	b.n	8004808 <HAL_GPIO_Init+0x228>
 80047fa:	2303      	movs	r3, #3
 80047fc:	e004      	b.n	8004808 <HAL_GPIO_Init+0x228>
 80047fe:	2302      	movs	r3, #2
 8004800:	e002      	b.n	8004808 <HAL_GPIO_Init+0x228>
 8004802:	2301      	movs	r3, #1
 8004804:	e000      	b.n	8004808 <HAL_GPIO_Init+0x228>
 8004806:	2300      	movs	r3, #0
 8004808:	69fa      	ldr	r2, [r7, #28]
 800480a:	f002 0203 	and.w	r2, r2, #3
 800480e:	0092      	lsls	r2, r2, #2
 8004810:	4093      	lsls	r3, r2
 8004812:	69ba      	ldr	r2, [r7, #24]
 8004814:	4313      	orrs	r3, r2
 8004816:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004818:	4935      	ldr	r1, [pc, #212]	@ (80048f0 <HAL_GPIO_Init+0x310>)
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	089b      	lsrs	r3, r3, #2
 800481e:	3302      	adds	r3, #2
 8004820:	69ba      	ldr	r2, [r7, #24]
 8004822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004826:	4b3b      	ldr	r3, [pc, #236]	@ (8004914 <HAL_GPIO_Init+0x334>)
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	43db      	mvns	r3, r3
 8004830:	69ba      	ldr	r2, [r7, #24]
 8004832:	4013      	ands	r3, r2
 8004834:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d003      	beq.n	800484a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004842:	69ba      	ldr	r2, [r7, #24]
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	4313      	orrs	r3, r2
 8004848:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800484a:	4a32      	ldr	r2, [pc, #200]	@ (8004914 <HAL_GPIO_Init+0x334>)
 800484c:	69bb      	ldr	r3, [r7, #24]
 800484e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004850:	4b30      	ldr	r3, [pc, #192]	@ (8004914 <HAL_GPIO_Init+0x334>)
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	43db      	mvns	r3, r3
 800485a:	69ba      	ldr	r2, [r7, #24]
 800485c:	4013      	ands	r3, r2
 800485e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004868:	2b00      	cmp	r3, #0
 800486a:	d003      	beq.n	8004874 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800486c:	69ba      	ldr	r2, [r7, #24]
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	4313      	orrs	r3, r2
 8004872:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004874:	4a27      	ldr	r2, [pc, #156]	@ (8004914 <HAL_GPIO_Init+0x334>)
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800487a:	4b26      	ldr	r3, [pc, #152]	@ (8004914 <HAL_GPIO_Init+0x334>)
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	43db      	mvns	r3, r3
 8004884:	69ba      	ldr	r2, [r7, #24]
 8004886:	4013      	ands	r3, r2
 8004888:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004892:	2b00      	cmp	r3, #0
 8004894:	d003      	beq.n	800489e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004896:	69ba      	ldr	r2, [r7, #24]
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	4313      	orrs	r3, r2
 800489c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800489e:	4a1d      	ldr	r2, [pc, #116]	@ (8004914 <HAL_GPIO_Init+0x334>)
 80048a0:	69bb      	ldr	r3, [r7, #24]
 80048a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80048a4:	4b1b      	ldr	r3, [pc, #108]	@ (8004914 <HAL_GPIO_Init+0x334>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	43db      	mvns	r3, r3
 80048ae:	69ba      	ldr	r2, [r7, #24]
 80048b0:	4013      	ands	r3, r2
 80048b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d003      	beq.n	80048c8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80048c0:	69ba      	ldr	r2, [r7, #24]
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80048c8:	4a12      	ldr	r2, [pc, #72]	@ (8004914 <HAL_GPIO_Init+0x334>)
 80048ca:	69bb      	ldr	r3, [r7, #24]
 80048cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	3301      	adds	r3, #1
 80048d2:	61fb      	str	r3, [r7, #28]
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	2b0f      	cmp	r3, #15
 80048d8:	f67f ae90 	bls.w	80045fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80048dc:	bf00      	nop
 80048de:	bf00      	nop
 80048e0:	3724      	adds	r7, #36	@ 0x24
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr
 80048ea:	bf00      	nop
 80048ec:	40023800 	.word	0x40023800
 80048f0:	40013800 	.word	0x40013800
 80048f4:	40020000 	.word	0x40020000
 80048f8:	40020400 	.word	0x40020400
 80048fc:	40020800 	.word	0x40020800
 8004900:	40020c00 	.word	0x40020c00
 8004904:	40021000 	.word	0x40021000
 8004908:	40021400 	.word	0x40021400
 800490c:	40021800 	.word	0x40021800
 8004910:	40021c00 	.word	0x40021c00
 8004914:	40013c00 	.word	0x40013c00

08004918 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	460b      	mov	r3, r1
 8004922:	807b      	strh	r3, [r7, #2]
 8004924:	4613      	mov	r3, r2
 8004926:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004928:	787b      	ldrb	r3, [r7, #1]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d003      	beq.n	8004936 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800492e:	887a      	ldrh	r2, [r7, #2]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004934:	e003      	b.n	800493e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004936:	887b      	ldrh	r3, [r7, #2]
 8004938:	041a      	lsls	r2, r3, #16
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	619a      	str	r2, [r3, #24]
}
 800493e:	bf00      	nop
 8004940:	370c      	adds	r7, #12
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr
	...

0800494c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d101      	bne.n	800495e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e12b      	b.n	8004bb6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004964:	b2db      	uxtb	r3, r3
 8004966:	2b00      	cmp	r3, #0
 8004968:	d106      	bne.n	8004978 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f7fc fcc8 	bl	8001308 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2224      	movs	r2, #36	@ 0x24
 800497c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f022 0201 	bic.w	r2, r2, #1
 800498e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800499e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80049ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80049b0:	f001 f89a 	bl	8005ae8 <HAL_RCC_GetPCLK1Freq>
 80049b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	4a81      	ldr	r2, [pc, #516]	@ (8004bc0 <HAL_I2C_Init+0x274>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d807      	bhi.n	80049d0 <HAL_I2C_Init+0x84>
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	4a80      	ldr	r2, [pc, #512]	@ (8004bc4 <HAL_I2C_Init+0x278>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	bf94      	ite	ls
 80049c8:	2301      	movls	r3, #1
 80049ca:	2300      	movhi	r3, #0
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	e006      	b.n	80049de <HAL_I2C_Init+0x92>
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	4a7d      	ldr	r2, [pc, #500]	@ (8004bc8 <HAL_I2C_Init+0x27c>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	bf94      	ite	ls
 80049d8:	2301      	movls	r3, #1
 80049da:	2300      	movhi	r3, #0
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d001      	beq.n	80049e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e0e7      	b.n	8004bb6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	4a78      	ldr	r2, [pc, #480]	@ (8004bcc <HAL_I2C_Init+0x280>)
 80049ea:	fba2 2303 	umull	r2, r3, r2, r3
 80049ee:	0c9b      	lsrs	r3, r3, #18
 80049f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	68ba      	ldr	r2, [r7, #8]
 8004a02:	430a      	orrs	r2, r1
 8004a04:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	6a1b      	ldr	r3, [r3, #32]
 8004a0c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	4a6a      	ldr	r2, [pc, #424]	@ (8004bc0 <HAL_I2C_Init+0x274>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d802      	bhi.n	8004a20 <HAL_I2C_Init+0xd4>
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	3301      	adds	r3, #1
 8004a1e:	e009      	b.n	8004a34 <HAL_I2C_Init+0xe8>
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004a26:	fb02 f303 	mul.w	r3, r2, r3
 8004a2a:	4a69      	ldr	r2, [pc, #420]	@ (8004bd0 <HAL_I2C_Init+0x284>)
 8004a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a30:	099b      	lsrs	r3, r3, #6
 8004a32:	3301      	adds	r3, #1
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	6812      	ldr	r2, [r2, #0]
 8004a38:	430b      	orrs	r3, r1
 8004a3a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	69db      	ldr	r3, [r3, #28]
 8004a42:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004a46:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	495c      	ldr	r1, [pc, #368]	@ (8004bc0 <HAL_I2C_Init+0x274>)
 8004a50:	428b      	cmp	r3, r1
 8004a52:	d819      	bhi.n	8004a88 <HAL_I2C_Init+0x13c>
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	1e59      	subs	r1, r3, #1
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	005b      	lsls	r3, r3, #1
 8004a5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a62:	1c59      	adds	r1, r3, #1
 8004a64:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004a68:	400b      	ands	r3, r1
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d00a      	beq.n	8004a84 <HAL_I2C_Init+0x138>
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	1e59      	subs	r1, r3, #1
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	005b      	lsls	r3, r3, #1
 8004a78:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a82:	e051      	b.n	8004b28 <HAL_I2C_Init+0x1dc>
 8004a84:	2304      	movs	r3, #4
 8004a86:	e04f      	b.n	8004b28 <HAL_I2C_Init+0x1dc>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d111      	bne.n	8004ab4 <HAL_I2C_Init+0x168>
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	1e58      	subs	r0, r3, #1
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6859      	ldr	r1, [r3, #4]
 8004a98:	460b      	mov	r3, r1
 8004a9a:	005b      	lsls	r3, r3, #1
 8004a9c:	440b      	add	r3, r1
 8004a9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004aa2:	3301      	adds	r3, #1
 8004aa4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	bf0c      	ite	eq
 8004aac:	2301      	moveq	r3, #1
 8004aae:	2300      	movne	r3, #0
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	e012      	b.n	8004ada <HAL_I2C_Init+0x18e>
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	1e58      	subs	r0, r3, #1
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6859      	ldr	r1, [r3, #4]
 8004abc:	460b      	mov	r3, r1
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	440b      	add	r3, r1
 8004ac2:	0099      	lsls	r1, r3, #2
 8004ac4:	440b      	add	r3, r1
 8004ac6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004aca:	3301      	adds	r3, #1
 8004acc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	bf0c      	ite	eq
 8004ad4:	2301      	moveq	r3, #1
 8004ad6:	2300      	movne	r3, #0
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d001      	beq.n	8004ae2 <HAL_I2C_Init+0x196>
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e022      	b.n	8004b28 <HAL_I2C_Init+0x1dc>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d10e      	bne.n	8004b08 <HAL_I2C_Init+0x1bc>
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	1e58      	subs	r0, r3, #1
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6859      	ldr	r1, [r3, #4]
 8004af2:	460b      	mov	r3, r1
 8004af4:	005b      	lsls	r3, r3, #1
 8004af6:	440b      	add	r3, r1
 8004af8:	fbb0 f3f3 	udiv	r3, r0, r3
 8004afc:	3301      	adds	r3, #1
 8004afe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b06:	e00f      	b.n	8004b28 <HAL_I2C_Init+0x1dc>
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	1e58      	subs	r0, r3, #1
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6859      	ldr	r1, [r3, #4]
 8004b10:	460b      	mov	r3, r1
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	440b      	add	r3, r1
 8004b16:	0099      	lsls	r1, r3, #2
 8004b18:	440b      	add	r3, r1
 8004b1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b1e:	3301      	adds	r3, #1
 8004b20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b24:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004b28:	6879      	ldr	r1, [r7, #4]
 8004b2a:	6809      	ldr	r1, [r1, #0]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	69da      	ldr	r2, [r3, #28]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a1b      	ldr	r3, [r3, #32]
 8004b42:	431a      	orrs	r2, r3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	430a      	orrs	r2, r1
 8004b4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004b56:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	6911      	ldr	r1, [r2, #16]
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	68d2      	ldr	r2, [r2, #12]
 8004b62:	4311      	orrs	r1, r2
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	6812      	ldr	r2, [r2, #0]
 8004b68:	430b      	orrs	r3, r1
 8004b6a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	695a      	ldr	r2, [r3, #20]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	699b      	ldr	r3, [r3, #24]
 8004b7e:	431a      	orrs	r2, r3
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	430a      	orrs	r2, r1
 8004b86:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f042 0201 	orr.w	r2, r2, #1
 8004b96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2220      	movs	r2, #32
 8004ba2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3710      	adds	r7, #16
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	000186a0 	.word	0x000186a0
 8004bc4:	001e847f 	.word	0x001e847f
 8004bc8:	003d08ff 	.word	0x003d08ff
 8004bcc:	431bde83 	.word	0x431bde83
 8004bd0:	10624dd3 	.word	0x10624dd3

08004bd4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b088      	sub	sp, #32
 8004bd8:	af02      	add	r7, sp, #8
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	607a      	str	r2, [r7, #4]
 8004bde:	461a      	mov	r2, r3
 8004be0:	460b      	mov	r3, r1
 8004be2:	817b      	strh	r3, [r7, #10]
 8004be4:	4613      	mov	r3, r2
 8004be6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004be8:	f7fe ffb6 	bl	8003b58 <HAL_GetTick>
 8004bec:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	2b20      	cmp	r3, #32
 8004bf8:	f040 80e0 	bne.w	8004dbc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	9300      	str	r3, [sp, #0]
 8004c00:	2319      	movs	r3, #25
 8004c02:	2201      	movs	r2, #1
 8004c04:	4970      	ldr	r1, [pc, #448]	@ (8004dc8 <HAL_I2C_Master_Transmit+0x1f4>)
 8004c06:	68f8      	ldr	r0, [r7, #12]
 8004c08:	f000 f964 	bl	8004ed4 <I2C_WaitOnFlagUntilTimeout>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d001      	beq.n	8004c16 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004c12:	2302      	movs	r3, #2
 8004c14:	e0d3      	b.n	8004dbe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d101      	bne.n	8004c24 <HAL_I2C_Master_Transmit+0x50>
 8004c20:	2302      	movs	r3, #2
 8004c22:	e0cc      	b.n	8004dbe <HAL_I2C_Master_Transmit+0x1ea>
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0301 	and.w	r3, r3, #1
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d007      	beq.n	8004c4a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f042 0201 	orr.w	r2, r2, #1
 8004c48:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c58:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2221      	movs	r2, #33	@ 0x21
 8004c5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2210      	movs	r2, #16
 8004c66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	893a      	ldrh	r2, [r7, #8]
 8004c7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c80:	b29a      	uxth	r2, r3
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	4a50      	ldr	r2, [pc, #320]	@ (8004dcc <HAL_I2C_Master_Transmit+0x1f8>)
 8004c8a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004c8c:	8979      	ldrh	r1, [r7, #10]
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	6a3a      	ldr	r2, [r7, #32]
 8004c92:	68f8      	ldr	r0, [r7, #12]
 8004c94:	f000 f89c 	bl	8004dd0 <I2C_MasterRequestWrite>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d001      	beq.n	8004ca2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e08d      	b.n	8004dbe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	613b      	str	r3, [r7, #16]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	695b      	ldr	r3, [r3, #20]
 8004cac:	613b      	str	r3, [r7, #16]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	699b      	ldr	r3, [r3, #24]
 8004cb4:	613b      	str	r3, [r7, #16]
 8004cb6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004cb8:	e066      	b.n	8004d88 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cba:	697a      	ldr	r2, [r7, #20]
 8004cbc:	6a39      	ldr	r1, [r7, #32]
 8004cbe:	68f8      	ldr	r0, [r7, #12]
 8004cc0:	f000 fa22 	bl	8005108 <I2C_WaitOnTXEFlagUntilTimeout>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d00d      	beq.n	8004ce6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cce:	2b04      	cmp	r3, #4
 8004cd0:	d107      	bne.n	8004ce2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ce0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e06b      	b.n	8004dbe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cea:	781a      	ldrb	r2, [r3, #0]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cf6:	1c5a      	adds	r2, r3, #1
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	3b01      	subs	r3, #1
 8004d04:	b29a      	uxth	r2, r3
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d0e:	3b01      	subs	r3, #1
 8004d10:	b29a      	uxth	r2, r3
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	695b      	ldr	r3, [r3, #20]
 8004d1c:	f003 0304 	and.w	r3, r3, #4
 8004d20:	2b04      	cmp	r3, #4
 8004d22:	d11b      	bne.n	8004d5c <HAL_I2C_Master_Transmit+0x188>
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d017      	beq.n	8004d5c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d30:	781a      	ldrb	r2, [r3, #0]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d3c:	1c5a      	adds	r2, r3, #1
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	3b01      	subs	r3, #1
 8004d4a:	b29a      	uxth	r2, r3
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d54:	3b01      	subs	r3, #1
 8004d56:	b29a      	uxth	r2, r3
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d5c:	697a      	ldr	r2, [r7, #20]
 8004d5e:	6a39      	ldr	r1, [r7, #32]
 8004d60:	68f8      	ldr	r0, [r7, #12]
 8004d62:	f000 fa19 	bl	8005198 <I2C_WaitOnBTFFlagUntilTimeout>
 8004d66:	4603      	mov	r3, r0
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d00d      	beq.n	8004d88 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d70:	2b04      	cmp	r3, #4
 8004d72:	d107      	bne.n	8004d84 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d82:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e01a      	b.n	8004dbe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d194      	bne.n	8004cba <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2220      	movs	r2, #32
 8004da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2200      	movs	r2, #0
 8004db4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004db8:	2300      	movs	r3, #0
 8004dba:	e000      	b.n	8004dbe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004dbc:	2302      	movs	r3, #2
  }
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3718      	adds	r7, #24
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	00100002 	.word	0x00100002
 8004dcc:	ffff0000 	.word	0xffff0000

08004dd0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b088      	sub	sp, #32
 8004dd4:	af02      	add	r7, sp, #8
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	607a      	str	r2, [r7, #4]
 8004dda:	603b      	str	r3, [r7, #0]
 8004ddc:	460b      	mov	r3, r1
 8004dde:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004de4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	2b08      	cmp	r3, #8
 8004dea:	d006      	beq.n	8004dfa <I2C_MasterRequestWrite+0x2a>
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d003      	beq.n	8004dfa <I2C_MasterRequestWrite+0x2a>
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004df8:	d108      	bne.n	8004e0c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e08:	601a      	str	r2, [r3, #0]
 8004e0a:	e00b      	b.n	8004e24 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e10:	2b12      	cmp	r3, #18
 8004e12:	d107      	bne.n	8004e24 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e22:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	9300      	str	r3, [sp, #0]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004e30:	68f8      	ldr	r0, [r7, #12]
 8004e32:	f000 f84f 	bl	8004ed4 <I2C_WaitOnFlagUntilTimeout>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d00d      	beq.n	8004e58 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e4a:	d103      	bne.n	8004e54 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e52:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004e54:	2303      	movs	r3, #3
 8004e56:	e035      	b.n	8004ec4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	691b      	ldr	r3, [r3, #16]
 8004e5c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e60:	d108      	bne.n	8004e74 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004e62:	897b      	ldrh	r3, [r7, #10]
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	461a      	mov	r2, r3
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004e70:	611a      	str	r2, [r3, #16]
 8004e72:	e01b      	b.n	8004eac <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004e74:	897b      	ldrh	r3, [r7, #10]
 8004e76:	11db      	asrs	r3, r3, #7
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	f003 0306 	and.w	r3, r3, #6
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	f063 030f 	orn	r3, r3, #15
 8004e84:	b2da      	uxtb	r2, r3
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	490e      	ldr	r1, [pc, #56]	@ (8004ecc <I2C_MasterRequestWrite+0xfc>)
 8004e92:	68f8      	ldr	r0, [r7, #12]
 8004e94:	f000 f898 	bl	8004fc8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d001      	beq.n	8004ea2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e010      	b.n	8004ec4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004ea2:	897b      	ldrh	r3, [r7, #10]
 8004ea4:	b2da      	uxtb	r2, r3
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	4907      	ldr	r1, [pc, #28]	@ (8004ed0 <I2C_MasterRequestWrite+0x100>)
 8004eb2:	68f8      	ldr	r0, [r7, #12]
 8004eb4:	f000 f888 	bl	8004fc8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d001      	beq.n	8004ec2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e000      	b.n	8004ec4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004ec2:	2300      	movs	r3, #0
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3718      	adds	r7, #24
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	00010008 	.word	0x00010008
 8004ed0:	00010002 	.word	0x00010002

08004ed4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	60b9      	str	r1, [r7, #8]
 8004ede:	603b      	str	r3, [r7, #0]
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ee4:	e048      	b.n	8004f78 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eec:	d044      	beq.n	8004f78 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eee:	f7fe fe33 	bl	8003b58 <HAL_GetTick>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	69bb      	ldr	r3, [r7, #24]
 8004ef6:	1ad3      	subs	r3, r2, r3
 8004ef8:	683a      	ldr	r2, [r7, #0]
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d302      	bcc.n	8004f04 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d139      	bne.n	8004f78 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	0c1b      	lsrs	r3, r3, #16
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d10d      	bne.n	8004f2a <I2C_WaitOnFlagUntilTimeout+0x56>
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	695b      	ldr	r3, [r3, #20]
 8004f14:	43da      	mvns	r2, r3
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	4013      	ands	r3, r2
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	bf0c      	ite	eq
 8004f20:	2301      	moveq	r3, #1
 8004f22:	2300      	movne	r3, #0
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	461a      	mov	r2, r3
 8004f28:	e00c      	b.n	8004f44 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	699b      	ldr	r3, [r3, #24]
 8004f30:	43da      	mvns	r2, r3
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	4013      	ands	r3, r2
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	bf0c      	ite	eq
 8004f3c:	2301      	moveq	r3, #1
 8004f3e:	2300      	movne	r3, #0
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	461a      	mov	r2, r3
 8004f44:	79fb      	ldrb	r3, [r7, #7]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d116      	bne.n	8004f78 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2220      	movs	r2, #32
 8004f54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f64:	f043 0220 	orr.w	r2, r3, #32
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e023      	b.n	8004fc0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	0c1b      	lsrs	r3, r3, #16
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d10d      	bne.n	8004f9e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	695b      	ldr	r3, [r3, #20]
 8004f88:	43da      	mvns	r2, r3
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	bf0c      	ite	eq
 8004f94:	2301      	moveq	r3, #1
 8004f96:	2300      	movne	r3, #0
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	e00c      	b.n	8004fb8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	699b      	ldr	r3, [r3, #24]
 8004fa4:	43da      	mvns	r2, r3
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	4013      	ands	r3, r2
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	bf0c      	ite	eq
 8004fb0:	2301      	moveq	r3, #1
 8004fb2:	2300      	movne	r3, #0
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	79fb      	ldrb	r3, [r7, #7]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d093      	beq.n	8004ee6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fbe:	2300      	movs	r3, #0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3710      	adds	r7, #16
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	607a      	str	r2, [r7, #4]
 8004fd4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004fd6:	e071      	b.n	80050bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	695b      	ldr	r3, [r3, #20]
 8004fde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fe2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fe6:	d123      	bne.n	8005030 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ff6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005000:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2200      	movs	r2, #0
 8005006:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2220      	movs	r2, #32
 800500c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2200      	movs	r2, #0
 8005014:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800501c:	f043 0204 	orr.w	r2, r3, #4
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2200      	movs	r2, #0
 8005028:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e067      	b.n	8005100 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005036:	d041      	beq.n	80050bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005038:	f7fe fd8e 	bl	8003b58 <HAL_GetTick>
 800503c:	4602      	mov	r2, r0
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	429a      	cmp	r2, r3
 8005046:	d302      	bcc.n	800504e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d136      	bne.n	80050bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	0c1b      	lsrs	r3, r3, #16
 8005052:	b2db      	uxtb	r3, r3
 8005054:	2b01      	cmp	r3, #1
 8005056:	d10c      	bne.n	8005072 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	695b      	ldr	r3, [r3, #20]
 800505e:	43da      	mvns	r2, r3
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	4013      	ands	r3, r2
 8005064:	b29b      	uxth	r3, r3
 8005066:	2b00      	cmp	r3, #0
 8005068:	bf14      	ite	ne
 800506a:	2301      	movne	r3, #1
 800506c:	2300      	moveq	r3, #0
 800506e:	b2db      	uxtb	r3, r3
 8005070:	e00b      	b.n	800508a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	699b      	ldr	r3, [r3, #24]
 8005078:	43da      	mvns	r2, r3
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	4013      	ands	r3, r2
 800507e:	b29b      	uxth	r3, r3
 8005080:	2b00      	cmp	r3, #0
 8005082:	bf14      	ite	ne
 8005084:	2301      	movne	r3, #1
 8005086:	2300      	moveq	r3, #0
 8005088:	b2db      	uxtb	r3, r3
 800508a:	2b00      	cmp	r3, #0
 800508c:	d016      	beq.n	80050bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2200      	movs	r2, #0
 8005092:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2220      	movs	r2, #32
 8005098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2200      	movs	r2, #0
 80050a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050a8:	f043 0220 	orr.w	r2, r3, #32
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e021      	b.n	8005100 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	0c1b      	lsrs	r3, r3, #16
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d10c      	bne.n	80050e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	695b      	ldr	r3, [r3, #20]
 80050cc:	43da      	mvns	r2, r3
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	4013      	ands	r3, r2
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	bf14      	ite	ne
 80050d8:	2301      	movne	r3, #1
 80050da:	2300      	moveq	r3, #0
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	e00b      	b.n	80050f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	699b      	ldr	r3, [r3, #24]
 80050e6:	43da      	mvns	r2, r3
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	4013      	ands	r3, r2
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	bf14      	ite	ne
 80050f2:	2301      	movne	r3, #1
 80050f4:	2300      	moveq	r3, #0
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	f47f af6d 	bne.w	8004fd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80050fe:	2300      	movs	r3, #0
}
 8005100:	4618      	mov	r0, r3
 8005102:	3710      	adds	r7, #16
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}

08005108 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	60b9      	str	r1, [r7, #8]
 8005112:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005114:	e034      	b.n	8005180 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005116:	68f8      	ldr	r0, [r7, #12]
 8005118:	f000 f886 	bl	8005228 <I2C_IsAcknowledgeFailed>
 800511c:	4603      	mov	r3, r0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d001      	beq.n	8005126 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e034      	b.n	8005190 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800512c:	d028      	beq.n	8005180 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800512e:	f7fe fd13 	bl	8003b58 <HAL_GetTick>
 8005132:	4602      	mov	r2, r0
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	1ad3      	subs	r3, r2, r3
 8005138:	68ba      	ldr	r2, [r7, #8]
 800513a:	429a      	cmp	r2, r3
 800513c:	d302      	bcc.n	8005144 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d11d      	bne.n	8005180 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800514e:	2b80      	cmp	r3, #128	@ 0x80
 8005150:	d016      	beq.n	8005180 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2200      	movs	r2, #0
 8005156:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2220      	movs	r2, #32
 800515c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2200      	movs	r2, #0
 8005164:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800516c:	f043 0220 	orr.w	r2, r3, #32
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2200      	movs	r2, #0
 8005178:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	e007      	b.n	8005190 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	695b      	ldr	r3, [r3, #20]
 8005186:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800518a:	2b80      	cmp	r3, #128	@ 0x80
 800518c:	d1c3      	bne.n	8005116 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	3710      	adds	r7, #16
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80051a4:	e034      	b.n	8005210 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80051a6:	68f8      	ldr	r0, [r7, #12]
 80051a8:	f000 f83e 	bl	8005228 <I2C_IsAcknowledgeFailed>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d001      	beq.n	80051b6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e034      	b.n	8005220 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051bc:	d028      	beq.n	8005210 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051be:	f7fe fccb 	bl	8003b58 <HAL_GetTick>
 80051c2:	4602      	mov	r2, r0
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	1ad3      	subs	r3, r2, r3
 80051c8:	68ba      	ldr	r2, [r7, #8]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d302      	bcc.n	80051d4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d11d      	bne.n	8005210 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	695b      	ldr	r3, [r3, #20]
 80051da:	f003 0304 	and.w	r3, r3, #4
 80051de:	2b04      	cmp	r3, #4
 80051e0:	d016      	beq.n	8005210 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2200      	movs	r2, #0
 80051e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2220      	movs	r2, #32
 80051ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051fc:	f043 0220 	orr.w	r2, r3, #32
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2200      	movs	r2, #0
 8005208:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e007      	b.n	8005220 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	695b      	ldr	r3, [r3, #20]
 8005216:	f003 0304 	and.w	r3, r3, #4
 800521a:	2b04      	cmp	r3, #4
 800521c:	d1c3      	bne.n	80051a6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800521e:	2300      	movs	r3, #0
}
 8005220:	4618      	mov	r0, r3
 8005222:	3710      	adds	r7, #16
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}

08005228 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	695b      	ldr	r3, [r3, #20]
 8005236:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800523a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800523e:	d11b      	bne.n	8005278 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005248:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2220      	movs	r2, #32
 8005254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005264:	f043 0204 	orr.w	r2, r3, #4
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e000      	b.n	800527a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005278:	2300      	movs	r3, #0
}
 800527a:	4618      	mov	r0, r3
 800527c:	370c      	adds	r7, #12
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr
	...

08005288 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b086      	sub	sp, #24
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d101      	bne.n	800529a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e267      	b.n	800576a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 0301 	and.w	r3, r3, #1
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d075      	beq.n	8005392 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80052a6:	4b88      	ldr	r3, [pc, #544]	@ (80054c8 <HAL_RCC_OscConfig+0x240>)
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	f003 030c 	and.w	r3, r3, #12
 80052ae:	2b04      	cmp	r3, #4
 80052b0:	d00c      	beq.n	80052cc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052b2:	4b85      	ldr	r3, [pc, #532]	@ (80054c8 <HAL_RCC_OscConfig+0x240>)
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80052ba:	2b08      	cmp	r3, #8
 80052bc:	d112      	bne.n	80052e4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052be:	4b82      	ldr	r3, [pc, #520]	@ (80054c8 <HAL_RCC_OscConfig+0x240>)
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80052ca:	d10b      	bne.n	80052e4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052cc:	4b7e      	ldr	r3, [pc, #504]	@ (80054c8 <HAL_RCC_OscConfig+0x240>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d05b      	beq.n	8005390 <HAL_RCC_OscConfig+0x108>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d157      	bne.n	8005390 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	e242      	b.n	800576a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052ec:	d106      	bne.n	80052fc <HAL_RCC_OscConfig+0x74>
 80052ee:	4b76      	ldr	r3, [pc, #472]	@ (80054c8 <HAL_RCC_OscConfig+0x240>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a75      	ldr	r2, [pc, #468]	@ (80054c8 <HAL_RCC_OscConfig+0x240>)
 80052f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052f8:	6013      	str	r3, [r2, #0]
 80052fa:	e01d      	b.n	8005338 <HAL_RCC_OscConfig+0xb0>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005304:	d10c      	bne.n	8005320 <HAL_RCC_OscConfig+0x98>
 8005306:	4b70      	ldr	r3, [pc, #448]	@ (80054c8 <HAL_RCC_OscConfig+0x240>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a6f      	ldr	r2, [pc, #444]	@ (80054c8 <HAL_RCC_OscConfig+0x240>)
 800530c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005310:	6013      	str	r3, [r2, #0]
 8005312:	4b6d      	ldr	r3, [pc, #436]	@ (80054c8 <HAL_RCC_OscConfig+0x240>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a6c      	ldr	r2, [pc, #432]	@ (80054c8 <HAL_RCC_OscConfig+0x240>)
 8005318:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800531c:	6013      	str	r3, [r2, #0]
 800531e:	e00b      	b.n	8005338 <HAL_RCC_OscConfig+0xb0>
 8005320:	4b69      	ldr	r3, [pc, #420]	@ (80054c8 <HAL_RCC_OscConfig+0x240>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a68      	ldr	r2, [pc, #416]	@ (80054c8 <HAL_RCC_OscConfig+0x240>)
 8005326:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800532a:	6013      	str	r3, [r2, #0]
 800532c:	4b66      	ldr	r3, [pc, #408]	@ (80054c8 <HAL_RCC_OscConfig+0x240>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a65      	ldr	r2, [pc, #404]	@ (80054c8 <HAL_RCC_OscConfig+0x240>)
 8005332:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005336:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d013      	beq.n	8005368 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005340:	f7fe fc0a 	bl	8003b58 <HAL_GetTick>
 8005344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005346:	e008      	b.n	800535a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005348:	f7fe fc06 	bl	8003b58 <HAL_GetTick>
 800534c:	4602      	mov	r2, r0
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	2b64      	cmp	r3, #100	@ 0x64
 8005354:	d901      	bls.n	800535a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	e207      	b.n	800576a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800535a:	4b5b      	ldr	r3, [pc, #364]	@ (80054c8 <HAL_RCC_OscConfig+0x240>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005362:	2b00      	cmp	r3, #0
 8005364:	d0f0      	beq.n	8005348 <HAL_RCC_OscConfig+0xc0>
 8005366:	e014      	b.n	8005392 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005368:	f7fe fbf6 	bl	8003b58 <HAL_GetTick>
 800536c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800536e:	e008      	b.n	8005382 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005370:	f7fe fbf2 	bl	8003b58 <HAL_GetTick>
 8005374:	4602      	mov	r2, r0
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	2b64      	cmp	r3, #100	@ 0x64
 800537c:	d901      	bls.n	8005382 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800537e:	2303      	movs	r3, #3
 8005380:	e1f3      	b.n	800576a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005382:	4b51      	ldr	r3, [pc, #324]	@ (80054c8 <HAL_RCC_OscConfig+0x240>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800538a:	2b00      	cmp	r3, #0
 800538c:	d1f0      	bne.n	8005370 <HAL_RCC_OscConfig+0xe8>
 800538e:	e000      	b.n	8005392 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005390:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 0302 	and.w	r3, r3, #2
 800539a:	2b00      	cmp	r3, #0
 800539c:	d063      	beq.n	8005466 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800539e:	4b4a      	ldr	r3, [pc, #296]	@ (80054c8 <HAL_RCC_OscConfig+0x240>)
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	f003 030c 	and.w	r3, r3, #12
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d00b      	beq.n	80053c2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053aa:	4b47      	ldr	r3, [pc, #284]	@ (80054c8 <HAL_RCC_OscConfig+0x240>)
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80053b2:	2b08      	cmp	r3, #8
 80053b4:	d11c      	bne.n	80053f0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053b6:	4b44      	ldr	r3, [pc, #272]	@ (80054c8 <HAL_RCC_OscConfig+0x240>)
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d116      	bne.n	80053f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053c2:	4b41      	ldr	r3, [pc, #260]	@ (80054c8 <HAL_RCC_OscConfig+0x240>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 0302 	and.w	r3, r3, #2
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d005      	beq.n	80053da <HAL_RCC_OscConfig+0x152>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d001      	beq.n	80053da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e1c7      	b.n	800576a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053da:	4b3b      	ldr	r3, [pc, #236]	@ (80054c8 <HAL_RCC_OscConfig+0x240>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	00db      	lsls	r3, r3, #3
 80053e8:	4937      	ldr	r1, [pc, #220]	@ (80054c8 <HAL_RCC_OscConfig+0x240>)
 80053ea:	4313      	orrs	r3, r2
 80053ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053ee:	e03a      	b.n	8005466 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d020      	beq.n	800543a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053f8:	4b34      	ldr	r3, [pc, #208]	@ (80054cc <HAL_RCC_OscConfig+0x244>)
 80053fa:	2201      	movs	r2, #1
 80053fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053fe:	f7fe fbab 	bl	8003b58 <HAL_GetTick>
 8005402:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005404:	e008      	b.n	8005418 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005406:	f7fe fba7 	bl	8003b58 <HAL_GetTick>
 800540a:	4602      	mov	r2, r0
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	1ad3      	subs	r3, r2, r3
 8005410:	2b02      	cmp	r3, #2
 8005412:	d901      	bls.n	8005418 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005414:	2303      	movs	r3, #3
 8005416:	e1a8      	b.n	800576a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005418:	4b2b      	ldr	r3, [pc, #172]	@ (80054c8 <HAL_RCC_OscConfig+0x240>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 0302 	and.w	r3, r3, #2
 8005420:	2b00      	cmp	r3, #0
 8005422:	d0f0      	beq.n	8005406 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005424:	4b28      	ldr	r3, [pc, #160]	@ (80054c8 <HAL_RCC_OscConfig+0x240>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	691b      	ldr	r3, [r3, #16]
 8005430:	00db      	lsls	r3, r3, #3
 8005432:	4925      	ldr	r1, [pc, #148]	@ (80054c8 <HAL_RCC_OscConfig+0x240>)
 8005434:	4313      	orrs	r3, r2
 8005436:	600b      	str	r3, [r1, #0]
 8005438:	e015      	b.n	8005466 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800543a:	4b24      	ldr	r3, [pc, #144]	@ (80054cc <HAL_RCC_OscConfig+0x244>)
 800543c:	2200      	movs	r2, #0
 800543e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005440:	f7fe fb8a 	bl	8003b58 <HAL_GetTick>
 8005444:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005446:	e008      	b.n	800545a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005448:	f7fe fb86 	bl	8003b58 <HAL_GetTick>
 800544c:	4602      	mov	r2, r0
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	2b02      	cmp	r3, #2
 8005454:	d901      	bls.n	800545a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e187      	b.n	800576a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800545a:	4b1b      	ldr	r3, [pc, #108]	@ (80054c8 <HAL_RCC_OscConfig+0x240>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 0302 	and.w	r3, r3, #2
 8005462:	2b00      	cmp	r3, #0
 8005464:	d1f0      	bne.n	8005448 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 0308 	and.w	r3, r3, #8
 800546e:	2b00      	cmp	r3, #0
 8005470:	d036      	beq.n	80054e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	695b      	ldr	r3, [r3, #20]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d016      	beq.n	80054a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800547a:	4b15      	ldr	r3, [pc, #84]	@ (80054d0 <HAL_RCC_OscConfig+0x248>)
 800547c:	2201      	movs	r2, #1
 800547e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005480:	f7fe fb6a 	bl	8003b58 <HAL_GetTick>
 8005484:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005486:	e008      	b.n	800549a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005488:	f7fe fb66 	bl	8003b58 <HAL_GetTick>
 800548c:	4602      	mov	r2, r0
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	2b02      	cmp	r3, #2
 8005494:	d901      	bls.n	800549a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005496:	2303      	movs	r3, #3
 8005498:	e167      	b.n	800576a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800549a:	4b0b      	ldr	r3, [pc, #44]	@ (80054c8 <HAL_RCC_OscConfig+0x240>)
 800549c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800549e:	f003 0302 	and.w	r3, r3, #2
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d0f0      	beq.n	8005488 <HAL_RCC_OscConfig+0x200>
 80054a6:	e01b      	b.n	80054e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054a8:	4b09      	ldr	r3, [pc, #36]	@ (80054d0 <HAL_RCC_OscConfig+0x248>)
 80054aa:	2200      	movs	r2, #0
 80054ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054ae:	f7fe fb53 	bl	8003b58 <HAL_GetTick>
 80054b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054b4:	e00e      	b.n	80054d4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054b6:	f7fe fb4f 	bl	8003b58 <HAL_GetTick>
 80054ba:	4602      	mov	r2, r0
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	1ad3      	subs	r3, r2, r3
 80054c0:	2b02      	cmp	r3, #2
 80054c2:	d907      	bls.n	80054d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80054c4:	2303      	movs	r3, #3
 80054c6:	e150      	b.n	800576a <HAL_RCC_OscConfig+0x4e2>
 80054c8:	40023800 	.word	0x40023800
 80054cc:	42470000 	.word	0x42470000
 80054d0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054d4:	4b88      	ldr	r3, [pc, #544]	@ (80056f8 <HAL_RCC_OscConfig+0x470>)
 80054d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054d8:	f003 0302 	and.w	r3, r3, #2
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d1ea      	bne.n	80054b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 0304 	and.w	r3, r3, #4
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	f000 8097 	beq.w	800561c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054ee:	2300      	movs	r3, #0
 80054f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054f2:	4b81      	ldr	r3, [pc, #516]	@ (80056f8 <HAL_RCC_OscConfig+0x470>)
 80054f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d10f      	bne.n	800551e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054fe:	2300      	movs	r3, #0
 8005500:	60bb      	str	r3, [r7, #8]
 8005502:	4b7d      	ldr	r3, [pc, #500]	@ (80056f8 <HAL_RCC_OscConfig+0x470>)
 8005504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005506:	4a7c      	ldr	r2, [pc, #496]	@ (80056f8 <HAL_RCC_OscConfig+0x470>)
 8005508:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800550c:	6413      	str	r3, [r2, #64]	@ 0x40
 800550e:	4b7a      	ldr	r3, [pc, #488]	@ (80056f8 <HAL_RCC_OscConfig+0x470>)
 8005510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005512:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005516:	60bb      	str	r3, [r7, #8]
 8005518:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800551a:	2301      	movs	r3, #1
 800551c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800551e:	4b77      	ldr	r3, [pc, #476]	@ (80056fc <HAL_RCC_OscConfig+0x474>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005526:	2b00      	cmp	r3, #0
 8005528:	d118      	bne.n	800555c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800552a:	4b74      	ldr	r3, [pc, #464]	@ (80056fc <HAL_RCC_OscConfig+0x474>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a73      	ldr	r2, [pc, #460]	@ (80056fc <HAL_RCC_OscConfig+0x474>)
 8005530:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005534:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005536:	f7fe fb0f 	bl	8003b58 <HAL_GetTick>
 800553a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800553c:	e008      	b.n	8005550 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800553e:	f7fe fb0b 	bl	8003b58 <HAL_GetTick>
 8005542:	4602      	mov	r2, r0
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	1ad3      	subs	r3, r2, r3
 8005548:	2b02      	cmp	r3, #2
 800554a:	d901      	bls.n	8005550 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800554c:	2303      	movs	r3, #3
 800554e:	e10c      	b.n	800576a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005550:	4b6a      	ldr	r3, [pc, #424]	@ (80056fc <HAL_RCC_OscConfig+0x474>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005558:	2b00      	cmp	r3, #0
 800555a:	d0f0      	beq.n	800553e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	2b01      	cmp	r3, #1
 8005562:	d106      	bne.n	8005572 <HAL_RCC_OscConfig+0x2ea>
 8005564:	4b64      	ldr	r3, [pc, #400]	@ (80056f8 <HAL_RCC_OscConfig+0x470>)
 8005566:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005568:	4a63      	ldr	r2, [pc, #396]	@ (80056f8 <HAL_RCC_OscConfig+0x470>)
 800556a:	f043 0301 	orr.w	r3, r3, #1
 800556e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005570:	e01c      	b.n	80055ac <HAL_RCC_OscConfig+0x324>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	2b05      	cmp	r3, #5
 8005578:	d10c      	bne.n	8005594 <HAL_RCC_OscConfig+0x30c>
 800557a:	4b5f      	ldr	r3, [pc, #380]	@ (80056f8 <HAL_RCC_OscConfig+0x470>)
 800557c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800557e:	4a5e      	ldr	r2, [pc, #376]	@ (80056f8 <HAL_RCC_OscConfig+0x470>)
 8005580:	f043 0304 	orr.w	r3, r3, #4
 8005584:	6713      	str	r3, [r2, #112]	@ 0x70
 8005586:	4b5c      	ldr	r3, [pc, #368]	@ (80056f8 <HAL_RCC_OscConfig+0x470>)
 8005588:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800558a:	4a5b      	ldr	r2, [pc, #364]	@ (80056f8 <HAL_RCC_OscConfig+0x470>)
 800558c:	f043 0301 	orr.w	r3, r3, #1
 8005590:	6713      	str	r3, [r2, #112]	@ 0x70
 8005592:	e00b      	b.n	80055ac <HAL_RCC_OscConfig+0x324>
 8005594:	4b58      	ldr	r3, [pc, #352]	@ (80056f8 <HAL_RCC_OscConfig+0x470>)
 8005596:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005598:	4a57      	ldr	r2, [pc, #348]	@ (80056f8 <HAL_RCC_OscConfig+0x470>)
 800559a:	f023 0301 	bic.w	r3, r3, #1
 800559e:	6713      	str	r3, [r2, #112]	@ 0x70
 80055a0:	4b55      	ldr	r3, [pc, #340]	@ (80056f8 <HAL_RCC_OscConfig+0x470>)
 80055a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055a4:	4a54      	ldr	r2, [pc, #336]	@ (80056f8 <HAL_RCC_OscConfig+0x470>)
 80055a6:	f023 0304 	bic.w	r3, r3, #4
 80055aa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d015      	beq.n	80055e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055b4:	f7fe fad0 	bl	8003b58 <HAL_GetTick>
 80055b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055ba:	e00a      	b.n	80055d2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055bc:	f7fe facc 	bl	8003b58 <HAL_GetTick>
 80055c0:	4602      	mov	r2, r0
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	1ad3      	subs	r3, r2, r3
 80055c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d901      	bls.n	80055d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	e0cb      	b.n	800576a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055d2:	4b49      	ldr	r3, [pc, #292]	@ (80056f8 <HAL_RCC_OscConfig+0x470>)
 80055d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055d6:	f003 0302 	and.w	r3, r3, #2
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d0ee      	beq.n	80055bc <HAL_RCC_OscConfig+0x334>
 80055de:	e014      	b.n	800560a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055e0:	f7fe faba 	bl	8003b58 <HAL_GetTick>
 80055e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055e6:	e00a      	b.n	80055fe <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055e8:	f7fe fab6 	bl	8003b58 <HAL_GetTick>
 80055ec:	4602      	mov	r2, r0
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d901      	bls.n	80055fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	e0b5      	b.n	800576a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055fe:	4b3e      	ldr	r3, [pc, #248]	@ (80056f8 <HAL_RCC_OscConfig+0x470>)
 8005600:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005602:	f003 0302 	and.w	r3, r3, #2
 8005606:	2b00      	cmp	r3, #0
 8005608:	d1ee      	bne.n	80055e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800560a:	7dfb      	ldrb	r3, [r7, #23]
 800560c:	2b01      	cmp	r3, #1
 800560e:	d105      	bne.n	800561c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005610:	4b39      	ldr	r3, [pc, #228]	@ (80056f8 <HAL_RCC_OscConfig+0x470>)
 8005612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005614:	4a38      	ldr	r2, [pc, #224]	@ (80056f8 <HAL_RCC_OscConfig+0x470>)
 8005616:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800561a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	699b      	ldr	r3, [r3, #24]
 8005620:	2b00      	cmp	r3, #0
 8005622:	f000 80a1 	beq.w	8005768 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005626:	4b34      	ldr	r3, [pc, #208]	@ (80056f8 <HAL_RCC_OscConfig+0x470>)
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	f003 030c 	and.w	r3, r3, #12
 800562e:	2b08      	cmp	r3, #8
 8005630:	d05c      	beq.n	80056ec <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	699b      	ldr	r3, [r3, #24]
 8005636:	2b02      	cmp	r3, #2
 8005638:	d141      	bne.n	80056be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800563a:	4b31      	ldr	r3, [pc, #196]	@ (8005700 <HAL_RCC_OscConfig+0x478>)
 800563c:	2200      	movs	r2, #0
 800563e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005640:	f7fe fa8a 	bl	8003b58 <HAL_GetTick>
 8005644:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005646:	e008      	b.n	800565a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005648:	f7fe fa86 	bl	8003b58 <HAL_GetTick>
 800564c:	4602      	mov	r2, r0
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	1ad3      	subs	r3, r2, r3
 8005652:	2b02      	cmp	r3, #2
 8005654:	d901      	bls.n	800565a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005656:	2303      	movs	r3, #3
 8005658:	e087      	b.n	800576a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800565a:	4b27      	ldr	r3, [pc, #156]	@ (80056f8 <HAL_RCC_OscConfig+0x470>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005662:	2b00      	cmp	r3, #0
 8005664:	d1f0      	bne.n	8005648 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	69da      	ldr	r2, [r3, #28]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a1b      	ldr	r3, [r3, #32]
 800566e:	431a      	orrs	r2, r3
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005674:	019b      	lsls	r3, r3, #6
 8005676:	431a      	orrs	r2, r3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800567c:	085b      	lsrs	r3, r3, #1
 800567e:	3b01      	subs	r3, #1
 8005680:	041b      	lsls	r3, r3, #16
 8005682:	431a      	orrs	r2, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005688:	061b      	lsls	r3, r3, #24
 800568a:	491b      	ldr	r1, [pc, #108]	@ (80056f8 <HAL_RCC_OscConfig+0x470>)
 800568c:	4313      	orrs	r3, r2
 800568e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005690:	4b1b      	ldr	r3, [pc, #108]	@ (8005700 <HAL_RCC_OscConfig+0x478>)
 8005692:	2201      	movs	r2, #1
 8005694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005696:	f7fe fa5f 	bl	8003b58 <HAL_GetTick>
 800569a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800569c:	e008      	b.n	80056b0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800569e:	f7fe fa5b 	bl	8003b58 <HAL_GetTick>
 80056a2:	4602      	mov	r2, r0
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	1ad3      	subs	r3, r2, r3
 80056a8:	2b02      	cmp	r3, #2
 80056aa:	d901      	bls.n	80056b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80056ac:	2303      	movs	r3, #3
 80056ae:	e05c      	b.n	800576a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056b0:	4b11      	ldr	r3, [pc, #68]	@ (80056f8 <HAL_RCC_OscConfig+0x470>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d0f0      	beq.n	800569e <HAL_RCC_OscConfig+0x416>
 80056bc:	e054      	b.n	8005768 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056be:	4b10      	ldr	r3, [pc, #64]	@ (8005700 <HAL_RCC_OscConfig+0x478>)
 80056c0:	2200      	movs	r2, #0
 80056c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056c4:	f7fe fa48 	bl	8003b58 <HAL_GetTick>
 80056c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056ca:	e008      	b.n	80056de <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056cc:	f7fe fa44 	bl	8003b58 <HAL_GetTick>
 80056d0:	4602      	mov	r2, r0
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	2b02      	cmp	r3, #2
 80056d8:	d901      	bls.n	80056de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	e045      	b.n	800576a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056de:	4b06      	ldr	r3, [pc, #24]	@ (80056f8 <HAL_RCC_OscConfig+0x470>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d1f0      	bne.n	80056cc <HAL_RCC_OscConfig+0x444>
 80056ea:	e03d      	b.n	8005768 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	699b      	ldr	r3, [r3, #24]
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d107      	bne.n	8005704 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e038      	b.n	800576a <HAL_RCC_OscConfig+0x4e2>
 80056f8:	40023800 	.word	0x40023800
 80056fc:	40007000 	.word	0x40007000
 8005700:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005704:	4b1b      	ldr	r3, [pc, #108]	@ (8005774 <HAL_RCC_OscConfig+0x4ec>)
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	699b      	ldr	r3, [r3, #24]
 800570e:	2b01      	cmp	r3, #1
 8005710:	d028      	beq.n	8005764 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800571c:	429a      	cmp	r2, r3
 800571e:	d121      	bne.n	8005764 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800572a:	429a      	cmp	r2, r3
 800572c:	d11a      	bne.n	8005764 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800572e:	68fa      	ldr	r2, [r7, #12]
 8005730:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005734:	4013      	ands	r3, r2
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800573a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800573c:	4293      	cmp	r3, r2
 800573e:	d111      	bne.n	8005764 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800574a:	085b      	lsrs	r3, r3, #1
 800574c:	3b01      	subs	r3, #1
 800574e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005750:	429a      	cmp	r2, r3
 8005752:	d107      	bne.n	8005764 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800575e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005760:	429a      	cmp	r2, r3
 8005762:	d001      	beq.n	8005768 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	e000      	b.n	800576a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005768:	2300      	movs	r3, #0
}
 800576a:	4618      	mov	r0, r3
 800576c:	3718      	adds	r7, #24
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop
 8005774:	40023800 	.word	0x40023800

08005778 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b084      	sub	sp, #16
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d101      	bne.n	800578c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	e0cc      	b.n	8005926 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800578c:	4b68      	ldr	r3, [pc, #416]	@ (8005930 <HAL_RCC_ClockConfig+0x1b8>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 0307 	and.w	r3, r3, #7
 8005794:	683a      	ldr	r2, [r7, #0]
 8005796:	429a      	cmp	r2, r3
 8005798:	d90c      	bls.n	80057b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800579a:	4b65      	ldr	r3, [pc, #404]	@ (8005930 <HAL_RCC_ClockConfig+0x1b8>)
 800579c:	683a      	ldr	r2, [r7, #0]
 800579e:	b2d2      	uxtb	r2, r2
 80057a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057a2:	4b63      	ldr	r3, [pc, #396]	@ (8005930 <HAL_RCC_ClockConfig+0x1b8>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f003 0307 	and.w	r3, r3, #7
 80057aa:	683a      	ldr	r2, [r7, #0]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d001      	beq.n	80057b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	e0b8      	b.n	8005926 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f003 0302 	and.w	r3, r3, #2
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d020      	beq.n	8005802 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 0304 	and.w	r3, r3, #4
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d005      	beq.n	80057d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80057cc:	4b59      	ldr	r3, [pc, #356]	@ (8005934 <HAL_RCC_ClockConfig+0x1bc>)
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	4a58      	ldr	r2, [pc, #352]	@ (8005934 <HAL_RCC_ClockConfig+0x1bc>)
 80057d2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80057d6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f003 0308 	and.w	r3, r3, #8
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d005      	beq.n	80057f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80057e4:	4b53      	ldr	r3, [pc, #332]	@ (8005934 <HAL_RCC_ClockConfig+0x1bc>)
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	4a52      	ldr	r2, [pc, #328]	@ (8005934 <HAL_RCC_ClockConfig+0x1bc>)
 80057ea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80057ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057f0:	4b50      	ldr	r3, [pc, #320]	@ (8005934 <HAL_RCC_ClockConfig+0x1bc>)
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	494d      	ldr	r1, [pc, #308]	@ (8005934 <HAL_RCC_ClockConfig+0x1bc>)
 80057fe:	4313      	orrs	r3, r2
 8005800:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 0301 	and.w	r3, r3, #1
 800580a:	2b00      	cmp	r3, #0
 800580c:	d044      	beq.n	8005898 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	2b01      	cmp	r3, #1
 8005814:	d107      	bne.n	8005826 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005816:	4b47      	ldr	r3, [pc, #284]	@ (8005934 <HAL_RCC_ClockConfig+0x1bc>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800581e:	2b00      	cmp	r3, #0
 8005820:	d119      	bne.n	8005856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e07f      	b.n	8005926 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	2b02      	cmp	r3, #2
 800582c:	d003      	beq.n	8005836 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005832:	2b03      	cmp	r3, #3
 8005834:	d107      	bne.n	8005846 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005836:	4b3f      	ldr	r3, [pc, #252]	@ (8005934 <HAL_RCC_ClockConfig+0x1bc>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800583e:	2b00      	cmp	r3, #0
 8005840:	d109      	bne.n	8005856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	e06f      	b.n	8005926 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005846:	4b3b      	ldr	r3, [pc, #236]	@ (8005934 <HAL_RCC_ClockConfig+0x1bc>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f003 0302 	and.w	r3, r3, #2
 800584e:	2b00      	cmp	r3, #0
 8005850:	d101      	bne.n	8005856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	e067      	b.n	8005926 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005856:	4b37      	ldr	r3, [pc, #220]	@ (8005934 <HAL_RCC_ClockConfig+0x1bc>)
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	f023 0203 	bic.w	r2, r3, #3
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	4934      	ldr	r1, [pc, #208]	@ (8005934 <HAL_RCC_ClockConfig+0x1bc>)
 8005864:	4313      	orrs	r3, r2
 8005866:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005868:	f7fe f976 	bl	8003b58 <HAL_GetTick>
 800586c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800586e:	e00a      	b.n	8005886 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005870:	f7fe f972 	bl	8003b58 <HAL_GetTick>
 8005874:	4602      	mov	r2, r0
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800587e:	4293      	cmp	r3, r2
 8005880:	d901      	bls.n	8005886 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005882:	2303      	movs	r3, #3
 8005884:	e04f      	b.n	8005926 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005886:	4b2b      	ldr	r3, [pc, #172]	@ (8005934 <HAL_RCC_ClockConfig+0x1bc>)
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	f003 020c 	and.w	r2, r3, #12
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	429a      	cmp	r2, r3
 8005896:	d1eb      	bne.n	8005870 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005898:	4b25      	ldr	r3, [pc, #148]	@ (8005930 <HAL_RCC_ClockConfig+0x1b8>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 0307 	and.w	r3, r3, #7
 80058a0:	683a      	ldr	r2, [r7, #0]
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d20c      	bcs.n	80058c0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058a6:	4b22      	ldr	r3, [pc, #136]	@ (8005930 <HAL_RCC_ClockConfig+0x1b8>)
 80058a8:	683a      	ldr	r2, [r7, #0]
 80058aa:	b2d2      	uxtb	r2, r2
 80058ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058ae:	4b20      	ldr	r3, [pc, #128]	@ (8005930 <HAL_RCC_ClockConfig+0x1b8>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f003 0307 	and.w	r3, r3, #7
 80058b6:	683a      	ldr	r2, [r7, #0]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d001      	beq.n	80058c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	e032      	b.n	8005926 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 0304 	and.w	r3, r3, #4
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d008      	beq.n	80058de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058cc:	4b19      	ldr	r3, [pc, #100]	@ (8005934 <HAL_RCC_ClockConfig+0x1bc>)
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	4916      	ldr	r1, [pc, #88]	@ (8005934 <HAL_RCC_ClockConfig+0x1bc>)
 80058da:	4313      	orrs	r3, r2
 80058dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 0308 	and.w	r3, r3, #8
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d009      	beq.n	80058fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80058ea:	4b12      	ldr	r3, [pc, #72]	@ (8005934 <HAL_RCC_ClockConfig+0x1bc>)
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	691b      	ldr	r3, [r3, #16]
 80058f6:	00db      	lsls	r3, r3, #3
 80058f8:	490e      	ldr	r1, [pc, #56]	@ (8005934 <HAL_RCC_ClockConfig+0x1bc>)
 80058fa:	4313      	orrs	r3, r2
 80058fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80058fe:	f000 f821 	bl	8005944 <HAL_RCC_GetSysClockFreq>
 8005902:	4602      	mov	r2, r0
 8005904:	4b0b      	ldr	r3, [pc, #44]	@ (8005934 <HAL_RCC_ClockConfig+0x1bc>)
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	091b      	lsrs	r3, r3, #4
 800590a:	f003 030f 	and.w	r3, r3, #15
 800590e:	490a      	ldr	r1, [pc, #40]	@ (8005938 <HAL_RCC_ClockConfig+0x1c0>)
 8005910:	5ccb      	ldrb	r3, [r1, r3]
 8005912:	fa22 f303 	lsr.w	r3, r2, r3
 8005916:	4a09      	ldr	r2, [pc, #36]	@ (800593c <HAL_RCC_ClockConfig+0x1c4>)
 8005918:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800591a:	4b09      	ldr	r3, [pc, #36]	@ (8005940 <HAL_RCC_ClockConfig+0x1c8>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4618      	mov	r0, r3
 8005920:	f7fe f8d6 	bl	8003ad0 <HAL_InitTick>

  return HAL_OK;
 8005924:	2300      	movs	r3, #0
}
 8005926:	4618      	mov	r0, r3
 8005928:	3710      	adds	r7, #16
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	40023c00 	.word	0x40023c00
 8005934:	40023800 	.word	0x40023800
 8005938:	0800d238 	.word	0x0800d238
 800593c:	20000034 	.word	0x20000034
 8005940:	20000038 	.word	0x20000038

08005944 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005944:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005948:	b090      	sub	sp, #64	@ 0x40
 800594a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800594c:	2300      	movs	r3, #0
 800594e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8005950:	2300      	movs	r3, #0
 8005952:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8005954:	2300      	movs	r3, #0
 8005956:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005958:	2300      	movs	r3, #0
 800595a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800595c:	4b59      	ldr	r3, [pc, #356]	@ (8005ac4 <HAL_RCC_GetSysClockFreq+0x180>)
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	f003 030c 	and.w	r3, r3, #12
 8005964:	2b08      	cmp	r3, #8
 8005966:	d00d      	beq.n	8005984 <HAL_RCC_GetSysClockFreq+0x40>
 8005968:	2b08      	cmp	r3, #8
 800596a:	f200 80a1 	bhi.w	8005ab0 <HAL_RCC_GetSysClockFreq+0x16c>
 800596e:	2b00      	cmp	r3, #0
 8005970:	d002      	beq.n	8005978 <HAL_RCC_GetSysClockFreq+0x34>
 8005972:	2b04      	cmp	r3, #4
 8005974:	d003      	beq.n	800597e <HAL_RCC_GetSysClockFreq+0x3a>
 8005976:	e09b      	b.n	8005ab0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005978:	4b53      	ldr	r3, [pc, #332]	@ (8005ac8 <HAL_RCC_GetSysClockFreq+0x184>)
 800597a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800597c:	e09b      	b.n	8005ab6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800597e:	4b53      	ldr	r3, [pc, #332]	@ (8005acc <HAL_RCC_GetSysClockFreq+0x188>)
 8005980:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005982:	e098      	b.n	8005ab6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005984:	4b4f      	ldr	r3, [pc, #316]	@ (8005ac4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800598c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800598e:	4b4d      	ldr	r3, [pc, #308]	@ (8005ac4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005996:	2b00      	cmp	r3, #0
 8005998:	d028      	beq.n	80059ec <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800599a:	4b4a      	ldr	r3, [pc, #296]	@ (8005ac4 <HAL_RCC_GetSysClockFreq+0x180>)
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	099b      	lsrs	r3, r3, #6
 80059a0:	2200      	movs	r2, #0
 80059a2:	623b      	str	r3, [r7, #32]
 80059a4:	627a      	str	r2, [r7, #36]	@ 0x24
 80059a6:	6a3b      	ldr	r3, [r7, #32]
 80059a8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80059ac:	2100      	movs	r1, #0
 80059ae:	4b47      	ldr	r3, [pc, #284]	@ (8005acc <HAL_RCC_GetSysClockFreq+0x188>)
 80059b0:	fb03 f201 	mul.w	r2, r3, r1
 80059b4:	2300      	movs	r3, #0
 80059b6:	fb00 f303 	mul.w	r3, r0, r3
 80059ba:	4413      	add	r3, r2
 80059bc:	4a43      	ldr	r2, [pc, #268]	@ (8005acc <HAL_RCC_GetSysClockFreq+0x188>)
 80059be:	fba0 1202 	umull	r1, r2, r0, r2
 80059c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80059c4:	460a      	mov	r2, r1
 80059c6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80059c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80059ca:	4413      	add	r3, r2
 80059cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80059ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059d0:	2200      	movs	r2, #0
 80059d2:	61bb      	str	r3, [r7, #24]
 80059d4:	61fa      	str	r2, [r7, #28]
 80059d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80059da:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80059de:	f7fb f953 	bl	8000c88 <__aeabi_uldivmod>
 80059e2:	4602      	mov	r2, r0
 80059e4:	460b      	mov	r3, r1
 80059e6:	4613      	mov	r3, r2
 80059e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80059ea:	e053      	b.n	8005a94 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059ec:	4b35      	ldr	r3, [pc, #212]	@ (8005ac4 <HAL_RCC_GetSysClockFreq+0x180>)
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	099b      	lsrs	r3, r3, #6
 80059f2:	2200      	movs	r2, #0
 80059f4:	613b      	str	r3, [r7, #16]
 80059f6:	617a      	str	r2, [r7, #20]
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80059fe:	f04f 0b00 	mov.w	fp, #0
 8005a02:	4652      	mov	r2, sl
 8005a04:	465b      	mov	r3, fp
 8005a06:	f04f 0000 	mov.w	r0, #0
 8005a0a:	f04f 0100 	mov.w	r1, #0
 8005a0e:	0159      	lsls	r1, r3, #5
 8005a10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a14:	0150      	lsls	r0, r2, #5
 8005a16:	4602      	mov	r2, r0
 8005a18:	460b      	mov	r3, r1
 8005a1a:	ebb2 080a 	subs.w	r8, r2, sl
 8005a1e:	eb63 090b 	sbc.w	r9, r3, fp
 8005a22:	f04f 0200 	mov.w	r2, #0
 8005a26:	f04f 0300 	mov.w	r3, #0
 8005a2a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005a2e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005a32:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005a36:	ebb2 0408 	subs.w	r4, r2, r8
 8005a3a:	eb63 0509 	sbc.w	r5, r3, r9
 8005a3e:	f04f 0200 	mov.w	r2, #0
 8005a42:	f04f 0300 	mov.w	r3, #0
 8005a46:	00eb      	lsls	r3, r5, #3
 8005a48:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a4c:	00e2      	lsls	r2, r4, #3
 8005a4e:	4614      	mov	r4, r2
 8005a50:	461d      	mov	r5, r3
 8005a52:	eb14 030a 	adds.w	r3, r4, sl
 8005a56:	603b      	str	r3, [r7, #0]
 8005a58:	eb45 030b 	adc.w	r3, r5, fp
 8005a5c:	607b      	str	r3, [r7, #4]
 8005a5e:	f04f 0200 	mov.w	r2, #0
 8005a62:	f04f 0300 	mov.w	r3, #0
 8005a66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005a6a:	4629      	mov	r1, r5
 8005a6c:	028b      	lsls	r3, r1, #10
 8005a6e:	4621      	mov	r1, r4
 8005a70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005a74:	4621      	mov	r1, r4
 8005a76:	028a      	lsls	r2, r1, #10
 8005a78:	4610      	mov	r0, r2
 8005a7a:	4619      	mov	r1, r3
 8005a7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a7e:	2200      	movs	r2, #0
 8005a80:	60bb      	str	r3, [r7, #8]
 8005a82:	60fa      	str	r2, [r7, #12]
 8005a84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a88:	f7fb f8fe 	bl	8000c88 <__aeabi_uldivmod>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	460b      	mov	r3, r1
 8005a90:	4613      	mov	r3, r2
 8005a92:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005a94:	4b0b      	ldr	r3, [pc, #44]	@ (8005ac4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	0c1b      	lsrs	r3, r3, #16
 8005a9a:	f003 0303 	and.w	r3, r3, #3
 8005a9e:	3301      	adds	r3, #1
 8005aa0:	005b      	lsls	r3, r3, #1
 8005aa2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8005aa4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aac:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005aae:	e002      	b.n	8005ab6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ab0:	4b05      	ldr	r3, [pc, #20]	@ (8005ac8 <HAL_RCC_GetSysClockFreq+0x184>)
 8005ab2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005ab4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3740      	adds	r7, #64	@ 0x40
 8005abc:	46bd      	mov	sp, r7
 8005abe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ac2:	bf00      	nop
 8005ac4:	40023800 	.word	0x40023800
 8005ac8:	00f42400 	.word	0x00f42400
 8005acc:	017d7840 	.word	0x017d7840

08005ad0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ad4:	4b03      	ldr	r3, [pc, #12]	@ (8005ae4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr
 8005ae2:	bf00      	nop
 8005ae4:	20000034 	.word	0x20000034

08005ae8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005aec:	f7ff fff0 	bl	8005ad0 <HAL_RCC_GetHCLKFreq>
 8005af0:	4602      	mov	r2, r0
 8005af2:	4b05      	ldr	r3, [pc, #20]	@ (8005b08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	0a9b      	lsrs	r3, r3, #10
 8005af8:	f003 0307 	and.w	r3, r3, #7
 8005afc:	4903      	ldr	r1, [pc, #12]	@ (8005b0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005afe:	5ccb      	ldrb	r3, [r1, r3]
 8005b00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	bd80      	pop	{r7, pc}
 8005b08:	40023800 	.word	0x40023800
 8005b0c:	0800d248 	.word	0x0800d248

08005b10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005b14:	f7ff ffdc 	bl	8005ad0 <HAL_RCC_GetHCLKFreq>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	4b05      	ldr	r3, [pc, #20]	@ (8005b30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	0b5b      	lsrs	r3, r3, #13
 8005b20:	f003 0307 	and.w	r3, r3, #7
 8005b24:	4903      	ldr	r1, [pc, #12]	@ (8005b34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b26:	5ccb      	ldrb	r3, [r1, r3]
 8005b28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	bd80      	pop	{r7, pc}
 8005b30:	40023800 	.word	0x40023800
 8005b34:	0800d248 	.word	0x0800d248

08005b38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b082      	sub	sp, #8
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d101      	bne.n	8005b4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	e041      	b.n	8005bce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d106      	bne.n	8005b64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f7fc fc08 	bl	8002374 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2202      	movs	r2, #2
 8005b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	3304      	adds	r3, #4
 8005b74:	4619      	mov	r1, r3
 8005b76:	4610      	mov	r0, r2
 8005b78:	f000 fd96 	bl	80066a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005bcc:	2300      	movs	r3, #0
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3708      	adds	r7, #8
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
	...

08005bd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b085      	sub	sp, #20
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d001      	beq.n	8005bf0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	e04e      	b.n	8005c8e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2202      	movs	r2, #2
 8005bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	68da      	ldr	r2, [r3, #12]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f042 0201 	orr.w	r2, r2, #1
 8005c06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a23      	ldr	r2, [pc, #140]	@ (8005c9c <HAL_TIM_Base_Start_IT+0xc4>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d022      	beq.n	8005c58 <HAL_TIM_Base_Start_IT+0x80>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c1a:	d01d      	beq.n	8005c58 <HAL_TIM_Base_Start_IT+0x80>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a1f      	ldr	r2, [pc, #124]	@ (8005ca0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d018      	beq.n	8005c58 <HAL_TIM_Base_Start_IT+0x80>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a1e      	ldr	r2, [pc, #120]	@ (8005ca4 <HAL_TIM_Base_Start_IT+0xcc>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d013      	beq.n	8005c58 <HAL_TIM_Base_Start_IT+0x80>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a1c      	ldr	r2, [pc, #112]	@ (8005ca8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d00e      	beq.n	8005c58 <HAL_TIM_Base_Start_IT+0x80>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a1b      	ldr	r2, [pc, #108]	@ (8005cac <HAL_TIM_Base_Start_IT+0xd4>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d009      	beq.n	8005c58 <HAL_TIM_Base_Start_IT+0x80>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a19      	ldr	r2, [pc, #100]	@ (8005cb0 <HAL_TIM_Base_Start_IT+0xd8>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d004      	beq.n	8005c58 <HAL_TIM_Base_Start_IT+0x80>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a18      	ldr	r2, [pc, #96]	@ (8005cb4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d111      	bne.n	8005c7c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	f003 0307 	and.w	r3, r3, #7
 8005c62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2b06      	cmp	r3, #6
 8005c68:	d010      	beq.n	8005c8c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f042 0201 	orr.w	r2, r2, #1
 8005c78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c7a:	e007      	b.n	8005c8c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f042 0201 	orr.w	r2, r2, #1
 8005c8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3714      	adds	r7, #20
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr
 8005c9a:	bf00      	nop
 8005c9c:	40010000 	.word	0x40010000
 8005ca0:	40000400 	.word	0x40000400
 8005ca4:	40000800 	.word	0x40000800
 8005ca8:	40000c00 	.word	0x40000c00
 8005cac:	40010400 	.word	0x40010400
 8005cb0:	40014000 	.word	0x40014000
 8005cb4:	40001800 	.word	0x40001800

08005cb8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b082      	sub	sp, #8
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d101      	bne.n	8005cca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e041      	b.n	8005d4e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d106      	bne.n	8005ce4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 f839 	bl	8005d56 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2202      	movs	r2, #2
 8005ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	3304      	adds	r3, #4
 8005cf4:	4619      	mov	r1, r3
 8005cf6:	4610      	mov	r0, r2
 8005cf8:	f000 fcd6 	bl	80066a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2201      	movs	r2, #1
 8005d28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005d4c:	2300      	movs	r3, #0
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3708      	adds	r7, #8
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}

08005d56 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005d56:	b480      	push	{r7}
 8005d58:	b083      	sub	sp, #12
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005d5e:	bf00      	nop
 8005d60:	370c      	adds	r7, #12
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr
	...

08005d6c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b084      	sub	sp, #16
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d109      	bne.n	8005d90 <HAL_TIM_PWM_Start+0x24>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	bf14      	ite	ne
 8005d88:	2301      	movne	r3, #1
 8005d8a:	2300      	moveq	r3, #0
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	e022      	b.n	8005dd6 <HAL_TIM_PWM_Start+0x6a>
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	2b04      	cmp	r3, #4
 8005d94:	d109      	bne.n	8005daa <HAL_TIM_PWM_Start+0x3e>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	bf14      	ite	ne
 8005da2:	2301      	movne	r3, #1
 8005da4:	2300      	moveq	r3, #0
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	e015      	b.n	8005dd6 <HAL_TIM_PWM_Start+0x6a>
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	2b08      	cmp	r3, #8
 8005dae:	d109      	bne.n	8005dc4 <HAL_TIM_PWM_Start+0x58>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	bf14      	ite	ne
 8005dbc:	2301      	movne	r3, #1
 8005dbe:	2300      	moveq	r3, #0
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	e008      	b.n	8005dd6 <HAL_TIM_PWM_Start+0x6a>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	bf14      	ite	ne
 8005dd0:	2301      	movne	r3, #1
 8005dd2:	2300      	moveq	r3, #0
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d001      	beq.n	8005dde <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	e07c      	b.n	8005ed8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d104      	bne.n	8005dee <HAL_TIM_PWM_Start+0x82>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2202      	movs	r2, #2
 8005de8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005dec:	e013      	b.n	8005e16 <HAL_TIM_PWM_Start+0xaa>
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	2b04      	cmp	r3, #4
 8005df2:	d104      	bne.n	8005dfe <HAL_TIM_PWM_Start+0x92>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2202      	movs	r2, #2
 8005df8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005dfc:	e00b      	b.n	8005e16 <HAL_TIM_PWM_Start+0xaa>
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	2b08      	cmp	r3, #8
 8005e02:	d104      	bne.n	8005e0e <HAL_TIM_PWM_Start+0xa2>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2202      	movs	r2, #2
 8005e08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e0c:	e003      	b.n	8005e16 <HAL_TIM_PWM_Start+0xaa>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2202      	movs	r2, #2
 8005e12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	6839      	ldr	r1, [r7, #0]
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f000 ff32 	bl	8006c88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a2d      	ldr	r2, [pc, #180]	@ (8005ee0 <HAL_TIM_PWM_Start+0x174>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d004      	beq.n	8005e38 <HAL_TIM_PWM_Start+0xcc>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a2c      	ldr	r2, [pc, #176]	@ (8005ee4 <HAL_TIM_PWM_Start+0x178>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d101      	bne.n	8005e3c <HAL_TIM_PWM_Start+0xd0>
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e000      	b.n	8005e3e <HAL_TIM_PWM_Start+0xd2>
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d007      	beq.n	8005e52 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005e50:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a22      	ldr	r2, [pc, #136]	@ (8005ee0 <HAL_TIM_PWM_Start+0x174>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d022      	beq.n	8005ea2 <HAL_TIM_PWM_Start+0x136>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e64:	d01d      	beq.n	8005ea2 <HAL_TIM_PWM_Start+0x136>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a1f      	ldr	r2, [pc, #124]	@ (8005ee8 <HAL_TIM_PWM_Start+0x17c>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d018      	beq.n	8005ea2 <HAL_TIM_PWM_Start+0x136>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a1d      	ldr	r2, [pc, #116]	@ (8005eec <HAL_TIM_PWM_Start+0x180>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d013      	beq.n	8005ea2 <HAL_TIM_PWM_Start+0x136>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a1c      	ldr	r2, [pc, #112]	@ (8005ef0 <HAL_TIM_PWM_Start+0x184>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d00e      	beq.n	8005ea2 <HAL_TIM_PWM_Start+0x136>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a16      	ldr	r2, [pc, #88]	@ (8005ee4 <HAL_TIM_PWM_Start+0x178>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d009      	beq.n	8005ea2 <HAL_TIM_PWM_Start+0x136>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a18      	ldr	r2, [pc, #96]	@ (8005ef4 <HAL_TIM_PWM_Start+0x188>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d004      	beq.n	8005ea2 <HAL_TIM_PWM_Start+0x136>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a16      	ldr	r2, [pc, #88]	@ (8005ef8 <HAL_TIM_PWM_Start+0x18c>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d111      	bne.n	8005ec6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	f003 0307 	and.w	r3, r3, #7
 8005eac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2b06      	cmp	r3, #6
 8005eb2:	d010      	beq.n	8005ed6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f042 0201 	orr.w	r2, r2, #1
 8005ec2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ec4:	e007      	b.n	8005ed6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f042 0201 	orr.w	r2, r2, #1
 8005ed4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ed6:	2300      	movs	r3, #0
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3710      	adds	r7, #16
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}
 8005ee0:	40010000 	.word	0x40010000
 8005ee4:	40010400 	.word	0x40010400
 8005ee8:	40000400 	.word	0x40000400
 8005eec:	40000800 	.word	0x40000800
 8005ef0:	40000c00 	.word	0x40000c00
 8005ef4:	40014000 	.word	0x40014000
 8005ef8:	40001800 	.word	0x40001800

08005efc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b086      	sub	sp, #24
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d101      	bne.n	8005f10 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e097      	b.n	8006040 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d106      	bne.n	8005f2a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f7fc fa95 	bl	8002454 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2202      	movs	r2, #2
 8005f2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	6812      	ldr	r2, [r2, #0]
 8005f3c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005f40:	f023 0307 	bic.w	r3, r3, #7
 8005f44:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681a      	ldr	r2, [r3, #0]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	3304      	adds	r3, #4
 8005f4e:	4619      	mov	r1, r3
 8005f50:	4610      	mov	r0, r2
 8005f52:	f000 fba9 	bl	80066a8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	699b      	ldr	r3, [r3, #24]
 8005f64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	6a1b      	ldr	r3, [r3, #32]
 8005f6c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	697a      	ldr	r2, [r7, #20]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f7e:	f023 0303 	bic.w	r3, r3, #3
 8005f82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	689a      	ldr	r2, [r3, #8]
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	699b      	ldr	r3, [r3, #24]
 8005f8c:	021b      	lsls	r3, r3, #8
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	693a      	ldr	r2, [r7, #16]
 8005f92:	4313      	orrs	r3, r2
 8005f94:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005f9c:	f023 030c 	bic.w	r3, r3, #12
 8005fa0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005fa8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005fac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	68da      	ldr	r2, [r3, #12]
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	69db      	ldr	r3, [r3, #28]
 8005fb6:	021b      	lsls	r3, r3, #8
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	693a      	ldr	r2, [r7, #16]
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	691b      	ldr	r3, [r3, #16]
 8005fc4:	011a      	lsls	r2, r3, #4
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	6a1b      	ldr	r3, [r3, #32]
 8005fca:	031b      	lsls	r3, r3, #12
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	693a      	ldr	r2, [r7, #16]
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005fda:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005fe2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	685a      	ldr	r2, [r3, #4]
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	695b      	ldr	r3, [r3, #20]
 8005fec:	011b      	lsls	r3, r3, #4
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	68fa      	ldr	r2, [r7, #12]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	697a      	ldr	r2, [r7, #20]
 8005ffc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	693a      	ldr	r2, [r7, #16]
 8006004:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	68fa      	ldr	r2, [r7, #12]
 800600c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2201      	movs	r2, #1
 8006012:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2201      	movs	r2, #1
 800601a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2201      	movs	r2, #1
 8006022:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2201      	movs	r2, #1
 800602a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2201      	movs	r2, #1
 8006032:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2201      	movs	r2, #1
 800603a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800603e:	2300      	movs	r3, #0
}
 8006040:	4618      	mov	r0, r3
 8006042:	3718      	adds	r7, #24
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}

08006048 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b084      	sub	sp, #16
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006058:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006060:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006068:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006070:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d110      	bne.n	800609a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006078:	7bfb      	ldrb	r3, [r7, #15]
 800607a:	2b01      	cmp	r3, #1
 800607c:	d102      	bne.n	8006084 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800607e:	7b7b      	ldrb	r3, [r7, #13]
 8006080:	2b01      	cmp	r3, #1
 8006082:	d001      	beq.n	8006088 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006084:	2301      	movs	r3, #1
 8006086:	e069      	b.n	800615c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2202      	movs	r2, #2
 800608c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2202      	movs	r2, #2
 8006094:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006098:	e031      	b.n	80060fe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	2b04      	cmp	r3, #4
 800609e:	d110      	bne.n	80060c2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80060a0:	7bbb      	ldrb	r3, [r7, #14]
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d102      	bne.n	80060ac <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80060a6:	7b3b      	ldrb	r3, [r7, #12]
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d001      	beq.n	80060b0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80060ac:	2301      	movs	r3, #1
 80060ae:	e055      	b.n	800615c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2202      	movs	r2, #2
 80060b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2202      	movs	r2, #2
 80060bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80060c0:	e01d      	b.n	80060fe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80060c2:	7bfb      	ldrb	r3, [r7, #15]
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d108      	bne.n	80060da <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80060c8:	7bbb      	ldrb	r3, [r7, #14]
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d105      	bne.n	80060da <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80060ce:	7b7b      	ldrb	r3, [r7, #13]
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d102      	bne.n	80060da <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80060d4:	7b3b      	ldrb	r3, [r7, #12]
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d001      	beq.n	80060de <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	e03e      	b.n	800615c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2202      	movs	r2, #2
 80060e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2202      	movs	r2, #2
 80060ea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2202      	movs	r2, #2
 80060f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2202      	movs	r2, #2
 80060fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d003      	beq.n	800610c <HAL_TIM_Encoder_Start+0xc4>
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	2b04      	cmp	r3, #4
 8006108:	d008      	beq.n	800611c <HAL_TIM_Encoder_Start+0xd4>
 800610a:	e00f      	b.n	800612c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	2201      	movs	r2, #1
 8006112:	2100      	movs	r1, #0
 8006114:	4618      	mov	r0, r3
 8006116:	f000 fdb7 	bl	8006c88 <TIM_CCxChannelCmd>
      break;
 800611a:	e016      	b.n	800614a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	2201      	movs	r2, #1
 8006122:	2104      	movs	r1, #4
 8006124:	4618      	mov	r0, r3
 8006126:	f000 fdaf 	bl	8006c88 <TIM_CCxChannelCmd>
      break;
 800612a:	e00e      	b.n	800614a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	2201      	movs	r2, #1
 8006132:	2100      	movs	r1, #0
 8006134:	4618      	mov	r0, r3
 8006136:	f000 fda7 	bl	8006c88 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	2201      	movs	r2, #1
 8006140:	2104      	movs	r1, #4
 8006142:	4618      	mov	r0, r3
 8006144:	f000 fda0 	bl	8006c88 <TIM_CCxChannelCmd>
      break;
 8006148:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f042 0201 	orr.w	r2, r2, #1
 8006158:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800615a:	2300      	movs	r3, #0
}
 800615c:	4618      	mov	r0, r3
 800615e:	3710      	adds	r7, #16
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}

08006164 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b084      	sub	sp, #16
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	68db      	ldr	r3, [r3, #12]
 8006172:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	691b      	ldr	r3, [r3, #16]
 800617a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	f003 0302 	and.w	r3, r3, #2
 8006182:	2b00      	cmp	r3, #0
 8006184:	d020      	beq.n	80061c8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f003 0302 	and.w	r3, r3, #2
 800618c:	2b00      	cmp	r3, #0
 800618e:	d01b      	beq.n	80061c8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f06f 0202 	mvn.w	r2, #2
 8006198:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2201      	movs	r2, #1
 800619e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	699b      	ldr	r3, [r3, #24]
 80061a6:	f003 0303 	and.w	r3, r3, #3
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d003      	beq.n	80061b6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 fa5b 	bl	800666a <HAL_TIM_IC_CaptureCallback>
 80061b4:	e005      	b.n	80061c2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f000 fa4d 	bl	8006656 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f000 fa5e 	bl	800667e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2200      	movs	r2, #0
 80061c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	f003 0304 	and.w	r3, r3, #4
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d020      	beq.n	8006214 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	f003 0304 	and.w	r3, r3, #4
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d01b      	beq.n	8006214 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f06f 0204 	mvn.w	r2, #4
 80061e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2202      	movs	r2, #2
 80061ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	699b      	ldr	r3, [r3, #24]
 80061f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d003      	beq.n	8006202 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f000 fa35 	bl	800666a <HAL_TIM_IC_CaptureCallback>
 8006200:	e005      	b.n	800620e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 fa27 	bl	8006656 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f000 fa38 	bl	800667e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2200      	movs	r2, #0
 8006212:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	f003 0308 	and.w	r3, r3, #8
 800621a:	2b00      	cmp	r3, #0
 800621c:	d020      	beq.n	8006260 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	f003 0308 	and.w	r3, r3, #8
 8006224:	2b00      	cmp	r3, #0
 8006226:	d01b      	beq.n	8006260 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f06f 0208 	mvn.w	r2, #8
 8006230:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2204      	movs	r2, #4
 8006236:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	69db      	ldr	r3, [r3, #28]
 800623e:	f003 0303 	and.w	r3, r3, #3
 8006242:	2b00      	cmp	r3, #0
 8006244:	d003      	beq.n	800624e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 fa0f 	bl	800666a <HAL_TIM_IC_CaptureCallback>
 800624c:	e005      	b.n	800625a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 fa01 	bl	8006656 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f000 fa12 	bl	800667e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2200      	movs	r2, #0
 800625e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	f003 0310 	and.w	r3, r3, #16
 8006266:	2b00      	cmp	r3, #0
 8006268:	d020      	beq.n	80062ac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	f003 0310 	and.w	r3, r3, #16
 8006270:	2b00      	cmp	r3, #0
 8006272:	d01b      	beq.n	80062ac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f06f 0210 	mvn.w	r2, #16
 800627c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2208      	movs	r2, #8
 8006282:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	69db      	ldr	r3, [r3, #28]
 800628a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800628e:	2b00      	cmp	r3, #0
 8006290:	d003      	beq.n	800629a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 f9e9 	bl	800666a <HAL_TIM_IC_CaptureCallback>
 8006298:	e005      	b.n	80062a6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f000 f9db 	bl	8006656 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f000 f9ec 	bl	800667e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2200      	movs	r2, #0
 80062aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	f003 0301 	and.w	r3, r3, #1
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d00c      	beq.n	80062d0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f003 0301 	and.w	r3, r3, #1
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d007      	beq.n	80062d0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f06f 0201 	mvn.w	r2, #1
 80062c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f7fb fbd8 	bl	8001a80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d00c      	beq.n	80062f4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d007      	beq.n	80062f4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80062ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 fd76 	bl	8006de0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d00c      	beq.n	8006318 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006304:	2b00      	cmp	r3, #0
 8006306:	d007      	beq.n	8006318 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f000 f9bd 	bl	8006692 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	f003 0320 	and.w	r3, r3, #32
 800631e:	2b00      	cmp	r3, #0
 8006320:	d00c      	beq.n	800633c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f003 0320 	and.w	r3, r3, #32
 8006328:	2b00      	cmp	r3, #0
 800632a:	d007      	beq.n	800633c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f06f 0220 	mvn.w	r2, #32
 8006334:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 fd48 	bl	8006dcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800633c:	bf00      	nop
 800633e:	3710      	adds	r7, #16
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b086      	sub	sp, #24
 8006348:	af00      	add	r7, sp, #0
 800634a:	60f8      	str	r0, [r7, #12]
 800634c:	60b9      	str	r1, [r7, #8]
 800634e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006350:	2300      	movs	r3, #0
 8006352:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800635a:	2b01      	cmp	r3, #1
 800635c:	d101      	bne.n	8006362 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800635e:	2302      	movs	r3, #2
 8006360:	e0ae      	b.n	80064c0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2201      	movs	r2, #1
 8006366:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2b0c      	cmp	r3, #12
 800636e:	f200 809f 	bhi.w	80064b0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006372:	a201      	add	r2, pc, #4	@ (adr r2, 8006378 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006378:	080063ad 	.word	0x080063ad
 800637c:	080064b1 	.word	0x080064b1
 8006380:	080064b1 	.word	0x080064b1
 8006384:	080064b1 	.word	0x080064b1
 8006388:	080063ed 	.word	0x080063ed
 800638c:	080064b1 	.word	0x080064b1
 8006390:	080064b1 	.word	0x080064b1
 8006394:	080064b1 	.word	0x080064b1
 8006398:	0800642f 	.word	0x0800642f
 800639c:	080064b1 	.word	0x080064b1
 80063a0:	080064b1 	.word	0x080064b1
 80063a4:	080064b1 	.word	0x080064b1
 80063a8:	0800646f 	.word	0x0800646f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	68b9      	ldr	r1, [r7, #8]
 80063b2:	4618      	mov	r0, r3
 80063b4:	f000 fa1e 	bl	80067f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	699a      	ldr	r2, [r3, #24]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f042 0208 	orr.w	r2, r2, #8
 80063c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	699a      	ldr	r2, [r3, #24]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f022 0204 	bic.w	r2, r2, #4
 80063d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	6999      	ldr	r1, [r3, #24]
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	691a      	ldr	r2, [r3, #16]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	430a      	orrs	r2, r1
 80063e8:	619a      	str	r2, [r3, #24]
      break;
 80063ea:	e064      	b.n	80064b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	68b9      	ldr	r1, [r7, #8]
 80063f2:	4618      	mov	r0, r3
 80063f4:	f000 fa6e 	bl	80068d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	699a      	ldr	r2, [r3, #24]
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006406:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	699a      	ldr	r2, [r3, #24]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006416:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	6999      	ldr	r1, [r3, #24]
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	691b      	ldr	r3, [r3, #16]
 8006422:	021a      	lsls	r2, r3, #8
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	430a      	orrs	r2, r1
 800642a:	619a      	str	r2, [r3, #24]
      break;
 800642c:	e043      	b.n	80064b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	68b9      	ldr	r1, [r7, #8]
 8006434:	4618      	mov	r0, r3
 8006436:	f000 fac3 	bl	80069c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	69da      	ldr	r2, [r3, #28]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f042 0208 	orr.w	r2, r2, #8
 8006448:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	69da      	ldr	r2, [r3, #28]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f022 0204 	bic.w	r2, r2, #4
 8006458:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	69d9      	ldr	r1, [r3, #28]
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	691a      	ldr	r2, [r3, #16]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	430a      	orrs	r2, r1
 800646a:	61da      	str	r2, [r3, #28]
      break;
 800646c:	e023      	b.n	80064b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	68b9      	ldr	r1, [r7, #8]
 8006474:	4618      	mov	r0, r3
 8006476:	f000 fb17 	bl	8006aa8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	69da      	ldr	r2, [r3, #28]
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006488:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	69da      	ldr	r2, [r3, #28]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006498:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	69d9      	ldr	r1, [r3, #28]
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	691b      	ldr	r3, [r3, #16]
 80064a4:	021a      	lsls	r2, r3, #8
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	430a      	orrs	r2, r1
 80064ac:	61da      	str	r2, [r3, #28]
      break;
 80064ae:	e002      	b.n	80064b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80064b0:	2301      	movs	r3, #1
 80064b2:	75fb      	strb	r3, [r7, #23]
      break;
 80064b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2200      	movs	r2, #0
 80064ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80064be:	7dfb      	ldrb	r3, [r7, #23]
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3718      	adds	r7, #24
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b084      	sub	sp, #16
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80064d2:	2300      	movs	r3, #0
 80064d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d101      	bne.n	80064e4 <HAL_TIM_ConfigClockSource+0x1c>
 80064e0:	2302      	movs	r3, #2
 80064e2:	e0b4      	b.n	800664e <HAL_TIM_ConfigClockSource+0x186>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2202      	movs	r2, #2
 80064f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006502:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800650a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	68ba      	ldr	r2, [r7, #8]
 8006512:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800651c:	d03e      	beq.n	800659c <HAL_TIM_ConfigClockSource+0xd4>
 800651e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006522:	f200 8087 	bhi.w	8006634 <HAL_TIM_ConfigClockSource+0x16c>
 8006526:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800652a:	f000 8086 	beq.w	800663a <HAL_TIM_ConfigClockSource+0x172>
 800652e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006532:	d87f      	bhi.n	8006634 <HAL_TIM_ConfigClockSource+0x16c>
 8006534:	2b70      	cmp	r3, #112	@ 0x70
 8006536:	d01a      	beq.n	800656e <HAL_TIM_ConfigClockSource+0xa6>
 8006538:	2b70      	cmp	r3, #112	@ 0x70
 800653a:	d87b      	bhi.n	8006634 <HAL_TIM_ConfigClockSource+0x16c>
 800653c:	2b60      	cmp	r3, #96	@ 0x60
 800653e:	d050      	beq.n	80065e2 <HAL_TIM_ConfigClockSource+0x11a>
 8006540:	2b60      	cmp	r3, #96	@ 0x60
 8006542:	d877      	bhi.n	8006634 <HAL_TIM_ConfigClockSource+0x16c>
 8006544:	2b50      	cmp	r3, #80	@ 0x50
 8006546:	d03c      	beq.n	80065c2 <HAL_TIM_ConfigClockSource+0xfa>
 8006548:	2b50      	cmp	r3, #80	@ 0x50
 800654a:	d873      	bhi.n	8006634 <HAL_TIM_ConfigClockSource+0x16c>
 800654c:	2b40      	cmp	r3, #64	@ 0x40
 800654e:	d058      	beq.n	8006602 <HAL_TIM_ConfigClockSource+0x13a>
 8006550:	2b40      	cmp	r3, #64	@ 0x40
 8006552:	d86f      	bhi.n	8006634 <HAL_TIM_ConfigClockSource+0x16c>
 8006554:	2b30      	cmp	r3, #48	@ 0x30
 8006556:	d064      	beq.n	8006622 <HAL_TIM_ConfigClockSource+0x15a>
 8006558:	2b30      	cmp	r3, #48	@ 0x30
 800655a:	d86b      	bhi.n	8006634 <HAL_TIM_ConfigClockSource+0x16c>
 800655c:	2b20      	cmp	r3, #32
 800655e:	d060      	beq.n	8006622 <HAL_TIM_ConfigClockSource+0x15a>
 8006560:	2b20      	cmp	r3, #32
 8006562:	d867      	bhi.n	8006634 <HAL_TIM_ConfigClockSource+0x16c>
 8006564:	2b00      	cmp	r3, #0
 8006566:	d05c      	beq.n	8006622 <HAL_TIM_ConfigClockSource+0x15a>
 8006568:	2b10      	cmp	r3, #16
 800656a:	d05a      	beq.n	8006622 <HAL_TIM_ConfigClockSource+0x15a>
 800656c:	e062      	b.n	8006634 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800657e:	f000 fb63 	bl	8006c48 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006590:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	68ba      	ldr	r2, [r7, #8]
 8006598:	609a      	str	r2, [r3, #8]
      break;
 800659a:	e04f      	b.n	800663c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80065ac:	f000 fb4c 	bl	8006c48 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	689a      	ldr	r2, [r3, #8]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80065be:	609a      	str	r2, [r3, #8]
      break;
 80065c0:	e03c      	b.n	800663c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80065ce:	461a      	mov	r2, r3
 80065d0:	f000 fac0 	bl	8006b54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	2150      	movs	r1, #80	@ 0x50
 80065da:	4618      	mov	r0, r3
 80065dc:	f000 fb19 	bl	8006c12 <TIM_ITRx_SetConfig>
      break;
 80065e0:	e02c      	b.n	800663c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80065ee:	461a      	mov	r2, r3
 80065f0:	f000 fadf 	bl	8006bb2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	2160      	movs	r1, #96	@ 0x60
 80065fa:	4618      	mov	r0, r3
 80065fc:	f000 fb09 	bl	8006c12 <TIM_ITRx_SetConfig>
      break;
 8006600:	e01c      	b.n	800663c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800660e:	461a      	mov	r2, r3
 8006610:	f000 faa0 	bl	8006b54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	2140      	movs	r1, #64	@ 0x40
 800661a:	4618      	mov	r0, r3
 800661c:	f000 faf9 	bl	8006c12 <TIM_ITRx_SetConfig>
      break;
 8006620:	e00c      	b.n	800663c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4619      	mov	r1, r3
 800662c:	4610      	mov	r0, r2
 800662e:	f000 faf0 	bl	8006c12 <TIM_ITRx_SetConfig>
      break;
 8006632:	e003      	b.n	800663c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006634:	2301      	movs	r3, #1
 8006636:	73fb      	strb	r3, [r7, #15]
      break;
 8006638:	e000      	b.n	800663c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800663a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2201      	movs	r2, #1
 8006640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2200      	movs	r2, #0
 8006648:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800664c:	7bfb      	ldrb	r3, [r7, #15]
}
 800664e:	4618      	mov	r0, r3
 8006650:	3710      	adds	r7, #16
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}

08006656 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006656:	b480      	push	{r7}
 8006658:	b083      	sub	sp, #12
 800665a:	af00      	add	r7, sp, #0
 800665c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800665e:	bf00      	nop
 8006660:	370c      	adds	r7, #12
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr

0800666a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800666a:	b480      	push	{r7}
 800666c:	b083      	sub	sp, #12
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006672:	bf00      	nop
 8006674:	370c      	adds	r7, #12
 8006676:	46bd      	mov	sp, r7
 8006678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667c:	4770      	bx	lr

0800667e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800667e:	b480      	push	{r7}
 8006680:	b083      	sub	sp, #12
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006686:	bf00      	nop
 8006688:	370c      	adds	r7, #12
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr

08006692 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006692:	b480      	push	{r7}
 8006694:	b083      	sub	sp, #12
 8006696:	af00      	add	r7, sp, #0
 8006698:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800669a:	bf00      	nop
 800669c:	370c      	adds	r7, #12
 800669e:	46bd      	mov	sp, r7
 80066a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a4:	4770      	bx	lr
	...

080066a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b085      	sub	sp, #20
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	4a43      	ldr	r2, [pc, #268]	@ (80067c8 <TIM_Base_SetConfig+0x120>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d013      	beq.n	80066e8 <TIM_Base_SetConfig+0x40>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066c6:	d00f      	beq.n	80066e8 <TIM_Base_SetConfig+0x40>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	4a40      	ldr	r2, [pc, #256]	@ (80067cc <TIM_Base_SetConfig+0x124>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d00b      	beq.n	80066e8 <TIM_Base_SetConfig+0x40>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	4a3f      	ldr	r2, [pc, #252]	@ (80067d0 <TIM_Base_SetConfig+0x128>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d007      	beq.n	80066e8 <TIM_Base_SetConfig+0x40>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	4a3e      	ldr	r2, [pc, #248]	@ (80067d4 <TIM_Base_SetConfig+0x12c>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d003      	beq.n	80066e8 <TIM_Base_SetConfig+0x40>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	4a3d      	ldr	r2, [pc, #244]	@ (80067d8 <TIM_Base_SetConfig+0x130>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d108      	bne.n	80066fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	68fa      	ldr	r2, [r7, #12]
 80066f6:	4313      	orrs	r3, r2
 80066f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	4a32      	ldr	r2, [pc, #200]	@ (80067c8 <TIM_Base_SetConfig+0x120>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d02b      	beq.n	800675a <TIM_Base_SetConfig+0xb2>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006708:	d027      	beq.n	800675a <TIM_Base_SetConfig+0xb2>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	4a2f      	ldr	r2, [pc, #188]	@ (80067cc <TIM_Base_SetConfig+0x124>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d023      	beq.n	800675a <TIM_Base_SetConfig+0xb2>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	4a2e      	ldr	r2, [pc, #184]	@ (80067d0 <TIM_Base_SetConfig+0x128>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d01f      	beq.n	800675a <TIM_Base_SetConfig+0xb2>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	4a2d      	ldr	r2, [pc, #180]	@ (80067d4 <TIM_Base_SetConfig+0x12c>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d01b      	beq.n	800675a <TIM_Base_SetConfig+0xb2>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	4a2c      	ldr	r2, [pc, #176]	@ (80067d8 <TIM_Base_SetConfig+0x130>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d017      	beq.n	800675a <TIM_Base_SetConfig+0xb2>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	4a2b      	ldr	r2, [pc, #172]	@ (80067dc <TIM_Base_SetConfig+0x134>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d013      	beq.n	800675a <TIM_Base_SetConfig+0xb2>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	4a2a      	ldr	r2, [pc, #168]	@ (80067e0 <TIM_Base_SetConfig+0x138>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d00f      	beq.n	800675a <TIM_Base_SetConfig+0xb2>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	4a29      	ldr	r2, [pc, #164]	@ (80067e4 <TIM_Base_SetConfig+0x13c>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d00b      	beq.n	800675a <TIM_Base_SetConfig+0xb2>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	4a28      	ldr	r2, [pc, #160]	@ (80067e8 <TIM_Base_SetConfig+0x140>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d007      	beq.n	800675a <TIM_Base_SetConfig+0xb2>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4a27      	ldr	r2, [pc, #156]	@ (80067ec <TIM_Base_SetConfig+0x144>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d003      	beq.n	800675a <TIM_Base_SetConfig+0xb2>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	4a26      	ldr	r2, [pc, #152]	@ (80067f0 <TIM_Base_SetConfig+0x148>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d108      	bne.n	800676c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006760:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	68db      	ldr	r3, [r3, #12]
 8006766:	68fa      	ldr	r2, [r7, #12]
 8006768:	4313      	orrs	r3, r2
 800676a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	695b      	ldr	r3, [r3, #20]
 8006776:	4313      	orrs	r3, r2
 8006778:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	689a      	ldr	r2, [r3, #8]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a0e      	ldr	r2, [pc, #56]	@ (80067c8 <TIM_Base_SetConfig+0x120>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d003      	beq.n	800679a <TIM_Base_SetConfig+0xf2>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	4a10      	ldr	r2, [pc, #64]	@ (80067d8 <TIM_Base_SetConfig+0x130>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d103      	bne.n	80067a2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	691a      	ldr	r2, [r3, #16]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f043 0204 	orr.w	r2, r3, #4
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2201      	movs	r2, #1
 80067b2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	68fa      	ldr	r2, [r7, #12]
 80067b8:	601a      	str	r2, [r3, #0]
}
 80067ba:	bf00      	nop
 80067bc:	3714      	adds	r7, #20
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr
 80067c6:	bf00      	nop
 80067c8:	40010000 	.word	0x40010000
 80067cc:	40000400 	.word	0x40000400
 80067d0:	40000800 	.word	0x40000800
 80067d4:	40000c00 	.word	0x40000c00
 80067d8:	40010400 	.word	0x40010400
 80067dc:	40014000 	.word	0x40014000
 80067e0:	40014400 	.word	0x40014400
 80067e4:	40014800 	.word	0x40014800
 80067e8:	40001800 	.word	0x40001800
 80067ec:	40001c00 	.word	0x40001c00
 80067f0:	40002000 	.word	0x40002000

080067f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b087      	sub	sp, #28
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6a1b      	ldr	r3, [r3, #32]
 8006802:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6a1b      	ldr	r3, [r3, #32]
 8006808:	f023 0201 	bic.w	r2, r3, #1
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	699b      	ldr	r3, [r3, #24]
 800681a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006822:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f023 0303 	bic.w	r3, r3, #3
 800682a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	68fa      	ldr	r2, [r7, #12]
 8006832:	4313      	orrs	r3, r2
 8006834:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	f023 0302 	bic.w	r3, r3, #2
 800683c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	697a      	ldr	r2, [r7, #20]
 8006844:	4313      	orrs	r3, r2
 8006846:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	4a20      	ldr	r2, [pc, #128]	@ (80068cc <TIM_OC1_SetConfig+0xd8>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d003      	beq.n	8006858 <TIM_OC1_SetConfig+0x64>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	4a1f      	ldr	r2, [pc, #124]	@ (80068d0 <TIM_OC1_SetConfig+0xdc>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d10c      	bne.n	8006872 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	f023 0308 	bic.w	r3, r3, #8
 800685e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	697a      	ldr	r2, [r7, #20]
 8006866:	4313      	orrs	r3, r2
 8006868:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	f023 0304 	bic.w	r3, r3, #4
 8006870:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	4a15      	ldr	r2, [pc, #84]	@ (80068cc <TIM_OC1_SetConfig+0xd8>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d003      	beq.n	8006882 <TIM_OC1_SetConfig+0x8e>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	4a14      	ldr	r2, [pc, #80]	@ (80068d0 <TIM_OC1_SetConfig+0xdc>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d111      	bne.n	80068a6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006888:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006890:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	695b      	ldr	r3, [r3, #20]
 8006896:	693a      	ldr	r2, [r7, #16]
 8006898:	4313      	orrs	r3, r2
 800689a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	699b      	ldr	r3, [r3, #24]
 80068a0:	693a      	ldr	r2, [r7, #16]
 80068a2:	4313      	orrs	r3, r2
 80068a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	693a      	ldr	r2, [r7, #16]
 80068aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	68fa      	ldr	r2, [r7, #12]
 80068b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	685a      	ldr	r2, [r3, #4]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	697a      	ldr	r2, [r7, #20]
 80068be:	621a      	str	r2, [r3, #32]
}
 80068c0:	bf00      	nop
 80068c2:	371c      	adds	r7, #28
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr
 80068cc:	40010000 	.word	0x40010000
 80068d0:	40010400 	.word	0x40010400

080068d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b087      	sub	sp, #28
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6a1b      	ldr	r3, [r3, #32]
 80068e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6a1b      	ldr	r3, [r3, #32]
 80068e8:	f023 0210 	bic.w	r2, r3, #16
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	699b      	ldr	r3, [r3, #24]
 80068fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006902:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800690a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	021b      	lsls	r3, r3, #8
 8006912:	68fa      	ldr	r2, [r7, #12]
 8006914:	4313      	orrs	r3, r2
 8006916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	f023 0320 	bic.w	r3, r3, #32
 800691e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	011b      	lsls	r3, r3, #4
 8006926:	697a      	ldr	r2, [r7, #20]
 8006928:	4313      	orrs	r3, r2
 800692a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	4a22      	ldr	r2, [pc, #136]	@ (80069b8 <TIM_OC2_SetConfig+0xe4>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d003      	beq.n	800693c <TIM_OC2_SetConfig+0x68>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	4a21      	ldr	r2, [pc, #132]	@ (80069bc <TIM_OC2_SetConfig+0xe8>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d10d      	bne.n	8006958 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006942:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	68db      	ldr	r3, [r3, #12]
 8006948:	011b      	lsls	r3, r3, #4
 800694a:	697a      	ldr	r2, [r7, #20]
 800694c:	4313      	orrs	r3, r2
 800694e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006956:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	4a17      	ldr	r2, [pc, #92]	@ (80069b8 <TIM_OC2_SetConfig+0xe4>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d003      	beq.n	8006968 <TIM_OC2_SetConfig+0x94>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	4a16      	ldr	r2, [pc, #88]	@ (80069bc <TIM_OC2_SetConfig+0xe8>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d113      	bne.n	8006990 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800696e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006976:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	695b      	ldr	r3, [r3, #20]
 800697c:	009b      	lsls	r3, r3, #2
 800697e:	693a      	ldr	r2, [r7, #16]
 8006980:	4313      	orrs	r3, r2
 8006982:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	699b      	ldr	r3, [r3, #24]
 8006988:	009b      	lsls	r3, r3, #2
 800698a:	693a      	ldr	r2, [r7, #16]
 800698c:	4313      	orrs	r3, r2
 800698e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	693a      	ldr	r2, [r7, #16]
 8006994:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	68fa      	ldr	r2, [r7, #12]
 800699a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	685a      	ldr	r2, [r3, #4]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	697a      	ldr	r2, [r7, #20]
 80069a8:	621a      	str	r2, [r3, #32]
}
 80069aa:	bf00      	nop
 80069ac:	371c      	adds	r7, #28
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr
 80069b6:	bf00      	nop
 80069b8:	40010000 	.word	0x40010000
 80069bc:	40010400 	.word	0x40010400

080069c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b087      	sub	sp, #28
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6a1b      	ldr	r3, [r3, #32]
 80069ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6a1b      	ldr	r3, [r3, #32]
 80069d4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	69db      	ldr	r3, [r3, #28]
 80069e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f023 0303 	bic.w	r3, r3, #3
 80069f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	68fa      	ldr	r2, [r7, #12]
 80069fe:	4313      	orrs	r3, r2
 8006a00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006a08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	689b      	ldr	r3, [r3, #8]
 8006a0e:	021b      	lsls	r3, r3, #8
 8006a10:	697a      	ldr	r2, [r7, #20]
 8006a12:	4313      	orrs	r3, r2
 8006a14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	4a21      	ldr	r2, [pc, #132]	@ (8006aa0 <TIM_OC3_SetConfig+0xe0>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d003      	beq.n	8006a26 <TIM_OC3_SetConfig+0x66>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	4a20      	ldr	r2, [pc, #128]	@ (8006aa4 <TIM_OC3_SetConfig+0xe4>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d10d      	bne.n	8006a42 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006a2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	68db      	ldr	r3, [r3, #12]
 8006a32:	021b      	lsls	r3, r3, #8
 8006a34:	697a      	ldr	r2, [r7, #20]
 8006a36:	4313      	orrs	r3, r2
 8006a38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006a40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	4a16      	ldr	r2, [pc, #88]	@ (8006aa0 <TIM_OC3_SetConfig+0xe0>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d003      	beq.n	8006a52 <TIM_OC3_SetConfig+0x92>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	4a15      	ldr	r2, [pc, #84]	@ (8006aa4 <TIM_OC3_SetConfig+0xe4>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d113      	bne.n	8006a7a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006a58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006a60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	695b      	ldr	r3, [r3, #20]
 8006a66:	011b      	lsls	r3, r3, #4
 8006a68:	693a      	ldr	r2, [r7, #16]
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	699b      	ldr	r3, [r3, #24]
 8006a72:	011b      	lsls	r3, r3, #4
 8006a74:	693a      	ldr	r2, [r7, #16]
 8006a76:	4313      	orrs	r3, r2
 8006a78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	693a      	ldr	r2, [r7, #16]
 8006a7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	68fa      	ldr	r2, [r7, #12]
 8006a84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	685a      	ldr	r2, [r3, #4]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	697a      	ldr	r2, [r7, #20]
 8006a92:	621a      	str	r2, [r3, #32]
}
 8006a94:	bf00      	nop
 8006a96:	371c      	adds	r7, #28
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr
 8006aa0:	40010000 	.word	0x40010000
 8006aa4:	40010400 	.word	0x40010400

08006aa8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b087      	sub	sp, #28
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
 8006ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6a1b      	ldr	r3, [r3, #32]
 8006ab6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6a1b      	ldr	r3, [r3, #32]
 8006abc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	69db      	ldr	r3, [r3, #28]
 8006ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ad6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ade:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	021b      	lsls	r3, r3, #8
 8006ae6:	68fa      	ldr	r2, [r7, #12]
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006af2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	689b      	ldr	r3, [r3, #8]
 8006af8:	031b      	lsls	r3, r3, #12
 8006afa:	693a      	ldr	r2, [r7, #16]
 8006afc:	4313      	orrs	r3, r2
 8006afe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	4a12      	ldr	r2, [pc, #72]	@ (8006b4c <TIM_OC4_SetConfig+0xa4>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d003      	beq.n	8006b10 <TIM_OC4_SetConfig+0x68>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	4a11      	ldr	r2, [pc, #68]	@ (8006b50 <TIM_OC4_SetConfig+0xa8>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d109      	bne.n	8006b24 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006b16:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	695b      	ldr	r3, [r3, #20]
 8006b1c:	019b      	lsls	r3, r3, #6
 8006b1e:	697a      	ldr	r2, [r7, #20]
 8006b20:	4313      	orrs	r3, r2
 8006b22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	697a      	ldr	r2, [r7, #20]
 8006b28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	68fa      	ldr	r2, [r7, #12]
 8006b2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	685a      	ldr	r2, [r3, #4]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	693a      	ldr	r2, [r7, #16]
 8006b3c:	621a      	str	r2, [r3, #32]
}
 8006b3e:	bf00      	nop
 8006b40:	371c      	adds	r7, #28
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr
 8006b4a:	bf00      	nop
 8006b4c:	40010000 	.word	0x40010000
 8006b50:	40010400 	.word	0x40010400

08006b54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b087      	sub	sp, #28
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	60f8      	str	r0, [r7, #12]
 8006b5c:	60b9      	str	r1, [r7, #8]
 8006b5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	6a1b      	ldr	r3, [r3, #32]
 8006b64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	6a1b      	ldr	r3, [r3, #32]
 8006b6a:	f023 0201 	bic.w	r2, r3, #1
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	699b      	ldr	r3, [r3, #24]
 8006b76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006b7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	011b      	lsls	r3, r3, #4
 8006b84:	693a      	ldr	r2, [r7, #16]
 8006b86:	4313      	orrs	r3, r2
 8006b88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	f023 030a 	bic.w	r3, r3, #10
 8006b90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b92:	697a      	ldr	r2, [r7, #20]
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	4313      	orrs	r3, r2
 8006b98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	693a      	ldr	r2, [r7, #16]
 8006b9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	697a      	ldr	r2, [r7, #20]
 8006ba4:	621a      	str	r2, [r3, #32]
}
 8006ba6:	bf00      	nop
 8006ba8:	371c      	adds	r7, #28
 8006baa:	46bd      	mov	sp, r7
 8006bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb0:	4770      	bx	lr

08006bb2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bb2:	b480      	push	{r7}
 8006bb4:	b087      	sub	sp, #28
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	60f8      	str	r0, [r7, #12]
 8006bba:	60b9      	str	r1, [r7, #8]
 8006bbc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	6a1b      	ldr	r3, [r3, #32]
 8006bc2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	6a1b      	ldr	r3, [r3, #32]
 8006bc8:	f023 0210 	bic.w	r2, r3, #16
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	699b      	ldr	r3, [r3, #24]
 8006bd4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006bdc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	031b      	lsls	r3, r3, #12
 8006be2:	693a      	ldr	r2, [r7, #16]
 8006be4:	4313      	orrs	r3, r2
 8006be6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006bee:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	011b      	lsls	r3, r3, #4
 8006bf4:	697a      	ldr	r2, [r7, #20]
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	693a      	ldr	r2, [r7, #16]
 8006bfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	697a      	ldr	r2, [r7, #20]
 8006c04:	621a      	str	r2, [r3, #32]
}
 8006c06:	bf00      	nop
 8006c08:	371c      	adds	r7, #28
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c10:	4770      	bx	lr

08006c12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c12:	b480      	push	{r7}
 8006c14:	b085      	sub	sp, #20
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	6078      	str	r0, [r7, #4]
 8006c1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	689b      	ldr	r3, [r3, #8]
 8006c20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c2a:	683a      	ldr	r2, [r7, #0]
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	f043 0307 	orr.w	r3, r3, #7
 8006c34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	68fa      	ldr	r2, [r7, #12]
 8006c3a:	609a      	str	r2, [r3, #8]
}
 8006c3c:	bf00      	nop
 8006c3e:	3714      	adds	r7, #20
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr

08006c48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b087      	sub	sp, #28
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	60b9      	str	r1, [r7, #8]
 8006c52:	607a      	str	r2, [r7, #4]
 8006c54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006c62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	021a      	lsls	r2, r3, #8
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	431a      	orrs	r2, r3
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	697a      	ldr	r2, [r7, #20]
 8006c72:	4313      	orrs	r3, r2
 8006c74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	697a      	ldr	r2, [r7, #20]
 8006c7a:	609a      	str	r2, [r3, #8]
}
 8006c7c:	bf00      	nop
 8006c7e:	371c      	adds	r7, #28
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr

08006c88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b087      	sub	sp, #28
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	60f8      	str	r0, [r7, #12]
 8006c90:	60b9      	str	r1, [r7, #8]
 8006c92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	f003 031f 	and.w	r3, r3, #31
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8006ca0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	6a1a      	ldr	r2, [r3, #32]
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	43db      	mvns	r3, r3
 8006caa:	401a      	ands	r2, r3
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	6a1a      	ldr	r2, [r3, #32]
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	f003 031f 	and.w	r3, r3, #31
 8006cba:	6879      	ldr	r1, [r7, #4]
 8006cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8006cc0:	431a      	orrs	r2, r3
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	621a      	str	r2, [r3, #32]
}
 8006cc6:	bf00      	nop
 8006cc8:	371c      	adds	r7, #28
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr
	...

08006cd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b085      	sub	sp, #20
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d101      	bne.n	8006cec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ce8:	2302      	movs	r3, #2
 8006cea:	e05a      	b.n	8006da2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2201      	movs	r2, #1
 8006cf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2202      	movs	r2, #2
 8006cf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	68fa      	ldr	r2, [r7, #12]
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	68fa      	ldr	r2, [r7, #12]
 8006d24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a21      	ldr	r2, [pc, #132]	@ (8006db0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d022      	beq.n	8006d76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d38:	d01d      	beq.n	8006d76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a1d      	ldr	r2, [pc, #116]	@ (8006db4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d018      	beq.n	8006d76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a1b      	ldr	r2, [pc, #108]	@ (8006db8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d013      	beq.n	8006d76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a1a      	ldr	r2, [pc, #104]	@ (8006dbc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d00e      	beq.n	8006d76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a18      	ldr	r2, [pc, #96]	@ (8006dc0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d009      	beq.n	8006d76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a17      	ldr	r2, [pc, #92]	@ (8006dc4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d004      	beq.n	8006d76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a15      	ldr	r2, [pc, #84]	@ (8006dc8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d10c      	bne.n	8006d90 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	68ba      	ldr	r2, [r7, #8]
 8006d84:	4313      	orrs	r3, r2
 8006d86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	68ba      	ldr	r2, [r7, #8]
 8006d8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2201      	movs	r2, #1
 8006d94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006da0:	2300      	movs	r3, #0
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3714      	adds	r7, #20
 8006da6:	46bd      	mov	sp, r7
 8006da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dac:	4770      	bx	lr
 8006dae:	bf00      	nop
 8006db0:	40010000 	.word	0x40010000
 8006db4:	40000400 	.word	0x40000400
 8006db8:	40000800 	.word	0x40000800
 8006dbc:	40000c00 	.word	0x40000c00
 8006dc0:	40010400 	.word	0x40010400
 8006dc4:	40014000 	.word	0x40014000
 8006dc8:	40001800 	.word	0x40001800

08006dcc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b083      	sub	sp, #12
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006dd4:	bf00      	nop
 8006dd6:	370c      	adds	r7, #12
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr

08006de0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b083      	sub	sp, #12
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006de8:	bf00      	nop
 8006dea:	370c      	adds	r7, #12
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr

08006df4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b082      	sub	sp, #8
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d101      	bne.n	8006e06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e02:	2301      	movs	r3, #1
 8006e04:	e042      	b.n	8006e8c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e0c:	b2db      	uxtb	r3, r3
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d106      	bne.n	8006e20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2200      	movs	r2, #0
 8006e16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f7fb fcf4 	bl	8002808 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2224      	movs	r2, #36	@ 0x24
 8006e24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	68da      	ldr	r2, [r3, #12]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006e36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f000 ff95 	bl	8007d68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	691a      	ldr	r2, [r3, #16]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006e4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	695a      	ldr	r2, [r3, #20]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006e5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	68da      	ldr	r2, [r3, #12]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006e6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2200      	movs	r2, #0
 8006e72:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2220      	movs	r2, #32
 8006e78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2220      	movs	r2, #32
 8006e80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2200      	movs	r2, #0
 8006e88:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006e8a:	2300      	movs	r3, #0
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3708      	adds	r7, #8
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}

08006e94 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b08c      	sub	sp, #48	@ 0x30
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	60f8      	str	r0, [r7, #12]
 8006e9c:	60b9      	str	r1, [r7, #8]
 8006e9e:	4613      	mov	r3, r2
 8006ea0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ea8:	b2db      	uxtb	r3, r3
 8006eaa:	2b20      	cmp	r3, #32
 8006eac:	d162      	bne.n	8006f74 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d002      	beq.n	8006eba <HAL_UART_Transmit_DMA+0x26>
 8006eb4:	88fb      	ldrh	r3, [r7, #6]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d101      	bne.n	8006ebe <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	e05b      	b.n	8006f76 <HAL_UART_Transmit_DMA+0xe2>
    }

    huart->pTxBuffPtr = pData;
 8006ebe:	68ba      	ldr	r2, [r7, #8]
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	88fa      	ldrh	r2, [r7, #6]
 8006ec8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	88fa      	ldrh	r2, [r7, #6]
 8006ece:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2221      	movs	r2, #33	@ 0x21
 8006eda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ee2:	4a27      	ldr	r2, [pc, #156]	@ (8006f80 <HAL_UART_Transmit_DMA+0xec>)
 8006ee4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eea:	4a26      	ldr	r2, [pc, #152]	@ (8006f84 <HAL_UART_Transmit_DMA+0xf0>)
 8006eec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ef2:	4a25      	ldr	r2, [pc, #148]	@ (8006f88 <HAL_UART_Transmit_DMA+0xf4>)
 8006ef4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006efa:	2200      	movs	r2, #0
 8006efc:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8006efe:	f107 0308 	add.w	r3, r7, #8
 8006f02:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size) != HAL_OK)
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006f08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f0a:	6819      	ldr	r1, [r3, #0]
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	3304      	adds	r3, #4
 8006f12:	461a      	mov	r2, r3
 8006f14:	88fb      	ldrh	r3, [r7, #6]
 8006f16:	f7fd f80f 	bl	8003f38 <HAL_DMA_Start_IT>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d008      	beq.n	8006f32 <HAL_UART_Transmit_DMA+0x9e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2210      	movs	r2, #16
 8006f24:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2220      	movs	r2, #32
 8006f2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_ERROR;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	e021      	b.n	8006f76 <HAL_UART_Transmit_DMA+0xe2>
    }
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006f3a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	3314      	adds	r3, #20
 8006f42:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f44:	69bb      	ldr	r3, [r7, #24]
 8006f46:	e853 3f00 	ldrex	r3, [r3]
 8006f4a:	617b      	str	r3, [r7, #20]
   return(result);
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f52:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	3314      	adds	r3, #20
 8006f5a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006f5c:	627a      	str	r2, [r7, #36]	@ 0x24
 8006f5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f60:	6a39      	ldr	r1, [r7, #32]
 8006f62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f64:	e841 2300 	strex	r3, r2, [r1]
 8006f68:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f6a:	69fb      	ldr	r3, [r7, #28]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d1e5      	bne.n	8006f3c <HAL_UART_Transmit_DMA+0xa8>

    return HAL_OK;
 8006f70:	2300      	movs	r3, #0
 8006f72:	e000      	b.n	8006f76 <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8006f74:	2302      	movs	r3, #2
  }
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3730      	adds	r7, #48	@ 0x30
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
 8006f7e:	bf00      	nop
 8006f80:	080075e5 	.word	0x080075e5
 8006f84:	0800767f 	.word	0x0800767f
 8006f88:	08007803 	.word	0x08007803

08006f8c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b08c      	sub	sp, #48	@ 0x30
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	60f8      	str	r0, [r7, #12]
 8006f94:	60b9      	str	r1, [r7, #8]
 8006f96:	4613      	mov	r3, r2
 8006f98:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	2b20      	cmp	r3, #32
 8006fa4:	d146      	bne.n	8007034 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d002      	beq.n	8006fb2 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8006fac:	88fb      	ldrh	r3, [r7, #6]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d101      	bne.n	8006fb6 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	e03f      	b.n	8007036 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2201      	movs	r2, #1
 8006fba:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8006fc2:	88fb      	ldrh	r3, [r7, #6]
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	68b9      	ldr	r1, [r7, #8]
 8006fc8:	68f8      	ldr	r0, [r7, #12]
 8006fca:	f000 fc65 	bl	8007898 <UART_Start_Receive_DMA>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d125      	bne.n	8007028 <HAL_UARTEx_ReceiveToIdle_DMA+0x9c>
    {
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006fdc:	2300      	movs	r3, #0
 8006fde:	613b      	str	r3, [r7, #16]
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	613b      	str	r3, [r7, #16]
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	613b      	str	r3, [r7, #16]
 8006ff0:	693b      	ldr	r3, [r7, #16]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	330c      	adds	r3, #12
 8006ff8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ffa:	69bb      	ldr	r3, [r7, #24]
 8006ffc:	e853 3f00 	ldrex	r3, [r3]
 8007000:	617b      	str	r3, [r7, #20]
   return(result);
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	f043 0310 	orr.w	r3, r3, #16
 8007008:	62bb      	str	r3, [r7, #40]	@ 0x28
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	330c      	adds	r3, #12
 8007010:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007012:	627a      	str	r2, [r7, #36]	@ 0x24
 8007014:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007016:	6a39      	ldr	r1, [r7, #32]
 8007018:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800701a:	e841 2300 	strex	r3, r2, [r1]
 800701e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007020:	69fb      	ldr	r3, [r7, #28]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d1e5      	bne.n	8006ff2 <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
 8007026:	e002      	b.n	800702e <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 8007028:	2301      	movs	r3, #1
 800702a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 800702e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007032:	e000      	b.n	8007036 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
  }
  else
  {
    return HAL_BUSY;
 8007034:	2302      	movs	r3, #2
  }
}
 8007036:	4618      	mov	r0, r3
 8007038:	3730      	adds	r7, #48	@ 0x30
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}
	...

08007040 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b0ba      	sub	sp, #232	@ 0xe8
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	68db      	ldr	r3, [r3, #12]
 8007058:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	695b      	ldr	r3, [r3, #20]
 8007062:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007066:	2300      	movs	r3, #0
 8007068:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800706c:	2300      	movs	r3, #0
 800706e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007072:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007076:	f003 030f 	and.w	r3, r3, #15
 800707a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800707e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007082:	2b00      	cmp	r3, #0
 8007084:	d10f      	bne.n	80070a6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800708a:	f003 0320 	and.w	r3, r3, #32
 800708e:	2b00      	cmp	r3, #0
 8007090:	d009      	beq.n	80070a6 <HAL_UART_IRQHandler+0x66>
 8007092:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007096:	f003 0320 	and.w	r3, r3, #32
 800709a:	2b00      	cmp	r3, #0
 800709c:	d003      	beq.n	80070a6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f000 fda4 	bl	8007bec <UART_Receive_IT>
      return;
 80070a4:	e273      	b.n	800758e <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80070a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	f000 80de 	beq.w	800726c <HAL_UART_IRQHandler+0x22c>
 80070b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80070b4:	f003 0301 	and.w	r3, r3, #1
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d106      	bne.n	80070ca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80070bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070c0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	f000 80d1 	beq.w	800726c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80070ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070ce:	f003 0301 	and.w	r3, r3, #1
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d00b      	beq.n	80070ee <HAL_UART_IRQHandler+0xae>
 80070d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d005      	beq.n	80070ee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070e6:	f043 0201 	orr.w	r2, r3, #1
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80070ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070f2:	f003 0304 	and.w	r3, r3, #4
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d00b      	beq.n	8007112 <HAL_UART_IRQHandler+0xd2>
 80070fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80070fe:	f003 0301 	and.w	r3, r3, #1
 8007102:	2b00      	cmp	r3, #0
 8007104:	d005      	beq.n	8007112 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800710a:	f043 0202 	orr.w	r2, r3, #2
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007116:	f003 0302 	and.w	r3, r3, #2
 800711a:	2b00      	cmp	r3, #0
 800711c:	d00b      	beq.n	8007136 <HAL_UART_IRQHandler+0xf6>
 800711e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007122:	f003 0301 	and.w	r3, r3, #1
 8007126:	2b00      	cmp	r3, #0
 8007128:	d005      	beq.n	8007136 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800712e:	f043 0204 	orr.w	r2, r3, #4
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007136:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800713a:	f003 0308 	and.w	r3, r3, #8
 800713e:	2b00      	cmp	r3, #0
 8007140:	d011      	beq.n	8007166 <HAL_UART_IRQHandler+0x126>
 8007142:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007146:	f003 0320 	and.w	r3, r3, #32
 800714a:	2b00      	cmp	r3, #0
 800714c:	d105      	bne.n	800715a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800714e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007152:	f003 0301 	and.w	r3, r3, #1
 8007156:	2b00      	cmp	r3, #0
 8007158:	d005      	beq.n	8007166 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800715e:	f043 0208 	orr.w	r2, r3, #8
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800716a:	2b00      	cmp	r3, #0
 800716c:	f000 820a 	beq.w	8007584 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007170:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007174:	f003 0320 	and.w	r3, r3, #32
 8007178:	2b00      	cmp	r3, #0
 800717a:	d008      	beq.n	800718e <HAL_UART_IRQHandler+0x14e>
 800717c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007180:	f003 0320 	and.w	r3, r3, #32
 8007184:	2b00      	cmp	r3, #0
 8007186:	d002      	beq.n	800718e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f000 fd2f 	bl	8007bec <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	695b      	ldr	r3, [r3, #20]
 8007194:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007198:	2b40      	cmp	r3, #64	@ 0x40
 800719a:	bf0c      	ite	eq
 800719c:	2301      	moveq	r3, #1
 800719e:	2300      	movne	r3, #0
 80071a0:	b2db      	uxtb	r3, r3
 80071a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071aa:	f003 0308 	and.w	r3, r3, #8
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d103      	bne.n	80071ba <HAL_UART_IRQHandler+0x17a>
 80071b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d04f      	beq.n	800725a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f000 fc3a 	bl	8007a34 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	695b      	ldr	r3, [r3, #20]
 80071c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071ca:	2b40      	cmp	r3, #64	@ 0x40
 80071cc:	d141      	bne.n	8007252 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	3314      	adds	r3, #20
 80071d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80071dc:	e853 3f00 	ldrex	r3, [r3]
 80071e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80071e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80071e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80071ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	3314      	adds	r3, #20
 80071f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80071fa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80071fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007202:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007206:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800720a:	e841 2300 	strex	r3, r2, [r1]
 800720e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007212:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007216:	2b00      	cmp	r3, #0
 8007218:	d1d9      	bne.n	80071ce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800721e:	2b00      	cmp	r3, #0
 8007220:	d013      	beq.n	800724a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007226:	4a8a      	ldr	r2, [pc, #552]	@ (8007450 <HAL_UART_IRQHandler+0x410>)
 8007228:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800722e:	4618      	mov	r0, r3
 8007230:	f7fc ff4a 	bl	80040c8 <HAL_DMA_Abort_IT>
 8007234:	4603      	mov	r3, r0
 8007236:	2b00      	cmp	r3, #0
 8007238:	d016      	beq.n	8007268 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800723e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007240:	687a      	ldr	r2, [r7, #4]
 8007242:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007244:	4610      	mov	r0, r2
 8007246:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007248:	e00e      	b.n	8007268 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f000 f9c0 	bl	80075d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007250:	e00a      	b.n	8007268 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 f9bc 	bl	80075d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007258:	e006      	b.n	8007268 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f000 f9b8 	bl	80075d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2200      	movs	r2, #0
 8007264:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007266:	e18d      	b.n	8007584 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007268:	bf00      	nop
    return;
 800726a:	e18b      	b.n	8007584 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007270:	2b01      	cmp	r3, #1
 8007272:	f040 8167 	bne.w	8007544 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007276:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800727a:	f003 0310 	and.w	r3, r3, #16
 800727e:	2b00      	cmp	r3, #0
 8007280:	f000 8160 	beq.w	8007544 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8007284:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007288:	f003 0310 	and.w	r3, r3, #16
 800728c:	2b00      	cmp	r3, #0
 800728e:	f000 8159 	beq.w	8007544 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007292:	2300      	movs	r3, #0
 8007294:	60bb      	str	r3, [r7, #8]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	60bb      	str	r3, [r7, #8]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	60bb      	str	r3, [r7, #8]
 80072a6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	695b      	ldr	r3, [r3, #20]
 80072ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072b2:	2b40      	cmp	r3, #64	@ 0x40
 80072b4:	f040 80ce 	bne.w	8007454 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80072c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	f000 80a9 	beq.w	8007420 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80072d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80072d6:	429a      	cmp	r2, r3
 80072d8:	f080 80a2 	bcs.w	8007420 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80072e2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072e8:	69db      	ldr	r3, [r3, #28]
 80072ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072ee:	f000 8088 	beq.w	8007402 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	330c      	adds	r3, #12
 80072f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007300:	e853 3f00 	ldrex	r3, [r3]
 8007304:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007308:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800730c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007310:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	330c      	adds	r3, #12
 800731a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800731e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007322:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007326:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800732a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800732e:	e841 2300 	strex	r3, r2, [r1]
 8007332:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007336:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800733a:	2b00      	cmp	r3, #0
 800733c:	d1d9      	bne.n	80072f2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	3314      	adds	r3, #20
 8007344:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007346:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007348:	e853 3f00 	ldrex	r3, [r3]
 800734c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800734e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007350:	f023 0301 	bic.w	r3, r3, #1
 8007354:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	3314      	adds	r3, #20
 800735e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007362:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007366:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007368:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800736a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800736e:	e841 2300 	strex	r3, r2, [r1]
 8007372:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007374:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007376:	2b00      	cmp	r3, #0
 8007378:	d1e1      	bne.n	800733e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	3314      	adds	r3, #20
 8007380:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007382:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007384:	e853 3f00 	ldrex	r3, [r3]
 8007388:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800738a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800738c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007390:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	3314      	adds	r3, #20
 800739a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800739e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80073a0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80073a4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80073a6:	e841 2300 	strex	r3, r2, [r1]
 80073aa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80073ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d1e3      	bne.n	800737a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2220      	movs	r2, #32
 80073b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2200      	movs	r2, #0
 80073be:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	330c      	adds	r3, #12
 80073c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073ca:	e853 3f00 	ldrex	r3, [r3]
 80073ce:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80073d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80073d2:	f023 0310 	bic.w	r3, r3, #16
 80073d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	330c      	adds	r3, #12
 80073e0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80073e4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80073e6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073e8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80073ea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80073ec:	e841 2300 	strex	r3, r2, [r1]
 80073f0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80073f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d1e3      	bne.n	80073c0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073fc:	4618      	mov	r0, r3
 80073fe:	f7fc fdf3 	bl	8003fe8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2202      	movs	r2, #2
 8007406:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007410:	b29b      	uxth	r3, r3
 8007412:	1ad3      	subs	r3, r2, r3
 8007414:	b29b      	uxth	r3, r3
 8007416:	4619      	mov	r1, r3
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f7fa f9f1 	bl	8001800 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800741e:	e0b3      	b.n	8007588 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007424:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007428:	429a      	cmp	r2, r3
 800742a:	f040 80ad 	bne.w	8007588 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007432:	69db      	ldr	r3, [r3, #28]
 8007434:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007438:	f040 80a6 	bne.w	8007588 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2202      	movs	r2, #2
 8007440:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007446:	4619      	mov	r1, r3
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f7fa f9d9 	bl	8001800 <HAL_UARTEx_RxEventCallback>
      return;
 800744e:	e09b      	b.n	8007588 <HAL_UART_IRQHandler+0x548>
 8007450:	08007afb 	.word	0x08007afb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800745c:	b29b      	uxth	r3, r3
 800745e:	1ad3      	subs	r3, r2, r3
 8007460:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007468:	b29b      	uxth	r3, r3
 800746a:	2b00      	cmp	r3, #0
 800746c:	f000 808e 	beq.w	800758c <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8007470:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007474:	2b00      	cmp	r3, #0
 8007476:	f000 8089 	beq.w	800758c <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	330c      	adds	r3, #12
 8007480:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007482:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007484:	e853 3f00 	ldrex	r3, [r3]
 8007488:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800748a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800748c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007490:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	330c      	adds	r3, #12
 800749a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800749e:	647a      	str	r2, [r7, #68]	@ 0x44
 80074a0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074a2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80074a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80074a6:	e841 2300 	strex	r3, r2, [r1]
 80074aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80074ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d1e3      	bne.n	800747a <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	3314      	adds	r3, #20
 80074b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074bc:	e853 3f00 	ldrex	r3, [r3]
 80074c0:	623b      	str	r3, [r7, #32]
   return(result);
 80074c2:	6a3b      	ldr	r3, [r7, #32]
 80074c4:	f023 0301 	bic.w	r3, r3, #1
 80074c8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	3314      	adds	r3, #20
 80074d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80074d6:	633a      	str	r2, [r7, #48]	@ 0x30
 80074d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80074dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074de:	e841 2300 	strex	r3, r2, [r1]
 80074e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80074e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d1e3      	bne.n	80074b2 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2220      	movs	r2, #32
 80074ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2200      	movs	r2, #0
 80074f6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	330c      	adds	r3, #12
 80074fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	e853 3f00 	ldrex	r3, [r3]
 8007506:	60fb      	str	r3, [r7, #12]
   return(result);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f023 0310 	bic.w	r3, r3, #16
 800750e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	330c      	adds	r3, #12
 8007518:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800751c:	61fa      	str	r2, [r7, #28]
 800751e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007520:	69b9      	ldr	r1, [r7, #24]
 8007522:	69fa      	ldr	r2, [r7, #28]
 8007524:	e841 2300 	strex	r3, r2, [r1]
 8007528:	617b      	str	r3, [r7, #20]
   return(result);
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d1e3      	bne.n	80074f8 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2202      	movs	r2, #2
 8007534:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007536:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800753a:	4619      	mov	r1, r3
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f7fa f95f 	bl	8001800 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007542:	e023      	b.n	800758c <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007544:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007548:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800754c:	2b00      	cmp	r3, #0
 800754e:	d009      	beq.n	8007564 <HAL_UART_IRQHandler+0x524>
 8007550:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007554:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007558:	2b00      	cmp	r3, #0
 800755a:	d003      	beq.n	8007564 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f000 fadd 	bl	8007b1c <UART_Transmit_IT>
    return;
 8007562:	e014      	b.n	800758e <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007564:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007568:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800756c:	2b00      	cmp	r3, #0
 800756e:	d00e      	beq.n	800758e <HAL_UART_IRQHandler+0x54e>
 8007570:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007574:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007578:	2b00      	cmp	r3, #0
 800757a:	d008      	beq.n	800758e <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f000 fb1d 	bl	8007bbc <UART_EndTransmit_IT>
    return;
 8007582:	e004      	b.n	800758e <HAL_UART_IRQHandler+0x54e>
    return;
 8007584:	bf00      	nop
 8007586:	e002      	b.n	800758e <HAL_UART_IRQHandler+0x54e>
      return;
 8007588:	bf00      	nop
 800758a:	e000      	b.n	800758e <HAL_UART_IRQHandler+0x54e>
      return;
 800758c:	bf00      	nop
  }
}
 800758e:	37e8      	adds	r7, #232	@ 0xe8
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}

08007594 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007594:	b480      	push	{r7}
 8007596:	b083      	sub	sp, #12
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800759c:	bf00      	nop
 800759e:	370c      	adds	r7, #12
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr

080075a8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b083      	sub	sp, #12
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80075b0:	bf00      	nop
 80075b2:	370c      	adds	r7, #12
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr

080075bc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80075bc:	b480      	push	{r7}
 80075be:	b083      	sub	sp, #12
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80075c4:	bf00      	nop
 80075c6:	370c      	adds	r7, #12
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr

080075d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b083      	sub	sp, #12
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80075d8:	bf00      	nop
 80075da:	370c      	adds	r7, #12
 80075dc:	46bd      	mov	sp, r7
 80075de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e2:	4770      	bx	lr

080075e4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b090      	sub	sp, #64	@ 0x40
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d137      	bne.n	8007670 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007600:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007602:	2200      	movs	r2, #0
 8007604:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007606:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	3314      	adds	r3, #20
 800760c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800760e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007610:	e853 3f00 	ldrex	r3, [r3]
 8007614:	623b      	str	r3, [r7, #32]
   return(result);
 8007616:	6a3b      	ldr	r3, [r7, #32]
 8007618:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800761c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800761e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	3314      	adds	r3, #20
 8007624:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007626:	633a      	str	r2, [r7, #48]	@ 0x30
 8007628:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800762a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800762c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800762e:	e841 2300 	strex	r3, r2, [r1]
 8007632:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007636:	2b00      	cmp	r3, #0
 8007638:	d1e5      	bne.n	8007606 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800763a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	330c      	adds	r3, #12
 8007640:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	e853 3f00 	ldrex	r3, [r3]
 8007648:	60fb      	str	r3, [r7, #12]
   return(result);
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007650:	637b      	str	r3, [r7, #52]	@ 0x34
 8007652:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	330c      	adds	r3, #12
 8007658:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800765a:	61fa      	str	r2, [r7, #28]
 800765c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800765e:	69b9      	ldr	r1, [r7, #24]
 8007660:	69fa      	ldr	r2, [r7, #28]
 8007662:	e841 2300 	strex	r3, r2, [r1]
 8007666:	617b      	str	r3, [r7, #20]
   return(result);
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d1e5      	bne.n	800763a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800766e:	e002      	b.n	8007676 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007670:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8007672:	f7fa f9ef 	bl	8001a54 <HAL_UART_TxCpltCallback>
}
 8007676:	bf00      	nop
 8007678:	3740      	adds	r7, #64	@ 0x40
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}

0800767e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800767e:	b580      	push	{r7, lr}
 8007680:	b084      	sub	sp, #16
 8007682:	af00      	add	r7, sp, #0
 8007684:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800768a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800768c:	68f8      	ldr	r0, [r7, #12]
 800768e:	f7ff ff81 	bl	8007594 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007692:	bf00      	nop
 8007694:	3710      	adds	r7, #16
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}

0800769a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800769a:	b580      	push	{r7, lr}
 800769c:	b09c      	sub	sp, #112	@ 0x70
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076a6:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d172      	bne.n	800779c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80076b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80076b8:	2200      	movs	r2, #0
 80076ba:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80076bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	330c      	adds	r3, #12
 80076c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076c6:	e853 3f00 	ldrex	r3, [r3]
 80076ca:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80076cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80076ce:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80076d2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80076d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	330c      	adds	r3, #12
 80076da:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80076dc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80076de:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80076e2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80076e4:	e841 2300 	strex	r3, r2, [r1]
 80076e8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80076ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d1e5      	bne.n	80076bc <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	3314      	adds	r3, #20
 80076f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076fa:	e853 3f00 	ldrex	r3, [r3]
 80076fe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007700:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007702:	f023 0301 	bic.w	r3, r3, #1
 8007706:	667b      	str	r3, [r7, #100]	@ 0x64
 8007708:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	3314      	adds	r3, #20
 800770e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007710:	647a      	str	r2, [r7, #68]	@ 0x44
 8007712:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007714:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007716:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007718:	e841 2300 	strex	r3, r2, [r1]
 800771c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800771e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007720:	2b00      	cmp	r3, #0
 8007722:	d1e5      	bne.n	80076f0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007724:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	3314      	adds	r3, #20
 800772a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800772c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800772e:	e853 3f00 	ldrex	r3, [r3]
 8007732:	623b      	str	r3, [r7, #32]
   return(result);
 8007734:	6a3b      	ldr	r3, [r7, #32]
 8007736:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800773a:	663b      	str	r3, [r7, #96]	@ 0x60
 800773c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	3314      	adds	r3, #20
 8007742:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007744:	633a      	str	r2, [r7, #48]	@ 0x30
 8007746:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007748:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800774a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800774c:	e841 2300 	strex	r3, r2, [r1]
 8007750:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007754:	2b00      	cmp	r3, #0
 8007756:	d1e5      	bne.n	8007724 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007758:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800775a:	2220      	movs	r2, #32
 800775c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007760:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007764:	2b01      	cmp	r3, #1
 8007766:	d119      	bne.n	800779c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007768:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	330c      	adds	r3, #12
 800776e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	e853 3f00 	ldrex	r3, [r3]
 8007776:	60fb      	str	r3, [r7, #12]
   return(result);
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f023 0310 	bic.w	r3, r3, #16
 800777e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007780:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	330c      	adds	r3, #12
 8007786:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007788:	61fa      	str	r2, [r7, #28]
 800778a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800778c:	69b9      	ldr	r1, [r7, #24]
 800778e:	69fa      	ldr	r2, [r7, #28]
 8007790:	e841 2300 	strex	r3, r2, [r1]
 8007794:	617b      	str	r3, [r7, #20]
   return(result);
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d1e5      	bne.n	8007768 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800779c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800779e:	2200      	movs	r2, #0
 80077a0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80077a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077a6:	2b01      	cmp	r3, #1
 80077a8:	d106      	bne.n	80077b8 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80077aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80077ac:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80077ae:	4619      	mov	r1, r3
 80077b0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80077b2:	f7fa f825 	bl	8001800 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80077b6:	e002      	b.n	80077be <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80077b8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80077ba:	f7ff fef5 	bl	80075a8 <HAL_UART_RxCpltCallback>
}
 80077be:	bf00      	nop
 80077c0:	3770      	adds	r7, #112	@ 0x70
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}

080077c6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80077c6:	b580      	push	{r7, lr}
 80077c8:	b084      	sub	sp, #16
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077d2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2201      	movs	r2, #1
 80077d8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077de:	2b01      	cmp	r3, #1
 80077e0:	d108      	bne.n	80077f4 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80077e6:	085b      	lsrs	r3, r3, #1
 80077e8:	b29b      	uxth	r3, r3
 80077ea:	4619      	mov	r1, r3
 80077ec:	68f8      	ldr	r0, [r7, #12]
 80077ee:	f7fa f807 	bl	8001800 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80077f2:	e002      	b.n	80077fa <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80077f4:	68f8      	ldr	r0, [r7, #12]
 80077f6:	f7ff fee1 	bl	80075bc <HAL_UART_RxHalfCpltCallback>
}
 80077fa:	bf00      	nop
 80077fc:	3710      	adds	r7, #16
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}

08007802 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007802:	b580      	push	{r7, lr}
 8007804:	b084      	sub	sp, #16
 8007806:	af00      	add	r7, sp, #0
 8007808:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800780a:	2300      	movs	r3, #0
 800780c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007812:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	695b      	ldr	r3, [r3, #20]
 800781a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800781e:	2b80      	cmp	r3, #128	@ 0x80
 8007820:	bf0c      	ite	eq
 8007822:	2301      	moveq	r3, #1
 8007824:	2300      	movne	r3, #0
 8007826:	b2db      	uxtb	r3, r3
 8007828:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007830:	b2db      	uxtb	r3, r3
 8007832:	2b21      	cmp	r3, #33	@ 0x21
 8007834:	d108      	bne.n	8007848 <UART_DMAError+0x46>
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d005      	beq.n	8007848 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	2200      	movs	r2, #0
 8007840:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8007842:	68b8      	ldr	r0, [r7, #8]
 8007844:	f000 f8ce 	bl	80079e4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	695b      	ldr	r3, [r3, #20]
 800784e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007852:	2b40      	cmp	r3, #64	@ 0x40
 8007854:	bf0c      	ite	eq
 8007856:	2301      	moveq	r3, #1
 8007858:	2300      	movne	r3, #0
 800785a:	b2db      	uxtb	r3, r3
 800785c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007864:	b2db      	uxtb	r3, r3
 8007866:	2b22      	cmp	r3, #34	@ 0x22
 8007868:	d108      	bne.n	800787c <UART_DMAError+0x7a>
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d005      	beq.n	800787c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	2200      	movs	r2, #0
 8007874:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8007876:	68b8      	ldr	r0, [r7, #8]
 8007878:	f000 f8dc 	bl	8007a34 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007880:	f043 0210 	orr.w	r2, r3, #16
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007888:	68b8      	ldr	r0, [r7, #8]
 800788a:	f7ff fea1 	bl	80075d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800788e:	bf00      	nop
 8007890:	3710      	adds	r7, #16
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}
	...

08007898 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b098      	sub	sp, #96	@ 0x60
 800789c:	af00      	add	r7, sp, #0
 800789e:	60f8      	str	r0, [r7, #12]
 80078a0:	60b9      	str	r1, [r7, #8]
 80078a2:	4613      	mov	r3, r2
 80078a4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80078a6:	68ba      	ldr	r2, [r7, #8]
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	88fa      	ldrh	r2, [r7, #6]
 80078b0:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2200      	movs	r2, #0
 80078b6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2222      	movs	r2, #34	@ 0x22
 80078bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078c4:	4a44      	ldr	r2, [pc, #272]	@ (80079d8 <UART_Start_Receive_DMA+0x140>)
 80078c6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078cc:	4a43      	ldr	r2, [pc, #268]	@ (80079dc <UART_Start_Receive_DMA+0x144>)
 80078ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078d4:	4a42      	ldr	r2, [pc, #264]	@ (80079e0 <UART_Start_Receive_DMA+0x148>)
 80078d6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078dc:	2200      	movs	r2, #0
 80078de:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80078e0:	f107 0308 	add.w	r3, r7, #8
 80078e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	3304      	adds	r3, #4
 80078f0:	4619      	mov	r1, r3
 80078f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80078f4:	681a      	ldr	r2, [r3, #0]
 80078f6:	88fb      	ldrh	r3, [r7, #6]
 80078f8:	f7fc fb1e 	bl	8003f38 <HAL_DMA_Start_IT>
 80078fc:	4603      	mov	r3, r0
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d008      	beq.n	8007914 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2210      	movs	r2, #16
 8007906:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2220      	movs	r2, #32
 800790c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 8007910:	2301      	movs	r3, #1
 8007912:	e05d      	b.n	80079d0 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007914:	2300      	movs	r3, #0
 8007916:	613b      	str	r3, [r7, #16]
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	613b      	str	r3, [r7, #16]
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	613b      	str	r3, [r7, #16]
 8007928:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	691b      	ldr	r3, [r3, #16]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d019      	beq.n	8007966 <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	330c      	adds	r3, #12
 8007938:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800793a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800793c:	e853 3f00 	ldrex	r3, [r3]
 8007940:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007942:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007944:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007948:	65bb      	str	r3, [r7, #88]	@ 0x58
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	330c      	adds	r3, #12
 8007950:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007952:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8007954:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007956:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007958:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800795a:	e841 2300 	strex	r3, r2, [r1]
 800795e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007960:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007962:	2b00      	cmp	r3, #0
 8007964:	d1e5      	bne.n	8007932 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	3314      	adds	r3, #20
 800796c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800796e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007970:	e853 3f00 	ldrex	r3, [r3]
 8007974:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007978:	f043 0301 	orr.w	r3, r3, #1
 800797c:	657b      	str	r3, [r7, #84]	@ 0x54
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	3314      	adds	r3, #20
 8007984:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007986:	63ba      	str	r2, [r7, #56]	@ 0x38
 8007988:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800798a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800798c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800798e:	e841 2300 	strex	r3, r2, [r1]
 8007992:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007996:	2b00      	cmp	r3, #0
 8007998:	d1e5      	bne.n	8007966 <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	3314      	adds	r3, #20
 80079a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079a2:	69bb      	ldr	r3, [r7, #24]
 80079a4:	e853 3f00 	ldrex	r3, [r3]
 80079a8:	617b      	str	r3, [r7, #20]
   return(result);
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079b0:	653b      	str	r3, [r7, #80]	@ 0x50
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	3314      	adds	r3, #20
 80079b8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80079ba:	627a      	str	r2, [r7, #36]	@ 0x24
 80079bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079be:	6a39      	ldr	r1, [r7, #32]
 80079c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80079c2:	e841 2300 	strex	r3, r2, [r1]
 80079c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80079c8:	69fb      	ldr	r3, [r7, #28]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d1e5      	bne.n	800799a <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 80079ce:	2300      	movs	r3, #0
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	3760      	adds	r7, #96	@ 0x60
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}
 80079d8:	0800769b 	.word	0x0800769b
 80079dc:	080077c7 	.word	0x080077c7
 80079e0:	08007803 	.word	0x08007803

080079e4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b089      	sub	sp, #36	@ 0x24
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	330c      	adds	r3, #12
 80079f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	e853 3f00 	ldrex	r3, [r3]
 80079fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007a02:	61fb      	str	r3, [r7, #28]
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	330c      	adds	r3, #12
 8007a0a:	69fa      	ldr	r2, [r7, #28]
 8007a0c:	61ba      	str	r2, [r7, #24]
 8007a0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a10:	6979      	ldr	r1, [r7, #20]
 8007a12:	69ba      	ldr	r2, [r7, #24]
 8007a14:	e841 2300 	strex	r3, r2, [r1]
 8007a18:	613b      	str	r3, [r7, #16]
   return(result);
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d1e5      	bne.n	80079ec <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2220      	movs	r2, #32
 8007a24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8007a28:	bf00      	nop
 8007a2a:	3724      	adds	r7, #36	@ 0x24
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a32:	4770      	bx	lr

08007a34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b095      	sub	sp, #84	@ 0x54
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	330c      	adds	r3, #12
 8007a42:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a46:	e853 3f00 	ldrex	r3, [r3]
 8007a4a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a4e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007a52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	330c      	adds	r3, #12
 8007a5a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007a5c:	643a      	str	r2, [r7, #64]	@ 0x40
 8007a5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a60:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007a62:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007a64:	e841 2300 	strex	r3, r2, [r1]
 8007a68:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007a6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d1e5      	bne.n	8007a3c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	3314      	adds	r3, #20
 8007a76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a78:	6a3b      	ldr	r3, [r7, #32]
 8007a7a:	e853 3f00 	ldrex	r3, [r3]
 8007a7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a80:	69fb      	ldr	r3, [r7, #28]
 8007a82:	f023 0301 	bic.w	r3, r3, #1
 8007a86:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	3314      	adds	r3, #20
 8007a8e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007a90:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007a92:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a94:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007a96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a98:	e841 2300 	strex	r3, r2, [r1]
 8007a9c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d1e5      	bne.n	8007a70 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	d119      	bne.n	8007ae0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	330c      	adds	r3, #12
 8007ab2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	e853 3f00 	ldrex	r3, [r3]
 8007aba:	60bb      	str	r3, [r7, #8]
   return(result);
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	f023 0310 	bic.w	r3, r3, #16
 8007ac2:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	330c      	adds	r3, #12
 8007aca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007acc:	61ba      	str	r2, [r7, #24]
 8007ace:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ad0:	6979      	ldr	r1, [r7, #20]
 8007ad2:	69ba      	ldr	r2, [r7, #24]
 8007ad4:	e841 2300 	strex	r3, r2, [r1]
 8007ad8:	613b      	str	r3, [r7, #16]
   return(result);
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d1e5      	bne.n	8007aac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2220      	movs	r2, #32
 8007ae4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2200      	movs	r2, #0
 8007aec:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007aee:	bf00      	nop
 8007af0:	3754      	adds	r7, #84	@ 0x54
 8007af2:	46bd      	mov	sp, r7
 8007af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af8:	4770      	bx	lr

08007afa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007afa:	b580      	push	{r7, lr}
 8007afc:	b084      	sub	sp, #16
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b06:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007b0e:	68f8      	ldr	r0, [r7, #12]
 8007b10:	f7ff fd5e 	bl	80075d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b14:	bf00      	nop
 8007b16:	3710      	adds	r7, #16
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b085      	sub	sp, #20
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b2a:	b2db      	uxtb	r3, r3
 8007b2c:	2b21      	cmp	r3, #33	@ 0x21
 8007b2e:	d13e      	bne.n	8007bae <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	689b      	ldr	r3, [r3, #8]
 8007b34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b38:	d114      	bne.n	8007b64 <UART_Transmit_IT+0x48>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	691b      	ldr	r3, [r3, #16]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d110      	bne.n	8007b64 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6a1b      	ldr	r3, [r3, #32]
 8007b46:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	881b      	ldrh	r3, [r3, #0]
 8007b4c:	461a      	mov	r2, r3
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b56:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6a1b      	ldr	r3, [r3, #32]
 8007b5c:	1c9a      	adds	r2, r3, #2
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	621a      	str	r2, [r3, #32]
 8007b62:	e008      	b.n	8007b76 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6a1b      	ldr	r3, [r3, #32]
 8007b68:	1c59      	adds	r1, r3, #1
 8007b6a:	687a      	ldr	r2, [r7, #4]
 8007b6c:	6211      	str	r1, [r2, #32]
 8007b6e:	781a      	ldrb	r2, [r3, #0]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	3b01      	subs	r3, #1
 8007b7e:	b29b      	uxth	r3, r3
 8007b80:	687a      	ldr	r2, [r7, #4]
 8007b82:	4619      	mov	r1, r3
 8007b84:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d10f      	bne.n	8007baa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	68da      	ldr	r2, [r3, #12]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007b98:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	68da      	ldr	r2, [r3, #12]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007ba8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007baa:	2300      	movs	r3, #0
 8007bac:	e000      	b.n	8007bb0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007bae:	2302      	movs	r3, #2
  }
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3714      	adds	r7, #20
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bba:	4770      	bx	lr

08007bbc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b082      	sub	sp, #8
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	68da      	ldr	r2, [r3, #12]
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007bd2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2220      	movs	r2, #32
 8007bd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f7f9 ff39 	bl	8001a54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007be2:	2300      	movs	r3, #0
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	3708      	adds	r7, #8
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}

08007bec <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b08c      	sub	sp, #48	@ 0x30
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007c02:	b2db      	uxtb	r3, r3
 8007c04:	2b22      	cmp	r3, #34	@ 0x22
 8007c06:	f040 80aa 	bne.w	8007d5e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	689b      	ldr	r3, [r3, #8]
 8007c0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c12:	d115      	bne.n	8007c40 <UART_Receive_IT+0x54>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	691b      	ldr	r3, [r3, #16]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d111      	bne.n	8007c40 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c20:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	b29b      	uxth	r3, r3
 8007c2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c2e:	b29a      	uxth	r2, r3
 8007c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c32:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c38:	1c9a      	adds	r2, r3, #2
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	629a      	str	r2, [r3, #40]	@ 0x28
 8007c3e:	e024      	b.n	8007c8a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c44:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	689b      	ldr	r3, [r3, #8]
 8007c4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c4e:	d007      	beq.n	8007c60 <UART_Receive_IT+0x74>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	689b      	ldr	r3, [r3, #8]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d10a      	bne.n	8007c6e <UART_Receive_IT+0x82>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	691b      	ldr	r3, [r3, #16]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d106      	bne.n	8007c6e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	b2da      	uxtb	r2, r3
 8007c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c6a:	701a      	strb	r2, [r3, #0]
 8007c6c:	e008      	b.n	8007c80 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	b2db      	uxtb	r3, r3
 8007c76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c7a:	b2da      	uxtb	r2, r3
 8007c7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c7e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c84:	1c5a      	adds	r2, r3, #1
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007c8e:	b29b      	uxth	r3, r3
 8007c90:	3b01      	subs	r3, #1
 8007c92:	b29b      	uxth	r3, r3
 8007c94:	687a      	ldr	r2, [r7, #4]
 8007c96:	4619      	mov	r1, r3
 8007c98:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d15d      	bne.n	8007d5a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	68da      	ldr	r2, [r3, #12]
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f022 0220 	bic.w	r2, r2, #32
 8007cac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	68da      	ldr	r2, [r3, #12]
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007cbc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	695a      	ldr	r2, [r3, #20]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f022 0201 	bic.w	r2, r2, #1
 8007ccc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2220      	movs	r2, #32
 8007cd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	d135      	bne.n	8007d50 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	330c      	adds	r3, #12
 8007cf0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	e853 3f00 	ldrex	r3, [r3]
 8007cf8:	613b      	str	r3, [r7, #16]
   return(result);
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	f023 0310 	bic.w	r3, r3, #16
 8007d00:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	330c      	adds	r3, #12
 8007d08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d0a:	623a      	str	r2, [r7, #32]
 8007d0c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d0e:	69f9      	ldr	r1, [r7, #28]
 8007d10:	6a3a      	ldr	r2, [r7, #32]
 8007d12:	e841 2300 	strex	r3, r2, [r1]
 8007d16:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d18:	69bb      	ldr	r3, [r7, #24]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d1e5      	bne.n	8007cea <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f003 0310 	and.w	r3, r3, #16
 8007d28:	2b10      	cmp	r3, #16
 8007d2a:	d10a      	bne.n	8007d42 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	60fb      	str	r3, [r7, #12]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	60fb      	str	r3, [r7, #12]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	60fb      	str	r3, [r7, #12]
 8007d40:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007d46:	4619      	mov	r1, r3
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f7f9 fd59 	bl	8001800 <HAL_UARTEx_RxEventCallback>
 8007d4e:	e002      	b.n	8007d56 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f7ff fc29 	bl	80075a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007d56:	2300      	movs	r3, #0
 8007d58:	e002      	b.n	8007d60 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	e000      	b.n	8007d60 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007d5e:	2302      	movs	r3, #2
  }
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	3730      	adds	r7, #48	@ 0x30
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}

08007d68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d6c:	b0c0      	sub	sp, #256	@ 0x100
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	691b      	ldr	r3, [r3, #16]
 8007d7c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d84:	68d9      	ldr	r1, [r3, #12]
 8007d86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d8a:	681a      	ldr	r2, [r3, #0]
 8007d8c:	ea40 0301 	orr.w	r3, r0, r1
 8007d90:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007d92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d96:	689a      	ldr	r2, [r3, #8]
 8007d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d9c:	691b      	ldr	r3, [r3, #16]
 8007d9e:	431a      	orrs	r2, r3
 8007da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007da4:	695b      	ldr	r3, [r3, #20]
 8007da6:	431a      	orrs	r2, r3
 8007da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007dac:	69db      	ldr	r3, [r3, #28]
 8007dae:	4313      	orrs	r3, r2
 8007db0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	68db      	ldr	r3, [r3, #12]
 8007dbc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007dc0:	f021 010c 	bic.w	r1, r1, #12
 8007dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007dc8:	681a      	ldr	r2, [r3, #0]
 8007dca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007dce:	430b      	orrs	r3, r1
 8007dd0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	695b      	ldr	r3, [r3, #20]
 8007dda:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007dde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007de2:	6999      	ldr	r1, [r3, #24]
 8007de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007de8:	681a      	ldr	r2, [r3, #0]
 8007dea:	ea40 0301 	orr.w	r3, r0, r1
 8007dee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007df4:	681a      	ldr	r2, [r3, #0]
 8007df6:	4b8f      	ldr	r3, [pc, #572]	@ (8008034 <UART_SetConfig+0x2cc>)
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	d005      	beq.n	8007e08 <UART_SetConfig+0xa0>
 8007dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e00:	681a      	ldr	r2, [r3, #0]
 8007e02:	4b8d      	ldr	r3, [pc, #564]	@ (8008038 <UART_SetConfig+0x2d0>)
 8007e04:	429a      	cmp	r2, r3
 8007e06:	d104      	bne.n	8007e12 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007e08:	f7fd fe82 	bl	8005b10 <HAL_RCC_GetPCLK2Freq>
 8007e0c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007e10:	e003      	b.n	8007e1a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007e12:	f7fd fe69 	bl	8005ae8 <HAL_RCC_GetPCLK1Freq>
 8007e16:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e1e:	69db      	ldr	r3, [r3, #28]
 8007e20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007e24:	f040 810c 	bne.w	8008040 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007e28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007e32:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007e36:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007e3a:	4622      	mov	r2, r4
 8007e3c:	462b      	mov	r3, r5
 8007e3e:	1891      	adds	r1, r2, r2
 8007e40:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007e42:	415b      	adcs	r3, r3
 8007e44:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007e46:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007e4a:	4621      	mov	r1, r4
 8007e4c:	eb12 0801 	adds.w	r8, r2, r1
 8007e50:	4629      	mov	r1, r5
 8007e52:	eb43 0901 	adc.w	r9, r3, r1
 8007e56:	f04f 0200 	mov.w	r2, #0
 8007e5a:	f04f 0300 	mov.w	r3, #0
 8007e5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007e62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007e66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007e6a:	4690      	mov	r8, r2
 8007e6c:	4699      	mov	r9, r3
 8007e6e:	4623      	mov	r3, r4
 8007e70:	eb18 0303 	adds.w	r3, r8, r3
 8007e74:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007e78:	462b      	mov	r3, r5
 8007e7a:	eb49 0303 	adc.w	r3, r9, r3
 8007e7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007e82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007e8e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007e92:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007e96:	460b      	mov	r3, r1
 8007e98:	18db      	adds	r3, r3, r3
 8007e9a:	653b      	str	r3, [r7, #80]	@ 0x50
 8007e9c:	4613      	mov	r3, r2
 8007e9e:	eb42 0303 	adc.w	r3, r2, r3
 8007ea2:	657b      	str	r3, [r7, #84]	@ 0x54
 8007ea4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007ea8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007eac:	f7f8 feec 	bl	8000c88 <__aeabi_uldivmod>
 8007eb0:	4602      	mov	r2, r0
 8007eb2:	460b      	mov	r3, r1
 8007eb4:	4b61      	ldr	r3, [pc, #388]	@ (800803c <UART_SetConfig+0x2d4>)
 8007eb6:	fba3 2302 	umull	r2, r3, r3, r2
 8007eba:	095b      	lsrs	r3, r3, #5
 8007ebc:	011c      	lsls	r4, r3, #4
 8007ebe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007ec8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007ecc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007ed0:	4642      	mov	r2, r8
 8007ed2:	464b      	mov	r3, r9
 8007ed4:	1891      	adds	r1, r2, r2
 8007ed6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007ed8:	415b      	adcs	r3, r3
 8007eda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007edc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007ee0:	4641      	mov	r1, r8
 8007ee2:	eb12 0a01 	adds.w	sl, r2, r1
 8007ee6:	4649      	mov	r1, r9
 8007ee8:	eb43 0b01 	adc.w	fp, r3, r1
 8007eec:	f04f 0200 	mov.w	r2, #0
 8007ef0:	f04f 0300 	mov.w	r3, #0
 8007ef4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007ef8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007efc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007f00:	4692      	mov	sl, r2
 8007f02:	469b      	mov	fp, r3
 8007f04:	4643      	mov	r3, r8
 8007f06:	eb1a 0303 	adds.w	r3, sl, r3
 8007f0a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007f0e:	464b      	mov	r3, r9
 8007f10:	eb4b 0303 	adc.w	r3, fp, r3
 8007f14:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007f24:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007f28:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007f2c:	460b      	mov	r3, r1
 8007f2e:	18db      	adds	r3, r3, r3
 8007f30:	643b      	str	r3, [r7, #64]	@ 0x40
 8007f32:	4613      	mov	r3, r2
 8007f34:	eb42 0303 	adc.w	r3, r2, r3
 8007f38:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f3a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007f3e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007f42:	f7f8 fea1 	bl	8000c88 <__aeabi_uldivmod>
 8007f46:	4602      	mov	r2, r0
 8007f48:	460b      	mov	r3, r1
 8007f4a:	4611      	mov	r1, r2
 8007f4c:	4b3b      	ldr	r3, [pc, #236]	@ (800803c <UART_SetConfig+0x2d4>)
 8007f4e:	fba3 2301 	umull	r2, r3, r3, r1
 8007f52:	095b      	lsrs	r3, r3, #5
 8007f54:	2264      	movs	r2, #100	@ 0x64
 8007f56:	fb02 f303 	mul.w	r3, r2, r3
 8007f5a:	1acb      	subs	r3, r1, r3
 8007f5c:	00db      	lsls	r3, r3, #3
 8007f5e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007f62:	4b36      	ldr	r3, [pc, #216]	@ (800803c <UART_SetConfig+0x2d4>)
 8007f64:	fba3 2302 	umull	r2, r3, r3, r2
 8007f68:	095b      	lsrs	r3, r3, #5
 8007f6a:	005b      	lsls	r3, r3, #1
 8007f6c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007f70:	441c      	add	r4, r3
 8007f72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f76:	2200      	movs	r2, #0
 8007f78:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007f7c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007f80:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007f84:	4642      	mov	r2, r8
 8007f86:	464b      	mov	r3, r9
 8007f88:	1891      	adds	r1, r2, r2
 8007f8a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007f8c:	415b      	adcs	r3, r3
 8007f8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007f94:	4641      	mov	r1, r8
 8007f96:	1851      	adds	r1, r2, r1
 8007f98:	6339      	str	r1, [r7, #48]	@ 0x30
 8007f9a:	4649      	mov	r1, r9
 8007f9c:	414b      	adcs	r3, r1
 8007f9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fa0:	f04f 0200 	mov.w	r2, #0
 8007fa4:	f04f 0300 	mov.w	r3, #0
 8007fa8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007fac:	4659      	mov	r1, fp
 8007fae:	00cb      	lsls	r3, r1, #3
 8007fb0:	4651      	mov	r1, sl
 8007fb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007fb6:	4651      	mov	r1, sl
 8007fb8:	00ca      	lsls	r2, r1, #3
 8007fba:	4610      	mov	r0, r2
 8007fbc:	4619      	mov	r1, r3
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	4642      	mov	r2, r8
 8007fc2:	189b      	adds	r3, r3, r2
 8007fc4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007fc8:	464b      	mov	r3, r9
 8007fca:	460a      	mov	r2, r1
 8007fcc:	eb42 0303 	adc.w	r3, r2, r3
 8007fd0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fd8:	685b      	ldr	r3, [r3, #4]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007fe0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007fe4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007fe8:	460b      	mov	r3, r1
 8007fea:	18db      	adds	r3, r3, r3
 8007fec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007fee:	4613      	mov	r3, r2
 8007ff0:	eb42 0303 	adc.w	r3, r2, r3
 8007ff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007ff6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007ffa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007ffe:	f7f8 fe43 	bl	8000c88 <__aeabi_uldivmod>
 8008002:	4602      	mov	r2, r0
 8008004:	460b      	mov	r3, r1
 8008006:	4b0d      	ldr	r3, [pc, #52]	@ (800803c <UART_SetConfig+0x2d4>)
 8008008:	fba3 1302 	umull	r1, r3, r3, r2
 800800c:	095b      	lsrs	r3, r3, #5
 800800e:	2164      	movs	r1, #100	@ 0x64
 8008010:	fb01 f303 	mul.w	r3, r1, r3
 8008014:	1ad3      	subs	r3, r2, r3
 8008016:	00db      	lsls	r3, r3, #3
 8008018:	3332      	adds	r3, #50	@ 0x32
 800801a:	4a08      	ldr	r2, [pc, #32]	@ (800803c <UART_SetConfig+0x2d4>)
 800801c:	fba2 2303 	umull	r2, r3, r2, r3
 8008020:	095b      	lsrs	r3, r3, #5
 8008022:	f003 0207 	and.w	r2, r3, #7
 8008026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4422      	add	r2, r4
 800802e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008030:	e106      	b.n	8008240 <UART_SetConfig+0x4d8>
 8008032:	bf00      	nop
 8008034:	40011000 	.word	0x40011000
 8008038:	40011400 	.word	0x40011400
 800803c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008040:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008044:	2200      	movs	r2, #0
 8008046:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800804a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800804e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008052:	4642      	mov	r2, r8
 8008054:	464b      	mov	r3, r9
 8008056:	1891      	adds	r1, r2, r2
 8008058:	6239      	str	r1, [r7, #32]
 800805a:	415b      	adcs	r3, r3
 800805c:	627b      	str	r3, [r7, #36]	@ 0x24
 800805e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008062:	4641      	mov	r1, r8
 8008064:	1854      	adds	r4, r2, r1
 8008066:	4649      	mov	r1, r9
 8008068:	eb43 0501 	adc.w	r5, r3, r1
 800806c:	f04f 0200 	mov.w	r2, #0
 8008070:	f04f 0300 	mov.w	r3, #0
 8008074:	00eb      	lsls	r3, r5, #3
 8008076:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800807a:	00e2      	lsls	r2, r4, #3
 800807c:	4614      	mov	r4, r2
 800807e:	461d      	mov	r5, r3
 8008080:	4643      	mov	r3, r8
 8008082:	18e3      	adds	r3, r4, r3
 8008084:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008088:	464b      	mov	r3, r9
 800808a:	eb45 0303 	adc.w	r3, r5, r3
 800808e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008096:	685b      	ldr	r3, [r3, #4]
 8008098:	2200      	movs	r2, #0
 800809a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800809e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80080a2:	f04f 0200 	mov.w	r2, #0
 80080a6:	f04f 0300 	mov.w	r3, #0
 80080aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80080ae:	4629      	mov	r1, r5
 80080b0:	008b      	lsls	r3, r1, #2
 80080b2:	4621      	mov	r1, r4
 80080b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80080b8:	4621      	mov	r1, r4
 80080ba:	008a      	lsls	r2, r1, #2
 80080bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80080c0:	f7f8 fde2 	bl	8000c88 <__aeabi_uldivmod>
 80080c4:	4602      	mov	r2, r0
 80080c6:	460b      	mov	r3, r1
 80080c8:	4b60      	ldr	r3, [pc, #384]	@ (800824c <UART_SetConfig+0x4e4>)
 80080ca:	fba3 2302 	umull	r2, r3, r3, r2
 80080ce:	095b      	lsrs	r3, r3, #5
 80080d0:	011c      	lsls	r4, r3, #4
 80080d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80080d6:	2200      	movs	r2, #0
 80080d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80080dc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80080e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80080e4:	4642      	mov	r2, r8
 80080e6:	464b      	mov	r3, r9
 80080e8:	1891      	adds	r1, r2, r2
 80080ea:	61b9      	str	r1, [r7, #24]
 80080ec:	415b      	adcs	r3, r3
 80080ee:	61fb      	str	r3, [r7, #28]
 80080f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80080f4:	4641      	mov	r1, r8
 80080f6:	1851      	adds	r1, r2, r1
 80080f8:	6139      	str	r1, [r7, #16]
 80080fa:	4649      	mov	r1, r9
 80080fc:	414b      	adcs	r3, r1
 80080fe:	617b      	str	r3, [r7, #20]
 8008100:	f04f 0200 	mov.w	r2, #0
 8008104:	f04f 0300 	mov.w	r3, #0
 8008108:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800810c:	4659      	mov	r1, fp
 800810e:	00cb      	lsls	r3, r1, #3
 8008110:	4651      	mov	r1, sl
 8008112:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008116:	4651      	mov	r1, sl
 8008118:	00ca      	lsls	r2, r1, #3
 800811a:	4610      	mov	r0, r2
 800811c:	4619      	mov	r1, r3
 800811e:	4603      	mov	r3, r0
 8008120:	4642      	mov	r2, r8
 8008122:	189b      	adds	r3, r3, r2
 8008124:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008128:	464b      	mov	r3, r9
 800812a:	460a      	mov	r2, r1
 800812c:	eb42 0303 	adc.w	r3, r2, r3
 8008130:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008138:	685b      	ldr	r3, [r3, #4]
 800813a:	2200      	movs	r2, #0
 800813c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800813e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008140:	f04f 0200 	mov.w	r2, #0
 8008144:	f04f 0300 	mov.w	r3, #0
 8008148:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800814c:	4649      	mov	r1, r9
 800814e:	008b      	lsls	r3, r1, #2
 8008150:	4641      	mov	r1, r8
 8008152:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008156:	4641      	mov	r1, r8
 8008158:	008a      	lsls	r2, r1, #2
 800815a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800815e:	f7f8 fd93 	bl	8000c88 <__aeabi_uldivmod>
 8008162:	4602      	mov	r2, r0
 8008164:	460b      	mov	r3, r1
 8008166:	4611      	mov	r1, r2
 8008168:	4b38      	ldr	r3, [pc, #224]	@ (800824c <UART_SetConfig+0x4e4>)
 800816a:	fba3 2301 	umull	r2, r3, r3, r1
 800816e:	095b      	lsrs	r3, r3, #5
 8008170:	2264      	movs	r2, #100	@ 0x64
 8008172:	fb02 f303 	mul.w	r3, r2, r3
 8008176:	1acb      	subs	r3, r1, r3
 8008178:	011b      	lsls	r3, r3, #4
 800817a:	3332      	adds	r3, #50	@ 0x32
 800817c:	4a33      	ldr	r2, [pc, #204]	@ (800824c <UART_SetConfig+0x4e4>)
 800817e:	fba2 2303 	umull	r2, r3, r2, r3
 8008182:	095b      	lsrs	r3, r3, #5
 8008184:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008188:	441c      	add	r4, r3
 800818a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800818e:	2200      	movs	r2, #0
 8008190:	673b      	str	r3, [r7, #112]	@ 0x70
 8008192:	677a      	str	r2, [r7, #116]	@ 0x74
 8008194:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008198:	4642      	mov	r2, r8
 800819a:	464b      	mov	r3, r9
 800819c:	1891      	adds	r1, r2, r2
 800819e:	60b9      	str	r1, [r7, #8]
 80081a0:	415b      	adcs	r3, r3
 80081a2:	60fb      	str	r3, [r7, #12]
 80081a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80081a8:	4641      	mov	r1, r8
 80081aa:	1851      	adds	r1, r2, r1
 80081ac:	6039      	str	r1, [r7, #0]
 80081ae:	4649      	mov	r1, r9
 80081b0:	414b      	adcs	r3, r1
 80081b2:	607b      	str	r3, [r7, #4]
 80081b4:	f04f 0200 	mov.w	r2, #0
 80081b8:	f04f 0300 	mov.w	r3, #0
 80081bc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80081c0:	4659      	mov	r1, fp
 80081c2:	00cb      	lsls	r3, r1, #3
 80081c4:	4651      	mov	r1, sl
 80081c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80081ca:	4651      	mov	r1, sl
 80081cc:	00ca      	lsls	r2, r1, #3
 80081ce:	4610      	mov	r0, r2
 80081d0:	4619      	mov	r1, r3
 80081d2:	4603      	mov	r3, r0
 80081d4:	4642      	mov	r2, r8
 80081d6:	189b      	adds	r3, r3, r2
 80081d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80081da:	464b      	mov	r3, r9
 80081dc:	460a      	mov	r2, r1
 80081de:	eb42 0303 	adc.w	r3, r2, r3
 80081e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80081e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081e8:	685b      	ldr	r3, [r3, #4]
 80081ea:	2200      	movs	r2, #0
 80081ec:	663b      	str	r3, [r7, #96]	@ 0x60
 80081ee:	667a      	str	r2, [r7, #100]	@ 0x64
 80081f0:	f04f 0200 	mov.w	r2, #0
 80081f4:	f04f 0300 	mov.w	r3, #0
 80081f8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80081fc:	4649      	mov	r1, r9
 80081fe:	008b      	lsls	r3, r1, #2
 8008200:	4641      	mov	r1, r8
 8008202:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008206:	4641      	mov	r1, r8
 8008208:	008a      	lsls	r2, r1, #2
 800820a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800820e:	f7f8 fd3b 	bl	8000c88 <__aeabi_uldivmod>
 8008212:	4602      	mov	r2, r0
 8008214:	460b      	mov	r3, r1
 8008216:	4b0d      	ldr	r3, [pc, #52]	@ (800824c <UART_SetConfig+0x4e4>)
 8008218:	fba3 1302 	umull	r1, r3, r3, r2
 800821c:	095b      	lsrs	r3, r3, #5
 800821e:	2164      	movs	r1, #100	@ 0x64
 8008220:	fb01 f303 	mul.w	r3, r1, r3
 8008224:	1ad3      	subs	r3, r2, r3
 8008226:	011b      	lsls	r3, r3, #4
 8008228:	3332      	adds	r3, #50	@ 0x32
 800822a:	4a08      	ldr	r2, [pc, #32]	@ (800824c <UART_SetConfig+0x4e4>)
 800822c:	fba2 2303 	umull	r2, r3, r2, r3
 8008230:	095b      	lsrs	r3, r3, #5
 8008232:	f003 020f 	and.w	r2, r3, #15
 8008236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4422      	add	r2, r4
 800823e:	609a      	str	r2, [r3, #8]
}
 8008240:	bf00      	nop
 8008242:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008246:	46bd      	mov	sp, r7
 8008248:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800824c:	51eb851f 	.word	0x51eb851f

08008250 <__cvt>:
 8008250:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008254:	ec57 6b10 	vmov	r6, r7, d0
 8008258:	2f00      	cmp	r7, #0
 800825a:	460c      	mov	r4, r1
 800825c:	4619      	mov	r1, r3
 800825e:	463b      	mov	r3, r7
 8008260:	bfbb      	ittet	lt
 8008262:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008266:	461f      	movlt	r7, r3
 8008268:	2300      	movge	r3, #0
 800826a:	232d      	movlt	r3, #45	@ 0x2d
 800826c:	700b      	strb	r3, [r1, #0]
 800826e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008270:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008274:	4691      	mov	r9, r2
 8008276:	f023 0820 	bic.w	r8, r3, #32
 800827a:	bfbc      	itt	lt
 800827c:	4632      	movlt	r2, r6
 800827e:	4616      	movlt	r6, r2
 8008280:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008284:	d005      	beq.n	8008292 <__cvt+0x42>
 8008286:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800828a:	d100      	bne.n	800828e <__cvt+0x3e>
 800828c:	3401      	adds	r4, #1
 800828e:	2102      	movs	r1, #2
 8008290:	e000      	b.n	8008294 <__cvt+0x44>
 8008292:	2103      	movs	r1, #3
 8008294:	ab03      	add	r3, sp, #12
 8008296:	9301      	str	r3, [sp, #4]
 8008298:	ab02      	add	r3, sp, #8
 800829a:	9300      	str	r3, [sp, #0]
 800829c:	ec47 6b10 	vmov	d0, r6, r7
 80082a0:	4653      	mov	r3, sl
 80082a2:	4622      	mov	r2, r4
 80082a4:	f001 f8bc 	bl	8009420 <_dtoa_r>
 80082a8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80082ac:	4605      	mov	r5, r0
 80082ae:	d119      	bne.n	80082e4 <__cvt+0x94>
 80082b0:	f019 0f01 	tst.w	r9, #1
 80082b4:	d00e      	beq.n	80082d4 <__cvt+0x84>
 80082b6:	eb00 0904 	add.w	r9, r0, r4
 80082ba:	2200      	movs	r2, #0
 80082bc:	2300      	movs	r3, #0
 80082be:	4630      	mov	r0, r6
 80082c0:	4639      	mov	r1, r7
 80082c2:	f7f8 fc01 	bl	8000ac8 <__aeabi_dcmpeq>
 80082c6:	b108      	cbz	r0, 80082cc <__cvt+0x7c>
 80082c8:	f8cd 900c 	str.w	r9, [sp, #12]
 80082cc:	2230      	movs	r2, #48	@ 0x30
 80082ce:	9b03      	ldr	r3, [sp, #12]
 80082d0:	454b      	cmp	r3, r9
 80082d2:	d31e      	bcc.n	8008312 <__cvt+0xc2>
 80082d4:	9b03      	ldr	r3, [sp, #12]
 80082d6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80082d8:	1b5b      	subs	r3, r3, r5
 80082da:	4628      	mov	r0, r5
 80082dc:	6013      	str	r3, [r2, #0]
 80082de:	b004      	add	sp, #16
 80082e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082e4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80082e8:	eb00 0904 	add.w	r9, r0, r4
 80082ec:	d1e5      	bne.n	80082ba <__cvt+0x6a>
 80082ee:	7803      	ldrb	r3, [r0, #0]
 80082f0:	2b30      	cmp	r3, #48	@ 0x30
 80082f2:	d10a      	bne.n	800830a <__cvt+0xba>
 80082f4:	2200      	movs	r2, #0
 80082f6:	2300      	movs	r3, #0
 80082f8:	4630      	mov	r0, r6
 80082fa:	4639      	mov	r1, r7
 80082fc:	f7f8 fbe4 	bl	8000ac8 <__aeabi_dcmpeq>
 8008300:	b918      	cbnz	r0, 800830a <__cvt+0xba>
 8008302:	f1c4 0401 	rsb	r4, r4, #1
 8008306:	f8ca 4000 	str.w	r4, [sl]
 800830a:	f8da 3000 	ldr.w	r3, [sl]
 800830e:	4499      	add	r9, r3
 8008310:	e7d3      	b.n	80082ba <__cvt+0x6a>
 8008312:	1c59      	adds	r1, r3, #1
 8008314:	9103      	str	r1, [sp, #12]
 8008316:	701a      	strb	r2, [r3, #0]
 8008318:	e7d9      	b.n	80082ce <__cvt+0x7e>

0800831a <__exponent>:
 800831a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800831c:	2900      	cmp	r1, #0
 800831e:	bfba      	itte	lt
 8008320:	4249      	neglt	r1, r1
 8008322:	232d      	movlt	r3, #45	@ 0x2d
 8008324:	232b      	movge	r3, #43	@ 0x2b
 8008326:	2909      	cmp	r1, #9
 8008328:	7002      	strb	r2, [r0, #0]
 800832a:	7043      	strb	r3, [r0, #1]
 800832c:	dd29      	ble.n	8008382 <__exponent+0x68>
 800832e:	f10d 0307 	add.w	r3, sp, #7
 8008332:	461d      	mov	r5, r3
 8008334:	270a      	movs	r7, #10
 8008336:	461a      	mov	r2, r3
 8008338:	fbb1 f6f7 	udiv	r6, r1, r7
 800833c:	fb07 1416 	mls	r4, r7, r6, r1
 8008340:	3430      	adds	r4, #48	@ 0x30
 8008342:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008346:	460c      	mov	r4, r1
 8008348:	2c63      	cmp	r4, #99	@ 0x63
 800834a:	f103 33ff 	add.w	r3, r3, #4294967295
 800834e:	4631      	mov	r1, r6
 8008350:	dcf1      	bgt.n	8008336 <__exponent+0x1c>
 8008352:	3130      	adds	r1, #48	@ 0x30
 8008354:	1e94      	subs	r4, r2, #2
 8008356:	f803 1c01 	strb.w	r1, [r3, #-1]
 800835a:	1c41      	adds	r1, r0, #1
 800835c:	4623      	mov	r3, r4
 800835e:	42ab      	cmp	r3, r5
 8008360:	d30a      	bcc.n	8008378 <__exponent+0x5e>
 8008362:	f10d 0309 	add.w	r3, sp, #9
 8008366:	1a9b      	subs	r3, r3, r2
 8008368:	42ac      	cmp	r4, r5
 800836a:	bf88      	it	hi
 800836c:	2300      	movhi	r3, #0
 800836e:	3302      	adds	r3, #2
 8008370:	4403      	add	r3, r0
 8008372:	1a18      	subs	r0, r3, r0
 8008374:	b003      	add	sp, #12
 8008376:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008378:	f813 6b01 	ldrb.w	r6, [r3], #1
 800837c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008380:	e7ed      	b.n	800835e <__exponent+0x44>
 8008382:	2330      	movs	r3, #48	@ 0x30
 8008384:	3130      	adds	r1, #48	@ 0x30
 8008386:	7083      	strb	r3, [r0, #2]
 8008388:	70c1      	strb	r1, [r0, #3]
 800838a:	1d03      	adds	r3, r0, #4
 800838c:	e7f1      	b.n	8008372 <__exponent+0x58>
	...

08008390 <_printf_float>:
 8008390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008394:	b08d      	sub	sp, #52	@ 0x34
 8008396:	460c      	mov	r4, r1
 8008398:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800839c:	4616      	mov	r6, r2
 800839e:	461f      	mov	r7, r3
 80083a0:	4605      	mov	r5, r0
 80083a2:	f000 ff27 	bl	80091f4 <_localeconv_r>
 80083a6:	6803      	ldr	r3, [r0, #0]
 80083a8:	9304      	str	r3, [sp, #16]
 80083aa:	4618      	mov	r0, r3
 80083ac:	f7f7 ff60 	bl	8000270 <strlen>
 80083b0:	2300      	movs	r3, #0
 80083b2:	930a      	str	r3, [sp, #40]	@ 0x28
 80083b4:	f8d8 3000 	ldr.w	r3, [r8]
 80083b8:	9005      	str	r0, [sp, #20]
 80083ba:	3307      	adds	r3, #7
 80083bc:	f023 0307 	bic.w	r3, r3, #7
 80083c0:	f103 0208 	add.w	r2, r3, #8
 80083c4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80083c8:	f8d4 b000 	ldr.w	fp, [r4]
 80083cc:	f8c8 2000 	str.w	r2, [r8]
 80083d0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80083d4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80083d8:	9307      	str	r3, [sp, #28]
 80083da:	f8cd 8018 	str.w	r8, [sp, #24]
 80083de:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80083e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80083e6:	4b9c      	ldr	r3, [pc, #624]	@ (8008658 <_printf_float+0x2c8>)
 80083e8:	f04f 32ff 	mov.w	r2, #4294967295
 80083ec:	f7f8 fb9e 	bl	8000b2c <__aeabi_dcmpun>
 80083f0:	bb70      	cbnz	r0, 8008450 <_printf_float+0xc0>
 80083f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80083f6:	4b98      	ldr	r3, [pc, #608]	@ (8008658 <_printf_float+0x2c8>)
 80083f8:	f04f 32ff 	mov.w	r2, #4294967295
 80083fc:	f7f8 fb78 	bl	8000af0 <__aeabi_dcmple>
 8008400:	bb30      	cbnz	r0, 8008450 <_printf_float+0xc0>
 8008402:	2200      	movs	r2, #0
 8008404:	2300      	movs	r3, #0
 8008406:	4640      	mov	r0, r8
 8008408:	4649      	mov	r1, r9
 800840a:	f7f8 fb67 	bl	8000adc <__aeabi_dcmplt>
 800840e:	b110      	cbz	r0, 8008416 <_printf_float+0x86>
 8008410:	232d      	movs	r3, #45	@ 0x2d
 8008412:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008416:	4a91      	ldr	r2, [pc, #580]	@ (800865c <_printf_float+0x2cc>)
 8008418:	4b91      	ldr	r3, [pc, #580]	@ (8008660 <_printf_float+0x2d0>)
 800841a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800841e:	bf8c      	ite	hi
 8008420:	4690      	movhi	r8, r2
 8008422:	4698      	movls	r8, r3
 8008424:	2303      	movs	r3, #3
 8008426:	6123      	str	r3, [r4, #16]
 8008428:	f02b 0304 	bic.w	r3, fp, #4
 800842c:	6023      	str	r3, [r4, #0]
 800842e:	f04f 0900 	mov.w	r9, #0
 8008432:	9700      	str	r7, [sp, #0]
 8008434:	4633      	mov	r3, r6
 8008436:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008438:	4621      	mov	r1, r4
 800843a:	4628      	mov	r0, r5
 800843c:	f000 f9d2 	bl	80087e4 <_printf_common>
 8008440:	3001      	adds	r0, #1
 8008442:	f040 808d 	bne.w	8008560 <_printf_float+0x1d0>
 8008446:	f04f 30ff 	mov.w	r0, #4294967295
 800844a:	b00d      	add	sp, #52	@ 0x34
 800844c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008450:	4642      	mov	r2, r8
 8008452:	464b      	mov	r3, r9
 8008454:	4640      	mov	r0, r8
 8008456:	4649      	mov	r1, r9
 8008458:	f7f8 fb68 	bl	8000b2c <__aeabi_dcmpun>
 800845c:	b140      	cbz	r0, 8008470 <_printf_float+0xe0>
 800845e:	464b      	mov	r3, r9
 8008460:	2b00      	cmp	r3, #0
 8008462:	bfbc      	itt	lt
 8008464:	232d      	movlt	r3, #45	@ 0x2d
 8008466:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800846a:	4a7e      	ldr	r2, [pc, #504]	@ (8008664 <_printf_float+0x2d4>)
 800846c:	4b7e      	ldr	r3, [pc, #504]	@ (8008668 <_printf_float+0x2d8>)
 800846e:	e7d4      	b.n	800841a <_printf_float+0x8a>
 8008470:	6863      	ldr	r3, [r4, #4]
 8008472:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008476:	9206      	str	r2, [sp, #24]
 8008478:	1c5a      	adds	r2, r3, #1
 800847a:	d13b      	bne.n	80084f4 <_printf_float+0x164>
 800847c:	2306      	movs	r3, #6
 800847e:	6063      	str	r3, [r4, #4]
 8008480:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008484:	2300      	movs	r3, #0
 8008486:	6022      	str	r2, [r4, #0]
 8008488:	9303      	str	r3, [sp, #12]
 800848a:	ab0a      	add	r3, sp, #40	@ 0x28
 800848c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008490:	ab09      	add	r3, sp, #36	@ 0x24
 8008492:	9300      	str	r3, [sp, #0]
 8008494:	6861      	ldr	r1, [r4, #4]
 8008496:	ec49 8b10 	vmov	d0, r8, r9
 800849a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800849e:	4628      	mov	r0, r5
 80084a0:	f7ff fed6 	bl	8008250 <__cvt>
 80084a4:	9b06      	ldr	r3, [sp, #24]
 80084a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80084a8:	2b47      	cmp	r3, #71	@ 0x47
 80084aa:	4680      	mov	r8, r0
 80084ac:	d129      	bne.n	8008502 <_printf_float+0x172>
 80084ae:	1cc8      	adds	r0, r1, #3
 80084b0:	db02      	blt.n	80084b8 <_printf_float+0x128>
 80084b2:	6863      	ldr	r3, [r4, #4]
 80084b4:	4299      	cmp	r1, r3
 80084b6:	dd41      	ble.n	800853c <_printf_float+0x1ac>
 80084b8:	f1aa 0a02 	sub.w	sl, sl, #2
 80084bc:	fa5f fa8a 	uxtb.w	sl, sl
 80084c0:	3901      	subs	r1, #1
 80084c2:	4652      	mov	r2, sl
 80084c4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80084c8:	9109      	str	r1, [sp, #36]	@ 0x24
 80084ca:	f7ff ff26 	bl	800831a <__exponent>
 80084ce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80084d0:	1813      	adds	r3, r2, r0
 80084d2:	2a01      	cmp	r2, #1
 80084d4:	4681      	mov	r9, r0
 80084d6:	6123      	str	r3, [r4, #16]
 80084d8:	dc02      	bgt.n	80084e0 <_printf_float+0x150>
 80084da:	6822      	ldr	r2, [r4, #0]
 80084dc:	07d2      	lsls	r2, r2, #31
 80084de:	d501      	bpl.n	80084e4 <_printf_float+0x154>
 80084e0:	3301      	adds	r3, #1
 80084e2:	6123      	str	r3, [r4, #16]
 80084e4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d0a2      	beq.n	8008432 <_printf_float+0xa2>
 80084ec:	232d      	movs	r3, #45	@ 0x2d
 80084ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80084f2:	e79e      	b.n	8008432 <_printf_float+0xa2>
 80084f4:	9a06      	ldr	r2, [sp, #24]
 80084f6:	2a47      	cmp	r2, #71	@ 0x47
 80084f8:	d1c2      	bne.n	8008480 <_printf_float+0xf0>
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d1c0      	bne.n	8008480 <_printf_float+0xf0>
 80084fe:	2301      	movs	r3, #1
 8008500:	e7bd      	b.n	800847e <_printf_float+0xee>
 8008502:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008506:	d9db      	bls.n	80084c0 <_printf_float+0x130>
 8008508:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800850c:	d118      	bne.n	8008540 <_printf_float+0x1b0>
 800850e:	2900      	cmp	r1, #0
 8008510:	6863      	ldr	r3, [r4, #4]
 8008512:	dd0b      	ble.n	800852c <_printf_float+0x19c>
 8008514:	6121      	str	r1, [r4, #16]
 8008516:	b913      	cbnz	r3, 800851e <_printf_float+0x18e>
 8008518:	6822      	ldr	r2, [r4, #0]
 800851a:	07d0      	lsls	r0, r2, #31
 800851c:	d502      	bpl.n	8008524 <_printf_float+0x194>
 800851e:	3301      	adds	r3, #1
 8008520:	440b      	add	r3, r1
 8008522:	6123      	str	r3, [r4, #16]
 8008524:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008526:	f04f 0900 	mov.w	r9, #0
 800852a:	e7db      	b.n	80084e4 <_printf_float+0x154>
 800852c:	b913      	cbnz	r3, 8008534 <_printf_float+0x1a4>
 800852e:	6822      	ldr	r2, [r4, #0]
 8008530:	07d2      	lsls	r2, r2, #31
 8008532:	d501      	bpl.n	8008538 <_printf_float+0x1a8>
 8008534:	3302      	adds	r3, #2
 8008536:	e7f4      	b.n	8008522 <_printf_float+0x192>
 8008538:	2301      	movs	r3, #1
 800853a:	e7f2      	b.n	8008522 <_printf_float+0x192>
 800853c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008540:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008542:	4299      	cmp	r1, r3
 8008544:	db05      	blt.n	8008552 <_printf_float+0x1c2>
 8008546:	6823      	ldr	r3, [r4, #0]
 8008548:	6121      	str	r1, [r4, #16]
 800854a:	07d8      	lsls	r0, r3, #31
 800854c:	d5ea      	bpl.n	8008524 <_printf_float+0x194>
 800854e:	1c4b      	adds	r3, r1, #1
 8008550:	e7e7      	b.n	8008522 <_printf_float+0x192>
 8008552:	2900      	cmp	r1, #0
 8008554:	bfd4      	ite	le
 8008556:	f1c1 0202 	rsble	r2, r1, #2
 800855a:	2201      	movgt	r2, #1
 800855c:	4413      	add	r3, r2
 800855e:	e7e0      	b.n	8008522 <_printf_float+0x192>
 8008560:	6823      	ldr	r3, [r4, #0]
 8008562:	055a      	lsls	r2, r3, #21
 8008564:	d407      	bmi.n	8008576 <_printf_float+0x1e6>
 8008566:	6923      	ldr	r3, [r4, #16]
 8008568:	4642      	mov	r2, r8
 800856a:	4631      	mov	r1, r6
 800856c:	4628      	mov	r0, r5
 800856e:	47b8      	blx	r7
 8008570:	3001      	adds	r0, #1
 8008572:	d12b      	bne.n	80085cc <_printf_float+0x23c>
 8008574:	e767      	b.n	8008446 <_printf_float+0xb6>
 8008576:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800857a:	f240 80dd 	bls.w	8008738 <_printf_float+0x3a8>
 800857e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008582:	2200      	movs	r2, #0
 8008584:	2300      	movs	r3, #0
 8008586:	f7f8 fa9f 	bl	8000ac8 <__aeabi_dcmpeq>
 800858a:	2800      	cmp	r0, #0
 800858c:	d033      	beq.n	80085f6 <_printf_float+0x266>
 800858e:	4a37      	ldr	r2, [pc, #220]	@ (800866c <_printf_float+0x2dc>)
 8008590:	2301      	movs	r3, #1
 8008592:	4631      	mov	r1, r6
 8008594:	4628      	mov	r0, r5
 8008596:	47b8      	blx	r7
 8008598:	3001      	adds	r0, #1
 800859a:	f43f af54 	beq.w	8008446 <_printf_float+0xb6>
 800859e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80085a2:	4543      	cmp	r3, r8
 80085a4:	db02      	blt.n	80085ac <_printf_float+0x21c>
 80085a6:	6823      	ldr	r3, [r4, #0]
 80085a8:	07d8      	lsls	r0, r3, #31
 80085aa:	d50f      	bpl.n	80085cc <_printf_float+0x23c>
 80085ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80085b0:	4631      	mov	r1, r6
 80085b2:	4628      	mov	r0, r5
 80085b4:	47b8      	blx	r7
 80085b6:	3001      	adds	r0, #1
 80085b8:	f43f af45 	beq.w	8008446 <_printf_float+0xb6>
 80085bc:	f04f 0900 	mov.w	r9, #0
 80085c0:	f108 38ff 	add.w	r8, r8, #4294967295
 80085c4:	f104 0a1a 	add.w	sl, r4, #26
 80085c8:	45c8      	cmp	r8, r9
 80085ca:	dc09      	bgt.n	80085e0 <_printf_float+0x250>
 80085cc:	6823      	ldr	r3, [r4, #0]
 80085ce:	079b      	lsls	r3, r3, #30
 80085d0:	f100 8103 	bmi.w	80087da <_printf_float+0x44a>
 80085d4:	68e0      	ldr	r0, [r4, #12]
 80085d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80085d8:	4298      	cmp	r0, r3
 80085da:	bfb8      	it	lt
 80085dc:	4618      	movlt	r0, r3
 80085de:	e734      	b.n	800844a <_printf_float+0xba>
 80085e0:	2301      	movs	r3, #1
 80085e2:	4652      	mov	r2, sl
 80085e4:	4631      	mov	r1, r6
 80085e6:	4628      	mov	r0, r5
 80085e8:	47b8      	blx	r7
 80085ea:	3001      	adds	r0, #1
 80085ec:	f43f af2b 	beq.w	8008446 <_printf_float+0xb6>
 80085f0:	f109 0901 	add.w	r9, r9, #1
 80085f4:	e7e8      	b.n	80085c8 <_printf_float+0x238>
 80085f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	dc39      	bgt.n	8008670 <_printf_float+0x2e0>
 80085fc:	4a1b      	ldr	r2, [pc, #108]	@ (800866c <_printf_float+0x2dc>)
 80085fe:	2301      	movs	r3, #1
 8008600:	4631      	mov	r1, r6
 8008602:	4628      	mov	r0, r5
 8008604:	47b8      	blx	r7
 8008606:	3001      	adds	r0, #1
 8008608:	f43f af1d 	beq.w	8008446 <_printf_float+0xb6>
 800860c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008610:	ea59 0303 	orrs.w	r3, r9, r3
 8008614:	d102      	bne.n	800861c <_printf_float+0x28c>
 8008616:	6823      	ldr	r3, [r4, #0]
 8008618:	07d9      	lsls	r1, r3, #31
 800861a:	d5d7      	bpl.n	80085cc <_printf_float+0x23c>
 800861c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008620:	4631      	mov	r1, r6
 8008622:	4628      	mov	r0, r5
 8008624:	47b8      	blx	r7
 8008626:	3001      	adds	r0, #1
 8008628:	f43f af0d 	beq.w	8008446 <_printf_float+0xb6>
 800862c:	f04f 0a00 	mov.w	sl, #0
 8008630:	f104 0b1a 	add.w	fp, r4, #26
 8008634:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008636:	425b      	negs	r3, r3
 8008638:	4553      	cmp	r3, sl
 800863a:	dc01      	bgt.n	8008640 <_printf_float+0x2b0>
 800863c:	464b      	mov	r3, r9
 800863e:	e793      	b.n	8008568 <_printf_float+0x1d8>
 8008640:	2301      	movs	r3, #1
 8008642:	465a      	mov	r2, fp
 8008644:	4631      	mov	r1, r6
 8008646:	4628      	mov	r0, r5
 8008648:	47b8      	blx	r7
 800864a:	3001      	adds	r0, #1
 800864c:	f43f aefb 	beq.w	8008446 <_printf_float+0xb6>
 8008650:	f10a 0a01 	add.w	sl, sl, #1
 8008654:	e7ee      	b.n	8008634 <_printf_float+0x2a4>
 8008656:	bf00      	nop
 8008658:	7fefffff 	.word	0x7fefffff
 800865c:	0800d8f4 	.word	0x0800d8f4
 8008660:	0800d8f0 	.word	0x0800d8f0
 8008664:	0800d8fc 	.word	0x0800d8fc
 8008668:	0800d8f8 	.word	0x0800d8f8
 800866c:	0800da36 	.word	0x0800da36
 8008670:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008672:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008676:	4553      	cmp	r3, sl
 8008678:	bfa8      	it	ge
 800867a:	4653      	movge	r3, sl
 800867c:	2b00      	cmp	r3, #0
 800867e:	4699      	mov	r9, r3
 8008680:	dc36      	bgt.n	80086f0 <_printf_float+0x360>
 8008682:	f04f 0b00 	mov.w	fp, #0
 8008686:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800868a:	f104 021a 	add.w	r2, r4, #26
 800868e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008690:	9306      	str	r3, [sp, #24]
 8008692:	eba3 0309 	sub.w	r3, r3, r9
 8008696:	455b      	cmp	r3, fp
 8008698:	dc31      	bgt.n	80086fe <_printf_float+0x36e>
 800869a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800869c:	459a      	cmp	sl, r3
 800869e:	dc3a      	bgt.n	8008716 <_printf_float+0x386>
 80086a0:	6823      	ldr	r3, [r4, #0]
 80086a2:	07da      	lsls	r2, r3, #31
 80086a4:	d437      	bmi.n	8008716 <_printf_float+0x386>
 80086a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086a8:	ebaa 0903 	sub.w	r9, sl, r3
 80086ac:	9b06      	ldr	r3, [sp, #24]
 80086ae:	ebaa 0303 	sub.w	r3, sl, r3
 80086b2:	4599      	cmp	r9, r3
 80086b4:	bfa8      	it	ge
 80086b6:	4699      	movge	r9, r3
 80086b8:	f1b9 0f00 	cmp.w	r9, #0
 80086bc:	dc33      	bgt.n	8008726 <_printf_float+0x396>
 80086be:	f04f 0800 	mov.w	r8, #0
 80086c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80086c6:	f104 0b1a 	add.w	fp, r4, #26
 80086ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086cc:	ebaa 0303 	sub.w	r3, sl, r3
 80086d0:	eba3 0309 	sub.w	r3, r3, r9
 80086d4:	4543      	cmp	r3, r8
 80086d6:	f77f af79 	ble.w	80085cc <_printf_float+0x23c>
 80086da:	2301      	movs	r3, #1
 80086dc:	465a      	mov	r2, fp
 80086de:	4631      	mov	r1, r6
 80086e0:	4628      	mov	r0, r5
 80086e2:	47b8      	blx	r7
 80086e4:	3001      	adds	r0, #1
 80086e6:	f43f aeae 	beq.w	8008446 <_printf_float+0xb6>
 80086ea:	f108 0801 	add.w	r8, r8, #1
 80086ee:	e7ec      	b.n	80086ca <_printf_float+0x33a>
 80086f0:	4642      	mov	r2, r8
 80086f2:	4631      	mov	r1, r6
 80086f4:	4628      	mov	r0, r5
 80086f6:	47b8      	blx	r7
 80086f8:	3001      	adds	r0, #1
 80086fa:	d1c2      	bne.n	8008682 <_printf_float+0x2f2>
 80086fc:	e6a3      	b.n	8008446 <_printf_float+0xb6>
 80086fe:	2301      	movs	r3, #1
 8008700:	4631      	mov	r1, r6
 8008702:	4628      	mov	r0, r5
 8008704:	9206      	str	r2, [sp, #24]
 8008706:	47b8      	blx	r7
 8008708:	3001      	adds	r0, #1
 800870a:	f43f ae9c 	beq.w	8008446 <_printf_float+0xb6>
 800870e:	9a06      	ldr	r2, [sp, #24]
 8008710:	f10b 0b01 	add.w	fp, fp, #1
 8008714:	e7bb      	b.n	800868e <_printf_float+0x2fe>
 8008716:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800871a:	4631      	mov	r1, r6
 800871c:	4628      	mov	r0, r5
 800871e:	47b8      	blx	r7
 8008720:	3001      	adds	r0, #1
 8008722:	d1c0      	bne.n	80086a6 <_printf_float+0x316>
 8008724:	e68f      	b.n	8008446 <_printf_float+0xb6>
 8008726:	9a06      	ldr	r2, [sp, #24]
 8008728:	464b      	mov	r3, r9
 800872a:	4442      	add	r2, r8
 800872c:	4631      	mov	r1, r6
 800872e:	4628      	mov	r0, r5
 8008730:	47b8      	blx	r7
 8008732:	3001      	adds	r0, #1
 8008734:	d1c3      	bne.n	80086be <_printf_float+0x32e>
 8008736:	e686      	b.n	8008446 <_printf_float+0xb6>
 8008738:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800873c:	f1ba 0f01 	cmp.w	sl, #1
 8008740:	dc01      	bgt.n	8008746 <_printf_float+0x3b6>
 8008742:	07db      	lsls	r3, r3, #31
 8008744:	d536      	bpl.n	80087b4 <_printf_float+0x424>
 8008746:	2301      	movs	r3, #1
 8008748:	4642      	mov	r2, r8
 800874a:	4631      	mov	r1, r6
 800874c:	4628      	mov	r0, r5
 800874e:	47b8      	blx	r7
 8008750:	3001      	adds	r0, #1
 8008752:	f43f ae78 	beq.w	8008446 <_printf_float+0xb6>
 8008756:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800875a:	4631      	mov	r1, r6
 800875c:	4628      	mov	r0, r5
 800875e:	47b8      	blx	r7
 8008760:	3001      	adds	r0, #1
 8008762:	f43f ae70 	beq.w	8008446 <_printf_float+0xb6>
 8008766:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800876a:	2200      	movs	r2, #0
 800876c:	2300      	movs	r3, #0
 800876e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008772:	f7f8 f9a9 	bl	8000ac8 <__aeabi_dcmpeq>
 8008776:	b9c0      	cbnz	r0, 80087aa <_printf_float+0x41a>
 8008778:	4653      	mov	r3, sl
 800877a:	f108 0201 	add.w	r2, r8, #1
 800877e:	4631      	mov	r1, r6
 8008780:	4628      	mov	r0, r5
 8008782:	47b8      	blx	r7
 8008784:	3001      	adds	r0, #1
 8008786:	d10c      	bne.n	80087a2 <_printf_float+0x412>
 8008788:	e65d      	b.n	8008446 <_printf_float+0xb6>
 800878a:	2301      	movs	r3, #1
 800878c:	465a      	mov	r2, fp
 800878e:	4631      	mov	r1, r6
 8008790:	4628      	mov	r0, r5
 8008792:	47b8      	blx	r7
 8008794:	3001      	adds	r0, #1
 8008796:	f43f ae56 	beq.w	8008446 <_printf_float+0xb6>
 800879a:	f108 0801 	add.w	r8, r8, #1
 800879e:	45d0      	cmp	r8, sl
 80087a0:	dbf3      	blt.n	800878a <_printf_float+0x3fa>
 80087a2:	464b      	mov	r3, r9
 80087a4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80087a8:	e6df      	b.n	800856a <_printf_float+0x1da>
 80087aa:	f04f 0800 	mov.w	r8, #0
 80087ae:	f104 0b1a 	add.w	fp, r4, #26
 80087b2:	e7f4      	b.n	800879e <_printf_float+0x40e>
 80087b4:	2301      	movs	r3, #1
 80087b6:	4642      	mov	r2, r8
 80087b8:	e7e1      	b.n	800877e <_printf_float+0x3ee>
 80087ba:	2301      	movs	r3, #1
 80087bc:	464a      	mov	r2, r9
 80087be:	4631      	mov	r1, r6
 80087c0:	4628      	mov	r0, r5
 80087c2:	47b8      	blx	r7
 80087c4:	3001      	adds	r0, #1
 80087c6:	f43f ae3e 	beq.w	8008446 <_printf_float+0xb6>
 80087ca:	f108 0801 	add.w	r8, r8, #1
 80087ce:	68e3      	ldr	r3, [r4, #12]
 80087d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80087d2:	1a5b      	subs	r3, r3, r1
 80087d4:	4543      	cmp	r3, r8
 80087d6:	dcf0      	bgt.n	80087ba <_printf_float+0x42a>
 80087d8:	e6fc      	b.n	80085d4 <_printf_float+0x244>
 80087da:	f04f 0800 	mov.w	r8, #0
 80087de:	f104 0919 	add.w	r9, r4, #25
 80087e2:	e7f4      	b.n	80087ce <_printf_float+0x43e>

080087e4 <_printf_common>:
 80087e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087e8:	4616      	mov	r6, r2
 80087ea:	4698      	mov	r8, r3
 80087ec:	688a      	ldr	r2, [r1, #8]
 80087ee:	690b      	ldr	r3, [r1, #16]
 80087f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80087f4:	4293      	cmp	r3, r2
 80087f6:	bfb8      	it	lt
 80087f8:	4613      	movlt	r3, r2
 80087fa:	6033      	str	r3, [r6, #0]
 80087fc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008800:	4607      	mov	r7, r0
 8008802:	460c      	mov	r4, r1
 8008804:	b10a      	cbz	r2, 800880a <_printf_common+0x26>
 8008806:	3301      	adds	r3, #1
 8008808:	6033      	str	r3, [r6, #0]
 800880a:	6823      	ldr	r3, [r4, #0]
 800880c:	0699      	lsls	r1, r3, #26
 800880e:	bf42      	ittt	mi
 8008810:	6833      	ldrmi	r3, [r6, #0]
 8008812:	3302      	addmi	r3, #2
 8008814:	6033      	strmi	r3, [r6, #0]
 8008816:	6825      	ldr	r5, [r4, #0]
 8008818:	f015 0506 	ands.w	r5, r5, #6
 800881c:	d106      	bne.n	800882c <_printf_common+0x48>
 800881e:	f104 0a19 	add.w	sl, r4, #25
 8008822:	68e3      	ldr	r3, [r4, #12]
 8008824:	6832      	ldr	r2, [r6, #0]
 8008826:	1a9b      	subs	r3, r3, r2
 8008828:	42ab      	cmp	r3, r5
 800882a:	dc26      	bgt.n	800887a <_printf_common+0x96>
 800882c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008830:	6822      	ldr	r2, [r4, #0]
 8008832:	3b00      	subs	r3, #0
 8008834:	bf18      	it	ne
 8008836:	2301      	movne	r3, #1
 8008838:	0692      	lsls	r2, r2, #26
 800883a:	d42b      	bmi.n	8008894 <_printf_common+0xb0>
 800883c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008840:	4641      	mov	r1, r8
 8008842:	4638      	mov	r0, r7
 8008844:	47c8      	blx	r9
 8008846:	3001      	adds	r0, #1
 8008848:	d01e      	beq.n	8008888 <_printf_common+0xa4>
 800884a:	6823      	ldr	r3, [r4, #0]
 800884c:	6922      	ldr	r2, [r4, #16]
 800884e:	f003 0306 	and.w	r3, r3, #6
 8008852:	2b04      	cmp	r3, #4
 8008854:	bf02      	ittt	eq
 8008856:	68e5      	ldreq	r5, [r4, #12]
 8008858:	6833      	ldreq	r3, [r6, #0]
 800885a:	1aed      	subeq	r5, r5, r3
 800885c:	68a3      	ldr	r3, [r4, #8]
 800885e:	bf0c      	ite	eq
 8008860:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008864:	2500      	movne	r5, #0
 8008866:	4293      	cmp	r3, r2
 8008868:	bfc4      	itt	gt
 800886a:	1a9b      	subgt	r3, r3, r2
 800886c:	18ed      	addgt	r5, r5, r3
 800886e:	2600      	movs	r6, #0
 8008870:	341a      	adds	r4, #26
 8008872:	42b5      	cmp	r5, r6
 8008874:	d11a      	bne.n	80088ac <_printf_common+0xc8>
 8008876:	2000      	movs	r0, #0
 8008878:	e008      	b.n	800888c <_printf_common+0xa8>
 800887a:	2301      	movs	r3, #1
 800887c:	4652      	mov	r2, sl
 800887e:	4641      	mov	r1, r8
 8008880:	4638      	mov	r0, r7
 8008882:	47c8      	blx	r9
 8008884:	3001      	adds	r0, #1
 8008886:	d103      	bne.n	8008890 <_printf_common+0xac>
 8008888:	f04f 30ff 	mov.w	r0, #4294967295
 800888c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008890:	3501      	adds	r5, #1
 8008892:	e7c6      	b.n	8008822 <_printf_common+0x3e>
 8008894:	18e1      	adds	r1, r4, r3
 8008896:	1c5a      	adds	r2, r3, #1
 8008898:	2030      	movs	r0, #48	@ 0x30
 800889a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800889e:	4422      	add	r2, r4
 80088a0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80088a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80088a8:	3302      	adds	r3, #2
 80088aa:	e7c7      	b.n	800883c <_printf_common+0x58>
 80088ac:	2301      	movs	r3, #1
 80088ae:	4622      	mov	r2, r4
 80088b0:	4641      	mov	r1, r8
 80088b2:	4638      	mov	r0, r7
 80088b4:	47c8      	blx	r9
 80088b6:	3001      	adds	r0, #1
 80088b8:	d0e6      	beq.n	8008888 <_printf_common+0xa4>
 80088ba:	3601      	adds	r6, #1
 80088bc:	e7d9      	b.n	8008872 <_printf_common+0x8e>
	...

080088c0 <_printf_i>:
 80088c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80088c4:	7e0f      	ldrb	r7, [r1, #24]
 80088c6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80088c8:	2f78      	cmp	r7, #120	@ 0x78
 80088ca:	4691      	mov	r9, r2
 80088cc:	4680      	mov	r8, r0
 80088ce:	460c      	mov	r4, r1
 80088d0:	469a      	mov	sl, r3
 80088d2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80088d6:	d807      	bhi.n	80088e8 <_printf_i+0x28>
 80088d8:	2f62      	cmp	r7, #98	@ 0x62
 80088da:	d80a      	bhi.n	80088f2 <_printf_i+0x32>
 80088dc:	2f00      	cmp	r7, #0
 80088de:	f000 80d1 	beq.w	8008a84 <_printf_i+0x1c4>
 80088e2:	2f58      	cmp	r7, #88	@ 0x58
 80088e4:	f000 80b8 	beq.w	8008a58 <_printf_i+0x198>
 80088e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80088ec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80088f0:	e03a      	b.n	8008968 <_printf_i+0xa8>
 80088f2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80088f6:	2b15      	cmp	r3, #21
 80088f8:	d8f6      	bhi.n	80088e8 <_printf_i+0x28>
 80088fa:	a101      	add	r1, pc, #4	@ (adr r1, 8008900 <_printf_i+0x40>)
 80088fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008900:	08008959 	.word	0x08008959
 8008904:	0800896d 	.word	0x0800896d
 8008908:	080088e9 	.word	0x080088e9
 800890c:	080088e9 	.word	0x080088e9
 8008910:	080088e9 	.word	0x080088e9
 8008914:	080088e9 	.word	0x080088e9
 8008918:	0800896d 	.word	0x0800896d
 800891c:	080088e9 	.word	0x080088e9
 8008920:	080088e9 	.word	0x080088e9
 8008924:	080088e9 	.word	0x080088e9
 8008928:	080088e9 	.word	0x080088e9
 800892c:	08008a6b 	.word	0x08008a6b
 8008930:	08008997 	.word	0x08008997
 8008934:	08008a25 	.word	0x08008a25
 8008938:	080088e9 	.word	0x080088e9
 800893c:	080088e9 	.word	0x080088e9
 8008940:	08008a8d 	.word	0x08008a8d
 8008944:	080088e9 	.word	0x080088e9
 8008948:	08008997 	.word	0x08008997
 800894c:	080088e9 	.word	0x080088e9
 8008950:	080088e9 	.word	0x080088e9
 8008954:	08008a2d 	.word	0x08008a2d
 8008958:	6833      	ldr	r3, [r6, #0]
 800895a:	1d1a      	adds	r2, r3, #4
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	6032      	str	r2, [r6, #0]
 8008960:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008964:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008968:	2301      	movs	r3, #1
 800896a:	e09c      	b.n	8008aa6 <_printf_i+0x1e6>
 800896c:	6833      	ldr	r3, [r6, #0]
 800896e:	6820      	ldr	r0, [r4, #0]
 8008970:	1d19      	adds	r1, r3, #4
 8008972:	6031      	str	r1, [r6, #0]
 8008974:	0606      	lsls	r6, r0, #24
 8008976:	d501      	bpl.n	800897c <_printf_i+0xbc>
 8008978:	681d      	ldr	r5, [r3, #0]
 800897a:	e003      	b.n	8008984 <_printf_i+0xc4>
 800897c:	0645      	lsls	r5, r0, #25
 800897e:	d5fb      	bpl.n	8008978 <_printf_i+0xb8>
 8008980:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008984:	2d00      	cmp	r5, #0
 8008986:	da03      	bge.n	8008990 <_printf_i+0xd0>
 8008988:	232d      	movs	r3, #45	@ 0x2d
 800898a:	426d      	negs	r5, r5
 800898c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008990:	4858      	ldr	r0, [pc, #352]	@ (8008af4 <_printf_i+0x234>)
 8008992:	230a      	movs	r3, #10
 8008994:	e011      	b.n	80089ba <_printf_i+0xfa>
 8008996:	6821      	ldr	r1, [r4, #0]
 8008998:	6833      	ldr	r3, [r6, #0]
 800899a:	0608      	lsls	r0, r1, #24
 800899c:	f853 5b04 	ldr.w	r5, [r3], #4
 80089a0:	d402      	bmi.n	80089a8 <_printf_i+0xe8>
 80089a2:	0649      	lsls	r1, r1, #25
 80089a4:	bf48      	it	mi
 80089a6:	b2ad      	uxthmi	r5, r5
 80089a8:	2f6f      	cmp	r7, #111	@ 0x6f
 80089aa:	4852      	ldr	r0, [pc, #328]	@ (8008af4 <_printf_i+0x234>)
 80089ac:	6033      	str	r3, [r6, #0]
 80089ae:	bf14      	ite	ne
 80089b0:	230a      	movne	r3, #10
 80089b2:	2308      	moveq	r3, #8
 80089b4:	2100      	movs	r1, #0
 80089b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80089ba:	6866      	ldr	r6, [r4, #4]
 80089bc:	60a6      	str	r6, [r4, #8]
 80089be:	2e00      	cmp	r6, #0
 80089c0:	db05      	blt.n	80089ce <_printf_i+0x10e>
 80089c2:	6821      	ldr	r1, [r4, #0]
 80089c4:	432e      	orrs	r6, r5
 80089c6:	f021 0104 	bic.w	r1, r1, #4
 80089ca:	6021      	str	r1, [r4, #0]
 80089cc:	d04b      	beq.n	8008a66 <_printf_i+0x1a6>
 80089ce:	4616      	mov	r6, r2
 80089d0:	fbb5 f1f3 	udiv	r1, r5, r3
 80089d4:	fb03 5711 	mls	r7, r3, r1, r5
 80089d8:	5dc7      	ldrb	r7, [r0, r7]
 80089da:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80089de:	462f      	mov	r7, r5
 80089e0:	42bb      	cmp	r3, r7
 80089e2:	460d      	mov	r5, r1
 80089e4:	d9f4      	bls.n	80089d0 <_printf_i+0x110>
 80089e6:	2b08      	cmp	r3, #8
 80089e8:	d10b      	bne.n	8008a02 <_printf_i+0x142>
 80089ea:	6823      	ldr	r3, [r4, #0]
 80089ec:	07df      	lsls	r7, r3, #31
 80089ee:	d508      	bpl.n	8008a02 <_printf_i+0x142>
 80089f0:	6923      	ldr	r3, [r4, #16]
 80089f2:	6861      	ldr	r1, [r4, #4]
 80089f4:	4299      	cmp	r1, r3
 80089f6:	bfde      	ittt	le
 80089f8:	2330      	movle	r3, #48	@ 0x30
 80089fa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80089fe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008a02:	1b92      	subs	r2, r2, r6
 8008a04:	6122      	str	r2, [r4, #16]
 8008a06:	f8cd a000 	str.w	sl, [sp]
 8008a0a:	464b      	mov	r3, r9
 8008a0c:	aa03      	add	r2, sp, #12
 8008a0e:	4621      	mov	r1, r4
 8008a10:	4640      	mov	r0, r8
 8008a12:	f7ff fee7 	bl	80087e4 <_printf_common>
 8008a16:	3001      	adds	r0, #1
 8008a18:	d14a      	bne.n	8008ab0 <_printf_i+0x1f0>
 8008a1a:	f04f 30ff 	mov.w	r0, #4294967295
 8008a1e:	b004      	add	sp, #16
 8008a20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a24:	6823      	ldr	r3, [r4, #0]
 8008a26:	f043 0320 	orr.w	r3, r3, #32
 8008a2a:	6023      	str	r3, [r4, #0]
 8008a2c:	4832      	ldr	r0, [pc, #200]	@ (8008af8 <_printf_i+0x238>)
 8008a2e:	2778      	movs	r7, #120	@ 0x78
 8008a30:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008a34:	6823      	ldr	r3, [r4, #0]
 8008a36:	6831      	ldr	r1, [r6, #0]
 8008a38:	061f      	lsls	r7, r3, #24
 8008a3a:	f851 5b04 	ldr.w	r5, [r1], #4
 8008a3e:	d402      	bmi.n	8008a46 <_printf_i+0x186>
 8008a40:	065f      	lsls	r7, r3, #25
 8008a42:	bf48      	it	mi
 8008a44:	b2ad      	uxthmi	r5, r5
 8008a46:	6031      	str	r1, [r6, #0]
 8008a48:	07d9      	lsls	r1, r3, #31
 8008a4a:	bf44      	itt	mi
 8008a4c:	f043 0320 	orrmi.w	r3, r3, #32
 8008a50:	6023      	strmi	r3, [r4, #0]
 8008a52:	b11d      	cbz	r5, 8008a5c <_printf_i+0x19c>
 8008a54:	2310      	movs	r3, #16
 8008a56:	e7ad      	b.n	80089b4 <_printf_i+0xf4>
 8008a58:	4826      	ldr	r0, [pc, #152]	@ (8008af4 <_printf_i+0x234>)
 8008a5a:	e7e9      	b.n	8008a30 <_printf_i+0x170>
 8008a5c:	6823      	ldr	r3, [r4, #0]
 8008a5e:	f023 0320 	bic.w	r3, r3, #32
 8008a62:	6023      	str	r3, [r4, #0]
 8008a64:	e7f6      	b.n	8008a54 <_printf_i+0x194>
 8008a66:	4616      	mov	r6, r2
 8008a68:	e7bd      	b.n	80089e6 <_printf_i+0x126>
 8008a6a:	6833      	ldr	r3, [r6, #0]
 8008a6c:	6825      	ldr	r5, [r4, #0]
 8008a6e:	6961      	ldr	r1, [r4, #20]
 8008a70:	1d18      	adds	r0, r3, #4
 8008a72:	6030      	str	r0, [r6, #0]
 8008a74:	062e      	lsls	r6, r5, #24
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	d501      	bpl.n	8008a7e <_printf_i+0x1be>
 8008a7a:	6019      	str	r1, [r3, #0]
 8008a7c:	e002      	b.n	8008a84 <_printf_i+0x1c4>
 8008a7e:	0668      	lsls	r0, r5, #25
 8008a80:	d5fb      	bpl.n	8008a7a <_printf_i+0x1ba>
 8008a82:	8019      	strh	r1, [r3, #0]
 8008a84:	2300      	movs	r3, #0
 8008a86:	6123      	str	r3, [r4, #16]
 8008a88:	4616      	mov	r6, r2
 8008a8a:	e7bc      	b.n	8008a06 <_printf_i+0x146>
 8008a8c:	6833      	ldr	r3, [r6, #0]
 8008a8e:	1d1a      	adds	r2, r3, #4
 8008a90:	6032      	str	r2, [r6, #0]
 8008a92:	681e      	ldr	r6, [r3, #0]
 8008a94:	6862      	ldr	r2, [r4, #4]
 8008a96:	2100      	movs	r1, #0
 8008a98:	4630      	mov	r0, r6
 8008a9a:	f7f7 fb99 	bl	80001d0 <memchr>
 8008a9e:	b108      	cbz	r0, 8008aa4 <_printf_i+0x1e4>
 8008aa0:	1b80      	subs	r0, r0, r6
 8008aa2:	6060      	str	r0, [r4, #4]
 8008aa4:	6863      	ldr	r3, [r4, #4]
 8008aa6:	6123      	str	r3, [r4, #16]
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008aae:	e7aa      	b.n	8008a06 <_printf_i+0x146>
 8008ab0:	6923      	ldr	r3, [r4, #16]
 8008ab2:	4632      	mov	r2, r6
 8008ab4:	4649      	mov	r1, r9
 8008ab6:	4640      	mov	r0, r8
 8008ab8:	47d0      	blx	sl
 8008aba:	3001      	adds	r0, #1
 8008abc:	d0ad      	beq.n	8008a1a <_printf_i+0x15a>
 8008abe:	6823      	ldr	r3, [r4, #0]
 8008ac0:	079b      	lsls	r3, r3, #30
 8008ac2:	d413      	bmi.n	8008aec <_printf_i+0x22c>
 8008ac4:	68e0      	ldr	r0, [r4, #12]
 8008ac6:	9b03      	ldr	r3, [sp, #12]
 8008ac8:	4298      	cmp	r0, r3
 8008aca:	bfb8      	it	lt
 8008acc:	4618      	movlt	r0, r3
 8008ace:	e7a6      	b.n	8008a1e <_printf_i+0x15e>
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	4632      	mov	r2, r6
 8008ad4:	4649      	mov	r1, r9
 8008ad6:	4640      	mov	r0, r8
 8008ad8:	47d0      	blx	sl
 8008ada:	3001      	adds	r0, #1
 8008adc:	d09d      	beq.n	8008a1a <_printf_i+0x15a>
 8008ade:	3501      	adds	r5, #1
 8008ae0:	68e3      	ldr	r3, [r4, #12]
 8008ae2:	9903      	ldr	r1, [sp, #12]
 8008ae4:	1a5b      	subs	r3, r3, r1
 8008ae6:	42ab      	cmp	r3, r5
 8008ae8:	dcf2      	bgt.n	8008ad0 <_printf_i+0x210>
 8008aea:	e7eb      	b.n	8008ac4 <_printf_i+0x204>
 8008aec:	2500      	movs	r5, #0
 8008aee:	f104 0619 	add.w	r6, r4, #25
 8008af2:	e7f5      	b.n	8008ae0 <_printf_i+0x220>
 8008af4:	0800d900 	.word	0x0800d900
 8008af8:	0800d911 	.word	0x0800d911

08008afc <_scanf_float>:
 8008afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b00:	b087      	sub	sp, #28
 8008b02:	4691      	mov	r9, r2
 8008b04:	9303      	str	r3, [sp, #12]
 8008b06:	688b      	ldr	r3, [r1, #8]
 8008b08:	1e5a      	subs	r2, r3, #1
 8008b0a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008b0e:	bf81      	itttt	hi
 8008b10:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008b14:	eb03 0b05 	addhi.w	fp, r3, r5
 8008b18:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008b1c:	608b      	strhi	r3, [r1, #8]
 8008b1e:	680b      	ldr	r3, [r1, #0]
 8008b20:	460a      	mov	r2, r1
 8008b22:	f04f 0500 	mov.w	r5, #0
 8008b26:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8008b2a:	f842 3b1c 	str.w	r3, [r2], #28
 8008b2e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008b32:	4680      	mov	r8, r0
 8008b34:	460c      	mov	r4, r1
 8008b36:	bf98      	it	ls
 8008b38:	f04f 0b00 	movls.w	fp, #0
 8008b3c:	9201      	str	r2, [sp, #4]
 8008b3e:	4616      	mov	r6, r2
 8008b40:	46aa      	mov	sl, r5
 8008b42:	462f      	mov	r7, r5
 8008b44:	9502      	str	r5, [sp, #8]
 8008b46:	68a2      	ldr	r2, [r4, #8]
 8008b48:	b15a      	cbz	r2, 8008b62 <_scanf_float+0x66>
 8008b4a:	f8d9 3000 	ldr.w	r3, [r9]
 8008b4e:	781b      	ldrb	r3, [r3, #0]
 8008b50:	2b4e      	cmp	r3, #78	@ 0x4e
 8008b52:	d863      	bhi.n	8008c1c <_scanf_float+0x120>
 8008b54:	2b40      	cmp	r3, #64	@ 0x40
 8008b56:	d83b      	bhi.n	8008bd0 <_scanf_float+0xd4>
 8008b58:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8008b5c:	b2c8      	uxtb	r0, r1
 8008b5e:	280e      	cmp	r0, #14
 8008b60:	d939      	bls.n	8008bd6 <_scanf_float+0xda>
 8008b62:	b11f      	cbz	r7, 8008b6c <_scanf_float+0x70>
 8008b64:	6823      	ldr	r3, [r4, #0]
 8008b66:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008b6a:	6023      	str	r3, [r4, #0]
 8008b6c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008b70:	f1ba 0f01 	cmp.w	sl, #1
 8008b74:	f200 8114 	bhi.w	8008da0 <_scanf_float+0x2a4>
 8008b78:	9b01      	ldr	r3, [sp, #4]
 8008b7a:	429e      	cmp	r6, r3
 8008b7c:	f200 8105 	bhi.w	8008d8a <_scanf_float+0x28e>
 8008b80:	2001      	movs	r0, #1
 8008b82:	b007      	add	sp, #28
 8008b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b88:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008b8c:	2a0d      	cmp	r2, #13
 8008b8e:	d8e8      	bhi.n	8008b62 <_scanf_float+0x66>
 8008b90:	a101      	add	r1, pc, #4	@ (adr r1, 8008b98 <_scanf_float+0x9c>)
 8008b92:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008b96:	bf00      	nop
 8008b98:	08008ce1 	.word	0x08008ce1
 8008b9c:	08008b63 	.word	0x08008b63
 8008ba0:	08008b63 	.word	0x08008b63
 8008ba4:	08008b63 	.word	0x08008b63
 8008ba8:	08008d3d 	.word	0x08008d3d
 8008bac:	08008d17 	.word	0x08008d17
 8008bb0:	08008b63 	.word	0x08008b63
 8008bb4:	08008b63 	.word	0x08008b63
 8008bb8:	08008cef 	.word	0x08008cef
 8008bbc:	08008b63 	.word	0x08008b63
 8008bc0:	08008b63 	.word	0x08008b63
 8008bc4:	08008b63 	.word	0x08008b63
 8008bc8:	08008b63 	.word	0x08008b63
 8008bcc:	08008cab 	.word	0x08008cab
 8008bd0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008bd4:	e7da      	b.n	8008b8c <_scanf_float+0x90>
 8008bd6:	290e      	cmp	r1, #14
 8008bd8:	d8c3      	bhi.n	8008b62 <_scanf_float+0x66>
 8008bda:	a001      	add	r0, pc, #4	@ (adr r0, 8008be0 <_scanf_float+0xe4>)
 8008bdc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008be0:	08008c9b 	.word	0x08008c9b
 8008be4:	08008b63 	.word	0x08008b63
 8008be8:	08008c9b 	.word	0x08008c9b
 8008bec:	08008d2b 	.word	0x08008d2b
 8008bf0:	08008b63 	.word	0x08008b63
 8008bf4:	08008c3d 	.word	0x08008c3d
 8008bf8:	08008c81 	.word	0x08008c81
 8008bfc:	08008c81 	.word	0x08008c81
 8008c00:	08008c81 	.word	0x08008c81
 8008c04:	08008c81 	.word	0x08008c81
 8008c08:	08008c81 	.word	0x08008c81
 8008c0c:	08008c81 	.word	0x08008c81
 8008c10:	08008c81 	.word	0x08008c81
 8008c14:	08008c81 	.word	0x08008c81
 8008c18:	08008c81 	.word	0x08008c81
 8008c1c:	2b6e      	cmp	r3, #110	@ 0x6e
 8008c1e:	d809      	bhi.n	8008c34 <_scanf_float+0x138>
 8008c20:	2b60      	cmp	r3, #96	@ 0x60
 8008c22:	d8b1      	bhi.n	8008b88 <_scanf_float+0x8c>
 8008c24:	2b54      	cmp	r3, #84	@ 0x54
 8008c26:	d07b      	beq.n	8008d20 <_scanf_float+0x224>
 8008c28:	2b59      	cmp	r3, #89	@ 0x59
 8008c2a:	d19a      	bne.n	8008b62 <_scanf_float+0x66>
 8008c2c:	2d07      	cmp	r5, #7
 8008c2e:	d198      	bne.n	8008b62 <_scanf_float+0x66>
 8008c30:	2508      	movs	r5, #8
 8008c32:	e02f      	b.n	8008c94 <_scanf_float+0x198>
 8008c34:	2b74      	cmp	r3, #116	@ 0x74
 8008c36:	d073      	beq.n	8008d20 <_scanf_float+0x224>
 8008c38:	2b79      	cmp	r3, #121	@ 0x79
 8008c3a:	e7f6      	b.n	8008c2a <_scanf_float+0x12e>
 8008c3c:	6821      	ldr	r1, [r4, #0]
 8008c3e:	05c8      	lsls	r0, r1, #23
 8008c40:	d51e      	bpl.n	8008c80 <_scanf_float+0x184>
 8008c42:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8008c46:	6021      	str	r1, [r4, #0]
 8008c48:	3701      	adds	r7, #1
 8008c4a:	f1bb 0f00 	cmp.w	fp, #0
 8008c4e:	d003      	beq.n	8008c58 <_scanf_float+0x15c>
 8008c50:	3201      	adds	r2, #1
 8008c52:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008c56:	60a2      	str	r2, [r4, #8]
 8008c58:	68a3      	ldr	r3, [r4, #8]
 8008c5a:	3b01      	subs	r3, #1
 8008c5c:	60a3      	str	r3, [r4, #8]
 8008c5e:	6923      	ldr	r3, [r4, #16]
 8008c60:	3301      	adds	r3, #1
 8008c62:	6123      	str	r3, [r4, #16]
 8008c64:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8008c68:	3b01      	subs	r3, #1
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	f8c9 3004 	str.w	r3, [r9, #4]
 8008c70:	f340 8082 	ble.w	8008d78 <_scanf_float+0x27c>
 8008c74:	f8d9 3000 	ldr.w	r3, [r9]
 8008c78:	3301      	adds	r3, #1
 8008c7a:	f8c9 3000 	str.w	r3, [r9]
 8008c7e:	e762      	b.n	8008b46 <_scanf_float+0x4a>
 8008c80:	eb1a 0105 	adds.w	r1, sl, r5
 8008c84:	f47f af6d 	bne.w	8008b62 <_scanf_float+0x66>
 8008c88:	6822      	ldr	r2, [r4, #0]
 8008c8a:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008c8e:	6022      	str	r2, [r4, #0]
 8008c90:	460d      	mov	r5, r1
 8008c92:	468a      	mov	sl, r1
 8008c94:	f806 3b01 	strb.w	r3, [r6], #1
 8008c98:	e7de      	b.n	8008c58 <_scanf_float+0x15c>
 8008c9a:	6822      	ldr	r2, [r4, #0]
 8008c9c:	0610      	lsls	r0, r2, #24
 8008c9e:	f57f af60 	bpl.w	8008b62 <_scanf_float+0x66>
 8008ca2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008ca6:	6022      	str	r2, [r4, #0]
 8008ca8:	e7f4      	b.n	8008c94 <_scanf_float+0x198>
 8008caa:	f1ba 0f00 	cmp.w	sl, #0
 8008cae:	d10c      	bne.n	8008cca <_scanf_float+0x1ce>
 8008cb0:	b977      	cbnz	r7, 8008cd0 <_scanf_float+0x1d4>
 8008cb2:	6822      	ldr	r2, [r4, #0]
 8008cb4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008cb8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008cbc:	d108      	bne.n	8008cd0 <_scanf_float+0x1d4>
 8008cbe:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008cc2:	6022      	str	r2, [r4, #0]
 8008cc4:	f04f 0a01 	mov.w	sl, #1
 8008cc8:	e7e4      	b.n	8008c94 <_scanf_float+0x198>
 8008cca:	f1ba 0f02 	cmp.w	sl, #2
 8008cce:	d050      	beq.n	8008d72 <_scanf_float+0x276>
 8008cd0:	2d01      	cmp	r5, #1
 8008cd2:	d002      	beq.n	8008cda <_scanf_float+0x1de>
 8008cd4:	2d04      	cmp	r5, #4
 8008cd6:	f47f af44 	bne.w	8008b62 <_scanf_float+0x66>
 8008cda:	3501      	adds	r5, #1
 8008cdc:	b2ed      	uxtb	r5, r5
 8008cde:	e7d9      	b.n	8008c94 <_scanf_float+0x198>
 8008ce0:	f1ba 0f01 	cmp.w	sl, #1
 8008ce4:	f47f af3d 	bne.w	8008b62 <_scanf_float+0x66>
 8008ce8:	f04f 0a02 	mov.w	sl, #2
 8008cec:	e7d2      	b.n	8008c94 <_scanf_float+0x198>
 8008cee:	b975      	cbnz	r5, 8008d0e <_scanf_float+0x212>
 8008cf0:	2f00      	cmp	r7, #0
 8008cf2:	f47f af37 	bne.w	8008b64 <_scanf_float+0x68>
 8008cf6:	6822      	ldr	r2, [r4, #0]
 8008cf8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008cfc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008d00:	f040 8103 	bne.w	8008f0a <_scanf_float+0x40e>
 8008d04:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008d08:	6022      	str	r2, [r4, #0]
 8008d0a:	2501      	movs	r5, #1
 8008d0c:	e7c2      	b.n	8008c94 <_scanf_float+0x198>
 8008d0e:	2d03      	cmp	r5, #3
 8008d10:	d0e3      	beq.n	8008cda <_scanf_float+0x1de>
 8008d12:	2d05      	cmp	r5, #5
 8008d14:	e7df      	b.n	8008cd6 <_scanf_float+0x1da>
 8008d16:	2d02      	cmp	r5, #2
 8008d18:	f47f af23 	bne.w	8008b62 <_scanf_float+0x66>
 8008d1c:	2503      	movs	r5, #3
 8008d1e:	e7b9      	b.n	8008c94 <_scanf_float+0x198>
 8008d20:	2d06      	cmp	r5, #6
 8008d22:	f47f af1e 	bne.w	8008b62 <_scanf_float+0x66>
 8008d26:	2507      	movs	r5, #7
 8008d28:	e7b4      	b.n	8008c94 <_scanf_float+0x198>
 8008d2a:	6822      	ldr	r2, [r4, #0]
 8008d2c:	0591      	lsls	r1, r2, #22
 8008d2e:	f57f af18 	bpl.w	8008b62 <_scanf_float+0x66>
 8008d32:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8008d36:	6022      	str	r2, [r4, #0]
 8008d38:	9702      	str	r7, [sp, #8]
 8008d3a:	e7ab      	b.n	8008c94 <_scanf_float+0x198>
 8008d3c:	6822      	ldr	r2, [r4, #0]
 8008d3e:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8008d42:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008d46:	d005      	beq.n	8008d54 <_scanf_float+0x258>
 8008d48:	0550      	lsls	r0, r2, #21
 8008d4a:	f57f af0a 	bpl.w	8008b62 <_scanf_float+0x66>
 8008d4e:	2f00      	cmp	r7, #0
 8008d50:	f000 80db 	beq.w	8008f0a <_scanf_float+0x40e>
 8008d54:	0591      	lsls	r1, r2, #22
 8008d56:	bf58      	it	pl
 8008d58:	9902      	ldrpl	r1, [sp, #8]
 8008d5a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008d5e:	bf58      	it	pl
 8008d60:	1a79      	subpl	r1, r7, r1
 8008d62:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8008d66:	bf58      	it	pl
 8008d68:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008d6c:	6022      	str	r2, [r4, #0]
 8008d6e:	2700      	movs	r7, #0
 8008d70:	e790      	b.n	8008c94 <_scanf_float+0x198>
 8008d72:	f04f 0a03 	mov.w	sl, #3
 8008d76:	e78d      	b.n	8008c94 <_scanf_float+0x198>
 8008d78:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008d7c:	4649      	mov	r1, r9
 8008d7e:	4640      	mov	r0, r8
 8008d80:	4798      	blx	r3
 8008d82:	2800      	cmp	r0, #0
 8008d84:	f43f aedf 	beq.w	8008b46 <_scanf_float+0x4a>
 8008d88:	e6eb      	b.n	8008b62 <_scanf_float+0x66>
 8008d8a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008d8e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008d92:	464a      	mov	r2, r9
 8008d94:	4640      	mov	r0, r8
 8008d96:	4798      	blx	r3
 8008d98:	6923      	ldr	r3, [r4, #16]
 8008d9a:	3b01      	subs	r3, #1
 8008d9c:	6123      	str	r3, [r4, #16]
 8008d9e:	e6eb      	b.n	8008b78 <_scanf_float+0x7c>
 8008da0:	1e6b      	subs	r3, r5, #1
 8008da2:	2b06      	cmp	r3, #6
 8008da4:	d824      	bhi.n	8008df0 <_scanf_float+0x2f4>
 8008da6:	2d02      	cmp	r5, #2
 8008da8:	d836      	bhi.n	8008e18 <_scanf_float+0x31c>
 8008daa:	9b01      	ldr	r3, [sp, #4]
 8008dac:	429e      	cmp	r6, r3
 8008dae:	f67f aee7 	bls.w	8008b80 <_scanf_float+0x84>
 8008db2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008db6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008dba:	464a      	mov	r2, r9
 8008dbc:	4640      	mov	r0, r8
 8008dbe:	4798      	blx	r3
 8008dc0:	6923      	ldr	r3, [r4, #16]
 8008dc2:	3b01      	subs	r3, #1
 8008dc4:	6123      	str	r3, [r4, #16]
 8008dc6:	e7f0      	b.n	8008daa <_scanf_float+0x2ae>
 8008dc8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008dcc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008dd0:	464a      	mov	r2, r9
 8008dd2:	4640      	mov	r0, r8
 8008dd4:	4798      	blx	r3
 8008dd6:	6923      	ldr	r3, [r4, #16]
 8008dd8:	3b01      	subs	r3, #1
 8008dda:	6123      	str	r3, [r4, #16]
 8008ddc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008de0:	fa5f fa8a 	uxtb.w	sl, sl
 8008de4:	f1ba 0f02 	cmp.w	sl, #2
 8008de8:	d1ee      	bne.n	8008dc8 <_scanf_float+0x2cc>
 8008dea:	3d03      	subs	r5, #3
 8008dec:	b2ed      	uxtb	r5, r5
 8008dee:	1b76      	subs	r6, r6, r5
 8008df0:	6823      	ldr	r3, [r4, #0]
 8008df2:	05da      	lsls	r2, r3, #23
 8008df4:	d530      	bpl.n	8008e58 <_scanf_float+0x35c>
 8008df6:	055b      	lsls	r3, r3, #21
 8008df8:	d511      	bpl.n	8008e1e <_scanf_float+0x322>
 8008dfa:	9b01      	ldr	r3, [sp, #4]
 8008dfc:	429e      	cmp	r6, r3
 8008dfe:	f67f aebf 	bls.w	8008b80 <_scanf_float+0x84>
 8008e02:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008e06:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008e0a:	464a      	mov	r2, r9
 8008e0c:	4640      	mov	r0, r8
 8008e0e:	4798      	blx	r3
 8008e10:	6923      	ldr	r3, [r4, #16]
 8008e12:	3b01      	subs	r3, #1
 8008e14:	6123      	str	r3, [r4, #16]
 8008e16:	e7f0      	b.n	8008dfa <_scanf_float+0x2fe>
 8008e18:	46aa      	mov	sl, r5
 8008e1a:	46b3      	mov	fp, r6
 8008e1c:	e7de      	b.n	8008ddc <_scanf_float+0x2e0>
 8008e1e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008e22:	6923      	ldr	r3, [r4, #16]
 8008e24:	2965      	cmp	r1, #101	@ 0x65
 8008e26:	f103 33ff 	add.w	r3, r3, #4294967295
 8008e2a:	f106 35ff 	add.w	r5, r6, #4294967295
 8008e2e:	6123      	str	r3, [r4, #16]
 8008e30:	d00c      	beq.n	8008e4c <_scanf_float+0x350>
 8008e32:	2945      	cmp	r1, #69	@ 0x45
 8008e34:	d00a      	beq.n	8008e4c <_scanf_float+0x350>
 8008e36:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008e3a:	464a      	mov	r2, r9
 8008e3c:	4640      	mov	r0, r8
 8008e3e:	4798      	blx	r3
 8008e40:	6923      	ldr	r3, [r4, #16]
 8008e42:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008e46:	3b01      	subs	r3, #1
 8008e48:	1eb5      	subs	r5, r6, #2
 8008e4a:	6123      	str	r3, [r4, #16]
 8008e4c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008e50:	464a      	mov	r2, r9
 8008e52:	4640      	mov	r0, r8
 8008e54:	4798      	blx	r3
 8008e56:	462e      	mov	r6, r5
 8008e58:	6822      	ldr	r2, [r4, #0]
 8008e5a:	f012 0210 	ands.w	r2, r2, #16
 8008e5e:	d001      	beq.n	8008e64 <_scanf_float+0x368>
 8008e60:	2000      	movs	r0, #0
 8008e62:	e68e      	b.n	8008b82 <_scanf_float+0x86>
 8008e64:	7032      	strb	r2, [r6, #0]
 8008e66:	6823      	ldr	r3, [r4, #0]
 8008e68:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008e6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e70:	d125      	bne.n	8008ebe <_scanf_float+0x3c2>
 8008e72:	9b02      	ldr	r3, [sp, #8]
 8008e74:	429f      	cmp	r7, r3
 8008e76:	d00a      	beq.n	8008e8e <_scanf_float+0x392>
 8008e78:	1bda      	subs	r2, r3, r7
 8008e7a:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008e7e:	429e      	cmp	r6, r3
 8008e80:	bf28      	it	cs
 8008e82:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008e86:	4922      	ldr	r1, [pc, #136]	@ (8008f10 <_scanf_float+0x414>)
 8008e88:	4630      	mov	r0, r6
 8008e8a:	f000 f907 	bl	800909c <siprintf>
 8008e8e:	9901      	ldr	r1, [sp, #4]
 8008e90:	2200      	movs	r2, #0
 8008e92:	4640      	mov	r0, r8
 8008e94:	f002 fc40 	bl	800b718 <_strtod_r>
 8008e98:	9b03      	ldr	r3, [sp, #12]
 8008e9a:	6821      	ldr	r1, [r4, #0]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f011 0f02 	tst.w	r1, #2
 8008ea2:	ec57 6b10 	vmov	r6, r7, d0
 8008ea6:	f103 0204 	add.w	r2, r3, #4
 8008eaa:	d015      	beq.n	8008ed8 <_scanf_float+0x3dc>
 8008eac:	9903      	ldr	r1, [sp, #12]
 8008eae:	600a      	str	r2, [r1, #0]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	e9c3 6700 	strd	r6, r7, [r3]
 8008eb6:	68e3      	ldr	r3, [r4, #12]
 8008eb8:	3301      	adds	r3, #1
 8008eba:	60e3      	str	r3, [r4, #12]
 8008ebc:	e7d0      	b.n	8008e60 <_scanf_float+0x364>
 8008ebe:	9b04      	ldr	r3, [sp, #16]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d0e4      	beq.n	8008e8e <_scanf_float+0x392>
 8008ec4:	9905      	ldr	r1, [sp, #20]
 8008ec6:	230a      	movs	r3, #10
 8008ec8:	3101      	adds	r1, #1
 8008eca:	4640      	mov	r0, r8
 8008ecc:	f002 fca4 	bl	800b818 <_strtol_r>
 8008ed0:	9b04      	ldr	r3, [sp, #16]
 8008ed2:	9e05      	ldr	r6, [sp, #20]
 8008ed4:	1ac2      	subs	r2, r0, r3
 8008ed6:	e7d0      	b.n	8008e7a <_scanf_float+0x37e>
 8008ed8:	f011 0f04 	tst.w	r1, #4
 8008edc:	9903      	ldr	r1, [sp, #12]
 8008ede:	600a      	str	r2, [r1, #0]
 8008ee0:	d1e6      	bne.n	8008eb0 <_scanf_float+0x3b4>
 8008ee2:	681d      	ldr	r5, [r3, #0]
 8008ee4:	4632      	mov	r2, r6
 8008ee6:	463b      	mov	r3, r7
 8008ee8:	4630      	mov	r0, r6
 8008eea:	4639      	mov	r1, r7
 8008eec:	f7f7 fe1e 	bl	8000b2c <__aeabi_dcmpun>
 8008ef0:	b128      	cbz	r0, 8008efe <_scanf_float+0x402>
 8008ef2:	4808      	ldr	r0, [pc, #32]	@ (8008f14 <_scanf_float+0x418>)
 8008ef4:	f000 fa04 	bl	8009300 <nanf>
 8008ef8:	ed85 0a00 	vstr	s0, [r5]
 8008efc:	e7db      	b.n	8008eb6 <_scanf_float+0x3ba>
 8008efe:	4630      	mov	r0, r6
 8008f00:	4639      	mov	r1, r7
 8008f02:	f7f7 fe71 	bl	8000be8 <__aeabi_d2f>
 8008f06:	6028      	str	r0, [r5, #0]
 8008f08:	e7d5      	b.n	8008eb6 <_scanf_float+0x3ba>
 8008f0a:	2700      	movs	r7, #0
 8008f0c:	e62e      	b.n	8008b6c <_scanf_float+0x70>
 8008f0e:	bf00      	nop
 8008f10:	0800d922 	.word	0x0800d922
 8008f14:	0800da7e 	.word	0x0800da7e

08008f18 <std>:
 8008f18:	2300      	movs	r3, #0
 8008f1a:	b510      	push	{r4, lr}
 8008f1c:	4604      	mov	r4, r0
 8008f1e:	e9c0 3300 	strd	r3, r3, [r0]
 8008f22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008f26:	6083      	str	r3, [r0, #8]
 8008f28:	8181      	strh	r1, [r0, #12]
 8008f2a:	6643      	str	r3, [r0, #100]	@ 0x64
 8008f2c:	81c2      	strh	r2, [r0, #14]
 8008f2e:	6183      	str	r3, [r0, #24]
 8008f30:	4619      	mov	r1, r3
 8008f32:	2208      	movs	r2, #8
 8008f34:	305c      	adds	r0, #92	@ 0x5c
 8008f36:	f000 f954 	bl	80091e2 <memset>
 8008f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8008f70 <std+0x58>)
 8008f3c:	6263      	str	r3, [r4, #36]	@ 0x24
 8008f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8008f74 <std+0x5c>)
 8008f40:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008f42:	4b0d      	ldr	r3, [pc, #52]	@ (8008f78 <std+0x60>)
 8008f44:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008f46:	4b0d      	ldr	r3, [pc, #52]	@ (8008f7c <std+0x64>)
 8008f48:	6323      	str	r3, [r4, #48]	@ 0x30
 8008f4a:	4b0d      	ldr	r3, [pc, #52]	@ (8008f80 <std+0x68>)
 8008f4c:	6224      	str	r4, [r4, #32]
 8008f4e:	429c      	cmp	r4, r3
 8008f50:	d006      	beq.n	8008f60 <std+0x48>
 8008f52:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008f56:	4294      	cmp	r4, r2
 8008f58:	d002      	beq.n	8008f60 <std+0x48>
 8008f5a:	33d0      	adds	r3, #208	@ 0xd0
 8008f5c:	429c      	cmp	r4, r3
 8008f5e:	d105      	bne.n	8008f6c <std+0x54>
 8008f60:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008f64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f68:	f000 b9b8 	b.w	80092dc <__retarget_lock_init_recursive>
 8008f6c:	bd10      	pop	{r4, pc}
 8008f6e:	bf00      	nop
 8008f70:	08009139 	.word	0x08009139
 8008f74:	0800915f 	.word	0x0800915f
 8008f78:	08009197 	.word	0x08009197
 8008f7c:	080091bb 	.word	0x080091bb
 8008f80:	200014f8 	.word	0x200014f8

08008f84 <stdio_exit_handler>:
 8008f84:	4a02      	ldr	r2, [pc, #8]	@ (8008f90 <stdio_exit_handler+0xc>)
 8008f86:	4903      	ldr	r1, [pc, #12]	@ (8008f94 <stdio_exit_handler+0x10>)
 8008f88:	4803      	ldr	r0, [pc, #12]	@ (8008f98 <stdio_exit_handler+0x14>)
 8008f8a:	f000 b869 	b.w	8009060 <_fwalk_sglue>
 8008f8e:	bf00      	nop
 8008f90:	20000040 	.word	0x20000040
 8008f94:	0800c211 	.word	0x0800c211
 8008f98:	20000050 	.word	0x20000050

08008f9c <cleanup_stdio>:
 8008f9c:	6841      	ldr	r1, [r0, #4]
 8008f9e:	4b0c      	ldr	r3, [pc, #48]	@ (8008fd0 <cleanup_stdio+0x34>)
 8008fa0:	4299      	cmp	r1, r3
 8008fa2:	b510      	push	{r4, lr}
 8008fa4:	4604      	mov	r4, r0
 8008fa6:	d001      	beq.n	8008fac <cleanup_stdio+0x10>
 8008fa8:	f003 f932 	bl	800c210 <_fflush_r>
 8008fac:	68a1      	ldr	r1, [r4, #8]
 8008fae:	4b09      	ldr	r3, [pc, #36]	@ (8008fd4 <cleanup_stdio+0x38>)
 8008fb0:	4299      	cmp	r1, r3
 8008fb2:	d002      	beq.n	8008fba <cleanup_stdio+0x1e>
 8008fb4:	4620      	mov	r0, r4
 8008fb6:	f003 f92b 	bl	800c210 <_fflush_r>
 8008fba:	68e1      	ldr	r1, [r4, #12]
 8008fbc:	4b06      	ldr	r3, [pc, #24]	@ (8008fd8 <cleanup_stdio+0x3c>)
 8008fbe:	4299      	cmp	r1, r3
 8008fc0:	d004      	beq.n	8008fcc <cleanup_stdio+0x30>
 8008fc2:	4620      	mov	r0, r4
 8008fc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fc8:	f003 b922 	b.w	800c210 <_fflush_r>
 8008fcc:	bd10      	pop	{r4, pc}
 8008fce:	bf00      	nop
 8008fd0:	200014f8 	.word	0x200014f8
 8008fd4:	20001560 	.word	0x20001560
 8008fd8:	200015c8 	.word	0x200015c8

08008fdc <global_stdio_init.part.0>:
 8008fdc:	b510      	push	{r4, lr}
 8008fde:	4b0b      	ldr	r3, [pc, #44]	@ (800900c <global_stdio_init.part.0+0x30>)
 8008fe0:	4c0b      	ldr	r4, [pc, #44]	@ (8009010 <global_stdio_init.part.0+0x34>)
 8008fe2:	4a0c      	ldr	r2, [pc, #48]	@ (8009014 <global_stdio_init.part.0+0x38>)
 8008fe4:	601a      	str	r2, [r3, #0]
 8008fe6:	4620      	mov	r0, r4
 8008fe8:	2200      	movs	r2, #0
 8008fea:	2104      	movs	r1, #4
 8008fec:	f7ff ff94 	bl	8008f18 <std>
 8008ff0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008ff4:	2201      	movs	r2, #1
 8008ff6:	2109      	movs	r1, #9
 8008ff8:	f7ff ff8e 	bl	8008f18 <std>
 8008ffc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009000:	2202      	movs	r2, #2
 8009002:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009006:	2112      	movs	r1, #18
 8009008:	f7ff bf86 	b.w	8008f18 <std>
 800900c:	20001630 	.word	0x20001630
 8009010:	200014f8 	.word	0x200014f8
 8009014:	08008f85 	.word	0x08008f85

08009018 <__sfp_lock_acquire>:
 8009018:	4801      	ldr	r0, [pc, #4]	@ (8009020 <__sfp_lock_acquire+0x8>)
 800901a:	f000 b960 	b.w	80092de <__retarget_lock_acquire_recursive>
 800901e:	bf00      	nop
 8009020:	20001639 	.word	0x20001639

08009024 <__sfp_lock_release>:
 8009024:	4801      	ldr	r0, [pc, #4]	@ (800902c <__sfp_lock_release+0x8>)
 8009026:	f000 b95b 	b.w	80092e0 <__retarget_lock_release_recursive>
 800902a:	bf00      	nop
 800902c:	20001639 	.word	0x20001639

08009030 <__sinit>:
 8009030:	b510      	push	{r4, lr}
 8009032:	4604      	mov	r4, r0
 8009034:	f7ff fff0 	bl	8009018 <__sfp_lock_acquire>
 8009038:	6a23      	ldr	r3, [r4, #32]
 800903a:	b11b      	cbz	r3, 8009044 <__sinit+0x14>
 800903c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009040:	f7ff bff0 	b.w	8009024 <__sfp_lock_release>
 8009044:	4b04      	ldr	r3, [pc, #16]	@ (8009058 <__sinit+0x28>)
 8009046:	6223      	str	r3, [r4, #32]
 8009048:	4b04      	ldr	r3, [pc, #16]	@ (800905c <__sinit+0x2c>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d1f5      	bne.n	800903c <__sinit+0xc>
 8009050:	f7ff ffc4 	bl	8008fdc <global_stdio_init.part.0>
 8009054:	e7f2      	b.n	800903c <__sinit+0xc>
 8009056:	bf00      	nop
 8009058:	08008f9d 	.word	0x08008f9d
 800905c:	20001630 	.word	0x20001630

08009060 <_fwalk_sglue>:
 8009060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009064:	4607      	mov	r7, r0
 8009066:	4688      	mov	r8, r1
 8009068:	4614      	mov	r4, r2
 800906a:	2600      	movs	r6, #0
 800906c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009070:	f1b9 0901 	subs.w	r9, r9, #1
 8009074:	d505      	bpl.n	8009082 <_fwalk_sglue+0x22>
 8009076:	6824      	ldr	r4, [r4, #0]
 8009078:	2c00      	cmp	r4, #0
 800907a:	d1f7      	bne.n	800906c <_fwalk_sglue+0xc>
 800907c:	4630      	mov	r0, r6
 800907e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009082:	89ab      	ldrh	r3, [r5, #12]
 8009084:	2b01      	cmp	r3, #1
 8009086:	d907      	bls.n	8009098 <_fwalk_sglue+0x38>
 8009088:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800908c:	3301      	adds	r3, #1
 800908e:	d003      	beq.n	8009098 <_fwalk_sglue+0x38>
 8009090:	4629      	mov	r1, r5
 8009092:	4638      	mov	r0, r7
 8009094:	47c0      	blx	r8
 8009096:	4306      	orrs	r6, r0
 8009098:	3568      	adds	r5, #104	@ 0x68
 800909a:	e7e9      	b.n	8009070 <_fwalk_sglue+0x10>

0800909c <siprintf>:
 800909c:	b40e      	push	{r1, r2, r3}
 800909e:	b510      	push	{r4, lr}
 80090a0:	b09d      	sub	sp, #116	@ 0x74
 80090a2:	ab1f      	add	r3, sp, #124	@ 0x7c
 80090a4:	9002      	str	r0, [sp, #8]
 80090a6:	9006      	str	r0, [sp, #24]
 80090a8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80090ac:	480a      	ldr	r0, [pc, #40]	@ (80090d8 <siprintf+0x3c>)
 80090ae:	9107      	str	r1, [sp, #28]
 80090b0:	9104      	str	r1, [sp, #16]
 80090b2:	490a      	ldr	r1, [pc, #40]	@ (80090dc <siprintf+0x40>)
 80090b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80090b8:	9105      	str	r1, [sp, #20]
 80090ba:	2400      	movs	r4, #0
 80090bc:	a902      	add	r1, sp, #8
 80090be:	6800      	ldr	r0, [r0, #0]
 80090c0:	9301      	str	r3, [sp, #4]
 80090c2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80090c4:	f002 fc06 	bl	800b8d4 <_svfiprintf_r>
 80090c8:	9b02      	ldr	r3, [sp, #8]
 80090ca:	701c      	strb	r4, [r3, #0]
 80090cc:	b01d      	add	sp, #116	@ 0x74
 80090ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090d2:	b003      	add	sp, #12
 80090d4:	4770      	bx	lr
 80090d6:	bf00      	nop
 80090d8:	2000004c 	.word	0x2000004c
 80090dc:	ffff0208 	.word	0xffff0208

080090e0 <siscanf>:
 80090e0:	b40e      	push	{r1, r2, r3}
 80090e2:	b570      	push	{r4, r5, r6, lr}
 80090e4:	b09d      	sub	sp, #116	@ 0x74
 80090e6:	ac21      	add	r4, sp, #132	@ 0x84
 80090e8:	2500      	movs	r5, #0
 80090ea:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80090ee:	f854 6b04 	ldr.w	r6, [r4], #4
 80090f2:	f8ad 2014 	strh.w	r2, [sp, #20]
 80090f6:	951b      	str	r5, [sp, #108]	@ 0x6c
 80090f8:	9002      	str	r0, [sp, #8]
 80090fa:	9006      	str	r0, [sp, #24]
 80090fc:	f7f7 f8b8 	bl	8000270 <strlen>
 8009100:	4b0b      	ldr	r3, [pc, #44]	@ (8009130 <siscanf+0x50>)
 8009102:	9003      	str	r0, [sp, #12]
 8009104:	9007      	str	r0, [sp, #28]
 8009106:	480b      	ldr	r0, [pc, #44]	@ (8009134 <siscanf+0x54>)
 8009108:	930b      	str	r3, [sp, #44]	@ 0x2c
 800910a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800910e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009112:	4632      	mov	r2, r6
 8009114:	4623      	mov	r3, r4
 8009116:	a902      	add	r1, sp, #8
 8009118:	6800      	ldr	r0, [r0, #0]
 800911a:	950f      	str	r5, [sp, #60]	@ 0x3c
 800911c:	9514      	str	r5, [sp, #80]	@ 0x50
 800911e:	9401      	str	r4, [sp, #4]
 8009120:	f002 fd2e 	bl	800bb80 <__ssvfiscanf_r>
 8009124:	b01d      	add	sp, #116	@ 0x74
 8009126:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800912a:	b003      	add	sp, #12
 800912c:	4770      	bx	lr
 800912e:	bf00      	nop
 8009130:	0800915b 	.word	0x0800915b
 8009134:	2000004c 	.word	0x2000004c

08009138 <__sread>:
 8009138:	b510      	push	{r4, lr}
 800913a:	460c      	mov	r4, r1
 800913c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009140:	f000 f87e 	bl	8009240 <_read_r>
 8009144:	2800      	cmp	r0, #0
 8009146:	bfab      	itete	ge
 8009148:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800914a:	89a3      	ldrhlt	r3, [r4, #12]
 800914c:	181b      	addge	r3, r3, r0
 800914e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009152:	bfac      	ite	ge
 8009154:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009156:	81a3      	strhlt	r3, [r4, #12]
 8009158:	bd10      	pop	{r4, pc}

0800915a <__seofread>:
 800915a:	2000      	movs	r0, #0
 800915c:	4770      	bx	lr

0800915e <__swrite>:
 800915e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009162:	461f      	mov	r7, r3
 8009164:	898b      	ldrh	r3, [r1, #12]
 8009166:	05db      	lsls	r3, r3, #23
 8009168:	4605      	mov	r5, r0
 800916a:	460c      	mov	r4, r1
 800916c:	4616      	mov	r6, r2
 800916e:	d505      	bpl.n	800917c <__swrite+0x1e>
 8009170:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009174:	2302      	movs	r3, #2
 8009176:	2200      	movs	r2, #0
 8009178:	f000 f850 	bl	800921c <_lseek_r>
 800917c:	89a3      	ldrh	r3, [r4, #12]
 800917e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009182:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009186:	81a3      	strh	r3, [r4, #12]
 8009188:	4632      	mov	r2, r6
 800918a:	463b      	mov	r3, r7
 800918c:	4628      	mov	r0, r5
 800918e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009192:	f000 b867 	b.w	8009264 <_write_r>

08009196 <__sseek>:
 8009196:	b510      	push	{r4, lr}
 8009198:	460c      	mov	r4, r1
 800919a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800919e:	f000 f83d 	bl	800921c <_lseek_r>
 80091a2:	1c43      	adds	r3, r0, #1
 80091a4:	89a3      	ldrh	r3, [r4, #12]
 80091a6:	bf15      	itete	ne
 80091a8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80091aa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80091ae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80091b2:	81a3      	strheq	r3, [r4, #12]
 80091b4:	bf18      	it	ne
 80091b6:	81a3      	strhne	r3, [r4, #12]
 80091b8:	bd10      	pop	{r4, pc}

080091ba <__sclose>:
 80091ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091be:	f000 b81d 	b.w	80091fc <_close_r>

080091c2 <memcmp>:
 80091c2:	b510      	push	{r4, lr}
 80091c4:	3901      	subs	r1, #1
 80091c6:	4402      	add	r2, r0
 80091c8:	4290      	cmp	r0, r2
 80091ca:	d101      	bne.n	80091d0 <memcmp+0xe>
 80091cc:	2000      	movs	r0, #0
 80091ce:	e005      	b.n	80091dc <memcmp+0x1a>
 80091d0:	7803      	ldrb	r3, [r0, #0]
 80091d2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80091d6:	42a3      	cmp	r3, r4
 80091d8:	d001      	beq.n	80091de <memcmp+0x1c>
 80091da:	1b18      	subs	r0, r3, r4
 80091dc:	bd10      	pop	{r4, pc}
 80091de:	3001      	adds	r0, #1
 80091e0:	e7f2      	b.n	80091c8 <memcmp+0x6>

080091e2 <memset>:
 80091e2:	4402      	add	r2, r0
 80091e4:	4603      	mov	r3, r0
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d100      	bne.n	80091ec <memset+0xa>
 80091ea:	4770      	bx	lr
 80091ec:	f803 1b01 	strb.w	r1, [r3], #1
 80091f0:	e7f9      	b.n	80091e6 <memset+0x4>
	...

080091f4 <_localeconv_r>:
 80091f4:	4800      	ldr	r0, [pc, #0]	@ (80091f8 <_localeconv_r+0x4>)
 80091f6:	4770      	bx	lr
 80091f8:	2000018c 	.word	0x2000018c

080091fc <_close_r>:
 80091fc:	b538      	push	{r3, r4, r5, lr}
 80091fe:	4d06      	ldr	r5, [pc, #24]	@ (8009218 <_close_r+0x1c>)
 8009200:	2300      	movs	r3, #0
 8009202:	4604      	mov	r4, r0
 8009204:	4608      	mov	r0, r1
 8009206:	602b      	str	r3, [r5, #0]
 8009208:	f7f8 fe2c 	bl	8001e64 <_close>
 800920c:	1c43      	adds	r3, r0, #1
 800920e:	d102      	bne.n	8009216 <_close_r+0x1a>
 8009210:	682b      	ldr	r3, [r5, #0]
 8009212:	b103      	cbz	r3, 8009216 <_close_r+0x1a>
 8009214:	6023      	str	r3, [r4, #0]
 8009216:	bd38      	pop	{r3, r4, r5, pc}
 8009218:	20001634 	.word	0x20001634

0800921c <_lseek_r>:
 800921c:	b538      	push	{r3, r4, r5, lr}
 800921e:	4d07      	ldr	r5, [pc, #28]	@ (800923c <_lseek_r+0x20>)
 8009220:	4604      	mov	r4, r0
 8009222:	4608      	mov	r0, r1
 8009224:	4611      	mov	r1, r2
 8009226:	2200      	movs	r2, #0
 8009228:	602a      	str	r2, [r5, #0]
 800922a:	461a      	mov	r2, r3
 800922c:	f7f8 fe41 	bl	8001eb2 <_lseek>
 8009230:	1c43      	adds	r3, r0, #1
 8009232:	d102      	bne.n	800923a <_lseek_r+0x1e>
 8009234:	682b      	ldr	r3, [r5, #0]
 8009236:	b103      	cbz	r3, 800923a <_lseek_r+0x1e>
 8009238:	6023      	str	r3, [r4, #0]
 800923a:	bd38      	pop	{r3, r4, r5, pc}
 800923c:	20001634 	.word	0x20001634

08009240 <_read_r>:
 8009240:	b538      	push	{r3, r4, r5, lr}
 8009242:	4d07      	ldr	r5, [pc, #28]	@ (8009260 <_read_r+0x20>)
 8009244:	4604      	mov	r4, r0
 8009246:	4608      	mov	r0, r1
 8009248:	4611      	mov	r1, r2
 800924a:	2200      	movs	r2, #0
 800924c:	602a      	str	r2, [r5, #0]
 800924e:	461a      	mov	r2, r3
 8009250:	f7f8 fdcf 	bl	8001df2 <_read>
 8009254:	1c43      	adds	r3, r0, #1
 8009256:	d102      	bne.n	800925e <_read_r+0x1e>
 8009258:	682b      	ldr	r3, [r5, #0]
 800925a:	b103      	cbz	r3, 800925e <_read_r+0x1e>
 800925c:	6023      	str	r3, [r4, #0]
 800925e:	bd38      	pop	{r3, r4, r5, pc}
 8009260:	20001634 	.word	0x20001634

08009264 <_write_r>:
 8009264:	b538      	push	{r3, r4, r5, lr}
 8009266:	4d07      	ldr	r5, [pc, #28]	@ (8009284 <_write_r+0x20>)
 8009268:	4604      	mov	r4, r0
 800926a:	4608      	mov	r0, r1
 800926c:	4611      	mov	r1, r2
 800926e:	2200      	movs	r2, #0
 8009270:	602a      	str	r2, [r5, #0]
 8009272:	461a      	mov	r2, r3
 8009274:	f7f8 fdda 	bl	8001e2c <_write>
 8009278:	1c43      	adds	r3, r0, #1
 800927a:	d102      	bne.n	8009282 <_write_r+0x1e>
 800927c:	682b      	ldr	r3, [r5, #0]
 800927e:	b103      	cbz	r3, 8009282 <_write_r+0x1e>
 8009280:	6023      	str	r3, [r4, #0]
 8009282:	bd38      	pop	{r3, r4, r5, pc}
 8009284:	20001634 	.word	0x20001634

08009288 <__errno>:
 8009288:	4b01      	ldr	r3, [pc, #4]	@ (8009290 <__errno+0x8>)
 800928a:	6818      	ldr	r0, [r3, #0]
 800928c:	4770      	bx	lr
 800928e:	bf00      	nop
 8009290:	2000004c 	.word	0x2000004c

08009294 <__libc_init_array>:
 8009294:	b570      	push	{r4, r5, r6, lr}
 8009296:	4d0d      	ldr	r5, [pc, #52]	@ (80092cc <__libc_init_array+0x38>)
 8009298:	4c0d      	ldr	r4, [pc, #52]	@ (80092d0 <__libc_init_array+0x3c>)
 800929a:	1b64      	subs	r4, r4, r5
 800929c:	10a4      	asrs	r4, r4, #2
 800929e:	2600      	movs	r6, #0
 80092a0:	42a6      	cmp	r6, r4
 80092a2:	d109      	bne.n	80092b8 <__libc_init_array+0x24>
 80092a4:	4d0b      	ldr	r5, [pc, #44]	@ (80092d4 <__libc_init_array+0x40>)
 80092a6:	4c0c      	ldr	r4, [pc, #48]	@ (80092d8 <__libc_init_array+0x44>)
 80092a8:	f003 ff7a 	bl	800d1a0 <_init>
 80092ac:	1b64      	subs	r4, r4, r5
 80092ae:	10a4      	asrs	r4, r4, #2
 80092b0:	2600      	movs	r6, #0
 80092b2:	42a6      	cmp	r6, r4
 80092b4:	d105      	bne.n	80092c2 <__libc_init_array+0x2e>
 80092b6:	bd70      	pop	{r4, r5, r6, pc}
 80092b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80092bc:	4798      	blx	r3
 80092be:	3601      	adds	r6, #1
 80092c0:	e7ee      	b.n	80092a0 <__libc_init_array+0xc>
 80092c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80092c6:	4798      	blx	r3
 80092c8:	3601      	adds	r6, #1
 80092ca:	e7f2      	b.n	80092b2 <__libc_init_array+0x1e>
 80092cc:	0800dd3c 	.word	0x0800dd3c
 80092d0:	0800dd3c 	.word	0x0800dd3c
 80092d4:	0800dd3c 	.word	0x0800dd3c
 80092d8:	0800dd40 	.word	0x0800dd40

080092dc <__retarget_lock_init_recursive>:
 80092dc:	4770      	bx	lr

080092de <__retarget_lock_acquire_recursive>:
 80092de:	4770      	bx	lr

080092e0 <__retarget_lock_release_recursive>:
 80092e0:	4770      	bx	lr

080092e2 <memcpy>:
 80092e2:	440a      	add	r2, r1
 80092e4:	4291      	cmp	r1, r2
 80092e6:	f100 33ff 	add.w	r3, r0, #4294967295
 80092ea:	d100      	bne.n	80092ee <memcpy+0xc>
 80092ec:	4770      	bx	lr
 80092ee:	b510      	push	{r4, lr}
 80092f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80092f8:	4291      	cmp	r1, r2
 80092fa:	d1f9      	bne.n	80092f0 <memcpy+0xe>
 80092fc:	bd10      	pop	{r4, pc}
	...

08009300 <nanf>:
 8009300:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009308 <nanf+0x8>
 8009304:	4770      	bx	lr
 8009306:	bf00      	nop
 8009308:	7fc00000 	.word	0x7fc00000

0800930c <quorem>:
 800930c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009310:	6903      	ldr	r3, [r0, #16]
 8009312:	690c      	ldr	r4, [r1, #16]
 8009314:	42a3      	cmp	r3, r4
 8009316:	4607      	mov	r7, r0
 8009318:	db7e      	blt.n	8009418 <quorem+0x10c>
 800931a:	3c01      	subs	r4, #1
 800931c:	f101 0814 	add.w	r8, r1, #20
 8009320:	00a3      	lsls	r3, r4, #2
 8009322:	f100 0514 	add.w	r5, r0, #20
 8009326:	9300      	str	r3, [sp, #0]
 8009328:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800932c:	9301      	str	r3, [sp, #4]
 800932e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009332:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009336:	3301      	adds	r3, #1
 8009338:	429a      	cmp	r2, r3
 800933a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800933e:	fbb2 f6f3 	udiv	r6, r2, r3
 8009342:	d32e      	bcc.n	80093a2 <quorem+0x96>
 8009344:	f04f 0a00 	mov.w	sl, #0
 8009348:	46c4      	mov	ip, r8
 800934a:	46ae      	mov	lr, r5
 800934c:	46d3      	mov	fp, sl
 800934e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009352:	b298      	uxth	r0, r3
 8009354:	fb06 a000 	mla	r0, r6, r0, sl
 8009358:	0c02      	lsrs	r2, r0, #16
 800935a:	0c1b      	lsrs	r3, r3, #16
 800935c:	fb06 2303 	mla	r3, r6, r3, r2
 8009360:	f8de 2000 	ldr.w	r2, [lr]
 8009364:	b280      	uxth	r0, r0
 8009366:	b292      	uxth	r2, r2
 8009368:	1a12      	subs	r2, r2, r0
 800936a:	445a      	add	r2, fp
 800936c:	f8de 0000 	ldr.w	r0, [lr]
 8009370:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009374:	b29b      	uxth	r3, r3
 8009376:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800937a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800937e:	b292      	uxth	r2, r2
 8009380:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009384:	45e1      	cmp	r9, ip
 8009386:	f84e 2b04 	str.w	r2, [lr], #4
 800938a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800938e:	d2de      	bcs.n	800934e <quorem+0x42>
 8009390:	9b00      	ldr	r3, [sp, #0]
 8009392:	58eb      	ldr	r3, [r5, r3]
 8009394:	b92b      	cbnz	r3, 80093a2 <quorem+0x96>
 8009396:	9b01      	ldr	r3, [sp, #4]
 8009398:	3b04      	subs	r3, #4
 800939a:	429d      	cmp	r5, r3
 800939c:	461a      	mov	r2, r3
 800939e:	d32f      	bcc.n	8009400 <quorem+0xf4>
 80093a0:	613c      	str	r4, [r7, #16]
 80093a2:	4638      	mov	r0, r7
 80093a4:	f001 f9c8 	bl	800a738 <__mcmp>
 80093a8:	2800      	cmp	r0, #0
 80093aa:	db25      	blt.n	80093f8 <quorem+0xec>
 80093ac:	4629      	mov	r1, r5
 80093ae:	2000      	movs	r0, #0
 80093b0:	f858 2b04 	ldr.w	r2, [r8], #4
 80093b4:	f8d1 c000 	ldr.w	ip, [r1]
 80093b8:	fa1f fe82 	uxth.w	lr, r2
 80093bc:	fa1f f38c 	uxth.w	r3, ip
 80093c0:	eba3 030e 	sub.w	r3, r3, lr
 80093c4:	4403      	add	r3, r0
 80093c6:	0c12      	lsrs	r2, r2, #16
 80093c8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80093cc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80093d0:	b29b      	uxth	r3, r3
 80093d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80093d6:	45c1      	cmp	r9, r8
 80093d8:	f841 3b04 	str.w	r3, [r1], #4
 80093dc:	ea4f 4022 	mov.w	r0, r2, asr #16
 80093e0:	d2e6      	bcs.n	80093b0 <quorem+0xa4>
 80093e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80093e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80093ea:	b922      	cbnz	r2, 80093f6 <quorem+0xea>
 80093ec:	3b04      	subs	r3, #4
 80093ee:	429d      	cmp	r5, r3
 80093f0:	461a      	mov	r2, r3
 80093f2:	d30b      	bcc.n	800940c <quorem+0x100>
 80093f4:	613c      	str	r4, [r7, #16]
 80093f6:	3601      	adds	r6, #1
 80093f8:	4630      	mov	r0, r6
 80093fa:	b003      	add	sp, #12
 80093fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009400:	6812      	ldr	r2, [r2, #0]
 8009402:	3b04      	subs	r3, #4
 8009404:	2a00      	cmp	r2, #0
 8009406:	d1cb      	bne.n	80093a0 <quorem+0x94>
 8009408:	3c01      	subs	r4, #1
 800940a:	e7c6      	b.n	800939a <quorem+0x8e>
 800940c:	6812      	ldr	r2, [r2, #0]
 800940e:	3b04      	subs	r3, #4
 8009410:	2a00      	cmp	r2, #0
 8009412:	d1ef      	bne.n	80093f4 <quorem+0xe8>
 8009414:	3c01      	subs	r4, #1
 8009416:	e7ea      	b.n	80093ee <quorem+0xe2>
 8009418:	2000      	movs	r0, #0
 800941a:	e7ee      	b.n	80093fa <quorem+0xee>
 800941c:	0000      	movs	r0, r0
	...

08009420 <_dtoa_r>:
 8009420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009424:	69c7      	ldr	r7, [r0, #28]
 8009426:	b097      	sub	sp, #92	@ 0x5c
 8009428:	ed8d 0b04 	vstr	d0, [sp, #16]
 800942c:	ec55 4b10 	vmov	r4, r5, d0
 8009430:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8009432:	9107      	str	r1, [sp, #28]
 8009434:	4681      	mov	r9, r0
 8009436:	920c      	str	r2, [sp, #48]	@ 0x30
 8009438:	9311      	str	r3, [sp, #68]	@ 0x44
 800943a:	b97f      	cbnz	r7, 800945c <_dtoa_r+0x3c>
 800943c:	2010      	movs	r0, #16
 800943e:	f000 fe09 	bl	800a054 <malloc>
 8009442:	4602      	mov	r2, r0
 8009444:	f8c9 001c 	str.w	r0, [r9, #28]
 8009448:	b920      	cbnz	r0, 8009454 <_dtoa_r+0x34>
 800944a:	4ba9      	ldr	r3, [pc, #676]	@ (80096f0 <_dtoa_r+0x2d0>)
 800944c:	21ef      	movs	r1, #239	@ 0xef
 800944e:	48a9      	ldr	r0, [pc, #676]	@ (80096f4 <_dtoa_r+0x2d4>)
 8009450:	f002 ffbe 	bl	800c3d0 <__assert_func>
 8009454:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009458:	6007      	str	r7, [r0, #0]
 800945a:	60c7      	str	r7, [r0, #12]
 800945c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009460:	6819      	ldr	r1, [r3, #0]
 8009462:	b159      	cbz	r1, 800947c <_dtoa_r+0x5c>
 8009464:	685a      	ldr	r2, [r3, #4]
 8009466:	604a      	str	r2, [r1, #4]
 8009468:	2301      	movs	r3, #1
 800946a:	4093      	lsls	r3, r2
 800946c:	608b      	str	r3, [r1, #8]
 800946e:	4648      	mov	r0, r9
 8009470:	f000 fee6 	bl	800a240 <_Bfree>
 8009474:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009478:	2200      	movs	r2, #0
 800947a:	601a      	str	r2, [r3, #0]
 800947c:	1e2b      	subs	r3, r5, #0
 800947e:	bfb9      	ittee	lt
 8009480:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009484:	9305      	strlt	r3, [sp, #20]
 8009486:	2300      	movge	r3, #0
 8009488:	6033      	strge	r3, [r6, #0]
 800948a:	9f05      	ldr	r7, [sp, #20]
 800948c:	4b9a      	ldr	r3, [pc, #616]	@ (80096f8 <_dtoa_r+0x2d8>)
 800948e:	bfbc      	itt	lt
 8009490:	2201      	movlt	r2, #1
 8009492:	6032      	strlt	r2, [r6, #0]
 8009494:	43bb      	bics	r3, r7
 8009496:	d112      	bne.n	80094be <_dtoa_r+0x9e>
 8009498:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800949a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800949e:	6013      	str	r3, [r2, #0]
 80094a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80094a4:	4323      	orrs	r3, r4
 80094a6:	f000 855a 	beq.w	8009f5e <_dtoa_r+0xb3e>
 80094aa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80094ac:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800970c <_dtoa_r+0x2ec>
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	f000 855c 	beq.w	8009f6e <_dtoa_r+0xb4e>
 80094b6:	f10a 0303 	add.w	r3, sl, #3
 80094ba:	f000 bd56 	b.w	8009f6a <_dtoa_r+0xb4a>
 80094be:	ed9d 7b04 	vldr	d7, [sp, #16]
 80094c2:	2200      	movs	r2, #0
 80094c4:	ec51 0b17 	vmov	r0, r1, d7
 80094c8:	2300      	movs	r3, #0
 80094ca:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80094ce:	f7f7 fafb 	bl	8000ac8 <__aeabi_dcmpeq>
 80094d2:	4680      	mov	r8, r0
 80094d4:	b158      	cbz	r0, 80094ee <_dtoa_r+0xce>
 80094d6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80094d8:	2301      	movs	r3, #1
 80094da:	6013      	str	r3, [r2, #0]
 80094dc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80094de:	b113      	cbz	r3, 80094e6 <_dtoa_r+0xc6>
 80094e0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80094e2:	4b86      	ldr	r3, [pc, #536]	@ (80096fc <_dtoa_r+0x2dc>)
 80094e4:	6013      	str	r3, [r2, #0]
 80094e6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8009710 <_dtoa_r+0x2f0>
 80094ea:	f000 bd40 	b.w	8009f6e <_dtoa_r+0xb4e>
 80094ee:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80094f2:	aa14      	add	r2, sp, #80	@ 0x50
 80094f4:	a915      	add	r1, sp, #84	@ 0x54
 80094f6:	4648      	mov	r0, r9
 80094f8:	f001 fa3e 	bl	800a978 <__d2b>
 80094fc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009500:	9002      	str	r0, [sp, #8]
 8009502:	2e00      	cmp	r6, #0
 8009504:	d078      	beq.n	80095f8 <_dtoa_r+0x1d8>
 8009506:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009508:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800950c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009510:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009514:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009518:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800951c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009520:	4619      	mov	r1, r3
 8009522:	2200      	movs	r2, #0
 8009524:	4b76      	ldr	r3, [pc, #472]	@ (8009700 <_dtoa_r+0x2e0>)
 8009526:	f7f6 feaf 	bl	8000288 <__aeabi_dsub>
 800952a:	a36b      	add	r3, pc, #428	@ (adr r3, 80096d8 <_dtoa_r+0x2b8>)
 800952c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009530:	f7f7 f862 	bl	80005f8 <__aeabi_dmul>
 8009534:	a36a      	add	r3, pc, #424	@ (adr r3, 80096e0 <_dtoa_r+0x2c0>)
 8009536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800953a:	f7f6 fea7 	bl	800028c <__adddf3>
 800953e:	4604      	mov	r4, r0
 8009540:	4630      	mov	r0, r6
 8009542:	460d      	mov	r5, r1
 8009544:	f7f6 ffee 	bl	8000524 <__aeabi_i2d>
 8009548:	a367      	add	r3, pc, #412	@ (adr r3, 80096e8 <_dtoa_r+0x2c8>)
 800954a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800954e:	f7f7 f853 	bl	80005f8 <__aeabi_dmul>
 8009552:	4602      	mov	r2, r0
 8009554:	460b      	mov	r3, r1
 8009556:	4620      	mov	r0, r4
 8009558:	4629      	mov	r1, r5
 800955a:	f7f6 fe97 	bl	800028c <__adddf3>
 800955e:	4604      	mov	r4, r0
 8009560:	460d      	mov	r5, r1
 8009562:	f7f7 faf9 	bl	8000b58 <__aeabi_d2iz>
 8009566:	2200      	movs	r2, #0
 8009568:	4607      	mov	r7, r0
 800956a:	2300      	movs	r3, #0
 800956c:	4620      	mov	r0, r4
 800956e:	4629      	mov	r1, r5
 8009570:	f7f7 fab4 	bl	8000adc <__aeabi_dcmplt>
 8009574:	b140      	cbz	r0, 8009588 <_dtoa_r+0x168>
 8009576:	4638      	mov	r0, r7
 8009578:	f7f6 ffd4 	bl	8000524 <__aeabi_i2d>
 800957c:	4622      	mov	r2, r4
 800957e:	462b      	mov	r3, r5
 8009580:	f7f7 faa2 	bl	8000ac8 <__aeabi_dcmpeq>
 8009584:	b900      	cbnz	r0, 8009588 <_dtoa_r+0x168>
 8009586:	3f01      	subs	r7, #1
 8009588:	2f16      	cmp	r7, #22
 800958a:	d852      	bhi.n	8009632 <_dtoa_r+0x212>
 800958c:	4b5d      	ldr	r3, [pc, #372]	@ (8009704 <_dtoa_r+0x2e4>)
 800958e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009596:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800959a:	f7f7 fa9f 	bl	8000adc <__aeabi_dcmplt>
 800959e:	2800      	cmp	r0, #0
 80095a0:	d049      	beq.n	8009636 <_dtoa_r+0x216>
 80095a2:	3f01      	subs	r7, #1
 80095a4:	2300      	movs	r3, #0
 80095a6:	9310      	str	r3, [sp, #64]	@ 0x40
 80095a8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80095aa:	1b9b      	subs	r3, r3, r6
 80095ac:	1e5a      	subs	r2, r3, #1
 80095ae:	bf45      	ittet	mi
 80095b0:	f1c3 0301 	rsbmi	r3, r3, #1
 80095b4:	9300      	strmi	r3, [sp, #0]
 80095b6:	2300      	movpl	r3, #0
 80095b8:	2300      	movmi	r3, #0
 80095ba:	9206      	str	r2, [sp, #24]
 80095bc:	bf54      	ite	pl
 80095be:	9300      	strpl	r3, [sp, #0]
 80095c0:	9306      	strmi	r3, [sp, #24]
 80095c2:	2f00      	cmp	r7, #0
 80095c4:	db39      	blt.n	800963a <_dtoa_r+0x21a>
 80095c6:	9b06      	ldr	r3, [sp, #24]
 80095c8:	970d      	str	r7, [sp, #52]	@ 0x34
 80095ca:	443b      	add	r3, r7
 80095cc:	9306      	str	r3, [sp, #24]
 80095ce:	2300      	movs	r3, #0
 80095d0:	9308      	str	r3, [sp, #32]
 80095d2:	9b07      	ldr	r3, [sp, #28]
 80095d4:	2b09      	cmp	r3, #9
 80095d6:	d863      	bhi.n	80096a0 <_dtoa_r+0x280>
 80095d8:	2b05      	cmp	r3, #5
 80095da:	bfc4      	itt	gt
 80095dc:	3b04      	subgt	r3, #4
 80095de:	9307      	strgt	r3, [sp, #28]
 80095e0:	9b07      	ldr	r3, [sp, #28]
 80095e2:	f1a3 0302 	sub.w	r3, r3, #2
 80095e6:	bfcc      	ite	gt
 80095e8:	2400      	movgt	r4, #0
 80095ea:	2401      	movle	r4, #1
 80095ec:	2b03      	cmp	r3, #3
 80095ee:	d863      	bhi.n	80096b8 <_dtoa_r+0x298>
 80095f0:	e8df f003 	tbb	[pc, r3]
 80095f4:	2b375452 	.word	0x2b375452
 80095f8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80095fc:	441e      	add	r6, r3
 80095fe:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009602:	2b20      	cmp	r3, #32
 8009604:	bfc1      	itttt	gt
 8009606:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800960a:	409f      	lslgt	r7, r3
 800960c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009610:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009614:	bfd6      	itet	le
 8009616:	f1c3 0320 	rsble	r3, r3, #32
 800961a:	ea47 0003 	orrgt.w	r0, r7, r3
 800961e:	fa04 f003 	lslle.w	r0, r4, r3
 8009622:	f7f6 ff6f 	bl	8000504 <__aeabi_ui2d>
 8009626:	2201      	movs	r2, #1
 8009628:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800962c:	3e01      	subs	r6, #1
 800962e:	9212      	str	r2, [sp, #72]	@ 0x48
 8009630:	e776      	b.n	8009520 <_dtoa_r+0x100>
 8009632:	2301      	movs	r3, #1
 8009634:	e7b7      	b.n	80095a6 <_dtoa_r+0x186>
 8009636:	9010      	str	r0, [sp, #64]	@ 0x40
 8009638:	e7b6      	b.n	80095a8 <_dtoa_r+0x188>
 800963a:	9b00      	ldr	r3, [sp, #0]
 800963c:	1bdb      	subs	r3, r3, r7
 800963e:	9300      	str	r3, [sp, #0]
 8009640:	427b      	negs	r3, r7
 8009642:	9308      	str	r3, [sp, #32]
 8009644:	2300      	movs	r3, #0
 8009646:	930d      	str	r3, [sp, #52]	@ 0x34
 8009648:	e7c3      	b.n	80095d2 <_dtoa_r+0x1b2>
 800964a:	2301      	movs	r3, #1
 800964c:	9309      	str	r3, [sp, #36]	@ 0x24
 800964e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009650:	eb07 0b03 	add.w	fp, r7, r3
 8009654:	f10b 0301 	add.w	r3, fp, #1
 8009658:	2b01      	cmp	r3, #1
 800965a:	9303      	str	r3, [sp, #12]
 800965c:	bfb8      	it	lt
 800965e:	2301      	movlt	r3, #1
 8009660:	e006      	b.n	8009670 <_dtoa_r+0x250>
 8009662:	2301      	movs	r3, #1
 8009664:	9309      	str	r3, [sp, #36]	@ 0x24
 8009666:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009668:	2b00      	cmp	r3, #0
 800966a:	dd28      	ble.n	80096be <_dtoa_r+0x29e>
 800966c:	469b      	mov	fp, r3
 800966e:	9303      	str	r3, [sp, #12]
 8009670:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8009674:	2100      	movs	r1, #0
 8009676:	2204      	movs	r2, #4
 8009678:	f102 0514 	add.w	r5, r2, #20
 800967c:	429d      	cmp	r5, r3
 800967e:	d926      	bls.n	80096ce <_dtoa_r+0x2ae>
 8009680:	6041      	str	r1, [r0, #4]
 8009682:	4648      	mov	r0, r9
 8009684:	f000 fd9c 	bl	800a1c0 <_Balloc>
 8009688:	4682      	mov	sl, r0
 800968a:	2800      	cmp	r0, #0
 800968c:	d142      	bne.n	8009714 <_dtoa_r+0x2f4>
 800968e:	4b1e      	ldr	r3, [pc, #120]	@ (8009708 <_dtoa_r+0x2e8>)
 8009690:	4602      	mov	r2, r0
 8009692:	f240 11af 	movw	r1, #431	@ 0x1af
 8009696:	e6da      	b.n	800944e <_dtoa_r+0x2e>
 8009698:	2300      	movs	r3, #0
 800969a:	e7e3      	b.n	8009664 <_dtoa_r+0x244>
 800969c:	2300      	movs	r3, #0
 800969e:	e7d5      	b.n	800964c <_dtoa_r+0x22c>
 80096a0:	2401      	movs	r4, #1
 80096a2:	2300      	movs	r3, #0
 80096a4:	9307      	str	r3, [sp, #28]
 80096a6:	9409      	str	r4, [sp, #36]	@ 0x24
 80096a8:	f04f 3bff 	mov.w	fp, #4294967295
 80096ac:	2200      	movs	r2, #0
 80096ae:	f8cd b00c 	str.w	fp, [sp, #12]
 80096b2:	2312      	movs	r3, #18
 80096b4:	920c      	str	r2, [sp, #48]	@ 0x30
 80096b6:	e7db      	b.n	8009670 <_dtoa_r+0x250>
 80096b8:	2301      	movs	r3, #1
 80096ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80096bc:	e7f4      	b.n	80096a8 <_dtoa_r+0x288>
 80096be:	f04f 0b01 	mov.w	fp, #1
 80096c2:	f8cd b00c 	str.w	fp, [sp, #12]
 80096c6:	465b      	mov	r3, fp
 80096c8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80096cc:	e7d0      	b.n	8009670 <_dtoa_r+0x250>
 80096ce:	3101      	adds	r1, #1
 80096d0:	0052      	lsls	r2, r2, #1
 80096d2:	e7d1      	b.n	8009678 <_dtoa_r+0x258>
 80096d4:	f3af 8000 	nop.w
 80096d8:	636f4361 	.word	0x636f4361
 80096dc:	3fd287a7 	.word	0x3fd287a7
 80096e0:	8b60c8b3 	.word	0x8b60c8b3
 80096e4:	3fc68a28 	.word	0x3fc68a28
 80096e8:	509f79fb 	.word	0x509f79fb
 80096ec:	3fd34413 	.word	0x3fd34413
 80096f0:	0800d934 	.word	0x0800d934
 80096f4:	0800d94b 	.word	0x0800d94b
 80096f8:	7ff00000 	.word	0x7ff00000
 80096fc:	0800da37 	.word	0x0800da37
 8009700:	3ff80000 	.word	0x3ff80000
 8009704:	0800db18 	.word	0x0800db18
 8009708:	0800d9a3 	.word	0x0800d9a3
 800970c:	0800d930 	.word	0x0800d930
 8009710:	0800da36 	.word	0x0800da36
 8009714:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009718:	6018      	str	r0, [r3, #0]
 800971a:	9b03      	ldr	r3, [sp, #12]
 800971c:	2b0e      	cmp	r3, #14
 800971e:	f200 80a1 	bhi.w	8009864 <_dtoa_r+0x444>
 8009722:	2c00      	cmp	r4, #0
 8009724:	f000 809e 	beq.w	8009864 <_dtoa_r+0x444>
 8009728:	2f00      	cmp	r7, #0
 800972a:	dd33      	ble.n	8009794 <_dtoa_r+0x374>
 800972c:	4b9c      	ldr	r3, [pc, #624]	@ (80099a0 <_dtoa_r+0x580>)
 800972e:	f007 020f 	and.w	r2, r7, #15
 8009732:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009736:	ed93 7b00 	vldr	d7, [r3]
 800973a:	05f8      	lsls	r0, r7, #23
 800973c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8009740:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009744:	d516      	bpl.n	8009774 <_dtoa_r+0x354>
 8009746:	4b97      	ldr	r3, [pc, #604]	@ (80099a4 <_dtoa_r+0x584>)
 8009748:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800974c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009750:	f7f7 f87c 	bl	800084c <__aeabi_ddiv>
 8009754:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009758:	f004 040f 	and.w	r4, r4, #15
 800975c:	2603      	movs	r6, #3
 800975e:	4d91      	ldr	r5, [pc, #580]	@ (80099a4 <_dtoa_r+0x584>)
 8009760:	b954      	cbnz	r4, 8009778 <_dtoa_r+0x358>
 8009762:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009766:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800976a:	f7f7 f86f 	bl	800084c <__aeabi_ddiv>
 800976e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009772:	e028      	b.n	80097c6 <_dtoa_r+0x3a6>
 8009774:	2602      	movs	r6, #2
 8009776:	e7f2      	b.n	800975e <_dtoa_r+0x33e>
 8009778:	07e1      	lsls	r1, r4, #31
 800977a:	d508      	bpl.n	800978e <_dtoa_r+0x36e>
 800977c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009780:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009784:	f7f6 ff38 	bl	80005f8 <__aeabi_dmul>
 8009788:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800978c:	3601      	adds	r6, #1
 800978e:	1064      	asrs	r4, r4, #1
 8009790:	3508      	adds	r5, #8
 8009792:	e7e5      	b.n	8009760 <_dtoa_r+0x340>
 8009794:	f000 80af 	beq.w	80098f6 <_dtoa_r+0x4d6>
 8009798:	427c      	negs	r4, r7
 800979a:	4b81      	ldr	r3, [pc, #516]	@ (80099a0 <_dtoa_r+0x580>)
 800979c:	4d81      	ldr	r5, [pc, #516]	@ (80099a4 <_dtoa_r+0x584>)
 800979e:	f004 020f 	and.w	r2, r4, #15
 80097a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80097a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097aa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80097ae:	f7f6 ff23 	bl	80005f8 <__aeabi_dmul>
 80097b2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80097b6:	1124      	asrs	r4, r4, #4
 80097b8:	2300      	movs	r3, #0
 80097ba:	2602      	movs	r6, #2
 80097bc:	2c00      	cmp	r4, #0
 80097be:	f040 808f 	bne.w	80098e0 <_dtoa_r+0x4c0>
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d1d3      	bne.n	800976e <_dtoa_r+0x34e>
 80097c6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80097c8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	f000 8094 	beq.w	80098fa <_dtoa_r+0x4da>
 80097d2:	4b75      	ldr	r3, [pc, #468]	@ (80099a8 <_dtoa_r+0x588>)
 80097d4:	2200      	movs	r2, #0
 80097d6:	4620      	mov	r0, r4
 80097d8:	4629      	mov	r1, r5
 80097da:	f7f7 f97f 	bl	8000adc <__aeabi_dcmplt>
 80097de:	2800      	cmp	r0, #0
 80097e0:	f000 808b 	beq.w	80098fa <_dtoa_r+0x4da>
 80097e4:	9b03      	ldr	r3, [sp, #12]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	f000 8087 	beq.w	80098fa <_dtoa_r+0x4da>
 80097ec:	f1bb 0f00 	cmp.w	fp, #0
 80097f0:	dd34      	ble.n	800985c <_dtoa_r+0x43c>
 80097f2:	4620      	mov	r0, r4
 80097f4:	4b6d      	ldr	r3, [pc, #436]	@ (80099ac <_dtoa_r+0x58c>)
 80097f6:	2200      	movs	r2, #0
 80097f8:	4629      	mov	r1, r5
 80097fa:	f7f6 fefd 	bl	80005f8 <__aeabi_dmul>
 80097fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009802:	f107 38ff 	add.w	r8, r7, #4294967295
 8009806:	3601      	adds	r6, #1
 8009808:	465c      	mov	r4, fp
 800980a:	4630      	mov	r0, r6
 800980c:	f7f6 fe8a 	bl	8000524 <__aeabi_i2d>
 8009810:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009814:	f7f6 fef0 	bl	80005f8 <__aeabi_dmul>
 8009818:	4b65      	ldr	r3, [pc, #404]	@ (80099b0 <_dtoa_r+0x590>)
 800981a:	2200      	movs	r2, #0
 800981c:	f7f6 fd36 	bl	800028c <__adddf3>
 8009820:	4605      	mov	r5, r0
 8009822:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009826:	2c00      	cmp	r4, #0
 8009828:	d16a      	bne.n	8009900 <_dtoa_r+0x4e0>
 800982a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800982e:	4b61      	ldr	r3, [pc, #388]	@ (80099b4 <_dtoa_r+0x594>)
 8009830:	2200      	movs	r2, #0
 8009832:	f7f6 fd29 	bl	8000288 <__aeabi_dsub>
 8009836:	4602      	mov	r2, r0
 8009838:	460b      	mov	r3, r1
 800983a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800983e:	462a      	mov	r2, r5
 8009840:	4633      	mov	r3, r6
 8009842:	f7f7 f969 	bl	8000b18 <__aeabi_dcmpgt>
 8009846:	2800      	cmp	r0, #0
 8009848:	f040 8298 	bne.w	8009d7c <_dtoa_r+0x95c>
 800984c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009850:	462a      	mov	r2, r5
 8009852:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009856:	f7f7 f941 	bl	8000adc <__aeabi_dcmplt>
 800985a:	bb38      	cbnz	r0, 80098ac <_dtoa_r+0x48c>
 800985c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8009860:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009864:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009866:	2b00      	cmp	r3, #0
 8009868:	f2c0 8157 	blt.w	8009b1a <_dtoa_r+0x6fa>
 800986c:	2f0e      	cmp	r7, #14
 800986e:	f300 8154 	bgt.w	8009b1a <_dtoa_r+0x6fa>
 8009872:	4b4b      	ldr	r3, [pc, #300]	@ (80099a0 <_dtoa_r+0x580>)
 8009874:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009878:	ed93 7b00 	vldr	d7, [r3]
 800987c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800987e:	2b00      	cmp	r3, #0
 8009880:	ed8d 7b00 	vstr	d7, [sp]
 8009884:	f280 80e5 	bge.w	8009a52 <_dtoa_r+0x632>
 8009888:	9b03      	ldr	r3, [sp, #12]
 800988a:	2b00      	cmp	r3, #0
 800988c:	f300 80e1 	bgt.w	8009a52 <_dtoa_r+0x632>
 8009890:	d10c      	bne.n	80098ac <_dtoa_r+0x48c>
 8009892:	4b48      	ldr	r3, [pc, #288]	@ (80099b4 <_dtoa_r+0x594>)
 8009894:	2200      	movs	r2, #0
 8009896:	ec51 0b17 	vmov	r0, r1, d7
 800989a:	f7f6 fead 	bl	80005f8 <__aeabi_dmul>
 800989e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80098a2:	f7f7 f92f 	bl	8000b04 <__aeabi_dcmpge>
 80098a6:	2800      	cmp	r0, #0
 80098a8:	f000 8266 	beq.w	8009d78 <_dtoa_r+0x958>
 80098ac:	2400      	movs	r4, #0
 80098ae:	4625      	mov	r5, r4
 80098b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80098b2:	4656      	mov	r6, sl
 80098b4:	ea6f 0803 	mvn.w	r8, r3
 80098b8:	2700      	movs	r7, #0
 80098ba:	4621      	mov	r1, r4
 80098bc:	4648      	mov	r0, r9
 80098be:	f000 fcbf 	bl	800a240 <_Bfree>
 80098c2:	2d00      	cmp	r5, #0
 80098c4:	f000 80bd 	beq.w	8009a42 <_dtoa_r+0x622>
 80098c8:	b12f      	cbz	r7, 80098d6 <_dtoa_r+0x4b6>
 80098ca:	42af      	cmp	r7, r5
 80098cc:	d003      	beq.n	80098d6 <_dtoa_r+0x4b6>
 80098ce:	4639      	mov	r1, r7
 80098d0:	4648      	mov	r0, r9
 80098d2:	f000 fcb5 	bl	800a240 <_Bfree>
 80098d6:	4629      	mov	r1, r5
 80098d8:	4648      	mov	r0, r9
 80098da:	f000 fcb1 	bl	800a240 <_Bfree>
 80098de:	e0b0      	b.n	8009a42 <_dtoa_r+0x622>
 80098e0:	07e2      	lsls	r2, r4, #31
 80098e2:	d505      	bpl.n	80098f0 <_dtoa_r+0x4d0>
 80098e4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80098e8:	f7f6 fe86 	bl	80005f8 <__aeabi_dmul>
 80098ec:	3601      	adds	r6, #1
 80098ee:	2301      	movs	r3, #1
 80098f0:	1064      	asrs	r4, r4, #1
 80098f2:	3508      	adds	r5, #8
 80098f4:	e762      	b.n	80097bc <_dtoa_r+0x39c>
 80098f6:	2602      	movs	r6, #2
 80098f8:	e765      	b.n	80097c6 <_dtoa_r+0x3a6>
 80098fa:	9c03      	ldr	r4, [sp, #12]
 80098fc:	46b8      	mov	r8, r7
 80098fe:	e784      	b.n	800980a <_dtoa_r+0x3ea>
 8009900:	4b27      	ldr	r3, [pc, #156]	@ (80099a0 <_dtoa_r+0x580>)
 8009902:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009904:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009908:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800990c:	4454      	add	r4, sl
 800990e:	2900      	cmp	r1, #0
 8009910:	d054      	beq.n	80099bc <_dtoa_r+0x59c>
 8009912:	4929      	ldr	r1, [pc, #164]	@ (80099b8 <_dtoa_r+0x598>)
 8009914:	2000      	movs	r0, #0
 8009916:	f7f6 ff99 	bl	800084c <__aeabi_ddiv>
 800991a:	4633      	mov	r3, r6
 800991c:	462a      	mov	r2, r5
 800991e:	f7f6 fcb3 	bl	8000288 <__aeabi_dsub>
 8009922:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009926:	4656      	mov	r6, sl
 8009928:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800992c:	f7f7 f914 	bl	8000b58 <__aeabi_d2iz>
 8009930:	4605      	mov	r5, r0
 8009932:	f7f6 fdf7 	bl	8000524 <__aeabi_i2d>
 8009936:	4602      	mov	r2, r0
 8009938:	460b      	mov	r3, r1
 800993a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800993e:	f7f6 fca3 	bl	8000288 <__aeabi_dsub>
 8009942:	3530      	adds	r5, #48	@ 0x30
 8009944:	4602      	mov	r2, r0
 8009946:	460b      	mov	r3, r1
 8009948:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800994c:	f806 5b01 	strb.w	r5, [r6], #1
 8009950:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009954:	f7f7 f8c2 	bl	8000adc <__aeabi_dcmplt>
 8009958:	2800      	cmp	r0, #0
 800995a:	d172      	bne.n	8009a42 <_dtoa_r+0x622>
 800995c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009960:	4911      	ldr	r1, [pc, #68]	@ (80099a8 <_dtoa_r+0x588>)
 8009962:	2000      	movs	r0, #0
 8009964:	f7f6 fc90 	bl	8000288 <__aeabi_dsub>
 8009968:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800996c:	f7f7 f8b6 	bl	8000adc <__aeabi_dcmplt>
 8009970:	2800      	cmp	r0, #0
 8009972:	f040 80b4 	bne.w	8009ade <_dtoa_r+0x6be>
 8009976:	42a6      	cmp	r6, r4
 8009978:	f43f af70 	beq.w	800985c <_dtoa_r+0x43c>
 800997c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009980:	4b0a      	ldr	r3, [pc, #40]	@ (80099ac <_dtoa_r+0x58c>)
 8009982:	2200      	movs	r2, #0
 8009984:	f7f6 fe38 	bl	80005f8 <__aeabi_dmul>
 8009988:	4b08      	ldr	r3, [pc, #32]	@ (80099ac <_dtoa_r+0x58c>)
 800998a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800998e:	2200      	movs	r2, #0
 8009990:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009994:	f7f6 fe30 	bl	80005f8 <__aeabi_dmul>
 8009998:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800999c:	e7c4      	b.n	8009928 <_dtoa_r+0x508>
 800999e:	bf00      	nop
 80099a0:	0800db18 	.word	0x0800db18
 80099a4:	0800daf0 	.word	0x0800daf0
 80099a8:	3ff00000 	.word	0x3ff00000
 80099ac:	40240000 	.word	0x40240000
 80099b0:	401c0000 	.word	0x401c0000
 80099b4:	40140000 	.word	0x40140000
 80099b8:	3fe00000 	.word	0x3fe00000
 80099bc:	4631      	mov	r1, r6
 80099be:	4628      	mov	r0, r5
 80099c0:	f7f6 fe1a 	bl	80005f8 <__aeabi_dmul>
 80099c4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80099c8:	9413      	str	r4, [sp, #76]	@ 0x4c
 80099ca:	4656      	mov	r6, sl
 80099cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80099d0:	f7f7 f8c2 	bl	8000b58 <__aeabi_d2iz>
 80099d4:	4605      	mov	r5, r0
 80099d6:	f7f6 fda5 	bl	8000524 <__aeabi_i2d>
 80099da:	4602      	mov	r2, r0
 80099dc:	460b      	mov	r3, r1
 80099de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80099e2:	f7f6 fc51 	bl	8000288 <__aeabi_dsub>
 80099e6:	3530      	adds	r5, #48	@ 0x30
 80099e8:	f806 5b01 	strb.w	r5, [r6], #1
 80099ec:	4602      	mov	r2, r0
 80099ee:	460b      	mov	r3, r1
 80099f0:	42a6      	cmp	r6, r4
 80099f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80099f6:	f04f 0200 	mov.w	r2, #0
 80099fa:	d124      	bne.n	8009a46 <_dtoa_r+0x626>
 80099fc:	4baf      	ldr	r3, [pc, #700]	@ (8009cbc <_dtoa_r+0x89c>)
 80099fe:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009a02:	f7f6 fc43 	bl	800028c <__adddf3>
 8009a06:	4602      	mov	r2, r0
 8009a08:	460b      	mov	r3, r1
 8009a0a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009a0e:	f7f7 f883 	bl	8000b18 <__aeabi_dcmpgt>
 8009a12:	2800      	cmp	r0, #0
 8009a14:	d163      	bne.n	8009ade <_dtoa_r+0x6be>
 8009a16:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009a1a:	49a8      	ldr	r1, [pc, #672]	@ (8009cbc <_dtoa_r+0x89c>)
 8009a1c:	2000      	movs	r0, #0
 8009a1e:	f7f6 fc33 	bl	8000288 <__aeabi_dsub>
 8009a22:	4602      	mov	r2, r0
 8009a24:	460b      	mov	r3, r1
 8009a26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009a2a:	f7f7 f857 	bl	8000adc <__aeabi_dcmplt>
 8009a2e:	2800      	cmp	r0, #0
 8009a30:	f43f af14 	beq.w	800985c <_dtoa_r+0x43c>
 8009a34:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8009a36:	1e73      	subs	r3, r6, #1
 8009a38:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009a3a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009a3e:	2b30      	cmp	r3, #48	@ 0x30
 8009a40:	d0f8      	beq.n	8009a34 <_dtoa_r+0x614>
 8009a42:	4647      	mov	r7, r8
 8009a44:	e03b      	b.n	8009abe <_dtoa_r+0x69e>
 8009a46:	4b9e      	ldr	r3, [pc, #632]	@ (8009cc0 <_dtoa_r+0x8a0>)
 8009a48:	f7f6 fdd6 	bl	80005f8 <__aeabi_dmul>
 8009a4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009a50:	e7bc      	b.n	80099cc <_dtoa_r+0x5ac>
 8009a52:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009a56:	4656      	mov	r6, sl
 8009a58:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a5c:	4620      	mov	r0, r4
 8009a5e:	4629      	mov	r1, r5
 8009a60:	f7f6 fef4 	bl	800084c <__aeabi_ddiv>
 8009a64:	f7f7 f878 	bl	8000b58 <__aeabi_d2iz>
 8009a68:	4680      	mov	r8, r0
 8009a6a:	f7f6 fd5b 	bl	8000524 <__aeabi_i2d>
 8009a6e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a72:	f7f6 fdc1 	bl	80005f8 <__aeabi_dmul>
 8009a76:	4602      	mov	r2, r0
 8009a78:	460b      	mov	r3, r1
 8009a7a:	4620      	mov	r0, r4
 8009a7c:	4629      	mov	r1, r5
 8009a7e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009a82:	f7f6 fc01 	bl	8000288 <__aeabi_dsub>
 8009a86:	f806 4b01 	strb.w	r4, [r6], #1
 8009a8a:	9d03      	ldr	r5, [sp, #12]
 8009a8c:	eba6 040a 	sub.w	r4, r6, sl
 8009a90:	42a5      	cmp	r5, r4
 8009a92:	4602      	mov	r2, r0
 8009a94:	460b      	mov	r3, r1
 8009a96:	d133      	bne.n	8009b00 <_dtoa_r+0x6e0>
 8009a98:	f7f6 fbf8 	bl	800028c <__adddf3>
 8009a9c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009aa0:	4604      	mov	r4, r0
 8009aa2:	460d      	mov	r5, r1
 8009aa4:	f7f7 f838 	bl	8000b18 <__aeabi_dcmpgt>
 8009aa8:	b9c0      	cbnz	r0, 8009adc <_dtoa_r+0x6bc>
 8009aaa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009aae:	4620      	mov	r0, r4
 8009ab0:	4629      	mov	r1, r5
 8009ab2:	f7f7 f809 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ab6:	b110      	cbz	r0, 8009abe <_dtoa_r+0x69e>
 8009ab8:	f018 0f01 	tst.w	r8, #1
 8009abc:	d10e      	bne.n	8009adc <_dtoa_r+0x6bc>
 8009abe:	9902      	ldr	r1, [sp, #8]
 8009ac0:	4648      	mov	r0, r9
 8009ac2:	f000 fbbd 	bl	800a240 <_Bfree>
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	7033      	strb	r3, [r6, #0]
 8009aca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009acc:	3701      	adds	r7, #1
 8009ace:	601f      	str	r7, [r3, #0]
 8009ad0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	f000 824b 	beq.w	8009f6e <_dtoa_r+0xb4e>
 8009ad8:	601e      	str	r6, [r3, #0]
 8009ada:	e248      	b.n	8009f6e <_dtoa_r+0xb4e>
 8009adc:	46b8      	mov	r8, r7
 8009ade:	4633      	mov	r3, r6
 8009ae0:	461e      	mov	r6, r3
 8009ae2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009ae6:	2a39      	cmp	r2, #57	@ 0x39
 8009ae8:	d106      	bne.n	8009af8 <_dtoa_r+0x6d8>
 8009aea:	459a      	cmp	sl, r3
 8009aec:	d1f8      	bne.n	8009ae0 <_dtoa_r+0x6c0>
 8009aee:	2230      	movs	r2, #48	@ 0x30
 8009af0:	f108 0801 	add.w	r8, r8, #1
 8009af4:	f88a 2000 	strb.w	r2, [sl]
 8009af8:	781a      	ldrb	r2, [r3, #0]
 8009afa:	3201      	adds	r2, #1
 8009afc:	701a      	strb	r2, [r3, #0]
 8009afe:	e7a0      	b.n	8009a42 <_dtoa_r+0x622>
 8009b00:	4b6f      	ldr	r3, [pc, #444]	@ (8009cc0 <_dtoa_r+0x8a0>)
 8009b02:	2200      	movs	r2, #0
 8009b04:	f7f6 fd78 	bl	80005f8 <__aeabi_dmul>
 8009b08:	2200      	movs	r2, #0
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	4604      	mov	r4, r0
 8009b0e:	460d      	mov	r5, r1
 8009b10:	f7f6 ffda 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b14:	2800      	cmp	r0, #0
 8009b16:	d09f      	beq.n	8009a58 <_dtoa_r+0x638>
 8009b18:	e7d1      	b.n	8009abe <_dtoa_r+0x69e>
 8009b1a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b1c:	2a00      	cmp	r2, #0
 8009b1e:	f000 80ea 	beq.w	8009cf6 <_dtoa_r+0x8d6>
 8009b22:	9a07      	ldr	r2, [sp, #28]
 8009b24:	2a01      	cmp	r2, #1
 8009b26:	f300 80cd 	bgt.w	8009cc4 <_dtoa_r+0x8a4>
 8009b2a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009b2c:	2a00      	cmp	r2, #0
 8009b2e:	f000 80c1 	beq.w	8009cb4 <_dtoa_r+0x894>
 8009b32:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009b36:	9c08      	ldr	r4, [sp, #32]
 8009b38:	9e00      	ldr	r6, [sp, #0]
 8009b3a:	9a00      	ldr	r2, [sp, #0]
 8009b3c:	441a      	add	r2, r3
 8009b3e:	9200      	str	r2, [sp, #0]
 8009b40:	9a06      	ldr	r2, [sp, #24]
 8009b42:	2101      	movs	r1, #1
 8009b44:	441a      	add	r2, r3
 8009b46:	4648      	mov	r0, r9
 8009b48:	9206      	str	r2, [sp, #24]
 8009b4a:	f000 fc77 	bl	800a43c <__i2b>
 8009b4e:	4605      	mov	r5, r0
 8009b50:	b166      	cbz	r6, 8009b6c <_dtoa_r+0x74c>
 8009b52:	9b06      	ldr	r3, [sp, #24]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	dd09      	ble.n	8009b6c <_dtoa_r+0x74c>
 8009b58:	42b3      	cmp	r3, r6
 8009b5a:	9a00      	ldr	r2, [sp, #0]
 8009b5c:	bfa8      	it	ge
 8009b5e:	4633      	movge	r3, r6
 8009b60:	1ad2      	subs	r2, r2, r3
 8009b62:	9200      	str	r2, [sp, #0]
 8009b64:	9a06      	ldr	r2, [sp, #24]
 8009b66:	1af6      	subs	r6, r6, r3
 8009b68:	1ad3      	subs	r3, r2, r3
 8009b6a:	9306      	str	r3, [sp, #24]
 8009b6c:	9b08      	ldr	r3, [sp, #32]
 8009b6e:	b30b      	cbz	r3, 8009bb4 <_dtoa_r+0x794>
 8009b70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	f000 80c6 	beq.w	8009d04 <_dtoa_r+0x8e4>
 8009b78:	2c00      	cmp	r4, #0
 8009b7a:	f000 80c0 	beq.w	8009cfe <_dtoa_r+0x8de>
 8009b7e:	4629      	mov	r1, r5
 8009b80:	4622      	mov	r2, r4
 8009b82:	4648      	mov	r0, r9
 8009b84:	f000 fd12 	bl	800a5ac <__pow5mult>
 8009b88:	9a02      	ldr	r2, [sp, #8]
 8009b8a:	4601      	mov	r1, r0
 8009b8c:	4605      	mov	r5, r0
 8009b8e:	4648      	mov	r0, r9
 8009b90:	f000 fc6a 	bl	800a468 <__multiply>
 8009b94:	9902      	ldr	r1, [sp, #8]
 8009b96:	4680      	mov	r8, r0
 8009b98:	4648      	mov	r0, r9
 8009b9a:	f000 fb51 	bl	800a240 <_Bfree>
 8009b9e:	9b08      	ldr	r3, [sp, #32]
 8009ba0:	1b1b      	subs	r3, r3, r4
 8009ba2:	9308      	str	r3, [sp, #32]
 8009ba4:	f000 80b1 	beq.w	8009d0a <_dtoa_r+0x8ea>
 8009ba8:	9a08      	ldr	r2, [sp, #32]
 8009baa:	4641      	mov	r1, r8
 8009bac:	4648      	mov	r0, r9
 8009bae:	f000 fcfd 	bl	800a5ac <__pow5mult>
 8009bb2:	9002      	str	r0, [sp, #8]
 8009bb4:	2101      	movs	r1, #1
 8009bb6:	4648      	mov	r0, r9
 8009bb8:	f000 fc40 	bl	800a43c <__i2b>
 8009bbc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009bbe:	4604      	mov	r4, r0
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	f000 81d8 	beq.w	8009f76 <_dtoa_r+0xb56>
 8009bc6:	461a      	mov	r2, r3
 8009bc8:	4601      	mov	r1, r0
 8009bca:	4648      	mov	r0, r9
 8009bcc:	f000 fcee 	bl	800a5ac <__pow5mult>
 8009bd0:	9b07      	ldr	r3, [sp, #28]
 8009bd2:	2b01      	cmp	r3, #1
 8009bd4:	4604      	mov	r4, r0
 8009bd6:	f300 809f 	bgt.w	8009d18 <_dtoa_r+0x8f8>
 8009bda:	9b04      	ldr	r3, [sp, #16]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	f040 8097 	bne.w	8009d10 <_dtoa_r+0x8f0>
 8009be2:	9b05      	ldr	r3, [sp, #20]
 8009be4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	f040 8093 	bne.w	8009d14 <_dtoa_r+0x8f4>
 8009bee:	9b05      	ldr	r3, [sp, #20]
 8009bf0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009bf4:	0d1b      	lsrs	r3, r3, #20
 8009bf6:	051b      	lsls	r3, r3, #20
 8009bf8:	b133      	cbz	r3, 8009c08 <_dtoa_r+0x7e8>
 8009bfa:	9b00      	ldr	r3, [sp, #0]
 8009bfc:	3301      	adds	r3, #1
 8009bfe:	9300      	str	r3, [sp, #0]
 8009c00:	9b06      	ldr	r3, [sp, #24]
 8009c02:	3301      	adds	r3, #1
 8009c04:	9306      	str	r3, [sp, #24]
 8009c06:	2301      	movs	r3, #1
 8009c08:	9308      	str	r3, [sp, #32]
 8009c0a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	f000 81b8 	beq.w	8009f82 <_dtoa_r+0xb62>
 8009c12:	6923      	ldr	r3, [r4, #16]
 8009c14:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009c18:	6918      	ldr	r0, [r3, #16]
 8009c1a:	f000 fbc3 	bl	800a3a4 <__hi0bits>
 8009c1e:	f1c0 0020 	rsb	r0, r0, #32
 8009c22:	9b06      	ldr	r3, [sp, #24]
 8009c24:	4418      	add	r0, r3
 8009c26:	f010 001f 	ands.w	r0, r0, #31
 8009c2a:	f000 8082 	beq.w	8009d32 <_dtoa_r+0x912>
 8009c2e:	f1c0 0320 	rsb	r3, r0, #32
 8009c32:	2b04      	cmp	r3, #4
 8009c34:	dd73      	ble.n	8009d1e <_dtoa_r+0x8fe>
 8009c36:	9b00      	ldr	r3, [sp, #0]
 8009c38:	f1c0 001c 	rsb	r0, r0, #28
 8009c3c:	4403      	add	r3, r0
 8009c3e:	9300      	str	r3, [sp, #0]
 8009c40:	9b06      	ldr	r3, [sp, #24]
 8009c42:	4403      	add	r3, r0
 8009c44:	4406      	add	r6, r0
 8009c46:	9306      	str	r3, [sp, #24]
 8009c48:	9b00      	ldr	r3, [sp, #0]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	dd05      	ble.n	8009c5a <_dtoa_r+0x83a>
 8009c4e:	9902      	ldr	r1, [sp, #8]
 8009c50:	461a      	mov	r2, r3
 8009c52:	4648      	mov	r0, r9
 8009c54:	f000 fd04 	bl	800a660 <__lshift>
 8009c58:	9002      	str	r0, [sp, #8]
 8009c5a:	9b06      	ldr	r3, [sp, #24]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	dd05      	ble.n	8009c6c <_dtoa_r+0x84c>
 8009c60:	4621      	mov	r1, r4
 8009c62:	461a      	mov	r2, r3
 8009c64:	4648      	mov	r0, r9
 8009c66:	f000 fcfb 	bl	800a660 <__lshift>
 8009c6a:	4604      	mov	r4, r0
 8009c6c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d061      	beq.n	8009d36 <_dtoa_r+0x916>
 8009c72:	9802      	ldr	r0, [sp, #8]
 8009c74:	4621      	mov	r1, r4
 8009c76:	f000 fd5f 	bl	800a738 <__mcmp>
 8009c7a:	2800      	cmp	r0, #0
 8009c7c:	da5b      	bge.n	8009d36 <_dtoa_r+0x916>
 8009c7e:	2300      	movs	r3, #0
 8009c80:	9902      	ldr	r1, [sp, #8]
 8009c82:	220a      	movs	r2, #10
 8009c84:	4648      	mov	r0, r9
 8009c86:	f000 fafd 	bl	800a284 <__multadd>
 8009c8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c8c:	9002      	str	r0, [sp, #8]
 8009c8e:	f107 38ff 	add.w	r8, r7, #4294967295
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	f000 8177 	beq.w	8009f86 <_dtoa_r+0xb66>
 8009c98:	4629      	mov	r1, r5
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	220a      	movs	r2, #10
 8009c9e:	4648      	mov	r0, r9
 8009ca0:	f000 faf0 	bl	800a284 <__multadd>
 8009ca4:	f1bb 0f00 	cmp.w	fp, #0
 8009ca8:	4605      	mov	r5, r0
 8009caa:	dc6f      	bgt.n	8009d8c <_dtoa_r+0x96c>
 8009cac:	9b07      	ldr	r3, [sp, #28]
 8009cae:	2b02      	cmp	r3, #2
 8009cb0:	dc49      	bgt.n	8009d46 <_dtoa_r+0x926>
 8009cb2:	e06b      	b.n	8009d8c <_dtoa_r+0x96c>
 8009cb4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009cb6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009cba:	e73c      	b.n	8009b36 <_dtoa_r+0x716>
 8009cbc:	3fe00000 	.word	0x3fe00000
 8009cc0:	40240000 	.word	0x40240000
 8009cc4:	9b03      	ldr	r3, [sp, #12]
 8009cc6:	1e5c      	subs	r4, r3, #1
 8009cc8:	9b08      	ldr	r3, [sp, #32]
 8009cca:	42a3      	cmp	r3, r4
 8009ccc:	db09      	blt.n	8009ce2 <_dtoa_r+0x8c2>
 8009cce:	1b1c      	subs	r4, r3, r4
 8009cd0:	9b03      	ldr	r3, [sp, #12]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	f6bf af30 	bge.w	8009b38 <_dtoa_r+0x718>
 8009cd8:	9b00      	ldr	r3, [sp, #0]
 8009cda:	9a03      	ldr	r2, [sp, #12]
 8009cdc:	1a9e      	subs	r6, r3, r2
 8009cde:	2300      	movs	r3, #0
 8009ce0:	e72b      	b.n	8009b3a <_dtoa_r+0x71a>
 8009ce2:	9b08      	ldr	r3, [sp, #32]
 8009ce4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009ce6:	9408      	str	r4, [sp, #32]
 8009ce8:	1ae3      	subs	r3, r4, r3
 8009cea:	441a      	add	r2, r3
 8009cec:	9e00      	ldr	r6, [sp, #0]
 8009cee:	9b03      	ldr	r3, [sp, #12]
 8009cf0:	920d      	str	r2, [sp, #52]	@ 0x34
 8009cf2:	2400      	movs	r4, #0
 8009cf4:	e721      	b.n	8009b3a <_dtoa_r+0x71a>
 8009cf6:	9c08      	ldr	r4, [sp, #32]
 8009cf8:	9e00      	ldr	r6, [sp, #0]
 8009cfa:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8009cfc:	e728      	b.n	8009b50 <_dtoa_r+0x730>
 8009cfe:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8009d02:	e751      	b.n	8009ba8 <_dtoa_r+0x788>
 8009d04:	9a08      	ldr	r2, [sp, #32]
 8009d06:	9902      	ldr	r1, [sp, #8]
 8009d08:	e750      	b.n	8009bac <_dtoa_r+0x78c>
 8009d0a:	f8cd 8008 	str.w	r8, [sp, #8]
 8009d0e:	e751      	b.n	8009bb4 <_dtoa_r+0x794>
 8009d10:	2300      	movs	r3, #0
 8009d12:	e779      	b.n	8009c08 <_dtoa_r+0x7e8>
 8009d14:	9b04      	ldr	r3, [sp, #16]
 8009d16:	e777      	b.n	8009c08 <_dtoa_r+0x7e8>
 8009d18:	2300      	movs	r3, #0
 8009d1a:	9308      	str	r3, [sp, #32]
 8009d1c:	e779      	b.n	8009c12 <_dtoa_r+0x7f2>
 8009d1e:	d093      	beq.n	8009c48 <_dtoa_r+0x828>
 8009d20:	9a00      	ldr	r2, [sp, #0]
 8009d22:	331c      	adds	r3, #28
 8009d24:	441a      	add	r2, r3
 8009d26:	9200      	str	r2, [sp, #0]
 8009d28:	9a06      	ldr	r2, [sp, #24]
 8009d2a:	441a      	add	r2, r3
 8009d2c:	441e      	add	r6, r3
 8009d2e:	9206      	str	r2, [sp, #24]
 8009d30:	e78a      	b.n	8009c48 <_dtoa_r+0x828>
 8009d32:	4603      	mov	r3, r0
 8009d34:	e7f4      	b.n	8009d20 <_dtoa_r+0x900>
 8009d36:	9b03      	ldr	r3, [sp, #12]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	46b8      	mov	r8, r7
 8009d3c:	dc20      	bgt.n	8009d80 <_dtoa_r+0x960>
 8009d3e:	469b      	mov	fp, r3
 8009d40:	9b07      	ldr	r3, [sp, #28]
 8009d42:	2b02      	cmp	r3, #2
 8009d44:	dd1e      	ble.n	8009d84 <_dtoa_r+0x964>
 8009d46:	f1bb 0f00 	cmp.w	fp, #0
 8009d4a:	f47f adb1 	bne.w	80098b0 <_dtoa_r+0x490>
 8009d4e:	4621      	mov	r1, r4
 8009d50:	465b      	mov	r3, fp
 8009d52:	2205      	movs	r2, #5
 8009d54:	4648      	mov	r0, r9
 8009d56:	f000 fa95 	bl	800a284 <__multadd>
 8009d5a:	4601      	mov	r1, r0
 8009d5c:	4604      	mov	r4, r0
 8009d5e:	9802      	ldr	r0, [sp, #8]
 8009d60:	f000 fcea 	bl	800a738 <__mcmp>
 8009d64:	2800      	cmp	r0, #0
 8009d66:	f77f ada3 	ble.w	80098b0 <_dtoa_r+0x490>
 8009d6a:	4656      	mov	r6, sl
 8009d6c:	2331      	movs	r3, #49	@ 0x31
 8009d6e:	f806 3b01 	strb.w	r3, [r6], #1
 8009d72:	f108 0801 	add.w	r8, r8, #1
 8009d76:	e59f      	b.n	80098b8 <_dtoa_r+0x498>
 8009d78:	9c03      	ldr	r4, [sp, #12]
 8009d7a:	46b8      	mov	r8, r7
 8009d7c:	4625      	mov	r5, r4
 8009d7e:	e7f4      	b.n	8009d6a <_dtoa_r+0x94a>
 8009d80:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8009d84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	f000 8101 	beq.w	8009f8e <_dtoa_r+0xb6e>
 8009d8c:	2e00      	cmp	r6, #0
 8009d8e:	dd05      	ble.n	8009d9c <_dtoa_r+0x97c>
 8009d90:	4629      	mov	r1, r5
 8009d92:	4632      	mov	r2, r6
 8009d94:	4648      	mov	r0, r9
 8009d96:	f000 fc63 	bl	800a660 <__lshift>
 8009d9a:	4605      	mov	r5, r0
 8009d9c:	9b08      	ldr	r3, [sp, #32]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d05c      	beq.n	8009e5c <_dtoa_r+0xa3c>
 8009da2:	6869      	ldr	r1, [r5, #4]
 8009da4:	4648      	mov	r0, r9
 8009da6:	f000 fa0b 	bl	800a1c0 <_Balloc>
 8009daa:	4606      	mov	r6, r0
 8009dac:	b928      	cbnz	r0, 8009dba <_dtoa_r+0x99a>
 8009dae:	4b82      	ldr	r3, [pc, #520]	@ (8009fb8 <_dtoa_r+0xb98>)
 8009db0:	4602      	mov	r2, r0
 8009db2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009db6:	f7ff bb4a 	b.w	800944e <_dtoa_r+0x2e>
 8009dba:	692a      	ldr	r2, [r5, #16]
 8009dbc:	3202      	adds	r2, #2
 8009dbe:	0092      	lsls	r2, r2, #2
 8009dc0:	f105 010c 	add.w	r1, r5, #12
 8009dc4:	300c      	adds	r0, #12
 8009dc6:	f7ff fa8c 	bl	80092e2 <memcpy>
 8009dca:	2201      	movs	r2, #1
 8009dcc:	4631      	mov	r1, r6
 8009dce:	4648      	mov	r0, r9
 8009dd0:	f000 fc46 	bl	800a660 <__lshift>
 8009dd4:	f10a 0301 	add.w	r3, sl, #1
 8009dd8:	9300      	str	r3, [sp, #0]
 8009dda:	eb0a 030b 	add.w	r3, sl, fp
 8009dde:	9308      	str	r3, [sp, #32]
 8009de0:	9b04      	ldr	r3, [sp, #16]
 8009de2:	f003 0301 	and.w	r3, r3, #1
 8009de6:	462f      	mov	r7, r5
 8009de8:	9306      	str	r3, [sp, #24]
 8009dea:	4605      	mov	r5, r0
 8009dec:	9b00      	ldr	r3, [sp, #0]
 8009dee:	9802      	ldr	r0, [sp, #8]
 8009df0:	4621      	mov	r1, r4
 8009df2:	f103 3bff 	add.w	fp, r3, #4294967295
 8009df6:	f7ff fa89 	bl	800930c <quorem>
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	3330      	adds	r3, #48	@ 0x30
 8009dfe:	9003      	str	r0, [sp, #12]
 8009e00:	4639      	mov	r1, r7
 8009e02:	9802      	ldr	r0, [sp, #8]
 8009e04:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e06:	f000 fc97 	bl	800a738 <__mcmp>
 8009e0a:	462a      	mov	r2, r5
 8009e0c:	9004      	str	r0, [sp, #16]
 8009e0e:	4621      	mov	r1, r4
 8009e10:	4648      	mov	r0, r9
 8009e12:	f000 fcad 	bl	800a770 <__mdiff>
 8009e16:	68c2      	ldr	r2, [r0, #12]
 8009e18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e1a:	4606      	mov	r6, r0
 8009e1c:	bb02      	cbnz	r2, 8009e60 <_dtoa_r+0xa40>
 8009e1e:	4601      	mov	r1, r0
 8009e20:	9802      	ldr	r0, [sp, #8]
 8009e22:	f000 fc89 	bl	800a738 <__mcmp>
 8009e26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e28:	4602      	mov	r2, r0
 8009e2a:	4631      	mov	r1, r6
 8009e2c:	4648      	mov	r0, r9
 8009e2e:	920c      	str	r2, [sp, #48]	@ 0x30
 8009e30:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e32:	f000 fa05 	bl	800a240 <_Bfree>
 8009e36:	9b07      	ldr	r3, [sp, #28]
 8009e38:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009e3a:	9e00      	ldr	r6, [sp, #0]
 8009e3c:	ea42 0103 	orr.w	r1, r2, r3
 8009e40:	9b06      	ldr	r3, [sp, #24]
 8009e42:	4319      	orrs	r1, r3
 8009e44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e46:	d10d      	bne.n	8009e64 <_dtoa_r+0xa44>
 8009e48:	2b39      	cmp	r3, #57	@ 0x39
 8009e4a:	d027      	beq.n	8009e9c <_dtoa_r+0xa7c>
 8009e4c:	9a04      	ldr	r2, [sp, #16]
 8009e4e:	2a00      	cmp	r2, #0
 8009e50:	dd01      	ble.n	8009e56 <_dtoa_r+0xa36>
 8009e52:	9b03      	ldr	r3, [sp, #12]
 8009e54:	3331      	adds	r3, #49	@ 0x31
 8009e56:	f88b 3000 	strb.w	r3, [fp]
 8009e5a:	e52e      	b.n	80098ba <_dtoa_r+0x49a>
 8009e5c:	4628      	mov	r0, r5
 8009e5e:	e7b9      	b.n	8009dd4 <_dtoa_r+0x9b4>
 8009e60:	2201      	movs	r2, #1
 8009e62:	e7e2      	b.n	8009e2a <_dtoa_r+0xa0a>
 8009e64:	9904      	ldr	r1, [sp, #16]
 8009e66:	2900      	cmp	r1, #0
 8009e68:	db04      	blt.n	8009e74 <_dtoa_r+0xa54>
 8009e6a:	9807      	ldr	r0, [sp, #28]
 8009e6c:	4301      	orrs	r1, r0
 8009e6e:	9806      	ldr	r0, [sp, #24]
 8009e70:	4301      	orrs	r1, r0
 8009e72:	d120      	bne.n	8009eb6 <_dtoa_r+0xa96>
 8009e74:	2a00      	cmp	r2, #0
 8009e76:	ddee      	ble.n	8009e56 <_dtoa_r+0xa36>
 8009e78:	9902      	ldr	r1, [sp, #8]
 8009e7a:	9300      	str	r3, [sp, #0]
 8009e7c:	2201      	movs	r2, #1
 8009e7e:	4648      	mov	r0, r9
 8009e80:	f000 fbee 	bl	800a660 <__lshift>
 8009e84:	4621      	mov	r1, r4
 8009e86:	9002      	str	r0, [sp, #8]
 8009e88:	f000 fc56 	bl	800a738 <__mcmp>
 8009e8c:	2800      	cmp	r0, #0
 8009e8e:	9b00      	ldr	r3, [sp, #0]
 8009e90:	dc02      	bgt.n	8009e98 <_dtoa_r+0xa78>
 8009e92:	d1e0      	bne.n	8009e56 <_dtoa_r+0xa36>
 8009e94:	07da      	lsls	r2, r3, #31
 8009e96:	d5de      	bpl.n	8009e56 <_dtoa_r+0xa36>
 8009e98:	2b39      	cmp	r3, #57	@ 0x39
 8009e9a:	d1da      	bne.n	8009e52 <_dtoa_r+0xa32>
 8009e9c:	2339      	movs	r3, #57	@ 0x39
 8009e9e:	f88b 3000 	strb.w	r3, [fp]
 8009ea2:	4633      	mov	r3, r6
 8009ea4:	461e      	mov	r6, r3
 8009ea6:	3b01      	subs	r3, #1
 8009ea8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009eac:	2a39      	cmp	r2, #57	@ 0x39
 8009eae:	d04e      	beq.n	8009f4e <_dtoa_r+0xb2e>
 8009eb0:	3201      	adds	r2, #1
 8009eb2:	701a      	strb	r2, [r3, #0]
 8009eb4:	e501      	b.n	80098ba <_dtoa_r+0x49a>
 8009eb6:	2a00      	cmp	r2, #0
 8009eb8:	dd03      	ble.n	8009ec2 <_dtoa_r+0xaa2>
 8009eba:	2b39      	cmp	r3, #57	@ 0x39
 8009ebc:	d0ee      	beq.n	8009e9c <_dtoa_r+0xa7c>
 8009ebe:	3301      	adds	r3, #1
 8009ec0:	e7c9      	b.n	8009e56 <_dtoa_r+0xa36>
 8009ec2:	9a00      	ldr	r2, [sp, #0]
 8009ec4:	9908      	ldr	r1, [sp, #32]
 8009ec6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009eca:	428a      	cmp	r2, r1
 8009ecc:	d028      	beq.n	8009f20 <_dtoa_r+0xb00>
 8009ece:	9902      	ldr	r1, [sp, #8]
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	220a      	movs	r2, #10
 8009ed4:	4648      	mov	r0, r9
 8009ed6:	f000 f9d5 	bl	800a284 <__multadd>
 8009eda:	42af      	cmp	r7, r5
 8009edc:	9002      	str	r0, [sp, #8]
 8009ede:	f04f 0300 	mov.w	r3, #0
 8009ee2:	f04f 020a 	mov.w	r2, #10
 8009ee6:	4639      	mov	r1, r7
 8009ee8:	4648      	mov	r0, r9
 8009eea:	d107      	bne.n	8009efc <_dtoa_r+0xadc>
 8009eec:	f000 f9ca 	bl	800a284 <__multadd>
 8009ef0:	4607      	mov	r7, r0
 8009ef2:	4605      	mov	r5, r0
 8009ef4:	9b00      	ldr	r3, [sp, #0]
 8009ef6:	3301      	adds	r3, #1
 8009ef8:	9300      	str	r3, [sp, #0]
 8009efa:	e777      	b.n	8009dec <_dtoa_r+0x9cc>
 8009efc:	f000 f9c2 	bl	800a284 <__multadd>
 8009f00:	4629      	mov	r1, r5
 8009f02:	4607      	mov	r7, r0
 8009f04:	2300      	movs	r3, #0
 8009f06:	220a      	movs	r2, #10
 8009f08:	4648      	mov	r0, r9
 8009f0a:	f000 f9bb 	bl	800a284 <__multadd>
 8009f0e:	4605      	mov	r5, r0
 8009f10:	e7f0      	b.n	8009ef4 <_dtoa_r+0xad4>
 8009f12:	f1bb 0f00 	cmp.w	fp, #0
 8009f16:	bfcc      	ite	gt
 8009f18:	465e      	movgt	r6, fp
 8009f1a:	2601      	movle	r6, #1
 8009f1c:	4456      	add	r6, sl
 8009f1e:	2700      	movs	r7, #0
 8009f20:	9902      	ldr	r1, [sp, #8]
 8009f22:	9300      	str	r3, [sp, #0]
 8009f24:	2201      	movs	r2, #1
 8009f26:	4648      	mov	r0, r9
 8009f28:	f000 fb9a 	bl	800a660 <__lshift>
 8009f2c:	4621      	mov	r1, r4
 8009f2e:	9002      	str	r0, [sp, #8]
 8009f30:	f000 fc02 	bl	800a738 <__mcmp>
 8009f34:	2800      	cmp	r0, #0
 8009f36:	dcb4      	bgt.n	8009ea2 <_dtoa_r+0xa82>
 8009f38:	d102      	bne.n	8009f40 <_dtoa_r+0xb20>
 8009f3a:	9b00      	ldr	r3, [sp, #0]
 8009f3c:	07db      	lsls	r3, r3, #31
 8009f3e:	d4b0      	bmi.n	8009ea2 <_dtoa_r+0xa82>
 8009f40:	4633      	mov	r3, r6
 8009f42:	461e      	mov	r6, r3
 8009f44:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009f48:	2a30      	cmp	r2, #48	@ 0x30
 8009f4a:	d0fa      	beq.n	8009f42 <_dtoa_r+0xb22>
 8009f4c:	e4b5      	b.n	80098ba <_dtoa_r+0x49a>
 8009f4e:	459a      	cmp	sl, r3
 8009f50:	d1a8      	bne.n	8009ea4 <_dtoa_r+0xa84>
 8009f52:	2331      	movs	r3, #49	@ 0x31
 8009f54:	f108 0801 	add.w	r8, r8, #1
 8009f58:	f88a 3000 	strb.w	r3, [sl]
 8009f5c:	e4ad      	b.n	80098ba <_dtoa_r+0x49a>
 8009f5e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009f60:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8009fbc <_dtoa_r+0xb9c>
 8009f64:	b11b      	cbz	r3, 8009f6e <_dtoa_r+0xb4e>
 8009f66:	f10a 0308 	add.w	r3, sl, #8
 8009f6a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009f6c:	6013      	str	r3, [r2, #0]
 8009f6e:	4650      	mov	r0, sl
 8009f70:	b017      	add	sp, #92	@ 0x5c
 8009f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f76:	9b07      	ldr	r3, [sp, #28]
 8009f78:	2b01      	cmp	r3, #1
 8009f7a:	f77f ae2e 	ble.w	8009bda <_dtoa_r+0x7ba>
 8009f7e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009f80:	9308      	str	r3, [sp, #32]
 8009f82:	2001      	movs	r0, #1
 8009f84:	e64d      	b.n	8009c22 <_dtoa_r+0x802>
 8009f86:	f1bb 0f00 	cmp.w	fp, #0
 8009f8a:	f77f aed9 	ble.w	8009d40 <_dtoa_r+0x920>
 8009f8e:	4656      	mov	r6, sl
 8009f90:	9802      	ldr	r0, [sp, #8]
 8009f92:	4621      	mov	r1, r4
 8009f94:	f7ff f9ba 	bl	800930c <quorem>
 8009f98:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8009f9c:	f806 3b01 	strb.w	r3, [r6], #1
 8009fa0:	eba6 020a 	sub.w	r2, r6, sl
 8009fa4:	4593      	cmp	fp, r2
 8009fa6:	ddb4      	ble.n	8009f12 <_dtoa_r+0xaf2>
 8009fa8:	9902      	ldr	r1, [sp, #8]
 8009faa:	2300      	movs	r3, #0
 8009fac:	220a      	movs	r2, #10
 8009fae:	4648      	mov	r0, r9
 8009fb0:	f000 f968 	bl	800a284 <__multadd>
 8009fb4:	9002      	str	r0, [sp, #8]
 8009fb6:	e7eb      	b.n	8009f90 <_dtoa_r+0xb70>
 8009fb8:	0800d9a3 	.word	0x0800d9a3
 8009fbc:	0800d927 	.word	0x0800d927

08009fc0 <_free_r>:
 8009fc0:	b538      	push	{r3, r4, r5, lr}
 8009fc2:	4605      	mov	r5, r0
 8009fc4:	2900      	cmp	r1, #0
 8009fc6:	d041      	beq.n	800a04c <_free_r+0x8c>
 8009fc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009fcc:	1f0c      	subs	r4, r1, #4
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	bfb8      	it	lt
 8009fd2:	18e4      	addlt	r4, r4, r3
 8009fd4:	f000 f8e8 	bl	800a1a8 <__malloc_lock>
 8009fd8:	4a1d      	ldr	r2, [pc, #116]	@ (800a050 <_free_r+0x90>)
 8009fda:	6813      	ldr	r3, [r2, #0]
 8009fdc:	b933      	cbnz	r3, 8009fec <_free_r+0x2c>
 8009fde:	6063      	str	r3, [r4, #4]
 8009fe0:	6014      	str	r4, [r2, #0]
 8009fe2:	4628      	mov	r0, r5
 8009fe4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009fe8:	f000 b8e4 	b.w	800a1b4 <__malloc_unlock>
 8009fec:	42a3      	cmp	r3, r4
 8009fee:	d908      	bls.n	800a002 <_free_r+0x42>
 8009ff0:	6820      	ldr	r0, [r4, #0]
 8009ff2:	1821      	adds	r1, r4, r0
 8009ff4:	428b      	cmp	r3, r1
 8009ff6:	bf01      	itttt	eq
 8009ff8:	6819      	ldreq	r1, [r3, #0]
 8009ffa:	685b      	ldreq	r3, [r3, #4]
 8009ffc:	1809      	addeq	r1, r1, r0
 8009ffe:	6021      	streq	r1, [r4, #0]
 800a000:	e7ed      	b.n	8009fde <_free_r+0x1e>
 800a002:	461a      	mov	r2, r3
 800a004:	685b      	ldr	r3, [r3, #4]
 800a006:	b10b      	cbz	r3, 800a00c <_free_r+0x4c>
 800a008:	42a3      	cmp	r3, r4
 800a00a:	d9fa      	bls.n	800a002 <_free_r+0x42>
 800a00c:	6811      	ldr	r1, [r2, #0]
 800a00e:	1850      	adds	r0, r2, r1
 800a010:	42a0      	cmp	r0, r4
 800a012:	d10b      	bne.n	800a02c <_free_r+0x6c>
 800a014:	6820      	ldr	r0, [r4, #0]
 800a016:	4401      	add	r1, r0
 800a018:	1850      	adds	r0, r2, r1
 800a01a:	4283      	cmp	r3, r0
 800a01c:	6011      	str	r1, [r2, #0]
 800a01e:	d1e0      	bne.n	8009fe2 <_free_r+0x22>
 800a020:	6818      	ldr	r0, [r3, #0]
 800a022:	685b      	ldr	r3, [r3, #4]
 800a024:	6053      	str	r3, [r2, #4]
 800a026:	4408      	add	r0, r1
 800a028:	6010      	str	r0, [r2, #0]
 800a02a:	e7da      	b.n	8009fe2 <_free_r+0x22>
 800a02c:	d902      	bls.n	800a034 <_free_r+0x74>
 800a02e:	230c      	movs	r3, #12
 800a030:	602b      	str	r3, [r5, #0]
 800a032:	e7d6      	b.n	8009fe2 <_free_r+0x22>
 800a034:	6820      	ldr	r0, [r4, #0]
 800a036:	1821      	adds	r1, r4, r0
 800a038:	428b      	cmp	r3, r1
 800a03a:	bf04      	itt	eq
 800a03c:	6819      	ldreq	r1, [r3, #0]
 800a03e:	685b      	ldreq	r3, [r3, #4]
 800a040:	6063      	str	r3, [r4, #4]
 800a042:	bf04      	itt	eq
 800a044:	1809      	addeq	r1, r1, r0
 800a046:	6021      	streq	r1, [r4, #0]
 800a048:	6054      	str	r4, [r2, #4]
 800a04a:	e7ca      	b.n	8009fe2 <_free_r+0x22>
 800a04c:	bd38      	pop	{r3, r4, r5, pc}
 800a04e:	bf00      	nop
 800a050:	20001640 	.word	0x20001640

0800a054 <malloc>:
 800a054:	4b02      	ldr	r3, [pc, #8]	@ (800a060 <malloc+0xc>)
 800a056:	4601      	mov	r1, r0
 800a058:	6818      	ldr	r0, [r3, #0]
 800a05a:	f000 b825 	b.w	800a0a8 <_malloc_r>
 800a05e:	bf00      	nop
 800a060:	2000004c 	.word	0x2000004c

0800a064 <sbrk_aligned>:
 800a064:	b570      	push	{r4, r5, r6, lr}
 800a066:	4e0f      	ldr	r6, [pc, #60]	@ (800a0a4 <sbrk_aligned+0x40>)
 800a068:	460c      	mov	r4, r1
 800a06a:	6831      	ldr	r1, [r6, #0]
 800a06c:	4605      	mov	r5, r0
 800a06e:	b911      	cbnz	r1, 800a076 <sbrk_aligned+0x12>
 800a070:	f002 f996 	bl	800c3a0 <_sbrk_r>
 800a074:	6030      	str	r0, [r6, #0]
 800a076:	4621      	mov	r1, r4
 800a078:	4628      	mov	r0, r5
 800a07a:	f002 f991 	bl	800c3a0 <_sbrk_r>
 800a07e:	1c43      	adds	r3, r0, #1
 800a080:	d103      	bne.n	800a08a <sbrk_aligned+0x26>
 800a082:	f04f 34ff 	mov.w	r4, #4294967295
 800a086:	4620      	mov	r0, r4
 800a088:	bd70      	pop	{r4, r5, r6, pc}
 800a08a:	1cc4      	adds	r4, r0, #3
 800a08c:	f024 0403 	bic.w	r4, r4, #3
 800a090:	42a0      	cmp	r0, r4
 800a092:	d0f8      	beq.n	800a086 <sbrk_aligned+0x22>
 800a094:	1a21      	subs	r1, r4, r0
 800a096:	4628      	mov	r0, r5
 800a098:	f002 f982 	bl	800c3a0 <_sbrk_r>
 800a09c:	3001      	adds	r0, #1
 800a09e:	d1f2      	bne.n	800a086 <sbrk_aligned+0x22>
 800a0a0:	e7ef      	b.n	800a082 <sbrk_aligned+0x1e>
 800a0a2:	bf00      	nop
 800a0a4:	2000163c 	.word	0x2000163c

0800a0a8 <_malloc_r>:
 800a0a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0ac:	1ccd      	adds	r5, r1, #3
 800a0ae:	f025 0503 	bic.w	r5, r5, #3
 800a0b2:	3508      	adds	r5, #8
 800a0b4:	2d0c      	cmp	r5, #12
 800a0b6:	bf38      	it	cc
 800a0b8:	250c      	movcc	r5, #12
 800a0ba:	2d00      	cmp	r5, #0
 800a0bc:	4606      	mov	r6, r0
 800a0be:	db01      	blt.n	800a0c4 <_malloc_r+0x1c>
 800a0c0:	42a9      	cmp	r1, r5
 800a0c2:	d904      	bls.n	800a0ce <_malloc_r+0x26>
 800a0c4:	230c      	movs	r3, #12
 800a0c6:	6033      	str	r3, [r6, #0]
 800a0c8:	2000      	movs	r0, #0
 800a0ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a1a4 <_malloc_r+0xfc>
 800a0d2:	f000 f869 	bl	800a1a8 <__malloc_lock>
 800a0d6:	f8d8 3000 	ldr.w	r3, [r8]
 800a0da:	461c      	mov	r4, r3
 800a0dc:	bb44      	cbnz	r4, 800a130 <_malloc_r+0x88>
 800a0de:	4629      	mov	r1, r5
 800a0e0:	4630      	mov	r0, r6
 800a0e2:	f7ff ffbf 	bl	800a064 <sbrk_aligned>
 800a0e6:	1c43      	adds	r3, r0, #1
 800a0e8:	4604      	mov	r4, r0
 800a0ea:	d158      	bne.n	800a19e <_malloc_r+0xf6>
 800a0ec:	f8d8 4000 	ldr.w	r4, [r8]
 800a0f0:	4627      	mov	r7, r4
 800a0f2:	2f00      	cmp	r7, #0
 800a0f4:	d143      	bne.n	800a17e <_malloc_r+0xd6>
 800a0f6:	2c00      	cmp	r4, #0
 800a0f8:	d04b      	beq.n	800a192 <_malloc_r+0xea>
 800a0fa:	6823      	ldr	r3, [r4, #0]
 800a0fc:	4639      	mov	r1, r7
 800a0fe:	4630      	mov	r0, r6
 800a100:	eb04 0903 	add.w	r9, r4, r3
 800a104:	f002 f94c 	bl	800c3a0 <_sbrk_r>
 800a108:	4581      	cmp	r9, r0
 800a10a:	d142      	bne.n	800a192 <_malloc_r+0xea>
 800a10c:	6821      	ldr	r1, [r4, #0]
 800a10e:	1a6d      	subs	r5, r5, r1
 800a110:	4629      	mov	r1, r5
 800a112:	4630      	mov	r0, r6
 800a114:	f7ff ffa6 	bl	800a064 <sbrk_aligned>
 800a118:	3001      	adds	r0, #1
 800a11a:	d03a      	beq.n	800a192 <_malloc_r+0xea>
 800a11c:	6823      	ldr	r3, [r4, #0]
 800a11e:	442b      	add	r3, r5
 800a120:	6023      	str	r3, [r4, #0]
 800a122:	f8d8 3000 	ldr.w	r3, [r8]
 800a126:	685a      	ldr	r2, [r3, #4]
 800a128:	bb62      	cbnz	r2, 800a184 <_malloc_r+0xdc>
 800a12a:	f8c8 7000 	str.w	r7, [r8]
 800a12e:	e00f      	b.n	800a150 <_malloc_r+0xa8>
 800a130:	6822      	ldr	r2, [r4, #0]
 800a132:	1b52      	subs	r2, r2, r5
 800a134:	d420      	bmi.n	800a178 <_malloc_r+0xd0>
 800a136:	2a0b      	cmp	r2, #11
 800a138:	d917      	bls.n	800a16a <_malloc_r+0xc2>
 800a13a:	1961      	adds	r1, r4, r5
 800a13c:	42a3      	cmp	r3, r4
 800a13e:	6025      	str	r5, [r4, #0]
 800a140:	bf18      	it	ne
 800a142:	6059      	strne	r1, [r3, #4]
 800a144:	6863      	ldr	r3, [r4, #4]
 800a146:	bf08      	it	eq
 800a148:	f8c8 1000 	streq.w	r1, [r8]
 800a14c:	5162      	str	r2, [r4, r5]
 800a14e:	604b      	str	r3, [r1, #4]
 800a150:	4630      	mov	r0, r6
 800a152:	f000 f82f 	bl	800a1b4 <__malloc_unlock>
 800a156:	f104 000b 	add.w	r0, r4, #11
 800a15a:	1d23      	adds	r3, r4, #4
 800a15c:	f020 0007 	bic.w	r0, r0, #7
 800a160:	1ac2      	subs	r2, r0, r3
 800a162:	bf1c      	itt	ne
 800a164:	1a1b      	subne	r3, r3, r0
 800a166:	50a3      	strne	r3, [r4, r2]
 800a168:	e7af      	b.n	800a0ca <_malloc_r+0x22>
 800a16a:	6862      	ldr	r2, [r4, #4]
 800a16c:	42a3      	cmp	r3, r4
 800a16e:	bf0c      	ite	eq
 800a170:	f8c8 2000 	streq.w	r2, [r8]
 800a174:	605a      	strne	r2, [r3, #4]
 800a176:	e7eb      	b.n	800a150 <_malloc_r+0xa8>
 800a178:	4623      	mov	r3, r4
 800a17a:	6864      	ldr	r4, [r4, #4]
 800a17c:	e7ae      	b.n	800a0dc <_malloc_r+0x34>
 800a17e:	463c      	mov	r4, r7
 800a180:	687f      	ldr	r7, [r7, #4]
 800a182:	e7b6      	b.n	800a0f2 <_malloc_r+0x4a>
 800a184:	461a      	mov	r2, r3
 800a186:	685b      	ldr	r3, [r3, #4]
 800a188:	42a3      	cmp	r3, r4
 800a18a:	d1fb      	bne.n	800a184 <_malloc_r+0xdc>
 800a18c:	2300      	movs	r3, #0
 800a18e:	6053      	str	r3, [r2, #4]
 800a190:	e7de      	b.n	800a150 <_malloc_r+0xa8>
 800a192:	230c      	movs	r3, #12
 800a194:	6033      	str	r3, [r6, #0]
 800a196:	4630      	mov	r0, r6
 800a198:	f000 f80c 	bl	800a1b4 <__malloc_unlock>
 800a19c:	e794      	b.n	800a0c8 <_malloc_r+0x20>
 800a19e:	6005      	str	r5, [r0, #0]
 800a1a0:	e7d6      	b.n	800a150 <_malloc_r+0xa8>
 800a1a2:	bf00      	nop
 800a1a4:	20001640 	.word	0x20001640

0800a1a8 <__malloc_lock>:
 800a1a8:	4801      	ldr	r0, [pc, #4]	@ (800a1b0 <__malloc_lock+0x8>)
 800a1aa:	f7ff b898 	b.w	80092de <__retarget_lock_acquire_recursive>
 800a1ae:	bf00      	nop
 800a1b0:	20001638 	.word	0x20001638

0800a1b4 <__malloc_unlock>:
 800a1b4:	4801      	ldr	r0, [pc, #4]	@ (800a1bc <__malloc_unlock+0x8>)
 800a1b6:	f7ff b893 	b.w	80092e0 <__retarget_lock_release_recursive>
 800a1ba:	bf00      	nop
 800a1bc:	20001638 	.word	0x20001638

0800a1c0 <_Balloc>:
 800a1c0:	b570      	push	{r4, r5, r6, lr}
 800a1c2:	69c6      	ldr	r6, [r0, #28]
 800a1c4:	4604      	mov	r4, r0
 800a1c6:	460d      	mov	r5, r1
 800a1c8:	b976      	cbnz	r6, 800a1e8 <_Balloc+0x28>
 800a1ca:	2010      	movs	r0, #16
 800a1cc:	f7ff ff42 	bl	800a054 <malloc>
 800a1d0:	4602      	mov	r2, r0
 800a1d2:	61e0      	str	r0, [r4, #28]
 800a1d4:	b920      	cbnz	r0, 800a1e0 <_Balloc+0x20>
 800a1d6:	4b18      	ldr	r3, [pc, #96]	@ (800a238 <_Balloc+0x78>)
 800a1d8:	4818      	ldr	r0, [pc, #96]	@ (800a23c <_Balloc+0x7c>)
 800a1da:	216b      	movs	r1, #107	@ 0x6b
 800a1dc:	f002 f8f8 	bl	800c3d0 <__assert_func>
 800a1e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a1e4:	6006      	str	r6, [r0, #0]
 800a1e6:	60c6      	str	r6, [r0, #12]
 800a1e8:	69e6      	ldr	r6, [r4, #28]
 800a1ea:	68f3      	ldr	r3, [r6, #12]
 800a1ec:	b183      	cbz	r3, 800a210 <_Balloc+0x50>
 800a1ee:	69e3      	ldr	r3, [r4, #28]
 800a1f0:	68db      	ldr	r3, [r3, #12]
 800a1f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a1f6:	b9b8      	cbnz	r0, 800a228 <_Balloc+0x68>
 800a1f8:	2101      	movs	r1, #1
 800a1fa:	fa01 f605 	lsl.w	r6, r1, r5
 800a1fe:	1d72      	adds	r2, r6, #5
 800a200:	0092      	lsls	r2, r2, #2
 800a202:	4620      	mov	r0, r4
 800a204:	f002 f902 	bl	800c40c <_calloc_r>
 800a208:	b160      	cbz	r0, 800a224 <_Balloc+0x64>
 800a20a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a20e:	e00e      	b.n	800a22e <_Balloc+0x6e>
 800a210:	2221      	movs	r2, #33	@ 0x21
 800a212:	2104      	movs	r1, #4
 800a214:	4620      	mov	r0, r4
 800a216:	f002 f8f9 	bl	800c40c <_calloc_r>
 800a21a:	69e3      	ldr	r3, [r4, #28]
 800a21c:	60f0      	str	r0, [r6, #12]
 800a21e:	68db      	ldr	r3, [r3, #12]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d1e4      	bne.n	800a1ee <_Balloc+0x2e>
 800a224:	2000      	movs	r0, #0
 800a226:	bd70      	pop	{r4, r5, r6, pc}
 800a228:	6802      	ldr	r2, [r0, #0]
 800a22a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a22e:	2300      	movs	r3, #0
 800a230:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a234:	e7f7      	b.n	800a226 <_Balloc+0x66>
 800a236:	bf00      	nop
 800a238:	0800d934 	.word	0x0800d934
 800a23c:	0800d9b4 	.word	0x0800d9b4

0800a240 <_Bfree>:
 800a240:	b570      	push	{r4, r5, r6, lr}
 800a242:	69c6      	ldr	r6, [r0, #28]
 800a244:	4605      	mov	r5, r0
 800a246:	460c      	mov	r4, r1
 800a248:	b976      	cbnz	r6, 800a268 <_Bfree+0x28>
 800a24a:	2010      	movs	r0, #16
 800a24c:	f7ff ff02 	bl	800a054 <malloc>
 800a250:	4602      	mov	r2, r0
 800a252:	61e8      	str	r0, [r5, #28]
 800a254:	b920      	cbnz	r0, 800a260 <_Bfree+0x20>
 800a256:	4b09      	ldr	r3, [pc, #36]	@ (800a27c <_Bfree+0x3c>)
 800a258:	4809      	ldr	r0, [pc, #36]	@ (800a280 <_Bfree+0x40>)
 800a25a:	218f      	movs	r1, #143	@ 0x8f
 800a25c:	f002 f8b8 	bl	800c3d0 <__assert_func>
 800a260:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a264:	6006      	str	r6, [r0, #0]
 800a266:	60c6      	str	r6, [r0, #12]
 800a268:	b13c      	cbz	r4, 800a27a <_Bfree+0x3a>
 800a26a:	69eb      	ldr	r3, [r5, #28]
 800a26c:	6862      	ldr	r2, [r4, #4]
 800a26e:	68db      	ldr	r3, [r3, #12]
 800a270:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a274:	6021      	str	r1, [r4, #0]
 800a276:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a27a:	bd70      	pop	{r4, r5, r6, pc}
 800a27c:	0800d934 	.word	0x0800d934
 800a280:	0800d9b4 	.word	0x0800d9b4

0800a284 <__multadd>:
 800a284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a288:	690d      	ldr	r5, [r1, #16]
 800a28a:	4607      	mov	r7, r0
 800a28c:	460c      	mov	r4, r1
 800a28e:	461e      	mov	r6, r3
 800a290:	f101 0c14 	add.w	ip, r1, #20
 800a294:	2000      	movs	r0, #0
 800a296:	f8dc 3000 	ldr.w	r3, [ip]
 800a29a:	b299      	uxth	r1, r3
 800a29c:	fb02 6101 	mla	r1, r2, r1, r6
 800a2a0:	0c1e      	lsrs	r6, r3, #16
 800a2a2:	0c0b      	lsrs	r3, r1, #16
 800a2a4:	fb02 3306 	mla	r3, r2, r6, r3
 800a2a8:	b289      	uxth	r1, r1
 800a2aa:	3001      	adds	r0, #1
 800a2ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a2b0:	4285      	cmp	r5, r0
 800a2b2:	f84c 1b04 	str.w	r1, [ip], #4
 800a2b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a2ba:	dcec      	bgt.n	800a296 <__multadd+0x12>
 800a2bc:	b30e      	cbz	r6, 800a302 <__multadd+0x7e>
 800a2be:	68a3      	ldr	r3, [r4, #8]
 800a2c0:	42ab      	cmp	r3, r5
 800a2c2:	dc19      	bgt.n	800a2f8 <__multadd+0x74>
 800a2c4:	6861      	ldr	r1, [r4, #4]
 800a2c6:	4638      	mov	r0, r7
 800a2c8:	3101      	adds	r1, #1
 800a2ca:	f7ff ff79 	bl	800a1c0 <_Balloc>
 800a2ce:	4680      	mov	r8, r0
 800a2d0:	b928      	cbnz	r0, 800a2de <__multadd+0x5a>
 800a2d2:	4602      	mov	r2, r0
 800a2d4:	4b0c      	ldr	r3, [pc, #48]	@ (800a308 <__multadd+0x84>)
 800a2d6:	480d      	ldr	r0, [pc, #52]	@ (800a30c <__multadd+0x88>)
 800a2d8:	21ba      	movs	r1, #186	@ 0xba
 800a2da:	f002 f879 	bl	800c3d0 <__assert_func>
 800a2de:	6922      	ldr	r2, [r4, #16]
 800a2e0:	3202      	adds	r2, #2
 800a2e2:	f104 010c 	add.w	r1, r4, #12
 800a2e6:	0092      	lsls	r2, r2, #2
 800a2e8:	300c      	adds	r0, #12
 800a2ea:	f7fe fffa 	bl	80092e2 <memcpy>
 800a2ee:	4621      	mov	r1, r4
 800a2f0:	4638      	mov	r0, r7
 800a2f2:	f7ff ffa5 	bl	800a240 <_Bfree>
 800a2f6:	4644      	mov	r4, r8
 800a2f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a2fc:	3501      	adds	r5, #1
 800a2fe:	615e      	str	r6, [r3, #20]
 800a300:	6125      	str	r5, [r4, #16]
 800a302:	4620      	mov	r0, r4
 800a304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a308:	0800d9a3 	.word	0x0800d9a3
 800a30c:	0800d9b4 	.word	0x0800d9b4

0800a310 <__s2b>:
 800a310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a314:	460c      	mov	r4, r1
 800a316:	4615      	mov	r5, r2
 800a318:	461f      	mov	r7, r3
 800a31a:	2209      	movs	r2, #9
 800a31c:	3308      	adds	r3, #8
 800a31e:	4606      	mov	r6, r0
 800a320:	fb93 f3f2 	sdiv	r3, r3, r2
 800a324:	2100      	movs	r1, #0
 800a326:	2201      	movs	r2, #1
 800a328:	429a      	cmp	r2, r3
 800a32a:	db09      	blt.n	800a340 <__s2b+0x30>
 800a32c:	4630      	mov	r0, r6
 800a32e:	f7ff ff47 	bl	800a1c0 <_Balloc>
 800a332:	b940      	cbnz	r0, 800a346 <__s2b+0x36>
 800a334:	4602      	mov	r2, r0
 800a336:	4b19      	ldr	r3, [pc, #100]	@ (800a39c <__s2b+0x8c>)
 800a338:	4819      	ldr	r0, [pc, #100]	@ (800a3a0 <__s2b+0x90>)
 800a33a:	21d3      	movs	r1, #211	@ 0xd3
 800a33c:	f002 f848 	bl	800c3d0 <__assert_func>
 800a340:	0052      	lsls	r2, r2, #1
 800a342:	3101      	adds	r1, #1
 800a344:	e7f0      	b.n	800a328 <__s2b+0x18>
 800a346:	9b08      	ldr	r3, [sp, #32]
 800a348:	6143      	str	r3, [r0, #20]
 800a34a:	2d09      	cmp	r5, #9
 800a34c:	f04f 0301 	mov.w	r3, #1
 800a350:	6103      	str	r3, [r0, #16]
 800a352:	dd16      	ble.n	800a382 <__s2b+0x72>
 800a354:	f104 0909 	add.w	r9, r4, #9
 800a358:	46c8      	mov	r8, r9
 800a35a:	442c      	add	r4, r5
 800a35c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a360:	4601      	mov	r1, r0
 800a362:	3b30      	subs	r3, #48	@ 0x30
 800a364:	220a      	movs	r2, #10
 800a366:	4630      	mov	r0, r6
 800a368:	f7ff ff8c 	bl	800a284 <__multadd>
 800a36c:	45a0      	cmp	r8, r4
 800a36e:	d1f5      	bne.n	800a35c <__s2b+0x4c>
 800a370:	f1a5 0408 	sub.w	r4, r5, #8
 800a374:	444c      	add	r4, r9
 800a376:	1b2d      	subs	r5, r5, r4
 800a378:	1963      	adds	r3, r4, r5
 800a37a:	42bb      	cmp	r3, r7
 800a37c:	db04      	blt.n	800a388 <__s2b+0x78>
 800a37e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a382:	340a      	adds	r4, #10
 800a384:	2509      	movs	r5, #9
 800a386:	e7f6      	b.n	800a376 <__s2b+0x66>
 800a388:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a38c:	4601      	mov	r1, r0
 800a38e:	3b30      	subs	r3, #48	@ 0x30
 800a390:	220a      	movs	r2, #10
 800a392:	4630      	mov	r0, r6
 800a394:	f7ff ff76 	bl	800a284 <__multadd>
 800a398:	e7ee      	b.n	800a378 <__s2b+0x68>
 800a39a:	bf00      	nop
 800a39c:	0800d9a3 	.word	0x0800d9a3
 800a3a0:	0800d9b4 	.word	0x0800d9b4

0800a3a4 <__hi0bits>:
 800a3a4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	bf36      	itet	cc
 800a3ac:	0403      	lslcc	r3, r0, #16
 800a3ae:	2000      	movcs	r0, #0
 800a3b0:	2010      	movcc	r0, #16
 800a3b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a3b6:	bf3c      	itt	cc
 800a3b8:	021b      	lslcc	r3, r3, #8
 800a3ba:	3008      	addcc	r0, #8
 800a3bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a3c0:	bf3c      	itt	cc
 800a3c2:	011b      	lslcc	r3, r3, #4
 800a3c4:	3004      	addcc	r0, #4
 800a3c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a3ca:	bf3c      	itt	cc
 800a3cc:	009b      	lslcc	r3, r3, #2
 800a3ce:	3002      	addcc	r0, #2
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	db05      	blt.n	800a3e0 <__hi0bits+0x3c>
 800a3d4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a3d8:	f100 0001 	add.w	r0, r0, #1
 800a3dc:	bf08      	it	eq
 800a3de:	2020      	moveq	r0, #32
 800a3e0:	4770      	bx	lr

0800a3e2 <__lo0bits>:
 800a3e2:	6803      	ldr	r3, [r0, #0]
 800a3e4:	4602      	mov	r2, r0
 800a3e6:	f013 0007 	ands.w	r0, r3, #7
 800a3ea:	d00b      	beq.n	800a404 <__lo0bits+0x22>
 800a3ec:	07d9      	lsls	r1, r3, #31
 800a3ee:	d421      	bmi.n	800a434 <__lo0bits+0x52>
 800a3f0:	0798      	lsls	r0, r3, #30
 800a3f2:	bf49      	itett	mi
 800a3f4:	085b      	lsrmi	r3, r3, #1
 800a3f6:	089b      	lsrpl	r3, r3, #2
 800a3f8:	2001      	movmi	r0, #1
 800a3fa:	6013      	strmi	r3, [r2, #0]
 800a3fc:	bf5c      	itt	pl
 800a3fe:	6013      	strpl	r3, [r2, #0]
 800a400:	2002      	movpl	r0, #2
 800a402:	4770      	bx	lr
 800a404:	b299      	uxth	r1, r3
 800a406:	b909      	cbnz	r1, 800a40c <__lo0bits+0x2a>
 800a408:	0c1b      	lsrs	r3, r3, #16
 800a40a:	2010      	movs	r0, #16
 800a40c:	b2d9      	uxtb	r1, r3
 800a40e:	b909      	cbnz	r1, 800a414 <__lo0bits+0x32>
 800a410:	3008      	adds	r0, #8
 800a412:	0a1b      	lsrs	r3, r3, #8
 800a414:	0719      	lsls	r1, r3, #28
 800a416:	bf04      	itt	eq
 800a418:	091b      	lsreq	r3, r3, #4
 800a41a:	3004      	addeq	r0, #4
 800a41c:	0799      	lsls	r1, r3, #30
 800a41e:	bf04      	itt	eq
 800a420:	089b      	lsreq	r3, r3, #2
 800a422:	3002      	addeq	r0, #2
 800a424:	07d9      	lsls	r1, r3, #31
 800a426:	d403      	bmi.n	800a430 <__lo0bits+0x4e>
 800a428:	085b      	lsrs	r3, r3, #1
 800a42a:	f100 0001 	add.w	r0, r0, #1
 800a42e:	d003      	beq.n	800a438 <__lo0bits+0x56>
 800a430:	6013      	str	r3, [r2, #0]
 800a432:	4770      	bx	lr
 800a434:	2000      	movs	r0, #0
 800a436:	4770      	bx	lr
 800a438:	2020      	movs	r0, #32
 800a43a:	4770      	bx	lr

0800a43c <__i2b>:
 800a43c:	b510      	push	{r4, lr}
 800a43e:	460c      	mov	r4, r1
 800a440:	2101      	movs	r1, #1
 800a442:	f7ff febd 	bl	800a1c0 <_Balloc>
 800a446:	4602      	mov	r2, r0
 800a448:	b928      	cbnz	r0, 800a456 <__i2b+0x1a>
 800a44a:	4b05      	ldr	r3, [pc, #20]	@ (800a460 <__i2b+0x24>)
 800a44c:	4805      	ldr	r0, [pc, #20]	@ (800a464 <__i2b+0x28>)
 800a44e:	f240 1145 	movw	r1, #325	@ 0x145
 800a452:	f001 ffbd 	bl	800c3d0 <__assert_func>
 800a456:	2301      	movs	r3, #1
 800a458:	6144      	str	r4, [r0, #20]
 800a45a:	6103      	str	r3, [r0, #16]
 800a45c:	bd10      	pop	{r4, pc}
 800a45e:	bf00      	nop
 800a460:	0800d9a3 	.word	0x0800d9a3
 800a464:	0800d9b4 	.word	0x0800d9b4

0800a468 <__multiply>:
 800a468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a46c:	4617      	mov	r7, r2
 800a46e:	690a      	ldr	r2, [r1, #16]
 800a470:	693b      	ldr	r3, [r7, #16]
 800a472:	429a      	cmp	r2, r3
 800a474:	bfa8      	it	ge
 800a476:	463b      	movge	r3, r7
 800a478:	4689      	mov	r9, r1
 800a47a:	bfa4      	itt	ge
 800a47c:	460f      	movge	r7, r1
 800a47e:	4699      	movge	r9, r3
 800a480:	693d      	ldr	r5, [r7, #16]
 800a482:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a486:	68bb      	ldr	r3, [r7, #8]
 800a488:	6879      	ldr	r1, [r7, #4]
 800a48a:	eb05 060a 	add.w	r6, r5, sl
 800a48e:	42b3      	cmp	r3, r6
 800a490:	b085      	sub	sp, #20
 800a492:	bfb8      	it	lt
 800a494:	3101      	addlt	r1, #1
 800a496:	f7ff fe93 	bl	800a1c0 <_Balloc>
 800a49a:	b930      	cbnz	r0, 800a4aa <__multiply+0x42>
 800a49c:	4602      	mov	r2, r0
 800a49e:	4b41      	ldr	r3, [pc, #260]	@ (800a5a4 <__multiply+0x13c>)
 800a4a0:	4841      	ldr	r0, [pc, #260]	@ (800a5a8 <__multiply+0x140>)
 800a4a2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a4a6:	f001 ff93 	bl	800c3d0 <__assert_func>
 800a4aa:	f100 0414 	add.w	r4, r0, #20
 800a4ae:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a4b2:	4623      	mov	r3, r4
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	4573      	cmp	r3, lr
 800a4b8:	d320      	bcc.n	800a4fc <__multiply+0x94>
 800a4ba:	f107 0814 	add.w	r8, r7, #20
 800a4be:	f109 0114 	add.w	r1, r9, #20
 800a4c2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a4c6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a4ca:	9302      	str	r3, [sp, #8]
 800a4cc:	1beb      	subs	r3, r5, r7
 800a4ce:	3b15      	subs	r3, #21
 800a4d0:	f023 0303 	bic.w	r3, r3, #3
 800a4d4:	3304      	adds	r3, #4
 800a4d6:	3715      	adds	r7, #21
 800a4d8:	42bd      	cmp	r5, r7
 800a4da:	bf38      	it	cc
 800a4dc:	2304      	movcc	r3, #4
 800a4de:	9301      	str	r3, [sp, #4]
 800a4e0:	9b02      	ldr	r3, [sp, #8]
 800a4e2:	9103      	str	r1, [sp, #12]
 800a4e4:	428b      	cmp	r3, r1
 800a4e6:	d80c      	bhi.n	800a502 <__multiply+0x9a>
 800a4e8:	2e00      	cmp	r6, #0
 800a4ea:	dd03      	ble.n	800a4f4 <__multiply+0x8c>
 800a4ec:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d055      	beq.n	800a5a0 <__multiply+0x138>
 800a4f4:	6106      	str	r6, [r0, #16]
 800a4f6:	b005      	add	sp, #20
 800a4f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4fc:	f843 2b04 	str.w	r2, [r3], #4
 800a500:	e7d9      	b.n	800a4b6 <__multiply+0x4e>
 800a502:	f8b1 a000 	ldrh.w	sl, [r1]
 800a506:	f1ba 0f00 	cmp.w	sl, #0
 800a50a:	d01f      	beq.n	800a54c <__multiply+0xe4>
 800a50c:	46c4      	mov	ip, r8
 800a50e:	46a1      	mov	r9, r4
 800a510:	2700      	movs	r7, #0
 800a512:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a516:	f8d9 3000 	ldr.w	r3, [r9]
 800a51a:	fa1f fb82 	uxth.w	fp, r2
 800a51e:	b29b      	uxth	r3, r3
 800a520:	fb0a 330b 	mla	r3, sl, fp, r3
 800a524:	443b      	add	r3, r7
 800a526:	f8d9 7000 	ldr.w	r7, [r9]
 800a52a:	0c12      	lsrs	r2, r2, #16
 800a52c:	0c3f      	lsrs	r7, r7, #16
 800a52e:	fb0a 7202 	mla	r2, sl, r2, r7
 800a532:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a536:	b29b      	uxth	r3, r3
 800a538:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a53c:	4565      	cmp	r5, ip
 800a53e:	f849 3b04 	str.w	r3, [r9], #4
 800a542:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a546:	d8e4      	bhi.n	800a512 <__multiply+0xaa>
 800a548:	9b01      	ldr	r3, [sp, #4]
 800a54a:	50e7      	str	r7, [r4, r3]
 800a54c:	9b03      	ldr	r3, [sp, #12]
 800a54e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a552:	3104      	adds	r1, #4
 800a554:	f1b9 0f00 	cmp.w	r9, #0
 800a558:	d020      	beq.n	800a59c <__multiply+0x134>
 800a55a:	6823      	ldr	r3, [r4, #0]
 800a55c:	4647      	mov	r7, r8
 800a55e:	46a4      	mov	ip, r4
 800a560:	f04f 0a00 	mov.w	sl, #0
 800a564:	f8b7 b000 	ldrh.w	fp, [r7]
 800a568:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a56c:	fb09 220b 	mla	r2, r9, fp, r2
 800a570:	4452      	add	r2, sl
 800a572:	b29b      	uxth	r3, r3
 800a574:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a578:	f84c 3b04 	str.w	r3, [ip], #4
 800a57c:	f857 3b04 	ldr.w	r3, [r7], #4
 800a580:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a584:	f8bc 3000 	ldrh.w	r3, [ip]
 800a588:	fb09 330a 	mla	r3, r9, sl, r3
 800a58c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a590:	42bd      	cmp	r5, r7
 800a592:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a596:	d8e5      	bhi.n	800a564 <__multiply+0xfc>
 800a598:	9a01      	ldr	r2, [sp, #4]
 800a59a:	50a3      	str	r3, [r4, r2]
 800a59c:	3404      	adds	r4, #4
 800a59e:	e79f      	b.n	800a4e0 <__multiply+0x78>
 800a5a0:	3e01      	subs	r6, #1
 800a5a2:	e7a1      	b.n	800a4e8 <__multiply+0x80>
 800a5a4:	0800d9a3 	.word	0x0800d9a3
 800a5a8:	0800d9b4 	.word	0x0800d9b4

0800a5ac <__pow5mult>:
 800a5ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5b0:	4615      	mov	r5, r2
 800a5b2:	f012 0203 	ands.w	r2, r2, #3
 800a5b6:	4607      	mov	r7, r0
 800a5b8:	460e      	mov	r6, r1
 800a5ba:	d007      	beq.n	800a5cc <__pow5mult+0x20>
 800a5bc:	4c25      	ldr	r4, [pc, #148]	@ (800a654 <__pow5mult+0xa8>)
 800a5be:	3a01      	subs	r2, #1
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a5c6:	f7ff fe5d 	bl	800a284 <__multadd>
 800a5ca:	4606      	mov	r6, r0
 800a5cc:	10ad      	asrs	r5, r5, #2
 800a5ce:	d03d      	beq.n	800a64c <__pow5mult+0xa0>
 800a5d0:	69fc      	ldr	r4, [r7, #28]
 800a5d2:	b97c      	cbnz	r4, 800a5f4 <__pow5mult+0x48>
 800a5d4:	2010      	movs	r0, #16
 800a5d6:	f7ff fd3d 	bl	800a054 <malloc>
 800a5da:	4602      	mov	r2, r0
 800a5dc:	61f8      	str	r0, [r7, #28]
 800a5de:	b928      	cbnz	r0, 800a5ec <__pow5mult+0x40>
 800a5e0:	4b1d      	ldr	r3, [pc, #116]	@ (800a658 <__pow5mult+0xac>)
 800a5e2:	481e      	ldr	r0, [pc, #120]	@ (800a65c <__pow5mult+0xb0>)
 800a5e4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a5e8:	f001 fef2 	bl	800c3d0 <__assert_func>
 800a5ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a5f0:	6004      	str	r4, [r0, #0]
 800a5f2:	60c4      	str	r4, [r0, #12]
 800a5f4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a5f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a5fc:	b94c      	cbnz	r4, 800a612 <__pow5mult+0x66>
 800a5fe:	f240 2171 	movw	r1, #625	@ 0x271
 800a602:	4638      	mov	r0, r7
 800a604:	f7ff ff1a 	bl	800a43c <__i2b>
 800a608:	2300      	movs	r3, #0
 800a60a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a60e:	4604      	mov	r4, r0
 800a610:	6003      	str	r3, [r0, #0]
 800a612:	f04f 0900 	mov.w	r9, #0
 800a616:	07eb      	lsls	r3, r5, #31
 800a618:	d50a      	bpl.n	800a630 <__pow5mult+0x84>
 800a61a:	4631      	mov	r1, r6
 800a61c:	4622      	mov	r2, r4
 800a61e:	4638      	mov	r0, r7
 800a620:	f7ff ff22 	bl	800a468 <__multiply>
 800a624:	4631      	mov	r1, r6
 800a626:	4680      	mov	r8, r0
 800a628:	4638      	mov	r0, r7
 800a62a:	f7ff fe09 	bl	800a240 <_Bfree>
 800a62e:	4646      	mov	r6, r8
 800a630:	106d      	asrs	r5, r5, #1
 800a632:	d00b      	beq.n	800a64c <__pow5mult+0xa0>
 800a634:	6820      	ldr	r0, [r4, #0]
 800a636:	b938      	cbnz	r0, 800a648 <__pow5mult+0x9c>
 800a638:	4622      	mov	r2, r4
 800a63a:	4621      	mov	r1, r4
 800a63c:	4638      	mov	r0, r7
 800a63e:	f7ff ff13 	bl	800a468 <__multiply>
 800a642:	6020      	str	r0, [r4, #0]
 800a644:	f8c0 9000 	str.w	r9, [r0]
 800a648:	4604      	mov	r4, r0
 800a64a:	e7e4      	b.n	800a616 <__pow5mult+0x6a>
 800a64c:	4630      	mov	r0, r6
 800a64e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a652:	bf00      	nop
 800a654:	0800dae0 	.word	0x0800dae0
 800a658:	0800d934 	.word	0x0800d934
 800a65c:	0800d9b4 	.word	0x0800d9b4

0800a660 <__lshift>:
 800a660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a664:	460c      	mov	r4, r1
 800a666:	6849      	ldr	r1, [r1, #4]
 800a668:	6923      	ldr	r3, [r4, #16]
 800a66a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a66e:	68a3      	ldr	r3, [r4, #8]
 800a670:	4607      	mov	r7, r0
 800a672:	4691      	mov	r9, r2
 800a674:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a678:	f108 0601 	add.w	r6, r8, #1
 800a67c:	42b3      	cmp	r3, r6
 800a67e:	db0b      	blt.n	800a698 <__lshift+0x38>
 800a680:	4638      	mov	r0, r7
 800a682:	f7ff fd9d 	bl	800a1c0 <_Balloc>
 800a686:	4605      	mov	r5, r0
 800a688:	b948      	cbnz	r0, 800a69e <__lshift+0x3e>
 800a68a:	4602      	mov	r2, r0
 800a68c:	4b28      	ldr	r3, [pc, #160]	@ (800a730 <__lshift+0xd0>)
 800a68e:	4829      	ldr	r0, [pc, #164]	@ (800a734 <__lshift+0xd4>)
 800a690:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a694:	f001 fe9c 	bl	800c3d0 <__assert_func>
 800a698:	3101      	adds	r1, #1
 800a69a:	005b      	lsls	r3, r3, #1
 800a69c:	e7ee      	b.n	800a67c <__lshift+0x1c>
 800a69e:	2300      	movs	r3, #0
 800a6a0:	f100 0114 	add.w	r1, r0, #20
 800a6a4:	f100 0210 	add.w	r2, r0, #16
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	4553      	cmp	r3, sl
 800a6ac:	db33      	blt.n	800a716 <__lshift+0xb6>
 800a6ae:	6920      	ldr	r0, [r4, #16]
 800a6b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a6b4:	f104 0314 	add.w	r3, r4, #20
 800a6b8:	f019 091f 	ands.w	r9, r9, #31
 800a6bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a6c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a6c4:	d02b      	beq.n	800a71e <__lshift+0xbe>
 800a6c6:	f1c9 0e20 	rsb	lr, r9, #32
 800a6ca:	468a      	mov	sl, r1
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	6818      	ldr	r0, [r3, #0]
 800a6d0:	fa00 f009 	lsl.w	r0, r0, r9
 800a6d4:	4310      	orrs	r0, r2
 800a6d6:	f84a 0b04 	str.w	r0, [sl], #4
 800a6da:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6de:	459c      	cmp	ip, r3
 800a6e0:	fa22 f20e 	lsr.w	r2, r2, lr
 800a6e4:	d8f3      	bhi.n	800a6ce <__lshift+0x6e>
 800a6e6:	ebac 0304 	sub.w	r3, ip, r4
 800a6ea:	3b15      	subs	r3, #21
 800a6ec:	f023 0303 	bic.w	r3, r3, #3
 800a6f0:	3304      	adds	r3, #4
 800a6f2:	f104 0015 	add.w	r0, r4, #21
 800a6f6:	4560      	cmp	r0, ip
 800a6f8:	bf88      	it	hi
 800a6fa:	2304      	movhi	r3, #4
 800a6fc:	50ca      	str	r2, [r1, r3]
 800a6fe:	b10a      	cbz	r2, 800a704 <__lshift+0xa4>
 800a700:	f108 0602 	add.w	r6, r8, #2
 800a704:	3e01      	subs	r6, #1
 800a706:	4638      	mov	r0, r7
 800a708:	612e      	str	r6, [r5, #16]
 800a70a:	4621      	mov	r1, r4
 800a70c:	f7ff fd98 	bl	800a240 <_Bfree>
 800a710:	4628      	mov	r0, r5
 800a712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a716:	f842 0f04 	str.w	r0, [r2, #4]!
 800a71a:	3301      	adds	r3, #1
 800a71c:	e7c5      	b.n	800a6aa <__lshift+0x4a>
 800a71e:	3904      	subs	r1, #4
 800a720:	f853 2b04 	ldr.w	r2, [r3], #4
 800a724:	f841 2f04 	str.w	r2, [r1, #4]!
 800a728:	459c      	cmp	ip, r3
 800a72a:	d8f9      	bhi.n	800a720 <__lshift+0xc0>
 800a72c:	e7ea      	b.n	800a704 <__lshift+0xa4>
 800a72e:	bf00      	nop
 800a730:	0800d9a3 	.word	0x0800d9a3
 800a734:	0800d9b4 	.word	0x0800d9b4

0800a738 <__mcmp>:
 800a738:	690a      	ldr	r2, [r1, #16]
 800a73a:	4603      	mov	r3, r0
 800a73c:	6900      	ldr	r0, [r0, #16]
 800a73e:	1a80      	subs	r0, r0, r2
 800a740:	b530      	push	{r4, r5, lr}
 800a742:	d10e      	bne.n	800a762 <__mcmp+0x2a>
 800a744:	3314      	adds	r3, #20
 800a746:	3114      	adds	r1, #20
 800a748:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a74c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a750:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a754:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a758:	4295      	cmp	r5, r2
 800a75a:	d003      	beq.n	800a764 <__mcmp+0x2c>
 800a75c:	d205      	bcs.n	800a76a <__mcmp+0x32>
 800a75e:	f04f 30ff 	mov.w	r0, #4294967295
 800a762:	bd30      	pop	{r4, r5, pc}
 800a764:	42a3      	cmp	r3, r4
 800a766:	d3f3      	bcc.n	800a750 <__mcmp+0x18>
 800a768:	e7fb      	b.n	800a762 <__mcmp+0x2a>
 800a76a:	2001      	movs	r0, #1
 800a76c:	e7f9      	b.n	800a762 <__mcmp+0x2a>
	...

0800a770 <__mdiff>:
 800a770:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a774:	4689      	mov	r9, r1
 800a776:	4606      	mov	r6, r0
 800a778:	4611      	mov	r1, r2
 800a77a:	4648      	mov	r0, r9
 800a77c:	4614      	mov	r4, r2
 800a77e:	f7ff ffdb 	bl	800a738 <__mcmp>
 800a782:	1e05      	subs	r5, r0, #0
 800a784:	d112      	bne.n	800a7ac <__mdiff+0x3c>
 800a786:	4629      	mov	r1, r5
 800a788:	4630      	mov	r0, r6
 800a78a:	f7ff fd19 	bl	800a1c0 <_Balloc>
 800a78e:	4602      	mov	r2, r0
 800a790:	b928      	cbnz	r0, 800a79e <__mdiff+0x2e>
 800a792:	4b3f      	ldr	r3, [pc, #252]	@ (800a890 <__mdiff+0x120>)
 800a794:	f240 2137 	movw	r1, #567	@ 0x237
 800a798:	483e      	ldr	r0, [pc, #248]	@ (800a894 <__mdiff+0x124>)
 800a79a:	f001 fe19 	bl	800c3d0 <__assert_func>
 800a79e:	2301      	movs	r3, #1
 800a7a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a7a4:	4610      	mov	r0, r2
 800a7a6:	b003      	add	sp, #12
 800a7a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7ac:	bfbc      	itt	lt
 800a7ae:	464b      	movlt	r3, r9
 800a7b0:	46a1      	movlt	r9, r4
 800a7b2:	4630      	mov	r0, r6
 800a7b4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a7b8:	bfba      	itte	lt
 800a7ba:	461c      	movlt	r4, r3
 800a7bc:	2501      	movlt	r5, #1
 800a7be:	2500      	movge	r5, #0
 800a7c0:	f7ff fcfe 	bl	800a1c0 <_Balloc>
 800a7c4:	4602      	mov	r2, r0
 800a7c6:	b918      	cbnz	r0, 800a7d0 <__mdiff+0x60>
 800a7c8:	4b31      	ldr	r3, [pc, #196]	@ (800a890 <__mdiff+0x120>)
 800a7ca:	f240 2145 	movw	r1, #581	@ 0x245
 800a7ce:	e7e3      	b.n	800a798 <__mdiff+0x28>
 800a7d0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a7d4:	6926      	ldr	r6, [r4, #16]
 800a7d6:	60c5      	str	r5, [r0, #12]
 800a7d8:	f109 0310 	add.w	r3, r9, #16
 800a7dc:	f109 0514 	add.w	r5, r9, #20
 800a7e0:	f104 0e14 	add.w	lr, r4, #20
 800a7e4:	f100 0b14 	add.w	fp, r0, #20
 800a7e8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a7ec:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a7f0:	9301      	str	r3, [sp, #4]
 800a7f2:	46d9      	mov	r9, fp
 800a7f4:	f04f 0c00 	mov.w	ip, #0
 800a7f8:	9b01      	ldr	r3, [sp, #4]
 800a7fa:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a7fe:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a802:	9301      	str	r3, [sp, #4]
 800a804:	fa1f f38a 	uxth.w	r3, sl
 800a808:	4619      	mov	r1, r3
 800a80a:	b283      	uxth	r3, r0
 800a80c:	1acb      	subs	r3, r1, r3
 800a80e:	0c00      	lsrs	r0, r0, #16
 800a810:	4463      	add	r3, ip
 800a812:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a816:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a81a:	b29b      	uxth	r3, r3
 800a81c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a820:	4576      	cmp	r6, lr
 800a822:	f849 3b04 	str.w	r3, [r9], #4
 800a826:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a82a:	d8e5      	bhi.n	800a7f8 <__mdiff+0x88>
 800a82c:	1b33      	subs	r3, r6, r4
 800a82e:	3b15      	subs	r3, #21
 800a830:	f023 0303 	bic.w	r3, r3, #3
 800a834:	3415      	adds	r4, #21
 800a836:	3304      	adds	r3, #4
 800a838:	42a6      	cmp	r6, r4
 800a83a:	bf38      	it	cc
 800a83c:	2304      	movcc	r3, #4
 800a83e:	441d      	add	r5, r3
 800a840:	445b      	add	r3, fp
 800a842:	461e      	mov	r6, r3
 800a844:	462c      	mov	r4, r5
 800a846:	4544      	cmp	r4, r8
 800a848:	d30e      	bcc.n	800a868 <__mdiff+0xf8>
 800a84a:	f108 0103 	add.w	r1, r8, #3
 800a84e:	1b49      	subs	r1, r1, r5
 800a850:	f021 0103 	bic.w	r1, r1, #3
 800a854:	3d03      	subs	r5, #3
 800a856:	45a8      	cmp	r8, r5
 800a858:	bf38      	it	cc
 800a85a:	2100      	movcc	r1, #0
 800a85c:	440b      	add	r3, r1
 800a85e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a862:	b191      	cbz	r1, 800a88a <__mdiff+0x11a>
 800a864:	6117      	str	r7, [r2, #16]
 800a866:	e79d      	b.n	800a7a4 <__mdiff+0x34>
 800a868:	f854 1b04 	ldr.w	r1, [r4], #4
 800a86c:	46e6      	mov	lr, ip
 800a86e:	0c08      	lsrs	r0, r1, #16
 800a870:	fa1c fc81 	uxtah	ip, ip, r1
 800a874:	4471      	add	r1, lr
 800a876:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a87a:	b289      	uxth	r1, r1
 800a87c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a880:	f846 1b04 	str.w	r1, [r6], #4
 800a884:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a888:	e7dd      	b.n	800a846 <__mdiff+0xd6>
 800a88a:	3f01      	subs	r7, #1
 800a88c:	e7e7      	b.n	800a85e <__mdiff+0xee>
 800a88e:	bf00      	nop
 800a890:	0800d9a3 	.word	0x0800d9a3
 800a894:	0800d9b4 	.word	0x0800d9b4

0800a898 <__ulp>:
 800a898:	b082      	sub	sp, #8
 800a89a:	ed8d 0b00 	vstr	d0, [sp]
 800a89e:	9a01      	ldr	r2, [sp, #4]
 800a8a0:	4b0f      	ldr	r3, [pc, #60]	@ (800a8e0 <__ulp+0x48>)
 800a8a2:	4013      	ands	r3, r2
 800a8a4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	dc08      	bgt.n	800a8be <__ulp+0x26>
 800a8ac:	425b      	negs	r3, r3
 800a8ae:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a8b2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a8b6:	da04      	bge.n	800a8c2 <__ulp+0x2a>
 800a8b8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a8bc:	4113      	asrs	r3, r2
 800a8be:	2200      	movs	r2, #0
 800a8c0:	e008      	b.n	800a8d4 <__ulp+0x3c>
 800a8c2:	f1a2 0314 	sub.w	r3, r2, #20
 800a8c6:	2b1e      	cmp	r3, #30
 800a8c8:	bfda      	itte	le
 800a8ca:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a8ce:	40da      	lsrle	r2, r3
 800a8d0:	2201      	movgt	r2, #1
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	4619      	mov	r1, r3
 800a8d6:	4610      	mov	r0, r2
 800a8d8:	ec41 0b10 	vmov	d0, r0, r1
 800a8dc:	b002      	add	sp, #8
 800a8de:	4770      	bx	lr
 800a8e0:	7ff00000 	.word	0x7ff00000

0800a8e4 <__b2d>:
 800a8e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8e8:	6906      	ldr	r6, [r0, #16]
 800a8ea:	f100 0814 	add.w	r8, r0, #20
 800a8ee:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a8f2:	1f37      	subs	r7, r6, #4
 800a8f4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a8f8:	4610      	mov	r0, r2
 800a8fa:	f7ff fd53 	bl	800a3a4 <__hi0bits>
 800a8fe:	f1c0 0320 	rsb	r3, r0, #32
 800a902:	280a      	cmp	r0, #10
 800a904:	600b      	str	r3, [r1, #0]
 800a906:	491b      	ldr	r1, [pc, #108]	@ (800a974 <__b2d+0x90>)
 800a908:	dc15      	bgt.n	800a936 <__b2d+0x52>
 800a90a:	f1c0 0c0b 	rsb	ip, r0, #11
 800a90e:	fa22 f30c 	lsr.w	r3, r2, ip
 800a912:	45b8      	cmp	r8, r7
 800a914:	ea43 0501 	orr.w	r5, r3, r1
 800a918:	bf34      	ite	cc
 800a91a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a91e:	2300      	movcs	r3, #0
 800a920:	3015      	adds	r0, #21
 800a922:	fa02 f000 	lsl.w	r0, r2, r0
 800a926:	fa23 f30c 	lsr.w	r3, r3, ip
 800a92a:	4303      	orrs	r3, r0
 800a92c:	461c      	mov	r4, r3
 800a92e:	ec45 4b10 	vmov	d0, r4, r5
 800a932:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a936:	45b8      	cmp	r8, r7
 800a938:	bf3a      	itte	cc
 800a93a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a93e:	f1a6 0708 	subcc.w	r7, r6, #8
 800a942:	2300      	movcs	r3, #0
 800a944:	380b      	subs	r0, #11
 800a946:	d012      	beq.n	800a96e <__b2d+0x8a>
 800a948:	f1c0 0120 	rsb	r1, r0, #32
 800a94c:	fa23 f401 	lsr.w	r4, r3, r1
 800a950:	4082      	lsls	r2, r0
 800a952:	4322      	orrs	r2, r4
 800a954:	4547      	cmp	r7, r8
 800a956:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a95a:	bf8c      	ite	hi
 800a95c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a960:	2200      	movls	r2, #0
 800a962:	4083      	lsls	r3, r0
 800a964:	40ca      	lsrs	r2, r1
 800a966:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a96a:	4313      	orrs	r3, r2
 800a96c:	e7de      	b.n	800a92c <__b2d+0x48>
 800a96e:	ea42 0501 	orr.w	r5, r2, r1
 800a972:	e7db      	b.n	800a92c <__b2d+0x48>
 800a974:	3ff00000 	.word	0x3ff00000

0800a978 <__d2b>:
 800a978:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a97c:	460f      	mov	r7, r1
 800a97e:	2101      	movs	r1, #1
 800a980:	ec59 8b10 	vmov	r8, r9, d0
 800a984:	4616      	mov	r6, r2
 800a986:	f7ff fc1b 	bl	800a1c0 <_Balloc>
 800a98a:	4604      	mov	r4, r0
 800a98c:	b930      	cbnz	r0, 800a99c <__d2b+0x24>
 800a98e:	4602      	mov	r2, r0
 800a990:	4b23      	ldr	r3, [pc, #140]	@ (800aa20 <__d2b+0xa8>)
 800a992:	4824      	ldr	r0, [pc, #144]	@ (800aa24 <__d2b+0xac>)
 800a994:	f240 310f 	movw	r1, #783	@ 0x30f
 800a998:	f001 fd1a 	bl	800c3d0 <__assert_func>
 800a99c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a9a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a9a4:	b10d      	cbz	r5, 800a9aa <__d2b+0x32>
 800a9a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a9aa:	9301      	str	r3, [sp, #4]
 800a9ac:	f1b8 0300 	subs.w	r3, r8, #0
 800a9b0:	d023      	beq.n	800a9fa <__d2b+0x82>
 800a9b2:	4668      	mov	r0, sp
 800a9b4:	9300      	str	r3, [sp, #0]
 800a9b6:	f7ff fd14 	bl	800a3e2 <__lo0bits>
 800a9ba:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a9be:	b1d0      	cbz	r0, 800a9f6 <__d2b+0x7e>
 800a9c0:	f1c0 0320 	rsb	r3, r0, #32
 800a9c4:	fa02 f303 	lsl.w	r3, r2, r3
 800a9c8:	430b      	orrs	r3, r1
 800a9ca:	40c2      	lsrs	r2, r0
 800a9cc:	6163      	str	r3, [r4, #20]
 800a9ce:	9201      	str	r2, [sp, #4]
 800a9d0:	9b01      	ldr	r3, [sp, #4]
 800a9d2:	61a3      	str	r3, [r4, #24]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	bf0c      	ite	eq
 800a9d8:	2201      	moveq	r2, #1
 800a9da:	2202      	movne	r2, #2
 800a9dc:	6122      	str	r2, [r4, #16]
 800a9de:	b1a5      	cbz	r5, 800aa0a <__d2b+0x92>
 800a9e0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a9e4:	4405      	add	r5, r0
 800a9e6:	603d      	str	r5, [r7, #0]
 800a9e8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a9ec:	6030      	str	r0, [r6, #0]
 800a9ee:	4620      	mov	r0, r4
 800a9f0:	b003      	add	sp, #12
 800a9f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a9f6:	6161      	str	r1, [r4, #20]
 800a9f8:	e7ea      	b.n	800a9d0 <__d2b+0x58>
 800a9fa:	a801      	add	r0, sp, #4
 800a9fc:	f7ff fcf1 	bl	800a3e2 <__lo0bits>
 800aa00:	9b01      	ldr	r3, [sp, #4]
 800aa02:	6163      	str	r3, [r4, #20]
 800aa04:	3020      	adds	r0, #32
 800aa06:	2201      	movs	r2, #1
 800aa08:	e7e8      	b.n	800a9dc <__d2b+0x64>
 800aa0a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800aa0e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800aa12:	6038      	str	r0, [r7, #0]
 800aa14:	6918      	ldr	r0, [r3, #16]
 800aa16:	f7ff fcc5 	bl	800a3a4 <__hi0bits>
 800aa1a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800aa1e:	e7e5      	b.n	800a9ec <__d2b+0x74>
 800aa20:	0800d9a3 	.word	0x0800d9a3
 800aa24:	0800d9b4 	.word	0x0800d9b4

0800aa28 <__ratio>:
 800aa28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa2c:	b085      	sub	sp, #20
 800aa2e:	e9cd 1000 	strd	r1, r0, [sp]
 800aa32:	a902      	add	r1, sp, #8
 800aa34:	f7ff ff56 	bl	800a8e4 <__b2d>
 800aa38:	9800      	ldr	r0, [sp, #0]
 800aa3a:	a903      	add	r1, sp, #12
 800aa3c:	ec55 4b10 	vmov	r4, r5, d0
 800aa40:	f7ff ff50 	bl	800a8e4 <__b2d>
 800aa44:	9b01      	ldr	r3, [sp, #4]
 800aa46:	6919      	ldr	r1, [r3, #16]
 800aa48:	9b00      	ldr	r3, [sp, #0]
 800aa4a:	691b      	ldr	r3, [r3, #16]
 800aa4c:	1ac9      	subs	r1, r1, r3
 800aa4e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800aa52:	1a9b      	subs	r3, r3, r2
 800aa54:	ec5b ab10 	vmov	sl, fp, d0
 800aa58:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	bfce      	itee	gt
 800aa60:	462a      	movgt	r2, r5
 800aa62:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800aa66:	465a      	movle	r2, fp
 800aa68:	462f      	mov	r7, r5
 800aa6a:	46d9      	mov	r9, fp
 800aa6c:	bfcc      	ite	gt
 800aa6e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800aa72:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800aa76:	464b      	mov	r3, r9
 800aa78:	4652      	mov	r2, sl
 800aa7a:	4620      	mov	r0, r4
 800aa7c:	4639      	mov	r1, r7
 800aa7e:	f7f5 fee5 	bl	800084c <__aeabi_ddiv>
 800aa82:	ec41 0b10 	vmov	d0, r0, r1
 800aa86:	b005      	add	sp, #20
 800aa88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aa8c <__copybits>:
 800aa8c:	3901      	subs	r1, #1
 800aa8e:	b570      	push	{r4, r5, r6, lr}
 800aa90:	1149      	asrs	r1, r1, #5
 800aa92:	6914      	ldr	r4, [r2, #16]
 800aa94:	3101      	adds	r1, #1
 800aa96:	f102 0314 	add.w	r3, r2, #20
 800aa9a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800aa9e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800aaa2:	1f05      	subs	r5, r0, #4
 800aaa4:	42a3      	cmp	r3, r4
 800aaa6:	d30c      	bcc.n	800aac2 <__copybits+0x36>
 800aaa8:	1aa3      	subs	r3, r4, r2
 800aaaa:	3b11      	subs	r3, #17
 800aaac:	f023 0303 	bic.w	r3, r3, #3
 800aab0:	3211      	adds	r2, #17
 800aab2:	42a2      	cmp	r2, r4
 800aab4:	bf88      	it	hi
 800aab6:	2300      	movhi	r3, #0
 800aab8:	4418      	add	r0, r3
 800aaba:	2300      	movs	r3, #0
 800aabc:	4288      	cmp	r0, r1
 800aabe:	d305      	bcc.n	800aacc <__copybits+0x40>
 800aac0:	bd70      	pop	{r4, r5, r6, pc}
 800aac2:	f853 6b04 	ldr.w	r6, [r3], #4
 800aac6:	f845 6f04 	str.w	r6, [r5, #4]!
 800aaca:	e7eb      	b.n	800aaa4 <__copybits+0x18>
 800aacc:	f840 3b04 	str.w	r3, [r0], #4
 800aad0:	e7f4      	b.n	800aabc <__copybits+0x30>

0800aad2 <__any_on>:
 800aad2:	f100 0214 	add.w	r2, r0, #20
 800aad6:	6900      	ldr	r0, [r0, #16]
 800aad8:	114b      	asrs	r3, r1, #5
 800aada:	4298      	cmp	r0, r3
 800aadc:	b510      	push	{r4, lr}
 800aade:	db11      	blt.n	800ab04 <__any_on+0x32>
 800aae0:	dd0a      	ble.n	800aaf8 <__any_on+0x26>
 800aae2:	f011 011f 	ands.w	r1, r1, #31
 800aae6:	d007      	beq.n	800aaf8 <__any_on+0x26>
 800aae8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800aaec:	fa24 f001 	lsr.w	r0, r4, r1
 800aaf0:	fa00 f101 	lsl.w	r1, r0, r1
 800aaf4:	428c      	cmp	r4, r1
 800aaf6:	d10b      	bne.n	800ab10 <__any_on+0x3e>
 800aaf8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800aafc:	4293      	cmp	r3, r2
 800aafe:	d803      	bhi.n	800ab08 <__any_on+0x36>
 800ab00:	2000      	movs	r0, #0
 800ab02:	bd10      	pop	{r4, pc}
 800ab04:	4603      	mov	r3, r0
 800ab06:	e7f7      	b.n	800aaf8 <__any_on+0x26>
 800ab08:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ab0c:	2900      	cmp	r1, #0
 800ab0e:	d0f5      	beq.n	800aafc <__any_on+0x2a>
 800ab10:	2001      	movs	r0, #1
 800ab12:	e7f6      	b.n	800ab02 <__any_on+0x30>

0800ab14 <sulp>:
 800ab14:	b570      	push	{r4, r5, r6, lr}
 800ab16:	4604      	mov	r4, r0
 800ab18:	460d      	mov	r5, r1
 800ab1a:	ec45 4b10 	vmov	d0, r4, r5
 800ab1e:	4616      	mov	r6, r2
 800ab20:	f7ff feba 	bl	800a898 <__ulp>
 800ab24:	ec51 0b10 	vmov	r0, r1, d0
 800ab28:	b17e      	cbz	r6, 800ab4a <sulp+0x36>
 800ab2a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ab2e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	dd09      	ble.n	800ab4a <sulp+0x36>
 800ab36:	051b      	lsls	r3, r3, #20
 800ab38:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800ab3c:	2400      	movs	r4, #0
 800ab3e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800ab42:	4622      	mov	r2, r4
 800ab44:	462b      	mov	r3, r5
 800ab46:	f7f5 fd57 	bl	80005f8 <__aeabi_dmul>
 800ab4a:	ec41 0b10 	vmov	d0, r0, r1
 800ab4e:	bd70      	pop	{r4, r5, r6, pc}

0800ab50 <_strtod_l>:
 800ab50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab54:	b09f      	sub	sp, #124	@ 0x7c
 800ab56:	460c      	mov	r4, r1
 800ab58:	9217      	str	r2, [sp, #92]	@ 0x5c
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	921a      	str	r2, [sp, #104]	@ 0x68
 800ab5e:	9005      	str	r0, [sp, #20]
 800ab60:	f04f 0a00 	mov.w	sl, #0
 800ab64:	f04f 0b00 	mov.w	fp, #0
 800ab68:	460a      	mov	r2, r1
 800ab6a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ab6c:	7811      	ldrb	r1, [r2, #0]
 800ab6e:	292b      	cmp	r1, #43	@ 0x2b
 800ab70:	d04a      	beq.n	800ac08 <_strtod_l+0xb8>
 800ab72:	d838      	bhi.n	800abe6 <_strtod_l+0x96>
 800ab74:	290d      	cmp	r1, #13
 800ab76:	d832      	bhi.n	800abde <_strtod_l+0x8e>
 800ab78:	2908      	cmp	r1, #8
 800ab7a:	d832      	bhi.n	800abe2 <_strtod_l+0x92>
 800ab7c:	2900      	cmp	r1, #0
 800ab7e:	d03b      	beq.n	800abf8 <_strtod_l+0xa8>
 800ab80:	2200      	movs	r2, #0
 800ab82:	920e      	str	r2, [sp, #56]	@ 0x38
 800ab84:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800ab86:	782a      	ldrb	r2, [r5, #0]
 800ab88:	2a30      	cmp	r2, #48	@ 0x30
 800ab8a:	f040 80b2 	bne.w	800acf2 <_strtod_l+0x1a2>
 800ab8e:	786a      	ldrb	r2, [r5, #1]
 800ab90:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ab94:	2a58      	cmp	r2, #88	@ 0x58
 800ab96:	d16e      	bne.n	800ac76 <_strtod_l+0x126>
 800ab98:	9302      	str	r3, [sp, #8]
 800ab9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab9c:	9301      	str	r3, [sp, #4]
 800ab9e:	ab1a      	add	r3, sp, #104	@ 0x68
 800aba0:	9300      	str	r3, [sp, #0]
 800aba2:	4a8f      	ldr	r2, [pc, #572]	@ (800ade0 <_strtod_l+0x290>)
 800aba4:	9805      	ldr	r0, [sp, #20]
 800aba6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800aba8:	a919      	add	r1, sp, #100	@ 0x64
 800abaa:	f001 fcab 	bl	800c504 <__gethex>
 800abae:	f010 060f 	ands.w	r6, r0, #15
 800abb2:	4604      	mov	r4, r0
 800abb4:	d005      	beq.n	800abc2 <_strtod_l+0x72>
 800abb6:	2e06      	cmp	r6, #6
 800abb8:	d128      	bne.n	800ac0c <_strtod_l+0xbc>
 800abba:	3501      	adds	r5, #1
 800abbc:	2300      	movs	r3, #0
 800abbe:	9519      	str	r5, [sp, #100]	@ 0x64
 800abc0:	930e      	str	r3, [sp, #56]	@ 0x38
 800abc2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	f040 858e 	bne.w	800b6e6 <_strtod_l+0xb96>
 800abca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800abcc:	b1cb      	cbz	r3, 800ac02 <_strtod_l+0xb2>
 800abce:	4652      	mov	r2, sl
 800abd0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800abd4:	ec43 2b10 	vmov	d0, r2, r3
 800abd8:	b01f      	add	sp, #124	@ 0x7c
 800abda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abde:	2920      	cmp	r1, #32
 800abe0:	d1ce      	bne.n	800ab80 <_strtod_l+0x30>
 800abe2:	3201      	adds	r2, #1
 800abe4:	e7c1      	b.n	800ab6a <_strtod_l+0x1a>
 800abe6:	292d      	cmp	r1, #45	@ 0x2d
 800abe8:	d1ca      	bne.n	800ab80 <_strtod_l+0x30>
 800abea:	2101      	movs	r1, #1
 800abec:	910e      	str	r1, [sp, #56]	@ 0x38
 800abee:	1c51      	adds	r1, r2, #1
 800abf0:	9119      	str	r1, [sp, #100]	@ 0x64
 800abf2:	7852      	ldrb	r2, [r2, #1]
 800abf4:	2a00      	cmp	r2, #0
 800abf6:	d1c5      	bne.n	800ab84 <_strtod_l+0x34>
 800abf8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800abfa:	9419      	str	r4, [sp, #100]	@ 0x64
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	f040 8570 	bne.w	800b6e2 <_strtod_l+0xb92>
 800ac02:	4652      	mov	r2, sl
 800ac04:	465b      	mov	r3, fp
 800ac06:	e7e5      	b.n	800abd4 <_strtod_l+0x84>
 800ac08:	2100      	movs	r1, #0
 800ac0a:	e7ef      	b.n	800abec <_strtod_l+0x9c>
 800ac0c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ac0e:	b13a      	cbz	r2, 800ac20 <_strtod_l+0xd0>
 800ac10:	2135      	movs	r1, #53	@ 0x35
 800ac12:	a81c      	add	r0, sp, #112	@ 0x70
 800ac14:	f7ff ff3a 	bl	800aa8c <__copybits>
 800ac18:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ac1a:	9805      	ldr	r0, [sp, #20]
 800ac1c:	f7ff fb10 	bl	800a240 <_Bfree>
 800ac20:	3e01      	subs	r6, #1
 800ac22:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800ac24:	2e04      	cmp	r6, #4
 800ac26:	d806      	bhi.n	800ac36 <_strtod_l+0xe6>
 800ac28:	e8df f006 	tbb	[pc, r6]
 800ac2c:	201d0314 	.word	0x201d0314
 800ac30:	14          	.byte	0x14
 800ac31:	00          	.byte	0x00
 800ac32:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800ac36:	05e1      	lsls	r1, r4, #23
 800ac38:	bf48      	it	mi
 800ac3a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800ac3e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ac42:	0d1b      	lsrs	r3, r3, #20
 800ac44:	051b      	lsls	r3, r3, #20
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d1bb      	bne.n	800abc2 <_strtod_l+0x72>
 800ac4a:	f7fe fb1d 	bl	8009288 <__errno>
 800ac4e:	2322      	movs	r3, #34	@ 0x22
 800ac50:	6003      	str	r3, [r0, #0]
 800ac52:	e7b6      	b.n	800abc2 <_strtod_l+0x72>
 800ac54:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800ac58:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ac5c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ac60:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ac64:	e7e7      	b.n	800ac36 <_strtod_l+0xe6>
 800ac66:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800ade8 <_strtod_l+0x298>
 800ac6a:	e7e4      	b.n	800ac36 <_strtod_l+0xe6>
 800ac6c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800ac70:	f04f 3aff 	mov.w	sl, #4294967295
 800ac74:	e7df      	b.n	800ac36 <_strtod_l+0xe6>
 800ac76:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ac78:	1c5a      	adds	r2, r3, #1
 800ac7a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ac7c:	785b      	ldrb	r3, [r3, #1]
 800ac7e:	2b30      	cmp	r3, #48	@ 0x30
 800ac80:	d0f9      	beq.n	800ac76 <_strtod_l+0x126>
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d09d      	beq.n	800abc2 <_strtod_l+0x72>
 800ac86:	2301      	movs	r3, #1
 800ac88:	2700      	movs	r7, #0
 800ac8a:	9308      	str	r3, [sp, #32]
 800ac8c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ac8e:	930c      	str	r3, [sp, #48]	@ 0x30
 800ac90:	970b      	str	r7, [sp, #44]	@ 0x2c
 800ac92:	46b9      	mov	r9, r7
 800ac94:	220a      	movs	r2, #10
 800ac96:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800ac98:	7805      	ldrb	r5, [r0, #0]
 800ac9a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800ac9e:	b2d9      	uxtb	r1, r3
 800aca0:	2909      	cmp	r1, #9
 800aca2:	d928      	bls.n	800acf6 <_strtod_l+0x1a6>
 800aca4:	494f      	ldr	r1, [pc, #316]	@ (800ade4 <_strtod_l+0x294>)
 800aca6:	2201      	movs	r2, #1
 800aca8:	f001 fb67 	bl	800c37a <strncmp>
 800acac:	2800      	cmp	r0, #0
 800acae:	d032      	beq.n	800ad16 <_strtod_l+0x1c6>
 800acb0:	2000      	movs	r0, #0
 800acb2:	462a      	mov	r2, r5
 800acb4:	900a      	str	r0, [sp, #40]	@ 0x28
 800acb6:	464d      	mov	r5, r9
 800acb8:	4603      	mov	r3, r0
 800acba:	2a65      	cmp	r2, #101	@ 0x65
 800acbc:	d001      	beq.n	800acc2 <_strtod_l+0x172>
 800acbe:	2a45      	cmp	r2, #69	@ 0x45
 800acc0:	d114      	bne.n	800acec <_strtod_l+0x19c>
 800acc2:	b91d      	cbnz	r5, 800accc <_strtod_l+0x17c>
 800acc4:	9a08      	ldr	r2, [sp, #32]
 800acc6:	4302      	orrs	r2, r0
 800acc8:	d096      	beq.n	800abf8 <_strtod_l+0xa8>
 800acca:	2500      	movs	r5, #0
 800accc:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800acce:	1c62      	adds	r2, r4, #1
 800acd0:	9219      	str	r2, [sp, #100]	@ 0x64
 800acd2:	7862      	ldrb	r2, [r4, #1]
 800acd4:	2a2b      	cmp	r2, #43	@ 0x2b
 800acd6:	d07a      	beq.n	800adce <_strtod_l+0x27e>
 800acd8:	2a2d      	cmp	r2, #45	@ 0x2d
 800acda:	d07e      	beq.n	800adda <_strtod_l+0x28a>
 800acdc:	f04f 0c00 	mov.w	ip, #0
 800ace0:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800ace4:	2909      	cmp	r1, #9
 800ace6:	f240 8085 	bls.w	800adf4 <_strtod_l+0x2a4>
 800acea:	9419      	str	r4, [sp, #100]	@ 0x64
 800acec:	f04f 0800 	mov.w	r8, #0
 800acf0:	e0a5      	b.n	800ae3e <_strtod_l+0x2ee>
 800acf2:	2300      	movs	r3, #0
 800acf4:	e7c8      	b.n	800ac88 <_strtod_l+0x138>
 800acf6:	f1b9 0f08 	cmp.w	r9, #8
 800acfa:	bfd8      	it	le
 800acfc:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800acfe:	f100 0001 	add.w	r0, r0, #1
 800ad02:	bfda      	itte	le
 800ad04:	fb02 3301 	mlale	r3, r2, r1, r3
 800ad08:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800ad0a:	fb02 3707 	mlagt	r7, r2, r7, r3
 800ad0e:	f109 0901 	add.w	r9, r9, #1
 800ad12:	9019      	str	r0, [sp, #100]	@ 0x64
 800ad14:	e7bf      	b.n	800ac96 <_strtod_l+0x146>
 800ad16:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ad18:	1c5a      	adds	r2, r3, #1
 800ad1a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ad1c:	785a      	ldrb	r2, [r3, #1]
 800ad1e:	f1b9 0f00 	cmp.w	r9, #0
 800ad22:	d03b      	beq.n	800ad9c <_strtod_l+0x24c>
 800ad24:	900a      	str	r0, [sp, #40]	@ 0x28
 800ad26:	464d      	mov	r5, r9
 800ad28:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800ad2c:	2b09      	cmp	r3, #9
 800ad2e:	d912      	bls.n	800ad56 <_strtod_l+0x206>
 800ad30:	2301      	movs	r3, #1
 800ad32:	e7c2      	b.n	800acba <_strtod_l+0x16a>
 800ad34:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ad36:	1c5a      	adds	r2, r3, #1
 800ad38:	9219      	str	r2, [sp, #100]	@ 0x64
 800ad3a:	785a      	ldrb	r2, [r3, #1]
 800ad3c:	3001      	adds	r0, #1
 800ad3e:	2a30      	cmp	r2, #48	@ 0x30
 800ad40:	d0f8      	beq.n	800ad34 <_strtod_l+0x1e4>
 800ad42:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ad46:	2b08      	cmp	r3, #8
 800ad48:	f200 84d2 	bhi.w	800b6f0 <_strtod_l+0xba0>
 800ad4c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ad4e:	900a      	str	r0, [sp, #40]	@ 0x28
 800ad50:	2000      	movs	r0, #0
 800ad52:	930c      	str	r3, [sp, #48]	@ 0x30
 800ad54:	4605      	mov	r5, r0
 800ad56:	3a30      	subs	r2, #48	@ 0x30
 800ad58:	f100 0301 	add.w	r3, r0, #1
 800ad5c:	d018      	beq.n	800ad90 <_strtod_l+0x240>
 800ad5e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ad60:	4419      	add	r1, r3
 800ad62:	910a      	str	r1, [sp, #40]	@ 0x28
 800ad64:	462e      	mov	r6, r5
 800ad66:	f04f 0e0a 	mov.w	lr, #10
 800ad6a:	1c71      	adds	r1, r6, #1
 800ad6c:	eba1 0c05 	sub.w	ip, r1, r5
 800ad70:	4563      	cmp	r3, ip
 800ad72:	dc15      	bgt.n	800ada0 <_strtod_l+0x250>
 800ad74:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800ad78:	182b      	adds	r3, r5, r0
 800ad7a:	2b08      	cmp	r3, #8
 800ad7c:	f105 0501 	add.w	r5, r5, #1
 800ad80:	4405      	add	r5, r0
 800ad82:	dc1a      	bgt.n	800adba <_strtod_l+0x26a>
 800ad84:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ad86:	230a      	movs	r3, #10
 800ad88:	fb03 2301 	mla	r3, r3, r1, r2
 800ad8c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ad8e:	2300      	movs	r3, #0
 800ad90:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ad92:	1c51      	adds	r1, r2, #1
 800ad94:	9119      	str	r1, [sp, #100]	@ 0x64
 800ad96:	7852      	ldrb	r2, [r2, #1]
 800ad98:	4618      	mov	r0, r3
 800ad9a:	e7c5      	b.n	800ad28 <_strtod_l+0x1d8>
 800ad9c:	4648      	mov	r0, r9
 800ad9e:	e7ce      	b.n	800ad3e <_strtod_l+0x1ee>
 800ada0:	2e08      	cmp	r6, #8
 800ada2:	dc05      	bgt.n	800adb0 <_strtod_l+0x260>
 800ada4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800ada6:	fb0e f606 	mul.w	r6, lr, r6
 800adaa:	960b      	str	r6, [sp, #44]	@ 0x2c
 800adac:	460e      	mov	r6, r1
 800adae:	e7dc      	b.n	800ad6a <_strtod_l+0x21a>
 800adb0:	2910      	cmp	r1, #16
 800adb2:	bfd8      	it	le
 800adb4:	fb0e f707 	mulle.w	r7, lr, r7
 800adb8:	e7f8      	b.n	800adac <_strtod_l+0x25c>
 800adba:	2b0f      	cmp	r3, #15
 800adbc:	bfdc      	itt	le
 800adbe:	230a      	movle	r3, #10
 800adc0:	fb03 2707 	mlale	r7, r3, r7, r2
 800adc4:	e7e3      	b.n	800ad8e <_strtod_l+0x23e>
 800adc6:	2300      	movs	r3, #0
 800adc8:	930a      	str	r3, [sp, #40]	@ 0x28
 800adca:	2301      	movs	r3, #1
 800adcc:	e77a      	b.n	800acc4 <_strtod_l+0x174>
 800adce:	f04f 0c00 	mov.w	ip, #0
 800add2:	1ca2      	adds	r2, r4, #2
 800add4:	9219      	str	r2, [sp, #100]	@ 0x64
 800add6:	78a2      	ldrb	r2, [r4, #2]
 800add8:	e782      	b.n	800ace0 <_strtod_l+0x190>
 800adda:	f04f 0c01 	mov.w	ip, #1
 800adde:	e7f8      	b.n	800add2 <_strtod_l+0x282>
 800ade0:	0800dbf4 	.word	0x0800dbf4
 800ade4:	0800da0d 	.word	0x0800da0d
 800ade8:	7ff00000 	.word	0x7ff00000
 800adec:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800adee:	1c51      	adds	r1, r2, #1
 800adf0:	9119      	str	r1, [sp, #100]	@ 0x64
 800adf2:	7852      	ldrb	r2, [r2, #1]
 800adf4:	2a30      	cmp	r2, #48	@ 0x30
 800adf6:	d0f9      	beq.n	800adec <_strtod_l+0x29c>
 800adf8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800adfc:	2908      	cmp	r1, #8
 800adfe:	f63f af75 	bhi.w	800acec <_strtod_l+0x19c>
 800ae02:	3a30      	subs	r2, #48	@ 0x30
 800ae04:	9209      	str	r2, [sp, #36]	@ 0x24
 800ae06:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ae08:	920f      	str	r2, [sp, #60]	@ 0x3c
 800ae0a:	f04f 080a 	mov.w	r8, #10
 800ae0e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ae10:	1c56      	adds	r6, r2, #1
 800ae12:	9619      	str	r6, [sp, #100]	@ 0x64
 800ae14:	7852      	ldrb	r2, [r2, #1]
 800ae16:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800ae1a:	f1be 0f09 	cmp.w	lr, #9
 800ae1e:	d939      	bls.n	800ae94 <_strtod_l+0x344>
 800ae20:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ae22:	1a76      	subs	r6, r6, r1
 800ae24:	2e08      	cmp	r6, #8
 800ae26:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800ae2a:	dc03      	bgt.n	800ae34 <_strtod_l+0x2e4>
 800ae2c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ae2e:	4588      	cmp	r8, r1
 800ae30:	bfa8      	it	ge
 800ae32:	4688      	movge	r8, r1
 800ae34:	f1bc 0f00 	cmp.w	ip, #0
 800ae38:	d001      	beq.n	800ae3e <_strtod_l+0x2ee>
 800ae3a:	f1c8 0800 	rsb	r8, r8, #0
 800ae3e:	2d00      	cmp	r5, #0
 800ae40:	d14e      	bne.n	800aee0 <_strtod_l+0x390>
 800ae42:	9908      	ldr	r1, [sp, #32]
 800ae44:	4308      	orrs	r0, r1
 800ae46:	f47f aebc 	bne.w	800abc2 <_strtod_l+0x72>
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	f47f aed4 	bne.w	800abf8 <_strtod_l+0xa8>
 800ae50:	2a69      	cmp	r2, #105	@ 0x69
 800ae52:	d028      	beq.n	800aea6 <_strtod_l+0x356>
 800ae54:	dc25      	bgt.n	800aea2 <_strtod_l+0x352>
 800ae56:	2a49      	cmp	r2, #73	@ 0x49
 800ae58:	d025      	beq.n	800aea6 <_strtod_l+0x356>
 800ae5a:	2a4e      	cmp	r2, #78	@ 0x4e
 800ae5c:	f47f aecc 	bne.w	800abf8 <_strtod_l+0xa8>
 800ae60:	499a      	ldr	r1, [pc, #616]	@ (800b0cc <_strtod_l+0x57c>)
 800ae62:	a819      	add	r0, sp, #100	@ 0x64
 800ae64:	f001 fd70 	bl	800c948 <__match>
 800ae68:	2800      	cmp	r0, #0
 800ae6a:	f43f aec5 	beq.w	800abf8 <_strtod_l+0xa8>
 800ae6e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ae70:	781b      	ldrb	r3, [r3, #0]
 800ae72:	2b28      	cmp	r3, #40	@ 0x28
 800ae74:	d12e      	bne.n	800aed4 <_strtod_l+0x384>
 800ae76:	4996      	ldr	r1, [pc, #600]	@ (800b0d0 <_strtod_l+0x580>)
 800ae78:	aa1c      	add	r2, sp, #112	@ 0x70
 800ae7a:	a819      	add	r0, sp, #100	@ 0x64
 800ae7c:	f001 fd78 	bl	800c970 <__hexnan>
 800ae80:	2805      	cmp	r0, #5
 800ae82:	d127      	bne.n	800aed4 <_strtod_l+0x384>
 800ae84:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ae86:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800ae8a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ae8e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800ae92:	e696      	b.n	800abc2 <_strtod_l+0x72>
 800ae94:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ae96:	fb08 2101 	mla	r1, r8, r1, r2
 800ae9a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800ae9e:	9209      	str	r2, [sp, #36]	@ 0x24
 800aea0:	e7b5      	b.n	800ae0e <_strtod_l+0x2be>
 800aea2:	2a6e      	cmp	r2, #110	@ 0x6e
 800aea4:	e7da      	b.n	800ae5c <_strtod_l+0x30c>
 800aea6:	498b      	ldr	r1, [pc, #556]	@ (800b0d4 <_strtod_l+0x584>)
 800aea8:	a819      	add	r0, sp, #100	@ 0x64
 800aeaa:	f001 fd4d 	bl	800c948 <__match>
 800aeae:	2800      	cmp	r0, #0
 800aeb0:	f43f aea2 	beq.w	800abf8 <_strtod_l+0xa8>
 800aeb4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aeb6:	4988      	ldr	r1, [pc, #544]	@ (800b0d8 <_strtod_l+0x588>)
 800aeb8:	3b01      	subs	r3, #1
 800aeba:	a819      	add	r0, sp, #100	@ 0x64
 800aebc:	9319      	str	r3, [sp, #100]	@ 0x64
 800aebe:	f001 fd43 	bl	800c948 <__match>
 800aec2:	b910      	cbnz	r0, 800aeca <_strtod_l+0x37a>
 800aec4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aec6:	3301      	adds	r3, #1
 800aec8:	9319      	str	r3, [sp, #100]	@ 0x64
 800aeca:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800b0e8 <_strtod_l+0x598>
 800aece:	f04f 0a00 	mov.w	sl, #0
 800aed2:	e676      	b.n	800abc2 <_strtod_l+0x72>
 800aed4:	4881      	ldr	r0, [pc, #516]	@ (800b0dc <_strtod_l+0x58c>)
 800aed6:	f001 fa73 	bl	800c3c0 <nan>
 800aeda:	ec5b ab10 	vmov	sl, fp, d0
 800aede:	e670      	b.n	800abc2 <_strtod_l+0x72>
 800aee0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aee2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800aee4:	eba8 0303 	sub.w	r3, r8, r3
 800aee8:	f1b9 0f00 	cmp.w	r9, #0
 800aeec:	bf08      	it	eq
 800aeee:	46a9      	moveq	r9, r5
 800aef0:	2d10      	cmp	r5, #16
 800aef2:	9309      	str	r3, [sp, #36]	@ 0x24
 800aef4:	462c      	mov	r4, r5
 800aef6:	bfa8      	it	ge
 800aef8:	2410      	movge	r4, #16
 800aefa:	f7f5 fb03 	bl	8000504 <__aeabi_ui2d>
 800aefe:	2d09      	cmp	r5, #9
 800af00:	4682      	mov	sl, r0
 800af02:	468b      	mov	fp, r1
 800af04:	dc13      	bgt.n	800af2e <_strtod_l+0x3de>
 800af06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af08:	2b00      	cmp	r3, #0
 800af0a:	f43f ae5a 	beq.w	800abc2 <_strtod_l+0x72>
 800af0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af10:	dd78      	ble.n	800b004 <_strtod_l+0x4b4>
 800af12:	2b16      	cmp	r3, #22
 800af14:	dc5f      	bgt.n	800afd6 <_strtod_l+0x486>
 800af16:	4972      	ldr	r1, [pc, #456]	@ (800b0e0 <_strtod_l+0x590>)
 800af18:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800af1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af20:	4652      	mov	r2, sl
 800af22:	465b      	mov	r3, fp
 800af24:	f7f5 fb68 	bl	80005f8 <__aeabi_dmul>
 800af28:	4682      	mov	sl, r0
 800af2a:	468b      	mov	fp, r1
 800af2c:	e649      	b.n	800abc2 <_strtod_l+0x72>
 800af2e:	4b6c      	ldr	r3, [pc, #432]	@ (800b0e0 <_strtod_l+0x590>)
 800af30:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800af34:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800af38:	f7f5 fb5e 	bl	80005f8 <__aeabi_dmul>
 800af3c:	4682      	mov	sl, r0
 800af3e:	4638      	mov	r0, r7
 800af40:	468b      	mov	fp, r1
 800af42:	f7f5 fadf 	bl	8000504 <__aeabi_ui2d>
 800af46:	4602      	mov	r2, r0
 800af48:	460b      	mov	r3, r1
 800af4a:	4650      	mov	r0, sl
 800af4c:	4659      	mov	r1, fp
 800af4e:	f7f5 f99d 	bl	800028c <__adddf3>
 800af52:	2d0f      	cmp	r5, #15
 800af54:	4682      	mov	sl, r0
 800af56:	468b      	mov	fp, r1
 800af58:	ddd5      	ble.n	800af06 <_strtod_l+0x3b6>
 800af5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af5c:	1b2c      	subs	r4, r5, r4
 800af5e:	441c      	add	r4, r3
 800af60:	2c00      	cmp	r4, #0
 800af62:	f340 8093 	ble.w	800b08c <_strtod_l+0x53c>
 800af66:	f014 030f 	ands.w	r3, r4, #15
 800af6a:	d00a      	beq.n	800af82 <_strtod_l+0x432>
 800af6c:	495c      	ldr	r1, [pc, #368]	@ (800b0e0 <_strtod_l+0x590>)
 800af6e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800af72:	4652      	mov	r2, sl
 800af74:	465b      	mov	r3, fp
 800af76:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af7a:	f7f5 fb3d 	bl	80005f8 <__aeabi_dmul>
 800af7e:	4682      	mov	sl, r0
 800af80:	468b      	mov	fp, r1
 800af82:	f034 040f 	bics.w	r4, r4, #15
 800af86:	d073      	beq.n	800b070 <_strtod_l+0x520>
 800af88:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800af8c:	dd49      	ble.n	800b022 <_strtod_l+0x4d2>
 800af8e:	2400      	movs	r4, #0
 800af90:	46a0      	mov	r8, r4
 800af92:	940b      	str	r4, [sp, #44]	@ 0x2c
 800af94:	46a1      	mov	r9, r4
 800af96:	9a05      	ldr	r2, [sp, #20]
 800af98:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800b0e8 <_strtod_l+0x598>
 800af9c:	2322      	movs	r3, #34	@ 0x22
 800af9e:	6013      	str	r3, [r2, #0]
 800afa0:	f04f 0a00 	mov.w	sl, #0
 800afa4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	f43f ae0b 	beq.w	800abc2 <_strtod_l+0x72>
 800afac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800afae:	9805      	ldr	r0, [sp, #20]
 800afb0:	f7ff f946 	bl	800a240 <_Bfree>
 800afb4:	9805      	ldr	r0, [sp, #20]
 800afb6:	4649      	mov	r1, r9
 800afb8:	f7ff f942 	bl	800a240 <_Bfree>
 800afbc:	9805      	ldr	r0, [sp, #20]
 800afbe:	4641      	mov	r1, r8
 800afc0:	f7ff f93e 	bl	800a240 <_Bfree>
 800afc4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800afc6:	9805      	ldr	r0, [sp, #20]
 800afc8:	f7ff f93a 	bl	800a240 <_Bfree>
 800afcc:	9805      	ldr	r0, [sp, #20]
 800afce:	4621      	mov	r1, r4
 800afd0:	f7ff f936 	bl	800a240 <_Bfree>
 800afd4:	e5f5      	b.n	800abc2 <_strtod_l+0x72>
 800afd6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800afd8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800afdc:	4293      	cmp	r3, r2
 800afde:	dbbc      	blt.n	800af5a <_strtod_l+0x40a>
 800afe0:	4c3f      	ldr	r4, [pc, #252]	@ (800b0e0 <_strtod_l+0x590>)
 800afe2:	f1c5 050f 	rsb	r5, r5, #15
 800afe6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800afea:	4652      	mov	r2, sl
 800afec:	465b      	mov	r3, fp
 800afee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aff2:	f7f5 fb01 	bl	80005f8 <__aeabi_dmul>
 800aff6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aff8:	1b5d      	subs	r5, r3, r5
 800affa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800affe:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b002:	e78f      	b.n	800af24 <_strtod_l+0x3d4>
 800b004:	3316      	adds	r3, #22
 800b006:	dba8      	blt.n	800af5a <_strtod_l+0x40a>
 800b008:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b00a:	eba3 0808 	sub.w	r8, r3, r8
 800b00e:	4b34      	ldr	r3, [pc, #208]	@ (800b0e0 <_strtod_l+0x590>)
 800b010:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800b014:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b018:	4650      	mov	r0, sl
 800b01a:	4659      	mov	r1, fp
 800b01c:	f7f5 fc16 	bl	800084c <__aeabi_ddiv>
 800b020:	e782      	b.n	800af28 <_strtod_l+0x3d8>
 800b022:	2300      	movs	r3, #0
 800b024:	4f2f      	ldr	r7, [pc, #188]	@ (800b0e4 <_strtod_l+0x594>)
 800b026:	1124      	asrs	r4, r4, #4
 800b028:	4650      	mov	r0, sl
 800b02a:	4659      	mov	r1, fp
 800b02c:	461e      	mov	r6, r3
 800b02e:	2c01      	cmp	r4, #1
 800b030:	dc21      	bgt.n	800b076 <_strtod_l+0x526>
 800b032:	b10b      	cbz	r3, 800b038 <_strtod_l+0x4e8>
 800b034:	4682      	mov	sl, r0
 800b036:	468b      	mov	fp, r1
 800b038:	492a      	ldr	r1, [pc, #168]	@ (800b0e4 <_strtod_l+0x594>)
 800b03a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b03e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b042:	4652      	mov	r2, sl
 800b044:	465b      	mov	r3, fp
 800b046:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b04a:	f7f5 fad5 	bl	80005f8 <__aeabi_dmul>
 800b04e:	4b26      	ldr	r3, [pc, #152]	@ (800b0e8 <_strtod_l+0x598>)
 800b050:	460a      	mov	r2, r1
 800b052:	400b      	ands	r3, r1
 800b054:	4925      	ldr	r1, [pc, #148]	@ (800b0ec <_strtod_l+0x59c>)
 800b056:	428b      	cmp	r3, r1
 800b058:	4682      	mov	sl, r0
 800b05a:	d898      	bhi.n	800af8e <_strtod_l+0x43e>
 800b05c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800b060:	428b      	cmp	r3, r1
 800b062:	bf86      	itte	hi
 800b064:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800b0f0 <_strtod_l+0x5a0>
 800b068:	f04f 3aff 	movhi.w	sl, #4294967295
 800b06c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800b070:	2300      	movs	r3, #0
 800b072:	9308      	str	r3, [sp, #32]
 800b074:	e076      	b.n	800b164 <_strtod_l+0x614>
 800b076:	07e2      	lsls	r2, r4, #31
 800b078:	d504      	bpl.n	800b084 <_strtod_l+0x534>
 800b07a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b07e:	f7f5 fabb 	bl	80005f8 <__aeabi_dmul>
 800b082:	2301      	movs	r3, #1
 800b084:	3601      	adds	r6, #1
 800b086:	1064      	asrs	r4, r4, #1
 800b088:	3708      	adds	r7, #8
 800b08a:	e7d0      	b.n	800b02e <_strtod_l+0x4de>
 800b08c:	d0f0      	beq.n	800b070 <_strtod_l+0x520>
 800b08e:	4264      	negs	r4, r4
 800b090:	f014 020f 	ands.w	r2, r4, #15
 800b094:	d00a      	beq.n	800b0ac <_strtod_l+0x55c>
 800b096:	4b12      	ldr	r3, [pc, #72]	@ (800b0e0 <_strtod_l+0x590>)
 800b098:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b09c:	4650      	mov	r0, sl
 800b09e:	4659      	mov	r1, fp
 800b0a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0a4:	f7f5 fbd2 	bl	800084c <__aeabi_ddiv>
 800b0a8:	4682      	mov	sl, r0
 800b0aa:	468b      	mov	fp, r1
 800b0ac:	1124      	asrs	r4, r4, #4
 800b0ae:	d0df      	beq.n	800b070 <_strtod_l+0x520>
 800b0b0:	2c1f      	cmp	r4, #31
 800b0b2:	dd1f      	ble.n	800b0f4 <_strtod_l+0x5a4>
 800b0b4:	2400      	movs	r4, #0
 800b0b6:	46a0      	mov	r8, r4
 800b0b8:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b0ba:	46a1      	mov	r9, r4
 800b0bc:	9a05      	ldr	r2, [sp, #20]
 800b0be:	2322      	movs	r3, #34	@ 0x22
 800b0c0:	f04f 0a00 	mov.w	sl, #0
 800b0c4:	f04f 0b00 	mov.w	fp, #0
 800b0c8:	6013      	str	r3, [r2, #0]
 800b0ca:	e76b      	b.n	800afa4 <_strtod_l+0x454>
 800b0cc:	0800d8fd 	.word	0x0800d8fd
 800b0d0:	0800dbe0 	.word	0x0800dbe0
 800b0d4:	0800d8f5 	.word	0x0800d8f5
 800b0d8:	0800d92a 	.word	0x0800d92a
 800b0dc:	0800da7e 	.word	0x0800da7e
 800b0e0:	0800db18 	.word	0x0800db18
 800b0e4:	0800daf0 	.word	0x0800daf0
 800b0e8:	7ff00000 	.word	0x7ff00000
 800b0ec:	7ca00000 	.word	0x7ca00000
 800b0f0:	7fefffff 	.word	0x7fefffff
 800b0f4:	f014 0310 	ands.w	r3, r4, #16
 800b0f8:	bf18      	it	ne
 800b0fa:	236a      	movne	r3, #106	@ 0x6a
 800b0fc:	4ea9      	ldr	r6, [pc, #676]	@ (800b3a4 <_strtod_l+0x854>)
 800b0fe:	9308      	str	r3, [sp, #32]
 800b100:	4650      	mov	r0, sl
 800b102:	4659      	mov	r1, fp
 800b104:	2300      	movs	r3, #0
 800b106:	07e7      	lsls	r7, r4, #31
 800b108:	d504      	bpl.n	800b114 <_strtod_l+0x5c4>
 800b10a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b10e:	f7f5 fa73 	bl	80005f8 <__aeabi_dmul>
 800b112:	2301      	movs	r3, #1
 800b114:	1064      	asrs	r4, r4, #1
 800b116:	f106 0608 	add.w	r6, r6, #8
 800b11a:	d1f4      	bne.n	800b106 <_strtod_l+0x5b6>
 800b11c:	b10b      	cbz	r3, 800b122 <_strtod_l+0x5d2>
 800b11e:	4682      	mov	sl, r0
 800b120:	468b      	mov	fp, r1
 800b122:	9b08      	ldr	r3, [sp, #32]
 800b124:	b1b3      	cbz	r3, 800b154 <_strtod_l+0x604>
 800b126:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b12a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800b12e:	2b00      	cmp	r3, #0
 800b130:	4659      	mov	r1, fp
 800b132:	dd0f      	ble.n	800b154 <_strtod_l+0x604>
 800b134:	2b1f      	cmp	r3, #31
 800b136:	dd56      	ble.n	800b1e6 <_strtod_l+0x696>
 800b138:	2b34      	cmp	r3, #52	@ 0x34
 800b13a:	bfde      	ittt	le
 800b13c:	f04f 33ff 	movle.w	r3, #4294967295
 800b140:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800b144:	4093      	lslle	r3, r2
 800b146:	f04f 0a00 	mov.w	sl, #0
 800b14a:	bfcc      	ite	gt
 800b14c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b150:	ea03 0b01 	andle.w	fp, r3, r1
 800b154:	2200      	movs	r2, #0
 800b156:	2300      	movs	r3, #0
 800b158:	4650      	mov	r0, sl
 800b15a:	4659      	mov	r1, fp
 800b15c:	f7f5 fcb4 	bl	8000ac8 <__aeabi_dcmpeq>
 800b160:	2800      	cmp	r0, #0
 800b162:	d1a7      	bne.n	800b0b4 <_strtod_l+0x564>
 800b164:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b166:	9300      	str	r3, [sp, #0]
 800b168:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b16a:	9805      	ldr	r0, [sp, #20]
 800b16c:	462b      	mov	r3, r5
 800b16e:	464a      	mov	r2, r9
 800b170:	f7ff f8ce 	bl	800a310 <__s2b>
 800b174:	900b      	str	r0, [sp, #44]	@ 0x2c
 800b176:	2800      	cmp	r0, #0
 800b178:	f43f af09 	beq.w	800af8e <_strtod_l+0x43e>
 800b17c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b17e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b180:	2a00      	cmp	r2, #0
 800b182:	eba3 0308 	sub.w	r3, r3, r8
 800b186:	bfa8      	it	ge
 800b188:	2300      	movge	r3, #0
 800b18a:	9312      	str	r3, [sp, #72]	@ 0x48
 800b18c:	2400      	movs	r4, #0
 800b18e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b192:	9316      	str	r3, [sp, #88]	@ 0x58
 800b194:	46a0      	mov	r8, r4
 800b196:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b198:	9805      	ldr	r0, [sp, #20]
 800b19a:	6859      	ldr	r1, [r3, #4]
 800b19c:	f7ff f810 	bl	800a1c0 <_Balloc>
 800b1a0:	4681      	mov	r9, r0
 800b1a2:	2800      	cmp	r0, #0
 800b1a4:	f43f aef7 	beq.w	800af96 <_strtod_l+0x446>
 800b1a8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b1aa:	691a      	ldr	r2, [r3, #16]
 800b1ac:	3202      	adds	r2, #2
 800b1ae:	f103 010c 	add.w	r1, r3, #12
 800b1b2:	0092      	lsls	r2, r2, #2
 800b1b4:	300c      	adds	r0, #12
 800b1b6:	f7fe f894 	bl	80092e2 <memcpy>
 800b1ba:	ec4b ab10 	vmov	d0, sl, fp
 800b1be:	9805      	ldr	r0, [sp, #20]
 800b1c0:	aa1c      	add	r2, sp, #112	@ 0x70
 800b1c2:	a91b      	add	r1, sp, #108	@ 0x6c
 800b1c4:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800b1c8:	f7ff fbd6 	bl	800a978 <__d2b>
 800b1cc:	901a      	str	r0, [sp, #104]	@ 0x68
 800b1ce:	2800      	cmp	r0, #0
 800b1d0:	f43f aee1 	beq.w	800af96 <_strtod_l+0x446>
 800b1d4:	9805      	ldr	r0, [sp, #20]
 800b1d6:	2101      	movs	r1, #1
 800b1d8:	f7ff f930 	bl	800a43c <__i2b>
 800b1dc:	4680      	mov	r8, r0
 800b1de:	b948      	cbnz	r0, 800b1f4 <_strtod_l+0x6a4>
 800b1e0:	f04f 0800 	mov.w	r8, #0
 800b1e4:	e6d7      	b.n	800af96 <_strtod_l+0x446>
 800b1e6:	f04f 32ff 	mov.w	r2, #4294967295
 800b1ea:	fa02 f303 	lsl.w	r3, r2, r3
 800b1ee:	ea03 0a0a 	and.w	sl, r3, sl
 800b1f2:	e7af      	b.n	800b154 <_strtod_l+0x604>
 800b1f4:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800b1f6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b1f8:	2d00      	cmp	r5, #0
 800b1fa:	bfab      	itete	ge
 800b1fc:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800b1fe:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800b200:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800b202:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800b204:	bfac      	ite	ge
 800b206:	18ef      	addge	r7, r5, r3
 800b208:	1b5e      	sublt	r6, r3, r5
 800b20a:	9b08      	ldr	r3, [sp, #32]
 800b20c:	1aed      	subs	r5, r5, r3
 800b20e:	4415      	add	r5, r2
 800b210:	4b65      	ldr	r3, [pc, #404]	@ (800b3a8 <_strtod_l+0x858>)
 800b212:	3d01      	subs	r5, #1
 800b214:	429d      	cmp	r5, r3
 800b216:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b21a:	da50      	bge.n	800b2be <_strtod_l+0x76e>
 800b21c:	1b5b      	subs	r3, r3, r5
 800b21e:	2b1f      	cmp	r3, #31
 800b220:	eba2 0203 	sub.w	r2, r2, r3
 800b224:	f04f 0101 	mov.w	r1, #1
 800b228:	dc3d      	bgt.n	800b2a6 <_strtod_l+0x756>
 800b22a:	fa01 f303 	lsl.w	r3, r1, r3
 800b22e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b230:	2300      	movs	r3, #0
 800b232:	9310      	str	r3, [sp, #64]	@ 0x40
 800b234:	18bd      	adds	r5, r7, r2
 800b236:	9b08      	ldr	r3, [sp, #32]
 800b238:	42af      	cmp	r7, r5
 800b23a:	4416      	add	r6, r2
 800b23c:	441e      	add	r6, r3
 800b23e:	463b      	mov	r3, r7
 800b240:	bfa8      	it	ge
 800b242:	462b      	movge	r3, r5
 800b244:	42b3      	cmp	r3, r6
 800b246:	bfa8      	it	ge
 800b248:	4633      	movge	r3, r6
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	bfc2      	ittt	gt
 800b24e:	1aed      	subgt	r5, r5, r3
 800b250:	1af6      	subgt	r6, r6, r3
 800b252:	1aff      	subgt	r7, r7, r3
 800b254:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b256:	2b00      	cmp	r3, #0
 800b258:	dd16      	ble.n	800b288 <_strtod_l+0x738>
 800b25a:	4641      	mov	r1, r8
 800b25c:	9805      	ldr	r0, [sp, #20]
 800b25e:	461a      	mov	r2, r3
 800b260:	f7ff f9a4 	bl	800a5ac <__pow5mult>
 800b264:	4680      	mov	r8, r0
 800b266:	2800      	cmp	r0, #0
 800b268:	d0ba      	beq.n	800b1e0 <_strtod_l+0x690>
 800b26a:	4601      	mov	r1, r0
 800b26c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b26e:	9805      	ldr	r0, [sp, #20]
 800b270:	f7ff f8fa 	bl	800a468 <__multiply>
 800b274:	900a      	str	r0, [sp, #40]	@ 0x28
 800b276:	2800      	cmp	r0, #0
 800b278:	f43f ae8d 	beq.w	800af96 <_strtod_l+0x446>
 800b27c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b27e:	9805      	ldr	r0, [sp, #20]
 800b280:	f7fe ffde 	bl	800a240 <_Bfree>
 800b284:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b286:	931a      	str	r3, [sp, #104]	@ 0x68
 800b288:	2d00      	cmp	r5, #0
 800b28a:	dc1d      	bgt.n	800b2c8 <_strtod_l+0x778>
 800b28c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b28e:	2b00      	cmp	r3, #0
 800b290:	dd23      	ble.n	800b2da <_strtod_l+0x78a>
 800b292:	4649      	mov	r1, r9
 800b294:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b296:	9805      	ldr	r0, [sp, #20]
 800b298:	f7ff f988 	bl	800a5ac <__pow5mult>
 800b29c:	4681      	mov	r9, r0
 800b29e:	b9e0      	cbnz	r0, 800b2da <_strtod_l+0x78a>
 800b2a0:	f04f 0900 	mov.w	r9, #0
 800b2a4:	e677      	b.n	800af96 <_strtod_l+0x446>
 800b2a6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800b2aa:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800b2ae:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800b2b2:	35e2      	adds	r5, #226	@ 0xe2
 800b2b4:	fa01 f305 	lsl.w	r3, r1, r5
 800b2b8:	9310      	str	r3, [sp, #64]	@ 0x40
 800b2ba:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b2bc:	e7ba      	b.n	800b234 <_strtod_l+0x6e4>
 800b2be:	2300      	movs	r3, #0
 800b2c0:	9310      	str	r3, [sp, #64]	@ 0x40
 800b2c2:	2301      	movs	r3, #1
 800b2c4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b2c6:	e7b5      	b.n	800b234 <_strtod_l+0x6e4>
 800b2c8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b2ca:	9805      	ldr	r0, [sp, #20]
 800b2cc:	462a      	mov	r2, r5
 800b2ce:	f7ff f9c7 	bl	800a660 <__lshift>
 800b2d2:	901a      	str	r0, [sp, #104]	@ 0x68
 800b2d4:	2800      	cmp	r0, #0
 800b2d6:	d1d9      	bne.n	800b28c <_strtod_l+0x73c>
 800b2d8:	e65d      	b.n	800af96 <_strtod_l+0x446>
 800b2da:	2e00      	cmp	r6, #0
 800b2dc:	dd07      	ble.n	800b2ee <_strtod_l+0x79e>
 800b2de:	4649      	mov	r1, r9
 800b2e0:	9805      	ldr	r0, [sp, #20]
 800b2e2:	4632      	mov	r2, r6
 800b2e4:	f7ff f9bc 	bl	800a660 <__lshift>
 800b2e8:	4681      	mov	r9, r0
 800b2ea:	2800      	cmp	r0, #0
 800b2ec:	d0d8      	beq.n	800b2a0 <_strtod_l+0x750>
 800b2ee:	2f00      	cmp	r7, #0
 800b2f0:	dd08      	ble.n	800b304 <_strtod_l+0x7b4>
 800b2f2:	4641      	mov	r1, r8
 800b2f4:	9805      	ldr	r0, [sp, #20]
 800b2f6:	463a      	mov	r2, r7
 800b2f8:	f7ff f9b2 	bl	800a660 <__lshift>
 800b2fc:	4680      	mov	r8, r0
 800b2fe:	2800      	cmp	r0, #0
 800b300:	f43f ae49 	beq.w	800af96 <_strtod_l+0x446>
 800b304:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b306:	9805      	ldr	r0, [sp, #20]
 800b308:	464a      	mov	r2, r9
 800b30a:	f7ff fa31 	bl	800a770 <__mdiff>
 800b30e:	4604      	mov	r4, r0
 800b310:	2800      	cmp	r0, #0
 800b312:	f43f ae40 	beq.w	800af96 <_strtod_l+0x446>
 800b316:	68c3      	ldr	r3, [r0, #12]
 800b318:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b31a:	2300      	movs	r3, #0
 800b31c:	60c3      	str	r3, [r0, #12]
 800b31e:	4641      	mov	r1, r8
 800b320:	f7ff fa0a 	bl	800a738 <__mcmp>
 800b324:	2800      	cmp	r0, #0
 800b326:	da45      	bge.n	800b3b4 <_strtod_l+0x864>
 800b328:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b32a:	ea53 030a 	orrs.w	r3, r3, sl
 800b32e:	d16b      	bne.n	800b408 <_strtod_l+0x8b8>
 800b330:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b334:	2b00      	cmp	r3, #0
 800b336:	d167      	bne.n	800b408 <_strtod_l+0x8b8>
 800b338:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b33c:	0d1b      	lsrs	r3, r3, #20
 800b33e:	051b      	lsls	r3, r3, #20
 800b340:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b344:	d960      	bls.n	800b408 <_strtod_l+0x8b8>
 800b346:	6963      	ldr	r3, [r4, #20]
 800b348:	b913      	cbnz	r3, 800b350 <_strtod_l+0x800>
 800b34a:	6923      	ldr	r3, [r4, #16]
 800b34c:	2b01      	cmp	r3, #1
 800b34e:	dd5b      	ble.n	800b408 <_strtod_l+0x8b8>
 800b350:	4621      	mov	r1, r4
 800b352:	2201      	movs	r2, #1
 800b354:	9805      	ldr	r0, [sp, #20]
 800b356:	f7ff f983 	bl	800a660 <__lshift>
 800b35a:	4641      	mov	r1, r8
 800b35c:	4604      	mov	r4, r0
 800b35e:	f7ff f9eb 	bl	800a738 <__mcmp>
 800b362:	2800      	cmp	r0, #0
 800b364:	dd50      	ble.n	800b408 <_strtod_l+0x8b8>
 800b366:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b36a:	9a08      	ldr	r2, [sp, #32]
 800b36c:	0d1b      	lsrs	r3, r3, #20
 800b36e:	051b      	lsls	r3, r3, #20
 800b370:	2a00      	cmp	r2, #0
 800b372:	d06a      	beq.n	800b44a <_strtod_l+0x8fa>
 800b374:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b378:	d867      	bhi.n	800b44a <_strtod_l+0x8fa>
 800b37a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b37e:	f67f ae9d 	bls.w	800b0bc <_strtod_l+0x56c>
 800b382:	4b0a      	ldr	r3, [pc, #40]	@ (800b3ac <_strtod_l+0x85c>)
 800b384:	4650      	mov	r0, sl
 800b386:	4659      	mov	r1, fp
 800b388:	2200      	movs	r2, #0
 800b38a:	f7f5 f935 	bl	80005f8 <__aeabi_dmul>
 800b38e:	4b08      	ldr	r3, [pc, #32]	@ (800b3b0 <_strtod_l+0x860>)
 800b390:	400b      	ands	r3, r1
 800b392:	4682      	mov	sl, r0
 800b394:	468b      	mov	fp, r1
 800b396:	2b00      	cmp	r3, #0
 800b398:	f47f ae08 	bne.w	800afac <_strtod_l+0x45c>
 800b39c:	9a05      	ldr	r2, [sp, #20]
 800b39e:	2322      	movs	r3, #34	@ 0x22
 800b3a0:	6013      	str	r3, [r2, #0]
 800b3a2:	e603      	b.n	800afac <_strtod_l+0x45c>
 800b3a4:	0800dc08 	.word	0x0800dc08
 800b3a8:	fffffc02 	.word	0xfffffc02
 800b3ac:	39500000 	.word	0x39500000
 800b3b0:	7ff00000 	.word	0x7ff00000
 800b3b4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800b3b8:	d165      	bne.n	800b486 <_strtod_l+0x936>
 800b3ba:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b3bc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b3c0:	b35a      	cbz	r2, 800b41a <_strtod_l+0x8ca>
 800b3c2:	4a9f      	ldr	r2, [pc, #636]	@ (800b640 <_strtod_l+0xaf0>)
 800b3c4:	4293      	cmp	r3, r2
 800b3c6:	d12b      	bne.n	800b420 <_strtod_l+0x8d0>
 800b3c8:	9b08      	ldr	r3, [sp, #32]
 800b3ca:	4651      	mov	r1, sl
 800b3cc:	b303      	cbz	r3, 800b410 <_strtod_l+0x8c0>
 800b3ce:	4b9d      	ldr	r3, [pc, #628]	@ (800b644 <_strtod_l+0xaf4>)
 800b3d0:	465a      	mov	r2, fp
 800b3d2:	4013      	ands	r3, r2
 800b3d4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b3d8:	f04f 32ff 	mov.w	r2, #4294967295
 800b3dc:	d81b      	bhi.n	800b416 <_strtod_l+0x8c6>
 800b3de:	0d1b      	lsrs	r3, r3, #20
 800b3e0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b3e4:	fa02 f303 	lsl.w	r3, r2, r3
 800b3e8:	4299      	cmp	r1, r3
 800b3ea:	d119      	bne.n	800b420 <_strtod_l+0x8d0>
 800b3ec:	4b96      	ldr	r3, [pc, #600]	@ (800b648 <_strtod_l+0xaf8>)
 800b3ee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b3f0:	429a      	cmp	r2, r3
 800b3f2:	d102      	bne.n	800b3fa <_strtod_l+0x8aa>
 800b3f4:	3101      	adds	r1, #1
 800b3f6:	f43f adce 	beq.w	800af96 <_strtod_l+0x446>
 800b3fa:	4b92      	ldr	r3, [pc, #584]	@ (800b644 <_strtod_l+0xaf4>)
 800b3fc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b3fe:	401a      	ands	r2, r3
 800b400:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800b404:	f04f 0a00 	mov.w	sl, #0
 800b408:	9b08      	ldr	r3, [sp, #32]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d1b9      	bne.n	800b382 <_strtod_l+0x832>
 800b40e:	e5cd      	b.n	800afac <_strtod_l+0x45c>
 800b410:	f04f 33ff 	mov.w	r3, #4294967295
 800b414:	e7e8      	b.n	800b3e8 <_strtod_l+0x898>
 800b416:	4613      	mov	r3, r2
 800b418:	e7e6      	b.n	800b3e8 <_strtod_l+0x898>
 800b41a:	ea53 030a 	orrs.w	r3, r3, sl
 800b41e:	d0a2      	beq.n	800b366 <_strtod_l+0x816>
 800b420:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b422:	b1db      	cbz	r3, 800b45c <_strtod_l+0x90c>
 800b424:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b426:	4213      	tst	r3, r2
 800b428:	d0ee      	beq.n	800b408 <_strtod_l+0x8b8>
 800b42a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b42c:	9a08      	ldr	r2, [sp, #32]
 800b42e:	4650      	mov	r0, sl
 800b430:	4659      	mov	r1, fp
 800b432:	b1bb      	cbz	r3, 800b464 <_strtod_l+0x914>
 800b434:	f7ff fb6e 	bl	800ab14 <sulp>
 800b438:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b43c:	ec53 2b10 	vmov	r2, r3, d0
 800b440:	f7f4 ff24 	bl	800028c <__adddf3>
 800b444:	4682      	mov	sl, r0
 800b446:	468b      	mov	fp, r1
 800b448:	e7de      	b.n	800b408 <_strtod_l+0x8b8>
 800b44a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b44e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b452:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b456:	f04f 3aff 	mov.w	sl, #4294967295
 800b45a:	e7d5      	b.n	800b408 <_strtod_l+0x8b8>
 800b45c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b45e:	ea13 0f0a 	tst.w	r3, sl
 800b462:	e7e1      	b.n	800b428 <_strtod_l+0x8d8>
 800b464:	f7ff fb56 	bl	800ab14 <sulp>
 800b468:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b46c:	ec53 2b10 	vmov	r2, r3, d0
 800b470:	f7f4 ff0a 	bl	8000288 <__aeabi_dsub>
 800b474:	2200      	movs	r2, #0
 800b476:	2300      	movs	r3, #0
 800b478:	4682      	mov	sl, r0
 800b47a:	468b      	mov	fp, r1
 800b47c:	f7f5 fb24 	bl	8000ac8 <__aeabi_dcmpeq>
 800b480:	2800      	cmp	r0, #0
 800b482:	d0c1      	beq.n	800b408 <_strtod_l+0x8b8>
 800b484:	e61a      	b.n	800b0bc <_strtod_l+0x56c>
 800b486:	4641      	mov	r1, r8
 800b488:	4620      	mov	r0, r4
 800b48a:	f7ff facd 	bl	800aa28 <__ratio>
 800b48e:	ec57 6b10 	vmov	r6, r7, d0
 800b492:	2200      	movs	r2, #0
 800b494:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b498:	4630      	mov	r0, r6
 800b49a:	4639      	mov	r1, r7
 800b49c:	f7f5 fb28 	bl	8000af0 <__aeabi_dcmple>
 800b4a0:	2800      	cmp	r0, #0
 800b4a2:	d06f      	beq.n	800b584 <_strtod_l+0xa34>
 800b4a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d17a      	bne.n	800b5a0 <_strtod_l+0xa50>
 800b4aa:	f1ba 0f00 	cmp.w	sl, #0
 800b4ae:	d158      	bne.n	800b562 <_strtod_l+0xa12>
 800b4b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b4b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d15a      	bne.n	800b570 <_strtod_l+0xa20>
 800b4ba:	4b64      	ldr	r3, [pc, #400]	@ (800b64c <_strtod_l+0xafc>)
 800b4bc:	2200      	movs	r2, #0
 800b4be:	4630      	mov	r0, r6
 800b4c0:	4639      	mov	r1, r7
 800b4c2:	f7f5 fb0b 	bl	8000adc <__aeabi_dcmplt>
 800b4c6:	2800      	cmp	r0, #0
 800b4c8:	d159      	bne.n	800b57e <_strtod_l+0xa2e>
 800b4ca:	4630      	mov	r0, r6
 800b4cc:	4639      	mov	r1, r7
 800b4ce:	4b60      	ldr	r3, [pc, #384]	@ (800b650 <_strtod_l+0xb00>)
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	f7f5 f891 	bl	80005f8 <__aeabi_dmul>
 800b4d6:	4606      	mov	r6, r0
 800b4d8:	460f      	mov	r7, r1
 800b4da:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b4de:	9606      	str	r6, [sp, #24]
 800b4e0:	9307      	str	r3, [sp, #28]
 800b4e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b4e6:	4d57      	ldr	r5, [pc, #348]	@ (800b644 <_strtod_l+0xaf4>)
 800b4e8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b4ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b4ee:	401d      	ands	r5, r3
 800b4f0:	4b58      	ldr	r3, [pc, #352]	@ (800b654 <_strtod_l+0xb04>)
 800b4f2:	429d      	cmp	r5, r3
 800b4f4:	f040 80b2 	bne.w	800b65c <_strtod_l+0xb0c>
 800b4f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b4fa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b4fe:	ec4b ab10 	vmov	d0, sl, fp
 800b502:	f7ff f9c9 	bl	800a898 <__ulp>
 800b506:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b50a:	ec51 0b10 	vmov	r0, r1, d0
 800b50e:	f7f5 f873 	bl	80005f8 <__aeabi_dmul>
 800b512:	4652      	mov	r2, sl
 800b514:	465b      	mov	r3, fp
 800b516:	f7f4 feb9 	bl	800028c <__adddf3>
 800b51a:	460b      	mov	r3, r1
 800b51c:	4949      	ldr	r1, [pc, #292]	@ (800b644 <_strtod_l+0xaf4>)
 800b51e:	4a4e      	ldr	r2, [pc, #312]	@ (800b658 <_strtod_l+0xb08>)
 800b520:	4019      	ands	r1, r3
 800b522:	4291      	cmp	r1, r2
 800b524:	4682      	mov	sl, r0
 800b526:	d942      	bls.n	800b5ae <_strtod_l+0xa5e>
 800b528:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b52a:	4b47      	ldr	r3, [pc, #284]	@ (800b648 <_strtod_l+0xaf8>)
 800b52c:	429a      	cmp	r2, r3
 800b52e:	d103      	bne.n	800b538 <_strtod_l+0x9e8>
 800b530:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b532:	3301      	adds	r3, #1
 800b534:	f43f ad2f 	beq.w	800af96 <_strtod_l+0x446>
 800b538:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800b648 <_strtod_l+0xaf8>
 800b53c:	f04f 3aff 	mov.w	sl, #4294967295
 800b540:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b542:	9805      	ldr	r0, [sp, #20]
 800b544:	f7fe fe7c 	bl	800a240 <_Bfree>
 800b548:	9805      	ldr	r0, [sp, #20]
 800b54a:	4649      	mov	r1, r9
 800b54c:	f7fe fe78 	bl	800a240 <_Bfree>
 800b550:	9805      	ldr	r0, [sp, #20]
 800b552:	4641      	mov	r1, r8
 800b554:	f7fe fe74 	bl	800a240 <_Bfree>
 800b558:	9805      	ldr	r0, [sp, #20]
 800b55a:	4621      	mov	r1, r4
 800b55c:	f7fe fe70 	bl	800a240 <_Bfree>
 800b560:	e619      	b.n	800b196 <_strtod_l+0x646>
 800b562:	f1ba 0f01 	cmp.w	sl, #1
 800b566:	d103      	bne.n	800b570 <_strtod_l+0xa20>
 800b568:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	f43f ada6 	beq.w	800b0bc <_strtod_l+0x56c>
 800b570:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800b620 <_strtod_l+0xad0>
 800b574:	4f35      	ldr	r7, [pc, #212]	@ (800b64c <_strtod_l+0xafc>)
 800b576:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b57a:	2600      	movs	r6, #0
 800b57c:	e7b1      	b.n	800b4e2 <_strtod_l+0x992>
 800b57e:	4f34      	ldr	r7, [pc, #208]	@ (800b650 <_strtod_l+0xb00>)
 800b580:	2600      	movs	r6, #0
 800b582:	e7aa      	b.n	800b4da <_strtod_l+0x98a>
 800b584:	4b32      	ldr	r3, [pc, #200]	@ (800b650 <_strtod_l+0xb00>)
 800b586:	4630      	mov	r0, r6
 800b588:	4639      	mov	r1, r7
 800b58a:	2200      	movs	r2, #0
 800b58c:	f7f5 f834 	bl	80005f8 <__aeabi_dmul>
 800b590:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b592:	4606      	mov	r6, r0
 800b594:	460f      	mov	r7, r1
 800b596:	2b00      	cmp	r3, #0
 800b598:	d09f      	beq.n	800b4da <_strtod_l+0x98a>
 800b59a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b59e:	e7a0      	b.n	800b4e2 <_strtod_l+0x992>
 800b5a0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b628 <_strtod_l+0xad8>
 800b5a4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b5a8:	ec57 6b17 	vmov	r6, r7, d7
 800b5ac:	e799      	b.n	800b4e2 <_strtod_l+0x992>
 800b5ae:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b5b2:	9b08      	ldr	r3, [sp, #32]
 800b5b4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d1c1      	bne.n	800b540 <_strtod_l+0x9f0>
 800b5bc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b5c0:	0d1b      	lsrs	r3, r3, #20
 800b5c2:	051b      	lsls	r3, r3, #20
 800b5c4:	429d      	cmp	r5, r3
 800b5c6:	d1bb      	bne.n	800b540 <_strtod_l+0x9f0>
 800b5c8:	4630      	mov	r0, r6
 800b5ca:	4639      	mov	r1, r7
 800b5cc:	f7f5 fb74 	bl	8000cb8 <__aeabi_d2lz>
 800b5d0:	f7f4 ffe4 	bl	800059c <__aeabi_l2d>
 800b5d4:	4602      	mov	r2, r0
 800b5d6:	460b      	mov	r3, r1
 800b5d8:	4630      	mov	r0, r6
 800b5da:	4639      	mov	r1, r7
 800b5dc:	f7f4 fe54 	bl	8000288 <__aeabi_dsub>
 800b5e0:	460b      	mov	r3, r1
 800b5e2:	4602      	mov	r2, r0
 800b5e4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b5e8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b5ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b5ee:	ea46 060a 	orr.w	r6, r6, sl
 800b5f2:	431e      	orrs	r6, r3
 800b5f4:	d06f      	beq.n	800b6d6 <_strtod_l+0xb86>
 800b5f6:	a30e      	add	r3, pc, #56	@ (adr r3, 800b630 <_strtod_l+0xae0>)
 800b5f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5fc:	f7f5 fa6e 	bl	8000adc <__aeabi_dcmplt>
 800b600:	2800      	cmp	r0, #0
 800b602:	f47f acd3 	bne.w	800afac <_strtod_l+0x45c>
 800b606:	a30c      	add	r3, pc, #48	@ (adr r3, 800b638 <_strtod_l+0xae8>)
 800b608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b60c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b610:	f7f5 fa82 	bl	8000b18 <__aeabi_dcmpgt>
 800b614:	2800      	cmp	r0, #0
 800b616:	d093      	beq.n	800b540 <_strtod_l+0x9f0>
 800b618:	e4c8      	b.n	800afac <_strtod_l+0x45c>
 800b61a:	bf00      	nop
 800b61c:	f3af 8000 	nop.w
 800b620:	00000000 	.word	0x00000000
 800b624:	bff00000 	.word	0xbff00000
 800b628:	00000000 	.word	0x00000000
 800b62c:	3ff00000 	.word	0x3ff00000
 800b630:	94a03595 	.word	0x94a03595
 800b634:	3fdfffff 	.word	0x3fdfffff
 800b638:	35afe535 	.word	0x35afe535
 800b63c:	3fe00000 	.word	0x3fe00000
 800b640:	000fffff 	.word	0x000fffff
 800b644:	7ff00000 	.word	0x7ff00000
 800b648:	7fefffff 	.word	0x7fefffff
 800b64c:	3ff00000 	.word	0x3ff00000
 800b650:	3fe00000 	.word	0x3fe00000
 800b654:	7fe00000 	.word	0x7fe00000
 800b658:	7c9fffff 	.word	0x7c9fffff
 800b65c:	9b08      	ldr	r3, [sp, #32]
 800b65e:	b323      	cbz	r3, 800b6aa <_strtod_l+0xb5a>
 800b660:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b664:	d821      	bhi.n	800b6aa <_strtod_l+0xb5a>
 800b666:	a328      	add	r3, pc, #160	@ (adr r3, 800b708 <_strtod_l+0xbb8>)
 800b668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b66c:	4630      	mov	r0, r6
 800b66e:	4639      	mov	r1, r7
 800b670:	f7f5 fa3e 	bl	8000af0 <__aeabi_dcmple>
 800b674:	b1a0      	cbz	r0, 800b6a0 <_strtod_l+0xb50>
 800b676:	4639      	mov	r1, r7
 800b678:	4630      	mov	r0, r6
 800b67a:	f7f5 fa95 	bl	8000ba8 <__aeabi_d2uiz>
 800b67e:	2801      	cmp	r0, #1
 800b680:	bf38      	it	cc
 800b682:	2001      	movcc	r0, #1
 800b684:	f7f4 ff3e 	bl	8000504 <__aeabi_ui2d>
 800b688:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b68a:	4606      	mov	r6, r0
 800b68c:	460f      	mov	r7, r1
 800b68e:	b9fb      	cbnz	r3, 800b6d0 <_strtod_l+0xb80>
 800b690:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b694:	9014      	str	r0, [sp, #80]	@ 0x50
 800b696:	9315      	str	r3, [sp, #84]	@ 0x54
 800b698:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b69c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b6a0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b6a2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b6a6:	1b5b      	subs	r3, r3, r5
 800b6a8:	9311      	str	r3, [sp, #68]	@ 0x44
 800b6aa:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b6ae:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b6b2:	f7ff f8f1 	bl	800a898 <__ulp>
 800b6b6:	4650      	mov	r0, sl
 800b6b8:	ec53 2b10 	vmov	r2, r3, d0
 800b6bc:	4659      	mov	r1, fp
 800b6be:	f7f4 ff9b 	bl	80005f8 <__aeabi_dmul>
 800b6c2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b6c6:	f7f4 fde1 	bl	800028c <__adddf3>
 800b6ca:	4682      	mov	sl, r0
 800b6cc:	468b      	mov	fp, r1
 800b6ce:	e770      	b.n	800b5b2 <_strtod_l+0xa62>
 800b6d0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b6d4:	e7e0      	b.n	800b698 <_strtod_l+0xb48>
 800b6d6:	a30e      	add	r3, pc, #56	@ (adr r3, 800b710 <_strtod_l+0xbc0>)
 800b6d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6dc:	f7f5 f9fe 	bl	8000adc <__aeabi_dcmplt>
 800b6e0:	e798      	b.n	800b614 <_strtod_l+0xac4>
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	930e      	str	r3, [sp, #56]	@ 0x38
 800b6e6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b6e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b6ea:	6013      	str	r3, [r2, #0]
 800b6ec:	f7ff ba6d 	b.w	800abca <_strtod_l+0x7a>
 800b6f0:	2a65      	cmp	r2, #101	@ 0x65
 800b6f2:	f43f ab68 	beq.w	800adc6 <_strtod_l+0x276>
 800b6f6:	2a45      	cmp	r2, #69	@ 0x45
 800b6f8:	f43f ab65 	beq.w	800adc6 <_strtod_l+0x276>
 800b6fc:	2301      	movs	r3, #1
 800b6fe:	f7ff bba0 	b.w	800ae42 <_strtod_l+0x2f2>
 800b702:	bf00      	nop
 800b704:	f3af 8000 	nop.w
 800b708:	ffc00000 	.word	0xffc00000
 800b70c:	41dfffff 	.word	0x41dfffff
 800b710:	94a03595 	.word	0x94a03595
 800b714:	3fcfffff 	.word	0x3fcfffff

0800b718 <_strtod_r>:
 800b718:	4b01      	ldr	r3, [pc, #4]	@ (800b720 <_strtod_r+0x8>)
 800b71a:	f7ff ba19 	b.w	800ab50 <_strtod_l>
 800b71e:	bf00      	nop
 800b720:	2000009c 	.word	0x2000009c

0800b724 <_strtol_l.isra.0>:
 800b724:	2b24      	cmp	r3, #36	@ 0x24
 800b726:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b72a:	4686      	mov	lr, r0
 800b72c:	4690      	mov	r8, r2
 800b72e:	d801      	bhi.n	800b734 <_strtol_l.isra.0+0x10>
 800b730:	2b01      	cmp	r3, #1
 800b732:	d106      	bne.n	800b742 <_strtol_l.isra.0+0x1e>
 800b734:	f7fd fda8 	bl	8009288 <__errno>
 800b738:	2316      	movs	r3, #22
 800b73a:	6003      	str	r3, [r0, #0]
 800b73c:	2000      	movs	r0, #0
 800b73e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b742:	4834      	ldr	r0, [pc, #208]	@ (800b814 <_strtol_l.isra.0+0xf0>)
 800b744:	460d      	mov	r5, r1
 800b746:	462a      	mov	r2, r5
 800b748:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b74c:	5d06      	ldrb	r6, [r0, r4]
 800b74e:	f016 0608 	ands.w	r6, r6, #8
 800b752:	d1f8      	bne.n	800b746 <_strtol_l.isra.0+0x22>
 800b754:	2c2d      	cmp	r4, #45	@ 0x2d
 800b756:	d110      	bne.n	800b77a <_strtol_l.isra.0+0x56>
 800b758:	782c      	ldrb	r4, [r5, #0]
 800b75a:	2601      	movs	r6, #1
 800b75c:	1c95      	adds	r5, r2, #2
 800b75e:	f033 0210 	bics.w	r2, r3, #16
 800b762:	d115      	bne.n	800b790 <_strtol_l.isra.0+0x6c>
 800b764:	2c30      	cmp	r4, #48	@ 0x30
 800b766:	d10d      	bne.n	800b784 <_strtol_l.isra.0+0x60>
 800b768:	782a      	ldrb	r2, [r5, #0]
 800b76a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b76e:	2a58      	cmp	r2, #88	@ 0x58
 800b770:	d108      	bne.n	800b784 <_strtol_l.isra.0+0x60>
 800b772:	786c      	ldrb	r4, [r5, #1]
 800b774:	3502      	adds	r5, #2
 800b776:	2310      	movs	r3, #16
 800b778:	e00a      	b.n	800b790 <_strtol_l.isra.0+0x6c>
 800b77a:	2c2b      	cmp	r4, #43	@ 0x2b
 800b77c:	bf04      	itt	eq
 800b77e:	782c      	ldrbeq	r4, [r5, #0]
 800b780:	1c95      	addeq	r5, r2, #2
 800b782:	e7ec      	b.n	800b75e <_strtol_l.isra.0+0x3a>
 800b784:	2b00      	cmp	r3, #0
 800b786:	d1f6      	bne.n	800b776 <_strtol_l.isra.0+0x52>
 800b788:	2c30      	cmp	r4, #48	@ 0x30
 800b78a:	bf14      	ite	ne
 800b78c:	230a      	movne	r3, #10
 800b78e:	2308      	moveq	r3, #8
 800b790:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b794:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b798:	2200      	movs	r2, #0
 800b79a:	fbbc f9f3 	udiv	r9, ip, r3
 800b79e:	4610      	mov	r0, r2
 800b7a0:	fb03 ca19 	mls	sl, r3, r9, ip
 800b7a4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b7a8:	2f09      	cmp	r7, #9
 800b7aa:	d80f      	bhi.n	800b7cc <_strtol_l.isra.0+0xa8>
 800b7ac:	463c      	mov	r4, r7
 800b7ae:	42a3      	cmp	r3, r4
 800b7b0:	dd1b      	ble.n	800b7ea <_strtol_l.isra.0+0xc6>
 800b7b2:	1c57      	adds	r7, r2, #1
 800b7b4:	d007      	beq.n	800b7c6 <_strtol_l.isra.0+0xa2>
 800b7b6:	4581      	cmp	r9, r0
 800b7b8:	d314      	bcc.n	800b7e4 <_strtol_l.isra.0+0xc0>
 800b7ba:	d101      	bne.n	800b7c0 <_strtol_l.isra.0+0x9c>
 800b7bc:	45a2      	cmp	sl, r4
 800b7be:	db11      	blt.n	800b7e4 <_strtol_l.isra.0+0xc0>
 800b7c0:	fb00 4003 	mla	r0, r0, r3, r4
 800b7c4:	2201      	movs	r2, #1
 800b7c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b7ca:	e7eb      	b.n	800b7a4 <_strtol_l.isra.0+0x80>
 800b7cc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b7d0:	2f19      	cmp	r7, #25
 800b7d2:	d801      	bhi.n	800b7d8 <_strtol_l.isra.0+0xb4>
 800b7d4:	3c37      	subs	r4, #55	@ 0x37
 800b7d6:	e7ea      	b.n	800b7ae <_strtol_l.isra.0+0x8a>
 800b7d8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b7dc:	2f19      	cmp	r7, #25
 800b7de:	d804      	bhi.n	800b7ea <_strtol_l.isra.0+0xc6>
 800b7e0:	3c57      	subs	r4, #87	@ 0x57
 800b7e2:	e7e4      	b.n	800b7ae <_strtol_l.isra.0+0x8a>
 800b7e4:	f04f 32ff 	mov.w	r2, #4294967295
 800b7e8:	e7ed      	b.n	800b7c6 <_strtol_l.isra.0+0xa2>
 800b7ea:	1c53      	adds	r3, r2, #1
 800b7ec:	d108      	bne.n	800b800 <_strtol_l.isra.0+0xdc>
 800b7ee:	2322      	movs	r3, #34	@ 0x22
 800b7f0:	f8ce 3000 	str.w	r3, [lr]
 800b7f4:	4660      	mov	r0, ip
 800b7f6:	f1b8 0f00 	cmp.w	r8, #0
 800b7fa:	d0a0      	beq.n	800b73e <_strtol_l.isra.0+0x1a>
 800b7fc:	1e69      	subs	r1, r5, #1
 800b7fe:	e006      	b.n	800b80e <_strtol_l.isra.0+0xea>
 800b800:	b106      	cbz	r6, 800b804 <_strtol_l.isra.0+0xe0>
 800b802:	4240      	negs	r0, r0
 800b804:	f1b8 0f00 	cmp.w	r8, #0
 800b808:	d099      	beq.n	800b73e <_strtol_l.isra.0+0x1a>
 800b80a:	2a00      	cmp	r2, #0
 800b80c:	d1f6      	bne.n	800b7fc <_strtol_l.isra.0+0xd8>
 800b80e:	f8c8 1000 	str.w	r1, [r8]
 800b812:	e794      	b.n	800b73e <_strtol_l.isra.0+0x1a>
 800b814:	0800dc31 	.word	0x0800dc31

0800b818 <_strtol_r>:
 800b818:	f7ff bf84 	b.w	800b724 <_strtol_l.isra.0>

0800b81c <__ssputs_r>:
 800b81c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b820:	688e      	ldr	r6, [r1, #8]
 800b822:	461f      	mov	r7, r3
 800b824:	42be      	cmp	r6, r7
 800b826:	680b      	ldr	r3, [r1, #0]
 800b828:	4682      	mov	sl, r0
 800b82a:	460c      	mov	r4, r1
 800b82c:	4690      	mov	r8, r2
 800b82e:	d82d      	bhi.n	800b88c <__ssputs_r+0x70>
 800b830:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b834:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b838:	d026      	beq.n	800b888 <__ssputs_r+0x6c>
 800b83a:	6965      	ldr	r5, [r4, #20]
 800b83c:	6909      	ldr	r1, [r1, #16]
 800b83e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b842:	eba3 0901 	sub.w	r9, r3, r1
 800b846:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b84a:	1c7b      	adds	r3, r7, #1
 800b84c:	444b      	add	r3, r9
 800b84e:	106d      	asrs	r5, r5, #1
 800b850:	429d      	cmp	r5, r3
 800b852:	bf38      	it	cc
 800b854:	461d      	movcc	r5, r3
 800b856:	0553      	lsls	r3, r2, #21
 800b858:	d527      	bpl.n	800b8aa <__ssputs_r+0x8e>
 800b85a:	4629      	mov	r1, r5
 800b85c:	f7fe fc24 	bl	800a0a8 <_malloc_r>
 800b860:	4606      	mov	r6, r0
 800b862:	b360      	cbz	r0, 800b8be <__ssputs_r+0xa2>
 800b864:	6921      	ldr	r1, [r4, #16]
 800b866:	464a      	mov	r2, r9
 800b868:	f7fd fd3b 	bl	80092e2 <memcpy>
 800b86c:	89a3      	ldrh	r3, [r4, #12]
 800b86e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b872:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b876:	81a3      	strh	r3, [r4, #12]
 800b878:	6126      	str	r6, [r4, #16]
 800b87a:	6165      	str	r5, [r4, #20]
 800b87c:	444e      	add	r6, r9
 800b87e:	eba5 0509 	sub.w	r5, r5, r9
 800b882:	6026      	str	r6, [r4, #0]
 800b884:	60a5      	str	r5, [r4, #8]
 800b886:	463e      	mov	r6, r7
 800b888:	42be      	cmp	r6, r7
 800b88a:	d900      	bls.n	800b88e <__ssputs_r+0x72>
 800b88c:	463e      	mov	r6, r7
 800b88e:	6820      	ldr	r0, [r4, #0]
 800b890:	4632      	mov	r2, r6
 800b892:	4641      	mov	r1, r8
 800b894:	f000 fd57 	bl	800c346 <memmove>
 800b898:	68a3      	ldr	r3, [r4, #8]
 800b89a:	1b9b      	subs	r3, r3, r6
 800b89c:	60a3      	str	r3, [r4, #8]
 800b89e:	6823      	ldr	r3, [r4, #0]
 800b8a0:	4433      	add	r3, r6
 800b8a2:	6023      	str	r3, [r4, #0]
 800b8a4:	2000      	movs	r0, #0
 800b8a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8aa:	462a      	mov	r2, r5
 800b8ac:	f001 f90d 	bl	800caca <_realloc_r>
 800b8b0:	4606      	mov	r6, r0
 800b8b2:	2800      	cmp	r0, #0
 800b8b4:	d1e0      	bne.n	800b878 <__ssputs_r+0x5c>
 800b8b6:	6921      	ldr	r1, [r4, #16]
 800b8b8:	4650      	mov	r0, sl
 800b8ba:	f7fe fb81 	bl	8009fc0 <_free_r>
 800b8be:	230c      	movs	r3, #12
 800b8c0:	f8ca 3000 	str.w	r3, [sl]
 800b8c4:	89a3      	ldrh	r3, [r4, #12]
 800b8c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b8ca:	81a3      	strh	r3, [r4, #12]
 800b8cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b8d0:	e7e9      	b.n	800b8a6 <__ssputs_r+0x8a>
	...

0800b8d4 <_svfiprintf_r>:
 800b8d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8d8:	4698      	mov	r8, r3
 800b8da:	898b      	ldrh	r3, [r1, #12]
 800b8dc:	061b      	lsls	r3, r3, #24
 800b8de:	b09d      	sub	sp, #116	@ 0x74
 800b8e0:	4607      	mov	r7, r0
 800b8e2:	460d      	mov	r5, r1
 800b8e4:	4614      	mov	r4, r2
 800b8e6:	d510      	bpl.n	800b90a <_svfiprintf_r+0x36>
 800b8e8:	690b      	ldr	r3, [r1, #16]
 800b8ea:	b973      	cbnz	r3, 800b90a <_svfiprintf_r+0x36>
 800b8ec:	2140      	movs	r1, #64	@ 0x40
 800b8ee:	f7fe fbdb 	bl	800a0a8 <_malloc_r>
 800b8f2:	6028      	str	r0, [r5, #0]
 800b8f4:	6128      	str	r0, [r5, #16]
 800b8f6:	b930      	cbnz	r0, 800b906 <_svfiprintf_r+0x32>
 800b8f8:	230c      	movs	r3, #12
 800b8fa:	603b      	str	r3, [r7, #0]
 800b8fc:	f04f 30ff 	mov.w	r0, #4294967295
 800b900:	b01d      	add	sp, #116	@ 0x74
 800b902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b906:	2340      	movs	r3, #64	@ 0x40
 800b908:	616b      	str	r3, [r5, #20]
 800b90a:	2300      	movs	r3, #0
 800b90c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b90e:	2320      	movs	r3, #32
 800b910:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b914:	f8cd 800c 	str.w	r8, [sp, #12]
 800b918:	2330      	movs	r3, #48	@ 0x30
 800b91a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bab8 <_svfiprintf_r+0x1e4>
 800b91e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b922:	f04f 0901 	mov.w	r9, #1
 800b926:	4623      	mov	r3, r4
 800b928:	469a      	mov	sl, r3
 800b92a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b92e:	b10a      	cbz	r2, 800b934 <_svfiprintf_r+0x60>
 800b930:	2a25      	cmp	r2, #37	@ 0x25
 800b932:	d1f9      	bne.n	800b928 <_svfiprintf_r+0x54>
 800b934:	ebba 0b04 	subs.w	fp, sl, r4
 800b938:	d00b      	beq.n	800b952 <_svfiprintf_r+0x7e>
 800b93a:	465b      	mov	r3, fp
 800b93c:	4622      	mov	r2, r4
 800b93e:	4629      	mov	r1, r5
 800b940:	4638      	mov	r0, r7
 800b942:	f7ff ff6b 	bl	800b81c <__ssputs_r>
 800b946:	3001      	adds	r0, #1
 800b948:	f000 80a7 	beq.w	800ba9a <_svfiprintf_r+0x1c6>
 800b94c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b94e:	445a      	add	r2, fp
 800b950:	9209      	str	r2, [sp, #36]	@ 0x24
 800b952:	f89a 3000 	ldrb.w	r3, [sl]
 800b956:	2b00      	cmp	r3, #0
 800b958:	f000 809f 	beq.w	800ba9a <_svfiprintf_r+0x1c6>
 800b95c:	2300      	movs	r3, #0
 800b95e:	f04f 32ff 	mov.w	r2, #4294967295
 800b962:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b966:	f10a 0a01 	add.w	sl, sl, #1
 800b96a:	9304      	str	r3, [sp, #16]
 800b96c:	9307      	str	r3, [sp, #28]
 800b96e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b972:	931a      	str	r3, [sp, #104]	@ 0x68
 800b974:	4654      	mov	r4, sl
 800b976:	2205      	movs	r2, #5
 800b978:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b97c:	484e      	ldr	r0, [pc, #312]	@ (800bab8 <_svfiprintf_r+0x1e4>)
 800b97e:	f7f4 fc27 	bl	80001d0 <memchr>
 800b982:	9a04      	ldr	r2, [sp, #16]
 800b984:	b9d8      	cbnz	r0, 800b9be <_svfiprintf_r+0xea>
 800b986:	06d0      	lsls	r0, r2, #27
 800b988:	bf44      	itt	mi
 800b98a:	2320      	movmi	r3, #32
 800b98c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b990:	0711      	lsls	r1, r2, #28
 800b992:	bf44      	itt	mi
 800b994:	232b      	movmi	r3, #43	@ 0x2b
 800b996:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b99a:	f89a 3000 	ldrb.w	r3, [sl]
 800b99e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b9a0:	d015      	beq.n	800b9ce <_svfiprintf_r+0xfa>
 800b9a2:	9a07      	ldr	r2, [sp, #28]
 800b9a4:	4654      	mov	r4, sl
 800b9a6:	2000      	movs	r0, #0
 800b9a8:	f04f 0c0a 	mov.w	ip, #10
 800b9ac:	4621      	mov	r1, r4
 800b9ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b9b2:	3b30      	subs	r3, #48	@ 0x30
 800b9b4:	2b09      	cmp	r3, #9
 800b9b6:	d94b      	bls.n	800ba50 <_svfiprintf_r+0x17c>
 800b9b8:	b1b0      	cbz	r0, 800b9e8 <_svfiprintf_r+0x114>
 800b9ba:	9207      	str	r2, [sp, #28]
 800b9bc:	e014      	b.n	800b9e8 <_svfiprintf_r+0x114>
 800b9be:	eba0 0308 	sub.w	r3, r0, r8
 800b9c2:	fa09 f303 	lsl.w	r3, r9, r3
 800b9c6:	4313      	orrs	r3, r2
 800b9c8:	9304      	str	r3, [sp, #16]
 800b9ca:	46a2      	mov	sl, r4
 800b9cc:	e7d2      	b.n	800b974 <_svfiprintf_r+0xa0>
 800b9ce:	9b03      	ldr	r3, [sp, #12]
 800b9d0:	1d19      	adds	r1, r3, #4
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	9103      	str	r1, [sp, #12]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	bfbb      	ittet	lt
 800b9da:	425b      	neglt	r3, r3
 800b9dc:	f042 0202 	orrlt.w	r2, r2, #2
 800b9e0:	9307      	strge	r3, [sp, #28]
 800b9e2:	9307      	strlt	r3, [sp, #28]
 800b9e4:	bfb8      	it	lt
 800b9e6:	9204      	strlt	r2, [sp, #16]
 800b9e8:	7823      	ldrb	r3, [r4, #0]
 800b9ea:	2b2e      	cmp	r3, #46	@ 0x2e
 800b9ec:	d10a      	bne.n	800ba04 <_svfiprintf_r+0x130>
 800b9ee:	7863      	ldrb	r3, [r4, #1]
 800b9f0:	2b2a      	cmp	r3, #42	@ 0x2a
 800b9f2:	d132      	bne.n	800ba5a <_svfiprintf_r+0x186>
 800b9f4:	9b03      	ldr	r3, [sp, #12]
 800b9f6:	1d1a      	adds	r2, r3, #4
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	9203      	str	r2, [sp, #12]
 800b9fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ba00:	3402      	adds	r4, #2
 800ba02:	9305      	str	r3, [sp, #20]
 800ba04:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bac8 <_svfiprintf_r+0x1f4>
 800ba08:	7821      	ldrb	r1, [r4, #0]
 800ba0a:	2203      	movs	r2, #3
 800ba0c:	4650      	mov	r0, sl
 800ba0e:	f7f4 fbdf 	bl	80001d0 <memchr>
 800ba12:	b138      	cbz	r0, 800ba24 <_svfiprintf_r+0x150>
 800ba14:	9b04      	ldr	r3, [sp, #16]
 800ba16:	eba0 000a 	sub.w	r0, r0, sl
 800ba1a:	2240      	movs	r2, #64	@ 0x40
 800ba1c:	4082      	lsls	r2, r0
 800ba1e:	4313      	orrs	r3, r2
 800ba20:	3401      	adds	r4, #1
 800ba22:	9304      	str	r3, [sp, #16]
 800ba24:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba28:	4824      	ldr	r0, [pc, #144]	@ (800babc <_svfiprintf_r+0x1e8>)
 800ba2a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ba2e:	2206      	movs	r2, #6
 800ba30:	f7f4 fbce 	bl	80001d0 <memchr>
 800ba34:	2800      	cmp	r0, #0
 800ba36:	d036      	beq.n	800baa6 <_svfiprintf_r+0x1d2>
 800ba38:	4b21      	ldr	r3, [pc, #132]	@ (800bac0 <_svfiprintf_r+0x1ec>)
 800ba3a:	bb1b      	cbnz	r3, 800ba84 <_svfiprintf_r+0x1b0>
 800ba3c:	9b03      	ldr	r3, [sp, #12]
 800ba3e:	3307      	adds	r3, #7
 800ba40:	f023 0307 	bic.w	r3, r3, #7
 800ba44:	3308      	adds	r3, #8
 800ba46:	9303      	str	r3, [sp, #12]
 800ba48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba4a:	4433      	add	r3, r6
 800ba4c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba4e:	e76a      	b.n	800b926 <_svfiprintf_r+0x52>
 800ba50:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba54:	460c      	mov	r4, r1
 800ba56:	2001      	movs	r0, #1
 800ba58:	e7a8      	b.n	800b9ac <_svfiprintf_r+0xd8>
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	3401      	adds	r4, #1
 800ba5e:	9305      	str	r3, [sp, #20]
 800ba60:	4619      	mov	r1, r3
 800ba62:	f04f 0c0a 	mov.w	ip, #10
 800ba66:	4620      	mov	r0, r4
 800ba68:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba6c:	3a30      	subs	r2, #48	@ 0x30
 800ba6e:	2a09      	cmp	r2, #9
 800ba70:	d903      	bls.n	800ba7a <_svfiprintf_r+0x1a6>
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d0c6      	beq.n	800ba04 <_svfiprintf_r+0x130>
 800ba76:	9105      	str	r1, [sp, #20]
 800ba78:	e7c4      	b.n	800ba04 <_svfiprintf_r+0x130>
 800ba7a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ba7e:	4604      	mov	r4, r0
 800ba80:	2301      	movs	r3, #1
 800ba82:	e7f0      	b.n	800ba66 <_svfiprintf_r+0x192>
 800ba84:	ab03      	add	r3, sp, #12
 800ba86:	9300      	str	r3, [sp, #0]
 800ba88:	462a      	mov	r2, r5
 800ba8a:	4b0e      	ldr	r3, [pc, #56]	@ (800bac4 <_svfiprintf_r+0x1f0>)
 800ba8c:	a904      	add	r1, sp, #16
 800ba8e:	4638      	mov	r0, r7
 800ba90:	f7fc fc7e 	bl	8008390 <_printf_float>
 800ba94:	1c42      	adds	r2, r0, #1
 800ba96:	4606      	mov	r6, r0
 800ba98:	d1d6      	bne.n	800ba48 <_svfiprintf_r+0x174>
 800ba9a:	89ab      	ldrh	r3, [r5, #12]
 800ba9c:	065b      	lsls	r3, r3, #25
 800ba9e:	f53f af2d 	bmi.w	800b8fc <_svfiprintf_r+0x28>
 800baa2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800baa4:	e72c      	b.n	800b900 <_svfiprintf_r+0x2c>
 800baa6:	ab03      	add	r3, sp, #12
 800baa8:	9300      	str	r3, [sp, #0]
 800baaa:	462a      	mov	r2, r5
 800baac:	4b05      	ldr	r3, [pc, #20]	@ (800bac4 <_svfiprintf_r+0x1f0>)
 800baae:	a904      	add	r1, sp, #16
 800bab0:	4638      	mov	r0, r7
 800bab2:	f7fc ff05 	bl	80088c0 <_printf_i>
 800bab6:	e7ed      	b.n	800ba94 <_svfiprintf_r+0x1c0>
 800bab8:	0800da0f 	.word	0x0800da0f
 800babc:	0800da19 	.word	0x0800da19
 800bac0:	08008391 	.word	0x08008391
 800bac4:	0800b81d 	.word	0x0800b81d
 800bac8:	0800da15 	.word	0x0800da15

0800bacc <_sungetc_r>:
 800bacc:	b538      	push	{r3, r4, r5, lr}
 800bace:	1c4b      	adds	r3, r1, #1
 800bad0:	4614      	mov	r4, r2
 800bad2:	d103      	bne.n	800badc <_sungetc_r+0x10>
 800bad4:	f04f 35ff 	mov.w	r5, #4294967295
 800bad8:	4628      	mov	r0, r5
 800bada:	bd38      	pop	{r3, r4, r5, pc}
 800badc:	8993      	ldrh	r3, [r2, #12]
 800bade:	f023 0320 	bic.w	r3, r3, #32
 800bae2:	8193      	strh	r3, [r2, #12]
 800bae4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bae6:	6852      	ldr	r2, [r2, #4]
 800bae8:	b2cd      	uxtb	r5, r1
 800baea:	b18b      	cbz	r3, 800bb10 <_sungetc_r+0x44>
 800baec:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800baee:	4293      	cmp	r3, r2
 800baf0:	dd08      	ble.n	800bb04 <_sungetc_r+0x38>
 800baf2:	6823      	ldr	r3, [r4, #0]
 800baf4:	1e5a      	subs	r2, r3, #1
 800baf6:	6022      	str	r2, [r4, #0]
 800baf8:	f803 5c01 	strb.w	r5, [r3, #-1]
 800bafc:	6863      	ldr	r3, [r4, #4]
 800bafe:	3301      	adds	r3, #1
 800bb00:	6063      	str	r3, [r4, #4]
 800bb02:	e7e9      	b.n	800bad8 <_sungetc_r+0xc>
 800bb04:	4621      	mov	r1, r4
 800bb06:	f000 fbe4 	bl	800c2d2 <__submore>
 800bb0a:	2800      	cmp	r0, #0
 800bb0c:	d0f1      	beq.n	800baf2 <_sungetc_r+0x26>
 800bb0e:	e7e1      	b.n	800bad4 <_sungetc_r+0x8>
 800bb10:	6921      	ldr	r1, [r4, #16]
 800bb12:	6823      	ldr	r3, [r4, #0]
 800bb14:	b151      	cbz	r1, 800bb2c <_sungetc_r+0x60>
 800bb16:	4299      	cmp	r1, r3
 800bb18:	d208      	bcs.n	800bb2c <_sungetc_r+0x60>
 800bb1a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800bb1e:	42a9      	cmp	r1, r5
 800bb20:	d104      	bne.n	800bb2c <_sungetc_r+0x60>
 800bb22:	3b01      	subs	r3, #1
 800bb24:	3201      	adds	r2, #1
 800bb26:	6023      	str	r3, [r4, #0]
 800bb28:	6062      	str	r2, [r4, #4]
 800bb2a:	e7d5      	b.n	800bad8 <_sungetc_r+0xc>
 800bb2c:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 800bb30:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bb34:	6363      	str	r3, [r4, #52]	@ 0x34
 800bb36:	2303      	movs	r3, #3
 800bb38:	63a3      	str	r3, [r4, #56]	@ 0x38
 800bb3a:	4623      	mov	r3, r4
 800bb3c:	f803 5f46 	strb.w	r5, [r3, #70]!
 800bb40:	6023      	str	r3, [r4, #0]
 800bb42:	2301      	movs	r3, #1
 800bb44:	e7dc      	b.n	800bb00 <_sungetc_r+0x34>

0800bb46 <__ssrefill_r>:
 800bb46:	b510      	push	{r4, lr}
 800bb48:	460c      	mov	r4, r1
 800bb4a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800bb4c:	b169      	cbz	r1, 800bb6a <__ssrefill_r+0x24>
 800bb4e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bb52:	4299      	cmp	r1, r3
 800bb54:	d001      	beq.n	800bb5a <__ssrefill_r+0x14>
 800bb56:	f7fe fa33 	bl	8009fc0 <_free_r>
 800bb5a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bb5c:	6063      	str	r3, [r4, #4]
 800bb5e:	2000      	movs	r0, #0
 800bb60:	6360      	str	r0, [r4, #52]	@ 0x34
 800bb62:	b113      	cbz	r3, 800bb6a <__ssrefill_r+0x24>
 800bb64:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800bb66:	6023      	str	r3, [r4, #0]
 800bb68:	bd10      	pop	{r4, pc}
 800bb6a:	6923      	ldr	r3, [r4, #16]
 800bb6c:	6023      	str	r3, [r4, #0]
 800bb6e:	2300      	movs	r3, #0
 800bb70:	6063      	str	r3, [r4, #4]
 800bb72:	89a3      	ldrh	r3, [r4, #12]
 800bb74:	f043 0320 	orr.w	r3, r3, #32
 800bb78:	81a3      	strh	r3, [r4, #12]
 800bb7a:	f04f 30ff 	mov.w	r0, #4294967295
 800bb7e:	e7f3      	b.n	800bb68 <__ssrefill_r+0x22>

0800bb80 <__ssvfiscanf_r>:
 800bb80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb84:	460c      	mov	r4, r1
 800bb86:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 800bb8a:	2100      	movs	r1, #0
 800bb8c:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800bb90:	49a6      	ldr	r1, [pc, #664]	@ (800be2c <__ssvfiscanf_r+0x2ac>)
 800bb92:	91a0      	str	r1, [sp, #640]	@ 0x280
 800bb94:	f10d 0804 	add.w	r8, sp, #4
 800bb98:	49a5      	ldr	r1, [pc, #660]	@ (800be30 <__ssvfiscanf_r+0x2b0>)
 800bb9a:	4fa6      	ldr	r7, [pc, #664]	@ (800be34 <__ssvfiscanf_r+0x2b4>)
 800bb9c:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800bba0:	4606      	mov	r6, r0
 800bba2:	91a1      	str	r1, [sp, #644]	@ 0x284
 800bba4:	9300      	str	r3, [sp, #0]
 800bba6:	f892 9000 	ldrb.w	r9, [r2]
 800bbaa:	f1b9 0f00 	cmp.w	r9, #0
 800bbae:	f000 8158 	beq.w	800be62 <__ssvfiscanf_r+0x2e2>
 800bbb2:	f817 3009 	ldrb.w	r3, [r7, r9]
 800bbb6:	f013 0308 	ands.w	r3, r3, #8
 800bbba:	f102 0501 	add.w	r5, r2, #1
 800bbbe:	d019      	beq.n	800bbf4 <__ssvfiscanf_r+0x74>
 800bbc0:	6863      	ldr	r3, [r4, #4]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	dd0f      	ble.n	800bbe6 <__ssvfiscanf_r+0x66>
 800bbc6:	6823      	ldr	r3, [r4, #0]
 800bbc8:	781a      	ldrb	r2, [r3, #0]
 800bbca:	5cba      	ldrb	r2, [r7, r2]
 800bbcc:	0712      	lsls	r2, r2, #28
 800bbce:	d401      	bmi.n	800bbd4 <__ssvfiscanf_r+0x54>
 800bbd0:	462a      	mov	r2, r5
 800bbd2:	e7e8      	b.n	800bba6 <__ssvfiscanf_r+0x26>
 800bbd4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800bbd6:	3201      	adds	r2, #1
 800bbd8:	9245      	str	r2, [sp, #276]	@ 0x114
 800bbda:	6862      	ldr	r2, [r4, #4]
 800bbdc:	3301      	adds	r3, #1
 800bbde:	3a01      	subs	r2, #1
 800bbe0:	6062      	str	r2, [r4, #4]
 800bbe2:	6023      	str	r3, [r4, #0]
 800bbe4:	e7ec      	b.n	800bbc0 <__ssvfiscanf_r+0x40>
 800bbe6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800bbe8:	4621      	mov	r1, r4
 800bbea:	4630      	mov	r0, r6
 800bbec:	4798      	blx	r3
 800bbee:	2800      	cmp	r0, #0
 800bbf0:	d0e9      	beq.n	800bbc6 <__ssvfiscanf_r+0x46>
 800bbf2:	e7ed      	b.n	800bbd0 <__ssvfiscanf_r+0x50>
 800bbf4:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 800bbf8:	f040 8085 	bne.w	800bd06 <__ssvfiscanf_r+0x186>
 800bbfc:	9341      	str	r3, [sp, #260]	@ 0x104
 800bbfe:	9343      	str	r3, [sp, #268]	@ 0x10c
 800bc00:	7853      	ldrb	r3, [r2, #1]
 800bc02:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc04:	bf02      	ittt	eq
 800bc06:	2310      	moveq	r3, #16
 800bc08:	1c95      	addeq	r5, r2, #2
 800bc0a:	9341      	streq	r3, [sp, #260]	@ 0x104
 800bc0c:	220a      	movs	r2, #10
 800bc0e:	46aa      	mov	sl, r5
 800bc10:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800bc14:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800bc18:	2b09      	cmp	r3, #9
 800bc1a:	d91e      	bls.n	800bc5a <__ssvfiscanf_r+0xda>
 800bc1c:	f8df b218 	ldr.w	fp, [pc, #536]	@ 800be38 <__ssvfiscanf_r+0x2b8>
 800bc20:	2203      	movs	r2, #3
 800bc22:	4658      	mov	r0, fp
 800bc24:	f7f4 fad4 	bl	80001d0 <memchr>
 800bc28:	b138      	cbz	r0, 800bc3a <__ssvfiscanf_r+0xba>
 800bc2a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800bc2c:	eba0 000b 	sub.w	r0, r0, fp
 800bc30:	2301      	movs	r3, #1
 800bc32:	4083      	lsls	r3, r0
 800bc34:	4313      	orrs	r3, r2
 800bc36:	9341      	str	r3, [sp, #260]	@ 0x104
 800bc38:	4655      	mov	r5, sl
 800bc3a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bc3e:	2b78      	cmp	r3, #120	@ 0x78
 800bc40:	d806      	bhi.n	800bc50 <__ssvfiscanf_r+0xd0>
 800bc42:	2b57      	cmp	r3, #87	@ 0x57
 800bc44:	d810      	bhi.n	800bc68 <__ssvfiscanf_r+0xe8>
 800bc46:	2b25      	cmp	r3, #37	@ 0x25
 800bc48:	d05d      	beq.n	800bd06 <__ssvfiscanf_r+0x186>
 800bc4a:	d857      	bhi.n	800bcfc <__ssvfiscanf_r+0x17c>
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d075      	beq.n	800bd3c <__ssvfiscanf_r+0x1bc>
 800bc50:	2303      	movs	r3, #3
 800bc52:	9347      	str	r3, [sp, #284]	@ 0x11c
 800bc54:	230a      	movs	r3, #10
 800bc56:	9342      	str	r3, [sp, #264]	@ 0x108
 800bc58:	e088      	b.n	800bd6c <__ssvfiscanf_r+0x1ec>
 800bc5a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800bc5c:	fb02 1103 	mla	r1, r2, r3, r1
 800bc60:	3930      	subs	r1, #48	@ 0x30
 800bc62:	9143      	str	r1, [sp, #268]	@ 0x10c
 800bc64:	4655      	mov	r5, sl
 800bc66:	e7d2      	b.n	800bc0e <__ssvfiscanf_r+0x8e>
 800bc68:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800bc6c:	2a20      	cmp	r2, #32
 800bc6e:	d8ef      	bhi.n	800bc50 <__ssvfiscanf_r+0xd0>
 800bc70:	a101      	add	r1, pc, #4	@ (adr r1, 800bc78 <__ssvfiscanf_r+0xf8>)
 800bc72:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800bc76:	bf00      	nop
 800bc78:	0800bd4b 	.word	0x0800bd4b
 800bc7c:	0800bc51 	.word	0x0800bc51
 800bc80:	0800bc51 	.word	0x0800bc51
 800bc84:	0800bda5 	.word	0x0800bda5
 800bc88:	0800bc51 	.word	0x0800bc51
 800bc8c:	0800bc51 	.word	0x0800bc51
 800bc90:	0800bc51 	.word	0x0800bc51
 800bc94:	0800bc51 	.word	0x0800bc51
 800bc98:	0800bc51 	.word	0x0800bc51
 800bc9c:	0800bc51 	.word	0x0800bc51
 800bca0:	0800bc51 	.word	0x0800bc51
 800bca4:	0800bdbb 	.word	0x0800bdbb
 800bca8:	0800bda1 	.word	0x0800bda1
 800bcac:	0800bd03 	.word	0x0800bd03
 800bcb0:	0800bd03 	.word	0x0800bd03
 800bcb4:	0800bd03 	.word	0x0800bd03
 800bcb8:	0800bc51 	.word	0x0800bc51
 800bcbc:	0800bd5d 	.word	0x0800bd5d
 800bcc0:	0800bc51 	.word	0x0800bc51
 800bcc4:	0800bc51 	.word	0x0800bc51
 800bcc8:	0800bc51 	.word	0x0800bc51
 800bccc:	0800bc51 	.word	0x0800bc51
 800bcd0:	0800bdcb 	.word	0x0800bdcb
 800bcd4:	0800bd65 	.word	0x0800bd65
 800bcd8:	0800bd43 	.word	0x0800bd43
 800bcdc:	0800bc51 	.word	0x0800bc51
 800bce0:	0800bc51 	.word	0x0800bc51
 800bce4:	0800bdc7 	.word	0x0800bdc7
 800bce8:	0800bc51 	.word	0x0800bc51
 800bcec:	0800bda1 	.word	0x0800bda1
 800bcf0:	0800bc51 	.word	0x0800bc51
 800bcf4:	0800bc51 	.word	0x0800bc51
 800bcf8:	0800bd4b 	.word	0x0800bd4b
 800bcfc:	3b45      	subs	r3, #69	@ 0x45
 800bcfe:	2b02      	cmp	r3, #2
 800bd00:	d8a6      	bhi.n	800bc50 <__ssvfiscanf_r+0xd0>
 800bd02:	2305      	movs	r3, #5
 800bd04:	e031      	b.n	800bd6a <__ssvfiscanf_r+0x1ea>
 800bd06:	6863      	ldr	r3, [r4, #4]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	dd0d      	ble.n	800bd28 <__ssvfiscanf_r+0x1a8>
 800bd0c:	6823      	ldr	r3, [r4, #0]
 800bd0e:	781a      	ldrb	r2, [r3, #0]
 800bd10:	454a      	cmp	r2, r9
 800bd12:	f040 80a6 	bne.w	800be62 <__ssvfiscanf_r+0x2e2>
 800bd16:	3301      	adds	r3, #1
 800bd18:	6862      	ldr	r2, [r4, #4]
 800bd1a:	6023      	str	r3, [r4, #0]
 800bd1c:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800bd1e:	3a01      	subs	r2, #1
 800bd20:	3301      	adds	r3, #1
 800bd22:	6062      	str	r2, [r4, #4]
 800bd24:	9345      	str	r3, [sp, #276]	@ 0x114
 800bd26:	e753      	b.n	800bbd0 <__ssvfiscanf_r+0x50>
 800bd28:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800bd2a:	4621      	mov	r1, r4
 800bd2c:	4630      	mov	r0, r6
 800bd2e:	4798      	blx	r3
 800bd30:	2800      	cmp	r0, #0
 800bd32:	d0eb      	beq.n	800bd0c <__ssvfiscanf_r+0x18c>
 800bd34:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800bd36:	2800      	cmp	r0, #0
 800bd38:	f040 808b 	bne.w	800be52 <__ssvfiscanf_r+0x2d2>
 800bd3c:	f04f 30ff 	mov.w	r0, #4294967295
 800bd40:	e08b      	b.n	800be5a <__ssvfiscanf_r+0x2da>
 800bd42:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800bd44:	f042 0220 	orr.w	r2, r2, #32
 800bd48:	9241      	str	r2, [sp, #260]	@ 0x104
 800bd4a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800bd4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bd50:	9241      	str	r2, [sp, #260]	@ 0x104
 800bd52:	2210      	movs	r2, #16
 800bd54:	2b6e      	cmp	r3, #110	@ 0x6e
 800bd56:	9242      	str	r2, [sp, #264]	@ 0x108
 800bd58:	d902      	bls.n	800bd60 <__ssvfiscanf_r+0x1e0>
 800bd5a:	e005      	b.n	800bd68 <__ssvfiscanf_r+0x1e8>
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	9342      	str	r3, [sp, #264]	@ 0x108
 800bd60:	2303      	movs	r3, #3
 800bd62:	e002      	b.n	800bd6a <__ssvfiscanf_r+0x1ea>
 800bd64:	2308      	movs	r3, #8
 800bd66:	9342      	str	r3, [sp, #264]	@ 0x108
 800bd68:	2304      	movs	r3, #4
 800bd6a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800bd6c:	6863      	ldr	r3, [r4, #4]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	dd39      	ble.n	800bde6 <__ssvfiscanf_r+0x266>
 800bd72:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800bd74:	0659      	lsls	r1, r3, #25
 800bd76:	d404      	bmi.n	800bd82 <__ssvfiscanf_r+0x202>
 800bd78:	6823      	ldr	r3, [r4, #0]
 800bd7a:	781a      	ldrb	r2, [r3, #0]
 800bd7c:	5cba      	ldrb	r2, [r7, r2]
 800bd7e:	0712      	lsls	r2, r2, #28
 800bd80:	d438      	bmi.n	800bdf4 <__ssvfiscanf_r+0x274>
 800bd82:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800bd84:	2b02      	cmp	r3, #2
 800bd86:	dc47      	bgt.n	800be18 <__ssvfiscanf_r+0x298>
 800bd88:	466b      	mov	r3, sp
 800bd8a:	4622      	mov	r2, r4
 800bd8c:	a941      	add	r1, sp, #260	@ 0x104
 800bd8e:	4630      	mov	r0, r6
 800bd90:	f000 f86c 	bl	800be6c <_scanf_chars>
 800bd94:	2801      	cmp	r0, #1
 800bd96:	d064      	beq.n	800be62 <__ssvfiscanf_r+0x2e2>
 800bd98:	2802      	cmp	r0, #2
 800bd9a:	f47f af19 	bne.w	800bbd0 <__ssvfiscanf_r+0x50>
 800bd9e:	e7c9      	b.n	800bd34 <__ssvfiscanf_r+0x1b4>
 800bda0:	220a      	movs	r2, #10
 800bda2:	e7d7      	b.n	800bd54 <__ssvfiscanf_r+0x1d4>
 800bda4:	4629      	mov	r1, r5
 800bda6:	4640      	mov	r0, r8
 800bda8:	f000 fa5a 	bl	800c260 <__sccl>
 800bdac:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800bdae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bdb2:	9341      	str	r3, [sp, #260]	@ 0x104
 800bdb4:	4605      	mov	r5, r0
 800bdb6:	2301      	movs	r3, #1
 800bdb8:	e7d7      	b.n	800bd6a <__ssvfiscanf_r+0x1ea>
 800bdba:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800bdbc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bdc0:	9341      	str	r3, [sp, #260]	@ 0x104
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	e7d1      	b.n	800bd6a <__ssvfiscanf_r+0x1ea>
 800bdc6:	2302      	movs	r3, #2
 800bdc8:	e7cf      	b.n	800bd6a <__ssvfiscanf_r+0x1ea>
 800bdca:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800bdcc:	06c3      	lsls	r3, r0, #27
 800bdce:	f53f aeff 	bmi.w	800bbd0 <__ssvfiscanf_r+0x50>
 800bdd2:	9b00      	ldr	r3, [sp, #0]
 800bdd4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800bdd6:	1d19      	adds	r1, r3, #4
 800bdd8:	9100      	str	r1, [sp, #0]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	07c0      	lsls	r0, r0, #31
 800bdde:	bf4c      	ite	mi
 800bde0:	801a      	strhmi	r2, [r3, #0]
 800bde2:	601a      	strpl	r2, [r3, #0]
 800bde4:	e6f4      	b.n	800bbd0 <__ssvfiscanf_r+0x50>
 800bde6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800bde8:	4621      	mov	r1, r4
 800bdea:	4630      	mov	r0, r6
 800bdec:	4798      	blx	r3
 800bdee:	2800      	cmp	r0, #0
 800bdf0:	d0bf      	beq.n	800bd72 <__ssvfiscanf_r+0x1f2>
 800bdf2:	e79f      	b.n	800bd34 <__ssvfiscanf_r+0x1b4>
 800bdf4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800bdf6:	3201      	adds	r2, #1
 800bdf8:	9245      	str	r2, [sp, #276]	@ 0x114
 800bdfa:	6862      	ldr	r2, [r4, #4]
 800bdfc:	3a01      	subs	r2, #1
 800bdfe:	2a00      	cmp	r2, #0
 800be00:	6062      	str	r2, [r4, #4]
 800be02:	dd02      	ble.n	800be0a <__ssvfiscanf_r+0x28a>
 800be04:	3301      	adds	r3, #1
 800be06:	6023      	str	r3, [r4, #0]
 800be08:	e7b6      	b.n	800bd78 <__ssvfiscanf_r+0x1f8>
 800be0a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800be0c:	4621      	mov	r1, r4
 800be0e:	4630      	mov	r0, r6
 800be10:	4798      	blx	r3
 800be12:	2800      	cmp	r0, #0
 800be14:	d0b0      	beq.n	800bd78 <__ssvfiscanf_r+0x1f8>
 800be16:	e78d      	b.n	800bd34 <__ssvfiscanf_r+0x1b4>
 800be18:	2b04      	cmp	r3, #4
 800be1a:	dc0f      	bgt.n	800be3c <__ssvfiscanf_r+0x2bc>
 800be1c:	466b      	mov	r3, sp
 800be1e:	4622      	mov	r2, r4
 800be20:	a941      	add	r1, sp, #260	@ 0x104
 800be22:	4630      	mov	r0, r6
 800be24:	f000 f87c 	bl	800bf20 <_scanf_i>
 800be28:	e7b4      	b.n	800bd94 <__ssvfiscanf_r+0x214>
 800be2a:	bf00      	nop
 800be2c:	0800bacd 	.word	0x0800bacd
 800be30:	0800bb47 	.word	0x0800bb47
 800be34:	0800dc31 	.word	0x0800dc31
 800be38:	0800da15 	.word	0x0800da15
 800be3c:	4b0a      	ldr	r3, [pc, #40]	@ (800be68 <__ssvfiscanf_r+0x2e8>)
 800be3e:	2b00      	cmp	r3, #0
 800be40:	f43f aec6 	beq.w	800bbd0 <__ssvfiscanf_r+0x50>
 800be44:	466b      	mov	r3, sp
 800be46:	4622      	mov	r2, r4
 800be48:	a941      	add	r1, sp, #260	@ 0x104
 800be4a:	4630      	mov	r0, r6
 800be4c:	f7fc fe56 	bl	8008afc <_scanf_float>
 800be50:	e7a0      	b.n	800bd94 <__ssvfiscanf_r+0x214>
 800be52:	89a3      	ldrh	r3, [r4, #12]
 800be54:	065b      	lsls	r3, r3, #25
 800be56:	f53f af71 	bmi.w	800bd3c <__ssvfiscanf_r+0x1bc>
 800be5a:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 800be5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be62:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800be64:	e7f9      	b.n	800be5a <__ssvfiscanf_r+0x2da>
 800be66:	bf00      	nop
 800be68:	08008afd 	.word	0x08008afd

0800be6c <_scanf_chars>:
 800be6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be70:	4615      	mov	r5, r2
 800be72:	688a      	ldr	r2, [r1, #8]
 800be74:	4680      	mov	r8, r0
 800be76:	460c      	mov	r4, r1
 800be78:	b932      	cbnz	r2, 800be88 <_scanf_chars+0x1c>
 800be7a:	698a      	ldr	r2, [r1, #24]
 800be7c:	2a00      	cmp	r2, #0
 800be7e:	bf14      	ite	ne
 800be80:	f04f 32ff 	movne.w	r2, #4294967295
 800be84:	2201      	moveq	r2, #1
 800be86:	608a      	str	r2, [r1, #8]
 800be88:	6822      	ldr	r2, [r4, #0]
 800be8a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800bf1c <_scanf_chars+0xb0>
 800be8e:	06d1      	lsls	r1, r2, #27
 800be90:	bf5f      	itttt	pl
 800be92:	681a      	ldrpl	r2, [r3, #0]
 800be94:	1d11      	addpl	r1, r2, #4
 800be96:	6019      	strpl	r1, [r3, #0]
 800be98:	6816      	ldrpl	r6, [r2, #0]
 800be9a:	2700      	movs	r7, #0
 800be9c:	69a0      	ldr	r0, [r4, #24]
 800be9e:	b188      	cbz	r0, 800bec4 <_scanf_chars+0x58>
 800bea0:	2801      	cmp	r0, #1
 800bea2:	d107      	bne.n	800beb4 <_scanf_chars+0x48>
 800bea4:	682b      	ldr	r3, [r5, #0]
 800bea6:	781a      	ldrb	r2, [r3, #0]
 800bea8:	6963      	ldr	r3, [r4, #20]
 800beaa:	5c9b      	ldrb	r3, [r3, r2]
 800beac:	b953      	cbnz	r3, 800bec4 <_scanf_chars+0x58>
 800beae:	2f00      	cmp	r7, #0
 800beb0:	d031      	beq.n	800bf16 <_scanf_chars+0xaa>
 800beb2:	e022      	b.n	800befa <_scanf_chars+0x8e>
 800beb4:	2802      	cmp	r0, #2
 800beb6:	d120      	bne.n	800befa <_scanf_chars+0x8e>
 800beb8:	682b      	ldr	r3, [r5, #0]
 800beba:	781b      	ldrb	r3, [r3, #0]
 800bebc:	f819 3003 	ldrb.w	r3, [r9, r3]
 800bec0:	071b      	lsls	r3, r3, #28
 800bec2:	d41a      	bmi.n	800befa <_scanf_chars+0x8e>
 800bec4:	6823      	ldr	r3, [r4, #0]
 800bec6:	06da      	lsls	r2, r3, #27
 800bec8:	bf5e      	ittt	pl
 800beca:	682b      	ldrpl	r3, [r5, #0]
 800becc:	781b      	ldrbpl	r3, [r3, #0]
 800bece:	f806 3b01 	strbpl.w	r3, [r6], #1
 800bed2:	682a      	ldr	r2, [r5, #0]
 800bed4:	686b      	ldr	r3, [r5, #4]
 800bed6:	3201      	adds	r2, #1
 800bed8:	602a      	str	r2, [r5, #0]
 800beda:	68a2      	ldr	r2, [r4, #8]
 800bedc:	3b01      	subs	r3, #1
 800bede:	3a01      	subs	r2, #1
 800bee0:	606b      	str	r3, [r5, #4]
 800bee2:	3701      	adds	r7, #1
 800bee4:	60a2      	str	r2, [r4, #8]
 800bee6:	b142      	cbz	r2, 800befa <_scanf_chars+0x8e>
 800bee8:	2b00      	cmp	r3, #0
 800beea:	dcd7      	bgt.n	800be9c <_scanf_chars+0x30>
 800beec:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800bef0:	4629      	mov	r1, r5
 800bef2:	4640      	mov	r0, r8
 800bef4:	4798      	blx	r3
 800bef6:	2800      	cmp	r0, #0
 800bef8:	d0d0      	beq.n	800be9c <_scanf_chars+0x30>
 800befa:	6823      	ldr	r3, [r4, #0]
 800befc:	f013 0310 	ands.w	r3, r3, #16
 800bf00:	d105      	bne.n	800bf0e <_scanf_chars+0xa2>
 800bf02:	68e2      	ldr	r2, [r4, #12]
 800bf04:	3201      	adds	r2, #1
 800bf06:	60e2      	str	r2, [r4, #12]
 800bf08:	69a2      	ldr	r2, [r4, #24]
 800bf0a:	b102      	cbz	r2, 800bf0e <_scanf_chars+0xa2>
 800bf0c:	7033      	strb	r3, [r6, #0]
 800bf0e:	6923      	ldr	r3, [r4, #16]
 800bf10:	443b      	add	r3, r7
 800bf12:	6123      	str	r3, [r4, #16]
 800bf14:	2000      	movs	r0, #0
 800bf16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf1a:	bf00      	nop
 800bf1c:	0800dc31 	.word	0x0800dc31

0800bf20 <_scanf_i>:
 800bf20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf24:	4698      	mov	r8, r3
 800bf26:	4b74      	ldr	r3, [pc, #464]	@ (800c0f8 <_scanf_i+0x1d8>)
 800bf28:	460c      	mov	r4, r1
 800bf2a:	4682      	mov	sl, r0
 800bf2c:	4616      	mov	r6, r2
 800bf2e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bf32:	b087      	sub	sp, #28
 800bf34:	ab03      	add	r3, sp, #12
 800bf36:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800bf3a:	4b70      	ldr	r3, [pc, #448]	@ (800c0fc <_scanf_i+0x1dc>)
 800bf3c:	69a1      	ldr	r1, [r4, #24]
 800bf3e:	4a70      	ldr	r2, [pc, #448]	@ (800c100 <_scanf_i+0x1e0>)
 800bf40:	2903      	cmp	r1, #3
 800bf42:	bf08      	it	eq
 800bf44:	461a      	moveq	r2, r3
 800bf46:	68a3      	ldr	r3, [r4, #8]
 800bf48:	9201      	str	r2, [sp, #4]
 800bf4a:	1e5a      	subs	r2, r3, #1
 800bf4c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800bf50:	bf88      	it	hi
 800bf52:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800bf56:	4627      	mov	r7, r4
 800bf58:	bf82      	ittt	hi
 800bf5a:	eb03 0905 	addhi.w	r9, r3, r5
 800bf5e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800bf62:	60a3      	strhi	r3, [r4, #8]
 800bf64:	f857 3b1c 	ldr.w	r3, [r7], #28
 800bf68:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800bf6c:	bf98      	it	ls
 800bf6e:	f04f 0900 	movls.w	r9, #0
 800bf72:	6023      	str	r3, [r4, #0]
 800bf74:	463d      	mov	r5, r7
 800bf76:	f04f 0b00 	mov.w	fp, #0
 800bf7a:	6831      	ldr	r1, [r6, #0]
 800bf7c:	ab03      	add	r3, sp, #12
 800bf7e:	7809      	ldrb	r1, [r1, #0]
 800bf80:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800bf84:	2202      	movs	r2, #2
 800bf86:	f7f4 f923 	bl	80001d0 <memchr>
 800bf8a:	b328      	cbz	r0, 800bfd8 <_scanf_i+0xb8>
 800bf8c:	f1bb 0f01 	cmp.w	fp, #1
 800bf90:	d159      	bne.n	800c046 <_scanf_i+0x126>
 800bf92:	6862      	ldr	r2, [r4, #4]
 800bf94:	b92a      	cbnz	r2, 800bfa2 <_scanf_i+0x82>
 800bf96:	6822      	ldr	r2, [r4, #0]
 800bf98:	2108      	movs	r1, #8
 800bf9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bf9e:	6061      	str	r1, [r4, #4]
 800bfa0:	6022      	str	r2, [r4, #0]
 800bfa2:	6822      	ldr	r2, [r4, #0]
 800bfa4:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800bfa8:	6022      	str	r2, [r4, #0]
 800bfaa:	68a2      	ldr	r2, [r4, #8]
 800bfac:	1e51      	subs	r1, r2, #1
 800bfae:	60a1      	str	r1, [r4, #8]
 800bfb0:	b192      	cbz	r2, 800bfd8 <_scanf_i+0xb8>
 800bfb2:	6832      	ldr	r2, [r6, #0]
 800bfb4:	1c51      	adds	r1, r2, #1
 800bfb6:	6031      	str	r1, [r6, #0]
 800bfb8:	7812      	ldrb	r2, [r2, #0]
 800bfba:	f805 2b01 	strb.w	r2, [r5], #1
 800bfbe:	6872      	ldr	r2, [r6, #4]
 800bfc0:	3a01      	subs	r2, #1
 800bfc2:	2a00      	cmp	r2, #0
 800bfc4:	6072      	str	r2, [r6, #4]
 800bfc6:	dc07      	bgt.n	800bfd8 <_scanf_i+0xb8>
 800bfc8:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800bfcc:	4631      	mov	r1, r6
 800bfce:	4650      	mov	r0, sl
 800bfd0:	4790      	blx	r2
 800bfd2:	2800      	cmp	r0, #0
 800bfd4:	f040 8085 	bne.w	800c0e2 <_scanf_i+0x1c2>
 800bfd8:	f10b 0b01 	add.w	fp, fp, #1
 800bfdc:	f1bb 0f03 	cmp.w	fp, #3
 800bfe0:	d1cb      	bne.n	800bf7a <_scanf_i+0x5a>
 800bfe2:	6863      	ldr	r3, [r4, #4]
 800bfe4:	b90b      	cbnz	r3, 800bfea <_scanf_i+0xca>
 800bfe6:	230a      	movs	r3, #10
 800bfe8:	6063      	str	r3, [r4, #4]
 800bfea:	6863      	ldr	r3, [r4, #4]
 800bfec:	4945      	ldr	r1, [pc, #276]	@ (800c104 <_scanf_i+0x1e4>)
 800bfee:	6960      	ldr	r0, [r4, #20]
 800bff0:	1ac9      	subs	r1, r1, r3
 800bff2:	f000 f935 	bl	800c260 <__sccl>
 800bff6:	f04f 0b00 	mov.w	fp, #0
 800bffa:	68a3      	ldr	r3, [r4, #8]
 800bffc:	6822      	ldr	r2, [r4, #0]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d03d      	beq.n	800c07e <_scanf_i+0x15e>
 800c002:	6831      	ldr	r1, [r6, #0]
 800c004:	6960      	ldr	r0, [r4, #20]
 800c006:	f891 c000 	ldrb.w	ip, [r1]
 800c00a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800c00e:	2800      	cmp	r0, #0
 800c010:	d035      	beq.n	800c07e <_scanf_i+0x15e>
 800c012:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800c016:	d124      	bne.n	800c062 <_scanf_i+0x142>
 800c018:	0510      	lsls	r0, r2, #20
 800c01a:	d522      	bpl.n	800c062 <_scanf_i+0x142>
 800c01c:	f10b 0b01 	add.w	fp, fp, #1
 800c020:	f1b9 0f00 	cmp.w	r9, #0
 800c024:	d003      	beq.n	800c02e <_scanf_i+0x10e>
 800c026:	3301      	adds	r3, #1
 800c028:	f109 39ff 	add.w	r9, r9, #4294967295
 800c02c:	60a3      	str	r3, [r4, #8]
 800c02e:	6873      	ldr	r3, [r6, #4]
 800c030:	3b01      	subs	r3, #1
 800c032:	2b00      	cmp	r3, #0
 800c034:	6073      	str	r3, [r6, #4]
 800c036:	dd1b      	ble.n	800c070 <_scanf_i+0x150>
 800c038:	6833      	ldr	r3, [r6, #0]
 800c03a:	3301      	adds	r3, #1
 800c03c:	6033      	str	r3, [r6, #0]
 800c03e:	68a3      	ldr	r3, [r4, #8]
 800c040:	3b01      	subs	r3, #1
 800c042:	60a3      	str	r3, [r4, #8]
 800c044:	e7d9      	b.n	800bffa <_scanf_i+0xda>
 800c046:	f1bb 0f02 	cmp.w	fp, #2
 800c04a:	d1ae      	bne.n	800bfaa <_scanf_i+0x8a>
 800c04c:	6822      	ldr	r2, [r4, #0]
 800c04e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800c052:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800c056:	d1c4      	bne.n	800bfe2 <_scanf_i+0xc2>
 800c058:	2110      	movs	r1, #16
 800c05a:	6061      	str	r1, [r4, #4]
 800c05c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c060:	e7a2      	b.n	800bfa8 <_scanf_i+0x88>
 800c062:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800c066:	6022      	str	r2, [r4, #0]
 800c068:	780b      	ldrb	r3, [r1, #0]
 800c06a:	f805 3b01 	strb.w	r3, [r5], #1
 800c06e:	e7de      	b.n	800c02e <_scanf_i+0x10e>
 800c070:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800c074:	4631      	mov	r1, r6
 800c076:	4650      	mov	r0, sl
 800c078:	4798      	blx	r3
 800c07a:	2800      	cmp	r0, #0
 800c07c:	d0df      	beq.n	800c03e <_scanf_i+0x11e>
 800c07e:	6823      	ldr	r3, [r4, #0]
 800c080:	05d9      	lsls	r1, r3, #23
 800c082:	d50d      	bpl.n	800c0a0 <_scanf_i+0x180>
 800c084:	42bd      	cmp	r5, r7
 800c086:	d909      	bls.n	800c09c <_scanf_i+0x17c>
 800c088:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c08c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c090:	4632      	mov	r2, r6
 800c092:	4650      	mov	r0, sl
 800c094:	4798      	blx	r3
 800c096:	f105 39ff 	add.w	r9, r5, #4294967295
 800c09a:	464d      	mov	r5, r9
 800c09c:	42bd      	cmp	r5, r7
 800c09e:	d028      	beq.n	800c0f2 <_scanf_i+0x1d2>
 800c0a0:	6822      	ldr	r2, [r4, #0]
 800c0a2:	f012 0210 	ands.w	r2, r2, #16
 800c0a6:	d113      	bne.n	800c0d0 <_scanf_i+0x1b0>
 800c0a8:	702a      	strb	r2, [r5, #0]
 800c0aa:	6863      	ldr	r3, [r4, #4]
 800c0ac:	9e01      	ldr	r6, [sp, #4]
 800c0ae:	4639      	mov	r1, r7
 800c0b0:	4650      	mov	r0, sl
 800c0b2:	47b0      	blx	r6
 800c0b4:	f8d8 3000 	ldr.w	r3, [r8]
 800c0b8:	6821      	ldr	r1, [r4, #0]
 800c0ba:	1d1a      	adds	r2, r3, #4
 800c0bc:	f8c8 2000 	str.w	r2, [r8]
 800c0c0:	f011 0f20 	tst.w	r1, #32
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	d00f      	beq.n	800c0e8 <_scanf_i+0x1c8>
 800c0c8:	6018      	str	r0, [r3, #0]
 800c0ca:	68e3      	ldr	r3, [r4, #12]
 800c0cc:	3301      	adds	r3, #1
 800c0ce:	60e3      	str	r3, [r4, #12]
 800c0d0:	6923      	ldr	r3, [r4, #16]
 800c0d2:	1bed      	subs	r5, r5, r7
 800c0d4:	445d      	add	r5, fp
 800c0d6:	442b      	add	r3, r5
 800c0d8:	6123      	str	r3, [r4, #16]
 800c0da:	2000      	movs	r0, #0
 800c0dc:	b007      	add	sp, #28
 800c0de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0e2:	f04f 0b00 	mov.w	fp, #0
 800c0e6:	e7ca      	b.n	800c07e <_scanf_i+0x15e>
 800c0e8:	07ca      	lsls	r2, r1, #31
 800c0ea:	bf4c      	ite	mi
 800c0ec:	8018      	strhmi	r0, [r3, #0]
 800c0ee:	6018      	strpl	r0, [r3, #0]
 800c0f0:	e7eb      	b.n	800c0ca <_scanf_i+0x1aa>
 800c0f2:	2001      	movs	r0, #1
 800c0f4:	e7f2      	b.n	800c0dc <_scanf_i+0x1bc>
 800c0f6:	bf00      	nop
 800c0f8:	0800d22c 	.word	0x0800d22c
 800c0fc:	0800b819 	.word	0x0800b819
 800c100:	0800cc05 	.word	0x0800cc05
 800c104:	0800da30 	.word	0x0800da30

0800c108 <__sflush_r>:
 800c108:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c10c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c110:	0716      	lsls	r6, r2, #28
 800c112:	4605      	mov	r5, r0
 800c114:	460c      	mov	r4, r1
 800c116:	d454      	bmi.n	800c1c2 <__sflush_r+0xba>
 800c118:	684b      	ldr	r3, [r1, #4]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	dc02      	bgt.n	800c124 <__sflush_r+0x1c>
 800c11e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c120:	2b00      	cmp	r3, #0
 800c122:	dd48      	ble.n	800c1b6 <__sflush_r+0xae>
 800c124:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c126:	2e00      	cmp	r6, #0
 800c128:	d045      	beq.n	800c1b6 <__sflush_r+0xae>
 800c12a:	2300      	movs	r3, #0
 800c12c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c130:	682f      	ldr	r7, [r5, #0]
 800c132:	6a21      	ldr	r1, [r4, #32]
 800c134:	602b      	str	r3, [r5, #0]
 800c136:	d030      	beq.n	800c19a <__sflush_r+0x92>
 800c138:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c13a:	89a3      	ldrh	r3, [r4, #12]
 800c13c:	0759      	lsls	r1, r3, #29
 800c13e:	d505      	bpl.n	800c14c <__sflush_r+0x44>
 800c140:	6863      	ldr	r3, [r4, #4]
 800c142:	1ad2      	subs	r2, r2, r3
 800c144:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c146:	b10b      	cbz	r3, 800c14c <__sflush_r+0x44>
 800c148:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c14a:	1ad2      	subs	r2, r2, r3
 800c14c:	2300      	movs	r3, #0
 800c14e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c150:	6a21      	ldr	r1, [r4, #32]
 800c152:	4628      	mov	r0, r5
 800c154:	47b0      	blx	r6
 800c156:	1c43      	adds	r3, r0, #1
 800c158:	89a3      	ldrh	r3, [r4, #12]
 800c15a:	d106      	bne.n	800c16a <__sflush_r+0x62>
 800c15c:	6829      	ldr	r1, [r5, #0]
 800c15e:	291d      	cmp	r1, #29
 800c160:	d82b      	bhi.n	800c1ba <__sflush_r+0xb2>
 800c162:	4a2a      	ldr	r2, [pc, #168]	@ (800c20c <__sflush_r+0x104>)
 800c164:	40ca      	lsrs	r2, r1
 800c166:	07d6      	lsls	r6, r2, #31
 800c168:	d527      	bpl.n	800c1ba <__sflush_r+0xb2>
 800c16a:	2200      	movs	r2, #0
 800c16c:	6062      	str	r2, [r4, #4]
 800c16e:	04d9      	lsls	r1, r3, #19
 800c170:	6922      	ldr	r2, [r4, #16]
 800c172:	6022      	str	r2, [r4, #0]
 800c174:	d504      	bpl.n	800c180 <__sflush_r+0x78>
 800c176:	1c42      	adds	r2, r0, #1
 800c178:	d101      	bne.n	800c17e <__sflush_r+0x76>
 800c17a:	682b      	ldr	r3, [r5, #0]
 800c17c:	b903      	cbnz	r3, 800c180 <__sflush_r+0x78>
 800c17e:	6560      	str	r0, [r4, #84]	@ 0x54
 800c180:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c182:	602f      	str	r7, [r5, #0]
 800c184:	b1b9      	cbz	r1, 800c1b6 <__sflush_r+0xae>
 800c186:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c18a:	4299      	cmp	r1, r3
 800c18c:	d002      	beq.n	800c194 <__sflush_r+0x8c>
 800c18e:	4628      	mov	r0, r5
 800c190:	f7fd ff16 	bl	8009fc0 <_free_r>
 800c194:	2300      	movs	r3, #0
 800c196:	6363      	str	r3, [r4, #52]	@ 0x34
 800c198:	e00d      	b.n	800c1b6 <__sflush_r+0xae>
 800c19a:	2301      	movs	r3, #1
 800c19c:	4628      	mov	r0, r5
 800c19e:	47b0      	blx	r6
 800c1a0:	4602      	mov	r2, r0
 800c1a2:	1c50      	adds	r0, r2, #1
 800c1a4:	d1c9      	bne.n	800c13a <__sflush_r+0x32>
 800c1a6:	682b      	ldr	r3, [r5, #0]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d0c6      	beq.n	800c13a <__sflush_r+0x32>
 800c1ac:	2b1d      	cmp	r3, #29
 800c1ae:	d001      	beq.n	800c1b4 <__sflush_r+0xac>
 800c1b0:	2b16      	cmp	r3, #22
 800c1b2:	d11e      	bne.n	800c1f2 <__sflush_r+0xea>
 800c1b4:	602f      	str	r7, [r5, #0]
 800c1b6:	2000      	movs	r0, #0
 800c1b8:	e022      	b.n	800c200 <__sflush_r+0xf8>
 800c1ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c1be:	b21b      	sxth	r3, r3
 800c1c0:	e01b      	b.n	800c1fa <__sflush_r+0xf2>
 800c1c2:	690f      	ldr	r7, [r1, #16]
 800c1c4:	2f00      	cmp	r7, #0
 800c1c6:	d0f6      	beq.n	800c1b6 <__sflush_r+0xae>
 800c1c8:	0793      	lsls	r3, r2, #30
 800c1ca:	680e      	ldr	r6, [r1, #0]
 800c1cc:	bf08      	it	eq
 800c1ce:	694b      	ldreq	r3, [r1, #20]
 800c1d0:	600f      	str	r7, [r1, #0]
 800c1d2:	bf18      	it	ne
 800c1d4:	2300      	movne	r3, #0
 800c1d6:	eba6 0807 	sub.w	r8, r6, r7
 800c1da:	608b      	str	r3, [r1, #8]
 800c1dc:	f1b8 0f00 	cmp.w	r8, #0
 800c1e0:	dde9      	ble.n	800c1b6 <__sflush_r+0xae>
 800c1e2:	6a21      	ldr	r1, [r4, #32]
 800c1e4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c1e6:	4643      	mov	r3, r8
 800c1e8:	463a      	mov	r2, r7
 800c1ea:	4628      	mov	r0, r5
 800c1ec:	47b0      	blx	r6
 800c1ee:	2800      	cmp	r0, #0
 800c1f0:	dc08      	bgt.n	800c204 <__sflush_r+0xfc>
 800c1f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c1fa:	81a3      	strh	r3, [r4, #12]
 800c1fc:	f04f 30ff 	mov.w	r0, #4294967295
 800c200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c204:	4407      	add	r7, r0
 800c206:	eba8 0800 	sub.w	r8, r8, r0
 800c20a:	e7e7      	b.n	800c1dc <__sflush_r+0xd4>
 800c20c:	20400001 	.word	0x20400001

0800c210 <_fflush_r>:
 800c210:	b538      	push	{r3, r4, r5, lr}
 800c212:	690b      	ldr	r3, [r1, #16]
 800c214:	4605      	mov	r5, r0
 800c216:	460c      	mov	r4, r1
 800c218:	b913      	cbnz	r3, 800c220 <_fflush_r+0x10>
 800c21a:	2500      	movs	r5, #0
 800c21c:	4628      	mov	r0, r5
 800c21e:	bd38      	pop	{r3, r4, r5, pc}
 800c220:	b118      	cbz	r0, 800c22a <_fflush_r+0x1a>
 800c222:	6a03      	ldr	r3, [r0, #32]
 800c224:	b90b      	cbnz	r3, 800c22a <_fflush_r+0x1a>
 800c226:	f7fc ff03 	bl	8009030 <__sinit>
 800c22a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d0f3      	beq.n	800c21a <_fflush_r+0xa>
 800c232:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c234:	07d0      	lsls	r0, r2, #31
 800c236:	d404      	bmi.n	800c242 <_fflush_r+0x32>
 800c238:	0599      	lsls	r1, r3, #22
 800c23a:	d402      	bmi.n	800c242 <_fflush_r+0x32>
 800c23c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c23e:	f7fd f84e 	bl	80092de <__retarget_lock_acquire_recursive>
 800c242:	4628      	mov	r0, r5
 800c244:	4621      	mov	r1, r4
 800c246:	f7ff ff5f 	bl	800c108 <__sflush_r>
 800c24a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c24c:	07da      	lsls	r2, r3, #31
 800c24e:	4605      	mov	r5, r0
 800c250:	d4e4      	bmi.n	800c21c <_fflush_r+0xc>
 800c252:	89a3      	ldrh	r3, [r4, #12]
 800c254:	059b      	lsls	r3, r3, #22
 800c256:	d4e1      	bmi.n	800c21c <_fflush_r+0xc>
 800c258:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c25a:	f7fd f841 	bl	80092e0 <__retarget_lock_release_recursive>
 800c25e:	e7dd      	b.n	800c21c <_fflush_r+0xc>

0800c260 <__sccl>:
 800c260:	b570      	push	{r4, r5, r6, lr}
 800c262:	780b      	ldrb	r3, [r1, #0]
 800c264:	4604      	mov	r4, r0
 800c266:	2b5e      	cmp	r3, #94	@ 0x5e
 800c268:	bf0b      	itete	eq
 800c26a:	784b      	ldrbeq	r3, [r1, #1]
 800c26c:	1c4a      	addne	r2, r1, #1
 800c26e:	1c8a      	addeq	r2, r1, #2
 800c270:	2100      	movne	r1, #0
 800c272:	bf08      	it	eq
 800c274:	2101      	moveq	r1, #1
 800c276:	3801      	subs	r0, #1
 800c278:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800c27c:	f800 1f01 	strb.w	r1, [r0, #1]!
 800c280:	42a8      	cmp	r0, r5
 800c282:	d1fb      	bne.n	800c27c <__sccl+0x1c>
 800c284:	b90b      	cbnz	r3, 800c28a <__sccl+0x2a>
 800c286:	1e50      	subs	r0, r2, #1
 800c288:	bd70      	pop	{r4, r5, r6, pc}
 800c28a:	f081 0101 	eor.w	r1, r1, #1
 800c28e:	54e1      	strb	r1, [r4, r3]
 800c290:	4610      	mov	r0, r2
 800c292:	4602      	mov	r2, r0
 800c294:	f812 5b01 	ldrb.w	r5, [r2], #1
 800c298:	2d2d      	cmp	r5, #45	@ 0x2d
 800c29a:	d005      	beq.n	800c2a8 <__sccl+0x48>
 800c29c:	2d5d      	cmp	r5, #93	@ 0x5d
 800c29e:	d016      	beq.n	800c2ce <__sccl+0x6e>
 800c2a0:	2d00      	cmp	r5, #0
 800c2a2:	d0f1      	beq.n	800c288 <__sccl+0x28>
 800c2a4:	462b      	mov	r3, r5
 800c2a6:	e7f2      	b.n	800c28e <__sccl+0x2e>
 800c2a8:	7846      	ldrb	r6, [r0, #1]
 800c2aa:	2e5d      	cmp	r6, #93	@ 0x5d
 800c2ac:	d0fa      	beq.n	800c2a4 <__sccl+0x44>
 800c2ae:	42b3      	cmp	r3, r6
 800c2b0:	dcf8      	bgt.n	800c2a4 <__sccl+0x44>
 800c2b2:	3002      	adds	r0, #2
 800c2b4:	461a      	mov	r2, r3
 800c2b6:	3201      	adds	r2, #1
 800c2b8:	4296      	cmp	r6, r2
 800c2ba:	54a1      	strb	r1, [r4, r2]
 800c2bc:	dcfb      	bgt.n	800c2b6 <__sccl+0x56>
 800c2be:	1af2      	subs	r2, r6, r3
 800c2c0:	3a01      	subs	r2, #1
 800c2c2:	1c5d      	adds	r5, r3, #1
 800c2c4:	42b3      	cmp	r3, r6
 800c2c6:	bfa8      	it	ge
 800c2c8:	2200      	movge	r2, #0
 800c2ca:	18ab      	adds	r3, r5, r2
 800c2cc:	e7e1      	b.n	800c292 <__sccl+0x32>
 800c2ce:	4610      	mov	r0, r2
 800c2d0:	e7da      	b.n	800c288 <__sccl+0x28>

0800c2d2 <__submore>:
 800c2d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2d6:	460c      	mov	r4, r1
 800c2d8:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800c2da:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c2de:	4299      	cmp	r1, r3
 800c2e0:	d11d      	bne.n	800c31e <__submore+0x4c>
 800c2e2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800c2e6:	f7fd fedf 	bl	800a0a8 <_malloc_r>
 800c2ea:	b918      	cbnz	r0, 800c2f4 <__submore+0x22>
 800c2ec:	f04f 30ff 	mov.w	r0, #4294967295
 800c2f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c2f8:	63a3      	str	r3, [r4, #56]	@ 0x38
 800c2fa:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800c2fe:	6360      	str	r0, [r4, #52]	@ 0x34
 800c300:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800c304:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800c308:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800c30c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800c310:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800c314:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800c318:	6020      	str	r0, [r4, #0]
 800c31a:	2000      	movs	r0, #0
 800c31c:	e7e8      	b.n	800c2f0 <__submore+0x1e>
 800c31e:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800c320:	0077      	lsls	r7, r6, #1
 800c322:	463a      	mov	r2, r7
 800c324:	f000 fbd1 	bl	800caca <_realloc_r>
 800c328:	4605      	mov	r5, r0
 800c32a:	2800      	cmp	r0, #0
 800c32c:	d0de      	beq.n	800c2ec <__submore+0x1a>
 800c32e:	eb00 0806 	add.w	r8, r0, r6
 800c332:	4601      	mov	r1, r0
 800c334:	4632      	mov	r2, r6
 800c336:	4640      	mov	r0, r8
 800c338:	f7fc ffd3 	bl	80092e2 <memcpy>
 800c33c:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800c340:	f8c4 8000 	str.w	r8, [r4]
 800c344:	e7e9      	b.n	800c31a <__submore+0x48>

0800c346 <memmove>:
 800c346:	4288      	cmp	r0, r1
 800c348:	b510      	push	{r4, lr}
 800c34a:	eb01 0402 	add.w	r4, r1, r2
 800c34e:	d902      	bls.n	800c356 <memmove+0x10>
 800c350:	4284      	cmp	r4, r0
 800c352:	4623      	mov	r3, r4
 800c354:	d807      	bhi.n	800c366 <memmove+0x20>
 800c356:	1e43      	subs	r3, r0, #1
 800c358:	42a1      	cmp	r1, r4
 800c35a:	d008      	beq.n	800c36e <memmove+0x28>
 800c35c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c360:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c364:	e7f8      	b.n	800c358 <memmove+0x12>
 800c366:	4402      	add	r2, r0
 800c368:	4601      	mov	r1, r0
 800c36a:	428a      	cmp	r2, r1
 800c36c:	d100      	bne.n	800c370 <memmove+0x2a>
 800c36e:	bd10      	pop	{r4, pc}
 800c370:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c374:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c378:	e7f7      	b.n	800c36a <memmove+0x24>

0800c37a <strncmp>:
 800c37a:	b510      	push	{r4, lr}
 800c37c:	b16a      	cbz	r2, 800c39a <strncmp+0x20>
 800c37e:	3901      	subs	r1, #1
 800c380:	1884      	adds	r4, r0, r2
 800c382:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c386:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c38a:	429a      	cmp	r2, r3
 800c38c:	d103      	bne.n	800c396 <strncmp+0x1c>
 800c38e:	42a0      	cmp	r0, r4
 800c390:	d001      	beq.n	800c396 <strncmp+0x1c>
 800c392:	2a00      	cmp	r2, #0
 800c394:	d1f5      	bne.n	800c382 <strncmp+0x8>
 800c396:	1ad0      	subs	r0, r2, r3
 800c398:	bd10      	pop	{r4, pc}
 800c39a:	4610      	mov	r0, r2
 800c39c:	e7fc      	b.n	800c398 <strncmp+0x1e>
	...

0800c3a0 <_sbrk_r>:
 800c3a0:	b538      	push	{r3, r4, r5, lr}
 800c3a2:	4d06      	ldr	r5, [pc, #24]	@ (800c3bc <_sbrk_r+0x1c>)
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	4604      	mov	r4, r0
 800c3a8:	4608      	mov	r0, r1
 800c3aa:	602b      	str	r3, [r5, #0]
 800c3ac:	f7f5 fd8e 	bl	8001ecc <_sbrk>
 800c3b0:	1c43      	adds	r3, r0, #1
 800c3b2:	d102      	bne.n	800c3ba <_sbrk_r+0x1a>
 800c3b4:	682b      	ldr	r3, [r5, #0]
 800c3b6:	b103      	cbz	r3, 800c3ba <_sbrk_r+0x1a>
 800c3b8:	6023      	str	r3, [r4, #0]
 800c3ba:	bd38      	pop	{r3, r4, r5, pc}
 800c3bc:	20001634 	.word	0x20001634

0800c3c0 <nan>:
 800c3c0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c3c8 <nan+0x8>
 800c3c4:	4770      	bx	lr
 800c3c6:	bf00      	nop
 800c3c8:	00000000 	.word	0x00000000
 800c3cc:	7ff80000 	.word	0x7ff80000

0800c3d0 <__assert_func>:
 800c3d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c3d2:	4614      	mov	r4, r2
 800c3d4:	461a      	mov	r2, r3
 800c3d6:	4b09      	ldr	r3, [pc, #36]	@ (800c3fc <__assert_func+0x2c>)
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	4605      	mov	r5, r0
 800c3dc:	68d8      	ldr	r0, [r3, #12]
 800c3de:	b14c      	cbz	r4, 800c3f4 <__assert_func+0x24>
 800c3e0:	4b07      	ldr	r3, [pc, #28]	@ (800c400 <__assert_func+0x30>)
 800c3e2:	9100      	str	r1, [sp, #0]
 800c3e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c3e8:	4906      	ldr	r1, [pc, #24]	@ (800c404 <__assert_func+0x34>)
 800c3ea:	462b      	mov	r3, r5
 800c3ec:	f000 fc1a 	bl	800cc24 <fiprintf>
 800c3f0:	f000 fc2a 	bl	800cc48 <abort>
 800c3f4:	4b04      	ldr	r3, [pc, #16]	@ (800c408 <__assert_func+0x38>)
 800c3f6:	461c      	mov	r4, r3
 800c3f8:	e7f3      	b.n	800c3e2 <__assert_func+0x12>
 800c3fa:	bf00      	nop
 800c3fc:	2000004c 	.word	0x2000004c
 800c400:	0800da43 	.word	0x0800da43
 800c404:	0800da50 	.word	0x0800da50
 800c408:	0800da7e 	.word	0x0800da7e

0800c40c <_calloc_r>:
 800c40c:	b570      	push	{r4, r5, r6, lr}
 800c40e:	fba1 5402 	umull	r5, r4, r1, r2
 800c412:	b934      	cbnz	r4, 800c422 <_calloc_r+0x16>
 800c414:	4629      	mov	r1, r5
 800c416:	f7fd fe47 	bl	800a0a8 <_malloc_r>
 800c41a:	4606      	mov	r6, r0
 800c41c:	b928      	cbnz	r0, 800c42a <_calloc_r+0x1e>
 800c41e:	4630      	mov	r0, r6
 800c420:	bd70      	pop	{r4, r5, r6, pc}
 800c422:	220c      	movs	r2, #12
 800c424:	6002      	str	r2, [r0, #0]
 800c426:	2600      	movs	r6, #0
 800c428:	e7f9      	b.n	800c41e <_calloc_r+0x12>
 800c42a:	462a      	mov	r2, r5
 800c42c:	4621      	mov	r1, r4
 800c42e:	f7fc fed8 	bl	80091e2 <memset>
 800c432:	e7f4      	b.n	800c41e <_calloc_r+0x12>

0800c434 <rshift>:
 800c434:	6903      	ldr	r3, [r0, #16]
 800c436:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c43a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c43e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c442:	f100 0414 	add.w	r4, r0, #20
 800c446:	dd45      	ble.n	800c4d4 <rshift+0xa0>
 800c448:	f011 011f 	ands.w	r1, r1, #31
 800c44c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c450:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c454:	d10c      	bne.n	800c470 <rshift+0x3c>
 800c456:	f100 0710 	add.w	r7, r0, #16
 800c45a:	4629      	mov	r1, r5
 800c45c:	42b1      	cmp	r1, r6
 800c45e:	d334      	bcc.n	800c4ca <rshift+0x96>
 800c460:	1a9b      	subs	r3, r3, r2
 800c462:	009b      	lsls	r3, r3, #2
 800c464:	1eea      	subs	r2, r5, #3
 800c466:	4296      	cmp	r6, r2
 800c468:	bf38      	it	cc
 800c46a:	2300      	movcc	r3, #0
 800c46c:	4423      	add	r3, r4
 800c46e:	e015      	b.n	800c49c <rshift+0x68>
 800c470:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c474:	f1c1 0820 	rsb	r8, r1, #32
 800c478:	40cf      	lsrs	r7, r1
 800c47a:	f105 0e04 	add.w	lr, r5, #4
 800c47e:	46a1      	mov	r9, r4
 800c480:	4576      	cmp	r6, lr
 800c482:	46f4      	mov	ip, lr
 800c484:	d815      	bhi.n	800c4b2 <rshift+0x7e>
 800c486:	1a9a      	subs	r2, r3, r2
 800c488:	0092      	lsls	r2, r2, #2
 800c48a:	3a04      	subs	r2, #4
 800c48c:	3501      	adds	r5, #1
 800c48e:	42ae      	cmp	r6, r5
 800c490:	bf38      	it	cc
 800c492:	2200      	movcc	r2, #0
 800c494:	18a3      	adds	r3, r4, r2
 800c496:	50a7      	str	r7, [r4, r2]
 800c498:	b107      	cbz	r7, 800c49c <rshift+0x68>
 800c49a:	3304      	adds	r3, #4
 800c49c:	1b1a      	subs	r2, r3, r4
 800c49e:	42a3      	cmp	r3, r4
 800c4a0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c4a4:	bf08      	it	eq
 800c4a6:	2300      	moveq	r3, #0
 800c4a8:	6102      	str	r2, [r0, #16]
 800c4aa:	bf08      	it	eq
 800c4ac:	6143      	streq	r3, [r0, #20]
 800c4ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c4b2:	f8dc c000 	ldr.w	ip, [ip]
 800c4b6:	fa0c fc08 	lsl.w	ip, ip, r8
 800c4ba:	ea4c 0707 	orr.w	r7, ip, r7
 800c4be:	f849 7b04 	str.w	r7, [r9], #4
 800c4c2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c4c6:	40cf      	lsrs	r7, r1
 800c4c8:	e7da      	b.n	800c480 <rshift+0x4c>
 800c4ca:	f851 cb04 	ldr.w	ip, [r1], #4
 800c4ce:	f847 cf04 	str.w	ip, [r7, #4]!
 800c4d2:	e7c3      	b.n	800c45c <rshift+0x28>
 800c4d4:	4623      	mov	r3, r4
 800c4d6:	e7e1      	b.n	800c49c <rshift+0x68>

0800c4d8 <__hexdig_fun>:
 800c4d8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c4dc:	2b09      	cmp	r3, #9
 800c4de:	d802      	bhi.n	800c4e6 <__hexdig_fun+0xe>
 800c4e0:	3820      	subs	r0, #32
 800c4e2:	b2c0      	uxtb	r0, r0
 800c4e4:	4770      	bx	lr
 800c4e6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c4ea:	2b05      	cmp	r3, #5
 800c4ec:	d801      	bhi.n	800c4f2 <__hexdig_fun+0x1a>
 800c4ee:	3847      	subs	r0, #71	@ 0x47
 800c4f0:	e7f7      	b.n	800c4e2 <__hexdig_fun+0xa>
 800c4f2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c4f6:	2b05      	cmp	r3, #5
 800c4f8:	d801      	bhi.n	800c4fe <__hexdig_fun+0x26>
 800c4fa:	3827      	subs	r0, #39	@ 0x27
 800c4fc:	e7f1      	b.n	800c4e2 <__hexdig_fun+0xa>
 800c4fe:	2000      	movs	r0, #0
 800c500:	4770      	bx	lr
	...

0800c504 <__gethex>:
 800c504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c508:	b085      	sub	sp, #20
 800c50a:	468a      	mov	sl, r1
 800c50c:	9302      	str	r3, [sp, #8]
 800c50e:	680b      	ldr	r3, [r1, #0]
 800c510:	9001      	str	r0, [sp, #4]
 800c512:	4690      	mov	r8, r2
 800c514:	1c9c      	adds	r4, r3, #2
 800c516:	46a1      	mov	r9, r4
 800c518:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c51c:	2830      	cmp	r0, #48	@ 0x30
 800c51e:	d0fa      	beq.n	800c516 <__gethex+0x12>
 800c520:	eba9 0303 	sub.w	r3, r9, r3
 800c524:	f1a3 0b02 	sub.w	fp, r3, #2
 800c528:	f7ff ffd6 	bl	800c4d8 <__hexdig_fun>
 800c52c:	4605      	mov	r5, r0
 800c52e:	2800      	cmp	r0, #0
 800c530:	d168      	bne.n	800c604 <__gethex+0x100>
 800c532:	49a0      	ldr	r1, [pc, #640]	@ (800c7b4 <__gethex+0x2b0>)
 800c534:	2201      	movs	r2, #1
 800c536:	4648      	mov	r0, r9
 800c538:	f7ff ff1f 	bl	800c37a <strncmp>
 800c53c:	4607      	mov	r7, r0
 800c53e:	2800      	cmp	r0, #0
 800c540:	d167      	bne.n	800c612 <__gethex+0x10e>
 800c542:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c546:	4626      	mov	r6, r4
 800c548:	f7ff ffc6 	bl	800c4d8 <__hexdig_fun>
 800c54c:	2800      	cmp	r0, #0
 800c54e:	d062      	beq.n	800c616 <__gethex+0x112>
 800c550:	4623      	mov	r3, r4
 800c552:	7818      	ldrb	r0, [r3, #0]
 800c554:	2830      	cmp	r0, #48	@ 0x30
 800c556:	4699      	mov	r9, r3
 800c558:	f103 0301 	add.w	r3, r3, #1
 800c55c:	d0f9      	beq.n	800c552 <__gethex+0x4e>
 800c55e:	f7ff ffbb 	bl	800c4d8 <__hexdig_fun>
 800c562:	fab0 f580 	clz	r5, r0
 800c566:	096d      	lsrs	r5, r5, #5
 800c568:	f04f 0b01 	mov.w	fp, #1
 800c56c:	464a      	mov	r2, r9
 800c56e:	4616      	mov	r6, r2
 800c570:	3201      	adds	r2, #1
 800c572:	7830      	ldrb	r0, [r6, #0]
 800c574:	f7ff ffb0 	bl	800c4d8 <__hexdig_fun>
 800c578:	2800      	cmp	r0, #0
 800c57a:	d1f8      	bne.n	800c56e <__gethex+0x6a>
 800c57c:	498d      	ldr	r1, [pc, #564]	@ (800c7b4 <__gethex+0x2b0>)
 800c57e:	2201      	movs	r2, #1
 800c580:	4630      	mov	r0, r6
 800c582:	f7ff fefa 	bl	800c37a <strncmp>
 800c586:	2800      	cmp	r0, #0
 800c588:	d13f      	bne.n	800c60a <__gethex+0x106>
 800c58a:	b944      	cbnz	r4, 800c59e <__gethex+0x9a>
 800c58c:	1c74      	adds	r4, r6, #1
 800c58e:	4622      	mov	r2, r4
 800c590:	4616      	mov	r6, r2
 800c592:	3201      	adds	r2, #1
 800c594:	7830      	ldrb	r0, [r6, #0]
 800c596:	f7ff ff9f 	bl	800c4d8 <__hexdig_fun>
 800c59a:	2800      	cmp	r0, #0
 800c59c:	d1f8      	bne.n	800c590 <__gethex+0x8c>
 800c59e:	1ba4      	subs	r4, r4, r6
 800c5a0:	00a7      	lsls	r7, r4, #2
 800c5a2:	7833      	ldrb	r3, [r6, #0]
 800c5a4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c5a8:	2b50      	cmp	r3, #80	@ 0x50
 800c5aa:	d13e      	bne.n	800c62a <__gethex+0x126>
 800c5ac:	7873      	ldrb	r3, [r6, #1]
 800c5ae:	2b2b      	cmp	r3, #43	@ 0x2b
 800c5b0:	d033      	beq.n	800c61a <__gethex+0x116>
 800c5b2:	2b2d      	cmp	r3, #45	@ 0x2d
 800c5b4:	d034      	beq.n	800c620 <__gethex+0x11c>
 800c5b6:	1c71      	adds	r1, r6, #1
 800c5b8:	2400      	movs	r4, #0
 800c5ba:	7808      	ldrb	r0, [r1, #0]
 800c5bc:	f7ff ff8c 	bl	800c4d8 <__hexdig_fun>
 800c5c0:	1e43      	subs	r3, r0, #1
 800c5c2:	b2db      	uxtb	r3, r3
 800c5c4:	2b18      	cmp	r3, #24
 800c5c6:	d830      	bhi.n	800c62a <__gethex+0x126>
 800c5c8:	f1a0 0210 	sub.w	r2, r0, #16
 800c5cc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c5d0:	f7ff ff82 	bl	800c4d8 <__hexdig_fun>
 800c5d4:	f100 3cff 	add.w	ip, r0, #4294967295
 800c5d8:	fa5f fc8c 	uxtb.w	ip, ip
 800c5dc:	f1bc 0f18 	cmp.w	ip, #24
 800c5e0:	f04f 030a 	mov.w	r3, #10
 800c5e4:	d91e      	bls.n	800c624 <__gethex+0x120>
 800c5e6:	b104      	cbz	r4, 800c5ea <__gethex+0xe6>
 800c5e8:	4252      	negs	r2, r2
 800c5ea:	4417      	add	r7, r2
 800c5ec:	f8ca 1000 	str.w	r1, [sl]
 800c5f0:	b1ed      	cbz	r5, 800c62e <__gethex+0x12a>
 800c5f2:	f1bb 0f00 	cmp.w	fp, #0
 800c5f6:	bf0c      	ite	eq
 800c5f8:	2506      	moveq	r5, #6
 800c5fa:	2500      	movne	r5, #0
 800c5fc:	4628      	mov	r0, r5
 800c5fe:	b005      	add	sp, #20
 800c600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c604:	2500      	movs	r5, #0
 800c606:	462c      	mov	r4, r5
 800c608:	e7b0      	b.n	800c56c <__gethex+0x68>
 800c60a:	2c00      	cmp	r4, #0
 800c60c:	d1c7      	bne.n	800c59e <__gethex+0x9a>
 800c60e:	4627      	mov	r7, r4
 800c610:	e7c7      	b.n	800c5a2 <__gethex+0x9e>
 800c612:	464e      	mov	r6, r9
 800c614:	462f      	mov	r7, r5
 800c616:	2501      	movs	r5, #1
 800c618:	e7c3      	b.n	800c5a2 <__gethex+0x9e>
 800c61a:	2400      	movs	r4, #0
 800c61c:	1cb1      	adds	r1, r6, #2
 800c61e:	e7cc      	b.n	800c5ba <__gethex+0xb6>
 800c620:	2401      	movs	r4, #1
 800c622:	e7fb      	b.n	800c61c <__gethex+0x118>
 800c624:	fb03 0002 	mla	r0, r3, r2, r0
 800c628:	e7ce      	b.n	800c5c8 <__gethex+0xc4>
 800c62a:	4631      	mov	r1, r6
 800c62c:	e7de      	b.n	800c5ec <__gethex+0xe8>
 800c62e:	eba6 0309 	sub.w	r3, r6, r9
 800c632:	3b01      	subs	r3, #1
 800c634:	4629      	mov	r1, r5
 800c636:	2b07      	cmp	r3, #7
 800c638:	dc0a      	bgt.n	800c650 <__gethex+0x14c>
 800c63a:	9801      	ldr	r0, [sp, #4]
 800c63c:	f7fd fdc0 	bl	800a1c0 <_Balloc>
 800c640:	4604      	mov	r4, r0
 800c642:	b940      	cbnz	r0, 800c656 <__gethex+0x152>
 800c644:	4b5c      	ldr	r3, [pc, #368]	@ (800c7b8 <__gethex+0x2b4>)
 800c646:	4602      	mov	r2, r0
 800c648:	21e4      	movs	r1, #228	@ 0xe4
 800c64a:	485c      	ldr	r0, [pc, #368]	@ (800c7bc <__gethex+0x2b8>)
 800c64c:	f7ff fec0 	bl	800c3d0 <__assert_func>
 800c650:	3101      	adds	r1, #1
 800c652:	105b      	asrs	r3, r3, #1
 800c654:	e7ef      	b.n	800c636 <__gethex+0x132>
 800c656:	f100 0a14 	add.w	sl, r0, #20
 800c65a:	2300      	movs	r3, #0
 800c65c:	4655      	mov	r5, sl
 800c65e:	469b      	mov	fp, r3
 800c660:	45b1      	cmp	r9, r6
 800c662:	d337      	bcc.n	800c6d4 <__gethex+0x1d0>
 800c664:	f845 bb04 	str.w	fp, [r5], #4
 800c668:	eba5 050a 	sub.w	r5, r5, sl
 800c66c:	10ad      	asrs	r5, r5, #2
 800c66e:	6125      	str	r5, [r4, #16]
 800c670:	4658      	mov	r0, fp
 800c672:	f7fd fe97 	bl	800a3a4 <__hi0bits>
 800c676:	016d      	lsls	r5, r5, #5
 800c678:	f8d8 6000 	ldr.w	r6, [r8]
 800c67c:	1a2d      	subs	r5, r5, r0
 800c67e:	42b5      	cmp	r5, r6
 800c680:	dd54      	ble.n	800c72c <__gethex+0x228>
 800c682:	1bad      	subs	r5, r5, r6
 800c684:	4629      	mov	r1, r5
 800c686:	4620      	mov	r0, r4
 800c688:	f7fe fa23 	bl	800aad2 <__any_on>
 800c68c:	4681      	mov	r9, r0
 800c68e:	b178      	cbz	r0, 800c6b0 <__gethex+0x1ac>
 800c690:	1e6b      	subs	r3, r5, #1
 800c692:	1159      	asrs	r1, r3, #5
 800c694:	f003 021f 	and.w	r2, r3, #31
 800c698:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c69c:	f04f 0901 	mov.w	r9, #1
 800c6a0:	fa09 f202 	lsl.w	r2, r9, r2
 800c6a4:	420a      	tst	r2, r1
 800c6a6:	d003      	beq.n	800c6b0 <__gethex+0x1ac>
 800c6a8:	454b      	cmp	r3, r9
 800c6aa:	dc36      	bgt.n	800c71a <__gethex+0x216>
 800c6ac:	f04f 0902 	mov.w	r9, #2
 800c6b0:	4629      	mov	r1, r5
 800c6b2:	4620      	mov	r0, r4
 800c6b4:	f7ff febe 	bl	800c434 <rshift>
 800c6b8:	442f      	add	r7, r5
 800c6ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c6be:	42bb      	cmp	r3, r7
 800c6c0:	da42      	bge.n	800c748 <__gethex+0x244>
 800c6c2:	9801      	ldr	r0, [sp, #4]
 800c6c4:	4621      	mov	r1, r4
 800c6c6:	f7fd fdbb 	bl	800a240 <_Bfree>
 800c6ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	6013      	str	r3, [r2, #0]
 800c6d0:	25a3      	movs	r5, #163	@ 0xa3
 800c6d2:	e793      	b.n	800c5fc <__gethex+0xf8>
 800c6d4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c6d8:	2a2e      	cmp	r2, #46	@ 0x2e
 800c6da:	d012      	beq.n	800c702 <__gethex+0x1fe>
 800c6dc:	2b20      	cmp	r3, #32
 800c6de:	d104      	bne.n	800c6ea <__gethex+0x1e6>
 800c6e0:	f845 bb04 	str.w	fp, [r5], #4
 800c6e4:	f04f 0b00 	mov.w	fp, #0
 800c6e8:	465b      	mov	r3, fp
 800c6ea:	7830      	ldrb	r0, [r6, #0]
 800c6ec:	9303      	str	r3, [sp, #12]
 800c6ee:	f7ff fef3 	bl	800c4d8 <__hexdig_fun>
 800c6f2:	9b03      	ldr	r3, [sp, #12]
 800c6f4:	f000 000f 	and.w	r0, r0, #15
 800c6f8:	4098      	lsls	r0, r3
 800c6fa:	ea4b 0b00 	orr.w	fp, fp, r0
 800c6fe:	3304      	adds	r3, #4
 800c700:	e7ae      	b.n	800c660 <__gethex+0x15c>
 800c702:	45b1      	cmp	r9, r6
 800c704:	d8ea      	bhi.n	800c6dc <__gethex+0x1d8>
 800c706:	492b      	ldr	r1, [pc, #172]	@ (800c7b4 <__gethex+0x2b0>)
 800c708:	9303      	str	r3, [sp, #12]
 800c70a:	2201      	movs	r2, #1
 800c70c:	4630      	mov	r0, r6
 800c70e:	f7ff fe34 	bl	800c37a <strncmp>
 800c712:	9b03      	ldr	r3, [sp, #12]
 800c714:	2800      	cmp	r0, #0
 800c716:	d1e1      	bne.n	800c6dc <__gethex+0x1d8>
 800c718:	e7a2      	b.n	800c660 <__gethex+0x15c>
 800c71a:	1ea9      	subs	r1, r5, #2
 800c71c:	4620      	mov	r0, r4
 800c71e:	f7fe f9d8 	bl	800aad2 <__any_on>
 800c722:	2800      	cmp	r0, #0
 800c724:	d0c2      	beq.n	800c6ac <__gethex+0x1a8>
 800c726:	f04f 0903 	mov.w	r9, #3
 800c72a:	e7c1      	b.n	800c6b0 <__gethex+0x1ac>
 800c72c:	da09      	bge.n	800c742 <__gethex+0x23e>
 800c72e:	1b75      	subs	r5, r6, r5
 800c730:	4621      	mov	r1, r4
 800c732:	9801      	ldr	r0, [sp, #4]
 800c734:	462a      	mov	r2, r5
 800c736:	f7fd ff93 	bl	800a660 <__lshift>
 800c73a:	1b7f      	subs	r7, r7, r5
 800c73c:	4604      	mov	r4, r0
 800c73e:	f100 0a14 	add.w	sl, r0, #20
 800c742:	f04f 0900 	mov.w	r9, #0
 800c746:	e7b8      	b.n	800c6ba <__gethex+0x1b6>
 800c748:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c74c:	42bd      	cmp	r5, r7
 800c74e:	dd6f      	ble.n	800c830 <__gethex+0x32c>
 800c750:	1bed      	subs	r5, r5, r7
 800c752:	42ae      	cmp	r6, r5
 800c754:	dc34      	bgt.n	800c7c0 <__gethex+0x2bc>
 800c756:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c75a:	2b02      	cmp	r3, #2
 800c75c:	d022      	beq.n	800c7a4 <__gethex+0x2a0>
 800c75e:	2b03      	cmp	r3, #3
 800c760:	d024      	beq.n	800c7ac <__gethex+0x2a8>
 800c762:	2b01      	cmp	r3, #1
 800c764:	d115      	bne.n	800c792 <__gethex+0x28e>
 800c766:	42ae      	cmp	r6, r5
 800c768:	d113      	bne.n	800c792 <__gethex+0x28e>
 800c76a:	2e01      	cmp	r6, #1
 800c76c:	d10b      	bne.n	800c786 <__gethex+0x282>
 800c76e:	9a02      	ldr	r2, [sp, #8]
 800c770:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c774:	6013      	str	r3, [r2, #0]
 800c776:	2301      	movs	r3, #1
 800c778:	6123      	str	r3, [r4, #16]
 800c77a:	f8ca 3000 	str.w	r3, [sl]
 800c77e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c780:	2562      	movs	r5, #98	@ 0x62
 800c782:	601c      	str	r4, [r3, #0]
 800c784:	e73a      	b.n	800c5fc <__gethex+0xf8>
 800c786:	1e71      	subs	r1, r6, #1
 800c788:	4620      	mov	r0, r4
 800c78a:	f7fe f9a2 	bl	800aad2 <__any_on>
 800c78e:	2800      	cmp	r0, #0
 800c790:	d1ed      	bne.n	800c76e <__gethex+0x26a>
 800c792:	9801      	ldr	r0, [sp, #4]
 800c794:	4621      	mov	r1, r4
 800c796:	f7fd fd53 	bl	800a240 <_Bfree>
 800c79a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c79c:	2300      	movs	r3, #0
 800c79e:	6013      	str	r3, [r2, #0]
 800c7a0:	2550      	movs	r5, #80	@ 0x50
 800c7a2:	e72b      	b.n	800c5fc <__gethex+0xf8>
 800c7a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d1f3      	bne.n	800c792 <__gethex+0x28e>
 800c7aa:	e7e0      	b.n	800c76e <__gethex+0x26a>
 800c7ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d1dd      	bne.n	800c76e <__gethex+0x26a>
 800c7b2:	e7ee      	b.n	800c792 <__gethex+0x28e>
 800c7b4:	0800da0d 	.word	0x0800da0d
 800c7b8:	0800d9a3 	.word	0x0800d9a3
 800c7bc:	0800da7f 	.word	0x0800da7f
 800c7c0:	1e6f      	subs	r7, r5, #1
 800c7c2:	f1b9 0f00 	cmp.w	r9, #0
 800c7c6:	d130      	bne.n	800c82a <__gethex+0x326>
 800c7c8:	b127      	cbz	r7, 800c7d4 <__gethex+0x2d0>
 800c7ca:	4639      	mov	r1, r7
 800c7cc:	4620      	mov	r0, r4
 800c7ce:	f7fe f980 	bl	800aad2 <__any_on>
 800c7d2:	4681      	mov	r9, r0
 800c7d4:	117a      	asrs	r2, r7, #5
 800c7d6:	2301      	movs	r3, #1
 800c7d8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c7dc:	f007 071f 	and.w	r7, r7, #31
 800c7e0:	40bb      	lsls	r3, r7
 800c7e2:	4213      	tst	r3, r2
 800c7e4:	4629      	mov	r1, r5
 800c7e6:	4620      	mov	r0, r4
 800c7e8:	bf18      	it	ne
 800c7ea:	f049 0902 	orrne.w	r9, r9, #2
 800c7ee:	f7ff fe21 	bl	800c434 <rshift>
 800c7f2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c7f6:	1b76      	subs	r6, r6, r5
 800c7f8:	2502      	movs	r5, #2
 800c7fa:	f1b9 0f00 	cmp.w	r9, #0
 800c7fe:	d047      	beq.n	800c890 <__gethex+0x38c>
 800c800:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c804:	2b02      	cmp	r3, #2
 800c806:	d015      	beq.n	800c834 <__gethex+0x330>
 800c808:	2b03      	cmp	r3, #3
 800c80a:	d017      	beq.n	800c83c <__gethex+0x338>
 800c80c:	2b01      	cmp	r3, #1
 800c80e:	d109      	bne.n	800c824 <__gethex+0x320>
 800c810:	f019 0f02 	tst.w	r9, #2
 800c814:	d006      	beq.n	800c824 <__gethex+0x320>
 800c816:	f8da 3000 	ldr.w	r3, [sl]
 800c81a:	ea49 0903 	orr.w	r9, r9, r3
 800c81e:	f019 0f01 	tst.w	r9, #1
 800c822:	d10e      	bne.n	800c842 <__gethex+0x33e>
 800c824:	f045 0510 	orr.w	r5, r5, #16
 800c828:	e032      	b.n	800c890 <__gethex+0x38c>
 800c82a:	f04f 0901 	mov.w	r9, #1
 800c82e:	e7d1      	b.n	800c7d4 <__gethex+0x2d0>
 800c830:	2501      	movs	r5, #1
 800c832:	e7e2      	b.n	800c7fa <__gethex+0x2f6>
 800c834:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c836:	f1c3 0301 	rsb	r3, r3, #1
 800c83a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c83c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d0f0      	beq.n	800c824 <__gethex+0x320>
 800c842:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c846:	f104 0314 	add.w	r3, r4, #20
 800c84a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c84e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c852:	f04f 0c00 	mov.w	ip, #0
 800c856:	4618      	mov	r0, r3
 800c858:	f853 2b04 	ldr.w	r2, [r3], #4
 800c85c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c860:	d01b      	beq.n	800c89a <__gethex+0x396>
 800c862:	3201      	adds	r2, #1
 800c864:	6002      	str	r2, [r0, #0]
 800c866:	2d02      	cmp	r5, #2
 800c868:	f104 0314 	add.w	r3, r4, #20
 800c86c:	d13c      	bne.n	800c8e8 <__gethex+0x3e4>
 800c86e:	f8d8 2000 	ldr.w	r2, [r8]
 800c872:	3a01      	subs	r2, #1
 800c874:	42b2      	cmp	r2, r6
 800c876:	d109      	bne.n	800c88c <__gethex+0x388>
 800c878:	1171      	asrs	r1, r6, #5
 800c87a:	2201      	movs	r2, #1
 800c87c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c880:	f006 061f 	and.w	r6, r6, #31
 800c884:	fa02 f606 	lsl.w	r6, r2, r6
 800c888:	421e      	tst	r6, r3
 800c88a:	d13a      	bne.n	800c902 <__gethex+0x3fe>
 800c88c:	f045 0520 	orr.w	r5, r5, #32
 800c890:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c892:	601c      	str	r4, [r3, #0]
 800c894:	9b02      	ldr	r3, [sp, #8]
 800c896:	601f      	str	r7, [r3, #0]
 800c898:	e6b0      	b.n	800c5fc <__gethex+0xf8>
 800c89a:	4299      	cmp	r1, r3
 800c89c:	f843 cc04 	str.w	ip, [r3, #-4]
 800c8a0:	d8d9      	bhi.n	800c856 <__gethex+0x352>
 800c8a2:	68a3      	ldr	r3, [r4, #8]
 800c8a4:	459b      	cmp	fp, r3
 800c8a6:	db17      	blt.n	800c8d8 <__gethex+0x3d4>
 800c8a8:	6861      	ldr	r1, [r4, #4]
 800c8aa:	9801      	ldr	r0, [sp, #4]
 800c8ac:	3101      	adds	r1, #1
 800c8ae:	f7fd fc87 	bl	800a1c0 <_Balloc>
 800c8b2:	4681      	mov	r9, r0
 800c8b4:	b918      	cbnz	r0, 800c8be <__gethex+0x3ba>
 800c8b6:	4b1a      	ldr	r3, [pc, #104]	@ (800c920 <__gethex+0x41c>)
 800c8b8:	4602      	mov	r2, r0
 800c8ba:	2184      	movs	r1, #132	@ 0x84
 800c8bc:	e6c5      	b.n	800c64a <__gethex+0x146>
 800c8be:	6922      	ldr	r2, [r4, #16]
 800c8c0:	3202      	adds	r2, #2
 800c8c2:	f104 010c 	add.w	r1, r4, #12
 800c8c6:	0092      	lsls	r2, r2, #2
 800c8c8:	300c      	adds	r0, #12
 800c8ca:	f7fc fd0a 	bl	80092e2 <memcpy>
 800c8ce:	4621      	mov	r1, r4
 800c8d0:	9801      	ldr	r0, [sp, #4]
 800c8d2:	f7fd fcb5 	bl	800a240 <_Bfree>
 800c8d6:	464c      	mov	r4, r9
 800c8d8:	6923      	ldr	r3, [r4, #16]
 800c8da:	1c5a      	adds	r2, r3, #1
 800c8dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c8e0:	6122      	str	r2, [r4, #16]
 800c8e2:	2201      	movs	r2, #1
 800c8e4:	615a      	str	r2, [r3, #20]
 800c8e6:	e7be      	b.n	800c866 <__gethex+0x362>
 800c8e8:	6922      	ldr	r2, [r4, #16]
 800c8ea:	455a      	cmp	r2, fp
 800c8ec:	dd0b      	ble.n	800c906 <__gethex+0x402>
 800c8ee:	2101      	movs	r1, #1
 800c8f0:	4620      	mov	r0, r4
 800c8f2:	f7ff fd9f 	bl	800c434 <rshift>
 800c8f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c8fa:	3701      	adds	r7, #1
 800c8fc:	42bb      	cmp	r3, r7
 800c8fe:	f6ff aee0 	blt.w	800c6c2 <__gethex+0x1be>
 800c902:	2501      	movs	r5, #1
 800c904:	e7c2      	b.n	800c88c <__gethex+0x388>
 800c906:	f016 061f 	ands.w	r6, r6, #31
 800c90a:	d0fa      	beq.n	800c902 <__gethex+0x3fe>
 800c90c:	4453      	add	r3, sl
 800c90e:	f1c6 0620 	rsb	r6, r6, #32
 800c912:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c916:	f7fd fd45 	bl	800a3a4 <__hi0bits>
 800c91a:	42b0      	cmp	r0, r6
 800c91c:	dbe7      	blt.n	800c8ee <__gethex+0x3ea>
 800c91e:	e7f0      	b.n	800c902 <__gethex+0x3fe>
 800c920:	0800d9a3 	.word	0x0800d9a3

0800c924 <L_shift>:
 800c924:	f1c2 0208 	rsb	r2, r2, #8
 800c928:	0092      	lsls	r2, r2, #2
 800c92a:	b570      	push	{r4, r5, r6, lr}
 800c92c:	f1c2 0620 	rsb	r6, r2, #32
 800c930:	6843      	ldr	r3, [r0, #4]
 800c932:	6804      	ldr	r4, [r0, #0]
 800c934:	fa03 f506 	lsl.w	r5, r3, r6
 800c938:	432c      	orrs	r4, r5
 800c93a:	40d3      	lsrs	r3, r2
 800c93c:	6004      	str	r4, [r0, #0]
 800c93e:	f840 3f04 	str.w	r3, [r0, #4]!
 800c942:	4288      	cmp	r0, r1
 800c944:	d3f4      	bcc.n	800c930 <L_shift+0xc>
 800c946:	bd70      	pop	{r4, r5, r6, pc}

0800c948 <__match>:
 800c948:	b530      	push	{r4, r5, lr}
 800c94a:	6803      	ldr	r3, [r0, #0]
 800c94c:	3301      	adds	r3, #1
 800c94e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c952:	b914      	cbnz	r4, 800c95a <__match+0x12>
 800c954:	6003      	str	r3, [r0, #0]
 800c956:	2001      	movs	r0, #1
 800c958:	bd30      	pop	{r4, r5, pc}
 800c95a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c95e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c962:	2d19      	cmp	r5, #25
 800c964:	bf98      	it	ls
 800c966:	3220      	addls	r2, #32
 800c968:	42a2      	cmp	r2, r4
 800c96a:	d0f0      	beq.n	800c94e <__match+0x6>
 800c96c:	2000      	movs	r0, #0
 800c96e:	e7f3      	b.n	800c958 <__match+0x10>

0800c970 <__hexnan>:
 800c970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c974:	680b      	ldr	r3, [r1, #0]
 800c976:	6801      	ldr	r1, [r0, #0]
 800c978:	115e      	asrs	r6, r3, #5
 800c97a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c97e:	f013 031f 	ands.w	r3, r3, #31
 800c982:	b087      	sub	sp, #28
 800c984:	bf18      	it	ne
 800c986:	3604      	addne	r6, #4
 800c988:	2500      	movs	r5, #0
 800c98a:	1f37      	subs	r7, r6, #4
 800c98c:	4682      	mov	sl, r0
 800c98e:	4690      	mov	r8, r2
 800c990:	9301      	str	r3, [sp, #4]
 800c992:	f846 5c04 	str.w	r5, [r6, #-4]
 800c996:	46b9      	mov	r9, r7
 800c998:	463c      	mov	r4, r7
 800c99a:	9502      	str	r5, [sp, #8]
 800c99c:	46ab      	mov	fp, r5
 800c99e:	784a      	ldrb	r2, [r1, #1]
 800c9a0:	1c4b      	adds	r3, r1, #1
 800c9a2:	9303      	str	r3, [sp, #12]
 800c9a4:	b342      	cbz	r2, 800c9f8 <__hexnan+0x88>
 800c9a6:	4610      	mov	r0, r2
 800c9a8:	9105      	str	r1, [sp, #20]
 800c9aa:	9204      	str	r2, [sp, #16]
 800c9ac:	f7ff fd94 	bl	800c4d8 <__hexdig_fun>
 800c9b0:	2800      	cmp	r0, #0
 800c9b2:	d151      	bne.n	800ca58 <__hexnan+0xe8>
 800c9b4:	9a04      	ldr	r2, [sp, #16]
 800c9b6:	9905      	ldr	r1, [sp, #20]
 800c9b8:	2a20      	cmp	r2, #32
 800c9ba:	d818      	bhi.n	800c9ee <__hexnan+0x7e>
 800c9bc:	9b02      	ldr	r3, [sp, #8]
 800c9be:	459b      	cmp	fp, r3
 800c9c0:	dd13      	ble.n	800c9ea <__hexnan+0x7a>
 800c9c2:	454c      	cmp	r4, r9
 800c9c4:	d206      	bcs.n	800c9d4 <__hexnan+0x64>
 800c9c6:	2d07      	cmp	r5, #7
 800c9c8:	dc04      	bgt.n	800c9d4 <__hexnan+0x64>
 800c9ca:	462a      	mov	r2, r5
 800c9cc:	4649      	mov	r1, r9
 800c9ce:	4620      	mov	r0, r4
 800c9d0:	f7ff ffa8 	bl	800c924 <L_shift>
 800c9d4:	4544      	cmp	r4, r8
 800c9d6:	d952      	bls.n	800ca7e <__hexnan+0x10e>
 800c9d8:	2300      	movs	r3, #0
 800c9da:	f1a4 0904 	sub.w	r9, r4, #4
 800c9de:	f844 3c04 	str.w	r3, [r4, #-4]
 800c9e2:	f8cd b008 	str.w	fp, [sp, #8]
 800c9e6:	464c      	mov	r4, r9
 800c9e8:	461d      	mov	r5, r3
 800c9ea:	9903      	ldr	r1, [sp, #12]
 800c9ec:	e7d7      	b.n	800c99e <__hexnan+0x2e>
 800c9ee:	2a29      	cmp	r2, #41	@ 0x29
 800c9f0:	d157      	bne.n	800caa2 <__hexnan+0x132>
 800c9f2:	3102      	adds	r1, #2
 800c9f4:	f8ca 1000 	str.w	r1, [sl]
 800c9f8:	f1bb 0f00 	cmp.w	fp, #0
 800c9fc:	d051      	beq.n	800caa2 <__hexnan+0x132>
 800c9fe:	454c      	cmp	r4, r9
 800ca00:	d206      	bcs.n	800ca10 <__hexnan+0xa0>
 800ca02:	2d07      	cmp	r5, #7
 800ca04:	dc04      	bgt.n	800ca10 <__hexnan+0xa0>
 800ca06:	462a      	mov	r2, r5
 800ca08:	4649      	mov	r1, r9
 800ca0a:	4620      	mov	r0, r4
 800ca0c:	f7ff ff8a 	bl	800c924 <L_shift>
 800ca10:	4544      	cmp	r4, r8
 800ca12:	d936      	bls.n	800ca82 <__hexnan+0x112>
 800ca14:	f1a8 0204 	sub.w	r2, r8, #4
 800ca18:	4623      	mov	r3, r4
 800ca1a:	f853 1b04 	ldr.w	r1, [r3], #4
 800ca1e:	f842 1f04 	str.w	r1, [r2, #4]!
 800ca22:	429f      	cmp	r7, r3
 800ca24:	d2f9      	bcs.n	800ca1a <__hexnan+0xaa>
 800ca26:	1b3b      	subs	r3, r7, r4
 800ca28:	f023 0303 	bic.w	r3, r3, #3
 800ca2c:	3304      	adds	r3, #4
 800ca2e:	3401      	adds	r4, #1
 800ca30:	3e03      	subs	r6, #3
 800ca32:	42b4      	cmp	r4, r6
 800ca34:	bf88      	it	hi
 800ca36:	2304      	movhi	r3, #4
 800ca38:	4443      	add	r3, r8
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	f843 2b04 	str.w	r2, [r3], #4
 800ca40:	429f      	cmp	r7, r3
 800ca42:	d2fb      	bcs.n	800ca3c <__hexnan+0xcc>
 800ca44:	683b      	ldr	r3, [r7, #0]
 800ca46:	b91b      	cbnz	r3, 800ca50 <__hexnan+0xe0>
 800ca48:	4547      	cmp	r7, r8
 800ca4a:	d128      	bne.n	800ca9e <__hexnan+0x12e>
 800ca4c:	2301      	movs	r3, #1
 800ca4e:	603b      	str	r3, [r7, #0]
 800ca50:	2005      	movs	r0, #5
 800ca52:	b007      	add	sp, #28
 800ca54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca58:	3501      	adds	r5, #1
 800ca5a:	2d08      	cmp	r5, #8
 800ca5c:	f10b 0b01 	add.w	fp, fp, #1
 800ca60:	dd06      	ble.n	800ca70 <__hexnan+0x100>
 800ca62:	4544      	cmp	r4, r8
 800ca64:	d9c1      	bls.n	800c9ea <__hexnan+0x7a>
 800ca66:	2300      	movs	r3, #0
 800ca68:	f844 3c04 	str.w	r3, [r4, #-4]
 800ca6c:	2501      	movs	r5, #1
 800ca6e:	3c04      	subs	r4, #4
 800ca70:	6822      	ldr	r2, [r4, #0]
 800ca72:	f000 000f 	and.w	r0, r0, #15
 800ca76:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ca7a:	6020      	str	r0, [r4, #0]
 800ca7c:	e7b5      	b.n	800c9ea <__hexnan+0x7a>
 800ca7e:	2508      	movs	r5, #8
 800ca80:	e7b3      	b.n	800c9ea <__hexnan+0x7a>
 800ca82:	9b01      	ldr	r3, [sp, #4]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d0dd      	beq.n	800ca44 <__hexnan+0xd4>
 800ca88:	f1c3 0320 	rsb	r3, r3, #32
 800ca8c:	f04f 32ff 	mov.w	r2, #4294967295
 800ca90:	40da      	lsrs	r2, r3
 800ca92:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ca96:	4013      	ands	r3, r2
 800ca98:	f846 3c04 	str.w	r3, [r6, #-4]
 800ca9c:	e7d2      	b.n	800ca44 <__hexnan+0xd4>
 800ca9e:	3f04      	subs	r7, #4
 800caa0:	e7d0      	b.n	800ca44 <__hexnan+0xd4>
 800caa2:	2004      	movs	r0, #4
 800caa4:	e7d5      	b.n	800ca52 <__hexnan+0xe2>

0800caa6 <__ascii_mbtowc>:
 800caa6:	b082      	sub	sp, #8
 800caa8:	b901      	cbnz	r1, 800caac <__ascii_mbtowc+0x6>
 800caaa:	a901      	add	r1, sp, #4
 800caac:	b142      	cbz	r2, 800cac0 <__ascii_mbtowc+0x1a>
 800caae:	b14b      	cbz	r3, 800cac4 <__ascii_mbtowc+0x1e>
 800cab0:	7813      	ldrb	r3, [r2, #0]
 800cab2:	600b      	str	r3, [r1, #0]
 800cab4:	7812      	ldrb	r2, [r2, #0]
 800cab6:	1e10      	subs	r0, r2, #0
 800cab8:	bf18      	it	ne
 800caba:	2001      	movne	r0, #1
 800cabc:	b002      	add	sp, #8
 800cabe:	4770      	bx	lr
 800cac0:	4610      	mov	r0, r2
 800cac2:	e7fb      	b.n	800cabc <__ascii_mbtowc+0x16>
 800cac4:	f06f 0001 	mvn.w	r0, #1
 800cac8:	e7f8      	b.n	800cabc <__ascii_mbtowc+0x16>

0800caca <_realloc_r>:
 800caca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cace:	4607      	mov	r7, r0
 800cad0:	4614      	mov	r4, r2
 800cad2:	460d      	mov	r5, r1
 800cad4:	b921      	cbnz	r1, 800cae0 <_realloc_r+0x16>
 800cad6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cada:	4611      	mov	r1, r2
 800cadc:	f7fd bae4 	b.w	800a0a8 <_malloc_r>
 800cae0:	b92a      	cbnz	r2, 800caee <_realloc_r+0x24>
 800cae2:	f7fd fa6d 	bl	8009fc0 <_free_r>
 800cae6:	4625      	mov	r5, r4
 800cae8:	4628      	mov	r0, r5
 800caea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800caee:	f000 f8b2 	bl	800cc56 <_malloc_usable_size_r>
 800caf2:	4284      	cmp	r4, r0
 800caf4:	4606      	mov	r6, r0
 800caf6:	d802      	bhi.n	800cafe <_realloc_r+0x34>
 800caf8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cafc:	d8f4      	bhi.n	800cae8 <_realloc_r+0x1e>
 800cafe:	4621      	mov	r1, r4
 800cb00:	4638      	mov	r0, r7
 800cb02:	f7fd fad1 	bl	800a0a8 <_malloc_r>
 800cb06:	4680      	mov	r8, r0
 800cb08:	b908      	cbnz	r0, 800cb0e <_realloc_r+0x44>
 800cb0a:	4645      	mov	r5, r8
 800cb0c:	e7ec      	b.n	800cae8 <_realloc_r+0x1e>
 800cb0e:	42b4      	cmp	r4, r6
 800cb10:	4622      	mov	r2, r4
 800cb12:	4629      	mov	r1, r5
 800cb14:	bf28      	it	cs
 800cb16:	4632      	movcs	r2, r6
 800cb18:	f7fc fbe3 	bl	80092e2 <memcpy>
 800cb1c:	4629      	mov	r1, r5
 800cb1e:	4638      	mov	r0, r7
 800cb20:	f7fd fa4e 	bl	8009fc0 <_free_r>
 800cb24:	e7f1      	b.n	800cb0a <_realloc_r+0x40>
	...

0800cb28 <_strtoul_l.isra.0>:
 800cb28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cb2c:	4e34      	ldr	r6, [pc, #208]	@ (800cc00 <_strtoul_l.isra.0+0xd8>)
 800cb2e:	4686      	mov	lr, r0
 800cb30:	460d      	mov	r5, r1
 800cb32:	4628      	mov	r0, r5
 800cb34:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cb38:	5d37      	ldrb	r7, [r6, r4]
 800cb3a:	f017 0708 	ands.w	r7, r7, #8
 800cb3e:	d1f8      	bne.n	800cb32 <_strtoul_l.isra.0+0xa>
 800cb40:	2c2d      	cmp	r4, #45	@ 0x2d
 800cb42:	d110      	bne.n	800cb66 <_strtoul_l.isra.0+0x3e>
 800cb44:	782c      	ldrb	r4, [r5, #0]
 800cb46:	2701      	movs	r7, #1
 800cb48:	1c85      	adds	r5, r0, #2
 800cb4a:	f033 0010 	bics.w	r0, r3, #16
 800cb4e:	d115      	bne.n	800cb7c <_strtoul_l.isra.0+0x54>
 800cb50:	2c30      	cmp	r4, #48	@ 0x30
 800cb52:	d10d      	bne.n	800cb70 <_strtoul_l.isra.0+0x48>
 800cb54:	7828      	ldrb	r0, [r5, #0]
 800cb56:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800cb5a:	2858      	cmp	r0, #88	@ 0x58
 800cb5c:	d108      	bne.n	800cb70 <_strtoul_l.isra.0+0x48>
 800cb5e:	786c      	ldrb	r4, [r5, #1]
 800cb60:	3502      	adds	r5, #2
 800cb62:	2310      	movs	r3, #16
 800cb64:	e00a      	b.n	800cb7c <_strtoul_l.isra.0+0x54>
 800cb66:	2c2b      	cmp	r4, #43	@ 0x2b
 800cb68:	bf04      	itt	eq
 800cb6a:	782c      	ldrbeq	r4, [r5, #0]
 800cb6c:	1c85      	addeq	r5, r0, #2
 800cb6e:	e7ec      	b.n	800cb4a <_strtoul_l.isra.0+0x22>
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d1f6      	bne.n	800cb62 <_strtoul_l.isra.0+0x3a>
 800cb74:	2c30      	cmp	r4, #48	@ 0x30
 800cb76:	bf14      	ite	ne
 800cb78:	230a      	movne	r3, #10
 800cb7a:	2308      	moveq	r3, #8
 800cb7c:	f04f 38ff 	mov.w	r8, #4294967295
 800cb80:	2600      	movs	r6, #0
 800cb82:	fbb8 f8f3 	udiv	r8, r8, r3
 800cb86:	fb03 f908 	mul.w	r9, r3, r8
 800cb8a:	ea6f 0909 	mvn.w	r9, r9
 800cb8e:	4630      	mov	r0, r6
 800cb90:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800cb94:	f1bc 0f09 	cmp.w	ip, #9
 800cb98:	d810      	bhi.n	800cbbc <_strtoul_l.isra.0+0x94>
 800cb9a:	4664      	mov	r4, ip
 800cb9c:	42a3      	cmp	r3, r4
 800cb9e:	dd1e      	ble.n	800cbde <_strtoul_l.isra.0+0xb6>
 800cba0:	f1b6 3fff 	cmp.w	r6, #4294967295
 800cba4:	d007      	beq.n	800cbb6 <_strtoul_l.isra.0+0x8e>
 800cba6:	4580      	cmp	r8, r0
 800cba8:	d316      	bcc.n	800cbd8 <_strtoul_l.isra.0+0xb0>
 800cbaa:	d101      	bne.n	800cbb0 <_strtoul_l.isra.0+0x88>
 800cbac:	45a1      	cmp	r9, r4
 800cbae:	db13      	blt.n	800cbd8 <_strtoul_l.isra.0+0xb0>
 800cbb0:	fb00 4003 	mla	r0, r0, r3, r4
 800cbb4:	2601      	movs	r6, #1
 800cbb6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cbba:	e7e9      	b.n	800cb90 <_strtoul_l.isra.0+0x68>
 800cbbc:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800cbc0:	f1bc 0f19 	cmp.w	ip, #25
 800cbc4:	d801      	bhi.n	800cbca <_strtoul_l.isra.0+0xa2>
 800cbc6:	3c37      	subs	r4, #55	@ 0x37
 800cbc8:	e7e8      	b.n	800cb9c <_strtoul_l.isra.0+0x74>
 800cbca:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800cbce:	f1bc 0f19 	cmp.w	ip, #25
 800cbd2:	d804      	bhi.n	800cbde <_strtoul_l.isra.0+0xb6>
 800cbd4:	3c57      	subs	r4, #87	@ 0x57
 800cbd6:	e7e1      	b.n	800cb9c <_strtoul_l.isra.0+0x74>
 800cbd8:	f04f 36ff 	mov.w	r6, #4294967295
 800cbdc:	e7eb      	b.n	800cbb6 <_strtoul_l.isra.0+0x8e>
 800cbde:	1c73      	adds	r3, r6, #1
 800cbe0:	d106      	bne.n	800cbf0 <_strtoul_l.isra.0+0xc8>
 800cbe2:	2322      	movs	r3, #34	@ 0x22
 800cbe4:	f8ce 3000 	str.w	r3, [lr]
 800cbe8:	4630      	mov	r0, r6
 800cbea:	b932      	cbnz	r2, 800cbfa <_strtoul_l.isra.0+0xd2>
 800cbec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cbf0:	b107      	cbz	r7, 800cbf4 <_strtoul_l.isra.0+0xcc>
 800cbf2:	4240      	negs	r0, r0
 800cbf4:	2a00      	cmp	r2, #0
 800cbf6:	d0f9      	beq.n	800cbec <_strtoul_l.isra.0+0xc4>
 800cbf8:	b106      	cbz	r6, 800cbfc <_strtoul_l.isra.0+0xd4>
 800cbfa:	1e69      	subs	r1, r5, #1
 800cbfc:	6011      	str	r1, [r2, #0]
 800cbfe:	e7f5      	b.n	800cbec <_strtoul_l.isra.0+0xc4>
 800cc00:	0800dc31 	.word	0x0800dc31

0800cc04 <_strtoul_r>:
 800cc04:	f7ff bf90 	b.w	800cb28 <_strtoul_l.isra.0>

0800cc08 <__ascii_wctomb>:
 800cc08:	4603      	mov	r3, r0
 800cc0a:	4608      	mov	r0, r1
 800cc0c:	b141      	cbz	r1, 800cc20 <__ascii_wctomb+0x18>
 800cc0e:	2aff      	cmp	r2, #255	@ 0xff
 800cc10:	d904      	bls.n	800cc1c <__ascii_wctomb+0x14>
 800cc12:	228a      	movs	r2, #138	@ 0x8a
 800cc14:	601a      	str	r2, [r3, #0]
 800cc16:	f04f 30ff 	mov.w	r0, #4294967295
 800cc1a:	4770      	bx	lr
 800cc1c:	700a      	strb	r2, [r1, #0]
 800cc1e:	2001      	movs	r0, #1
 800cc20:	4770      	bx	lr
	...

0800cc24 <fiprintf>:
 800cc24:	b40e      	push	{r1, r2, r3}
 800cc26:	b503      	push	{r0, r1, lr}
 800cc28:	4601      	mov	r1, r0
 800cc2a:	ab03      	add	r3, sp, #12
 800cc2c:	4805      	ldr	r0, [pc, #20]	@ (800cc44 <fiprintf+0x20>)
 800cc2e:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc32:	6800      	ldr	r0, [r0, #0]
 800cc34:	9301      	str	r3, [sp, #4]
 800cc36:	f000 f83f 	bl	800ccb8 <_vfiprintf_r>
 800cc3a:	b002      	add	sp, #8
 800cc3c:	f85d eb04 	ldr.w	lr, [sp], #4
 800cc40:	b003      	add	sp, #12
 800cc42:	4770      	bx	lr
 800cc44:	2000004c 	.word	0x2000004c

0800cc48 <abort>:
 800cc48:	b508      	push	{r3, lr}
 800cc4a:	2006      	movs	r0, #6
 800cc4c:	f000 fa08 	bl	800d060 <raise>
 800cc50:	2001      	movs	r0, #1
 800cc52:	f7f5 f8c3 	bl	8001ddc <_exit>

0800cc56 <_malloc_usable_size_r>:
 800cc56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc5a:	1f18      	subs	r0, r3, #4
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	bfbc      	itt	lt
 800cc60:	580b      	ldrlt	r3, [r1, r0]
 800cc62:	18c0      	addlt	r0, r0, r3
 800cc64:	4770      	bx	lr

0800cc66 <__sfputc_r>:
 800cc66:	6893      	ldr	r3, [r2, #8]
 800cc68:	3b01      	subs	r3, #1
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	b410      	push	{r4}
 800cc6e:	6093      	str	r3, [r2, #8]
 800cc70:	da08      	bge.n	800cc84 <__sfputc_r+0x1e>
 800cc72:	6994      	ldr	r4, [r2, #24]
 800cc74:	42a3      	cmp	r3, r4
 800cc76:	db01      	blt.n	800cc7c <__sfputc_r+0x16>
 800cc78:	290a      	cmp	r1, #10
 800cc7a:	d103      	bne.n	800cc84 <__sfputc_r+0x1e>
 800cc7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cc80:	f000 b932 	b.w	800cee8 <__swbuf_r>
 800cc84:	6813      	ldr	r3, [r2, #0]
 800cc86:	1c58      	adds	r0, r3, #1
 800cc88:	6010      	str	r0, [r2, #0]
 800cc8a:	7019      	strb	r1, [r3, #0]
 800cc8c:	4608      	mov	r0, r1
 800cc8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cc92:	4770      	bx	lr

0800cc94 <__sfputs_r>:
 800cc94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc96:	4606      	mov	r6, r0
 800cc98:	460f      	mov	r7, r1
 800cc9a:	4614      	mov	r4, r2
 800cc9c:	18d5      	adds	r5, r2, r3
 800cc9e:	42ac      	cmp	r4, r5
 800cca0:	d101      	bne.n	800cca6 <__sfputs_r+0x12>
 800cca2:	2000      	movs	r0, #0
 800cca4:	e007      	b.n	800ccb6 <__sfputs_r+0x22>
 800cca6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccaa:	463a      	mov	r2, r7
 800ccac:	4630      	mov	r0, r6
 800ccae:	f7ff ffda 	bl	800cc66 <__sfputc_r>
 800ccb2:	1c43      	adds	r3, r0, #1
 800ccb4:	d1f3      	bne.n	800cc9e <__sfputs_r+0xa>
 800ccb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ccb8 <_vfiprintf_r>:
 800ccb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccbc:	460d      	mov	r5, r1
 800ccbe:	b09d      	sub	sp, #116	@ 0x74
 800ccc0:	4614      	mov	r4, r2
 800ccc2:	4698      	mov	r8, r3
 800ccc4:	4606      	mov	r6, r0
 800ccc6:	b118      	cbz	r0, 800ccd0 <_vfiprintf_r+0x18>
 800ccc8:	6a03      	ldr	r3, [r0, #32]
 800ccca:	b90b      	cbnz	r3, 800ccd0 <_vfiprintf_r+0x18>
 800cccc:	f7fc f9b0 	bl	8009030 <__sinit>
 800ccd0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ccd2:	07d9      	lsls	r1, r3, #31
 800ccd4:	d405      	bmi.n	800cce2 <_vfiprintf_r+0x2a>
 800ccd6:	89ab      	ldrh	r3, [r5, #12]
 800ccd8:	059a      	lsls	r2, r3, #22
 800ccda:	d402      	bmi.n	800cce2 <_vfiprintf_r+0x2a>
 800ccdc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ccde:	f7fc fafe 	bl	80092de <__retarget_lock_acquire_recursive>
 800cce2:	89ab      	ldrh	r3, [r5, #12]
 800cce4:	071b      	lsls	r3, r3, #28
 800cce6:	d501      	bpl.n	800ccec <_vfiprintf_r+0x34>
 800cce8:	692b      	ldr	r3, [r5, #16]
 800ccea:	b99b      	cbnz	r3, 800cd14 <_vfiprintf_r+0x5c>
 800ccec:	4629      	mov	r1, r5
 800ccee:	4630      	mov	r0, r6
 800ccf0:	f000 f938 	bl	800cf64 <__swsetup_r>
 800ccf4:	b170      	cbz	r0, 800cd14 <_vfiprintf_r+0x5c>
 800ccf6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ccf8:	07dc      	lsls	r4, r3, #31
 800ccfa:	d504      	bpl.n	800cd06 <_vfiprintf_r+0x4e>
 800ccfc:	f04f 30ff 	mov.w	r0, #4294967295
 800cd00:	b01d      	add	sp, #116	@ 0x74
 800cd02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd06:	89ab      	ldrh	r3, [r5, #12]
 800cd08:	0598      	lsls	r0, r3, #22
 800cd0a:	d4f7      	bmi.n	800ccfc <_vfiprintf_r+0x44>
 800cd0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cd0e:	f7fc fae7 	bl	80092e0 <__retarget_lock_release_recursive>
 800cd12:	e7f3      	b.n	800ccfc <_vfiprintf_r+0x44>
 800cd14:	2300      	movs	r3, #0
 800cd16:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd18:	2320      	movs	r3, #32
 800cd1a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cd1e:	f8cd 800c 	str.w	r8, [sp, #12]
 800cd22:	2330      	movs	r3, #48	@ 0x30
 800cd24:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ced4 <_vfiprintf_r+0x21c>
 800cd28:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cd2c:	f04f 0901 	mov.w	r9, #1
 800cd30:	4623      	mov	r3, r4
 800cd32:	469a      	mov	sl, r3
 800cd34:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd38:	b10a      	cbz	r2, 800cd3e <_vfiprintf_r+0x86>
 800cd3a:	2a25      	cmp	r2, #37	@ 0x25
 800cd3c:	d1f9      	bne.n	800cd32 <_vfiprintf_r+0x7a>
 800cd3e:	ebba 0b04 	subs.w	fp, sl, r4
 800cd42:	d00b      	beq.n	800cd5c <_vfiprintf_r+0xa4>
 800cd44:	465b      	mov	r3, fp
 800cd46:	4622      	mov	r2, r4
 800cd48:	4629      	mov	r1, r5
 800cd4a:	4630      	mov	r0, r6
 800cd4c:	f7ff ffa2 	bl	800cc94 <__sfputs_r>
 800cd50:	3001      	adds	r0, #1
 800cd52:	f000 80a7 	beq.w	800cea4 <_vfiprintf_r+0x1ec>
 800cd56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cd58:	445a      	add	r2, fp
 800cd5a:	9209      	str	r2, [sp, #36]	@ 0x24
 800cd5c:	f89a 3000 	ldrb.w	r3, [sl]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	f000 809f 	beq.w	800cea4 <_vfiprintf_r+0x1ec>
 800cd66:	2300      	movs	r3, #0
 800cd68:	f04f 32ff 	mov.w	r2, #4294967295
 800cd6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd70:	f10a 0a01 	add.w	sl, sl, #1
 800cd74:	9304      	str	r3, [sp, #16]
 800cd76:	9307      	str	r3, [sp, #28]
 800cd78:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cd7c:	931a      	str	r3, [sp, #104]	@ 0x68
 800cd7e:	4654      	mov	r4, sl
 800cd80:	2205      	movs	r2, #5
 800cd82:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd86:	4853      	ldr	r0, [pc, #332]	@ (800ced4 <_vfiprintf_r+0x21c>)
 800cd88:	f7f3 fa22 	bl	80001d0 <memchr>
 800cd8c:	9a04      	ldr	r2, [sp, #16]
 800cd8e:	b9d8      	cbnz	r0, 800cdc8 <_vfiprintf_r+0x110>
 800cd90:	06d1      	lsls	r1, r2, #27
 800cd92:	bf44      	itt	mi
 800cd94:	2320      	movmi	r3, #32
 800cd96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cd9a:	0713      	lsls	r3, r2, #28
 800cd9c:	bf44      	itt	mi
 800cd9e:	232b      	movmi	r3, #43	@ 0x2b
 800cda0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cda4:	f89a 3000 	ldrb.w	r3, [sl]
 800cda8:	2b2a      	cmp	r3, #42	@ 0x2a
 800cdaa:	d015      	beq.n	800cdd8 <_vfiprintf_r+0x120>
 800cdac:	9a07      	ldr	r2, [sp, #28]
 800cdae:	4654      	mov	r4, sl
 800cdb0:	2000      	movs	r0, #0
 800cdb2:	f04f 0c0a 	mov.w	ip, #10
 800cdb6:	4621      	mov	r1, r4
 800cdb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cdbc:	3b30      	subs	r3, #48	@ 0x30
 800cdbe:	2b09      	cmp	r3, #9
 800cdc0:	d94b      	bls.n	800ce5a <_vfiprintf_r+0x1a2>
 800cdc2:	b1b0      	cbz	r0, 800cdf2 <_vfiprintf_r+0x13a>
 800cdc4:	9207      	str	r2, [sp, #28]
 800cdc6:	e014      	b.n	800cdf2 <_vfiprintf_r+0x13a>
 800cdc8:	eba0 0308 	sub.w	r3, r0, r8
 800cdcc:	fa09 f303 	lsl.w	r3, r9, r3
 800cdd0:	4313      	orrs	r3, r2
 800cdd2:	9304      	str	r3, [sp, #16]
 800cdd4:	46a2      	mov	sl, r4
 800cdd6:	e7d2      	b.n	800cd7e <_vfiprintf_r+0xc6>
 800cdd8:	9b03      	ldr	r3, [sp, #12]
 800cdda:	1d19      	adds	r1, r3, #4
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	9103      	str	r1, [sp, #12]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	bfbb      	ittet	lt
 800cde4:	425b      	neglt	r3, r3
 800cde6:	f042 0202 	orrlt.w	r2, r2, #2
 800cdea:	9307      	strge	r3, [sp, #28]
 800cdec:	9307      	strlt	r3, [sp, #28]
 800cdee:	bfb8      	it	lt
 800cdf0:	9204      	strlt	r2, [sp, #16]
 800cdf2:	7823      	ldrb	r3, [r4, #0]
 800cdf4:	2b2e      	cmp	r3, #46	@ 0x2e
 800cdf6:	d10a      	bne.n	800ce0e <_vfiprintf_r+0x156>
 800cdf8:	7863      	ldrb	r3, [r4, #1]
 800cdfa:	2b2a      	cmp	r3, #42	@ 0x2a
 800cdfc:	d132      	bne.n	800ce64 <_vfiprintf_r+0x1ac>
 800cdfe:	9b03      	ldr	r3, [sp, #12]
 800ce00:	1d1a      	adds	r2, r3, #4
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	9203      	str	r2, [sp, #12]
 800ce06:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ce0a:	3402      	adds	r4, #2
 800ce0c:	9305      	str	r3, [sp, #20]
 800ce0e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cee4 <_vfiprintf_r+0x22c>
 800ce12:	7821      	ldrb	r1, [r4, #0]
 800ce14:	2203      	movs	r2, #3
 800ce16:	4650      	mov	r0, sl
 800ce18:	f7f3 f9da 	bl	80001d0 <memchr>
 800ce1c:	b138      	cbz	r0, 800ce2e <_vfiprintf_r+0x176>
 800ce1e:	9b04      	ldr	r3, [sp, #16]
 800ce20:	eba0 000a 	sub.w	r0, r0, sl
 800ce24:	2240      	movs	r2, #64	@ 0x40
 800ce26:	4082      	lsls	r2, r0
 800ce28:	4313      	orrs	r3, r2
 800ce2a:	3401      	adds	r4, #1
 800ce2c:	9304      	str	r3, [sp, #16]
 800ce2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce32:	4829      	ldr	r0, [pc, #164]	@ (800ced8 <_vfiprintf_r+0x220>)
 800ce34:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ce38:	2206      	movs	r2, #6
 800ce3a:	f7f3 f9c9 	bl	80001d0 <memchr>
 800ce3e:	2800      	cmp	r0, #0
 800ce40:	d03f      	beq.n	800cec2 <_vfiprintf_r+0x20a>
 800ce42:	4b26      	ldr	r3, [pc, #152]	@ (800cedc <_vfiprintf_r+0x224>)
 800ce44:	bb1b      	cbnz	r3, 800ce8e <_vfiprintf_r+0x1d6>
 800ce46:	9b03      	ldr	r3, [sp, #12]
 800ce48:	3307      	adds	r3, #7
 800ce4a:	f023 0307 	bic.w	r3, r3, #7
 800ce4e:	3308      	adds	r3, #8
 800ce50:	9303      	str	r3, [sp, #12]
 800ce52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce54:	443b      	add	r3, r7
 800ce56:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce58:	e76a      	b.n	800cd30 <_vfiprintf_r+0x78>
 800ce5a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ce5e:	460c      	mov	r4, r1
 800ce60:	2001      	movs	r0, #1
 800ce62:	e7a8      	b.n	800cdb6 <_vfiprintf_r+0xfe>
 800ce64:	2300      	movs	r3, #0
 800ce66:	3401      	adds	r4, #1
 800ce68:	9305      	str	r3, [sp, #20]
 800ce6a:	4619      	mov	r1, r3
 800ce6c:	f04f 0c0a 	mov.w	ip, #10
 800ce70:	4620      	mov	r0, r4
 800ce72:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce76:	3a30      	subs	r2, #48	@ 0x30
 800ce78:	2a09      	cmp	r2, #9
 800ce7a:	d903      	bls.n	800ce84 <_vfiprintf_r+0x1cc>
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d0c6      	beq.n	800ce0e <_vfiprintf_r+0x156>
 800ce80:	9105      	str	r1, [sp, #20]
 800ce82:	e7c4      	b.n	800ce0e <_vfiprintf_r+0x156>
 800ce84:	fb0c 2101 	mla	r1, ip, r1, r2
 800ce88:	4604      	mov	r4, r0
 800ce8a:	2301      	movs	r3, #1
 800ce8c:	e7f0      	b.n	800ce70 <_vfiprintf_r+0x1b8>
 800ce8e:	ab03      	add	r3, sp, #12
 800ce90:	9300      	str	r3, [sp, #0]
 800ce92:	462a      	mov	r2, r5
 800ce94:	4b12      	ldr	r3, [pc, #72]	@ (800cee0 <_vfiprintf_r+0x228>)
 800ce96:	a904      	add	r1, sp, #16
 800ce98:	4630      	mov	r0, r6
 800ce9a:	f7fb fa79 	bl	8008390 <_printf_float>
 800ce9e:	4607      	mov	r7, r0
 800cea0:	1c78      	adds	r0, r7, #1
 800cea2:	d1d6      	bne.n	800ce52 <_vfiprintf_r+0x19a>
 800cea4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cea6:	07d9      	lsls	r1, r3, #31
 800cea8:	d405      	bmi.n	800ceb6 <_vfiprintf_r+0x1fe>
 800ceaa:	89ab      	ldrh	r3, [r5, #12]
 800ceac:	059a      	lsls	r2, r3, #22
 800ceae:	d402      	bmi.n	800ceb6 <_vfiprintf_r+0x1fe>
 800ceb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ceb2:	f7fc fa15 	bl	80092e0 <__retarget_lock_release_recursive>
 800ceb6:	89ab      	ldrh	r3, [r5, #12]
 800ceb8:	065b      	lsls	r3, r3, #25
 800ceba:	f53f af1f 	bmi.w	800ccfc <_vfiprintf_r+0x44>
 800cebe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cec0:	e71e      	b.n	800cd00 <_vfiprintf_r+0x48>
 800cec2:	ab03      	add	r3, sp, #12
 800cec4:	9300      	str	r3, [sp, #0]
 800cec6:	462a      	mov	r2, r5
 800cec8:	4b05      	ldr	r3, [pc, #20]	@ (800cee0 <_vfiprintf_r+0x228>)
 800ceca:	a904      	add	r1, sp, #16
 800cecc:	4630      	mov	r0, r6
 800cece:	f7fb fcf7 	bl	80088c0 <_printf_i>
 800ced2:	e7e4      	b.n	800ce9e <_vfiprintf_r+0x1e6>
 800ced4:	0800da0f 	.word	0x0800da0f
 800ced8:	0800da19 	.word	0x0800da19
 800cedc:	08008391 	.word	0x08008391
 800cee0:	0800cc95 	.word	0x0800cc95
 800cee4:	0800da15 	.word	0x0800da15

0800cee8 <__swbuf_r>:
 800cee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceea:	460e      	mov	r6, r1
 800ceec:	4614      	mov	r4, r2
 800ceee:	4605      	mov	r5, r0
 800cef0:	b118      	cbz	r0, 800cefa <__swbuf_r+0x12>
 800cef2:	6a03      	ldr	r3, [r0, #32]
 800cef4:	b90b      	cbnz	r3, 800cefa <__swbuf_r+0x12>
 800cef6:	f7fc f89b 	bl	8009030 <__sinit>
 800cefa:	69a3      	ldr	r3, [r4, #24]
 800cefc:	60a3      	str	r3, [r4, #8]
 800cefe:	89a3      	ldrh	r3, [r4, #12]
 800cf00:	071a      	lsls	r2, r3, #28
 800cf02:	d501      	bpl.n	800cf08 <__swbuf_r+0x20>
 800cf04:	6923      	ldr	r3, [r4, #16]
 800cf06:	b943      	cbnz	r3, 800cf1a <__swbuf_r+0x32>
 800cf08:	4621      	mov	r1, r4
 800cf0a:	4628      	mov	r0, r5
 800cf0c:	f000 f82a 	bl	800cf64 <__swsetup_r>
 800cf10:	b118      	cbz	r0, 800cf1a <__swbuf_r+0x32>
 800cf12:	f04f 37ff 	mov.w	r7, #4294967295
 800cf16:	4638      	mov	r0, r7
 800cf18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf1a:	6823      	ldr	r3, [r4, #0]
 800cf1c:	6922      	ldr	r2, [r4, #16]
 800cf1e:	1a98      	subs	r0, r3, r2
 800cf20:	6963      	ldr	r3, [r4, #20]
 800cf22:	b2f6      	uxtb	r6, r6
 800cf24:	4283      	cmp	r3, r0
 800cf26:	4637      	mov	r7, r6
 800cf28:	dc05      	bgt.n	800cf36 <__swbuf_r+0x4e>
 800cf2a:	4621      	mov	r1, r4
 800cf2c:	4628      	mov	r0, r5
 800cf2e:	f7ff f96f 	bl	800c210 <_fflush_r>
 800cf32:	2800      	cmp	r0, #0
 800cf34:	d1ed      	bne.n	800cf12 <__swbuf_r+0x2a>
 800cf36:	68a3      	ldr	r3, [r4, #8]
 800cf38:	3b01      	subs	r3, #1
 800cf3a:	60a3      	str	r3, [r4, #8]
 800cf3c:	6823      	ldr	r3, [r4, #0]
 800cf3e:	1c5a      	adds	r2, r3, #1
 800cf40:	6022      	str	r2, [r4, #0]
 800cf42:	701e      	strb	r6, [r3, #0]
 800cf44:	6962      	ldr	r2, [r4, #20]
 800cf46:	1c43      	adds	r3, r0, #1
 800cf48:	429a      	cmp	r2, r3
 800cf4a:	d004      	beq.n	800cf56 <__swbuf_r+0x6e>
 800cf4c:	89a3      	ldrh	r3, [r4, #12]
 800cf4e:	07db      	lsls	r3, r3, #31
 800cf50:	d5e1      	bpl.n	800cf16 <__swbuf_r+0x2e>
 800cf52:	2e0a      	cmp	r6, #10
 800cf54:	d1df      	bne.n	800cf16 <__swbuf_r+0x2e>
 800cf56:	4621      	mov	r1, r4
 800cf58:	4628      	mov	r0, r5
 800cf5a:	f7ff f959 	bl	800c210 <_fflush_r>
 800cf5e:	2800      	cmp	r0, #0
 800cf60:	d0d9      	beq.n	800cf16 <__swbuf_r+0x2e>
 800cf62:	e7d6      	b.n	800cf12 <__swbuf_r+0x2a>

0800cf64 <__swsetup_r>:
 800cf64:	b538      	push	{r3, r4, r5, lr}
 800cf66:	4b29      	ldr	r3, [pc, #164]	@ (800d00c <__swsetup_r+0xa8>)
 800cf68:	4605      	mov	r5, r0
 800cf6a:	6818      	ldr	r0, [r3, #0]
 800cf6c:	460c      	mov	r4, r1
 800cf6e:	b118      	cbz	r0, 800cf78 <__swsetup_r+0x14>
 800cf70:	6a03      	ldr	r3, [r0, #32]
 800cf72:	b90b      	cbnz	r3, 800cf78 <__swsetup_r+0x14>
 800cf74:	f7fc f85c 	bl	8009030 <__sinit>
 800cf78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf7c:	0719      	lsls	r1, r3, #28
 800cf7e:	d422      	bmi.n	800cfc6 <__swsetup_r+0x62>
 800cf80:	06da      	lsls	r2, r3, #27
 800cf82:	d407      	bmi.n	800cf94 <__swsetup_r+0x30>
 800cf84:	2209      	movs	r2, #9
 800cf86:	602a      	str	r2, [r5, #0]
 800cf88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cf8c:	81a3      	strh	r3, [r4, #12]
 800cf8e:	f04f 30ff 	mov.w	r0, #4294967295
 800cf92:	e033      	b.n	800cffc <__swsetup_r+0x98>
 800cf94:	0758      	lsls	r0, r3, #29
 800cf96:	d512      	bpl.n	800cfbe <__swsetup_r+0x5a>
 800cf98:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cf9a:	b141      	cbz	r1, 800cfae <__swsetup_r+0x4a>
 800cf9c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cfa0:	4299      	cmp	r1, r3
 800cfa2:	d002      	beq.n	800cfaa <__swsetup_r+0x46>
 800cfa4:	4628      	mov	r0, r5
 800cfa6:	f7fd f80b 	bl	8009fc0 <_free_r>
 800cfaa:	2300      	movs	r3, #0
 800cfac:	6363      	str	r3, [r4, #52]	@ 0x34
 800cfae:	89a3      	ldrh	r3, [r4, #12]
 800cfb0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cfb4:	81a3      	strh	r3, [r4, #12]
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	6063      	str	r3, [r4, #4]
 800cfba:	6923      	ldr	r3, [r4, #16]
 800cfbc:	6023      	str	r3, [r4, #0]
 800cfbe:	89a3      	ldrh	r3, [r4, #12]
 800cfc0:	f043 0308 	orr.w	r3, r3, #8
 800cfc4:	81a3      	strh	r3, [r4, #12]
 800cfc6:	6923      	ldr	r3, [r4, #16]
 800cfc8:	b94b      	cbnz	r3, 800cfde <__swsetup_r+0x7a>
 800cfca:	89a3      	ldrh	r3, [r4, #12]
 800cfcc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cfd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cfd4:	d003      	beq.n	800cfde <__swsetup_r+0x7a>
 800cfd6:	4621      	mov	r1, r4
 800cfd8:	4628      	mov	r0, r5
 800cfda:	f000 f883 	bl	800d0e4 <__smakebuf_r>
 800cfde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cfe2:	f013 0201 	ands.w	r2, r3, #1
 800cfe6:	d00a      	beq.n	800cffe <__swsetup_r+0x9a>
 800cfe8:	2200      	movs	r2, #0
 800cfea:	60a2      	str	r2, [r4, #8]
 800cfec:	6962      	ldr	r2, [r4, #20]
 800cfee:	4252      	negs	r2, r2
 800cff0:	61a2      	str	r2, [r4, #24]
 800cff2:	6922      	ldr	r2, [r4, #16]
 800cff4:	b942      	cbnz	r2, 800d008 <__swsetup_r+0xa4>
 800cff6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cffa:	d1c5      	bne.n	800cf88 <__swsetup_r+0x24>
 800cffc:	bd38      	pop	{r3, r4, r5, pc}
 800cffe:	0799      	lsls	r1, r3, #30
 800d000:	bf58      	it	pl
 800d002:	6962      	ldrpl	r2, [r4, #20]
 800d004:	60a2      	str	r2, [r4, #8]
 800d006:	e7f4      	b.n	800cff2 <__swsetup_r+0x8e>
 800d008:	2000      	movs	r0, #0
 800d00a:	e7f7      	b.n	800cffc <__swsetup_r+0x98>
 800d00c:	2000004c 	.word	0x2000004c

0800d010 <_raise_r>:
 800d010:	291f      	cmp	r1, #31
 800d012:	b538      	push	{r3, r4, r5, lr}
 800d014:	4605      	mov	r5, r0
 800d016:	460c      	mov	r4, r1
 800d018:	d904      	bls.n	800d024 <_raise_r+0x14>
 800d01a:	2316      	movs	r3, #22
 800d01c:	6003      	str	r3, [r0, #0]
 800d01e:	f04f 30ff 	mov.w	r0, #4294967295
 800d022:	bd38      	pop	{r3, r4, r5, pc}
 800d024:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d026:	b112      	cbz	r2, 800d02e <_raise_r+0x1e>
 800d028:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d02c:	b94b      	cbnz	r3, 800d042 <_raise_r+0x32>
 800d02e:	4628      	mov	r0, r5
 800d030:	f000 f830 	bl	800d094 <_getpid_r>
 800d034:	4622      	mov	r2, r4
 800d036:	4601      	mov	r1, r0
 800d038:	4628      	mov	r0, r5
 800d03a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d03e:	f000 b817 	b.w	800d070 <_kill_r>
 800d042:	2b01      	cmp	r3, #1
 800d044:	d00a      	beq.n	800d05c <_raise_r+0x4c>
 800d046:	1c59      	adds	r1, r3, #1
 800d048:	d103      	bne.n	800d052 <_raise_r+0x42>
 800d04a:	2316      	movs	r3, #22
 800d04c:	6003      	str	r3, [r0, #0]
 800d04e:	2001      	movs	r0, #1
 800d050:	e7e7      	b.n	800d022 <_raise_r+0x12>
 800d052:	2100      	movs	r1, #0
 800d054:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d058:	4620      	mov	r0, r4
 800d05a:	4798      	blx	r3
 800d05c:	2000      	movs	r0, #0
 800d05e:	e7e0      	b.n	800d022 <_raise_r+0x12>

0800d060 <raise>:
 800d060:	4b02      	ldr	r3, [pc, #8]	@ (800d06c <raise+0xc>)
 800d062:	4601      	mov	r1, r0
 800d064:	6818      	ldr	r0, [r3, #0]
 800d066:	f7ff bfd3 	b.w	800d010 <_raise_r>
 800d06a:	bf00      	nop
 800d06c:	2000004c 	.word	0x2000004c

0800d070 <_kill_r>:
 800d070:	b538      	push	{r3, r4, r5, lr}
 800d072:	4d07      	ldr	r5, [pc, #28]	@ (800d090 <_kill_r+0x20>)
 800d074:	2300      	movs	r3, #0
 800d076:	4604      	mov	r4, r0
 800d078:	4608      	mov	r0, r1
 800d07a:	4611      	mov	r1, r2
 800d07c:	602b      	str	r3, [r5, #0]
 800d07e:	f7f4 fe9d 	bl	8001dbc <_kill>
 800d082:	1c43      	adds	r3, r0, #1
 800d084:	d102      	bne.n	800d08c <_kill_r+0x1c>
 800d086:	682b      	ldr	r3, [r5, #0]
 800d088:	b103      	cbz	r3, 800d08c <_kill_r+0x1c>
 800d08a:	6023      	str	r3, [r4, #0]
 800d08c:	bd38      	pop	{r3, r4, r5, pc}
 800d08e:	bf00      	nop
 800d090:	20001634 	.word	0x20001634

0800d094 <_getpid_r>:
 800d094:	f7f4 be8a 	b.w	8001dac <_getpid>

0800d098 <__swhatbuf_r>:
 800d098:	b570      	push	{r4, r5, r6, lr}
 800d09a:	460c      	mov	r4, r1
 800d09c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0a0:	2900      	cmp	r1, #0
 800d0a2:	b096      	sub	sp, #88	@ 0x58
 800d0a4:	4615      	mov	r5, r2
 800d0a6:	461e      	mov	r6, r3
 800d0a8:	da0d      	bge.n	800d0c6 <__swhatbuf_r+0x2e>
 800d0aa:	89a3      	ldrh	r3, [r4, #12]
 800d0ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d0b0:	f04f 0100 	mov.w	r1, #0
 800d0b4:	bf14      	ite	ne
 800d0b6:	2340      	movne	r3, #64	@ 0x40
 800d0b8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d0bc:	2000      	movs	r0, #0
 800d0be:	6031      	str	r1, [r6, #0]
 800d0c0:	602b      	str	r3, [r5, #0]
 800d0c2:	b016      	add	sp, #88	@ 0x58
 800d0c4:	bd70      	pop	{r4, r5, r6, pc}
 800d0c6:	466a      	mov	r2, sp
 800d0c8:	f000 f848 	bl	800d15c <_fstat_r>
 800d0cc:	2800      	cmp	r0, #0
 800d0ce:	dbec      	blt.n	800d0aa <__swhatbuf_r+0x12>
 800d0d0:	9901      	ldr	r1, [sp, #4]
 800d0d2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d0d6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d0da:	4259      	negs	r1, r3
 800d0dc:	4159      	adcs	r1, r3
 800d0de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d0e2:	e7eb      	b.n	800d0bc <__swhatbuf_r+0x24>

0800d0e4 <__smakebuf_r>:
 800d0e4:	898b      	ldrh	r3, [r1, #12]
 800d0e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d0e8:	079d      	lsls	r5, r3, #30
 800d0ea:	4606      	mov	r6, r0
 800d0ec:	460c      	mov	r4, r1
 800d0ee:	d507      	bpl.n	800d100 <__smakebuf_r+0x1c>
 800d0f0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d0f4:	6023      	str	r3, [r4, #0]
 800d0f6:	6123      	str	r3, [r4, #16]
 800d0f8:	2301      	movs	r3, #1
 800d0fa:	6163      	str	r3, [r4, #20]
 800d0fc:	b003      	add	sp, #12
 800d0fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d100:	ab01      	add	r3, sp, #4
 800d102:	466a      	mov	r2, sp
 800d104:	f7ff ffc8 	bl	800d098 <__swhatbuf_r>
 800d108:	9f00      	ldr	r7, [sp, #0]
 800d10a:	4605      	mov	r5, r0
 800d10c:	4639      	mov	r1, r7
 800d10e:	4630      	mov	r0, r6
 800d110:	f7fc ffca 	bl	800a0a8 <_malloc_r>
 800d114:	b948      	cbnz	r0, 800d12a <__smakebuf_r+0x46>
 800d116:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d11a:	059a      	lsls	r2, r3, #22
 800d11c:	d4ee      	bmi.n	800d0fc <__smakebuf_r+0x18>
 800d11e:	f023 0303 	bic.w	r3, r3, #3
 800d122:	f043 0302 	orr.w	r3, r3, #2
 800d126:	81a3      	strh	r3, [r4, #12]
 800d128:	e7e2      	b.n	800d0f0 <__smakebuf_r+0xc>
 800d12a:	89a3      	ldrh	r3, [r4, #12]
 800d12c:	6020      	str	r0, [r4, #0]
 800d12e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d132:	81a3      	strh	r3, [r4, #12]
 800d134:	9b01      	ldr	r3, [sp, #4]
 800d136:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d13a:	b15b      	cbz	r3, 800d154 <__smakebuf_r+0x70>
 800d13c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d140:	4630      	mov	r0, r6
 800d142:	f000 f81d 	bl	800d180 <_isatty_r>
 800d146:	b128      	cbz	r0, 800d154 <__smakebuf_r+0x70>
 800d148:	89a3      	ldrh	r3, [r4, #12]
 800d14a:	f023 0303 	bic.w	r3, r3, #3
 800d14e:	f043 0301 	orr.w	r3, r3, #1
 800d152:	81a3      	strh	r3, [r4, #12]
 800d154:	89a3      	ldrh	r3, [r4, #12]
 800d156:	431d      	orrs	r5, r3
 800d158:	81a5      	strh	r5, [r4, #12]
 800d15a:	e7cf      	b.n	800d0fc <__smakebuf_r+0x18>

0800d15c <_fstat_r>:
 800d15c:	b538      	push	{r3, r4, r5, lr}
 800d15e:	4d07      	ldr	r5, [pc, #28]	@ (800d17c <_fstat_r+0x20>)
 800d160:	2300      	movs	r3, #0
 800d162:	4604      	mov	r4, r0
 800d164:	4608      	mov	r0, r1
 800d166:	4611      	mov	r1, r2
 800d168:	602b      	str	r3, [r5, #0]
 800d16a:	f7f4 fe87 	bl	8001e7c <_fstat>
 800d16e:	1c43      	adds	r3, r0, #1
 800d170:	d102      	bne.n	800d178 <_fstat_r+0x1c>
 800d172:	682b      	ldr	r3, [r5, #0]
 800d174:	b103      	cbz	r3, 800d178 <_fstat_r+0x1c>
 800d176:	6023      	str	r3, [r4, #0]
 800d178:	bd38      	pop	{r3, r4, r5, pc}
 800d17a:	bf00      	nop
 800d17c:	20001634 	.word	0x20001634

0800d180 <_isatty_r>:
 800d180:	b538      	push	{r3, r4, r5, lr}
 800d182:	4d06      	ldr	r5, [pc, #24]	@ (800d19c <_isatty_r+0x1c>)
 800d184:	2300      	movs	r3, #0
 800d186:	4604      	mov	r4, r0
 800d188:	4608      	mov	r0, r1
 800d18a:	602b      	str	r3, [r5, #0]
 800d18c:	f7f4 fe86 	bl	8001e9c <_isatty>
 800d190:	1c43      	adds	r3, r0, #1
 800d192:	d102      	bne.n	800d19a <_isatty_r+0x1a>
 800d194:	682b      	ldr	r3, [r5, #0]
 800d196:	b103      	cbz	r3, 800d19a <_isatty_r+0x1a>
 800d198:	6023      	str	r3, [r4, #0]
 800d19a:	bd38      	pop	{r3, r4, r5, pc}
 800d19c:	20001634 	.word	0x20001634

0800d1a0 <_init>:
 800d1a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1a2:	bf00      	nop
 800d1a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d1a6:	bc08      	pop	{r3}
 800d1a8:	469e      	mov	lr, r3
 800d1aa:	4770      	bx	lr

0800d1ac <_fini>:
 800d1ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1ae:	bf00      	nop
 800d1b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d1b2:	bc08      	pop	{r3}
 800d1b4:	469e      	mov	lr, r3
 800d1b6:	4770      	bx	lr
