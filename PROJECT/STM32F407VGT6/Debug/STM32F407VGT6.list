
STM32F407VGT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d068  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b84  0800d1f8  0800d1f8  0000e1f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dd7c  0800dd7c  0000f1f4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800dd7c  0800dd7c  0000ed7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dd84  0800dd84  0000f1f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dd84  0800dd84  0000ed84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dd88  0800dd88  0000ed88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  20000000  0800dd8c  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f1f4  2**0
                  CONTENTS
 10 .bss          00000f9c  200001f4  200001f4  0000f1f4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001190  20001190  0000f1f4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f1f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014606  00000000  00000000  0000f224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000031d6  00000000  00000000  0002382a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001280  00000000  00000000  00026a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e72  00000000  00000000  00027c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023a7e  00000000  00000000  00028af2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000186f6  00000000  00000000  0004c570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0ab6  00000000  00000000  00064c66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013571c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000063f8  00000000  00000000  00135760  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000054  00000000  00000000  0013bb58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f4 	.word	0x200001f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d1e0 	.word	0x0800d1e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	0800d1e0 	.word	0x0800d1e0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	607b      	str	r3, [r7, #4]
 800102a:	4b27      	ldr	r3, [pc, #156]	@ (80010c8 <MX_DMA_Init+0xa8>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102e:	4a26      	ldr	r2, [pc, #152]	@ (80010c8 <MX_DMA_Init+0xa8>)
 8001030:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001034:	6313      	str	r3, [r2, #48]	@ 0x30
 8001036:	4b24      	ldr	r3, [pc, #144]	@ (80010c8 <MX_DMA_Init+0xa8>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800103e:	607b      	str	r3, [r7, #4]
 8001040:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	603b      	str	r3, [r7, #0]
 8001046:	4b20      	ldr	r3, [pc, #128]	@ (80010c8 <MX_DMA_Init+0xa8>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104a:	4a1f      	ldr	r2, [pc, #124]	@ (80010c8 <MX_DMA_Init+0xa8>)
 800104c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001050:	6313      	str	r3, [r2, #48]	@ 0x30
 8001052:	4b1d      	ldr	r3, [pc, #116]	@ (80010c8 <MX_DMA_Init+0xa8>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001056:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800105a:	603b      	str	r3, [r7, #0]
 800105c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800105e:	2200      	movs	r2, #0
 8001060:	2100      	movs	r1, #0
 8001062:	200c      	movs	r0, #12
 8001064:	f002 fc5f 	bl	8003926 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001068:	200c      	movs	r0, #12
 800106a:	f002 fc78 	bl	800395e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800106e:	2200      	movs	r2, #0
 8001070:	2100      	movs	r1, #0
 8001072:	200e      	movs	r0, #14
 8001074:	f002 fc57 	bl	8003926 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001078:	200e      	movs	r0, #14
 800107a:	f002 fc70 	bl	800395e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800107e:	2200      	movs	r2, #0
 8001080:	2100      	movs	r1, #0
 8001082:	2010      	movs	r0, #16
 8001084:	f002 fc4f 	bl	8003926 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001088:	2010      	movs	r0, #16
 800108a:	f002 fc68 	bl	800395e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800108e:	2200      	movs	r2, #0
 8001090:	2100      	movs	r1, #0
 8001092:	2011      	movs	r0, #17
 8001094:	f002 fc47 	bl	8003926 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001098:	2011      	movs	r0, #17
 800109a:	f002 fc60 	bl	800395e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800109e:	2200      	movs	r2, #0
 80010a0:	2100      	movs	r1, #0
 80010a2:	203a      	movs	r0, #58	@ 0x3a
 80010a4:	f002 fc3f 	bl	8003926 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80010a8:	203a      	movs	r0, #58	@ 0x3a
 80010aa:	f002 fc58 	bl	800395e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2100      	movs	r1, #0
 80010b2:	2046      	movs	r0, #70	@ 0x46
 80010b4:	f002 fc37 	bl	8003926 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80010b8:	2046      	movs	r0, #70	@ 0x46
 80010ba:	f002 fc50 	bl	800395e <HAL_NVIC_EnableIRQ>

}
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40023800 	.word	0x40023800

080010cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08c      	sub	sp, #48	@ 0x30
 80010d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d2:	f107 031c 	add.w	r3, r7, #28
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	605a      	str	r2, [r3, #4]
 80010dc:	609a      	str	r2, [r3, #8]
 80010de:	60da      	str	r2, [r3, #12]
 80010e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	61bb      	str	r3, [r7, #24]
 80010e6:	4b45      	ldr	r3, [pc, #276]	@ (80011fc <MX_GPIO_Init+0x130>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ea:	4a44      	ldr	r2, [pc, #272]	@ (80011fc <MX_GPIO_Init+0x130>)
 80010ec:	f043 0310 	orr.w	r3, r3, #16
 80010f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010f2:	4b42      	ldr	r3, [pc, #264]	@ (80011fc <MX_GPIO_Init+0x130>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f6:	f003 0310 	and.w	r3, r3, #16
 80010fa:	61bb      	str	r3, [r7, #24]
 80010fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	617b      	str	r3, [r7, #20]
 8001102:	4b3e      	ldr	r3, [pc, #248]	@ (80011fc <MX_GPIO_Init+0x130>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001106:	4a3d      	ldr	r2, [pc, #244]	@ (80011fc <MX_GPIO_Init+0x130>)
 8001108:	f043 0304 	orr.w	r3, r3, #4
 800110c:	6313      	str	r3, [r2, #48]	@ 0x30
 800110e:	4b3b      	ldr	r3, [pc, #236]	@ (80011fc <MX_GPIO_Init+0x130>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001112:	f003 0304 	and.w	r3, r3, #4
 8001116:	617b      	str	r3, [r7, #20]
 8001118:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	613b      	str	r3, [r7, #16]
 800111e:	4b37      	ldr	r3, [pc, #220]	@ (80011fc <MX_GPIO_Init+0x130>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001122:	4a36      	ldr	r2, [pc, #216]	@ (80011fc <MX_GPIO_Init+0x130>)
 8001124:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001128:	6313      	str	r3, [r2, #48]	@ 0x30
 800112a:	4b34      	ldr	r3, [pc, #208]	@ (80011fc <MX_GPIO_Init+0x130>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001132:	613b      	str	r3, [r7, #16]
 8001134:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	4b30      	ldr	r3, [pc, #192]	@ (80011fc <MX_GPIO_Init+0x130>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113e:	4a2f      	ldr	r2, [pc, #188]	@ (80011fc <MX_GPIO_Init+0x130>)
 8001140:	f043 0301 	orr.w	r3, r3, #1
 8001144:	6313      	str	r3, [r2, #48]	@ 0x30
 8001146:	4b2d      	ldr	r3, [pc, #180]	@ (80011fc <MX_GPIO_Init+0x130>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114a:	f003 0301 	and.w	r3, r3, #1
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	60bb      	str	r3, [r7, #8]
 8001156:	4b29      	ldr	r3, [pc, #164]	@ (80011fc <MX_GPIO_Init+0x130>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115a:	4a28      	ldr	r2, [pc, #160]	@ (80011fc <MX_GPIO_Init+0x130>)
 800115c:	f043 0302 	orr.w	r3, r3, #2
 8001160:	6313      	str	r3, [r2, #48]	@ 0x30
 8001162:	4b26      	ldr	r3, [pc, #152]	@ (80011fc <MX_GPIO_Init+0x130>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001166:	f003 0302 	and.w	r3, r3, #2
 800116a:	60bb      	str	r3, [r7, #8]
 800116c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	607b      	str	r3, [r7, #4]
 8001172:	4b22      	ldr	r3, [pc, #136]	@ (80011fc <MX_GPIO_Init+0x130>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001176:	4a21      	ldr	r2, [pc, #132]	@ (80011fc <MX_GPIO_Init+0x130>)
 8001178:	f043 0308 	orr.w	r3, r3, #8
 800117c:	6313      	str	r3, [r2, #48]	@ 0x30
 800117e:	4b1f      	ldr	r3, [pc, #124]	@ (80011fc <MX_GPIO_Init+0x130>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001182:	f003 0308 	and.w	r3, r3, #8
 8001186:	607b      	str	r3, [r7, #4]
 8001188:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 800118a:	2200      	movs	r2, #0
 800118c:	2140      	movs	r1, #64	@ 0x40
 800118e:	481c      	ldr	r0, [pc, #112]	@ (8001200 <MX_GPIO_Init+0x134>)
 8001190:	f003 f99e 	bl	80044d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, motorB1_Pin|motorA2_Pin|motorA1_Pin|MOTORB2_Pin, GPIO_PIN_RESET);
 8001194:	2200      	movs	r2, #0
 8001196:	f44f 51f0 	mov.w	r1, #7680	@ 0x1e00
 800119a:	481a      	ldr	r0, [pc, #104]	@ (8001204 <MX_GPIO_Init+0x138>)
 800119c:	f003 f998 	bl	80044d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TRIG_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 80011a0:	2340      	movs	r3, #64	@ 0x40
 80011a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a4:	2301      	movs	r3, #1
 80011a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011ac:	2302      	movs	r3, #2
 80011ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 80011b0:	f107 031c 	add.w	r3, r7, #28
 80011b4:	4619      	mov	r1, r3
 80011b6:	4812      	ldr	r0, [pc, #72]	@ (8001200 <MX_GPIO_Init+0x134>)
 80011b8:	f002 ffee 	bl	8004198 <HAL_GPIO_Init>

  /*Configure GPIO pins : out1_Pin out2_Pin out3_Pin out4_Pin
                           out5_Pin */
  GPIO_InitStruct.Pin = out1_Pin|out2_Pin|out3_Pin|out4_Pin
 80011bc:	f44f 43f8 	mov.w	r3, #31744	@ 0x7c00
 80011c0:	61fb      	str	r3, [r7, #28]
                          |out5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011c2:	2300      	movs	r3, #0
 80011c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011ca:	f107 031c 	add.w	r3, r7, #28
 80011ce:	4619      	mov	r1, r3
 80011d0:	480b      	ldr	r0, [pc, #44]	@ (8001200 <MX_GPIO_Init+0x134>)
 80011d2:	f002 ffe1 	bl	8004198 <HAL_GPIO_Init>

  /*Configure GPIO pins : motorB1_Pin motorA2_Pin motorA1_Pin MOTORB2_Pin */
  GPIO_InitStruct.Pin = motorB1_Pin|motorA2_Pin|motorA1_Pin|MOTORB2_Pin;
 80011d6:	f44f 53f0 	mov.w	r3, #7680	@ 0x1e00
 80011da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011dc:	2301      	movs	r3, #1
 80011de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e4:	2300      	movs	r3, #0
 80011e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011e8:	f107 031c 	add.w	r3, r7, #28
 80011ec:	4619      	mov	r1, r3
 80011ee:	4805      	ldr	r0, [pc, #20]	@ (8001204 <MX_GPIO_Init+0x138>)
 80011f0:	f002 ffd2 	bl	8004198 <HAL_GPIO_Init>

}
 80011f4:	bf00      	nop
 80011f6:	3730      	adds	r7, #48	@ 0x30
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	40023800 	.word	0x40023800
 8001200:	40021000 	.word	0x40021000
 8001204:	40020c00 	.word	0x40020c00

08001208 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800120c:	4b12      	ldr	r3, [pc, #72]	@ (8001258 <MX_I2C1_Init+0x50>)
 800120e:	4a13      	ldr	r2, [pc, #76]	@ (800125c <MX_I2C1_Init+0x54>)
 8001210:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001212:	4b11      	ldr	r3, [pc, #68]	@ (8001258 <MX_I2C1_Init+0x50>)
 8001214:	4a12      	ldr	r2, [pc, #72]	@ (8001260 <MX_I2C1_Init+0x58>)
 8001216:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001218:	4b0f      	ldr	r3, [pc, #60]	@ (8001258 <MX_I2C1_Init+0x50>)
 800121a:	2200      	movs	r2, #0
 800121c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800121e:	4b0e      	ldr	r3, [pc, #56]	@ (8001258 <MX_I2C1_Init+0x50>)
 8001220:	2200      	movs	r2, #0
 8001222:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001224:	4b0c      	ldr	r3, [pc, #48]	@ (8001258 <MX_I2C1_Init+0x50>)
 8001226:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800122a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800122c:	4b0a      	ldr	r3, [pc, #40]	@ (8001258 <MX_I2C1_Init+0x50>)
 800122e:	2200      	movs	r2, #0
 8001230:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001232:	4b09      	ldr	r3, [pc, #36]	@ (8001258 <MX_I2C1_Init+0x50>)
 8001234:	2200      	movs	r2, #0
 8001236:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001238:	4b07      	ldr	r3, [pc, #28]	@ (8001258 <MX_I2C1_Init+0x50>)
 800123a:	2200      	movs	r2, #0
 800123c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800123e:	4b06      	ldr	r3, [pc, #24]	@ (8001258 <MX_I2C1_Init+0x50>)
 8001240:	2200      	movs	r2, #0
 8001242:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001244:	4804      	ldr	r0, [pc, #16]	@ (8001258 <MX_I2C1_Init+0x50>)
 8001246:	f003 f95d 	bl	8004504 <HAL_I2C_Init>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001250:	f000 fc42 	bl	8001ad8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001254:	bf00      	nop
 8001256:	bd80      	pop	{r7, pc}
 8001258:	20000210 	.word	0x20000210
 800125c:	40005400 	.word	0x40005400
 8001260:	00061a80 	.word	0x00061a80

08001264 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b08a      	sub	sp, #40	@ 0x28
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126c:	f107 0314 	add.w	r3, r7, #20
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	60da      	str	r2, [r3, #12]
 800127a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a19      	ldr	r2, [pc, #100]	@ (80012e8 <HAL_I2C_MspInit+0x84>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d12b      	bne.n	80012de <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	613b      	str	r3, [r7, #16]
 800128a:	4b18      	ldr	r3, [pc, #96]	@ (80012ec <HAL_I2C_MspInit+0x88>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128e:	4a17      	ldr	r2, [pc, #92]	@ (80012ec <HAL_I2C_MspInit+0x88>)
 8001290:	f043 0302 	orr.w	r3, r3, #2
 8001294:	6313      	str	r3, [r2, #48]	@ 0x30
 8001296:	4b15      	ldr	r3, [pc, #84]	@ (80012ec <HAL_I2C_MspInit+0x88>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129a:	f003 0302 	and.w	r3, r3, #2
 800129e:	613b      	str	r3, [r7, #16]
 80012a0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012a2:	23c0      	movs	r3, #192	@ 0xc0
 80012a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012a6:	2312      	movs	r3, #18
 80012a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012aa:	2300      	movs	r3, #0
 80012ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ae:	2303      	movs	r3, #3
 80012b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012b2:	2304      	movs	r3, #4
 80012b4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b6:	f107 0314 	add.w	r3, r7, #20
 80012ba:	4619      	mov	r1, r3
 80012bc:	480c      	ldr	r0, [pc, #48]	@ (80012f0 <HAL_I2C_MspInit+0x8c>)
 80012be:	f002 ff6b 	bl	8004198 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	4b09      	ldr	r3, [pc, #36]	@ (80012ec <HAL_I2C_MspInit+0x88>)
 80012c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ca:	4a08      	ldr	r2, [pc, #32]	@ (80012ec <HAL_I2C_MspInit+0x88>)
 80012cc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80012d2:	4b06      	ldr	r3, [pc, #24]	@ (80012ec <HAL_I2C_MspInit+0x88>)
 80012d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80012de:	bf00      	nop
 80012e0:	3728      	adds	r7, #40	@ 0x28
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40005400 	.word	0x40005400
 80012ec:	40023800 	.word	0x40023800
 80012f0:	40020400 	.word	0x40020400

080012f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
Trace_PID.target_val=0;
 80012fa:	4b8a      	ldr	r3, [pc, #552]	@ (8001524 <main+0x230>)
 80012fc:	f04f 0200 	mov.w	r2, #0
 8001300:	619a      	str	r2, [r3, #24]
Angle_PID.target_val=0;
 8001302:	4b89      	ldr	r3, [pc, #548]	@ (8001528 <main+0x234>)
 8001304:	f04f 0200 	mov.w	r2, #0
 8001308:	619a      	str	r2, [r3, #24]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800130a:	f002 f99b 	bl	8003644 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800130e:	f000 f94b 	bl	80015a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001312:	f7ff fedb 	bl	80010cc <MX_GPIO_Init>
  MX_DMA_Init();
 8001316:	f7ff fe83 	bl	8001020 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800131a:	f001 f893 	bl	8002444 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800131e:	f7ff ff73 	bl	8001208 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8001322:	f001 f8b9 	bl	8002498 <MX_USART3_UART_Init>
  MX_TIM12_Init();
 8001326:	f000 feb9 	bl	800209c <MX_TIM12_Init>
  MX_TIM5_Init();
 800132a:	f000 fd79 	bl	8001e20 <MX_TIM5_Init>
  MX_TIM7_Init();
 800132e:	f000 fdcb 	bl	8001ec8 <MX_TIM7_Init>
  MX_TIM9_Init();
 8001332:	f000 fe57 	bl	8001fe4 <MX_TIM9_Init>
  MX_TIM8_Init();
 8001336:	f000 fdfd 	bl	8001f34 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 800133a:	f001 f859 	bl	80023f0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  /*USER Init BEGIN*/
  HAL_Delay(20);
 800133e:	2014      	movs	r0, #20
 8001340:	f002 f9f2 	bl	8003728 <HAL_Delay>
  OLED_Init();
 8001344:	f001 fcbc 	bl	8002cc0 <OLED_Init>
  PID_Trace_init(&Trace_PID,Trace_PID.target_val,Trace_PID_Kp,Trace_PID_Ki,Trace_PID_Kd);
 8001348:	4b76      	ldr	r3, [pc, #472]	@ (8001524 <main+0x230>)
 800134a:	edd3 7a06 	vldr	s15, [r3, #24]
 800134e:	4b77      	ldr	r3, [pc, #476]	@ (800152c <main+0x238>)
 8001350:	ed93 7a00 	vldr	s14, [r3]
 8001354:	4b76      	ldr	r3, [pc, #472]	@ (8001530 <main+0x23c>)
 8001356:	edd3 6a00 	vldr	s13, [r3]
 800135a:	4b76      	ldr	r3, [pc, #472]	@ (8001534 <main+0x240>)
 800135c:	ed93 6a00 	vldr	s12, [r3]
 8001360:	eef0 1a46 	vmov.f32	s3, s12
 8001364:	eeb0 1a66 	vmov.f32	s2, s13
 8001368:	eef0 0a47 	vmov.f32	s1, s14
 800136c:	eeb0 0a67 	vmov.f32	s0, s15
 8001370:	486c      	ldr	r0, [pc, #432]	@ (8001524 <main+0x230>)
 8001372:	f001 fb93 	bl	8002a9c <PID_Trace_init>
  PID_param_init(&PIDL,PIDL.target_val,PIDR_Kp,PIDR_Ki,PIDR_Kd);
 8001376:	4b70      	ldr	r3, [pc, #448]	@ (8001538 <main+0x244>)
 8001378:	edd3 7a00 	vldr	s15, [r3]
 800137c:	4b6f      	ldr	r3, [pc, #444]	@ (800153c <main+0x248>)
 800137e:	ed93 7a00 	vldr	s14, [r3]
 8001382:	4b6f      	ldr	r3, [pc, #444]	@ (8001540 <main+0x24c>)
 8001384:	edd3 6a00 	vldr	s13, [r3]
 8001388:	4b6e      	ldr	r3, [pc, #440]	@ (8001544 <main+0x250>)
 800138a:	ed93 6a00 	vldr	s12, [r3]
 800138e:	eef0 1a46 	vmov.f32	s3, s12
 8001392:	eeb0 1a66 	vmov.f32	s2, s13
 8001396:	eef0 0a47 	vmov.f32	s1, s14
 800139a:	eeb0 0a67 	vmov.f32	s0, s15
 800139e:	4866      	ldr	r0, [pc, #408]	@ (8001538 <main+0x244>)
 80013a0:	f002 f88a 	bl	80034b8 <PID_param_init>
  PID_param_init(&PIDR,PIDR.target_val,PIDR_Kp,PIDR_Ki,PIDR_Kd);
 80013a4:	4b68      	ldr	r3, [pc, #416]	@ (8001548 <main+0x254>)
 80013a6:	edd3 7a00 	vldr	s15, [r3]
 80013aa:	4b64      	ldr	r3, [pc, #400]	@ (800153c <main+0x248>)
 80013ac:	ed93 7a00 	vldr	s14, [r3]
 80013b0:	4b63      	ldr	r3, [pc, #396]	@ (8001540 <main+0x24c>)
 80013b2:	edd3 6a00 	vldr	s13, [r3]
 80013b6:	4b63      	ldr	r3, [pc, #396]	@ (8001544 <main+0x250>)
 80013b8:	ed93 6a00 	vldr	s12, [r3]
 80013bc:	eef0 1a46 	vmov.f32	s3, s12
 80013c0:	eeb0 1a66 	vmov.f32	s2, s13
 80013c4:	eef0 0a47 	vmov.f32	s1, s14
 80013c8:	eeb0 0a67 	vmov.f32	s0, s15
 80013cc:	485e      	ldr	r0, [pc, #376]	@ (8001548 <main+0x254>)
 80013ce:	f002 f873 	bl	80034b8 <PID_param_init>
  PID_Angle_init(&Angle_PID, Angle_PID.target_val, Angle_PID_Kp, Angle_PID_Ki, Angle_PID_Kd);
 80013d2:	4b55      	ldr	r3, [pc, #340]	@ (8001528 <main+0x234>)
 80013d4:	edd3 7a06 	vldr	s15, [r3, #24]
 80013d8:	4b5c      	ldr	r3, [pc, #368]	@ (800154c <main+0x258>)
 80013da:	ed93 7a00 	vldr	s14, [r3]
 80013de:	4b5c      	ldr	r3, [pc, #368]	@ (8001550 <main+0x25c>)
 80013e0:	edd3 6a00 	vldr	s13, [r3]
 80013e4:	4b5b      	ldr	r3, [pc, #364]	@ (8001554 <main+0x260>)
 80013e6:	ed93 6a00 	vldr	s12, [r3]
 80013ea:	eef0 1a46 	vmov.f32	s3, s12
 80013ee:	eeb0 1a66 	vmov.f32	s2, s13
 80013f2:	eef0 0a47 	vmov.f32	s1, s14
 80013f6:	eeb0 0a67 	vmov.f32	s0, s15
 80013fa:	484b      	ldr	r0, [pc, #300]	@ (8001528 <main+0x234>)
 80013fc:	f001 fa9d 	bl	800293a <PID_Angle_init>

  /*USER Init END*/
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *)RxBuffer,sizeof(RxBuffer));   //开启接受不定长
 8001400:	22ff      	movs	r2, #255	@ 0xff
 8001402:	4955      	ldr	r1, [pc, #340]	@ (8001558 <main+0x264>)
 8001404:	4855      	ldr	r0, [pc, #340]	@ (800155c <main+0x268>)
 8001406:	f005 fde2 	bl	8006fce <HAL_UARTEx_ReceiveToIdle_DMA>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t *)RxBuffer2,sizeof(RxBuffer2));   //开启接受不定长
 800140a:	22ff      	movs	r2, #255	@ 0xff
 800140c:	4954      	ldr	r1, [pc, #336]	@ (8001560 <main+0x26c>)
 800140e:	4855      	ldr	r0, [pc, #340]	@ (8001564 <main+0x270>)
 8001410:	f005 fddd 	bl	8006fce <HAL_UARTEx_ReceiveToIdle_DMA>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *)RxBuffer3,sizeof(RxBuffer3));   //开启接受不定长
 8001414:	2204      	movs	r2, #4
 8001416:	4954      	ldr	r1, [pc, #336]	@ (8001568 <main+0x274>)
 8001418:	4854      	ldr	r0, [pc, #336]	@ (800156c <main+0x278>)
 800141a:	f005 fdd8 	bl	8006fce <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(huart2.hdmarx, DMA_IT_HT);          //关闭接受半中断
 800141e:	4b4f      	ldr	r3, [pc, #316]	@ (800155c <main+0x268>)
 8001420:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	4b4d      	ldr	r3, [pc, #308]	@ (800155c <main+0x268>)
 8001428:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f022 0208 	bic.w	r2, r2, #8
 8001430:	601a      	str	r2, [r3, #0]
  __HAL_DMA_DISABLE_IT(huart3.hdmarx, DMA_IT_HT);          //关闭接受半中断
 8001432:	4b4c      	ldr	r3, [pc, #304]	@ (8001564 <main+0x270>)
 8001434:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	4b4a      	ldr	r3, [pc, #296]	@ (8001564 <main+0x270>)
 800143c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f022 0208 	bic.w	r2, r2, #8
 8001444:	601a      	str	r2, [r3, #0]
  __HAL_DMA_DISABLE_IT(huart3.hdmarx, DMA_IT_HT);          //关闭接受半中断
 8001446:	4b47      	ldr	r3, [pc, #284]	@ (8001564 <main+0x270>)
 8001448:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	4b45      	ldr	r3, [pc, #276]	@ (8001564 <main+0x270>)
 8001450:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f022 0208 	bic.w	r2, r2, #8
 8001458:	601a      	str	r2, [r3, #0]

  HAL_UART_Transmit_DMA(&huart2, JY62_z_Zero, sizeof(JY62_z_Zero));
 800145a:	2203      	movs	r2, #3
 800145c:	4944      	ldr	r1, [pc, #272]	@ (8001570 <main+0x27c>)
 800145e:	483f      	ldr	r0, [pc, #252]	@ (800155c <main+0x268>)
 8001460:	f005 fd14 	bl	8006e8c <HAL_UART_Transmit_DMA>
  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8001464:	2100      	movs	r1, #0
 8001466:	4843      	ldr	r0, [pc, #268]	@ (8001574 <main+0x280>)
 8001468:	f004 fa5c 	bl	8005924 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);
 800146c:	2104      	movs	r1, #4
 800146e:	4841      	ldr	r0, [pc, #260]	@ (8001574 <main+0x280>)
 8001470:	f004 fa58 	bl	8005924 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim7);
 8001474:	4840      	ldr	r0, [pc, #256]	@ (8001578 <main+0x284>)
 8001476:	f004 f98b 	bl	8005790 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 800147a:	213c      	movs	r1, #60	@ 0x3c
 800147c:	483f      	ldr	r0, [pc, #252]	@ (800157c <main+0x288>)
 800147e:	f004 fc18 	bl	8005cb2 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 8001482:	213c      	movs	r1, #60	@ 0x3c
 8001484:	483e      	ldr	r0, [pc, #248]	@ (8001580 <main+0x28c>)
 8001486:	f004 fc14 	bl	8005cb2 <HAL_TIM_Encoder_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		HAL_UART_Transmit_DMA(&huart1, US_100_Trig, 3);
 800148a:	2203      	movs	r2, #3
 800148c:	493d      	ldr	r1, [pc, #244]	@ (8001584 <main+0x290>)
 800148e:	4837      	ldr	r0, [pc, #220]	@ (800156c <main+0x278>)
 8001490:	f005 fcfc 	bl	8006e8c <HAL_UART_Transmit_DMA>
		dis = ((US_100_receive[0] * 256.0f) + US_100_receive[1])/10.0f;
 8001494:	4b3c      	ldr	r3, [pc, #240]	@ (8001588 <main+0x294>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	ee07 3a90 	vmov	s15, r3
 800149c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014a0:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800158c <main+0x298>
 80014a4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80014a8:	4b37      	ldr	r3, [pc, #220]	@ (8001588 <main+0x294>)
 80014aa:	785b      	ldrb	r3, [r3, #1]
 80014ac:	ee07 3a90 	vmov	s15, r3
 80014b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014b8:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80014bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014c0:	4b33      	ldr	r3, [pc, #204]	@ (8001590 <main+0x29c>)
 80014c2:	edc3 7a00 	vstr	s15, [r3]
		tem =  US_100_receive[2]-45;
 80014c6:	4b30      	ldr	r3, [pc, #192]	@ (8001588 <main+0x294>)
 80014c8:	789b      	ldrb	r3, [r3, #2]
 80014ca:	3b2d      	subs	r3, #45	@ 0x2d
 80014cc:	b2da      	uxtb	r2, r3
 80014ce:	4b31      	ldr	r3, [pc, #196]	@ (8001594 <main+0x2a0>)
 80014d0:	701a      	strb	r2, [r3, #0]
	  OLED_NewFrame();
 80014d2:	f001 fc51 	bl	8002d78 <OLED_NewFrame>
	  sprintf(message,"distance:%.2fcm",dis);
 80014d6:	4b2e      	ldr	r3, [pc, #184]	@ (8001590 <main+0x29c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff f834 	bl	8000548 <__aeabi_f2d>
 80014e0:	4602      	mov	r2, r0
 80014e2:	460b      	mov	r3, r1
 80014e4:	492c      	ldr	r1, [pc, #176]	@ (8001598 <main+0x2a4>)
 80014e6:	482d      	ldr	r0, [pc, #180]	@ (800159c <main+0x2a8>)
 80014e8:	f007 fdf8 	bl	80090dc <siprintf>
	  OLED_PrintString(1, 0, message, &font16x16, 0);
 80014ec:	2300      	movs	r3, #0
 80014ee:	9300      	str	r3, [sp, #0]
 80014f0:	4b2b      	ldr	r3, [pc, #172]	@ (80015a0 <main+0x2ac>)
 80014f2:	4a2a      	ldr	r2, [pc, #168]	@ (800159c <main+0x2a8>)
 80014f4:	2100      	movs	r1, #0
 80014f6:	2001      	movs	r0, #1
 80014f8:	f001 fe64 	bl	80031c4 <OLED_PrintString>
	  sprintf(message,"tem:%02X",US_100_receive[2]);
 80014fc:	4b22      	ldr	r3, [pc, #136]	@ (8001588 <main+0x294>)
 80014fe:	789b      	ldrb	r3, [r3, #2]
 8001500:	461a      	mov	r2, r3
 8001502:	4928      	ldr	r1, [pc, #160]	@ (80015a4 <main+0x2b0>)
 8001504:	4825      	ldr	r0, [pc, #148]	@ (800159c <main+0x2a8>)
 8001506:	f007 fde9 	bl	80090dc <siprintf>
	  OLED_PrintString(1, 16, message, &font16x16, 0);
 800150a:	2300      	movs	r3, #0
 800150c:	9300      	str	r3, [sp, #0]
 800150e:	4b24      	ldr	r3, [pc, #144]	@ (80015a0 <main+0x2ac>)
 8001510:	4a22      	ldr	r2, [pc, #136]	@ (800159c <main+0x2a8>)
 8001512:	2110      	movs	r1, #16
 8001514:	2001      	movs	r0, #1
 8001516:	f001 fe55 	bl	80031c4 <OLED_PrintString>
//	  OLED_PrintString(1, 16, message, &font16x16, 0);
//	  sprintf(message,"speedl:%d",speednow);
//	  OLED_PrintString(1, 32, message, &font16x16, 0);
//	  sprintf(message,"speedr:%d",speednow2);
//	  OLED_PrintString(1, 48, message, &font16x16, 0);
	  OLED_ShowFrame();
 800151a:	f001 fc39 	bl	8002d90 <OLED_ShowFrame>
		HAL_UART_Transmit_DMA(&huart1, US_100_Trig, 3);
 800151e:	bf00      	nop
 8001520:	e7b3      	b.n	800148a <main+0x196>
 8001522:	bf00      	nop
 8001524:	200002c4 	.word	0x200002c4
 8001528:	200002e4 	.word	0x200002e4
 800152c:	20000264 	.word	0x20000264
 8001530:	20000268 	.word	0x20000268
 8001534:	2000026c 	.word	0x2000026c
 8001538:	2000027c 	.word	0x2000027c
 800153c:	2000000c 	.word	0x2000000c
 8001540:	20000010 	.word	0x20000010
 8001544:	20000014 	.word	0x20000014
 8001548:	200002a0 	.word	0x200002a0
 800154c:	20000270 	.word	0x20000270
 8001550:	20000274 	.word	0x20000274
 8001554:	20000278 	.word	0x20000278
 8001558:	20000404 	.word	0x20000404
 800155c:	200008e4 	.word	0x200008e4
 8001560:	20000504 	.word	0x20000504
 8001564:	2000092c 	.word	0x2000092c
 8001568:	20000604 	.word	0x20000604
 800156c:	2000089c 	.word	0x2000089c
 8001570:	20000018 	.word	0x20000018
 8001574:	20000854 	.word	0x20000854
 8001578:	2000077c 	.word	0x2000077c
 800157c:	20000734 	.word	0x20000734
 8001580:	200007c4 	.word	0x200007c4
 8001584:	2000001c 	.word	0x2000001c
 8001588:	2000072c 	.word	0x2000072c
 800158c:	43800000 	.word	0x43800000
 8001590:	20000724 	.word	0x20000724
 8001594:	20000728 	.word	0x20000728
 8001598:	0800d1f8 	.word	0x0800d1f8
 800159c:	20000304 	.word	0x20000304
 80015a0:	0800d924 	.word	0x0800d924
 80015a4:	0800d208 	.word	0x0800d208

080015a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b094      	sub	sp, #80	@ 0x50
 80015ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ae:	f107 0320 	add.w	r3, r7, #32
 80015b2:	2230      	movs	r2, #48	@ 0x30
 80015b4:	2100      	movs	r1, #0
 80015b6:	4618      	mov	r0, r3
 80015b8:	f007 fe33 	bl	8009222 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015bc:	f107 030c 	add.w	r3, r7, #12
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
 80015ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015cc:	2300      	movs	r3, #0
 80015ce:	60bb      	str	r3, [r7, #8]
 80015d0:	4b28      	ldr	r3, [pc, #160]	@ (8001674 <SystemClock_Config+0xcc>)
 80015d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d4:	4a27      	ldr	r2, [pc, #156]	@ (8001674 <SystemClock_Config+0xcc>)
 80015d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015da:	6413      	str	r3, [r2, #64]	@ 0x40
 80015dc:	4b25      	ldr	r3, [pc, #148]	@ (8001674 <SystemClock_Config+0xcc>)
 80015de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015e4:	60bb      	str	r3, [r7, #8]
 80015e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015e8:	2300      	movs	r3, #0
 80015ea:	607b      	str	r3, [r7, #4]
 80015ec:	4b22      	ldr	r3, [pc, #136]	@ (8001678 <SystemClock_Config+0xd0>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a21      	ldr	r2, [pc, #132]	@ (8001678 <SystemClock_Config+0xd0>)
 80015f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015f6:	6013      	str	r3, [r2, #0]
 80015f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001678 <SystemClock_Config+0xd0>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001600:	607b      	str	r3, [r7, #4]
 8001602:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001604:	2302      	movs	r3, #2
 8001606:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001608:	2301      	movs	r3, #1
 800160a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800160c:	2310      	movs	r3, #16
 800160e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001610:	2302      	movs	r3, #2
 8001612:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001614:	2300      	movs	r3, #0
 8001616:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001618:	2308      	movs	r3, #8
 800161a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800161c:	23a8      	movs	r3, #168	@ 0xa8
 800161e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001620:	2302      	movs	r3, #2
 8001622:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001624:	2304      	movs	r3, #4
 8001626:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001628:	f107 0320 	add.w	r3, r7, #32
 800162c:	4618      	mov	r0, r3
 800162e:	f003 fc07 	bl	8004e40 <HAL_RCC_OscConfig>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001638:	f000 fa4e 	bl	8001ad8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800163c:	230f      	movs	r3, #15
 800163e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001640:	2302      	movs	r3, #2
 8001642:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001644:	2300      	movs	r3, #0
 8001646:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001648:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800164c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800164e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001652:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001654:	f107 030c 	add.w	r3, r7, #12
 8001658:	2105      	movs	r1, #5
 800165a:	4618      	mov	r0, r3
 800165c:	f003 fe68 	bl	8005330 <HAL_RCC_ClockConfig>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001666:	f000 fa37 	bl	8001ad8 <Error_Handler>
  }
}
 800166a:	bf00      	nop
 800166c:	3750      	adds	r7, #80	@ 0x50
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40023800 	.word	0x40023800
 8001678:	40007000 	.word	0x40007000

0800167c <HAL_UARTEx_RxEventCallback>:
}




void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){ //串口接收中断
 800167c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001680:	b099      	sub	sp, #100	@ 0x64
 8001682:	af0e      	add	r7, sp, #56	@ 0x38
 8001684:	6278      	str	r0, [r7, #36]	@ 0x24
 8001686:	460b      	mov	r3, r1
 8001688:	847b      	strh	r3, [r7, #34]	@ 0x22
	}




	if(huart==&huart2){  //接收JY62 数据中断
 800168a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800168c:	4a9c      	ldr	r2, [pc, #624]	@ (8001900 <HAL_UARTEx_RxEventCallback+0x284>)
 800168e:	4293      	cmp	r3, r2
 8001690:	f040 80d1 	bne.w	8001836 <HAL_UARTEx_RxEventCallback+0x1ba>
		if(RxBuffer[22]==0x55){
 8001694:	4b9b      	ldr	r3, [pc, #620]	@ (8001904 <HAL_UARTEx_RxEventCallback+0x288>)
 8001696:	7d9b      	ldrb	r3, [r3, #22]
 8001698:	2b55      	cmp	r3, #85	@ 0x55
 800169a:	d16e      	bne.n	800177a <HAL_UARTEx_RxEventCallback+0xfe>
			if(RxBuffer[23]==0x53){
 800169c:	4b99      	ldr	r3, [pc, #612]	@ (8001904 <HAL_UARTEx_RxEventCallback+0x288>)
 800169e:	7ddb      	ldrb	r3, [r3, #23]
 80016a0:	2b53      	cmp	r3, #83	@ 0x53
 80016a2:	d16a      	bne.n	800177a <HAL_UARTEx_RxEventCallback+0xfe>
				RollX = (float)(((short)(RxBuffer[25]<<8)|RxBuffer[24])/32768.0*180);//处理数据，依据官方所给文档
 80016a4:	4b97      	ldr	r3, [pc, #604]	@ (8001904 <HAL_UARTEx_RxEventCallback+0x288>)
 80016a6:	7e5b      	ldrb	r3, [r3, #25]
 80016a8:	b21b      	sxth	r3, r3
 80016aa:	021b      	lsls	r3, r3, #8
 80016ac:	b21b      	sxth	r3, r3
 80016ae:	461a      	mov	r2, r3
 80016b0:	4b94      	ldr	r3, [pc, #592]	@ (8001904 <HAL_UARTEx_RxEventCallback+0x288>)
 80016b2:	7e1b      	ldrb	r3, [r3, #24]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7fe ff34 	bl	8000524 <__aeabi_i2d>
 80016bc:	f04f 0200 	mov.w	r2, #0
 80016c0:	4b91      	ldr	r3, [pc, #580]	@ (8001908 <HAL_UARTEx_RxEventCallback+0x28c>)
 80016c2:	f7ff f8c3 	bl	800084c <__aeabi_ddiv>
 80016c6:	4602      	mov	r2, r0
 80016c8:	460b      	mov	r3, r1
 80016ca:	4610      	mov	r0, r2
 80016cc:	4619      	mov	r1, r3
 80016ce:	f04f 0200 	mov.w	r2, #0
 80016d2:	4b8e      	ldr	r3, [pc, #568]	@ (800190c <HAL_UARTEx_RxEventCallback+0x290>)
 80016d4:	f7fe ff90 	bl	80005f8 <__aeabi_dmul>
 80016d8:	4602      	mov	r2, r0
 80016da:	460b      	mov	r3, r1
 80016dc:	4610      	mov	r0, r2
 80016de:	4619      	mov	r1, r3
 80016e0:	f7ff fa82 	bl	8000be8 <__aeabi_d2f>
 80016e4:	4603      	mov	r3, r0
 80016e6:	4a8a      	ldr	r2, [pc, #552]	@ (8001910 <HAL_UARTEx_RxEventCallback+0x294>)
 80016e8:	6013      	str	r3, [r2, #0]
				PitchY = (float)((short)((RxBuffer[27]<<8)|RxBuffer[26])/32768.0*180);
 80016ea:	4b86      	ldr	r3, [pc, #536]	@ (8001904 <HAL_UARTEx_RxEventCallback+0x288>)
 80016ec:	7edb      	ldrb	r3, [r3, #27]
 80016ee:	b21b      	sxth	r3, r3
 80016f0:	021b      	lsls	r3, r3, #8
 80016f2:	b21a      	sxth	r2, r3
 80016f4:	4b83      	ldr	r3, [pc, #524]	@ (8001904 <HAL_UARTEx_RxEventCallback+0x288>)
 80016f6:	7e9b      	ldrb	r3, [r3, #26]
 80016f8:	b21b      	sxth	r3, r3
 80016fa:	4313      	orrs	r3, r2
 80016fc:	b21b      	sxth	r3, r3
 80016fe:	4618      	mov	r0, r3
 8001700:	f7fe ff10 	bl	8000524 <__aeabi_i2d>
 8001704:	f04f 0200 	mov.w	r2, #0
 8001708:	4b7f      	ldr	r3, [pc, #508]	@ (8001908 <HAL_UARTEx_RxEventCallback+0x28c>)
 800170a:	f7ff f89f 	bl	800084c <__aeabi_ddiv>
 800170e:	4602      	mov	r2, r0
 8001710:	460b      	mov	r3, r1
 8001712:	4610      	mov	r0, r2
 8001714:	4619      	mov	r1, r3
 8001716:	f04f 0200 	mov.w	r2, #0
 800171a:	4b7c      	ldr	r3, [pc, #496]	@ (800190c <HAL_UARTEx_RxEventCallback+0x290>)
 800171c:	f7fe ff6c 	bl	80005f8 <__aeabi_dmul>
 8001720:	4602      	mov	r2, r0
 8001722:	460b      	mov	r3, r1
 8001724:	4610      	mov	r0, r2
 8001726:	4619      	mov	r1, r3
 8001728:	f7ff fa5e 	bl	8000be8 <__aeabi_d2f>
 800172c:	4603      	mov	r3, r0
 800172e:	4a79      	ldr	r2, [pc, #484]	@ (8001914 <HAL_UARTEx_RxEventCallback+0x298>)
 8001730:	6013      	str	r3, [r2, #0]
				YawZ = (float)((short)((RxBuffer[29]<<8)|RxBuffer[28])/32768.0*180);
 8001732:	4b74      	ldr	r3, [pc, #464]	@ (8001904 <HAL_UARTEx_RxEventCallback+0x288>)
 8001734:	7f5b      	ldrb	r3, [r3, #29]
 8001736:	b21b      	sxth	r3, r3
 8001738:	021b      	lsls	r3, r3, #8
 800173a:	b21a      	sxth	r2, r3
 800173c:	4b71      	ldr	r3, [pc, #452]	@ (8001904 <HAL_UARTEx_RxEventCallback+0x288>)
 800173e:	7f1b      	ldrb	r3, [r3, #28]
 8001740:	b21b      	sxth	r3, r3
 8001742:	4313      	orrs	r3, r2
 8001744:	b21b      	sxth	r3, r3
 8001746:	4618      	mov	r0, r3
 8001748:	f7fe feec 	bl	8000524 <__aeabi_i2d>
 800174c:	f04f 0200 	mov.w	r2, #0
 8001750:	4b6d      	ldr	r3, [pc, #436]	@ (8001908 <HAL_UARTEx_RxEventCallback+0x28c>)
 8001752:	f7ff f87b 	bl	800084c <__aeabi_ddiv>
 8001756:	4602      	mov	r2, r0
 8001758:	460b      	mov	r3, r1
 800175a:	4610      	mov	r0, r2
 800175c:	4619      	mov	r1, r3
 800175e:	f04f 0200 	mov.w	r2, #0
 8001762:	4b6a      	ldr	r3, [pc, #424]	@ (800190c <HAL_UARTEx_RxEventCallback+0x290>)
 8001764:	f7fe ff48 	bl	80005f8 <__aeabi_dmul>
 8001768:	4602      	mov	r2, r0
 800176a:	460b      	mov	r3, r1
 800176c:	4610      	mov	r0, r2
 800176e:	4619      	mov	r1, r3
 8001770:	f7ff fa3a 	bl	8000be8 <__aeabi_d2f>
 8001774:	4603      	mov	r3, r0
 8001776:	4a68      	ldr	r2, [pc, #416]	@ (8001918 <HAL_UARTEx_RxEventCallback+0x29c>)
 8001778:	6013      	str	r3, [r2, #0]
			}
		}

		sprintf(TxBuffer,"%.2f,%.2f,%.2f,%d,%d,%.2f,%.2f,%.2f,%.2f\n",
 800177a:	4b65      	ldr	r3, [pc, #404]	@ (8001910 <HAL_UARTEx_RxEventCallback+0x294>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4618      	mov	r0, r3
 8001780:	f7fe fee2 	bl	8000548 <__aeabi_f2d>
 8001784:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8001788:	4b62      	ldr	r3, [pc, #392]	@ (8001914 <HAL_UARTEx_RxEventCallback+0x298>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4618      	mov	r0, r3
 800178e:	f7fe fedb 	bl	8000548 <__aeabi_f2d>
 8001792:	4682      	mov	sl, r0
 8001794:	468b      	mov	fp, r1
 8001796:	4b60      	ldr	r3, [pc, #384]	@ (8001918 <HAL_UARTEx_RxEventCallback+0x29c>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4618      	mov	r0, r3
 800179c:	f7fe fed4 	bl	8000548 <__aeabi_f2d>
 80017a0:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80017a4:	4b5d      	ldr	r3, [pc, #372]	@ (800191c <HAL_UARTEx_RxEventCallback+0x2a0>)
 80017a6:	681e      	ldr	r6, [r3, #0]
 80017a8:	4b5d      	ldr	r3, [pc, #372]	@ (8001920 <HAL_UARTEx_RxEventCallback+0x2a4>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	60fb      	str	r3, [r7, #12]
				RollX,PitchY,YawZ,speednow,speednow2,
				PIDL.target_val,PIDL.output_val,PIDR.target_val,PIDR.output_val);
 80017ae:	4b5d      	ldr	r3, [pc, #372]	@ (8001924 <HAL_UARTEx_RxEventCallback+0x2a8>)
 80017b0:	681b      	ldr	r3, [r3, #0]
		sprintf(TxBuffer,"%.2f,%.2f,%.2f,%d,%d,%.2f,%.2f,%.2f,%.2f\n",
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7fe fec8 	bl	8000548 <__aeabi_f2d>
 80017b8:	e9c7 0100 	strd	r0, r1, [r7]
				PIDL.target_val,PIDL.output_val,PIDR.target_val,PIDR.output_val);
 80017bc:	4b59      	ldr	r3, [pc, #356]	@ (8001924 <HAL_UARTEx_RxEventCallback+0x2a8>)
 80017be:	6a1b      	ldr	r3, [r3, #32]
		sprintf(TxBuffer,"%.2f,%.2f,%.2f,%d,%d,%.2f,%.2f,%.2f,%.2f\n",
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7fe fec1 	bl	8000548 <__aeabi_f2d>
 80017c6:	4680      	mov	r8, r0
 80017c8:	4689      	mov	r9, r1
				PIDL.target_val,PIDL.output_val,PIDR.target_val,PIDR.output_val);
 80017ca:	4b57      	ldr	r3, [pc, #348]	@ (8001928 <HAL_UARTEx_RxEventCallback+0x2ac>)
 80017cc:	681b      	ldr	r3, [r3, #0]
		sprintf(TxBuffer,"%.2f,%.2f,%.2f,%d,%d,%.2f,%.2f,%.2f,%.2f\n",
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7fe feba 	bl	8000548 <__aeabi_f2d>
 80017d4:	4604      	mov	r4, r0
 80017d6:	460d      	mov	r5, r1
				PIDL.target_val,PIDL.output_val,PIDR.target_val,PIDR.output_val);
 80017d8:	4b53      	ldr	r3, [pc, #332]	@ (8001928 <HAL_UARTEx_RxEventCallback+0x2ac>)
 80017da:	6a1b      	ldr	r3, [r3, #32]
		sprintf(TxBuffer,"%.2f,%.2f,%.2f,%d,%d,%.2f,%.2f,%.2f,%.2f\n",
 80017dc:	4618      	mov	r0, r3
 80017de:	f7fe feb3 	bl	8000548 <__aeabi_f2d>
 80017e2:	4602      	mov	r2, r0
 80017e4:	460b      	mov	r3, r1
 80017e6:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80017ea:	e9cd 450a 	strd	r4, r5, [sp, #40]	@ 0x28
 80017ee:	e9cd 8908 	strd	r8, r9, [sp, #32]
 80017f2:	ed97 7b00 	vldr	d7, [r7]
 80017f6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	9305      	str	r3, [sp, #20]
 80017fe:	9604      	str	r6, [sp, #16]
 8001800:	ed97 7b04 	vldr	d7, [r7, #16]
 8001804:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001808:	e9cd ab00 	strd	sl, fp, [sp]
 800180c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001810:	4946      	ldr	r1, [pc, #280]	@ (800192c <HAL_UARTEx_RxEventCallback+0x2b0>)
 8001812:	4847      	ldr	r0, [pc, #284]	@ (8001930 <HAL_UARTEx_RxEventCallback+0x2b4>)
 8001814:	f007 fc62 	bl	80090dc <siprintf>


		HAL_UART_Transmit_DMA(&huart3, (uint8_t *)TxBuffer, strlen(TxBuffer));   //将数据通过串口一发送出去
 8001818:	4845      	ldr	r0, [pc, #276]	@ (8001930 <HAL_UARTEx_RxEventCallback+0x2b4>)
 800181a:	f7fe fd29 	bl	8000270 <strlen>
 800181e:	4603      	mov	r3, r0
 8001820:	b29b      	uxth	r3, r3
 8001822:	461a      	mov	r2, r3
 8001824:	4942      	ldr	r1, [pc, #264]	@ (8001930 <HAL_UARTEx_RxEventCallback+0x2b4>)
 8001826:	4843      	ldr	r0, [pc, #268]	@ (8001934 <HAL_UARTEx_RxEventCallback+0x2b8>)
 8001828:	f005 fb30 	bl	8006e8c <HAL_UART_Transmit_DMA>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *)RxBuffer,sizeof(RxBuffer));   //开启接受不定长
 800182c:	22ff      	movs	r2, #255	@ 0xff
 800182e:	4935      	ldr	r1, [pc, #212]	@ (8001904 <HAL_UARTEx_RxEventCallback+0x288>)
 8001830:	4833      	ldr	r0, [pc, #204]	@ (8001900 <HAL_UARTEx_RxEventCallback+0x284>)
 8001832:	f005 fbcc 	bl	8006fce <HAL_UARTEx_ReceiveToIdle_DMA>





	if(huart==&huart3){
 8001836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001838:	4a3e      	ldr	r2, [pc, #248]	@ (8001934 <HAL_UARTEx_RxEventCallback+0x2b8>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d15b      	bne.n	80018f6 <HAL_UARTEx_RxEventCallback+0x27a>
		memset(message, 0, sizeof(message));  // 整个数组
 800183e:	22ff      	movs	r2, #255	@ 0xff
 8001840:	2100      	movs	r1, #0
 8001842:	483d      	ldr	r0, [pc, #244]	@ (8001938 <HAL_UARTEx_RxEventCallback+0x2bc>)
 8001844:	f007 fced 	bl	8009222 <memset>
		 if (Size < sizeof(RxBuffer2)) {
 8001848:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800184a:	2bfe      	cmp	r3, #254	@ 0xfe
 800184c:	d804      	bhi.n	8001858 <HAL_UARTEx_RxEventCallback+0x1dc>
		            RxBuffer2[Size] = '\0';  // 添加字符串结束符
 800184e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001850:	4a3a      	ldr	r2, [pc, #232]	@ (800193c <HAL_UARTEx_RxEventCallback+0x2c0>)
 8001852:	2100      	movs	r1, #0
 8001854:	54d1      	strb	r1, [r2, r3]
 8001856:	e003      	b.n	8001860 <HAL_UARTEx_RxEventCallback+0x1e4>
		        } else {
		            RxBuffer2[sizeof(RxBuffer2) - 1] = '\0';  // 防止越界
 8001858:	4b38      	ldr	r3, [pc, #224]	@ (800193c <HAL_UARTEx_RxEventCallback+0x2c0>)
 800185a:	2200      	movs	r2, #0
 800185c:	f883 20fe 	strb.w	r2, [r3, #254]	@ 0xfe
		        }
//左边电机PID在线调参

		 if (sscanf(RxBuffer2, "PIDL %f %f %f", &PIDL_Kp, &PIDL_Ki, &PIDL_Kd) == 3) {
 8001860:	4b37      	ldr	r3, [pc, #220]	@ (8001940 <HAL_UARTEx_RxEventCallback+0x2c4>)
 8001862:	9300      	str	r3, [sp, #0]
 8001864:	4b37      	ldr	r3, [pc, #220]	@ (8001944 <HAL_UARTEx_RxEventCallback+0x2c8>)
 8001866:	4a38      	ldr	r2, [pc, #224]	@ (8001948 <HAL_UARTEx_RxEventCallback+0x2cc>)
 8001868:	4938      	ldr	r1, [pc, #224]	@ (800194c <HAL_UARTEx_RxEventCallback+0x2d0>)
 800186a:	4834      	ldr	r0, [pc, #208]	@ (800193c <HAL_UARTEx_RxEventCallback+0x2c0>)
 800186c:	f007 fc58 	bl	8009120 <siscanf>
 8001870:	4603      	mov	r3, r0
 8001872:	2b03      	cmp	r3, #3
 8001874:	d10b      	bne.n	800188e <HAL_UARTEx_RxEventCallback+0x212>
			 PIDL_Kp=PIDL_Kp;
 8001876:	4b34      	ldr	r3, [pc, #208]	@ (8001948 <HAL_UARTEx_RxEventCallback+0x2cc>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a33      	ldr	r2, [pc, #204]	@ (8001948 <HAL_UARTEx_RxEventCallback+0x2cc>)
 800187c:	6013      	str	r3, [r2, #0]
			 PIDL_Ki=PIDL_Ki;
 800187e:	4b31      	ldr	r3, [pc, #196]	@ (8001944 <HAL_UARTEx_RxEventCallback+0x2c8>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a30      	ldr	r2, [pc, #192]	@ (8001944 <HAL_UARTEx_RxEventCallback+0x2c8>)
 8001884:	6013      	str	r3, [r2, #0]
			 PIDL_Kd=PIDL_Kd;
 8001886:	4b2e      	ldr	r3, [pc, #184]	@ (8001940 <HAL_UARTEx_RxEventCallback+0x2c4>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a2d      	ldr	r2, [pc, #180]	@ (8001940 <HAL_UARTEx_RxEventCallback+0x2c4>)
 800188c:	6013      	str	r3, [r2, #0]


		        }
		 if (sscanf(RxBuffer2, "speedl %f", &PIDL.target_val)== 1) {
 800188e:	4a25      	ldr	r2, [pc, #148]	@ (8001924 <HAL_UARTEx_RxEventCallback+0x2a8>)
 8001890:	492f      	ldr	r1, [pc, #188]	@ (8001950 <HAL_UARTEx_RxEventCallback+0x2d4>)
 8001892:	482a      	ldr	r0, [pc, #168]	@ (800193c <HAL_UARTEx_RxEventCallback+0x2c0>)
 8001894:	f007 fc44 	bl	8009120 <siscanf>
 8001898:	4603      	mov	r3, r0
 800189a:	2b01      	cmp	r3, #1
 800189c:	d103      	bne.n	80018a6 <HAL_UARTEx_RxEventCallback+0x22a>
               PIDL.target_val=PIDL.target_val;
 800189e:	4b21      	ldr	r3, [pc, #132]	@ (8001924 <HAL_UARTEx_RxEventCallback+0x2a8>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a20      	ldr	r2, [pc, #128]	@ (8001924 <HAL_UARTEx_RxEventCallback+0x2a8>)
 80018a4:	6013      	str	r3, [r2, #0]

	         }

//右边电机PID在线调参
		 if (sscanf(RxBuffer2, "PIDR %f %f %f", &PIDR_Kp, &PIDR_Ki, &PIDR_Kd) == 3) {
 80018a6:	4b2b      	ldr	r3, [pc, #172]	@ (8001954 <HAL_UARTEx_RxEventCallback+0x2d8>)
 80018a8:	9300      	str	r3, [sp, #0]
 80018aa:	4b2b      	ldr	r3, [pc, #172]	@ (8001958 <HAL_UARTEx_RxEventCallback+0x2dc>)
 80018ac:	4a2b      	ldr	r2, [pc, #172]	@ (800195c <HAL_UARTEx_RxEventCallback+0x2e0>)
 80018ae:	492c      	ldr	r1, [pc, #176]	@ (8001960 <HAL_UARTEx_RxEventCallback+0x2e4>)
 80018b0:	4822      	ldr	r0, [pc, #136]	@ (800193c <HAL_UARTEx_RxEventCallback+0x2c0>)
 80018b2:	f007 fc35 	bl	8009120 <siscanf>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b03      	cmp	r3, #3
 80018ba:	d10b      	bne.n	80018d4 <HAL_UARTEx_RxEventCallback+0x258>
			 PIDR_Kp=PIDR_Kp;
 80018bc:	4b27      	ldr	r3, [pc, #156]	@ (800195c <HAL_UARTEx_RxEventCallback+0x2e0>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a26      	ldr	r2, [pc, #152]	@ (800195c <HAL_UARTEx_RxEventCallback+0x2e0>)
 80018c2:	6013      	str	r3, [r2, #0]
			 PIDR_Ki=PIDR_Ki;
 80018c4:	4b24      	ldr	r3, [pc, #144]	@ (8001958 <HAL_UARTEx_RxEventCallback+0x2dc>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a23      	ldr	r2, [pc, #140]	@ (8001958 <HAL_UARTEx_RxEventCallback+0x2dc>)
 80018ca:	6013      	str	r3, [r2, #0]
			 PIDR_Kd=PIDR_Kd;
 80018cc:	4b21      	ldr	r3, [pc, #132]	@ (8001954 <HAL_UARTEx_RxEventCallback+0x2d8>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a20      	ldr	r2, [pc, #128]	@ (8001954 <HAL_UARTEx_RxEventCallback+0x2d8>)
 80018d2:	6013      	str	r3, [r2, #0]
		        }
		 if (sscanf(RxBuffer2, "speedr %f", &PIDR.target_val)== 1) {
 80018d4:	4a14      	ldr	r2, [pc, #80]	@ (8001928 <HAL_UARTEx_RxEventCallback+0x2ac>)
 80018d6:	4923      	ldr	r1, [pc, #140]	@ (8001964 <HAL_UARTEx_RxEventCallback+0x2e8>)
 80018d8:	4818      	ldr	r0, [pc, #96]	@ (800193c <HAL_UARTEx_RxEventCallback+0x2c0>)
 80018da:	f007 fc21 	bl	8009120 <siscanf>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d103      	bne.n	80018ec <HAL_UARTEx_RxEventCallback+0x270>
               PIDR.target_val=PIDR.target_val;
 80018e4:	4b10      	ldr	r3, [pc, #64]	@ (8001928 <HAL_UARTEx_RxEventCallback+0x2ac>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a0f      	ldr	r2, [pc, #60]	@ (8001928 <HAL_UARTEx_RxEventCallback+0x2ac>)
 80018ea:	6013      	str	r3, [r2, #0]

	         }


	   	 HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t *)RxBuffer2,sizeof(RxBuffer2));   //开启接受不定长
 80018ec:	22ff      	movs	r2, #255	@ 0xff
 80018ee:	4913      	ldr	r1, [pc, #76]	@ (800193c <HAL_UARTEx_RxEventCallback+0x2c0>)
 80018f0:	4810      	ldr	r0, [pc, #64]	@ (8001934 <HAL_UARTEx_RxEventCallback+0x2b8>)
 80018f2:	f005 fb6c 	bl	8006fce <HAL_UARTEx_ReceiveToIdle_DMA>





}
 80018f6:	bf00      	nop
 80018f8:	372c      	adds	r7, #44	@ 0x2c
 80018fa:	46bd      	mov	sp, r7
 80018fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001900:	200008e4 	.word	0x200008e4
 8001904:	20000404 	.word	0x20000404
 8001908:	40e00000 	.word	0x40e00000
 800190c:	40668000 	.word	0x40668000
 8001910:	20000708 	.word	0x20000708
 8001914:	2000070c 	.word	0x2000070c
 8001918:	20000710 	.word	0x20000710
 800191c:	20000718 	.word	0x20000718
 8001920:	20000720 	.word	0x20000720
 8001924:	2000027c 	.word	0x2000027c
 8001928:	200002a0 	.word	0x200002a0
 800192c:	0800d214 	.word	0x0800d214
 8001930:	20000608 	.word	0x20000608
 8001934:	2000092c 	.word	0x2000092c
 8001938:	20000304 	.word	0x20000304
 800193c:	20000504 	.word	0x20000504
 8001940:	20000008 	.word	0x20000008
 8001944:	20000004 	.word	0x20000004
 8001948:	20000000 	.word	0x20000000
 800194c:	0800d240 	.word	0x0800d240
 8001950:	0800d250 	.word	0x0800d250
 8001954:	20000014 	.word	0x20000014
 8001958:	20000010 	.word	0x20000010
 800195c:	2000000c 	.word	0x2000000c
 8001960:	0800d25c 	.word	0x0800d25c
 8001964:	0800d26c 	.word	0x0800d26c

08001968 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {//处理数据发送完成后的操作
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
	if(huart==&huart1){
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	4a0a      	ldr	r2, [pc, #40]	@ (800199c <HAL_UART_TxCpltCallback+0x34>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d104      	bne.n	8001982 <HAL_UART_TxCpltCallback+0x1a>
	    HAL_UART_Receive_DMA(&huart1, US_100_receive, 3);
 8001978:	2203      	movs	r2, #3
 800197a:	4909      	ldr	r1, [pc, #36]	@ (80019a0 <HAL_UART_TxCpltCallback+0x38>)
 800197c:	4807      	ldr	r0, [pc, #28]	@ (800199c <HAL_UART_TxCpltCallback+0x34>)
 800197e:	f005 fb01 	bl	8006f84 <HAL_UART_Receive_DMA>

	}

	if(huart == &huart2) {
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4a07      	ldr	r2, [pc, #28]	@ (80019a4 <HAL_UART_TxCpltCallback+0x3c>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d104      	bne.n	8001994 <HAL_UART_TxCpltCallback+0x2c>

	     memset(TxBuffer, 0, sizeof(TxBuffer));
 800198a:	22ff      	movs	r2, #255	@ 0xff
 800198c:	2100      	movs	r1, #0
 800198e:	4806      	ldr	r0, [pc, #24]	@ (80019a8 <HAL_UART_TxCpltCallback+0x40>)
 8001990:	f007 fc47 	bl	8009222 <memset>


  }
}
 8001994:	bf00      	nop
 8001996:	3708      	adds	r7, #8
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	2000089c 	.word	0x2000089c
 80019a0:	2000072c 	.word	0x2000072c
 80019a4:	200008e4 	.word	0x200008e4
 80019a8:	20000608 	.word	0x20000608

080019ac <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
	if(htim==&htim7){
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	4a3b      	ldr	r2, [pc, #236]	@ (8001aa4 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d16e      	bne.n	8001a9a <HAL_TIM_PeriodElapsedCallback+0xee>
		speednow=10*(short)__HAL_TIM_GetCounter(&htim5);
 80019bc:	4b3a      	ldr	r3, [pc, #232]	@ (8001aa8 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019c2:	b21b      	sxth	r3, r3
 80019c4:	461a      	mov	r2, r3
 80019c6:	4613      	mov	r3, r2
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	4413      	add	r3, r2
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	461a      	mov	r2, r3
 80019d0:	4b36      	ldr	r3, [pc, #216]	@ (8001aac <HAL_TIM_PeriodElapsedCallback+0x100>)
 80019d2:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SetCounter(&htim5,0);
 80019d4:	4b34      	ldr	r3, [pc, #208]	@ (8001aa8 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2200      	movs	r2, #0
 80019da:	625a      	str	r2, [r3, #36]	@ 0x24
        distance+=speednow/10;
 80019dc:	4b33      	ldr	r3, [pc, #204]	@ (8001aac <HAL_TIM_PeriodElapsedCallback+0x100>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a33      	ldr	r2, [pc, #204]	@ (8001ab0 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80019e2:	fb82 1203 	smull	r1, r2, r2, r3
 80019e6:	1092      	asrs	r2, r2, #2
 80019e8:	17db      	asrs	r3, r3, #31
 80019ea:	1ad2      	subs	r2, r2, r3
 80019ec:	4b31      	ldr	r3, [pc, #196]	@ (8001ab4 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4413      	add	r3, r2
 80019f2:	4a30      	ldr	r2, [pc, #192]	@ (8001ab4 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80019f4:	6013      	str	r3, [r2, #0]

        speednow2=10*(short)__HAL_TIM_GetCounter(&htim8);
 80019f6:	4b30      	ldr	r3, [pc, #192]	@ (8001ab8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019fc:	b21b      	sxth	r3, r3
 80019fe:	461a      	mov	r2, r3
 8001a00:	4613      	mov	r3, r2
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	4413      	add	r3, r2
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	461a      	mov	r2, r3
 8001a0a:	4b2c      	ldr	r3, [pc, #176]	@ (8001abc <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001a0c:	601a      	str	r2, [r3, #0]
        __HAL_TIM_SetCounter(&htim8,0);
 8001a0e:	4b2a      	ldr	r3, [pc, #168]	@ (8001ab8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2200      	movs	r2, #0
 8001a14:	625a      	str	r2, [r3, #36]	@ 0x24
        distance2+=(speednow2)/10;
 8001a16:	4b29      	ldr	r3, [pc, #164]	@ (8001abc <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a25      	ldr	r2, [pc, #148]	@ (8001ab0 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001a1c:	fb82 1203 	smull	r1, r2, r2, r3
 8001a20:	1092      	asrs	r2, r2, #2
 8001a22:	17db      	asrs	r3, r3, #31
 8001a24:	1ad2      	subs	r2, r2, r3
 8001a26:	4b26      	ldr	r3, [pc, #152]	@ (8001ac0 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	4a24      	ldr	r2, [pc, #144]	@ (8001ac0 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001a2e:	6013      	str	r3, [r2, #0]

        PID_Trace_realize(&Trace_PID, Trace_error());
 8001a30:	f001 f852 	bl	8002ad8 <Trace_error>
 8001a34:	eef0 7a40 	vmov.f32	s15, s0
 8001a38:	eeb0 0a67 	vmov.f32	s0, s15
 8001a3c:	4821      	ldr	r0, [pc, #132]	@ (8001ac4 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001a3e:	f001 f88d 	bl	8002b5c <PID_Trace_realize>
        PID_Angle_realize(&Angle_PID,YawZ);
 8001a42:	4b21      	ldr	r3, [pc, #132]	@ (8001ac8 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001a44:	edd3 7a00 	vldr	s15, [r3]
 8001a48:	eeb0 0a67 	vmov.f32	s0, s15
 8001a4c:	481f      	ldr	r0, [pc, #124]	@ (8001acc <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001a4e:	f000 ff93 	bl	8002978 <PID_Angle_realize>
        Set_motor_speedL(&PIDL,PIDL.target_val-Trace_PID.output_val-Angle_PID.output_val);
 8001a52:	4b1f      	ldr	r3, [pc, #124]	@ (8001ad0 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001a54:	ed93 7a00 	vldr	s14, [r3]
 8001a58:	4b1a      	ldr	r3, [pc, #104]	@ (8001ac4 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001a5a:	edd3 7a07 	vldr	s15, [r3, #28]
 8001a5e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a62:	4b1a      	ldr	r3, [pc, #104]	@ (8001acc <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001a64:	edd3 7a07 	vldr	s15, [r3, #28]
 8001a68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a6c:	eeb0 0a67 	vmov.f32	s0, s15
 8001a70:	4817      	ldr	r0, [pc, #92]	@ (8001ad0 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001a72:	f001 fce1 	bl	8003438 <Set_motor_speedL>
        Set_motor_speedR(&PIDR,PIDR.target_val+Trace_PID.output_val+Angle_PID.output_val);
 8001a76:	4b17      	ldr	r3, [pc, #92]	@ (8001ad4 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001a78:	ed93 7a00 	vldr	s14, [r3]
 8001a7c:	4b11      	ldr	r3, [pc, #68]	@ (8001ac4 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001a7e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001a82:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a86:	4b11      	ldr	r3, [pc, #68]	@ (8001acc <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001a88:	edd3 7a07 	vldr	s15, [r3, #28]
 8001a8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a90:	eeb0 0a67 	vmov.f32	s0, s15
 8001a94:	480f      	ldr	r0, [pc, #60]	@ (8001ad4 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001a96:	f001 fcef 	bl	8003478 <Set_motor_speedR>





}
 8001a9a:	bf00      	nop
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	2000077c 	.word	0x2000077c
 8001aa8:	20000734 	.word	0x20000734
 8001aac:	20000718 	.word	0x20000718
 8001ab0:	66666667 	.word	0x66666667
 8001ab4:	20000714 	.word	0x20000714
 8001ab8:	200007c4 	.word	0x200007c4
 8001abc:	20000720 	.word	0x20000720
 8001ac0:	2000071c 	.word	0x2000071c
 8001ac4:	200002c4 	.word	0x200002c4
 8001ac8:	20000710 	.word	0x20000710
 8001acc:	200002e4 	.word	0x200002e4
 8001ad0:	2000027c 	.word	0x2000027c
 8001ad4:	200002a0 	.word	0x200002a0

08001ad8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001adc:	b672      	cpsid	i
}
 8001ade:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ae0:	bf00      	nop
 8001ae2:	e7fd      	b.n	8001ae0 <Error_Handler+0x8>

08001ae4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	607b      	str	r3, [r7, #4]
 8001aee:	4b10      	ldr	r3, [pc, #64]	@ (8001b30 <HAL_MspInit+0x4c>)
 8001af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001af2:	4a0f      	ldr	r2, [pc, #60]	@ (8001b30 <HAL_MspInit+0x4c>)
 8001af4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001af8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001afa:	4b0d      	ldr	r3, [pc, #52]	@ (8001b30 <HAL_MspInit+0x4c>)
 8001afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001afe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b02:	607b      	str	r3, [r7, #4]
 8001b04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	603b      	str	r3, [r7, #0]
 8001b0a:	4b09      	ldr	r3, [pc, #36]	@ (8001b30 <HAL_MspInit+0x4c>)
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b0e:	4a08      	ldr	r2, [pc, #32]	@ (8001b30 <HAL_MspInit+0x4c>)
 8001b10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b14:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b16:	4b06      	ldr	r3, [pc, #24]	@ (8001b30 <HAL_MspInit+0x4c>)
 8001b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b1e:	603b      	str	r3, [r7, #0]
 8001b20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b22:	bf00      	nop
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	40023800 	.word	0x40023800

08001b34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b38:	bf00      	nop
 8001b3a:	e7fd      	b.n	8001b38 <NMI_Handler+0x4>

08001b3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b40:	bf00      	nop
 8001b42:	e7fd      	b.n	8001b40 <HardFault_Handler+0x4>

08001b44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b48:	bf00      	nop
 8001b4a:	e7fd      	b.n	8001b48 <MemManage_Handler+0x4>

08001b4c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b50:	bf00      	nop
 8001b52:	e7fd      	b.n	8001b50 <BusFault_Handler+0x4>

08001b54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b58:	bf00      	nop
 8001b5a:	e7fd      	b.n	8001b58 <UsageFault_Handler+0x4>

08001b5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b60:	bf00      	nop
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr

08001b6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b6e:	bf00      	nop
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b7c:	bf00      	nop
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr

08001b86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b8a:	f001 fdad 	bl	80036e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}
	...

08001b94 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001b98:	4802      	ldr	r0, [pc, #8]	@ (8001ba4 <DMA1_Stream1_IRQHandler+0x10>)
 8001b9a:	f002 f893 	bl	8003cc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001b9e:	bf00      	nop
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	20000af4 	.word	0x20000af4

08001ba8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001bac:	4802      	ldr	r0, [pc, #8]	@ (8001bb8 <DMA1_Stream3_IRQHandler+0x10>)
 8001bae:	f002 f889 	bl	8003cc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	20000b54 	.word	0x20000b54

08001bbc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001bc0:	4802      	ldr	r0, [pc, #8]	@ (8001bcc <DMA1_Stream5_IRQHandler+0x10>)
 8001bc2:	f002 f87f 	bl	8003cc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	20000a34 	.word	0x20000a34

08001bd0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001bd4:	4802      	ldr	r0, [pc, #8]	@ (8001be0 <DMA1_Stream6_IRQHandler+0x10>)
 8001bd6:	f002 f875 	bl	8003cc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	20000a94 	.word	0x20000a94

08001be4 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8001be8:	4802      	ldr	r0, [pc, #8]	@ (8001bf4 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001bea:	f004 f8f0 	bl	8005dce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	2000080c 	.word	0x2000080c

08001bf8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001bfc:	4802      	ldr	r0, [pc, #8]	@ (8001c08 <USART1_IRQHandler+0x10>)
 8001bfe:	f005 fa3f 	bl	8007080 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c02:	bf00      	nop
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	2000089c 	.word	0x2000089c

08001c0c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c10:	4802      	ldr	r0, [pc, #8]	@ (8001c1c <USART2_IRQHandler+0x10>)
 8001c12:	f005 fa35 	bl	8007080 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c16:	bf00      	nop
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	200008e4 	.word	0x200008e4

08001c20 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001c24:	4802      	ldr	r0, [pc, #8]	@ (8001c30 <USART3_IRQHandler+0x10>)
 8001c26:	f005 fa2b 	bl	8007080 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001c2a:	bf00      	nop
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	2000092c 	.word	0x2000092c

08001c34 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001c38:	4802      	ldr	r0, [pc, #8]	@ (8001c44 <TIM7_IRQHandler+0x10>)
 8001c3a:	f004 f8c8 	bl	8005dce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001c3e:	bf00      	nop
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	2000077c 	.word	0x2000077c

08001c48 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001c4c:	4802      	ldr	r0, [pc, #8]	@ (8001c58 <DMA2_Stream2_IRQHandler+0x10>)
 8001c4e:	f002 f839 	bl	8003cc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001c52:	bf00      	nop
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	20000974 	.word	0x20000974

08001c5c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001c60:	4802      	ldr	r0, [pc, #8]	@ (8001c6c <DMA2_Stream7_IRQHandler+0x10>)
 8001c62:	f002 f82f 	bl	8003cc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001c66:	bf00      	nop
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	200009d4 	.word	0x200009d4

08001c70 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  return 1;
 8001c74:	2301      	movs	r3, #1
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <_kill>:

int _kill(int pid, int sig)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c8a:	f007 fb1d 	bl	80092c8 <__errno>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2216      	movs	r2, #22
 8001c92:	601a      	str	r2, [r3, #0]
  return -1;
 8001c94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3708      	adds	r7, #8
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <_exit>:

void _exit (int status)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ca8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f7ff ffe7 	bl	8001c80 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001cb2:	bf00      	nop
 8001cb4:	e7fd      	b.n	8001cb2 <_exit+0x12>

08001cb6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b086      	sub	sp, #24
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	60f8      	str	r0, [r7, #12]
 8001cbe:	60b9      	str	r1, [r7, #8]
 8001cc0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	617b      	str	r3, [r7, #20]
 8001cc6:	e00a      	b.n	8001cde <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001cc8:	f3af 8000 	nop.w
 8001ccc:	4601      	mov	r1, r0
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	1c5a      	adds	r2, r3, #1
 8001cd2:	60ba      	str	r2, [r7, #8]
 8001cd4:	b2ca      	uxtb	r2, r1
 8001cd6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	3301      	adds	r3, #1
 8001cdc:	617b      	str	r3, [r7, #20]
 8001cde:	697a      	ldr	r2, [r7, #20]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	dbf0      	blt.n	8001cc8 <_read+0x12>
  }

  return len;
 8001ce6:	687b      	ldr	r3, [r7, #4]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3718      	adds	r7, #24
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b086      	sub	sp, #24
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	60b9      	str	r1, [r7, #8]
 8001cfa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	617b      	str	r3, [r7, #20]
 8001d00:	e009      	b.n	8001d16 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	1c5a      	adds	r2, r3, #1
 8001d06:	60ba      	str	r2, [r7, #8]
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	3301      	adds	r3, #1
 8001d14:	617b      	str	r3, [r7, #20]
 8001d16:	697a      	ldr	r2, [r7, #20]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	dbf1      	blt.n	8001d02 <_write+0x12>
  }
  return len;
 8001d1e:	687b      	ldr	r3, [r7, #4]
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3718      	adds	r7, #24
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <_close>:

int _close(int file)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d50:	605a      	str	r2, [r3, #4]
  return 0;
 8001d52:	2300      	movs	r3, #0
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <_isatty>:

int _isatty(int file)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d68:	2301      	movs	r3, #1
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr

08001d76 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d76:	b480      	push	{r7}
 8001d78:	b085      	sub	sp, #20
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	60f8      	str	r0, [r7, #12]
 8001d7e:	60b9      	str	r1, [r7, #8]
 8001d80:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d82:	2300      	movs	r3, #0
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3714      	adds	r7, #20
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d98:	4a14      	ldr	r2, [pc, #80]	@ (8001dec <_sbrk+0x5c>)
 8001d9a:	4b15      	ldr	r3, [pc, #84]	@ (8001df0 <_sbrk+0x60>)
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001da4:	4b13      	ldr	r3, [pc, #76]	@ (8001df4 <_sbrk+0x64>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d102      	bne.n	8001db2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dac:	4b11      	ldr	r3, [pc, #68]	@ (8001df4 <_sbrk+0x64>)
 8001dae:	4a12      	ldr	r2, [pc, #72]	@ (8001df8 <_sbrk+0x68>)
 8001db0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001db2:	4b10      	ldr	r3, [pc, #64]	@ (8001df4 <_sbrk+0x64>)
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4413      	add	r3, r2
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d207      	bcs.n	8001dd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dc0:	f007 fa82 	bl	80092c8 <__errno>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	220c      	movs	r2, #12
 8001dc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dca:	f04f 33ff 	mov.w	r3, #4294967295
 8001dce:	e009      	b.n	8001de4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dd0:	4b08      	ldr	r3, [pc, #32]	@ (8001df4 <_sbrk+0x64>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dd6:	4b07      	ldr	r3, [pc, #28]	@ (8001df4 <_sbrk+0x64>)
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4413      	add	r3, r2
 8001dde:	4a05      	ldr	r2, [pc, #20]	@ (8001df4 <_sbrk+0x64>)
 8001de0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001de2:	68fb      	ldr	r3, [r7, #12]
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3718      	adds	r7, #24
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	20020000 	.word	0x20020000
 8001df0:	00000400 	.word	0x00000400
 8001df4:	20000730 	.word	0x20000730
 8001df8:	20001190 	.word	0x20001190

08001dfc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e00:	4b06      	ldr	r3, [pc, #24]	@ (8001e1c <SystemInit+0x20>)
 8001e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e06:	4a05      	ldr	r2, [pc, #20]	@ (8001e1c <SystemInit+0x20>)
 8001e08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e10:	bf00      	nop
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	e000ed00 	.word	0xe000ed00

08001e20 <MX_TIM5_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim12;

/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b08c      	sub	sp, #48	@ 0x30
 8001e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e26:	f107 030c 	add.w	r3, r7, #12
 8001e2a:	2224      	movs	r2, #36	@ 0x24
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f007 f9f7 	bl	8009222 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e34:	1d3b      	adds	r3, r7, #4
 8001e36:	2200      	movs	r2, #0
 8001e38:	601a      	str	r2, [r3, #0]
 8001e3a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001e3c:	4b20      	ldr	r3, [pc, #128]	@ (8001ec0 <MX_TIM5_Init+0xa0>)
 8001e3e:	4a21      	ldr	r2, [pc, #132]	@ (8001ec4 <MX_TIM5_Init+0xa4>)
 8001e40:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001e42:	4b1f      	ldr	r3, [pc, #124]	@ (8001ec0 <MX_TIM5_Init+0xa0>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e48:	4b1d      	ldr	r3, [pc, #116]	@ (8001ec0 <MX_TIM5_Init+0xa0>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65536;
 8001e4e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ec0 <MX_TIM5_Init+0xa0>)
 8001e50:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001e54:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e56:	4b1a      	ldr	r3, [pc, #104]	@ (8001ec0 <MX_TIM5_Init+0xa0>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e5c:	4b18      	ldr	r3, [pc, #96]	@ (8001ec0 <MX_TIM5_Init+0xa0>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001e62:	2301      	movs	r3, #1
 8001e64:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e66:	2300      	movs	r3, #0
 8001e68:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001e72:	2300      	movs	r3, #0
 8001e74:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e76:	2300      	movs	r3, #0
 8001e78:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001e82:	2300      	movs	r3, #0
 8001e84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001e86:	f107 030c 	add.w	r3, r7, #12
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	480c      	ldr	r0, [pc, #48]	@ (8001ec0 <MX_TIM5_Init+0xa0>)
 8001e8e:	f003 fe6a 	bl	8005b66 <HAL_TIM_Encoder_Init>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001e98:	f7ff fe1e 	bl	8001ad8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001ea4:	1d3b      	adds	r3, r7, #4
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	4805      	ldr	r0, [pc, #20]	@ (8001ec0 <MX_TIM5_Init+0xa0>)
 8001eaa:	f004 ff0f 	bl	8006ccc <HAL_TIMEx_MasterConfigSynchronization>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001eb4:	f7ff fe10 	bl	8001ad8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001eb8:	bf00      	nop
 8001eba:	3730      	adds	r7, #48	@ 0x30
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	20000734 	.word	0x20000734
 8001ec4:	40000c00 	.word	0x40000c00

08001ec8 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ece:	463b      	mov	r3, r7
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001ed6:	4b15      	ldr	r3, [pc, #84]	@ (8001f2c <MX_TIM7_Init+0x64>)
 8001ed8:	4a15      	ldr	r2, [pc, #84]	@ (8001f30 <MX_TIM7_Init+0x68>)
 8001eda:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8400-1;
 8001edc:	4b13      	ldr	r3, [pc, #76]	@ (8001f2c <MX_TIM7_Init+0x64>)
 8001ede:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001ee2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ee4:	4b11      	ldr	r3, [pc, #68]	@ (8001f2c <MX_TIM7_Init+0x64>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 100-1;
 8001eea:	4b10      	ldr	r3, [pc, #64]	@ (8001f2c <MX_TIM7_Init+0x64>)
 8001eec:	2263      	movs	r2, #99	@ 0x63
 8001eee:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ef0:	4b0e      	ldr	r3, [pc, #56]	@ (8001f2c <MX_TIM7_Init+0x64>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001ef6:	480d      	ldr	r0, [pc, #52]	@ (8001f2c <MX_TIM7_Init+0x64>)
 8001ef8:	f003 fbfa 	bl	80056f0 <HAL_TIM_Base_Init>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001f02:	f7ff fde9 	bl	8001ad8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f06:	2300      	movs	r3, #0
 8001f08:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001f0e:	463b      	mov	r3, r7
 8001f10:	4619      	mov	r1, r3
 8001f12:	4806      	ldr	r0, [pc, #24]	@ (8001f2c <MX_TIM7_Init+0x64>)
 8001f14:	f004 feda 	bl	8006ccc <HAL_TIMEx_MasterConfigSynchronization>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001f1e:	f7ff fddb 	bl	8001ad8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001f22:	bf00      	nop
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	2000077c 	.word	0x2000077c
 8001f30:	40001400 	.word	0x40001400

08001f34 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b08c      	sub	sp, #48	@ 0x30
 8001f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001f3a:	f107 030c 	add.w	r3, r7, #12
 8001f3e:	2224      	movs	r2, #36	@ 0x24
 8001f40:	2100      	movs	r1, #0
 8001f42:	4618      	mov	r0, r3
 8001f44:	f007 f96d 	bl	8009222 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f48:	1d3b      	adds	r3, r7, #4
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	601a      	str	r2, [r3, #0]
 8001f4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001f50:	4b22      	ldr	r3, [pc, #136]	@ (8001fdc <MX_TIM8_Init+0xa8>)
 8001f52:	4a23      	ldr	r2, [pc, #140]	@ (8001fe0 <MX_TIM8_Init+0xac>)
 8001f54:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001f56:	4b21      	ldr	r3, [pc, #132]	@ (8001fdc <MX_TIM8_Init+0xa8>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f5c:	4b1f      	ldr	r3, [pc, #124]	@ (8001fdc <MX_TIM8_Init+0xa8>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001f62:	4b1e      	ldr	r3, [pc, #120]	@ (8001fdc <MX_TIM8_Init+0xa8>)
 8001f64:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f68:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f6a:	4b1c      	ldr	r3, [pc, #112]	@ (8001fdc <MX_TIM8_Init+0xa8>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001f70:	4b1a      	ldr	r3, [pc, #104]	@ (8001fdc <MX_TIM8_Init+0xa8>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f76:	4b19      	ldr	r3, [pc, #100]	@ (8001fdc <MX_TIM8_Init+0xa8>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001f80:	2300      	movs	r3, #0
 8001f82:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001f84:	2301      	movs	r3, #1
 8001f86:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001f90:	2300      	movs	r3, #0
 8001f92:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001f94:	2301      	movs	r3, #1
 8001f96:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001fa0:	f107 030c 	add.w	r3, r7, #12
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	480d      	ldr	r0, [pc, #52]	@ (8001fdc <MX_TIM8_Init+0xa8>)
 8001fa8:	f003 fddd 	bl	8005b66 <HAL_TIM_Encoder_Init>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8001fb2:	f7ff fd91 	bl	8001ad8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001fbe:	1d3b      	adds	r3, r7, #4
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4806      	ldr	r0, [pc, #24]	@ (8001fdc <MX_TIM8_Init+0xa8>)
 8001fc4:	f004 fe82 	bl	8006ccc <HAL_TIMEx_MasterConfigSynchronization>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8001fce:	f7ff fd83 	bl	8001ad8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001fd2:	bf00      	nop
 8001fd4:	3730      	adds	r7, #48	@ 0x30
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	200007c4 	.word	0x200007c4
 8001fe0:	40010400 	.word	0x40010400

08001fe4 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b088      	sub	sp, #32
 8001fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fea:	f107 0310 	add.w	r3, r7, #16
 8001fee:	2200      	movs	r2, #0
 8001ff0:	601a      	str	r2, [r3, #0]
 8001ff2:	605a      	str	r2, [r3, #4]
 8001ff4:	609a      	str	r2, [r3, #8]
 8001ff6:	60da      	str	r2, [r3, #12]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001ff8:	463b      	mov	r3, r7
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	601a      	str	r2, [r3, #0]
 8001ffe:	605a      	str	r2, [r3, #4]
 8002000:	609a      	str	r2, [r3, #8]
 8002002:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002004:	4b23      	ldr	r3, [pc, #140]	@ (8002094 <MX_TIM9_Init+0xb0>)
 8002006:	4a24      	ldr	r2, [pc, #144]	@ (8002098 <MX_TIM9_Init+0xb4>)
 8002008:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 84-1;
 800200a:	4b22      	ldr	r3, [pc, #136]	@ (8002094 <MX_TIM9_Init+0xb0>)
 800200c:	2253      	movs	r2, #83	@ 0x53
 800200e:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002010:	4b20      	ldr	r3, [pc, #128]	@ (8002094 <MX_TIM9_Init+0xb0>)
 8002012:	2200      	movs	r2, #0
 8002014:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8002016:	4b1f      	ldr	r3, [pc, #124]	@ (8002094 <MX_TIM9_Init+0xb0>)
 8002018:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800201c:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800201e:	4b1d      	ldr	r3, [pc, #116]	@ (8002094 <MX_TIM9_Init+0xb0>)
 8002020:	2200      	movs	r2, #0
 8002022:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002024:	4b1b      	ldr	r3, [pc, #108]	@ (8002094 <MX_TIM9_Init+0xb0>)
 8002026:	2200      	movs	r2, #0
 8002028:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800202a:	481a      	ldr	r0, [pc, #104]	@ (8002094 <MX_TIM9_Init+0xb0>)
 800202c:	f003 fb60 	bl	80056f0 <HAL_TIM_Base_Init>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <MX_TIM9_Init+0x56>
  {
    Error_Handler();
 8002036:	f7ff fd4f 	bl	8001ad8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800203a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800203e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8002040:	f107 0310 	add.w	r3, r7, #16
 8002044:	4619      	mov	r1, r3
 8002046:	4813      	ldr	r0, [pc, #76]	@ (8002094 <MX_TIM9_Init+0xb0>)
 8002048:	f004 f910 	bl	800626c <HAL_TIM_ConfigClockSource>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <MX_TIM9_Init+0x72>
  {
    Error_Handler();
 8002052:	f7ff fd41 	bl	8001ad8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim9) != HAL_OK)
 8002056:	480f      	ldr	r0, [pc, #60]	@ (8002094 <MX_TIM9_Init+0xb0>)
 8002058:	f003 fd2c 	bl	8005ab4 <HAL_TIM_IC_Init>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <MX_TIM9_Init+0x82>
  {
    Error_Handler();
 8002062:	f7ff fd39 	bl	8001ad8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002066:	2300      	movs	r3, #0
 8002068:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800206a:	2301      	movs	r3, #1
 800206c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800206e:	2300      	movs	r3, #0
 8002070:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 8002072:	230f      	movs	r3, #15
 8002074:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim9, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002076:	463b      	mov	r3, r7
 8002078:	2200      	movs	r2, #0
 800207a:	4619      	mov	r1, r3
 800207c:	4805      	ldr	r0, [pc, #20]	@ (8002094 <MX_TIM9_Init+0xb0>)
 800207e:	f003 ff96 	bl	8005fae <HAL_TIM_IC_ConfigChannel>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <MX_TIM9_Init+0xa8>
  {
    Error_Handler();
 8002088:	f7ff fd26 	bl	8001ad8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 800208c:	bf00      	nop
 800208e:	3720      	adds	r7, #32
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	2000080c 	.word	0x2000080c
 8002098:	40014000 	.word	0x40014000

0800209c <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b08c      	sub	sp, #48	@ 0x30
 80020a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020a2:	f107 0320 	add.w	r3, r7, #32
 80020a6:	2200      	movs	r2, #0
 80020a8:	601a      	str	r2, [r3, #0]
 80020aa:	605a      	str	r2, [r3, #4]
 80020ac:	609a      	str	r2, [r3, #8]
 80020ae:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020b0:	1d3b      	adds	r3, r7, #4
 80020b2:	2200      	movs	r2, #0
 80020b4:	601a      	str	r2, [r3, #0]
 80020b6:	605a      	str	r2, [r3, #4]
 80020b8:	609a      	str	r2, [r3, #8]
 80020ba:	60da      	str	r2, [r3, #12]
 80020bc:	611a      	str	r2, [r3, #16]
 80020be:	615a      	str	r2, [r3, #20]
 80020c0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80020c2:	4b2b      	ldr	r3, [pc, #172]	@ (8002170 <MX_TIM12_Init+0xd4>)
 80020c4:	4a2b      	ldr	r2, [pc, #172]	@ (8002174 <MX_TIM12_Init+0xd8>)
 80020c6:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 84-1;
 80020c8:	4b29      	ldr	r3, [pc, #164]	@ (8002170 <MX_TIM12_Init+0xd4>)
 80020ca:	2253      	movs	r2, #83	@ 0x53
 80020cc:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020ce:	4b28      	ldr	r3, [pc, #160]	@ (8002170 <MX_TIM12_Init+0xd4>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 1000-1;
 80020d4:	4b26      	ldr	r3, [pc, #152]	@ (8002170 <MX_TIM12_Init+0xd4>)
 80020d6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80020da:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020dc:	4b24      	ldr	r3, [pc, #144]	@ (8002170 <MX_TIM12_Init+0xd4>)
 80020de:	2200      	movs	r2, #0
 80020e0:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020e2:	4b23      	ldr	r3, [pc, #140]	@ (8002170 <MX_TIM12_Init+0xd4>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80020e8:	4821      	ldr	r0, [pc, #132]	@ (8002170 <MX_TIM12_Init+0xd4>)
 80020ea:	f003 fb01 	bl	80056f0 <HAL_TIM_Base_Init>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 80020f4:	f7ff fcf0 	bl	8001ad8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020fc:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80020fe:	f107 0320 	add.w	r3, r7, #32
 8002102:	4619      	mov	r1, r3
 8002104:	481a      	ldr	r0, [pc, #104]	@ (8002170 <MX_TIM12_Init+0xd4>)
 8002106:	f004 f8b1 	bl	800626c <HAL_TIM_ConfigClockSource>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8002110:	f7ff fce2 	bl	8001ad8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002114:	4816      	ldr	r0, [pc, #88]	@ (8002170 <MX_TIM12_Init+0xd4>)
 8002116:	f003 fbab 	bl	8005870 <HAL_TIM_PWM_Init>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 8002120:	f7ff fcda 	bl	8001ad8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002124:	2360      	movs	r3, #96	@ 0x60
 8002126:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002128:	2300      	movs	r3, #0
 800212a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800212c:	2300      	movs	r3, #0
 800212e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002130:	2300      	movs	r3, #0
 8002132:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002134:	1d3b      	adds	r3, r7, #4
 8002136:	2200      	movs	r2, #0
 8002138:	4619      	mov	r1, r3
 800213a:	480d      	ldr	r0, [pc, #52]	@ (8002170 <MX_TIM12_Init+0xd4>)
 800213c:	f003 ffd4 	bl	80060e8 <HAL_TIM_PWM_ConfigChannel>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 8002146:	f7ff fcc7 	bl	8001ad8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800214a:	1d3b      	adds	r3, r7, #4
 800214c:	2204      	movs	r2, #4
 800214e:	4619      	mov	r1, r3
 8002150:	4807      	ldr	r0, [pc, #28]	@ (8002170 <MX_TIM12_Init+0xd4>)
 8002152:	f003 ffc9 	bl	80060e8 <HAL_TIM_PWM_ConfigChannel>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <MX_TIM12_Init+0xc4>
  {
    Error_Handler();
 800215c:	f7ff fcbc 	bl	8001ad8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8002160:	4803      	ldr	r0, [pc, #12]	@ (8002170 <MX_TIM12_Init+0xd4>)
 8002162:	f000 f90b 	bl	800237c <HAL_TIM_MspPostInit>

}
 8002166:	bf00      	nop
 8002168:	3730      	adds	r7, #48	@ 0x30
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	20000854 	.word	0x20000854
 8002174:	40001800 	.word	0x40001800

08002178 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b08c      	sub	sp, #48	@ 0x30
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002180:	f107 031c 	add.w	r3, r7, #28
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	605a      	str	r2, [r3, #4]
 800218a:	609a      	str	r2, [r3, #8]
 800218c:	60da      	str	r2, [r3, #12]
 800218e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM5)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a32      	ldr	r2, [pc, #200]	@ (8002260 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d12c      	bne.n	80021f4 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800219a:	2300      	movs	r3, #0
 800219c:	61bb      	str	r3, [r7, #24]
 800219e:	4b31      	ldr	r3, [pc, #196]	@ (8002264 <HAL_TIM_Encoder_MspInit+0xec>)
 80021a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a2:	4a30      	ldr	r2, [pc, #192]	@ (8002264 <HAL_TIM_Encoder_MspInit+0xec>)
 80021a4:	f043 0308 	orr.w	r3, r3, #8
 80021a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80021aa:	4b2e      	ldr	r3, [pc, #184]	@ (8002264 <HAL_TIM_Encoder_MspInit+0xec>)
 80021ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ae:	f003 0308 	and.w	r3, r3, #8
 80021b2:	61bb      	str	r3, [r7, #24]
 80021b4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021b6:	2300      	movs	r3, #0
 80021b8:	617b      	str	r3, [r7, #20]
 80021ba:	4b2a      	ldr	r3, [pc, #168]	@ (8002264 <HAL_TIM_Encoder_MspInit+0xec>)
 80021bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021be:	4a29      	ldr	r2, [pc, #164]	@ (8002264 <HAL_TIM_Encoder_MspInit+0xec>)
 80021c0:	f043 0301 	orr.w	r3, r3, #1
 80021c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80021c6:	4b27      	ldr	r3, [pc, #156]	@ (8002264 <HAL_TIM_Encoder_MspInit+0xec>)
 80021c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ca:	f003 0301 	and.w	r3, r3, #1
 80021ce:	617b      	str	r3, [r7, #20]
 80021d0:	697b      	ldr	r3, [r7, #20]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80021d2:	2303      	movs	r3, #3
 80021d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d6:	2302      	movs	r3, #2
 80021d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021da:	2300      	movs	r3, #0
 80021dc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021de:	2300      	movs	r3, #0
 80021e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80021e2:	2302      	movs	r3, #2
 80021e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021e6:	f107 031c 	add.w	r3, r7, #28
 80021ea:	4619      	mov	r1, r3
 80021ec:	481e      	ldr	r0, [pc, #120]	@ (8002268 <HAL_TIM_Encoder_MspInit+0xf0>)
 80021ee:	f001 ffd3 	bl	8004198 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80021f2:	e030      	b.n	8002256 <HAL_TIM_Encoder_MspInit+0xde>
  else if(tim_encoderHandle->Instance==TIM8)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a1c      	ldr	r2, [pc, #112]	@ (800226c <HAL_TIM_Encoder_MspInit+0xf4>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d12b      	bne.n	8002256 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80021fe:	2300      	movs	r3, #0
 8002200:	613b      	str	r3, [r7, #16]
 8002202:	4b18      	ldr	r3, [pc, #96]	@ (8002264 <HAL_TIM_Encoder_MspInit+0xec>)
 8002204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002206:	4a17      	ldr	r2, [pc, #92]	@ (8002264 <HAL_TIM_Encoder_MspInit+0xec>)
 8002208:	f043 0302 	orr.w	r3, r3, #2
 800220c:	6453      	str	r3, [r2, #68]	@ 0x44
 800220e:	4b15      	ldr	r3, [pc, #84]	@ (8002264 <HAL_TIM_Encoder_MspInit+0xec>)
 8002210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	613b      	str	r3, [r7, #16]
 8002218:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800221a:	2300      	movs	r3, #0
 800221c:	60fb      	str	r3, [r7, #12]
 800221e:	4b11      	ldr	r3, [pc, #68]	@ (8002264 <HAL_TIM_Encoder_MspInit+0xec>)
 8002220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002222:	4a10      	ldr	r2, [pc, #64]	@ (8002264 <HAL_TIM_Encoder_MspInit+0xec>)
 8002224:	f043 0304 	orr.w	r3, r3, #4
 8002228:	6313      	str	r3, [r2, #48]	@ 0x30
 800222a:	4b0e      	ldr	r3, [pc, #56]	@ (8002264 <HAL_TIM_Encoder_MspInit+0xec>)
 800222c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800222e:	f003 0304 	and.w	r3, r3, #4
 8002232:	60fb      	str	r3, [r7, #12]
 8002234:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002236:	23c0      	movs	r3, #192	@ 0xc0
 8002238:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800223a:	2302      	movs	r3, #2
 800223c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223e:	2300      	movs	r3, #0
 8002240:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002242:	2300      	movs	r3, #0
 8002244:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002246:	2303      	movs	r3, #3
 8002248:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800224a:	f107 031c 	add.w	r3, r7, #28
 800224e:	4619      	mov	r1, r3
 8002250:	4807      	ldr	r0, [pc, #28]	@ (8002270 <HAL_TIM_Encoder_MspInit+0xf8>)
 8002252:	f001 ffa1 	bl	8004198 <HAL_GPIO_Init>
}
 8002256:	bf00      	nop
 8002258:	3730      	adds	r7, #48	@ 0x30
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	40000c00 	.word	0x40000c00
 8002264:	40023800 	.word	0x40023800
 8002268:	40020000 	.word	0x40020000
 800226c:	40010400 	.word	0x40010400
 8002270:	40020800 	.word	0x40020800

08002274 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b08c      	sub	sp, #48	@ 0x30
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800227c:	f107 031c 	add.w	r3, r7, #28
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	605a      	str	r2, [r3, #4]
 8002286:	609a      	str	r2, [r3, #8]
 8002288:	60da      	str	r2, [r3, #12]
 800228a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM7)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a35      	ldr	r2, [pc, #212]	@ (8002368 <HAL_TIM_Base_MspInit+0xf4>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d116      	bne.n	80022c4 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002296:	2300      	movs	r3, #0
 8002298:	61bb      	str	r3, [r7, #24]
 800229a:	4b34      	ldr	r3, [pc, #208]	@ (800236c <HAL_TIM_Base_MspInit+0xf8>)
 800229c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229e:	4a33      	ldr	r2, [pc, #204]	@ (800236c <HAL_TIM_Base_MspInit+0xf8>)
 80022a0:	f043 0320 	orr.w	r3, r3, #32
 80022a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80022a6:	4b31      	ldr	r3, [pc, #196]	@ (800236c <HAL_TIM_Base_MspInit+0xf8>)
 80022a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022aa:	f003 0320 	and.w	r3, r3, #32
 80022ae:	61bb      	str	r3, [r7, #24]
 80022b0:	69bb      	ldr	r3, [r7, #24]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80022b2:	2200      	movs	r2, #0
 80022b4:	2100      	movs	r1, #0
 80022b6:	2037      	movs	r0, #55	@ 0x37
 80022b8:	f001 fb35 	bl	8003926 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80022bc:	2037      	movs	r0, #55	@ 0x37
 80022be:	f001 fb4e 	bl	800395e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 80022c2:	e04c      	b.n	800235e <HAL_TIM_Base_MspInit+0xea>
  else if(tim_baseHandle->Instance==TIM9)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a29      	ldr	r2, [pc, #164]	@ (8002370 <HAL_TIM_Base_MspInit+0xfc>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d134      	bne.n	8002338 <HAL_TIM_Base_MspInit+0xc4>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80022ce:	2300      	movs	r3, #0
 80022d0:	617b      	str	r3, [r7, #20]
 80022d2:	4b26      	ldr	r3, [pc, #152]	@ (800236c <HAL_TIM_Base_MspInit+0xf8>)
 80022d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022d6:	4a25      	ldr	r2, [pc, #148]	@ (800236c <HAL_TIM_Base_MspInit+0xf8>)
 80022d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80022de:	4b23      	ldr	r3, [pc, #140]	@ (800236c <HAL_TIM_Base_MspInit+0xf8>)
 80022e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022e6:	617b      	str	r3, [r7, #20]
 80022e8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80022ea:	2300      	movs	r3, #0
 80022ec:	613b      	str	r3, [r7, #16]
 80022ee:	4b1f      	ldr	r3, [pc, #124]	@ (800236c <HAL_TIM_Base_MspInit+0xf8>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f2:	4a1e      	ldr	r2, [pc, #120]	@ (800236c <HAL_TIM_Base_MspInit+0xf8>)
 80022f4:	f043 0310 	orr.w	r3, r3, #16
 80022f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80022fa:	4b1c      	ldr	r3, [pc, #112]	@ (800236c <HAL_TIM_Base_MspInit+0xf8>)
 80022fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022fe:	f003 0310 	and.w	r3, r3, #16
 8002302:	613b      	str	r3, [r7, #16]
 8002304:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002306:	2320      	movs	r3, #32
 8002308:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800230a:	2302      	movs	r3, #2
 800230c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230e:	2300      	movs	r3, #0
 8002310:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002312:	2300      	movs	r3, #0
 8002314:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8002316:	2303      	movs	r3, #3
 8002318:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800231a:	f107 031c 	add.w	r3, r7, #28
 800231e:	4619      	mov	r1, r3
 8002320:	4814      	ldr	r0, [pc, #80]	@ (8002374 <HAL_TIM_Base_MspInit+0x100>)
 8002322:	f001 ff39 	bl	8004198 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8002326:	2200      	movs	r2, #0
 8002328:	2100      	movs	r1, #0
 800232a:	2018      	movs	r0, #24
 800232c:	f001 fafb 	bl	8003926 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002330:	2018      	movs	r0, #24
 8002332:	f001 fb14 	bl	800395e <HAL_NVIC_EnableIRQ>
}
 8002336:	e012      	b.n	800235e <HAL_TIM_Base_MspInit+0xea>
  else if(tim_baseHandle->Instance==TIM12)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a0e      	ldr	r2, [pc, #56]	@ (8002378 <HAL_TIM_Base_MspInit+0x104>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d10d      	bne.n	800235e <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002342:	2300      	movs	r3, #0
 8002344:	60fb      	str	r3, [r7, #12]
 8002346:	4b09      	ldr	r3, [pc, #36]	@ (800236c <HAL_TIM_Base_MspInit+0xf8>)
 8002348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234a:	4a08      	ldr	r2, [pc, #32]	@ (800236c <HAL_TIM_Base_MspInit+0xf8>)
 800234c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002350:	6413      	str	r3, [r2, #64]	@ 0x40
 8002352:	4b06      	ldr	r3, [pc, #24]	@ (800236c <HAL_TIM_Base_MspInit+0xf8>)
 8002354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002356:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800235a:	60fb      	str	r3, [r7, #12]
 800235c:	68fb      	ldr	r3, [r7, #12]
}
 800235e:	bf00      	nop
 8002360:	3730      	adds	r7, #48	@ 0x30
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	40001400 	.word	0x40001400
 800236c:	40023800 	.word	0x40023800
 8002370:	40014000 	.word	0x40014000
 8002374:	40021000 	.word	0x40021000
 8002378:	40001800 	.word	0x40001800

0800237c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b088      	sub	sp, #32
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002384:	f107 030c 	add.w	r3, r7, #12
 8002388:	2200      	movs	r2, #0
 800238a:	601a      	str	r2, [r3, #0]
 800238c:	605a      	str	r2, [r3, #4]
 800238e:	609a      	str	r2, [r3, #8]
 8002390:	60da      	str	r2, [r3, #12]
 8002392:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM12)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a12      	ldr	r2, [pc, #72]	@ (80023e4 <HAL_TIM_MspPostInit+0x68>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d11e      	bne.n	80023dc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800239e:	2300      	movs	r3, #0
 80023a0:	60bb      	str	r3, [r7, #8]
 80023a2:	4b11      	ldr	r3, [pc, #68]	@ (80023e8 <HAL_TIM_MspPostInit+0x6c>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a6:	4a10      	ldr	r2, [pc, #64]	@ (80023e8 <HAL_TIM_MspPostInit+0x6c>)
 80023a8:	f043 0302 	orr.w	r3, r3, #2
 80023ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80023ae:	4b0e      	ldr	r3, [pc, #56]	@ (80023e8 <HAL_TIM_MspPostInit+0x6c>)
 80023b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	60bb      	str	r3, [r7, #8]
 80023b8:	68bb      	ldr	r3, [r7, #8]
    /**TIM12 GPIO Configuration
    PB14     ------> TIM12_CH1
    PB15     ------> TIM12_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80023ba:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80023be:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c0:	2302      	movs	r3, #2
 80023c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c4:	2300      	movs	r3, #0
 80023c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c8:	2300      	movs	r3, #0
 80023ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80023cc:	2309      	movs	r3, #9
 80023ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023d0:	f107 030c 	add.w	r3, r7, #12
 80023d4:	4619      	mov	r1, r3
 80023d6:	4805      	ldr	r0, [pc, #20]	@ (80023ec <HAL_TIM_MspPostInit+0x70>)
 80023d8:	f001 fede 	bl	8004198 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80023dc:	bf00      	nop
 80023de:	3720      	adds	r7, #32
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	40001800 	.word	0x40001800
 80023e8:	40023800 	.word	0x40023800
 80023ec:	40020400 	.word	0x40020400

080023f0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80023f4:	4b11      	ldr	r3, [pc, #68]	@ (800243c <MX_USART1_UART_Init+0x4c>)
 80023f6:	4a12      	ldr	r2, [pc, #72]	@ (8002440 <MX_USART1_UART_Init+0x50>)
 80023f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80023fa:	4b10      	ldr	r3, [pc, #64]	@ (800243c <MX_USART1_UART_Init+0x4c>)
 80023fc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002400:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002402:	4b0e      	ldr	r3, [pc, #56]	@ (800243c <MX_USART1_UART_Init+0x4c>)
 8002404:	2200      	movs	r2, #0
 8002406:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002408:	4b0c      	ldr	r3, [pc, #48]	@ (800243c <MX_USART1_UART_Init+0x4c>)
 800240a:	2200      	movs	r2, #0
 800240c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800240e:	4b0b      	ldr	r3, [pc, #44]	@ (800243c <MX_USART1_UART_Init+0x4c>)
 8002410:	2200      	movs	r2, #0
 8002412:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002414:	4b09      	ldr	r3, [pc, #36]	@ (800243c <MX_USART1_UART_Init+0x4c>)
 8002416:	220c      	movs	r2, #12
 8002418:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800241a:	4b08      	ldr	r3, [pc, #32]	@ (800243c <MX_USART1_UART_Init+0x4c>)
 800241c:	2200      	movs	r2, #0
 800241e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002420:	4b06      	ldr	r3, [pc, #24]	@ (800243c <MX_USART1_UART_Init+0x4c>)
 8002422:	2200      	movs	r2, #0
 8002424:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002426:	4805      	ldr	r0, [pc, #20]	@ (800243c <MX_USART1_UART_Init+0x4c>)
 8002428:	f004 fce0 	bl	8006dec <HAL_UART_Init>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002432:	f7ff fb51 	bl	8001ad8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002436:	bf00      	nop
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	2000089c 	.word	0x2000089c
 8002440:	40011000 	.word	0x40011000

08002444 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002448:	4b11      	ldr	r3, [pc, #68]	@ (8002490 <MX_USART2_UART_Init+0x4c>)
 800244a:	4a12      	ldr	r2, [pc, #72]	@ (8002494 <MX_USART2_UART_Init+0x50>)
 800244c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800244e:	4b10      	ldr	r3, [pc, #64]	@ (8002490 <MX_USART2_UART_Init+0x4c>)
 8002450:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002454:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002456:	4b0e      	ldr	r3, [pc, #56]	@ (8002490 <MX_USART2_UART_Init+0x4c>)
 8002458:	2200      	movs	r2, #0
 800245a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800245c:	4b0c      	ldr	r3, [pc, #48]	@ (8002490 <MX_USART2_UART_Init+0x4c>)
 800245e:	2200      	movs	r2, #0
 8002460:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002462:	4b0b      	ldr	r3, [pc, #44]	@ (8002490 <MX_USART2_UART_Init+0x4c>)
 8002464:	2200      	movs	r2, #0
 8002466:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002468:	4b09      	ldr	r3, [pc, #36]	@ (8002490 <MX_USART2_UART_Init+0x4c>)
 800246a:	220c      	movs	r2, #12
 800246c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800246e:	4b08      	ldr	r3, [pc, #32]	@ (8002490 <MX_USART2_UART_Init+0x4c>)
 8002470:	2200      	movs	r2, #0
 8002472:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002474:	4b06      	ldr	r3, [pc, #24]	@ (8002490 <MX_USART2_UART_Init+0x4c>)
 8002476:	2200      	movs	r2, #0
 8002478:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800247a:	4805      	ldr	r0, [pc, #20]	@ (8002490 <MX_USART2_UART_Init+0x4c>)
 800247c:	f004 fcb6 	bl	8006dec <HAL_UART_Init>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002486:	f7ff fb27 	bl	8001ad8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800248a:	bf00      	nop
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	200008e4 	.word	0x200008e4
 8002494:	40004400 	.word	0x40004400

08002498 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800249c:	4b11      	ldr	r3, [pc, #68]	@ (80024e4 <MX_USART3_UART_Init+0x4c>)
 800249e:	4a12      	ldr	r2, [pc, #72]	@ (80024e8 <MX_USART3_UART_Init+0x50>)
 80024a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80024a2:	4b10      	ldr	r3, [pc, #64]	@ (80024e4 <MX_USART3_UART_Init+0x4c>)
 80024a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80024a8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80024aa:	4b0e      	ldr	r3, [pc, #56]	@ (80024e4 <MX_USART3_UART_Init+0x4c>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80024b0:	4b0c      	ldr	r3, [pc, #48]	@ (80024e4 <MX_USART3_UART_Init+0x4c>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80024b6:	4b0b      	ldr	r3, [pc, #44]	@ (80024e4 <MX_USART3_UART_Init+0x4c>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80024bc:	4b09      	ldr	r3, [pc, #36]	@ (80024e4 <MX_USART3_UART_Init+0x4c>)
 80024be:	220c      	movs	r2, #12
 80024c0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024c2:	4b08      	ldr	r3, [pc, #32]	@ (80024e4 <MX_USART3_UART_Init+0x4c>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80024c8:	4b06      	ldr	r3, [pc, #24]	@ (80024e4 <MX_USART3_UART_Init+0x4c>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80024ce:	4805      	ldr	r0, [pc, #20]	@ (80024e4 <MX_USART3_UART_Init+0x4c>)
 80024d0:	f004 fc8c 	bl	8006dec <HAL_UART_Init>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80024da:	f7ff fafd 	bl	8001ad8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80024de:	bf00      	nop
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	2000092c 	.word	0x2000092c
 80024e8:	40004800 	.word	0x40004800

080024ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b08e      	sub	sp, #56	@ 0x38
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024f8:	2200      	movs	r2, #0
 80024fa:	601a      	str	r2, [r3, #0]
 80024fc:	605a      	str	r2, [r3, #4]
 80024fe:	609a      	str	r2, [r3, #8]
 8002500:	60da      	str	r2, [r3, #12]
 8002502:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a96      	ldr	r2, [pc, #600]	@ (8002764 <HAL_UART_MspInit+0x278>)
 800250a:	4293      	cmp	r3, r2
 800250c:	f040 8092 	bne.w	8002634 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002510:	2300      	movs	r3, #0
 8002512:	623b      	str	r3, [r7, #32]
 8002514:	4b94      	ldr	r3, [pc, #592]	@ (8002768 <HAL_UART_MspInit+0x27c>)
 8002516:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002518:	4a93      	ldr	r2, [pc, #588]	@ (8002768 <HAL_UART_MspInit+0x27c>)
 800251a:	f043 0310 	orr.w	r3, r3, #16
 800251e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002520:	4b91      	ldr	r3, [pc, #580]	@ (8002768 <HAL_UART_MspInit+0x27c>)
 8002522:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002524:	f003 0310 	and.w	r3, r3, #16
 8002528:	623b      	str	r3, [r7, #32]
 800252a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800252c:	2300      	movs	r3, #0
 800252e:	61fb      	str	r3, [r7, #28]
 8002530:	4b8d      	ldr	r3, [pc, #564]	@ (8002768 <HAL_UART_MspInit+0x27c>)
 8002532:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002534:	4a8c      	ldr	r2, [pc, #560]	@ (8002768 <HAL_UART_MspInit+0x27c>)
 8002536:	f043 0301 	orr.w	r3, r3, #1
 800253a:	6313      	str	r3, [r2, #48]	@ 0x30
 800253c:	4b8a      	ldr	r3, [pc, #552]	@ (8002768 <HAL_UART_MspInit+0x27c>)
 800253e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002540:	f003 0301 	and.w	r3, r3, #1
 8002544:	61fb      	str	r3, [r7, #28]
 8002546:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002548:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800254c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800254e:	2302      	movs	r3, #2
 8002550:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002552:	2300      	movs	r3, #0
 8002554:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002556:	2303      	movs	r3, #3
 8002558:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800255a:	2307      	movs	r3, #7
 800255c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800255e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002562:	4619      	mov	r1, r3
 8002564:	4881      	ldr	r0, [pc, #516]	@ (800276c <HAL_UART_MspInit+0x280>)
 8002566:	f001 fe17 	bl	8004198 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800256a:	4b81      	ldr	r3, [pc, #516]	@ (8002770 <HAL_UART_MspInit+0x284>)
 800256c:	4a81      	ldr	r2, [pc, #516]	@ (8002774 <HAL_UART_MspInit+0x288>)
 800256e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002570:	4b7f      	ldr	r3, [pc, #508]	@ (8002770 <HAL_UART_MspInit+0x284>)
 8002572:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002576:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002578:	4b7d      	ldr	r3, [pc, #500]	@ (8002770 <HAL_UART_MspInit+0x284>)
 800257a:	2200      	movs	r2, #0
 800257c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800257e:	4b7c      	ldr	r3, [pc, #496]	@ (8002770 <HAL_UART_MspInit+0x284>)
 8002580:	2200      	movs	r2, #0
 8002582:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002584:	4b7a      	ldr	r3, [pc, #488]	@ (8002770 <HAL_UART_MspInit+0x284>)
 8002586:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800258a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800258c:	4b78      	ldr	r3, [pc, #480]	@ (8002770 <HAL_UART_MspInit+0x284>)
 800258e:	2200      	movs	r2, #0
 8002590:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002592:	4b77      	ldr	r3, [pc, #476]	@ (8002770 <HAL_UART_MspInit+0x284>)
 8002594:	2200      	movs	r2, #0
 8002596:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002598:	4b75      	ldr	r3, [pc, #468]	@ (8002770 <HAL_UART_MspInit+0x284>)
 800259a:	2200      	movs	r2, #0
 800259c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800259e:	4b74      	ldr	r3, [pc, #464]	@ (8002770 <HAL_UART_MspInit+0x284>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025a4:	4b72      	ldr	r3, [pc, #456]	@ (8002770 <HAL_UART_MspInit+0x284>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80025aa:	4871      	ldr	r0, [pc, #452]	@ (8002770 <HAL_UART_MspInit+0x284>)
 80025ac:	f001 f9f2 	bl	8003994 <HAL_DMA_Init>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80025b6:	f7ff fa8f 	bl	8001ad8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a6c      	ldr	r2, [pc, #432]	@ (8002770 <HAL_UART_MspInit+0x284>)
 80025be:	63da      	str	r2, [r3, #60]	@ 0x3c
 80025c0:	4a6b      	ldr	r2, [pc, #428]	@ (8002770 <HAL_UART_MspInit+0x284>)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80025c6:	4b6c      	ldr	r3, [pc, #432]	@ (8002778 <HAL_UART_MspInit+0x28c>)
 80025c8:	4a6c      	ldr	r2, [pc, #432]	@ (800277c <HAL_UART_MspInit+0x290>)
 80025ca:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80025cc:	4b6a      	ldr	r3, [pc, #424]	@ (8002778 <HAL_UART_MspInit+0x28c>)
 80025ce:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80025d2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80025d4:	4b68      	ldr	r3, [pc, #416]	@ (8002778 <HAL_UART_MspInit+0x28c>)
 80025d6:	2240      	movs	r2, #64	@ 0x40
 80025d8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025da:	4b67      	ldr	r3, [pc, #412]	@ (8002778 <HAL_UART_MspInit+0x28c>)
 80025dc:	2200      	movs	r2, #0
 80025de:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80025e0:	4b65      	ldr	r3, [pc, #404]	@ (8002778 <HAL_UART_MspInit+0x28c>)
 80025e2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80025e6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025e8:	4b63      	ldr	r3, [pc, #396]	@ (8002778 <HAL_UART_MspInit+0x28c>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025ee:	4b62      	ldr	r3, [pc, #392]	@ (8002778 <HAL_UART_MspInit+0x28c>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80025f4:	4b60      	ldr	r3, [pc, #384]	@ (8002778 <HAL_UART_MspInit+0x28c>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80025fa:	4b5f      	ldr	r3, [pc, #380]	@ (8002778 <HAL_UART_MspInit+0x28c>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002600:	4b5d      	ldr	r3, [pc, #372]	@ (8002778 <HAL_UART_MspInit+0x28c>)
 8002602:	2200      	movs	r2, #0
 8002604:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002606:	485c      	ldr	r0, [pc, #368]	@ (8002778 <HAL_UART_MspInit+0x28c>)
 8002608:	f001 f9c4 	bl	8003994 <HAL_DMA_Init>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8002612:	f7ff fa61 	bl	8001ad8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a57      	ldr	r2, [pc, #348]	@ (8002778 <HAL_UART_MspInit+0x28c>)
 800261a:	639a      	str	r2, [r3, #56]	@ 0x38
 800261c:	4a56      	ldr	r2, [pc, #344]	@ (8002778 <HAL_UART_MspInit+0x28c>)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002622:	2200      	movs	r2, #0
 8002624:	2100      	movs	r1, #0
 8002626:	2025      	movs	r0, #37	@ 0x25
 8002628:	f001 f97d 	bl	8003926 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800262c:	2025      	movs	r0, #37	@ 0x25
 800262e:	f001 f996 	bl	800395e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002632:	e146      	b.n	80028c2 <HAL_UART_MspInit+0x3d6>
  else if(uartHandle->Instance==USART2)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a51      	ldr	r2, [pc, #324]	@ (8002780 <HAL_UART_MspInit+0x294>)
 800263a:	4293      	cmp	r3, r2
 800263c:	f040 80aa 	bne.w	8002794 <HAL_UART_MspInit+0x2a8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002640:	2300      	movs	r3, #0
 8002642:	61bb      	str	r3, [r7, #24]
 8002644:	4b48      	ldr	r3, [pc, #288]	@ (8002768 <HAL_UART_MspInit+0x27c>)
 8002646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002648:	4a47      	ldr	r2, [pc, #284]	@ (8002768 <HAL_UART_MspInit+0x27c>)
 800264a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800264e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002650:	4b45      	ldr	r3, [pc, #276]	@ (8002768 <HAL_UART_MspInit+0x27c>)
 8002652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002654:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002658:	61bb      	str	r3, [r7, #24]
 800265a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800265c:	2300      	movs	r3, #0
 800265e:	617b      	str	r3, [r7, #20]
 8002660:	4b41      	ldr	r3, [pc, #260]	@ (8002768 <HAL_UART_MspInit+0x27c>)
 8002662:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002664:	4a40      	ldr	r2, [pc, #256]	@ (8002768 <HAL_UART_MspInit+0x27c>)
 8002666:	f043 0301 	orr.w	r3, r3, #1
 800266a:	6313      	str	r3, [r2, #48]	@ 0x30
 800266c:	4b3e      	ldr	r3, [pc, #248]	@ (8002768 <HAL_UART_MspInit+0x27c>)
 800266e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002670:	f003 0301 	and.w	r3, r3, #1
 8002674:	617b      	str	r3, [r7, #20]
 8002676:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002678:	230c      	movs	r3, #12
 800267a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800267c:	2302      	movs	r3, #2
 800267e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002680:	2300      	movs	r3, #0
 8002682:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002684:	2303      	movs	r3, #3
 8002686:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002688:	2307      	movs	r3, #7
 800268a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800268c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002690:	4619      	mov	r1, r3
 8002692:	4836      	ldr	r0, [pc, #216]	@ (800276c <HAL_UART_MspInit+0x280>)
 8002694:	f001 fd80 	bl	8004198 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002698:	4b3a      	ldr	r3, [pc, #232]	@ (8002784 <HAL_UART_MspInit+0x298>)
 800269a:	4a3b      	ldr	r2, [pc, #236]	@ (8002788 <HAL_UART_MspInit+0x29c>)
 800269c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800269e:	4b39      	ldr	r3, [pc, #228]	@ (8002784 <HAL_UART_MspInit+0x298>)
 80026a0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80026a4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026a6:	4b37      	ldr	r3, [pc, #220]	@ (8002784 <HAL_UART_MspInit+0x298>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026ac:	4b35      	ldr	r3, [pc, #212]	@ (8002784 <HAL_UART_MspInit+0x298>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80026b2:	4b34      	ldr	r3, [pc, #208]	@ (8002784 <HAL_UART_MspInit+0x298>)
 80026b4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80026b8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026ba:	4b32      	ldr	r3, [pc, #200]	@ (8002784 <HAL_UART_MspInit+0x298>)
 80026bc:	2200      	movs	r2, #0
 80026be:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026c0:	4b30      	ldr	r3, [pc, #192]	@ (8002784 <HAL_UART_MspInit+0x298>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80026c6:	4b2f      	ldr	r3, [pc, #188]	@ (8002784 <HAL_UART_MspInit+0x298>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80026cc:	4b2d      	ldr	r3, [pc, #180]	@ (8002784 <HAL_UART_MspInit+0x298>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026d2:	4b2c      	ldr	r3, [pc, #176]	@ (8002784 <HAL_UART_MspInit+0x298>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80026d8:	482a      	ldr	r0, [pc, #168]	@ (8002784 <HAL_UART_MspInit+0x298>)
 80026da:	f001 f95b 	bl	8003994 <HAL_DMA_Init>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 80026e4:	f7ff f9f8 	bl	8001ad8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	4a26      	ldr	r2, [pc, #152]	@ (8002784 <HAL_UART_MspInit+0x298>)
 80026ec:	63da      	str	r2, [r3, #60]	@ 0x3c
 80026ee:	4a25      	ldr	r2, [pc, #148]	@ (8002784 <HAL_UART_MspInit+0x298>)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80026f4:	4b25      	ldr	r3, [pc, #148]	@ (800278c <HAL_UART_MspInit+0x2a0>)
 80026f6:	4a26      	ldr	r2, [pc, #152]	@ (8002790 <HAL_UART_MspInit+0x2a4>)
 80026f8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80026fa:	4b24      	ldr	r3, [pc, #144]	@ (800278c <HAL_UART_MspInit+0x2a0>)
 80026fc:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002700:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002702:	4b22      	ldr	r3, [pc, #136]	@ (800278c <HAL_UART_MspInit+0x2a0>)
 8002704:	2240      	movs	r2, #64	@ 0x40
 8002706:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002708:	4b20      	ldr	r3, [pc, #128]	@ (800278c <HAL_UART_MspInit+0x2a0>)
 800270a:	2200      	movs	r2, #0
 800270c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800270e:	4b1f      	ldr	r3, [pc, #124]	@ (800278c <HAL_UART_MspInit+0x2a0>)
 8002710:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002714:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002716:	4b1d      	ldr	r3, [pc, #116]	@ (800278c <HAL_UART_MspInit+0x2a0>)
 8002718:	2200      	movs	r2, #0
 800271a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800271c:	4b1b      	ldr	r3, [pc, #108]	@ (800278c <HAL_UART_MspInit+0x2a0>)
 800271e:	2200      	movs	r2, #0
 8002720:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002722:	4b1a      	ldr	r3, [pc, #104]	@ (800278c <HAL_UART_MspInit+0x2a0>)
 8002724:	2200      	movs	r2, #0
 8002726:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002728:	4b18      	ldr	r3, [pc, #96]	@ (800278c <HAL_UART_MspInit+0x2a0>)
 800272a:	2200      	movs	r2, #0
 800272c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800272e:	4b17      	ldr	r3, [pc, #92]	@ (800278c <HAL_UART_MspInit+0x2a0>)
 8002730:	2200      	movs	r2, #0
 8002732:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002734:	4815      	ldr	r0, [pc, #84]	@ (800278c <HAL_UART_MspInit+0x2a0>)
 8002736:	f001 f92d 	bl	8003994 <HAL_DMA_Init>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <HAL_UART_MspInit+0x258>
      Error_Handler();
 8002740:	f7ff f9ca 	bl	8001ad8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	4a11      	ldr	r2, [pc, #68]	@ (800278c <HAL_UART_MspInit+0x2a0>)
 8002748:	639a      	str	r2, [r3, #56]	@ 0x38
 800274a:	4a10      	ldr	r2, [pc, #64]	@ (800278c <HAL_UART_MspInit+0x2a0>)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 8002750:	2200      	movs	r2, #0
 8002752:	2103      	movs	r1, #3
 8002754:	2026      	movs	r0, #38	@ 0x26
 8002756:	f001 f8e6 	bl	8003926 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800275a:	2026      	movs	r0, #38	@ 0x26
 800275c:	f001 f8ff 	bl	800395e <HAL_NVIC_EnableIRQ>
}
 8002760:	e0af      	b.n	80028c2 <HAL_UART_MspInit+0x3d6>
 8002762:	bf00      	nop
 8002764:	40011000 	.word	0x40011000
 8002768:	40023800 	.word	0x40023800
 800276c:	40020000 	.word	0x40020000
 8002770:	20000974 	.word	0x20000974
 8002774:	40026440 	.word	0x40026440
 8002778:	200009d4 	.word	0x200009d4
 800277c:	400264b8 	.word	0x400264b8
 8002780:	40004400 	.word	0x40004400
 8002784:	20000a34 	.word	0x20000a34
 8002788:	40026088 	.word	0x40026088
 800278c:	20000a94 	.word	0x20000a94
 8002790:	400260a0 	.word	0x400260a0
  else if(uartHandle->Instance==USART3)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a4c      	ldr	r2, [pc, #304]	@ (80028cc <HAL_UART_MspInit+0x3e0>)
 800279a:	4293      	cmp	r3, r2
 800279c:	f040 8091 	bne.w	80028c2 <HAL_UART_MspInit+0x3d6>
    __HAL_RCC_USART3_CLK_ENABLE();
 80027a0:	2300      	movs	r3, #0
 80027a2:	613b      	str	r3, [r7, #16]
 80027a4:	4b4a      	ldr	r3, [pc, #296]	@ (80028d0 <HAL_UART_MspInit+0x3e4>)
 80027a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a8:	4a49      	ldr	r2, [pc, #292]	@ (80028d0 <HAL_UART_MspInit+0x3e4>)
 80027aa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80027b0:	4b47      	ldr	r3, [pc, #284]	@ (80028d0 <HAL_UART_MspInit+0x3e4>)
 80027b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027b8:	613b      	str	r3, [r7, #16]
 80027ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027bc:	2300      	movs	r3, #0
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	4b43      	ldr	r3, [pc, #268]	@ (80028d0 <HAL_UART_MspInit+0x3e4>)
 80027c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c4:	4a42      	ldr	r2, [pc, #264]	@ (80028d0 <HAL_UART_MspInit+0x3e4>)
 80027c6:	f043 0302 	orr.w	r3, r3, #2
 80027ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80027cc:	4b40      	ldr	r3, [pc, #256]	@ (80028d0 <HAL_UART_MspInit+0x3e4>)
 80027ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d0:	f003 0302 	and.w	r3, r3, #2
 80027d4:	60fb      	str	r3, [r7, #12]
 80027d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80027d8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80027dc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027de:	2302      	movs	r3, #2
 80027e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e2:	2300      	movs	r3, #0
 80027e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027e6:	2303      	movs	r3, #3
 80027e8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80027ea:	2307      	movs	r3, #7
 80027ec:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027f2:	4619      	mov	r1, r3
 80027f4:	4837      	ldr	r0, [pc, #220]	@ (80028d4 <HAL_UART_MspInit+0x3e8>)
 80027f6:	f001 fccf 	bl	8004198 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80027fa:	4b37      	ldr	r3, [pc, #220]	@ (80028d8 <HAL_UART_MspInit+0x3ec>)
 80027fc:	4a37      	ldr	r2, [pc, #220]	@ (80028dc <HAL_UART_MspInit+0x3f0>)
 80027fe:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002800:	4b35      	ldr	r3, [pc, #212]	@ (80028d8 <HAL_UART_MspInit+0x3ec>)
 8002802:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002806:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002808:	4b33      	ldr	r3, [pc, #204]	@ (80028d8 <HAL_UART_MspInit+0x3ec>)
 800280a:	2200      	movs	r2, #0
 800280c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800280e:	4b32      	ldr	r3, [pc, #200]	@ (80028d8 <HAL_UART_MspInit+0x3ec>)
 8002810:	2200      	movs	r2, #0
 8002812:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002814:	4b30      	ldr	r3, [pc, #192]	@ (80028d8 <HAL_UART_MspInit+0x3ec>)
 8002816:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800281a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800281c:	4b2e      	ldr	r3, [pc, #184]	@ (80028d8 <HAL_UART_MspInit+0x3ec>)
 800281e:	2200      	movs	r2, #0
 8002820:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002822:	4b2d      	ldr	r3, [pc, #180]	@ (80028d8 <HAL_UART_MspInit+0x3ec>)
 8002824:	2200      	movs	r2, #0
 8002826:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002828:	4b2b      	ldr	r3, [pc, #172]	@ (80028d8 <HAL_UART_MspInit+0x3ec>)
 800282a:	2200      	movs	r2, #0
 800282c:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800282e:	4b2a      	ldr	r3, [pc, #168]	@ (80028d8 <HAL_UART_MspInit+0x3ec>)
 8002830:	2200      	movs	r2, #0
 8002832:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002834:	4b28      	ldr	r3, [pc, #160]	@ (80028d8 <HAL_UART_MspInit+0x3ec>)
 8002836:	2200      	movs	r2, #0
 8002838:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800283a:	4827      	ldr	r0, [pc, #156]	@ (80028d8 <HAL_UART_MspInit+0x3ec>)
 800283c:	f001 f8aa 	bl	8003994 <HAL_DMA_Init>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <HAL_UART_MspInit+0x35e>
      Error_Handler();
 8002846:	f7ff f947 	bl	8001ad8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a22      	ldr	r2, [pc, #136]	@ (80028d8 <HAL_UART_MspInit+0x3ec>)
 800284e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002850:	4a21      	ldr	r2, [pc, #132]	@ (80028d8 <HAL_UART_MspInit+0x3ec>)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8002856:	4b22      	ldr	r3, [pc, #136]	@ (80028e0 <HAL_UART_MspInit+0x3f4>)
 8002858:	4a22      	ldr	r2, [pc, #136]	@ (80028e4 <HAL_UART_MspInit+0x3f8>)
 800285a:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 800285c:	4b20      	ldr	r3, [pc, #128]	@ (80028e0 <HAL_UART_MspInit+0x3f4>)
 800285e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002862:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002864:	4b1e      	ldr	r3, [pc, #120]	@ (80028e0 <HAL_UART_MspInit+0x3f4>)
 8002866:	2240      	movs	r2, #64	@ 0x40
 8002868:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800286a:	4b1d      	ldr	r3, [pc, #116]	@ (80028e0 <HAL_UART_MspInit+0x3f4>)
 800286c:	2200      	movs	r2, #0
 800286e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002870:	4b1b      	ldr	r3, [pc, #108]	@ (80028e0 <HAL_UART_MspInit+0x3f4>)
 8002872:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002876:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002878:	4b19      	ldr	r3, [pc, #100]	@ (80028e0 <HAL_UART_MspInit+0x3f4>)
 800287a:	2200      	movs	r2, #0
 800287c:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800287e:	4b18      	ldr	r3, [pc, #96]	@ (80028e0 <HAL_UART_MspInit+0x3f4>)
 8002880:	2200      	movs	r2, #0
 8002882:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002884:	4b16      	ldr	r3, [pc, #88]	@ (80028e0 <HAL_UART_MspInit+0x3f4>)
 8002886:	2200      	movs	r2, #0
 8002888:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800288a:	4b15      	ldr	r3, [pc, #84]	@ (80028e0 <HAL_UART_MspInit+0x3f4>)
 800288c:	2200      	movs	r2, #0
 800288e:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002890:	4b13      	ldr	r3, [pc, #76]	@ (80028e0 <HAL_UART_MspInit+0x3f4>)
 8002892:	2200      	movs	r2, #0
 8002894:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002896:	4812      	ldr	r0, [pc, #72]	@ (80028e0 <HAL_UART_MspInit+0x3f4>)
 8002898:	f001 f87c 	bl	8003994 <HAL_DMA_Init>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <HAL_UART_MspInit+0x3ba>
      Error_Handler();
 80028a2:	f7ff f919 	bl	8001ad8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a0d      	ldr	r2, [pc, #52]	@ (80028e0 <HAL_UART_MspInit+0x3f4>)
 80028aa:	639a      	str	r2, [r3, #56]	@ 0x38
 80028ac:	4a0c      	ldr	r2, [pc, #48]	@ (80028e0 <HAL_UART_MspInit+0x3f4>)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80028b2:	2200      	movs	r2, #0
 80028b4:	2100      	movs	r1, #0
 80028b6:	2027      	movs	r0, #39	@ 0x27
 80028b8:	f001 f835 	bl	8003926 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80028bc:	2027      	movs	r0, #39	@ 0x27
 80028be:	f001 f84e 	bl	800395e <HAL_NVIC_EnableIRQ>
}
 80028c2:	bf00      	nop
 80028c4:	3738      	adds	r7, #56	@ 0x38
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	40004800 	.word	0x40004800
 80028d0:	40023800 	.word	0x40023800
 80028d4:	40020400 	.word	0x40020400
 80028d8:	20000af4 	.word	0x20000af4
 80028dc:	40026028 	.word	0x40026028
 80028e0:	20000b54 	.word	0x20000b54
 80028e4:	40026058 	.word	0x40026058

080028e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80028e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002920 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80028ec:	f7ff fa86 	bl	8001dfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80028f0:	480c      	ldr	r0, [pc, #48]	@ (8002924 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80028f2:	490d      	ldr	r1, [pc, #52]	@ (8002928 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80028f4:	4a0d      	ldr	r2, [pc, #52]	@ (800292c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80028f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028f8:	e002      	b.n	8002900 <LoopCopyDataInit>

080028fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028fe:	3304      	adds	r3, #4

08002900 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002900:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002902:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002904:	d3f9      	bcc.n	80028fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002906:	4a0a      	ldr	r2, [pc, #40]	@ (8002930 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002908:	4c0a      	ldr	r4, [pc, #40]	@ (8002934 <LoopFillZerobss+0x22>)
  movs r3, #0
 800290a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800290c:	e001      	b.n	8002912 <LoopFillZerobss>

0800290e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800290e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002910:	3204      	adds	r2, #4

08002912 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002912:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002914:	d3fb      	bcc.n	800290e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002916:	f006 fcdd 	bl	80092d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800291a:	f7fe fceb 	bl	80012f4 <main>
  bx  lr    
 800291e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002920:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002924:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002928:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 800292c:	0800dd8c 	.word	0x0800dd8c
  ldr r2, =_sbss
 8002930:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8002934:	20001190 	.word	0x20001190

08002938 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002938:	e7fe      	b.n	8002938 <ADC_IRQHandler>

0800293a <PID_Angle_init>:
#include "Angle_PID.h"

void PID_Angle_init(PID_Angle *pid,float target_val,float Kp,float Ki,float Kd)
{
 800293a:	b480      	push	{r7}
 800293c:	b087      	sub	sp, #28
 800293e:	af00      	add	r7, sp, #0
 8002940:	6178      	str	r0, [r7, #20]
 8002942:	ed87 0a04 	vstr	s0, [r7, #16]
 8002946:	edc7 0a03 	vstr	s1, [r7, #12]
 800294a:	ed87 1a02 	vstr	s2, [r7, #8]
 800294e:	edc7 1a01 	vstr	s3, [r7, #4]
	pid->target_val=target_val;
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	693a      	ldr	r2, [r7, #16]
 8002956:	619a      	str	r2, [r3, #24]
	pid->Kp = Kp;
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	68fa      	ldr	r2, [r7, #12]
 800295c:	601a      	str	r2, [r3, #0]
	pid->Ki = Ki;
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	68ba      	ldr	r2, [r7, #8]
 8002962:	605a      	str	r2, [r3, #4]
	pid->Kd = Kd;
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	609a      	str	r2, [r3, #8]


}
 800296a:	bf00      	nop
 800296c:	371c      	adds	r7, #28
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
	...

08002978 <PID_Angle_realize>:


void PID_Angle_realize(PID_Angle *pid, float CurrentAngle) {
 8002978:	b480      	push	{r7}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	ed87 0a00 	vstr	s0, [r7]
    // 1. 计算当前误差
    pid->Error = pid->target_val - CurrentAngle;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	ed93 7a06 	vldr	s14, [r3, #24]
 800298a:	edd7 7a00 	vldr	s15, [r7]
 800298e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	edc3 7a03 	vstr	s15, [r3, #12]

    // 2. 计算积分项 (带积分限幅，防止积分饱和)
    pid->Integral += pid->Error;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	ed93 7a05 	vldr	s14, [r3, #20]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	edd3 7a03 	vldr	s15, [r3, #12]
 80029a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	edc3 7a05 	vstr	s15, [r3, #20]
    if (pid->Integral > 300) pid->Integral = 300;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	edd3 7a05 	vldr	s15, [r3, #20]
 80029b4:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8002a7c <PID_Angle_realize+0x104>
 80029b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029c0:	dd02      	ble.n	80029c8 <PID_Angle_realize+0x50>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a2e      	ldr	r2, [pc, #184]	@ (8002a80 <PID_Angle_realize+0x108>)
 80029c6:	615a      	str	r2, [r3, #20]
    if (pid->Integral < -300) pid->Integral = -300;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	edd3 7a05 	vldr	s15, [r3, #20]
 80029ce:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8002a84 <PID_Angle_realize+0x10c>
 80029d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029da:	d502      	bpl.n	80029e2 <PID_Angle_realize+0x6a>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4a2a      	ldr	r2, [pc, #168]	@ (8002a88 <PID_Angle_realize+0x110>)
 80029e0:	615a      	str	r2, [r3, #20]

    // 3. 计算微分项
    float derivative = pid->Error - pid->LastError;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	ed93 7a03 	vldr	s14, [r3, #12]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	edd3 7a04 	vldr	s15, [r3, #16]
 80029ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029f2:	edc7 7a03 	vstr	s15, [r7, #12]

    // 4. 计算总输出
    pid->output_val = (pid->Kp * pid->Error) +
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	ed93 7a00 	vldr	s14, [r3]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	edd3 7a03 	vldr	s15, [r3, #12]
 8002a02:	ee27 7a27 	vmul.f32	s14, s14, s15
                  (pid->Ki * pid->Integral) +
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	edd3 6a01 	vldr	s13, [r3, #4]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	edd3 7a05 	vldr	s15, [r3, #20]
 8002a12:	ee66 7aa7 	vmul.f32	s15, s13, s15
    pid->output_val = (pid->Kp * pid->Error) +
 8002a16:	ee37 7a27 	vadd.f32	s14, s14, s15
                  (pid->Kd * derivative);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	edd3 6a02 	vldr	s13, [r3, #8]
 8002a20:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a24:	ee66 7aa7 	vmul.f32	s15, s13, s15
                  (pid->Ki * pid->Integral) +
 8002a28:	ee77 7a27 	vadd.f32	s15, s14, s15
    pid->output_val = (pid->Kp * pid->Error) +
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	edc3 7a07 	vstr	s15, [r3, #28]
    if (pid->output_val > 500) pid->output_val = 500;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	edd3 7a07 	vldr	s15, [r3, #28]
 8002a38:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8002a8c <PID_Angle_realize+0x114>
 8002a3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a44:	dd02      	ble.n	8002a4c <PID_Angle_realize+0xd4>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a11      	ldr	r2, [pc, #68]	@ (8002a90 <PID_Angle_realize+0x118>)
 8002a4a:	61da      	str	r2, [r3, #28]
    if (pid->output_val < -500) pid->output_val = -500;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	edd3 7a07 	vldr	s15, [r3, #28]
 8002a52:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8002a94 <PID_Angle_realize+0x11c>
 8002a56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a5e:	d502      	bpl.n	8002a66 <PID_Angle_realize+0xee>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4a0d      	ldr	r2, [pc, #52]	@ (8002a98 <PID_Angle_realize+0x120>)
 8002a64:	61da      	str	r2, [r3, #28]
    // 5. 更新上次误差
    pid->LastError = pid->Error;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	68da      	ldr	r2, [r3, #12]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	611a      	str	r2, [r3, #16]
}
 8002a6e:	bf00      	nop
 8002a70:	3714      	adds	r7, #20
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	43960000 	.word	0x43960000
 8002a80:	43960000 	.word	0x43960000
 8002a84:	c3960000 	.word	0xc3960000
 8002a88:	c3960000 	.word	0xc3960000
 8002a8c:	43fa0000 	.word	0x43fa0000
 8002a90:	43fa0000 	.word	0x43fa0000
 8002a94:	c3fa0000 	.word	0xc3fa0000
 8002a98:	c3fa0000 	.word	0xc3fa0000

08002a9c <PID_Trace_init>:
uint8_t out5,out4,out3,out2,out1=0;



void PID_Trace_init(PID_Trace *pid,float target_val,float Kp,float Ki,float Kd)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b087      	sub	sp, #28
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6178      	str	r0, [r7, #20]
 8002aa4:	ed87 0a04 	vstr	s0, [r7, #16]
 8002aa8:	edc7 0a03 	vstr	s1, [r7, #12]
 8002aac:	ed87 1a02 	vstr	s2, [r7, #8]
 8002ab0:	edc7 1a01 	vstr	s3, [r7, #4]
	pid->target_val=target_val;
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	693a      	ldr	r2, [r7, #16]
 8002ab8:	619a      	str	r2, [r3, #24]
	pid->Kp = Kp;
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	68fa      	ldr	r2, [r7, #12]
 8002abe:	601a      	str	r2, [r3, #0]
	pid->Ki = Ki;
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	68ba      	ldr	r2, [r7, #8]
 8002ac4:	605a      	str	r2, [r3, #4]
	pid->Kd = Kd;
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	609a      	str	r2, [r3, #8]


}
 8002acc:	bf00      	nop
 8002ace:	371c      	adds	r7, #28
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <Trace_error>:


float Trace_error(void) {
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
//    out4 = Read_GPIO(GPIOE, out4_Pin);
//    out3 = Read_GPIO(GPIOE, out3_Pin);
//    out2 = Read_GPIO(GPIOE, out2_Pin);
//    out1 = Read_GPIO(GPIOE, out1_Pin);

    float Error = (-2.0f * out5) + (-1.0f * out4) + (0.0f * out3) + (1.0f * out2) + (2.0f * out1);
 8002ade:	4b1a      	ldr	r3, [pc, #104]	@ (8002b48 <Trace_error+0x70>)
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	ee07 3a90 	vmov	s15, r3
 8002ae6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002aea:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8002aee:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002af2:	4b16      	ldr	r3, [pc, #88]	@ (8002b4c <Trace_error+0x74>)
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	ee07 3a90 	vmov	s15, r3
 8002afa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002afe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b02:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8002b50 <Trace_error+0x78>
 8002b06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002b0a:	4b12      	ldr	r3, [pc, #72]	@ (8002b54 <Trace_error+0x7c>)
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	ee07 3a90 	vmov	s15, r3
 8002b12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b1a:	4b0f      	ldr	r3, [pc, #60]	@ (8002b58 <Trace_error+0x80>)
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	ee07 3a90 	vmov	s15, r3
 8002b22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b26:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002b2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b2e:	edc7 7a01 	vstr	s15, [r7, #4]
    return Error;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	ee07 3a90 	vmov	s15, r3

}
 8002b38:	eeb0 0a67 	vmov.f32	s0, s15
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	20000bb4 	.word	0x20000bb4
 8002b4c:	20000bb5 	.word	0x20000bb5
 8002b50:	00000000 	.word	0x00000000
 8002b54:	20000bb6 	.word	0x20000bb6
 8002b58:	20000bb7 	.word	0x20000bb7

08002b5c <PID_Trace_realize>:


void PID_Trace_realize(PID_Trace *pid, float CurrentValue) {
 8002b5c:	b480      	push	{r7}
 8002b5e:	b085      	sub	sp, #20
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	ed87 0a00 	vstr	s0, [r7]
    // 1. 计算当前误差
    pid->Error = pid->target_val - CurrentValue;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	ed93 7a06 	vldr	s14, [r3, #24]
 8002b6e:	edd7 7a00 	vldr	s15, [r7]
 8002b72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	edc3 7a03 	vstr	s15, [r3, #12]

    // 2. 计算积分项 (带积分限幅，防止积分饱和)
    pid->Integral += pid->Error;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	ed93 7a05 	vldr	s14, [r3, #20]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	edd3 7a03 	vldr	s15, [r3, #12]
 8002b88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	edc3 7a05 	vstr	s15, [r3, #20]
    if (pid->Integral > 500) pid->Integral = 500;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	edd3 7a05 	vldr	s15, [r3, #20]
 8002b98:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8002c60 <PID_Trace_realize+0x104>
 8002b9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ba4:	dd02      	ble.n	8002bac <PID_Trace_realize+0x50>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a2e      	ldr	r2, [pc, #184]	@ (8002c64 <PID_Trace_realize+0x108>)
 8002baa:	615a      	str	r2, [r3, #20]
    if (pid->Integral < -500) pid->Integral = -500;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	edd3 7a05 	vldr	s15, [r3, #20]
 8002bb2:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8002c68 <PID_Trace_realize+0x10c>
 8002bb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bbe:	d502      	bpl.n	8002bc6 <PID_Trace_realize+0x6a>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4a2a      	ldr	r2, [pc, #168]	@ (8002c6c <PID_Trace_realize+0x110>)
 8002bc4:	615a      	str	r2, [r3, #20]

    // 3. 计算微分项
    float derivative = pid->Error - pid->LastError;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	ed93 7a03 	vldr	s14, [r3, #12]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	edd3 7a04 	vldr	s15, [r3, #16]
 8002bd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bd6:	edc7 7a03 	vstr	s15, [r7, #12]

    // 4. 计算总输出
    pid->output_val = (pid->Kp * pid->Error) +
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	ed93 7a00 	vldr	s14, [r3]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	edd3 7a03 	vldr	s15, [r3, #12]
 8002be6:	ee27 7a27 	vmul.f32	s14, s14, s15
                  (pid->Ki * pid->Integral) +
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	edd3 6a01 	vldr	s13, [r3, #4]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	edd3 7a05 	vldr	s15, [r3, #20]
 8002bf6:	ee66 7aa7 	vmul.f32	s15, s13, s15
    pid->output_val = (pid->Kp * pid->Error) +
 8002bfa:	ee37 7a27 	vadd.f32	s14, s14, s15
                  (pid->Kd * derivative);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	edd3 6a02 	vldr	s13, [r3, #8]
 8002c04:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c08:	ee66 7aa7 	vmul.f32	s15, s13, s15
                  (pid->Ki * pid->Integral) +
 8002c0c:	ee77 7a27 	vadd.f32	s15, s14, s15
    pid->output_val = (pid->Kp * pid->Error) +
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	edc3 7a07 	vstr	s15, [r3, #28]
    if (pid->output_val > 500) pid->output_val = 500;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	edd3 7a07 	vldr	s15, [r3, #28]
 8002c1c:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8002c60 <PID_Trace_realize+0x104>
 8002c20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c28:	dd02      	ble.n	8002c30 <PID_Trace_realize+0xd4>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a0d      	ldr	r2, [pc, #52]	@ (8002c64 <PID_Trace_realize+0x108>)
 8002c2e:	61da      	str	r2, [r3, #28]
    if (pid->output_val < -500) pid->output_val = -500;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	edd3 7a07 	vldr	s15, [r3, #28]
 8002c36:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8002c68 <PID_Trace_realize+0x10c>
 8002c3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c42:	d502      	bpl.n	8002c4a <PID_Trace_realize+0xee>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	4a09      	ldr	r2, [pc, #36]	@ (8002c6c <PID_Trace_realize+0x110>)
 8002c48:	61da      	str	r2, [r3, #28]
    // 5. 更新上次误差
    pid->LastError = pid->Error;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	68da      	ldr	r2, [r3, #12]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	611a      	str	r2, [r3, #16]
}
 8002c52:	bf00      	nop
 8002c54:	3714      	adds	r7, #20
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	43fa0000 	.word	0x43fa0000
 8002c64:	43fa0000 	.word	0x43fa0000
 8002c68:	c3fa0000 	.word	0xc3fa0000
 8002c6c:	c3fa0000 	.word	0xc3fa0000

08002c70 <OLED_Send>:
 * @param len 要发送的数据长度
 * @return None
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他平台时应根据实际情况修改此函数
 */
void OLED_Send(uint8_t *data, uint8_t len)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af02      	add	r7, sp, #8
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	460b      	mov	r3, r1
 8002c7a:	70fb      	strb	r3, [r7, #3]
  HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, data, len, HAL_MAX_DELAY);
 8002c7c:	78fb      	ldrb	r3, [r7, #3]
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	f04f 32ff 	mov.w	r2, #4294967295
 8002c84:	9200      	str	r2, [sp, #0]
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	2178      	movs	r1, #120	@ 0x78
 8002c8a:	4803      	ldr	r0, [pc, #12]	@ (8002c98 <OLED_Send+0x28>)
 8002c8c:	f001 fd7e 	bl	800478c <HAL_I2C_Master_Transmit>
}
 8002c90:	bf00      	nop
 8002c92:	3708      	adds	r7, #8
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	20000210 	.word	0x20000210

08002c9c <OLED_SendCmd>:

/**
 * @brief 向OLED发送指令
 */
void OLED_SendCmd(uint8_t cmd)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	71fb      	strb	r3, [r7, #7]
  static uint8_t sendBuffer[2] = {0};
  sendBuffer[1] = cmd;
 8002ca6:	4a05      	ldr	r2, [pc, #20]	@ (8002cbc <OLED_SendCmd+0x20>)
 8002ca8:	79fb      	ldrb	r3, [r7, #7]
 8002caa:	7053      	strb	r3, [r2, #1]
  OLED_Send(sendBuffer, 2);
 8002cac:	2102      	movs	r1, #2
 8002cae:	4803      	ldr	r0, [pc, #12]	@ (8002cbc <OLED_SendCmd+0x20>)
 8002cb0:	f7ff ffde 	bl	8002c70 <OLED_Send>
}
 8002cb4:	bf00      	nop
 8002cb6:	3708      	adds	r7, #8
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	20000fb8 	.word	0x20000fb8

08002cc0 <OLED_Init>:
/**
 * @brief 初始化OLED (SSD1306)
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_Init()
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  OLED_SendCmd(0xAE); /*关闭显示 display off*/
 8002cc4:	20ae      	movs	r0, #174	@ 0xae
 8002cc6:	f7ff ffe9 	bl	8002c9c <OLED_SendCmd>

  OLED_SendCmd(0x20);
 8002cca:	2020      	movs	r0, #32
 8002ccc:	f7ff ffe6 	bl	8002c9c <OLED_SendCmd>
  OLED_SendCmd(0x10);
 8002cd0:	2010      	movs	r0, #16
 8002cd2:	f7ff ffe3 	bl	8002c9c <OLED_SendCmd>

  OLED_SendCmd(0xB0);
 8002cd6:	20b0      	movs	r0, #176	@ 0xb0
 8002cd8:	f7ff ffe0 	bl	8002c9c <OLED_SendCmd>

  OLED_SendCmd(0xC8);
 8002cdc:	20c8      	movs	r0, #200	@ 0xc8
 8002cde:	f7ff ffdd 	bl	8002c9c <OLED_SendCmd>

  OLED_SendCmd(0x00);
 8002ce2:	2000      	movs	r0, #0
 8002ce4:	f7ff ffda 	bl	8002c9c <OLED_SendCmd>
  OLED_SendCmd(0x10);
 8002ce8:	2010      	movs	r0, #16
 8002cea:	f7ff ffd7 	bl	8002c9c <OLED_SendCmd>

  OLED_SendCmd(0x40);
 8002cee:	2040      	movs	r0, #64	@ 0x40
 8002cf0:	f7ff ffd4 	bl	8002c9c <OLED_SendCmd>

  OLED_SendCmd(0x81);
 8002cf4:	2081      	movs	r0, #129	@ 0x81
 8002cf6:	f7ff ffd1 	bl	8002c9c <OLED_SendCmd>

  OLED_SendCmd(0xDF);
 8002cfa:	20df      	movs	r0, #223	@ 0xdf
 8002cfc:	f7ff ffce 	bl	8002c9c <OLED_SendCmd>
  OLED_SendCmd(0xA1);
 8002d00:	20a1      	movs	r0, #161	@ 0xa1
 8002d02:	f7ff ffcb 	bl	8002c9c <OLED_SendCmd>

  OLED_SendCmd(0xA6);
 8002d06:	20a6      	movs	r0, #166	@ 0xa6
 8002d08:	f7ff ffc8 	bl	8002c9c <OLED_SendCmd>
  OLED_SendCmd(0xA8);
 8002d0c:	20a8      	movs	r0, #168	@ 0xa8
 8002d0e:	f7ff ffc5 	bl	8002c9c <OLED_SendCmd>

  OLED_SendCmd(0x3F);
 8002d12:	203f      	movs	r0, #63	@ 0x3f
 8002d14:	f7ff ffc2 	bl	8002c9c <OLED_SendCmd>

  OLED_SendCmd(0xA4);
 8002d18:	20a4      	movs	r0, #164	@ 0xa4
 8002d1a:	f7ff ffbf 	bl	8002c9c <OLED_SendCmd>

  OLED_SendCmd(0xD3);
 8002d1e:	20d3      	movs	r0, #211	@ 0xd3
 8002d20:	f7ff ffbc 	bl	8002c9c <OLED_SendCmd>
  OLED_SendCmd(0x00);
 8002d24:	2000      	movs	r0, #0
 8002d26:	f7ff ffb9 	bl	8002c9c <OLED_SendCmd>

  OLED_SendCmd(0xD5);
 8002d2a:	20d5      	movs	r0, #213	@ 0xd5
 8002d2c:	f7ff ffb6 	bl	8002c9c <OLED_SendCmd>
  OLED_SendCmd(0xF0);
 8002d30:	20f0      	movs	r0, #240	@ 0xf0
 8002d32:	f7ff ffb3 	bl	8002c9c <OLED_SendCmd>

  OLED_SendCmd(0xD9);
 8002d36:	20d9      	movs	r0, #217	@ 0xd9
 8002d38:	f7ff ffb0 	bl	8002c9c <OLED_SendCmd>
  OLED_SendCmd(0x22);
 8002d3c:	2022      	movs	r0, #34	@ 0x22
 8002d3e:	f7ff ffad 	bl	8002c9c <OLED_SendCmd>

  OLED_SendCmd(0xDA);
 8002d42:	20da      	movs	r0, #218	@ 0xda
 8002d44:	f7ff ffaa 	bl	8002c9c <OLED_SendCmd>
  OLED_SendCmd(0x12);
 8002d48:	2012      	movs	r0, #18
 8002d4a:	f7ff ffa7 	bl	8002c9c <OLED_SendCmd>

  OLED_SendCmd(0xDB);
 8002d4e:	20db      	movs	r0, #219	@ 0xdb
 8002d50:	f7ff ffa4 	bl	8002c9c <OLED_SendCmd>
  OLED_SendCmd(0x20);
 8002d54:	2020      	movs	r0, #32
 8002d56:	f7ff ffa1 	bl	8002c9c <OLED_SendCmd>

  OLED_SendCmd(0x8D);
 8002d5a:	208d      	movs	r0, #141	@ 0x8d
 8002d5c:	f7ff ff9e 	bl	8002c9c <OLED_SendCmd>
  OLED_SendCmd(0x14);
 8002d60:	2014      	movs	r0, #20
 8002d62:	f7ff ff9b 	bl	8002c9c <OLED_SendCmd>

  OLED_NewFrame();
 8002d66:	f000 f807 	bl	8002d78 <OLED_NewFrame>
  OLED_ShowFrame();
 8002d6a:	f000 f811 	bl	8002d90 <OLED_ShowFrame>

  OLED_SendCmd(0xAF); /*开启显示 display ON*/
 8002d6e:	20af      	movs	r0, #175	@ 0xaf
 8002d70:	f7ff ff94 	bl	8002c9c <OLED_SendCmd>
}
 8002d74:	bf00      	nop
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <OLED_NewFrame>:

/**
 * @brief 清空显存 绘制新的一帧
 */
void OLED_NewFrame()
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0
  memset(OLED_GRAM, 0, sizeof(OLED_GRAM));
 8002d7c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d80:	2100      	movs	r1, #0
 8002d82:	4802      	ldr	r0, [pc, #8]	@ (8002d8c <OLED_NewFrame+0x14>)
 8002d84:	f006 fa4d 	bl	8009222 <memset>
}
 8002d88:	bf00      	nop
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	20000bb8 	.word	0x20000bb8

08002d90 <OLED_ShowFrame>:
/**
 * @brief 将当前显存显示到屏幕上
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_ShowFrame()
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
  static uint8_t sendBuffer[OLED_COLUMN + 1];
  sendBuffer[0] = 0x40;
 8002d96:	4b15      	ldr	r3, [pc, #84]	@ (8002dec <OLED_ShowFrame+0x5c>)
 8002d98:	2240      	movs	r2, #64	@ 0x40
 8002d9a:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < OLED_PAGE; i++)
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	71fb      	strb	r3, [r7, #7]
 8002da0:	e01b      	b.n	8002dda <OLED_ShowFrame+0x4a>
  {
    OLED_SendCmd(0xB0 + i); // 设置页地址
 8002da2:	79fb      	ldrb	r3, [r7, #7]
 8002da4:	3b50      	subs	r3, #80	@ 0x50
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7ff ff77 	bl	8002c9c <OLED_SendCmd>
    OLED_SendCmd(0x00);     // 设置列地址低4位
 8002dae:	2000      	movs	r0, #0
 8002db0:	f7ff ff74 	bl	8002c9c <OLED_SendCmd>
    OLED_SendCmd(0x10);     // 设置列地址高4位
 8002db4:	2010      	movs	r0, #16
 8002db6:	f7ff ff71 	bl	8002c9c <OLED_SendCmd>
    memcpy(sendBuffer + 1, OLED_GRAM[i], OLED_COLUMN);
 8002dba:	480d      	ldr	r0, [pc, #52]	@ (8002df0 <OLED_ShowFrame+0x60>)
 8002dbc:	79fb      	ldrb	r3, [r7, #7]
 8002dbe:	01db      	lsls	r3, r3, #7
 8002dc0:	4a0c      	ldr	r2, [pc, #48]	@ (8002df4 <OLED_ShowFrame+0x64>)
 8002dc2:	4413      	add	r3, r2
 8002dc4:	2280      	movs	r2, #128	@ 0x80
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	f006 faab 	bl	8009322 <memcpy>
    OLED_Send(sendBuffer, OLED_COLUMN + 1);
 8002dcc:	2181      	movs	r1, #129	@ 0x81
 8002dce:	4807      	ldr	r0, [pc, #28]	@ (8002dec <OLED_ShowFrame+0x5c>)
 8002dd0:	f7ff ff4e 	bl	8002c70 <OLED_Send>
  for (uint8_t i = 0; i < OLED_PAGE; i++)
 8002dd4:	79fb      	ldrb	r3, [r7, #7]
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	71fb      	strb	r3, [r7, #7]
 8002dda:	79fb      	ldrb	r3, [r7, #7]
 8002ddc:	2b07      	cmp	r3, #7
 8002dde:	d9e0      	bls.n	8002da2 <OLED_ShowFrame+0x12>
  }
}
 8002de0:	bf00      	nop
 8002de2:	bf00      	nop
 8002de4:	3708      	adds	r7, #8
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	20000fbc 	.word	0x20000fbc
 8002df0:	20000fbd 	.word	0x20000fbd
 8002df4:	20000bb8 	.word	0x20000bb8

08002df8 <OLED_SetByte_Fine>:
 * @note 此函数将显存中的某一字节的第start位到第end位设置为与data相同
 * @note start和end的范围为0-7, start必须小于等于end
 * @note 此函数与OLED_SetByte_Fine的区别在于此函数只能设置显存中的某一真实字节
 */
void OLED_SetByte_Fine(uint8_t page, uint8_t column, uint8_t data, uint8_t start, uint8_t end, OLED_ColorMode color)
{
 8002df8:	b490      	push	{r4, r7}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	4604      	mov	r4, r0
 8002e00:	4608      	mov	r0, r1
 8002e02:	4611      	mov	r1, r2
 8002e04:	461a      	mov	r2, r3
 8002e06:	4623      	mov	r3, r4
 8002e08:	71fb      	strb	r3, [r7, #7]
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	71bb      	strb	r3, [r7, #6]
 8002e0e:	460b      	mov	r3, r1
 8002e10:	717b      	strb	r3, [r7, #5]
 8002e12:	4613      	mov	r3, r2
 8002e14:	713b      	strb	r3, [r7, #4]
  static uint8_t temp;
  if (page >= OLED_PAGE || column >= OLED_COLUMN)
 8002e16:	79fb      	ldrb	r3, [r7, #7]
 8002e18:	2b07      	cmp	r3, #7
 8002e1a:	d85f      	bhi.n	8002edc <OLED_SetByte_Fine+0xe4>
 8002e1c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	db5b      	blt.n	8002edc <OLED_SetByte_Fine+0xe4>
    return;
  if (color)
 8002e24:	7d3b      	ldrb	r3, [r7, #20]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d002      	beq.n	8002e30 <OLED_SetByte_Fine+0x38>
    data = ~data;
 8002e2a:	797b      	ldrb	r3, [r7, #5]
 8002e2c:	43db      	mvns	r3, r3
 8002e2e:	717b      	strb	r3, [r7, #5]

  temp = data | (0xff << (end + 1)) | (0xff >> (8 - start));
 8002e30:	7c3b      	ldrb	r3, [r7, #16]
 8002e32:	3301      	adds	r3, #1
 8002e34:	22ff      	movs	r2, #255	@ 0xff
 8002e36:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3a:	b25a      	sxtb	r2, r3
 8002e3c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	b25a      	sxtb	r2, r3
 8002e44:	793b      	ldrb	r3, [r7, #4]
 8002e46:	f1c3 0308 	rsb	r3, r3, #8
 8002e4a:	21ff      	movs	r1, #255	@ 0xff
 8002e4c:	fa41 f303 	asr.w	r3, r1, r3
 8002e50:	b25b      	sxtb	r3, r3
 8002e52:	4313      	orrs	r3, r2
 8002e54:	b25b      	sxtb	r3, r3
 8002e56:	b2da      	uxtb	r2, r3
 8002e58:	4b23      	ldr	r3, [pc, #140]	@ (8002ee8 <OLED_SetByte_Fine+0xf0>)
 8002e5a:	701a      	strb	r2, [r3, #0]
  OLED_GRAM[page][column] &= temp;
 8002e5c:	79fa      	ldrb	r2, [r7, #7]
 8002e5e:	79bb      	ldrb	r3, [r7, #6]
 8002e60:	4922      	ldr	r1, [pc, #136]	@ (8002eec <OLED_SetByte_Fine+0xf4>)
 8002e62:	01d2      	lsls	r2, r2, #7
 8002e64:	440a      	add	r2, r1
 8002e66:	4413      	add	r3, r2
 8002e68:	7818      	ldrb	r0, [r3, #0]
 8002e6a:	4b1f      	ldr	r3, [pc, #124]	@ (8002ee8 <OLED_SetByte_Fine+0xf0>)
 8002e6c:	7819      	ldrb	r1, [r3, #0]
 8002e6e:	79fa      	ldrb	r2, [r7, #7]
 8002e70:	79bb      	ldrb	r3, [r7, #6]
 8002e72:	4001      	ands	r1, r0
 8002e74:	b2c8      	uxtb	r0, r1
 8002e76:	491d      	ldr	r1, [pc, #116]	@ (8002eec <OLED_SetByte_Fine+0xf4>)
 8002e78:	01d2      	lsls	r2, r2, #7
 8002e7a:	440a      	add	r2, r1
 8002e7c:	4413      	add	r3, r2
 8002e7e:	4602      	mov	r2, r0
 8002e80:	701a      	strb	r2, [r3, #0]
  temp = data & ~(0xff << (end + 1)) & ~(0xff >> (8 - start));
 8002e82:	7c3b      	ldrb	r3, [r7, #16]
 8002e84:	3301      	adds	r3, #1
 8002e86:	22ff      	movs	r2, #255	@ 0xff
 8002e88:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8c:	b25b      	sxtb	r3, r3
 8002e8e:	43db      	mvns	r3, r3
 8002e90:	b25a      	sxtb	r2, r3
 8002e92:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002e96:	4013      	ands	r3, r2
 8002e98:	b25a      	sxtb	r2, r3
 8002e9a:	793b      	ldrb	r3, [r7, #4]
 8002e9c:	f1c3 0308 	rsb	r3, r3, #8
 8002ea0:	f06f 01ff 	mvn.w	r1, #255	@ 0xff
 8002ea4:	fa41 f303 	asr.w	r3, r1, r3
 8002ea8:	b25b      	sxtb	r3, r3
 8002eaa:	4013      	ands	r3, r2
 8002eac:	b25b      	sxtb	r3, r3
 8002eae:	b2da      	uxtb	r2, r3
 8002eb0:	4b0d      	ldr	r3, [pc, #52]	@ (8002ee8 <OLED_SetByte_Fine+0xf0>)
 8002eb2:	701a      	strb	r2, [r3, #0]
  OLED_GRAM[page][column] |= temp;
 8002eb4:	79fa      	ldrb	r2, [r7, #7]
 8002eb6:	79bb      	ldrb	r3, [r7, #6]
 8002eb8:	490c      	ldr	r1, [pc, #48]	@ (8002eec <OLED_SetByte_Fine+0xf4>)
 8002eba:	01d2      	lsls	r2, r2, #7
 8002ebc:	440a      	add	r2, r1
 8002ebe:	4413      	add	r3, r2
 8002ec0:	7818      	ldrb	r0, [r3, #0]
 8002ec2:	4b09      	ldr	r3, [pc, #36]	@ (8002ee8 <OLED_SetByte_Fine+0xf0>)
 8002ec4:	7819      	ldrb	r1, [r3, #0]
 8002ec6:	79fa      	ldrb	r2, [r7, #7]
 8002ec8:	79bb      	ldrb	r3, [r7, #6]
 8002eca:	4301      	orrs	r1, r0
 8002ecc:	b2c8      	uxtb	r0, r1
 8002ece:	4907      	ldr	r1, [pc, #28]	@ (8002eec <OLED_SetByte_Fine+0xf4>)
 8002ed0:	01d2      	lsls	r2, r2, #7
 8002ed2:	440a      	add	r2, r1
 8002ed4:	4413      	add	r3, r2
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	701a      	strb	r2, [r3, #0]
 8002eda:	e000      	b.n	8002ede <OLED_SetByte_Fine+0xe6>
    return;
 8002edc:	bf00      	nop
  // 使用OLED_SetPixel实现
  // for (uint8_t i = start; i <= end; i++) {
  //   OLED_SetPixel(column, page * 8 + i, !((data >> i) & 0x01));
  // }
}
 8002ede:	3708      	adds	r7, #8
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bc90      	pop	{r4, r7}
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	2000103d 	.word	0x2000103d
 8002eec:	20000bb8 	.word	0x20000bb8

08002ef0 <OLED_SetBits_Fine>:
 * @note 此函数将显存中从(x,y)开始向下数len位设置为与data相同
 * @note len的范围为1-8
 * @note 此函数与OLED_SetByte_Fine的区别在于此函数的横坐标和纵坐标是以像素为单位的, 可能出现跨两个真实字节的情况(跨页)
 */
void OLED_SetBits_Fine(uint8_t x, uint8_t y, uint8_t data, uint8_t len, OLED_ColorMode color)
{
 8002ef0:	b5b0      	push	{r4, r5, r7, lr}
 8002ef2:	b086      	sub	sp, #24
 8002ef4:	af02      	add	r7, sp, #8
 8002ef6:	4604      	mov	r4, r0
 8002ef8:	4608      	mov	r0, r1
 8002efa:	4611      	mov	r1, r2
 8002efc:	461a      	mov	r2, r3
 8002efe:	4623      	mov	r3, r4
 8002f00:	71fb      	strb	r3, [r7, #7]
 8002f02:	4603      	mov	r3, r0
 8002f04:	71bb      	strb	r3, [r7, #6]
 8002f06:	460b      	mov	r3, r1
 8002f08:	717b      	strb	r3, [r7, #5]
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	713b      	strb	r3, [r7, #4]
  uint8_t page = y / 8;
 8002f0e:	79bb      	ldrb	r3, [r7, #6]
 8002f10:	08db      	lsrs	r3, r3, #3
 8002f12:	73fb      	strb	r3, [r7, #15]
  uint8_t bit = y % 8;
 8002f14:	79bb      	ldrb	r3, [r7, #6]
 8002f16:	f003 0307 	and.w	r3, r3, #7
 8002f1a:	73bb      	strb	r3, [r7, #14]
  if (bit + len > 8)
 8002f1c:	7bba      	ldrb	r2, [r7, #14]
 8002f1e:	793b      	ldrb	r3, [r7, #4]
 8002f20:	4413      	add	r3, r2
 8002f22:	2b08      	cmp	r3, #8
 8002f24:	dd29      	ble.n	8002f7a <OLED_SetBits_Fine+0x8a>
  {
    OLED_SetByte_Fine(page, x, data << bit, bit, 7, color);
 8002f26:	797a      	ldrb	r2, [r7, #5]
 8002f28:	7bbb      	ldrb	r3, [r7, #14]
 8002f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2e:	b2da      	uxtb	r2, r3
 8002f30:	7bbc      	ldrb	r4, [r7, #14]
 8002f32:	79f9      	ldrb	r1, [r7, #7]
 8002f34:	7bf8      	ldrb	r0, [r7, #15]
 8002f36:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002f3a:	9301      	str	r3, [sp, #4]
 8002f3c:	2307      	movs	r3, #7
 8002f3e:	9300      	str	r3, [sp, #0]
 8002f40:	4623      	mov	r3, r4
 8002f42:	f7ff ff59 	bl	8002df8 <OLED_SetByte_Fine>
    OLED_SetByte_Fine(page + 1, x, data >> (8 - bit), 0, len + bit - 1 - 8, color);
 8002f46:	7bfb      	ldrb	r3, [r7, #15]
 8002f48:	3301      	adds	r3, #1
 8002f4a:	b2d8      	uxtb	r0, r3
 8002f4c:	797a      	ldrb	r2, [r7, #5]
 8002f4e:	7bbb      	ldrb	r3, [r7, #14]
 8002f50:	f1c3 0308 	rsb	r3, r3, #8
 8002f54:	fa42 f303 	asr.w	r3, r2, r3
 8002f58:	b2dc      	uxtb	r4, r3
 8002f5a:	793a      	ldrb	r2, [r7, #4]
 8002f5c:	7bbb      	ldrb	r3, [r7, #14]
 8002f5e:	4413      	add	r3, r2
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	3b09      	subs	r3, #9
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	79f9      	ldrb	r1, [r7, #7]
 8002f68:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002f6c:	9201      	str	r2, [sp, #4]
 8002f6e:	9300      	str	r3, [sp, #0]
 8002f70:	2300      	movs	r3, #0
 8002f72:	4622      	mov	r2, r4
 8002f74:	f7ff ff40 	bl	8002df8 <OLED_SetByte_Fine>
  }
  // 使用OLED_SetPixel实现
  // for (uint8_t i = 0; i < len; i++) {
  //   OLED_SetPixel(x, y + i, !((data >> i) & 0x01));
  // }
}
 8002f78:	e015      	b.n	8002fa6 <OLED_SetBits_Fine+0xb6>
    OLED_SetByte_Fine(page, x, data << bit, bit, bit + len - 1, color);
 8002f7a:	797a      	ldrb	r2, [r7, #5]
 8002f7c:	7bbb      	ldrb	r3, [r7, #14]
 8002f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f82:	b2dc      	uxtb	r4, r3
 8002f84:	7bba      	ldrb	r2, [r7, #14]
 8002f86:	793b      	ldrb	r3, [r7, #4]
 8002f88:	4413      	add	r3, r2
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	3b01      	subs	r3, #1
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	7bbd      	ldrb	r5, [r7, #14]
 8002f92:	79f9      	ldrb	r1, [r7, #7]
 8002f94:	7bf8      	ldrb	r0, [r7, #15]
 8002f96:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002f9a:	9201      	str	r2, [sp, #4]
 8002f9c:	9300      	str	r3, [sp, #0]
 8002f9e:	462b      	mov	r3, r5
 8002fa0:	4622      	mov	r2, r4
 8002fa2:	f7ff ff29 	bl	8002df8 <OLED_SetByte_Fine>
}
 8002fa6:	bf00      	nop
 8002fa8:	3710      	adds	r7, #16
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bdb0      	pop	{r4, r5, r7, pc}

08002fae <OLED_SetBits>:
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始向下数8位设置为与data相同
 * @note 此函数与OLED_SetByte的区别在于此函数的横坐标和纵坐标是以像素为单位的, 可能出现跨两个真实字节的情况(跨页)
 */
void OLED_SetBits(uint8_t x, uint8_t y, uint8_t data, OLED_ColorMode color)
{
 8002fae:	b590      	push	{r4, r7, lr}
 8002fb0:	b087      	sub	sp, #28
 8002fb2:	af02      	add	r7, sp, #8
 8002fb4:	4604      	mov	r4, r0
 8002fb6:	4608      	mov	r0, r1
 8002fb8:	4611      	mov	r1, r2
 8002fba:	461a      	mov	r2, r3
 8002fbc:	4623      	mov	r3, r4
 8002fbe:	71fb      	strb	r3, [r7, #7]
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	71bb      	strb	r3, [r7, #6]
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	717b      	strb	r3, [r7, #5]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	713b      	strb	r3, [r7, #4]
  uint8_t page = y / 8;
 8002fcc:	79bb      	ldrb	r3, [r7, #6]
 8002fce:	08db      	lsrs	r3, r3, #3
 8002fd0:	73fb      	strb	r3, [r7, #15]
  uint8_t bit = y % 8;
 8002fd2:	79bb      	ldrb	r3, [r7, #6]
 8002fd4:	f003 0307 	and.w	r3, r3, #7
 8002fd8:	73bb      	strb	r3, [r7, #14]
  OLED_SetByte_Fine(page, x, data << bit, bit, 7, color);
 8002fda:	797a      	ldrb	r2, [r7, #5]
 8002fdc:	7bbb      	ldrb	r3, [r7, #14]
 8002fde:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe2:	b2da      	uxtb	r2, r3
 8002fe4:	7bbc      	ldrb	r4, [r7, #14]
 8002fe6:	79f9      	ldrb	r1, [r7, #7]
 8002fe8:	7bf8      	ldrb	r0, [r7, #15]
 8002fea:	793b      	ldrb	r3, [r7, #4]
 8002fec:	9301      	str	r3, [sp, #4]
 8002fee:	2307      	movs	r3, #7
 8002ff0:	9300      	str	r3, [sp, #0]
 8002ff2:	4623      	mov	r3, r4
 8002ff4:	f7ff ff00 	bl	8002df8 <OLED_SetByte_Fine>
  if (bit)
 8002ff8:	7bbb      	ldrb	r3, [r7, #14]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d014      	beq.n	8003028 <OLED_SetBits+0x7a>
  {
    OLED_SetByte_Fine(page + 1, x, data >> (8 - bit), 0, bit - 1, color);
 8002ffe:	7bfb      	ldrb	r3, [r7, #15]
 8003000:	3301      	adds	r3, #1
 8003002:	b2d8      	uxtb	r0, r3
 8003004:	797a      	ldrb	r2, [r7, #5]
 8003006:	7bbb      	ldrb	r3, [r7, #14]
 8003008:	f1c3 0308 	rsb	r3, r3, #8
 800300c:	fa42 f303 	asr.w	r3, r2, r3
 8003010:	b2dc      	uxtb	r4, r3
 8003012:	7bbb      	ldrb	r3, [r7, #14]
 8003014:	3b01      	subs	r3, #1
 8003016:	b2db      	uxtb	r3, r3
 8003018:	79f9      	ldrb	r1, [r7, #7]
 800301a:	793a      	ldrb	r2, [r7, #4]
 800301c:	9201      	str	r2, [sp, #4]
 800301e:	9300      	str	r3, [sp, #0]
 8003020:	2300      	movs	r3, #0
 8003022:	4622      	mov	r2, r4
 8003024:	f7ff fee8 	bl	8002df8 <OLED_SetByte_Fine>
  }
}
 8003028:	bf00      	nop
 800302a:	3714      	adds	r7, #20
 800302c:	46bd      	mov	sp, r7
 800302e:	bd90      	pop	{r4, r7, pc}

08003030 <OLED_SetBlock>:
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始的w*h个像素设置为data中的数据
 * @note data的数据应该采用列行式排列
 */
void OLED_SetBlock(uint8_t x, uint8_t y, const uint8_t *data, uint8_t w, uint8_t h, OLED_ColorMode color)
{
 8003030:	b590      	push	{r4, r7, lr}
 8003032:	b087      	sub	sp, #28
 8003034:	af02      	add	r7, sp, #8
 8003036:	603a      	str	r2, [r7, #0]
 8003038:	461a      	mov	r2, r3
 800303a:	4603      	mov	r3, r0
 800303c:	71fb      	strb	r3, [r7, #7]
 800303e:	460b      	mov	r3, r1
 8003040:	71bb      	strb	r3, [r7, #6]
 8003042:	4613      	mov	r3, r2
 8003044:	717b      	strb	r3, [r7, #5]
  uint8_t fullRow = h / 8; // 完整的行数
 8003046:	f897 3020 	ldrb.w	r3, [r7, #32]
 800304a:	08db      	lsrs	r3, r3, #3
 800304c:	733b      	strb	r3, [r7, #12]
  uint8_t partBit = h % 8; // 不完整的字节中的有效位数
 800304e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003052:	f003 0307 	and.w	r3, r3, #7
 8003056:	72fb      	strb	r3, [r7, #11]
  for (uint8_t i = 0; i < w; i++)
 8003058:	2300      	movs	r3, #0
 800305a:	73fb      	strb	r3, [r7, #15]
 800305c:	e025      	b.n	80030aa <OLED_SetBlock+0x7a>
  {
    for (uint8_t j = 0; j < fullRow; j++)
 800305e:	2300      	movs	r3, #0
 8003060:	73bb      	strb	r3, [r7, #14]
 8003062:	e01b      	b.n	800309c <OLED_SetBlock+0x6c>
    {
      OLED_SetBits(x + i, y + j * 8, data[i + j * w], color);
 8003064:	79fa      	ldrb	r2, [r7, #7]
 8003066:	7bfb      	ldrb	r3, [r7, #15]
 8003068:	4413      	add	r3, r2
 800306a:	b2d8      	uxtb	r0, r3
 800306c:	7bbb      	ldrb	r3, [r7, #14]
 800306e:	00db      	lsls	r3, r3, #3
 8003070:	b2da      	uxtb	r2, r3
 8003072:	79bb      	ldrb	r3, [r7, #6]
 8003074:	4413      	add	r3, r2
 8003076:	b2dc      	uxtb	r4, r3
 8003078:	7bfa      	ldrb	r2, [r7, #15]
 800307a:	7bbb      	ldrb	r3, [r7, #14]
 800307c:	7979      	ldrb	r1, [r7, #5]
 800307e:	fb01 f303 	mul.w	r3, r1, r3
 8003082:	4413      	add	r3, r2
 8003084:	461a      	mov	r2, r3
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	4413      	add	r3, r2
 800308a:	781a      	ldrb	r2, [r3, #0]
 800308c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003090:	4621      	mov	r1, r4
 8003092:	f7ff ff8c 	bl	8002fae <OLED_SetBits>
    for (uint8_t j = 0; j < fullRow; j++)
 8003096:	7bbb      	ldrb	r3, [r7, #14]
 8003098:	3301      	adds	r3, #1
 800309a:	73bb      	strb	r3, [r7, #14]
 800309c:	7bba      	ldrb	r2, [r7, #14]
 800309e:	7b3b      	ldrb	r3, [r7, #12]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d3df      	bcc.n	8003064 <OLED_SetBlock+0x34>
  for (uint8_t i = 0; i < w; i++)
 80030a4:	7bfb      	ldrb	r3, [r7, #15]
 80030a6:	3301      	adds	r3, #1
 80030a8:	73fb      	strb	r3, [r7, #15]
 80030aa:	7bfa      	ldrb	r2, [r7, #15]
 80030ac:	797b      	ldrb	r3, [r7, #5]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d3d5      	bcc.n	800305e <OLED_SetBlock+0x2e>
    }
  }
  if (partBit)
 80030b2:	7afb      	ldrb	r3, [r7, #11]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d028      	beq.n	800310a <OLED_SetBlock+0xda>
  {
    uint16_t fullNum = w * fullRow; // 完整的字节数
 80030b8:	797b      	ldrb	r3, [r7, #5]
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	7b3b      	ldrb	r3, [r7, #12]
 80030be:	b29b      	uxth	r3, r3
 80030c0:	fb12 f303 	smulbb	r3, r2, r3
 80030c4:	813b      	strh	r3, [r7, #8]
    for (uint8_t i = 0; i < w; i++)
 80030c6:	2300      	movs	r3, #0
 80030c8:	737b      	strb	r3, [r7, #13]
 80030ca:	e01a      	b.n	8003102 <OLED_SetBlock+0xd2>
    {
      OLED_SetBits_Fine(x + i, y + (fullRow * 8), data[fullNum + i], partBit, color);
 80030cc:	79fa      	ldrb	r2, [r7, #7]
 80030ce:	7b7b      	ldrb	r3, [r7, #13]
 80030d0:	4413      	add	r3, r2
 80030d2:	b2d8      	uxtb	r0, r3
 80030d4:	7b3b      	ldrb	r3, [r7, #12]
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	b2da      	uxtb	r2, r3
 80030da:	79bb      	ldrb	r3, [r7, #6]
 80030dc:	4413      	add	r3, r2
 80030de:	b2d9      	uxtb	r1, r3
 80030e0:	893a      	ldrh	r2, [r7, #8]
 80030e2:	7b7b      	ldrb	r3, [r7, #13]
 80030e4:	4413      	add	r3, r2
 80030e6:	461a      	mov	r2, r3
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	4413      	add	r3, r2
 80030ec:	781a      	ldrb	r2, [r3, #0]
 80030ee:	7afc      	ldrb	r4, [r7, #11]
 80030f0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80030f4:	9300      	str	r3, [sp, #0]
 80030f6:	4623      	mov	r3, r4
 80030f8:	f7ff fefa 	bl	8002ef0 <OLED_SetBits_Fine>
    for (uint8_t i = 0; i < w; i++)
 80030fc:	7b7b      	ldrb	r3, [r7, #13]
 80030fe:	3301      	adds	r3, #1
 8003100:	737b      	strb	r3, [r7, #13]
 8003102:	7b7a      	ldrb	r2, [r7, #13]
 8003104:	797b      	ldrb	r3, [r7, #5]
 8003106:	429a      	cmp	r2, r3
 8003108:	d3e0      	bcc.n	80030cc <OLED_SetBlock+0x9c>
  //       if (j * 8 + k >= h) break; // 防止越界(不完整的字节
  //       OLED_SetPixel(x + i, y + j * 8 + k, !((data[i + j * w] >> k) & 0x01));
  //     }
  //   }
  // }
}
 800310a:	bf00      	nop
 800310c:	3714      	adds	r7, #20
 800310e:	46bd      	mov	sp, r7
 8003110:	bd90      	pop	{r4, r7, pc}

08003112 <OLED_PrintASCIIChar>:
 * @param ch 字符
 * @param font 字体
 * @param color 颜色
 */
void OLED_PrintASCIIChar(uint8_t x, uint8_t y, char ch, const ASCIIFont *font, OLED_ColorMode color)
{
 8003112:	b5b0      	push	{r4, r5, r7, lr}
 8003114:	b084      	sub	sp, #16
 8003116:	af02      	add	r7, sp, #8
 8003118:	603b      	str	r3, [r7, #0]
 800311a:	4603      	mov	r3, r0
 800311c:	71fb      	strb	r3, [r7, #7]
 800311e:	460b      	mov	r3, r1
 8003120:	71bb      	strb	r3, [r7, #6]
 8003122:	4613      	mov	r3, r2
 8003124:	717b      	strb	r3, [r7, #5]
  OLED_SetBlock(x, y, font->chars + (ch - ' ') * (((font->h + 7) / 8) * font->w), font->w, font->h, color);
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	685a      	ldr	r2, [r3, #4]
 800312a:	797b      	ldrb	r3, [r7, #5]
 800312c:	f1a3 0120 	sub.w	r1, r3, #32
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	3307      	adds	r3, #7
 8003136:	2b00      	cmp	r3, #0
 8003138:	da00      	bge.n	800313c <OLED_PrintASCIIChar+0x2a>
 800313a:	3307      	adds	r3, #7
 800313c:	10db      	asrs	r3, r3, #3
 800313e:	4618      	mov	r0, r3
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	785b      	ldrb	r3, [r3, #1]
 8003144:	fb00 f303 	mul.w	r3, r0, r3
 8003148:	fb01 f303 	mul.w	r3, r1, r3
 800314c:	18d4      	adds	r4, r2, r3
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	785d      	ldrb	r5, [r3, #1]
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	79b9      	ldrb	r1, [r7, #6]
 8003158:	79f8      	ldrb	r0, [r7, #7]
 800315a:	7e3a      	ldrb	r2, [r7, #24]
 800315c:	9201      	str	r2, [sp, #4]
 800315e:	9300      	str	r3, [sp, #0]
 8003160:	462b      	mov	r3, r5
 8003162:	4622      	mov	r2, r4
 8003164:	f7ff ff64 	bl	8003030 <OLED_SetBlock>
}
 8003168:	bf00      	nop
 800316a:	3708      	adds	r7, #8
 800316c:	46bd      	mov	sp, r7
 800316e:	bdb0      	pop	{r4, r5, r7, pc}

08003170 <_OLED_GetUTF8Len>:

/**
 * @brief 获取UTF-8编码的字符长度
 */
uint8_t _OLED_GetUTF8Len(char *string)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  if ((string[0] & 0x80) == 0x00)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	b25b      	sxtb	r3, r3
 800317e:	2b00      	cmp	r3, #0
 8003180:	db01      	blt.n	8003186 <_OLED_GetUTF8Len+0x16>
  {
    return 1;
 8003182:	2301      	movs	r3, #1
 8003184:	e018      	b.n	80031b8 <_OLED_GetUTF8Len+0x48>
  }
  else if ((string[0] & 0xE0) == 0xC0)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800318e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003190:	d101      	bne.n	8003196 <_OLED_GetUTF8Len+0x26>
  {
    return 2;
 8003192:	2302      	movs	r3, #2
 8003194:	e010      	b.n	80031b8 <_OLED_GetUTF8Len+0x48>
  }
  else if ((string[0] & 0xF0) == 0xE0)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800319e:	2be0      	cmp	r3, #224	@ 0xe0
 80031a0:	d101      	bne.n	80031a6 <_OLED_GetUTF8Len+0x36>
  {
    return 3;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e008      	b.n	80031b8 <_OLED_GetUTF8Len+0x48>
  }
  else if ((string[0] & 0xF8) == 0xF0)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 80031ae:	2bf0      	cmp	r3, #240	@ 0xf0
 80031b0:	d101      	bne.n	80031b6 <_OLED_GetUTF8Len+0x46>
  {
    return 4;
 80031b2:	2304      	movs	r3, #4
 80031b4:	e000      	b.n	80031b8 <_OLED_GetUTF8Len+0x48>
  }
  return 0;
 80031b6:	2300      	movs	r3, #0
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <OLED_PrintString>:
 * @note 为保证字符串中的中文会被自动识别并绘制, 需:
 * 1. 编译器字符集设置为UTF-8
 * 2. 使用波特律动LED取模工具生成字模(https://led.baud-dance.com)
 */
void OLED_PrintString(uint8_t x, uint8_t y, char *str, const Font *font, OLED_ColorMode color)
{
 80031c4:	b5b0      	push	{r4, r5, r7, lr}
 80031c6:	b08a      	sub	sp, #40	@ 0x28
 80031c8:	af02      	add	r7, sp, #8
 80031ca:	60ba      	str	r2, [r7, #8]
 80031cc:	607b      	str	r3, [r7, #4]
 80031ce:	4603      	mov	r3, r0
 80031d0:	73fb      	strb	r3, [r7, #15]
 80031d2:	460b      	mov	r3, r1
 80031d4:	73bb      	strb	r3, [r7, #14]
  uint16_t i = 0;                                       // 字符串索引
 80031d6:	2300      	movs	r3, #0
 80031d8:	83fb      	strh	r3, [r7, #30]
  uint8_t oneLen = (((font->h + 7) / 8) * font->w) + 4; // 一个字模占多少字节
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	3307      	adds	r3, #7
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	da00      	bge.n	80031e6 <OLED_PrintString+0x22>
 80031e4:	3307      	adds	r3, #7
 80031e6:	10db      	asrs	r3, r3, #3
 80031e8:	b2da      	uxtb	r2, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	785b      	ldrb	r3, [r3, #1]
 80031ee:	fb12 f303 	smulbb	r3, r2, r3
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	3304      	adds	r3, #4
 80031f6:	76fb      	strb	r3, [r7, #27]
  uint8_t found;                                        // 是否找到字模
  uint8_t utf8Len;                                      // UTF-8编码长度
  uint8_t *head;                                        // 字模头指针
  while (str[i])
 80031f8:	e07d      	b.n	80032f6 <OLED_PrintString+0x132>
  {
    found = 0;
 80031fa:	2300      	movs	r3, #0
 80031fc:	777b      	strb	r3, [r7, #29]
    utf8Len = _OLED_GetUTF8Len(str + i);
 80031fe:	8bfb      	ldrh	r3, [r7, #30]
 8003200:	68ba      	ldr	r2, [r7, #8]
 8003202:	4413      	add	r3, r2
 8003204:	4618      	mov	r0, r3
 8003206:	f7ff ffb3 	bl	8003170 <_OLED_GetUTF8Len>
 800320a:	4603      	mov	r3, r0
 800320c:	76bb      	strb	r3, [r7, #26]
    if (utf8Len == 0)
 800320e:	7ebb      	ldrb	r3, [r7, #26]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d078      	beq.n	8003306 <OLED_PrintString+0x142>
      break; // 有问题的UTF-8编码

    // 寻找字符  TODO 优化查找算法, 二分查找或者hash
    for (uint8_t j = 0; j < font->len; j++)
 8003214:	2300      	movs	r3, #0
 8003216:	773b      	strb	r3, [r7, #28]
 8003218:	e032      	b.n	8003280 <OLED_PrintString+0xbc>
    {
      head = (uint8_t *)(font->chars) + (j * oneLen);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	7f3a      	ldrb	r2, [r7, #28]
 8003220:	7ef9      	ldrb	r1, [r7, #27]
 8003222:	fb01 f202 	mul.w	r2, r1, r2
 8003226:	4413      	add	r3, r2
 8003228:	617b      	str	r3, [r7, #20]
      if (memcmp(str + i, head, utf8Len) == 0)
 800322a:	8bfb      	ldrh	r3, [r7, #30]
 800322c:	68ba      	ldr	r2, [r7, #8]
 800322e:	4413      	add	r3, r2
 8003230:	7eba      	ldrb	r2, [r7, #26]
 8003232:	6979      	ldr	r1, [r7, #20]
 8003234:	4618      	mov	r0, r3
 8003236:	f005 ffe4 	bl	8009202 <memcmp>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d11c      	bne.n	800327a <OLED_PrintString+0xb6>
      {
        OLED_SetBlock(x, y, head + 4, font->w, font->h, color);
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	1d1c      	adds	r4, r3, #4
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	785d      	ldrb	r5, [r3, #1]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	7bb9      	ldrb	r1, [r7, #14]
 800324e:	7bf8      	ldrb	r0, [r7, #15]
 8003250:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8003254:	9201      	str	r2, [sp, #4]
 8003256:	9300      	str	r3, [sp, #0]
 8003258:	462b      	mov	r3, r5
 800325a:	4622      	mov	r2, r4
 800325c:	f7ff fee8 	bl	8003030 <OLED_SetBlock>
        // 移动光标
        x += font->w;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	785a      	ldrb	r2, [r3, #1]
 8003264:	7bfb      	ldrb	r3, [r7, #15]
 8003266:	4413      	add	r3, r2
 8003268:	73fb      	strb	r3, [r7, #15]
        i += utf8Len;
 800326a:	7ebb      	ldrb	r3, [r7, #26]
 800326c:	b29a      	uxth	r2, r3
 800326e:	8bfb      	ldrh	r3, [r7, #30]
 8003270:	4413      	add	r3, r2
 8003272:	83fb      	strh	r3, [r7, #30]
        found = 1;
 8003274:	2301      	movs	r3, #1
 8003276:	777b      	strb	r3, [r7, #29]
        break;
 8003278:	e007      	b.n	800328a <OLED_PrintString+0xc6>
    for (uint8_t j = 0; j < font->len; j++)
 800327a:	7f3b      	ldrb	r3, [r7, #28]
 800327c:	3301      	adds	r3, #1
 800327e:	773b      	strb	r3, [r7, #28]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	7a1b      	ldrb	r3, [r3, #8]
 8003284:	7f3a      	ldrb	r2, [r7, #28]
 8003286:	429a      	cmp	r2, r3
 8003288:	d3c7      	bcc.n	800321a <OLED_PrintString+0x56>
      }
    }

    // 若未找到字模,且为ASCII字符, 则缺省显示ASCII字符
    if (found == 0)
 800328a:	7f7b      	ldrb	r3, [r7, #29]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d132      	bne.n	80032f6 <OLED_PrintString+0x132>
    {
      if (utf8Len == 1)
 8003290:	7ebb      	ldrb	r3, [r7, #26]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d119      	bne.n	80032ca <OLED_PrintString+0x106>
      {
        OLED_PrintASCIIChar(x, y, str[i], font->ascii, color);
 8003296:	8bfb      	ldrh	r3, [r7, #30]
 8003298:	68ba      	ldr	r2, [r7, #8]
 800329a:	4413      	add	r3, r2
 800329c:	781a      	ldrb	r2, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	68dc      	ldr	r4, [r3, #12]
 80032a2:	7bb9      	ldrb	r1, [r7, #14]
 80032a4:	7bf8      	ldrb	r0, [r7, #15]
 80032a6:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80032aa:	9300      	str	r3, [sp, #0]
 80032ac:	4623      	mov	r3, r4
 80032ae:	f7ff ff30 	bl	8003112 <OLED_PrintASCIIChar>
        // 移动光标
        x += font->ascii->w;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	785a      	ldrb	r2, [r3, #1]
 80032b8:	7bfb      	ldrb	r3, [r7, #15]
 80032ba:	4413      	add	r3, r2
 80032bc:	73fb      	strb	r3, [r7, #15]
        i += utf8Len;
 80032be:	7ebb      	ldrb	r3, [r7, #26]
 80032c0:	b29a      	uxth	r2, r3
 80032c2:	8bfb      	ldrh	r3, [r7, #30]
 80032c4:	4413      	add	r3, r2
 80032c6:	83fb      	strh	r3, [r7, #30]
 80032c8:	e015      	b.n	80032f6 <OLED_PrintString+0x132>
      }
      else
      {
        OLED_PrintASCIIChar(x, y, ' ', font->ascii, color);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	68da      	ldr	r2, [r3, #12]
 80032ce:	7bb9      	ldrb	r1, [r7, #14]
 80032d0:	7bf8      	ldrb	r0, [r7, #15]
 80032d2:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80032d6:	9300      	str	r3, [sp, #0]
 80032d8:	4613      	mov	r3, r2
 80032da:	2220      	movs	r2, #32
 80032dc:	f7ff ff19 	bl	8003112 <OLED_PrintASCIIChar>
        x += font->ascii->w;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	785a      	ldrb	r2, [r3, #1]
 80032e6:	7bfb      	ldrb	r3, [r7, #15]
 80032e8:	4413      	add	r3, r2
 80032ea:	73fb      	strb	r3, [r7, #15]
        i += utf8Len;
 80032ec:	7ebb      	ldrb	r3, [r7, #26]
 80032ee:	b29a      	uxth	r2, r3
 80032f0:	8bfb      	ldrh	r3, [r7, #30]
 80032f2:	4413      	add	r3, r2
 80032f4:	83fb      	strh	r3, [r7, #30]
  while (str[i])
 80032f6:	8bfb      	ldrh	r3, [r7, #30]
 80032f8:	68ba      	ldr	r2, [r7, #8]
 80032fa:	4413      	add	r3, r2
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	f47f af7b 	bne.w	80031fa <OLED_PrintString+0x36>
      }
    }
  }
}
 8003304:	e000      	b.n	8003308 <OLED_PrintString+0x144>
      break; // 有问题的UTF-8编码
 8003306:	bf00      	nop
}
 8003308:	bf00      	nop
 800330a:	3720      	adds	r7, #32
 800330c:	46bd      	mov	sp, r7
 800330e:	bdb0      	pop	{r4, r5, r7, pc}

08003310 <Set_motor_pwmL>:
#include "pidspeed.h"

void Set_motor_pwmL(float pwm){
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	ed87 0a01 	vstr	s0, [r7, #4]
	if(pwm<0)
 800331a:	edd7 7a01 	vldr	s15, [r7, #4]
 800331e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003326:	d517      	bpl.n	8003358 <Set_motor_pwmL+0x48>
	{HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, ENABLE);
 8003328:	2201      	movs	r2, #1
 800332a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800332e:	481b      	ldr	r0, [pc, #108]	@ (800339c <Set_motor_pwmL+0x8c>)
 8003330:	f001 f8ce 	bl	80044d0 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, DISABLE);
 8003334:	2200      	movs	r2, #0
 8003336:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800333a:	4818      	ldr	r0, [pc, #96]	@ (800339c <Set_motor_pwmL+0x8c>)
 800333c:	f001 f8c8 	bl	80044d0 <HAL_GPIO_WritePin>
	 __HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,-pwm);
 8003340:	edd7 7a01 	vldr	s15, [r7, #4]
 8003344:	eef1 7a67 	vneg.f32	s15, s15
 8003348:	4b15      	ldr	r3, [pc, #84]	@ (80033a0 <Set_motor_pwmL+0x90>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003350:	ee17 2a90 	vmov	r2, s15
 8003354:	635a      	str	r2, [r3, #52]	@ 0x34
	else if(pwm>=0){
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, DISABLE);
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, ENABLE);
	 __HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,pwm);
	}
}
 8003356:	e01c      	b.n	8003392 <Set_motor_pwmL+0x82>
	else if(pwm>=0){
 8003358:	edd7 7a01 	vldr	s15, [r7, #4]
 800335c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003364:	da00      	bge.n	8003368 <Set_motor_pwmL+0x58>
}
 8003366:	e014      	b.n	8003392 <Set_motor_pwmL+0x82>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, DISABLE);
 8003368:	2200      	movs	r2, #0
 800336a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800336e:	480b      	ldr	r0, [pc, #44]	@ (800339c <Set_motor_pwmL+0x8c>)
 8003370:	f001 f8ae 	bl	80044d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, ENABLE);
 8003374:	2201      	movs	r2, #1
 8003376:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800337a:	4808      	ldr	r0, [pc, #32]	@ (800339c <Set_motor_pwmL+0x8c>)
 800337c:	f001 f8a8 	bl	80044d0 <HAL_GPIO_WritePin>
	 __HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,pwm);
 8003380:	4b07      	ldr	r3, [pc, #28]	@ (80033a0 <Set_motor_pwmL+0x90>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	edd7 7a01 	vldr	s15, [r7, #4]
 8003388:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800338c:	ee17 2a90 	vmov	r2, s15
 8003390:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003392:	bf00      	nop
 8003394:	3708      	adds	r7, #8
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	40020c00 	.word	0x40020c00
 80033a0:	20000854 	.word	0x20000854

080033a4 <Set_motor_pwmR>:

void Set_motor_pwmR(float pwm){
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	ed87 0a01 	vstr	s0, [r7, #4]
	if(pwm<0)
 80033ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80033b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80033b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ba:	d517      	bpl.n	80033ec <Set_motor_pwmR+0x48>
	{HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, DISABLE);
 80033bc:	2200      	movs	r2, #0
 80033be:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80033c2:	481b      	ldr	r0, [pc, #108]	@ (8003430 <Set_motor_pwmR+0x8c>)
 80033c4:	f001 f884 	bl	80044d0 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, ENABLE);
 80033c8:	2201      	movs	r2, #1
 80033ca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80033ce:	4818      	ldr	r0, [pc, #96]	@ (8003430 <Set_motor_pwmR+0x8c>)
 80033d0:	f001 f87e 	bl	80044d0 <HAL_GPIO_WritePin>
	 __HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_2,-pwm);
 80033d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80033d8:	eef1 7a67 	vneg.f32	s15, s15
 80033dc:	4b15      	ldr	r3, [pc, #84]	@ (8003434 <Set_motor_pwmR+0x90>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033e4:	ee17 2a90 	vmov	r2, s15
 80033e8:	639a      	str	r2, [r3, #56]	@ 0x38
	else if(pwm>=0){
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, ENABLE);
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, DISABLE);
	 __HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_2,pwm);
	}
}
 80033ea:	e01c      	b.n	8003426 <Set_motor_pwmR+0x82>
	else if(pwm>=0){
 80033ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80033f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80033f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033f8:	da00      	bge.n	80033fc <Set_motor_pwmR+0x58>
}
 80033fa:	e014      	b.n	8003426 <Set_motor_pwmR+0x82>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, ENABLE);
 80033fc:	2201      	movs	r2, #1
 80033fe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003402:	480b      	ldr	r0, [pc, #44]	@ (8003430 <Set_motor_pwmR+0x8c>)
 8003404:	f001 f864 	bl	80044d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, DISABLE);
 8003408:	2200      	movs	r2, #0
 800340a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800340e:	4808      	ldr	r0, [pc, #32]	@ (8003430 <Set_motor_pwmR+0x8c>)
 8003410:	f001 f85e 	bl	80044d0 <HAL_GPIO_WritePin>
	 __HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_2,pwm);
 8003414:	4b07      	ldr	r3, [pc, #28]	@ (8003434 <Set_motor_pwmR+0x90>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	edd7 7a01 	vldr	s15, [r7, #4]
 800341c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003420:	ee17 2a90 	vmov	r2, s15
 8003424:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8003426:	bf00      	nop
 8003428:	3708      	adds	r7, #8
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	40020c00 	.word	0x40020c00
 8003434:	20000854 	.word	0x20000854

08003438 <Set_motor_speedL>:


/*设置左轮速度值 pid为PID参数结构体
 * speed为期望达到速度
 */
void Set_motor_speedL(PID *pid,float speed){
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	ed87 0a00 	vstr	s0, [r7]
	pid->target_val=speed;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	683a      	ldr	r2, [r7, #0]
 8003448:	601a      	str	r2, [r3, #0]
	Set_motor_pwmL(PosionPID_realize(pid,speednow));
 800344a:	4b0a      	ldr	r3, [pc, #40]	@ (8003474 <Set_motor_speedL+0x3c>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	ee07 3a90 	vmov	s15, r3
 8003452:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003456:	eeb0 0a67 	vmov.f32	s0, s15
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f000 f84a 	bl	80034f4 <PosionPID_realize>
 8003460:	eef0 7a40 	vmov.f32	s15, s0
 8003464:	eeb0 0a67 	vmov.f32	s0, s15
 8003468:	f7ff ff52 	bl	8003310 <Set_motor_pwmL>


}
 800346c:	bf00      	nop
 800346e:	3708      	adds	r7, #8
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	20000718 	.word	0x20000718

08003478 <Set_motor_speedR>:
/*设置右轮速度值 pid为PID参数结构体
 * speed为期望达到速度
 */
void Set_motor_speedR(PID *pid,float speed){
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	ed87 0a00 	vstr	s0, [r7]
	pid->target_val=speed;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	683a      	ldr	r2, [r7, #0]
 8003488:	601a      	str	r2, [r3, #0]
	Set_motor_pwmR(PosionPID_realize(pid,speednow2));
 800348a:	4b0a      	ldr	r3, [pc, #40]	@ (80034b4 <Set_motor_speedR+0x3c>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	ee07 3a90 	vmov	s15, r3
 8003492:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003496:	eeb0 0a67 	vmov.f32	s0, s15
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 f82a 	bl	80034f4 <PosionPID_realize>
 80034a0:	eef0 7a40 	vmov.f32	s15, s0
 80034a4:	eeb0 0a67 	vmov.f32	s0, s15
 80034a8:	f7ff ff7c 	bl	80033a4 <Set_motor_pwmR>

}
 80034ac:	bf00      	nop
 80034ae:	3708      	adds	r7, #8
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	20000720 	.word	0x20000720

080034b8 <PID_param_init>:
  * @brief  PID参数初始化
  *	@note 	无
  * @retval 无
  */
void PID_param_init(PID *pid,float target_val,float Kp,float Ki,float Kd)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b087      	sub	sp, #28
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6178      	str	r0, [r7, #20]
 80034c0:	ed87 0a04 	vstr	s0, [r7, #16]
 80034c4:	edc7 0a03 	vstr	s1, [r7, #12]
 80034c8:	ed87 1a02 	vstr	s2, [r7, #8]
 80034cc:	edc7 1a01 	vstr	s3, [r7, #4]
	pid->target_val=target_val;
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	693a      	ldr	r2, [r7, #16]
 80034d4:	601a      	str	r2, [r3, #0]
	pid->Kp = Kp;
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	68fa      	ldr	r2, [r7, #12]
 80034da:	611a      	str	r2, [r3, #16]
	pid->Ki = Ki;
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	68ba      	ldr	r2, [r7, #8]
 80034e0:	615a      	str	r2, [r3, #20]
	pid->Kd = Kd;
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	619a      	str	r2, [r3, #24]


}
 80034e8:	bf00      	nop
 80034ea:	371c      	adds	r7, #28
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <PosionPID_realize>:
  * @param  actual_val:实际测量值
  *	@note 	无
  * @retval 通过PID计算后的输出
  */
float PosionPID_realize(PID *pid, float actual_val)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	ed87 0a00 	vstr	s0, [r7]
	/*计算目标值与实际值的误差*/
	pid->Error = pid->target_val - actual_val;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	ed93 7a00 	vldr	s14, [r3]
 8003506:	edd7 7a00 	vldr	s15, [r7]
 800350a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	edc3 7a01 	vstr	s15, [r3, #4]
	/*积分项*/
	pid->integral += pid->Error;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	ed93 7a07 	vldr	s14, [r3, #28]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003520:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	edc3 7a07 	vstr	s15, [r3, #28]
	if (pid->integral > 800 / pid->Ki) {
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	ed93 7a07 	vldr	s14, [r3, #28]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	edd3 6a05 	vldr	s13, [r3, #20]
 8003536:	ed9f 6a3d 	vldr	s12, [pc, #244]	@ 800362c <PosionPID_realize+0x138>
 800353a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800353e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003546:	dd0a      	ble.n	800355e <PosionPID_realize+0x6a>
	    pid->integral = 800 / pid->Ki;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	ed93 7a05 	vldr	s14, [r3, #20]
 800354e:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800362c <PosionPID_realize+0x138>
 8003552:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	edc3 7a07 	vstr	s15, [r3, #28]
 800355c:	e018      	b.n	8003590 <PosionPID_realize+0x9c>
	} else if (pid->integral < -800 / pid->Ki) {
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	ed93 7a07 	vldr	s14, [r3, #28]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	edd3 6a05 	vldr	s13, [r3, #20]
 800356a:	ed9f 6a31 	vldr	s12, [pc, #196]	@ 8003630 <PosionPID_realize+0x13c>
 800356e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003572:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800357a:	d509      	bpl.n	8003590 <PosionPID_realize+0x9c>
	    pid->integral = -800 / pid->Ki;}
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	ed93 7a05 	vldr	s14, [r3, #20]
 8003582:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8003630 <PosionPID_realize+0x13c>
 8003586:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	edc3 7a07 	vstr	s15, [r3, #28]
	/*PID算法实现*/
	pid->output_val = pid->Kp * pid->Error +
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	ed93 7a04 	vldr	s14, [r3, #16]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	edd3 7a01 	vldr	s15, [r3, #4]
 800359c:	ee27 7a27 	vmul.f32	s14, s14, s15
	                  pid->Ki * pid->integral +
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	edd3 6a05 	vldr	s13, [r3, #20]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	edd3 7a07 	vldr	s15, [r3, #28]
 80035ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
	pid->output_val = pid->Kp * pid->Error +
 80035b0:	ee37 7a27 	vadd.f32	s14, s14, s15
	                  pid->Kd *(pid->Error -pid->LastError);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	edd3 6a06 	vldr	s13, [r3, #24]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	ed93 6a01 	vldr	s12, [r3, #4]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	edd3 7a02 	vldr	s15, [r3, #8]
 80035c6:	ee76 7a67 	vsub.f32	s15, s12, s15
 80035ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
	                  pid->Ki * pid->integral +
 80035ce:	ee77 7a27 	vadd.f32	s15, s14, s15
	pid->output_val = pid->Kp * pid->Error +
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	edc3 7a08 	vstr	s15, [r3, #32]
    if (pid->output_val > 500) pid->output_val = 500;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	edd3 7a08 	vldr	s15, [r3, #32]
 80035de:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8003634 <PosionPID_realize+0x140>
 80035e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035ea:	dd02      	ble.n	80035f2 <PosionPID_realize+0xfe>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4a12      	ldr	r2, [pc, #72]	@ (8003638 <PosionPID_realize+0x144>)
 80035f0:	621a      	str	r2, [r3, #32]
    if (pid->output_val < -500) pid->output_val = -500;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	edd3 7a08 	vldr	s15, [r3, #32]
 80035f8:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 800363c <PosionPID_realize+0x148>
 80035fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003604:	d502      	bpl.n	800360c <PosionPID_realize+0x118>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a0d      	ldr	r2, [pc, #52]	@ (8003640 <PosionPID_realize+0x14c>)
 800360a:	621a      	str	r2, [r3, #32]
	/*误差传递*/
	pid-> LastError = pid->Error;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685a      	ldr	r2, [r3, #4]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	609a      	str	r2, [r3, #8]



	return pid->output_val;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a1b      	ldr	r3, [r3, #32]
 8003618:	ee07 3a90 	vmov	s15, r3
}
 800361c:	eeb0 0a67 	vmov.f32	s0, s15
 8003620:	370c      	adds	r7, #12
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	44480000 	.word	0x44480000
 8003630:	c4480000 	.word	0xc4480000
 8003634:	43fa0000 	.word	0x43fa0000
 8003638:	43fa0000 	.word	0x43fa0000
 800363c:	c3fa0000 	.word	0xc3fa0000
 8003640:	c3fa0000 	.word	0xc3fa0000

08003644 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003648:	4b0e      	ldr	r3, [pc, #56]	@ (8003684 <HAL_Init+0x40>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a0d      	ldr	r2, [pc, #52]	@ (8003684 <HAL_Init+0x40>)
 800364e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003652:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003654:	4b0b      	ldr	r3, [pc, #44]	@ (8003684 <HAL_Init+0x40>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a0a      	ldr	r2, [pc, #40]	@ (8003684 <HAL_Init+0x40>)
 800365a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800365e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003660:	4b08      	ldr	r3, [pc, #32]	@ (8003684 <HAL_Init+0x40>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a07      	ldr	r2, [pc, #28]	@ (8003684 <HAL_Init+0x40>)
 8003666:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800366a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800366c:	2003      	movs	r0, #3
 800366e:	f000 f94f 	bl	8003910 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003672:	2000      	movs	r0, #0
 8003674:	f000 f808 	bl	8003688 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003678:	f7fe fa34 	bl	8001ae4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	40023c00 	.word	0x40023c00

08003688 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003690:	4b12      	ldr	r3, [pc, #72]	@ (80036dc <HAL_InitTick+0x54>)
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	4b12      	ldr	r3, [pc, #72]	@ (80036e0 <HAL_InitTick+0x58>)
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	4619      	mov	r1, r3
 800369a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800369e:	fbb3 f3f1 	udiv	r3, r3, r1
 80036a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036a6:	4618      	mov	r0, r3
 80036a8:	f000 f967 	bl	800397a <HAL_SYSTICK_Config>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d001      	beq.n	80036b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e00e      	b.n	80036d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2b0f      	cmp	r3, #15
 80036ba:	d80a      	bhi.n	80036d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036bc:	2200      	movs	r2, #0
 80036be:	6879      	ldr	r1, [r7, #4]
 80036c0:	f04f 30ff 	mov.w	r0, #4294967295
 80036c4:	f000 f92f 	bl	8003926 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80036c8:	4a06      	ldr	r2, [pc, #24]	@ (80036e4 <HAL_InitTick+0x5c>)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80036ce:	2300      	movs	r3, #0
 80036d0:	e000      	b.n	80036d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3708      	adds	r7, #8
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	20000020 	.word	0x20000020
 80036e0:	20000028 	.word	0x20000028
 80036e4:	20000024 	.word	0x20000024

080036e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036e8:	b480      	push	{r7}
 80036ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80036ec:	4b06      	ldr	r3, [pc, #24]	@ (8003708 <HAL_IncTick+0x20>)
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	461a      	mov	r2, r3
 80036f2:	4b06      	ldr	r3, [pc, #24]	@ (800370c <HAL_IncTick+0x24>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4413      	add	r3, r2
 80036f8:	4a04      	ldr	r2, [pc, #16]	@ (800370c <HAL_IncTick+0x24>)
 80036fa:	6013      	str	r3, [r2, #0]
}
 80036fc:	bf00      	nop
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	20000028 	.word	0x20000028
 800370c:	20001040 	.word	0x20001040

08003710 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003710:	b480      	push	{r7}
 8003712:	af00      	add	r7, sp, #0
  return uwTick;
 8003714:	4b03      	ldr	r3, [pc, #12]	@ (8003724 <HAL_GetTick+0x14>)
 8003716:	681b      	ldr	r3, [r3, #0]
}
 8003718:	4618      	mov	r0, r3
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	20001040 	.word	0x20001040

08003728 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003730:	f7ff ffee 	bl	8003710 <HAL_GetTick>
 8003734:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003740:	d005      	beq.n	800374e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003742:	4b0a      	ldr	r3, [pc, #40]	@ (800376c <HAL_Delay+0x44>)
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	461a      	mov	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	4413      	add	r3, r2
 800374c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800374e:	bf00      	nop
 8003750:	f7ff ffde 	bl	8003710 <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	429a      	cmp	r2, r3
 800375e:	d8f7      	bhi.n	8003750 <HAL_Delay+0x28>
  {
  }
}
 8003760:	bf00      	nop
 8003762:	bf00      	nop
 8003764:	3710      	adds	r7, #16
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	20000028 	.word	0x20000028

08003770 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003770:	b480      	push	{r7}
 8003772:	b085      	sub	sp, #20
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f003 0307 	and.w	r3, r3, #7
 800377e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003780:	4b0c      	ldr	r3, [pc, #48]	@ (80037b4 <__NVIC_SetPriorityGrouping+0x44>)
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003786:	68ba      	ldr	r2, [r7, #8]
 8003788:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800378c:	4013      	ands	r3, r2
 800378e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003798:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800379c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037a2:	4a04      	ldr	r2, [pc, #16]	@ (80037b4 <__NVIC_SetPriorityGrouping+0x44>)
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	60d3      	str	r3, [r2, #12]
}
 80037a8:	bf00      	nop
 80037aa:	3714      	adds	r7, #20
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr
 80037b4:	e000ed00 	.word	0xe000ed00

080037b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037b8:	b480      	push	{r7}
 80037ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037bc:	4b04      	ldr	r3, [pc, #16]	@ (80037d0 <__NVIC_GetPriorityGrouping+0x18>)
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	0a1b      	lsrs	r3, r3, #8
 80037c2:	f003 0307 	and.w	r3, r3, #7
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr
 80037d0:	e000ed00 	.word	0xe000ed00

080037d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	4603      	mov	r3, r0
 80037dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	db0b      	blt.n	80037fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037e6:	79fb      	ldrb	r3, [r7, #7]
 80037e8:	f003 021f 	and.w	r2, r3, #31
 80037ec:	4907      	ldr	r1, [pc, #28]	@ (800380c <__NVIC_EnableIRQ+0x38>)
 80037ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037f2:	095b      	lsrs	r3, r3, #5
 80037f4:	2001      	movs	r0, #1
 80037f6:	fa00 f202 	lsl.w	r2, r0, r2
 80037fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80037fe:	bf00      	nop
 8003800:	370c      	adds	r7, #12
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	e000e100 	.word	0xe000e100

08003810 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	4603      	mov	r3, r0
 8003818:	6039      	str	r1, [r7, #0]
 800381a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800381c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003820:	2b00      	cmp	r3, #0
 8003822:	db0a      	blt.n	800383a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	b2da      	uxtb	r2, r3
 8003828:	490c      	ldr	r1, [pc, #48]	@ (800385c <__NVIC_SetPriority+0x4c>)
 800382a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800382e:	0112      	lsls	r2, r2, #4
 8003830:	b2d2      	uxtb	r2, r2
 8003832:	440b      	add	r3, r1
 8003834:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003838:	e00a      	b.n	8003850 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	b2da      	uxtb	r2, r3
 800383e:	4908      	ldr	r1, [pc, #32]	@ (8003860 <__NVIC_SetPriority+0x50>)
 8003840:	79fb      	ldrb	r3, [r7, #7]
 8003842:	f003 030f 	and.w	r3, r3, #15
 8003846:	3b04      	subs	r3, #4
 8003848:	0112      	lsls	r2, r2, #4
 800384a:	b2d2      	uxtb	r2, r2
 800384c:	440b      	add	r3, r1
 800384e:	761a      	strb	r2, [r3, #24]
}
 8003850:	bf00      	nop
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr
 800385c:	e000e100 	.word	0xe000e100
 8003860:	e000ed00 	.word	0xe000ed00

08003864 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003864:	b480      	push	{r7}
 8003866:	b089      	sub	sp, #36	@ 0x24
 8003868:	af00      	add	r7, sp, #0
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f003 0307 	and.w	r3, r3, #7
 8003876:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	f1c3 0307 	rsb	r3, r3, #7
 800387e:	2b04      	cmp	r3, #4
 8003880:	bf28      	it	cs
 8003882:	2304      	movcs	r3, #4
 8003884:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	3304      	adds	r3, #4
 800388a:	2b06      	cmp	r3, #6
 800388c:	d902      	bls.n	8003894 <NVIC_EncodePriority+0x30>
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	3b03      	subs	r3, #3
 8003892:	e000      	b.n	8003896 <NVIC_EncodePriority+0x32>
 8003894:	2300      	movs	r3, #0
 8003896:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003898:	f04f 32ff 	mov.w	r2, #4294967295
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	fa02 f303 	lsl.w	r3, r2, r3
 80038a2:	43da      	mvns	r2, r3
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	401a      	ands	r2, r3
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038ac:	f04f 31ff 	mov.w	r1, #4294967295
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	fa01 f303 	lsl.w	r3, r1, r3
 80038b6:	43d9      	mvns	r1, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038bc:	4313      	orrs	r3, r2
         );
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3724      	adds	r7, #36	@ 0x24
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
	...

080038cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	3b01      	subs	r3, #1
 80038d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80038dc:	d301      	bcc.n	80038e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038de:	2301      	movs	r3, #1
 80038e0:	e00f      	b.n	8003902 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038e2:	4a0a      	ldr	r2, [pc, #40]	@ (800390c <SysTick_Config+0x40>)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	3b01      	subs	r3, #1
 80038e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038ea:	210f      	movs	r1, #15
 80038ec:	f04f 30ff 	mov.w	r0, #4294967295
 80038f0:	f7ff ff8e 	bl	8003810 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038f4:	4b05      	ldr	r3, [pc, #20]	@ (800390c <SysTick_Config+0x40>)
 80038f6:	2200      	movs	r2, #0
 80038f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038fa:	4b04      	ldr	r3, [pc, #16]	@ (800390c <SysTick_Config+0x40>)
 80038fc:	2207      	movs	r2, #7
 80038fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3708      	adds	r7, #8
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	e000e010 	.word	0xe000e010

08003910 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f7ff ff29 	bl	8003770 <__NVIC_SetPriorityGrouping>
}
 800391e:	bf00      	nop
 8003920:	3708      	adds	r7, #8
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}

08003926 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003926:	b580      	push	{r7, lr}
 8003928:	b086      	sub	sp, #24
 800392a:	af00      	add	r7, sp, #0
 800392c:	4603      	mov	r3, r0
 800392e:	60b9      	str	r1, [r7, #8]
 8003930:	607a      	str	r2, [r7, #4]
 8003932:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003934:	2300      	movs	r3, #0
 8003936:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003938:	f7ff ff3e 	bl	80037b8 <__NVIC_GetPriorityGrouping>
 800393c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	68b9      	ldr	r1, [r7, #8]
 8003942:	6978      	ldr	r0, [r7, #20]
 8003944:	f7ff ff8e 	bl	8003864 <NVIC_EncodePriority>
 8003948:	4602      	mov	r2, r0
 800394a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800394e:	4611      	mov	r1, r2
 8003950:	4618      	mov	r0, r3
 8003952:	f7ff ff5d 	bl	8003810 <__NVIC_SetPriority>
}
 8003956:	bf00      	nop
 8003958:	3718      	adds	r7, #24
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800395e:	b580      	push	{r7, lr}
 8003960:	b082      	sub	sp, #8
 8003962:	af00      	add	r7, sp, #0
 8003964:	4603      	mov	r3, r0
 8003966:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800396c:	4618      	mov	r0, r3
 800396e:	f7ff ff31 	bl	80037d4 <__NVIC_EnableIRQ>
}
 8003972:	bf00      	nop
 8003974:	3708      	adds	r7, #8
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}

0800397a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800397a:	b580      	push	{r7, lr}
 800397c:	b082      	sub	sp, #8
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f7ff ffa2 	bl	80038cc <SysTick_Config>
 8003988:	4603      	mov	r3, r0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3708      	adds	r7, #8
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
	...

08003994 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b086      	sub	sp, #24
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800399c:	2300      	movs	r3, #0
 800399e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80039a0:	f7ff feb6 	bl	8003710 <HAL_GetTick>
 80039a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d101      	bne.n	80039b0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e099      	b.n	8003ae4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2202      	movs	r2, #2
 80039b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f022 0201 	bic.w	r2, r2, #1
 80039ce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039d0:	e00f      	b.n	80039f2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80039d2:	f7ff fe9d 	bl	8003710 <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	2b05      	cmp	r3, #5
 80039de:	d908      	bls.n	80039f2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2220      	movs	r2, #32
 80039e4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2203      	movs	r2, #3
 80039ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e078      	b.n	8003ae4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0301 	and.w	r3, r3, #1
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d1e8      	bne.n	80039d2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003a08:	697a      	ldr	r2, [r7, #20]
 8003a0a:	4b38      	ldr	r3, [pc, #224]	@ (8003aec <HAL_DMA_Init+0x158>)
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685a      	ldr	r2, [r3, #4]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	691b      	ldr	r3, [r3, #16]
 8003a24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	699b      	ldr	r3, [r3, #24]
 8003a30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a1b      	ldr	r3, [r3, #32]
 8003a3c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a3e:	697a      	ldr	r2, [r7, #20]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a48:	2b04      	cmp	r3, #4
 8003a4a:	d107      	bne.n	8003a5c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a54:	4313      	orrs	r3, r2
 8003a56:	697a      	ldr	r2, [r7, #20]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	697a      	ldr	r2, [r7, #20]
 8003a62:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	695b      	ldr	r3, [r3, #20]
 8003a6a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	f023 0307 	bic.w	r3, r3, #7
 8003a72:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a78:	697a      	ldr	r2, [r7, #20]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a82:	2b04      	cmp	r3, #4
 8003a84:	d117      	bne.n	8003ab6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a8a:	697a      	ldr	r2, [r7, #20]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d00e      	beq.n	8003ab6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f000 fb01 	bl	80040a0 <DMA_CheckFifoParam>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d008      	beq.n	8003ab6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2240      	movs	r2, #64	@ 0x40
 8003aa8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2201      	movs	r2, #1
 8003aae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e016      	b.n	8003ae4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	697a      	ldr	r2, [r7, #20]
 8003abc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 fab8 	bl	8004034 <DMA_CalcBaseAndBitshift>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003acc:	223f      	movs	r2, #63	@ 0x3f
 8003ace:	409a      	lsls	r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2201      	movs	r2, #1
 8003ade:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003ae2:	2300      	movs	r3, #0
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3718      	adds	r7, #24
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	f010803f 	.word	0xf010803f

08003af0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b086      	sub	sp, #24
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	607a      	str	r2, [r7, #4]
 8003afc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003afe:	2300      	movs	r3, #0
 8003b00:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b06:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d101      	bne.n	8003b16 <HAL_DMA_Start_IT+0x26>
 8003b12:	2302      	movs	r3, #2
 8003b14:	e040      	b.n	8003b98 <HAL_DMA_Start_IT+0xa8>
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2201      	movs	r2, #1
 8003b1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d12f      	bne.n	8003b8a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2202      	movs	r2, #2
 8003b2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2200      	movs	r2, #0
 8003b36:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	68b9      	ldr	r1, [r7, #8]
 8003b3e:	68f8      	ldr	r0, [r7, #12]
 8003b40:	f000 fa4a 	bl	8003fd8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b48:	223f      	movs	r2, #63	@ 0x3f
 8003b4a:	409a      	lsls	r2, r3
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f042 0216 	orr.w	r2, r2, #22
 8003b5e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d007      	beq.n	8003b78 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f042 0208 	orr.w	r2, r2, #8
 8003b76:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f042 0201 	orr.w	r2, r2, #1
 8003b86:	601a      	str	r2, [r3, #0]
 8003b88:	e005      	b.n	8003b96 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003b92:	2302      	movs	r3, #2
 8003b94:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003b96:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3718      	adds	r7, #24
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bac:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003bae:	f7ff fdaf 	bl	8003710 <HAL_GetTick>
 8003bb2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d008      	beq.n	8003bd2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2280      	movs	r2, #128	@ 0x80
 8003bc4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e052      	b.n	8003c78 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f022 0216 	bic.w	r2, r2, #22
 8003be0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	695a      	ldr	r2, [r3, #20]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003bf0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d103      	bne.n	8003c02 <HAL_DMA_Abort+0x62>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d007      	beq.n	8003c12 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f022 0208 	bic.w	r2, r2, #8
 8003c10:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f022 0201 	bic.w	r2, r2, #1
 8003c20:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c22:	e013      	b.n	8003c4c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c24:	f7ff fd74 	bl	8003710 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	2b05      	cmp	r3, #5
 8003c30:	d90c      	bls.n	8003c4c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2220      	movs	r2, #32
 8003c36:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2203      	movs	r2, #3
 8003c3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e015      	b.n	8003c78 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0301 	and.w	r3, r3, #1
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d1e4      	bne.n	8003c24 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c5e:	223f      	movs	r2, #63	@ 0x3f
 8003c60:	409a      	lsls	r2, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003c76:	2300      	movs	r3, #0
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3710      	adds	r7, #16
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d004      	beq.n	8003c9e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2280      	movs	r2, #128	@ 0x80
 8003c98:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e00c      	b.n	8003cb8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2205      	movs	r2, #5
 8003ca2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f022 0201 	bic.w	r2, r2, #1
 8003cb4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003cb6:	2300      	movs	r3, #0
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b086      	sub	sp, #24
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003cd0:	4b8e      	ldr	r3, [pc, #568]	@ (8003f0c <HAL_DMA_IRQHandler+0x248>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a8e      	ldr	r2, [pc, #568]	@ (8003f10 <HAL_DMA_IRQHandler+0x24c>)
 8003cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cda:	0a9b      	lsrs	r3, r3, #10
 8003cdc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ce2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cee:	2208      	movs	r2, #8
 8003cf0:	409a      	lsls	r2, r3
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d01a      	beq.n	8003d30 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0304 	and.w	r3, r3, #4
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d013      	beq.n	8003d30 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f022 0204 	bic.w	r2, r2, #4
 8003d16:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d1c:	2208      	movs	r2, #8
 8003d1e:	409a      	lsls	r2, r3
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d28:	f043 0201 	orr.w	r2, r3, #1
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d34:	2201      	movs	r2, #1
 8003d36:	409a      	lsls	r2, r3
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d012      	beq.n	8003d66 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	695b      	ldr	r3, [r3, #20]
 8003d46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00b      	beq.n	8003d66 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d52:	2201      	movs	r2, #1
 8003d54:	409a      	lsls	r2, r3
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d5e:	f043 0202 	orr.w	r2, r3, #2
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d6a:	2204      	movs	r2, #4
 8003d6c:	409a      	lsls	r2, r3
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	4013      	ands	r3, r2
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d012      	beq.n	8003d9c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0302 	and.w	r3, r3, #2
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d00b      	beq.n	8003d9c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d88:	2204      	movs	r2, #4
 8003d8a:	409a      	lsls	r2, r3
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d94:	f043 0204 	orr.w	r2, r3, #4
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003da0:	2210      	movs	r2, #16
 8003da2:	409a      	lsls	r2, r3
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	4013      	ands	r3, r2
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d043      	beq.n	8003e34 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0308 	and.w	r3, r3, #8
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d03c      	beq.n	8003e34 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dbe:	2210      	movs	r2, #16
 8003dc0:	409a      	lsls	r2, r3
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d018      	beq.n	8003e06 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d108      	bne.n	8003df4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d024      	beq.n	8003e34 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	4798      	blx	r3
 8003df2:	e01f      	b.n	8003e34 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d01b      	beq.n	8003e34 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	4798      	blx	r3
 8003e04:	e016      	b.n	8003e34 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d107      	bne.n	8003e24 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f022 0208 	bic.w	r2, r2, #8
 8003e22:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d003      	beq.n	8003e34 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e38:	2220      	movs	r2, #32
 8003e3a:	409a      	lsls	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	4013      	ands	r3, r2
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	f000 808f 	beq.w	8003f64 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0310 	and.w	r3, r3, #16
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	f000 8087 	beq.w	8003f64 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e5a:	2220      	movs	r2, #32
 8003e5c:	409a      	lsls	r2, r3
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	2b05      	cmp	r3, #5
 8003e6c:	d136      	bne.n	8003edc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f022 0216 	bic.w	r2, r2, #22
 8003e7c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	695a      	ldr	r2, [r3, #20]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003e8c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d103      	bne.n	8003e9e <HAL_DMA_IRQHandler+0x1da>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d007      	beq.n	8003eae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f022 0208 	bic.w	r2, r2, #8
 8003eac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eb2:	223f      	movs	r2, #63	@ 0x3f
 8003eb4:	409a      	lsls	r2, r3
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d07e      	beq.n	8003fd0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	4798      	blx	r3
        }
        return;
 8003eda:	e079      	b.n	8003fd0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d01d      	beq.n	8003f26 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d10d      	bne.n	8003f14 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d031      	beq.n	8003f64 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	4798      	blx	r3
 8003f08:	e02c      	b.n	8003f64 <HAL_DMA_IRQHandler+0x2a0>
 8003f0a:	bf00      	nop
 8003f0c:	20000020 	.word	0x20000020
 8003f10:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d023      	beq.n	8003f64 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	4798      	blx	r3
 8003f24:	e01e      	b.n	8003f64 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d10f      	bne.n	8003f54 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f022 0210 	bic.w	r2, r2, #16
 8003f42:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d003      	beq.n	8003f64 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d032      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f70:	f003 0301 	and.w	r3, r3, #1
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d022      	beq.n	8003fbe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2205      	movs	r2, #5
 8003f7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f022 0201 	bic.w	r2, r2, #1
 8003f8e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	3301      	adds	r3, #1
 8003f94:	60bb      	str	r3, [r7, #8]
 8003f96:	697a      	ldr	r2, [r7, #20]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d307      	bcc.n	8003fac <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0301 	and.w	r3, r3, #1
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d1f2      	bne.n	8003f90 <HAL_DMA_IRQHandler+0x2cc>
 8003faa:	e000      	b.n	8003fae <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003fac:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d005      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	4798      	blx	r3
 8003fce:	e000      	b.n	8003fd2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003fd0:	bf00      	nop
    }
  }
}
 8003fd2:	3718      	adds	r7, #24
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b085      	sub	sp, #20
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	607a      	str	r2, [r7, #4]
 8003fe4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003ff4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	683a      	ldr	r2, [r7, #0]
 8003ffc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	2b40      	cmp	r3, #64	@ 0x40
 8004004:	d108      	bne.n	8004018 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68ba      	ldr	r2, [r7, #8]
 8004014:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004016:	e007      	b.n	8004028 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	68ba      	ldr	r2, [r7, #8]
 800401e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	60da      	str	r2, [r3, #12]
}
 8004028:	bf00      	nop
 800402a:	3714      	adds	r7, #20
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004034:	b480      	push	{r7}
 8004036:	b085      	sub	sp, #20
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	b2db      	uxtb	r3, r3
 8004042:	3b10      	subs	r3, #16
 8004044:	4a14      	ldr	r2, [pc, #80]	@ (8004098 <DMA_CalcBaseAndBitshift+0x64>)
 8004046:	fba2 2303 	umull	r2, r3, r2, r3
 800404a:	091b      	lsrs	r3, r3, #4
 800404c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800404e:	4a13      	ldr	r2, [pc, #76]	@ (800409c <DMA_CalcBaseAndBitshift+0x68>)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	4413      	add	r3, r2
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	461a      	mov	r2, r3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2b03      	cmp	r3, #3
 8004060:	d909      	bls.n	8004076 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800406a:	f023 0303 	bic.w	r3, r3, #3
 800406e:	1d1a      	adds	r2, r3, #4
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	659a      	str	r2, [r3, #88]	@ 0x58
 8004074:	e007      	b.n	8004086 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800407e:	f023 0303 	bic.w	r3, r3, #3
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800408a:	4618      	mov	r0, r3
 800408c:	3714      	adds	r7, #20
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr
 8004096:	bf00      	nop
 8004098:	aaaaaaab 	.word	0xaaaaaaab
 800409c:	0800d934 	.word	0x0800d934

080040a0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b085      	sub	sp, #20
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040a8:	2300      	movs	r3, #0
 80040aa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040b0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	699b      	ldr	r3, [r3, #24]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d11f      	bne.n	80040fa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	2b03      	cmp	r3, #3
 80040be:	d856      	bhi.n	800416e <DMA_CheckFifoParam+0xce>
 80040c0:	a201      	add	r2, pc, #4	@ (adr r2, 80040c8 <DMA_CheckFifoParam+0x28>)
 80040c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c6:	bf00      	nop
 80040c8:	080040d9 	.word	0x080040d9
 80040cc:	080040eb 	.word	0x080040eb
 80040d0:	080040d9 	.word	0x080040d9
 80040d4:	0800416f 	.word	0x0800416f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d046      	beq.n	8004172 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040e8:	e043      	b.n	8004172 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ee:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80040f2:	d140      	bne.n	8004176 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040f8:	e03d      	b.n	8004176 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	699b      	ldr	r3, [r3, #24]
 80040fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004102:	d121      	bne.n	8004148 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	2b03      	cmp	r3, #3
 8004108:	d837      	bhi.n	800417a <DMA_CheckFifoParam+0xda>
 800410a:	a201      	add	r2, pc, #4	@ (adr r2, 8004110 <DMA_CheckFifoParam+0x70>)
 800410c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004110:	08004121 	.word	0x08004121
 8004114:	08004127 	.word	0x08004127
 8004118:	08004121 	.word	0x08004121
 800411c:	08004139 	.word	0x08004139
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	73fb      	strb	r3, [r7, #15]
      break;
 8004124:	e030      	b.n	8004188 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800412a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d025      	beq.n	800417e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004136:	e022      	b.n	800417e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800413c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004140:	d11f      	bne.n	8004182 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004146:	e01c      	b.n	8004182 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	2b02      	cmp	r3, #2
 800414c:	d903      	bls.n	8004156 <DMA_CheckFifoParam+0xb6>
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	2b03      	cmp	r3, #3
 8004152:	d003      	beq.n	800415c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004154:	e018      	b.n	8004188 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	73fb      	strb	r3, [r7, #15]
      break;
 800415a:	e015      	b.n	8004188 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004160:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d00e      	beq.n	8004186 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	73fb      	strb	r3, [r7, #15]
      break;
 800416c:	e00b      	b.n	8004186 <DMA_CheckFifoParam+0xe6>
      break;
 800416e:	bf00      	nop
 8004170:	e00a      	b.n	8004188 <DMA_CheckFifoParam+0xe8>
      break;
 8004172:	bf00      	nop
 8004174:	e008      	b.n	8004188 <DMA_CheckFifoParam+0xe8>
      break;
 8004176:	bf00      	nop
 8004178:	e006      	b.n	8004188 <DMA_CheckFifoParam+0xe8>
      break;
 800417a:	bf00      	nop
 800417c:	e004      	b.n	8004188 <DMA_CheckFifoParam+0xe8>
      break;
 800417e:	bf00      	nop
 8004180:	e002      	b.n	8004188 <DMA_CheckFifoParam+0xe8>
      break;   
 8004182:	bf00      	nop
 8004184:	e000      	b.n	8004188 <DMA_CheckFifoParam+0xe8>
      break;
 8004186:	bf00      	nop
    }
  } 
  
  return status; 
 8004188:	7bfb      	ldrb	r3, [r7, #15]
}
 800418a:	4618      	mov	r0, r3
 800418c:	3714      	adds	r7, #20
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop

08004198 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004198:	b480      	push	{r7}
 800419a:	b089      	sub	sp, #36	@ 0x24
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80041a2:	2300      	movs	r3, #0
 80041a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80041a6:	2300      	movs	r3, #0
 80041a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80041aa:	2300      	movs	r3, #0
 80041ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041ae:	2300      	movs	r3, #0
 80041b0:	61fb      	str	r3, [r7, #28]
 80041b2:	e16b      	b.n	800448c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80041b4:	2201      	movs	r2, #1
 80041b6:	69fb      	ldr	r3, [r7, #28]
 80041b8:	fa02 f303 	lsl.w	r3, r2, r3
 80041bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	697a      	ldr	r2, [r7, #20]
 80041c4:	4013      	ands	r3, r2
 80041c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80041c8:	693a      	ldr	r2, [r7, #16]
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	f040 815a 	bne.w	8004486 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	f003 0303 	and.w	r3, r3, #3
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d005      	beq.n	80041ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d130      	bne.n	800424c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	005b      	lsls	r3, r3, #1
 80041f4:	2203      	movs	r2, #3
 80041f6:	fa02 f303 	lsl.w	r3, r2, r3
 80041fa:	43db      	mvns	r3, r3
 80041fc:	69ba      	ldr	r2, [r7, #24]
 80041fe:	4013      	ands	r3, r2
 8004200:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	68da      	ldr	r2, [r3, #12]
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	005b      	lsls	r3, r3, #1
 800420a:	fa02 f303 	lsl.w	r3, r2, r3
 800420e:	69ba      	ldr	r2, [r7, #24]
 8004210:	4313      	orrs	r3, r2
 8004212:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	69ba      	ldr	r2, [r7, #24]
 8004218:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004220:	2201      	movs	r2, #1
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	fa02 f303 	lsl.w	r3, r2, r3
 8004228:	43db      	mvns	r3, r3
 800422a:	69ba      	ldr	r2, [r7, #24]
 800422c:	4013      	ands	r3, r2
 800422e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	091b      	lsrs	r3, r3, #4
 8004236:	f003 0201 	and.w	r2, r3, #1
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	fa02 f303 	lsl.w	r3, r2, r3
 8004240:	69ba      	ldr	r2, [r7, #24]
 8004242:	4313      	orrs	r3, r2
 8004244:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	69ba      	ldr	r2, [r7, #24]
 800424a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f003 0303 	and.w	r3, r3, #3
 8004254:	2b03      	cmp	r3, #3
 8004256:	d017      	beq.n	8004288 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	005b      	lsls	r3, r3, #1
 8004262:	2203      	movs	r2, #3
 8004264:	fa02 f303 	lsl.w	r3, r2, r3
 8004268:	43db      	mvns	r3, r3
 800426a:	69ba      	ldr	r2, [r7, #24]
 800426c:	4013      	ands	r3, r2
 800426e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	689a      	ldr	r2, [r3, #8]
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	005b      	lsls	r3, r3, #1
 8004278:	fa02 f303 	lsl.w	r3, r2, r3
 800427c:	69ba      	ldr	r2, [r7, #24]
 800427e:	4313      	orrs	r3, r2
 8004280:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	69ba      	ldr	r2, [r7, #24]
 8004286:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	f003 0303 	and.w	r3, r3, #3
 8004290:	2b02      	cmp	r3, #2
 8004292:	d123      	bne.n	80042dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	08da      	lsrs	r2, r3, #3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	3208      	adds	r2, #8
 800429c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	f003 0307 	and.w	r3, r3, #7
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	220f      	movs	r2, #15
 80042ac:	fa02 f303 	lsl.w	r3, r2, r3
 80042b0:	43db      	mvns	r3, r3
 80042b2:	69ba      	ldr	r2, [r7, #24]
 80042b4:	4013      	ands	r3, r2
 80042b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	691a      	ldr	r2, [r3, #16]
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	f003 0307 	and.w	r3, r3, #7
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	fa02 f303 	lsl.w	r3, r2, r3
 80042c8:	69ba      	ldr	r2, [r7, #24]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	08da      	lsrs	r2, r3, #3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	3208      	adds	r2, #8
 80042d6:	69b9      	ldr	r1, [r7, #24]
 80042d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	005b      	lsls	r3, r3, #1
 80042e6:	2203      	movs	r2, #3
 80042e8:	fa02 f303 	lsl.w	r3, r2, r3
 80042ec:	43db      	mvns	r3, r3
 80042ee:	69ba      	ldr	r2, [r7, #24]
 80042f0:	4013      	ands	r3, r2
 80042f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	f003 0203 	and.w	r2, r3, #3
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	005b      	lsls	r3, r3, #1
 8004300:	fa02 f303 	lsl.w	r3, r2, r3
 8004304:	69ba      	ldr	r2, [r7, #24]
 8004306:	4313      	orrs	r3, r2
 8004308:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	69ba      	ldr	r2, [r7, #24]
 800430e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004318:	2b00      	cmp	r3, #0
 800431a:	f000 80b4 	beq.w	8004486 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800431e:	2300      	movs	r3, #0
 8004320:	60fb      	str	r3, [r7, #12]
 8004322:	4b60      	ldr	r3, [pc, #384]	@ (80044a4 <HAL_GPIO_Init+0x30c>)
 8004324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004326:	4a5f      	ldr	r2, [pc, #380]	@ (80044a4 <HAL_GPIO_Init+0x30c>)
 8004328:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800432c:	6453      	str	r3, [r2, #68]	@ 0x44
 800432e:	4b5d      	ldr	r3, [pc, #372]	@ (80044a4 <HAL_GPIO_Init+0x30c>)
 8004330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004332:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004336:	60fb      	str	r3, [r7, #12]
 8004338:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800433a:	4a5b      	ldr	r2, [pc, #364]	@ (80044a8 <HAL_GPIO_Init+0x310>)
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	089b      	lsrs	r3, r3, #2
 8004340:	3302      	adds	r3, #2
 8004342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004346:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	f003 0303 	and.w	r3, r3, #3
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	220f      	movs	r2, #15
 8004352:	fa02 f303 	lsl.w	r3, r2, r3
 8004356:	43db      	mvns	r3, r3
 8004358:	69ba      	ldr	r2, [r7, #24]
 800435a:	4013      	ands	r3, r2
 800435c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a52      	ldr	r2, [pc, #328]	@ (80044ac <HAL_GPIO_Init+0x314>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d02b      	beq.n	80043be <HAL_GPIO_Init+0x226>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a51      	ldr	r2, [pc, #324]	@ (80044b0 <HAL_GPIO_Init+0x318>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d025      	beq.n	80043ba <HAL_GPIO_Init+0x222>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a50      	ldr	r2, [pc, #320]	@ (80044b4 <HAL_GPIO_Init+0x31c>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d01f      	beq.n	80043b6 <HAL_GPIO_Init+0x21e>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a4f      	ldr	r2, [pc, #316]	@ (80044b8 <HAL_GPIO_Init+0x320>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d019      	beq.n	80043b2 <HAL_GPIO_Init+0x21a>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a4e      	ldr	r2, [pc, #312]	@ (80044bc <HAL_GPIO_Init+0x324>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d013      	beq.n	80043ae <HAL_GPIO_Init+0x216>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a4d      	ldr	r2, [pc, #308]	@ (80044c0 <HAL_GPIO_Init+0x328>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d00d      	beq.n	80043aa <HAL_GPIO_Init+0x212>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a4c      	ldr	r2, [pc, #304]	@ (80044c4 <HAL_GPIO_Init+0x32c>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d007      	beq.n	80043a6 <HAL_GPIO_Init+0x20e>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a4b      	ldr	r2, [pc, #300]	@ (80044c8 <HAL_GPIO_Init+0x330>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d101      	bne.n	80043a2 <HAL_GPIO_Init+0x20a>
 800439e:	2307      	movs	r3, #7
 80043a0:	e00e      	b.n	80043c0 <HAL_GPIO_Init+0x228>
 80043a2:	2308      	movs	r3, #8
 80043a4:	e00c      	b.n	80043c0 <HAL_GPIO_Init+0x228>
 80043a6:	2306      	movs	r3, #6
 80043a8:	e00a      	b.n	80043c0 <HAL_GPIO_Init+0x228>
 80043aa:	2305      	movs	r3, #5
 80043ac:	e008      	b.n	80043c0 <HAL_GPIO_Init+0x228>
 80043ae:	2304      	movs	r3, #4
 80043b0:	e006      	b.n	80043c0 <HAL_GPIO_Init+0x228>
 80043b2:	2303      	movs	r3, #3
 80043b4:	e004      	b.n	80043c0 <HAL_GPIO_Init+0x228>
 80043b6:	2302      	movs	r3, #2
 80043b8:	e002      	b.n	80043c0 <HAL_GPIO_Init+0x228>
 80043ba:	2301      	movs	r3, #1
 80043bc:	e000      	b.n	80043c0 <HAL_GPIO_Init+0x228>
 80043be:	2300      	movs	r3, #0
 80043c0:	69fa      	ldr	r2, [r7, #28]
 80043c2:	f002 0203 	and.w	r2, r2, #3
 80043c6:	0092      	lsls	r2, r2, #2
 80043c8:	4093      	lsls	r3, r2
 80043ca:	69ba      	ldr	r2, [r7, #24]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80043d0:	4935      	ldr	r1, [pc, #212]	@ (80044a8 <HAL_GPIO_Init+0x310>)
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	089b      	lsrs	r3, r3, #2
 80043d6:	3302      	adds	r3, #2
 80043d8:	69ba      	ldr	r2, [r7, #24]
 80043da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80043de:	4b3b      	ldr	r3, [pc, #236]	@ (80044cc <HAL_GPIO_Init+0x334>)
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	43db      	mvns	r3, r3
 80043e8:	69ba      	ldr	r2, [r7, #24]
 80043ea:	4013      	ands	r3, r2
 80043ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d003      	beq.n	8004402 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80043fa:	69ba      	ldr	r2, [r7, #24]
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	4313      	orrs	r3, r2
 8004400:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004402:	4a32      	ldr	r2, [pc, #200]	@ (80044cc <HAL_GPIO_Init+0x334>)
 8004404:	69bb      	ldr	r3, [r7, #24]
 8004406:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004408:	4b30      	ldr	r3, [pc, #192]	@ (80044cc <HAL_GPIO_Init+0x334>)
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	43db      	mvns	r3, r3
 8004412:	69ba      	ldr	r2, [r7, #24]
 8004414:	4013      	ands	r3, r2
 8004416:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004420:	2b00      	cmp	r3, #0
 8004422:	d003      	beq.n	800442c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004424:	69ba      	ldr	r2, [r7, #24]
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	4313      	orrs	r3, r2
 800442a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800442c:	4a27      	ldr	r2, [pc, #156]	@ (80044cc <HAL_GPIO_Init+0x334>)
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004432:	4b26      	ldr	r3, [pc, #152]	@ (80044cc <HAL_GPIO_Init+0x334>)
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	43db      	mvns	r3, r3
 800443c:	69ba      	ldr	r2, [r7, #24]
 800443e:	4013      	ands	r3, r2
 8004440:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d003      	beq.n	8004456 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800444e:	69ba      	ldr	r2, [r7, #24]
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	4313      	orrs	r3, r2
 8004454:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004456:	4a1d      	ldr	r2, [pc, #116]	@ (80044cc <HAL_GPIO_Init+0x334>)
 8004458:	69bb      	ldr	r3, [r7, #24]
 800445a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800445c:	4b1b      	ldr	r3, [pc, #108]	@ (80044cc <HAL_GPIO_Init+0x334>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	43db      	mvns	r3, r3
 8004466:	69ba      	ldr	r2, [r7, #24]
 8004468:	4013      	ands	r3, r2
 800446a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004474:	2b00      	cmp	r3, #0
 8004476:	d003      	beq.n	8004480 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004478:	69ba      	ldr	r2, [r7, #24]
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	4313      	orrs	r3, r2
 800447e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004480:	4a12      	ldr	r2, [pc, #72]	@ (80044cc <HAL_GPIO_Init+0x334>)
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	3301      	adds	r3, #1
 800448a:	61fb      	str	r3, [r7, #28]
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	2b0f      	cmp	r3, #15
 8004490:	f67f ae90 	bls.w	80041b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004494:	bf00      	nop
 8004496:	bf00      	nop
 8004498:	3724      	adds	r7, #36	@ 0x24
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop
 80044a4:	40023800 	.word	0x40023800
 80044a8:	40013800 	.word	0x40013800
 80044ac:	40020000 	.word	0x40020000
 80044b0:	40020400 	.word	0x40020400
 80044b4:	40020800 	.word	0x40020800
 80044b8:	40020c00 	.word	0x40020c00
 80044bc:	40021000 	.word	0x40021000
 80044c0:	40021400 	.word	0x40021400
 80044c4:	40021800 	.word	0x40021800
 80044c8:	40021c00 	.word	0x40021c00
 80044cc:	40013c00 	.word	0x40013c00

080044d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	460b      	mov	r3, r1
 80044da:	807b      	strh	r3, [r7, #2]
 80044dc:	4613      	mov	r3, r2
 80044de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80044e0:	787b      	ldrb	r3, [r7, #1]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d003      	beq.n	80044ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80044e6:	887a      	ldrh	r2, [r7, #2]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80044ec:	e003      	b.n	80044f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80044ee:	887b      	ldrh	r3, [r7, #2]
 80044f0:	041a      	lsls	r2, r3, #16
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	619a      	str	r2, [r3, #24]
}
 80044f6:	bf00      	nop
 80044f8:	370c      	adds	r7, #12
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
	...

08004504 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d101      	bne.n	8004516 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e12b      	b.n	800476e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800451c:	b2db      	uxtb	r3, r3
 800451e:	2b00      	cmp	r3, #0
 8004520:	d106      	bne.n	8004530 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f7fc fe9a 	bl	8001264 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2224      	movs	r2, #36	@ 0x24
 8004534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f022 0201 	bic.w	r2, r2, #1
 8004546:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004556:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004566:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004568:	f001 f89a 	bl	80056a0 <HAL_RCC_GetPCLK1Freq>
 800456c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	4a81      	ldr	r2, [pc, #516]	@ (8004778 <HAL_I2C_Init+0x274>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d807      	bhi.n	8004588 <HAL_I2C_Init+0x84>
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	4a80      	ldr	r2, [pc, #512]	@ (800477c <HAL_I2C_Init+0x278>)
 800457c:	4293      	cmp	r3, r2
 800457e:	bf94      	ite	ls
 8004580:	2301      	movls	r3, #1
 8004582:	2300      	movhi	r3, #0
 8004584:	b2db      	uxtb	r3, r3
 8004586:	e006      	b.n	8004596 <HAL_I2C_Init+0x92>
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	4a7d      	ldr	r2, [pc, #500]	@ (8004780 <HAL_I2C_Init+0x27c>)
 800458c:	4293      	cmp	r3, r2
 800458e:	bf94      	ite	ls
 8004590:	2301      	movls	r3, #1
 8004592:	2300      	movhi	r3, #0
 8004594:	b2db      	uxtb	r3, r3
 8004596:	2b00      	cmp	r3, #0
 8004598:	d001      	beq.n	800459e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e0e7      	b.n	800476e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	4a78      	ldr	r2, [pc, #480]	@ (8004784 <HAL_I2C_Init+0x280>)
 80045a2:	fba2 2303 	umull	r2, r3, r2, r3
 80045a6:	0c9b      	lsrs	r3, r3, #18
 80045a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68ba      	ldr	r2, [r7, #8]
 80045ba:	430a      	orrs	r2, r1
 80045bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	6a1b      	ldr	r3, [r3, #32]
 80045c4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	4a6a      	ldr	r2, [pc, #424]	@ (8004778 <HAL_I2C_Init+0x274>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d802      	bhi.n	80045d8 <HAL_I2C_Init+0xd4>
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	3301      	adds	r3, #1
 80045d6:	e009      	b.n	80045ec <HAL_I2C_Init+0xe8>
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80045de:	fb02 f303 	mul.w	r3, r2, r3
 80045e2:	4a69      	ldr	r2, [pc, #420]	@ (8004788 <HAL_I2C_Init+0x284>)
 80045e4:	fba2 2303 	umull	r2, r3, r2, r3
 80045e8:	099b      	lsrs	r3, r3, #6
 80045ea:	3301      	adds	r3, #1
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	6812      	ldr	r2, [r2, #0]
 80045f0:	430b      	orrs	r3, r1
 80045f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	69db      	ldr	r3, [r3, #28]
 80045fa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80045fe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	495c      	ldr	r1, [pc, #368]	@ (8004778 <HAL_I2C_Init+0x274>)
 8004608:	428b      	cmp	r3, r1
 800460a:	d819      	bhi.n	8004640 <HAL_I2C_Init+0x13c>
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	1e59      	subs	r1, r3, #1
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	005b      	lsls	r3, r3, #1
 8004616:	fbb1 f3f3 	udiv	r3, r1, r3
 800461a:	1c59      	adds	r1, r3, #1
 800461c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004620:	400b      	ands	r3, r1
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00a      	beq.n	800463c <HAL_I2C_Init+0x138>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	1e59      	subs	r1, r3, #1
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	005b      	lsls	r3, r3, #1
 8004630:	fbb1 f3f3 	udiv	r3, r1, r3
 8004634:	3301      	adds	r3, #1
 8004636:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800463a:	e051      	b.n	80046e0 <HAL_I2C_Init+0x1dc>
 800463c:	2304      	movs	r3, #4
 800463e:	e04f      	b.n	80046e0 <HAL_I2C_Init+0x1dc>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d111      	bne.n	800466c <HAL_I2C_Init+0x168>
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	1e58      	subs	r0, r3, #1
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6859      	ldr	r1, [r3, #4]
 8004650:	460b      	mov	r3, r1
 8004652:	005b      	lsls	r3, r3, #1
 8004654:	440b      	add	r3, r1
 8004656:	fbb0 f3f3 	udiv	r3, r0, r3
 800465a:	3301      	adds	r3, #1
 800465c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004660:	2b00      	cmp	r3, #0
 8004662:	bf0c      	ite	eq
 8004664:	2301      	moveq	r3, #1
 8004666:	2300      	movne	r3, #0
 8004668:	b2db      	uxtb	r3, r3
 800466a:	e012      	b.n	8004692 <HAL_I2C_Init+0x18e>
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	1e58      	subs	r0, r3, #1
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6859      	ldr	r1, [r3, #4]
 8004674:	460b      	mov	r3, r1
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	440b      	add	r3, r1
 800467a:	0099      	lsls	r1, r3, #2
 800467c:	440b      	add	r3, r1
 800467e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004682:	3301      	adds	r3, #1
 8004684:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004688:	2b00      	cmp	r3, #0
 800468a:	bf0c      	ite	eq
 800468c:	2301      	moveq	r3, #1
 800468e:	2300      	movne	r3, #0
 8004690:	b2db      	uxtb	r3, r3
 8004692:	2b00      	cmp	r3, #0
 8004694:	d001      	beq.n	800469a <HAL_I2C_Init+0x196>
 8004696:	2301      	movs	r3, #1
 8004698:	e022      	b.n	80046e0 <HAL_I2C_Init+0x1dc>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d10e      	bne.n	80046c0 <HAL_I2C_Init+0x1bc>
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	1e58      	subs	r0, r3, #1
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6859      	ldr	r1, [r3, #4]
 80046aa:	460b      	mov	r3, r1
 80046ac:	005b      	lsls	r3, r3, #1
 80046ae:	440b      	add	r3, r1
 80046b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80046b4:	3301      	adds	r3, #1
 80046b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80046be:	e00f      	b.n	80046e0 <HAL_I2C_Init+0x1dc>
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	1e58      	subs	r0, r3, #1
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6859      	ldr	r1, [r3, #4]
 80046c8:	460b      	mov	r3, r1
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	440b      	add	r3, r1
 80046ce:	0099      	lsls	r1, r3, #2
 80046d0:	440b      	add	r3, r1
 80046d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80046d6:	3301      	adds	r3, #1
 80046d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80046e0:	6879      	ldr	r1, [r7, #4]
 80046e2:	6809      	ldr	r1, [r1, #0]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	69da      	ldr	r2, [r3, #28]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a1b      	ldr	r3, [r3, #32]
 80046fa:	431a      	orrs	r2, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	430a      	orrs	r2, r1
 8004702:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800470e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	6911      	ldr	r1, [r2, #16]
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	68d2      	ldr	r2, [r2, #12]
 800471a:	4311      	orrs	r1, r2
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	6812      	ldr	r2, [r2, #0]
 8004720:	430b      	orrs	r3, r1
 8004722:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	695a      	ldr	r2, [r3, #20]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	699b      	ldr	r3, [r3, #24]
 8004736:	431a      	orrs	r2, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	430a      	orrs	r2, r1
 800473e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f042 0201 	orr.w	r2, r2, #1
 800474e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2220      	movs	r2, #32
 800475a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3710      	adds	r7, #16
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	000186a0 	.word	0x000186a0
 800477c:	001e847f 	.word	0x001e847f
 8004780:	003d08ff 	.word	0x003d08ff
 8004784:	431bde83 	.word	0x431bde83
 8004788:	10624dd3 	.word	0x10624dd3

0800478c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b088      	sub	sp, #32
 8004790:	af02      	add	r7, sp, #8
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	607a      	str	r2, [r7, #4]
 8004796:	461a      	mov	r2, r3
 8004798:	460b      	mov	r3, r1
 800479a:	817b      	strh	r3, [r7, #10]
 800479c:	4613      	mov	r3, r2
 800479e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80047a0:	f7fe ffb6 	bl	8003710 <HAL_GetTick>
 80047a4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	2b20      	cmp	r3, #32
 80047b0:	f040 80e0 	bne.w	8004974 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	9300      	str	r3, [sp, #0]
 80047b8:	2319      	movs	r3, #25
 80047ba:	2201      	movs	r2, #1
 80047bc:	4970      	ldr	r1, [pc, #448]	@ (8004980 <HAL_I2C_Master_Transmit+0x1f4>)
 80047be:	68f8      	ldr	r0, [r7, #12]
 80047c0:	f000 f964 	bl	8004a8c <I2C_WaitOnFlagUntilTimeout>
 80047c4:	4603      	mov	r3, r0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d001      	beq.n	80047ce <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80047ca:	2302      	movs	r3, #2
 80047cc:	e0d3      	b.n	8004976 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d101      	bne.n	80047dc <HAL_I2C_Master_Transmit+0x50>
 80047d8:	2302      	movs	r3, #2
 80047da:	e0cc      	b.n	8004976 <HAL_I2C_Master_Transmit+0x1ea>
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d007      	beq.n	8004802 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f042 0201 	orr.w	r2, r2, #1
 8004800:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004810:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2221      	movs	r2, #33	@ 0x21
 8004816:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2210      	movs	r2, #16
 800481e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2200      	movs	r2, #0
 8004826:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	893a      	ldrh	r2, [r7, #8]
 8004832:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004838:	b29a      	uxth	r2, r3
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	4a50      	ldr	r2, [pc, #320]	@ (8004984 <HAL_I2C_Master_Transmit+0x1f8>)
 8004842:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004844:	8979      	ldrh	r1, [r7, #10]
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	6a3a      	ldr	r2, [r7, #32]
 800484a:	68f8      	ldr	r0, [r7, #12]
 800484c:	f000 f89c 	bl	8004988 <I2C_MasterRequestWrite>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d001      	beq.n	800485a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e08d      	b.n	8004976 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800485a:	2300      	movs	r3, #0
 800485c:	613b      	str	r3, [r7, #16]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	695b      	ldr	r3, [r3, #20]
 8004864:	613b      	str	r3, [r7, #16]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	699b      	ldr	r3, [r3, #24]
 800486c:	613b      	str	r3, [r7, #16]
 800486e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004870:	e066      	b.n	8004940 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004872:	697a      	ldr	r2, [r7, #20]
 8004874:	6a39      	ldr	r1, [r7, #32]
 8004876:	68f8      	ldr	r0, [r7, #12]
 8004878:	f000 fa22 	bl	8004cc0 <I2C_WaitOnTXEFlagUntilTimeout>
 800487c:	4603      	mov	r3, r0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d00d      	beq.n	800489e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004886:	2b04      	cmp	r3, #4
 8004888:	d107      	bne.n	800489a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004898:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e06b      	b.n	8004976 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048a2:	781a      	ldrb	r2, [r3, #0]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ae:	1c5a      	adds	r2, r3, #1
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	3b01      	subs	r3, #1
 80048bc:	b29a      	uxth	r2, r3
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048c6:	3b01      	subs	r3, #1
 80048c8:	b29a      	uxth	r2, r3
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	695b      	ldr	r3, [r3, #20]
 80048d4:	f003 0304 	and.w	r3, r3, #4
 80048d8:	2b04      	cmp	r3, #4
 80048da:	d11b      	bne.n	8004914 <HAL_I2C_Master_Transmit+0x188>
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d017      	beq.n	8004914 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048e8:	781a      	ldrb	r2, [r3, #0]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048f4:	1c5a      	adds	r2, r3, #1
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048fe:	b29b      	uxth	r3, r3
 8004900:	3b01      	subs	r3, #1
 8004902:	b29a      	uxth	r2, r3
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800490c:	3b01      	subs	r3, #1
 800490e:	b29a      	uxth	r2, r3
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004914:	697a      	ldr	r2, [r7, #20]
 8004916:	6a39      	ldr	r1, [r7, #32]
 8004918:	68f8      	ldr	r0, [r7, #12]
 800491a:	f000 fa19 	bl	8004d50 <I2C_WaitOnBTFFlagUntilTimeout>
 800491e:	4603      	mov	r3, r0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d00d      	beq.n	8004940 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004928:	2b04      	cmp	r3, #4
 800492a:	d107      	bne.n	800493c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800493a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	e01a      	b.n	8004976 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004944:	2b00      	cmp	r3, #0
 8004946:	d194      	bne.n	8004872 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004956:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2220      	movs	r2, #32
 800495c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2200      	movs	r2, #0
 8004964:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2200      	movs	r2, #0
 800496c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004970:	2300      	movs	r3, #0
 8004972:	e000      	b.n	8004976 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004974:	2302      	movs	r3, #2
  }
}
 8004976:	4618      	mov	r0, r3
 8004978:	3718      	adds	r7, #24
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	00100002 	.word	0x00100002
 8004984:	ffff0000 	.word	0xffff0000

08004988 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b088      	sub	sp, #32
 800498c:	af02      	add	r7, sp, #8
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	607a      	str	r2, [r7, #4]
 8004992:	603b      	str	r3, [r7, #0]
 8004994:	460b      	mov	r3, r1
 8004996:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800499c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	2b08      	cmp	r3, #8
 80049a2:	d006      	beq.n	80049b2 <I2C_MasterRequestWrite+0x2a>
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d003      	beq.n	80049b2 <I2C_MasterRequestWrite+0x2a>
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80049b0:	d108      	bne.n	80049c4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049c0:	601a      	str	r2, [r3, #0]
 80049c2:	e00b      	b.n	80049dc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049c8:	2b12      	cmp	r3, #18
 80049ca:	d107      	bne.n	80049dc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049da:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	9300      	str	r3, [sp, #0]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80049e8:	68f8      	ldr	r0, [r7, #12]
 80049ea:	f000 f84f 	bl	8004a8c <I2C_WaitOnFlagUntilTimeout>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d00d      	beq.n	8004a10 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a02:	d103      	bne.n	8004a0c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a0a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004a0c:	2303      	movs	r3, #3
 8004a0e:	e035      	b.n	8004a7c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	691b      	ldr	r3, [r3, #16]
 8004a14:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a18:	d108      	bne.n	8004a2c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a1a:	897b      	ldrh	r3, [r7, #10]
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	461a      	mov	r2, r3
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004a28:	611a      	str	r2, [r3, #16]
 8004a2a:	e01b      	b.n	8004a64 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004a2c:	897b      	ldrh	r3, [r7, #10]
 8004a2e:	11db      	asrs	r3, r3, #7
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	f003 0306 	and.w	r3, r3, #6
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	f063 030f 	orn	r3, r3, #15
 8004a3c:	b2da      	uxtb	r2, r3
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	490e      	ldr	r1, [pc, #56]	@ (8004a84 <I2C_MasterRequestWrite+0xfc>)
 8004a4a:	68f8      	ldr	r0, [r7, #12]
 8004a4c:	f000 f898 	bl	8004b80 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d001      	beq.n	8004a5a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e010      	b.n	8004a7c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004a5a:	897b      	ldrh	r3, [r7, #10]
 8004a5c:	b2da      	uxtb	r2, r3
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	4907      	ldr	r1, [pc, #28]	@ (8004a88 <I2C_MasterRequestWrite+0x100>)
 8004a6a:	68f8      	ldr	r0, [r7, #12]
 8004a6c:	f000 f888 	bl	8004b80 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a70:	4603      	mov	r3, r0
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d001      	beq.n	8004a7a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e000      	b.n	8004a7c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004a7a:	2300      	movs	r3, #0
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3718      	adds	r7, #24
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	00010008 	.word	0x00010008
 8004a88:	00010002 	.word	0x00010002

08004a8c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	60b9      	str	r1, [r7, #8]
 8004a96:	603b      	str	r3, [r7, #0]
 8004a98:	4613      	mov	r3, r2
 8004a9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a9c:	e048      	b.n	8004b30 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa4:	d044      	beq.n	8004b30 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aa6:	f7fe fe33 	bl	8003710 <HAL_GetTick>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	683a      	ldr	r2, [r7, #0]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d302      	bcc.n	8004abc <I2C_WaitOnFlagUntilTimeout+0x30>
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d139      	bne.n	8004b30 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	0c1b      	lsrs	r3, r3, #16
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d10d      	bne.n	8004ae2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	695b      	ldr	r3, [r3, #20]
 8004acc:	43da      	mvns	r2, r3
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	bf0c      	ite	eq
 8004ad8:	2301      	moveq	r3, #1
 8004ada:	2300      	movne	r3, #0
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	461a      	mov	r2, r3
 8004ae0:	e00c      	b.n	8004afc <I2C_WaitOnFlagUntilTimeout+0x70>
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	699b      	ldr	r3, [r3, #24]
 8004ae8:	43da      	mvns	r2, r3
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	4013      	ands	r3, r2
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	bf0c      	ite	eq
 8004af4:	2301      	moveq	r3, #1
 8004af6:	2300      	movne	r3, #0
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	461a      	mov	r2, r3
 8004afc:	79fb      	ldrb	r3, [r7, #7]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d116      	bne.n	8004b30 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2200      	movs	r2, #0
 8004b06:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2220      	movs	r2, #32
 8004b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2200      	movs	r2, #0
 8004b14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b1c:	f043 0220 	orr.w	r2, r3, #32
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e023      	b.n	8004b78 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	0c1b      	lsrs	r3, r3, #16
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d10d      	bne.n	8004b56 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	695b      	ldr	r3, [r3, #20]
 8004b40:	43da      	mvns	r2, r3
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	4013      	ands	r3, r2
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	bf0c      	ite	eq
 8004b4c:	2301      	moveq	r3, #1
 8004b4e:	2300      	movne	r3, #0
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	461a      	mov	r2, r3
 8004b54:	e00c      	b.n	8004b70 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	699b      	ldr	r3, [r3, #24]
 8004b5c:	43da      	mvns	r2, r3
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	4013      	ands	r3, r2
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	bf0c      	ite	eq
 8004b68:	2301      	moveq	r3, #1
 8004b6a:	2300      	movne	r3, #0
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	461a      	mov	r2, r3
 8004b70:	79fb      	ldrb	r3, [r7, #7]
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d093      	beq.n	8004a9e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b76:	2300      	movs	r3, #0
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3710      	adds	r7, #16
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	60f8      	str	r0, [r7, #12]
 8004b88:	60b9      	str	r1, [r7, #8]
 8004b8a:	607a      	str	r2, [r7, #4]
 8004b8c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b8e:	e071      	b.n	8004c74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	695b      	ldr	r3, [r3, #20]
 8004b96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b9e:	d123      	bne.n	8004be8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004bae:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004bb8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2220      	movs	r2, #32
 8004bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bd4:	f043 0204 	orr.w	r2, r3, #4
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e067      	b.n	8004cb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bee:	d041      	beq.n	8004c74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bf0:	f7fe fd8e 	bl	8003710 <HAL_GetTick>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d302      	bcc.n	8004c06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d136      	bne.n	8004c74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	0c1b      	lsrs	r3, r3, #16
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d10c      	bne.n	8004c2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	695b      	ldr	r3, [r3, #20]
 8004c16:	43da      	mvns	r2, r3
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	bf14      	ite	ne
 8004c22:	2301      	movne	r3, #1
 8004c24:	2300      	moveq	r3, #0
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	e00b      	b.n	8004c42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	699b      	ldr	r3, [r3, #24]
 8004c30:	43da      	mvns	r2, r3
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	4013      	ands	r3, r2
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	bf14      	ite	ne
 8004c3c:	2301      	movne	r3, #1
 8004c3e:	2300      	moveq	r3, #0
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d016      	beq.n	8004c74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2220      	movs	r2, #32
 8004c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c60:	f043 0220 	orr.w	r2, r3, #32
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e021      	b.n	8004cb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	0c1b      	lsrs	r3, r3, #16
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d10c      	bne.n	8004c98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	695b      	ldr	r3, [r3, #20]
 8004c84:	43da      	mvns	r2, r3
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	4013      	ands	r3, r2
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	bf14      	ite	ne
 8004c90:	2301      	movne	r3, #1
 8004c92:	2300      	moveq	r3, #0
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	e00b      	b.n	8004cb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	699b      	ldr	r3, [r3, #24]
 8004c9e:	43da      	mvns	r2, r3
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	bf14      	ite	ne
 8004caa:	2301      	movne	r3, #1
 8004cac:	2300      	moveq	r3, #0
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	f47f af6d 	bne.w	8004b90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004cb6:	2300      	movs	r3, #0
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3710      	adds	r7, #16
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ccc:	e034      	b.n	8004d38 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004cce:	68f8      	ldr	r0, [r7, #12]
 8004cd0:	f000 f886 	bl	8004de0 <I2C_IsAcknowledgeFailed>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d001      	beq.n	8004cde <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e034      	b.n	8004d48 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce4:	d028      	beq.n	8004d38 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ce6:	f7fe fd13 	bl	8003710 <HAL_GetTick>
 8004cea:	4602      	mov	r2, r0
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	1ad3      	subs	r3, r2, r3
 8004cf0:	68ba      	ldr	r2, [r7, #8]
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d302      	bcc.n	8004cfc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d11d      	bne.n	8004d38 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	695b      	ldr	r3, [r3, #20]
 8004d02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d06:	2b80      	cmp	r3, #128	@ 0x80
 8004d08:	d016      	beq.n	8004d38 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2220      	movs	r2, #32
 8004d14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d24:	f043 0220 	orr.w	r2, r3, #32
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e007      	b.n	8004d48 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	695b      	ldr	r3, [r3, #20]
 8004d3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d42:	2b80      	cmp	r3, #128	@ 0x80
 8004d44:	d1c3      	bne.n	8004cce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004d46:	2300      	movs	r3, #0
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3710      	adds	r7, #16
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}

08004d50 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b084      	sub	sp, #16
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	60b9      	str	r1, [r7, #8]
 8004d5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d5c:	e034      	b.n	8004dc8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d5e:	68f8      	ldr	r0, [r7, #12]
 8004d60:	f000 f83e 	bl	8004de0 <I2C_IsAcknowledgeFailed>
 8004d64:	4603      	mov	r3, r0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d001      	beq.n	8004d6e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e034      	b.n	8004dd8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d74:	d028      	beq.n	8004dc8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d76:	f7fe fccb 	bl	8003710 <HAL_GetTick>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	68ba      	ldr	r2, [r7, #8]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d302      	bcc.n	8004d8c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d11d      	bne.n	8004dc8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	695b      	ldr	r3, [r3, #20]
 8004d92:	f003 0304 	and.w	r3, r3, #4
 8004d96:	2b04      	cmp	r3, #4
 8004d98:	d016      	beq.n	8004dc8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2220      	movs	r2, #32
 8004da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004db4:	f043 0220 	orr.w	r2, r3, #32
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e007      	b.n	8004dd8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	695b      	ldr	r3, [r3, #20]
 8004dce:	f003 0304 	and.w	r3, r3, #4
 8004dd2:	2b04      	cmp	r3, #4
 8004dd4:	d1c3      	bne.n	8004d5e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004dd6:	2300      	movs	r3, #0
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3710      	adds	r7, #16
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	695b      	ldr	r3, [r3, #20]
 8004dee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004df2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004df6:	d11b      	bne.n	8004e30 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004e00:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2220      	movs	r2, #32
 8004e0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e1c:	f043 0204 	orr.w	r2, r3, #4
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e000      	b.n	8004e32 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004e30:	2300      	movs	r3, #0
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	370c      	adds	r7, #12
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
	...

08004e40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b086      	sub	sp, #24
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d101      	bne.n	8004e52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e267      	b.n	8005322 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 0301 	and.w	r3, r3, #1
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d075      	beq.n	8004f4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004e5e:	4b88      	ldr	r3, [pc, #544]	@ (8005080 <HAL_RCC_OscConfig+0x240>)
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	f003 030c 	and.w	r3, r3, #12
 8004e66:	2b04      	cmp	r3, #4
 8004e68:	d00c      	beq.n	8004e84 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e6a:	4b85      	ldr	r3, [pc, #532]	@ (8005080 <HAL_RCC_OscConfig+0x240>)
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004e72:	2b08      	cmp	r3, #8
 8004e74:	d112      	bne.n	8004e9c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e76:	4b82      	ldr	r3, [pc, #520]	@ (8005080 <HAL_RCC_OscConfig+0x240>)
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e7e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e82:	d10b      	bne.n	8004e9c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e84:	4b7e      	ldr	r3, [pc, #504]	@ (8005080 <HAL_RCC_OscConfig+0x240>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d05b      	beq.n	8004f48 <HAL_RCC_OscConfig+0x108>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d157      	bne.n	8004f48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e242      	b.n	8005322 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ea4:	d106      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x74>
 8004ea6:	4b76      	ldr	r3, [pc, #472]	@ (8005080 <HAL_RCC_OscConfig+0x240>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a75      	ldr	r2, [pc, #468]	@ (8005080 <HAL_RCC_OscConfig+0x240>)
 8004eac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004eb0:	6013      	str	r3, [r2, #0]
 8004eb2:	e01d      	b.n	8004ef0 <HAL_RCC_OscConfig+0xb0>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ebc:	d10c      	bne.n	8004ed8 <HAL_RCC_OscConfig+0x98>
 8004ebe:	4b70      	ldr	r3, [pc, #448]	@ (8005080 <HAL_RCC_OscConfig+0x240>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a6f      	ldr	r2, [pc, #444]	@ (8005080 <HAL_RCC_OscConfig+0x240>)
 8004ec4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ec8:	6013      	str	r3, [r2, #0]
 8004eca:	4b6d      	ldr	r3, [pc, #436]	@ (8005080 <HAL_RCC_OscConfig+0x240>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a6c      	ldr	r2, [pc, #432]	@ (8005080 <HAL_RCC_OscConfig+0x240>)
 8004ed0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ed4:	6013      	str	r3, [r2, #0]
 8004ed6:	e00b      	b.n	8004ef0 <HAL_RCC_OscConfig+0xb0>
 8004ed8:	4b69      	ldr	r3, [pc, #420]	@ (8005080 <HAL_RCC_OscConfig+0x240>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a68      	ldr	r2, [pc, #416]	@ (8005080 <HAL_RCC_OscConfig+0x240>)
 8004ede:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ee2:	6013      	str	r3, [r2, #0]
 8004ee4:	4b66      	ldr	r3, [pc, #408]	@ (8005080 <HAL_RCC_OscConfig+0x240>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a65      	ldr	r2, [pc, #404]	@ (8005080 <HAL_RCC_OscConfig+0x240>)
 8004eea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004eee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d013      	beq.n	8004f20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ef8:	f7fe fc0a 	bl	8003710 <HAL_GetTick>
 8004efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004efe:	e008      	b.n	8004f12 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f00:	f7fe fc06 	bl	8003710 <HAL_GetTick>
 8004f04:	4602      	mov	r2, r0
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	2b64      	cmp	r3, #100	@ 0x64
 8004f0c:	d901      	bls.n	8004f12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004f0e:	2303      	movs	r3, #3
 8004f10:	e207      	b.n	8005322 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f12:	4b5b      	ldr	r3, [pc, #364]	@ (8005080 <HAL_RCC_OscConfig+0x240>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d0f0      	beq.n	8004f00 <HAL_RCC_OscConfig+0xc0>
 8004f1e:	e014      	b.n	8004f4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f20:	f7fe fbf6 	bl	8003710 <HAL_GetTick>
 8004f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f26:	e008      	b.n	8004f3a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f28:	f7fe fbf2 	bl	8003710 <HAL_GetTick>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	2b64      	cmp	r3, #100	@ 0x64
 8004f34:	d901      	bls.n	8004f3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e1f3      	b.n	8005322 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f3a:	4b51      	ldr	r3, [pc, #324]	@ (8005080 <HAL_RCC_OscConfig+0x240>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d1f0      	bne.n	8004f28 <HAL_RCC_OscConfig+0xe8>
 8004f46:	e000      	b.n	8004f4a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 0302 	and.w	r3, r3, #2
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d063      	beq.n	800501e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004f56:	4b4a      	ldr	r3, [pc, #296]	@ (8005080 <HAL_RCC_OscConfig+0x240>)
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	f003 030c 	and.w	r3, r3, #12
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d00b      	beq.n	8004f7a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f62:	4b47      	ldr	r3, [pc, #284]	@ (8005080 <HAL_RCC_OscConfig+0x240>)
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004f6a:	2b08      	cmp	r3, #8
 8004f6c:	d11c      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f6e:	4b44      	ldr	r3, [pc, #272]	@ (8005080 <HAL_RCC_OscConfig+0x240>)
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d116      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f7a:	4b41      	ldr	r3, [pc, #260]	@ (8005080 <HAL_RCC_OscConfig+0x240>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 0302 	and.w	r3, r3, #2
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d005      	beq.n	8004f92 <HAL_RCC_OscConfig+0x152>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d001      	beq.n	8004f92 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e1c7      	b.n	8005322 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f92:	4b3b      	ldr	r3, [pc, #236]	@ (8005080 <HAL_RCC_OscConfig+0x240>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	691b      	ldr	r3, [r3, #16]
 8004f9e:	00db      	lsls	r3, r3, #3
 8004fa0:	4937      	ldr	r1, [pc, #220]	@ (8005080 <HAL_RCC_OscConfig+0x240>)
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fa6:	e03a      	b.n	800501e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d020      	beq.n	8004ff2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fb0:	4b34      	ldr	r3, [pc, #208]	@ (8005084 <HAL_RCC_OscConfig+0x244>)
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fb6:	f7fe fbab 	bl	8003710 <HAL_GetTick>
 8004fba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fbc:	e008      	b.n	8004fd0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fbe:	f7fe fba7 	bl	8003710 <HAL_GetTick>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	2b02      	cmp	r3, #2
 8004fca:	d901      	bls.n	8004fd0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004fcc:	2303      	movs	r3, #3
 8004fce:	e1a8      	b.n	8005322 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fd0:	4b2b      	ldr	r3, [pc, #172]	@ (8005080 <HAL_RCC_OscConfig+0x240>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 0302 	and.w	r3, r3, #2
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d0f0      	beq.n	8004fbe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fdc:	4b28      	ldr	r3, [pc, #160]	@ (8005080 <HAL_RCC_OscConfig+0x240>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	691b      	ldr	r3, [r3, #16]
 8004fe8:	00db      	lsls	r3, r3, #3
 8004fea:	4925      	ldr	r1, [pc, #148]	@ (8005080 <HAL_RCC_OscConfig+0x240>)
 8004fec:	4313      	orrs	r3, r2
 8004fee:	600b      	str	r3, [r1, #0]
 8004ff0:	e015      	b.n	800501e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ff2:	4b24      	ldr	r3, [pc, #144]	@ (8005084 <HAL_RCC_OscConfig+0x244>)
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ff8:	f7fe fb8a 	bl	8003710 <HAL_GetTick>
 8004ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ffe:	e008      	b.n	8005012 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005000:	f7fe fb86 	bl	8003710 <HAL_GetTick>
 8005004:	4602      	mov	r2, r0
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	1ad3      	subs	r3, r2, r3
 800500a:	2b02      	cmp	r3, #2
 800500c:	d901      	bls.n	8005012 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
 8005010:	e187      	b.n	8005322 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005012:	4b1b      	ldr	r3, [pc, #108]	@ (8005080 <HAL_RCC_OscConfig+0x240>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 0302 	and.w	r3, r3, #2
 800501a:	2b00      	cmp	r3, #0
 800501c:	d1f0      	bne.n	8005000 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 0308 	and.w	r3, r3, #8
 8005026:	2b00      	cmp	r3, #0
 8005028:	d036      	beq.n	8005098 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	695b      	ldr	r3, [r3, #20]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d016      	beq.n	8005060 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005032:	4b15      	ldr	r3, [pc, #84]	@ (8005088 <HAL_RCC_OscConfig+0x248>)
 8005034:	2201      	movs	r2, #1
 8005036:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005038:	f7fe fb6a 	bl	8003710 <HAL_GetTick>
 800503c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800503e:	e008      	b.n	8005052 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005040:	f7fe fb66 	bl	8003710 <HAL_GetTick>
 8005044:	4602      	mov	r2, r0
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	2b02      	cmp	r3, #2
 800504c:	d901      	bls.n	8005052 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800504e:	2303      	movs	r3, #3
 8005050:	e167      	b.n	8005322 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005052:	4b0b      	ldr	r3, [pc, #44]	@ (8005080 <HAL_RCC_OscConfig+0x240>)
 8005054:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005056:	f003 0302 	and.w	r3, r3, #2
 800505a:	2b00      	cmp	r3, #0
 800505c:	d0f0      	beq.n	8005040 <HAL_RCC_OscConfig+0x200>
 800505e:	e01b      	b.n	8005098 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005060:	4b09      	ldr	r3, [pc, #36]	@ (8005088 <HAL_RCC_OscConfig+0x248>)
 8005062:	2200      	movs	r2, #0
 8005064:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005066:	f7fe fb53 	bl	8003710 <HAL_GetTick>
 800506a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800506c:	e00e      	b.n	800508c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800506e:	f7fe fb4f 	bl	8003710 <HAL_GetTick>
 8005072:	4602      	mov	r2, r0
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	1ad3      	subs	r3, r2, r3
 8005078:	2b02      	cmp	r3, #2
 800507a:	d907      	bls.n	800508c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800507c:	2303      	movs	r3, #3
 800507e:	e150      	b.n	8005322 <HAL_RCC_OscConfig+0x4e2>
 8005080:	40023800 	.word	0x40023800
 8005084:	42470000 	.word	0x42470000
 8005088:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800508c:	4b88      	ldr	r3, [pc, #544]	@ (80052b0 <HAL_RCC_OscConfig+0x470>)
 800508e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005090:	f003 0302 	and.w	r3, r3, #2
 8005094:	2b00      	cmp	r3, #0
 8005096:	d1ea      	bne.n	800506e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 0304 	and.w	r3, r3, #4
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	f000 8097 	beq.w	80051d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050a6:	2300      	movs	r3, #0
 80050a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050aa:	4b81      	ldr	r3, [pc, #516]	@ (80052b0 <HAL_RCC_OscConfig+0x470>)
 80050ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d10f      	bne.n	80050d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050b6:	2300      	movs	r3, #0
 80050b8:	60bb      	str	r3, [r7, #8]
 80050ba:	4b7d      	ldr	r3, [pc, #500]	@ (80052b0 <HAL_RCC_OscConfig+0x470>)
 80050bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050be:	4a7c      	ldr	r2, [pc, #496]	@ (80052b0 <HAL_RCC_OscConfig+0x470>)
 80050c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80050c6:	4b7a      	ldr	r3, [pc, #488]	@ (80052b0 <HAL_RCC_OscConfig+0x470>)
 80050c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050ce:	60bb      	str	r3, [r7, #8]
 80050d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050d2:	2301      	movs	r3, #1
 80050d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050d6:	4b77      	ldr	r3, [pc, #476]	@ (80052b4 <HAL_RCC_OscConfig+0x474>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d118      	bne.n	8005114 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050e2:	4b74      	ldr	r3, [pc, #464]	@ (80052b4 <HAL_RCC_OscConfig+0x474>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a73      	ldr	r2, [pc, #460]	@ (80052b4 <HAL_RCC_OscConfig+0x474>)
 80050e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050ee:	f7fe fb0f 	bl	8003710 <HAL_GetTick>
 80050f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050f4:	e008      	b.n	8005108 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050f6:	f7fe fb0b 	bl	8003710 <HAL_GetTick>
 80050fa:	4602      	mov	r2, r0
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	2b02      	cmp	r3, #2
 8005102:	d901      	bls.n	8005108 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005104:	2303      	movs	r3, #3
 8005106:	e10c      	b.n	8005322 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005108:	4b6a      	ldr	r3, [pc, #424]	@ (80052b4 <HAL_RCC_OscConfig+0x474>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005110:	2b00      	cmp	r3, #0
 8005112:	d0f0      	beq.n	80050f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	2b01      	cmp	r3, #1
 800511a:	d106      	bne.n	800512a <HAL_RCC_OscConfig+0x2ea>
 800511c:	4b64      	ldr	r3, [pc, #400]	@ (80052b0 <HAL_RCC_OscConfig+0x470>)
 800511e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005120:	4a63      	ldr	r2, [pc, #396]	@ (80052b0 <HAL_RCC_OscConfig+0x470>)
 8005122:	f043 0301 	orr.w	r3, r3, #1
 8005126:	6713      	str	r3, [r2, #112]	@ 0x70
 8005128:	e01c      	b.n	8005164 <HAL_RCC_OscConfig+0x324>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	2b05      	cmp	r3, #5
 8005130:	d10c      	bne.n	800514c <HAL_RCC_OscConfig+0x30c>
 8005132:	4b5f      	ldr	r3, [pc, #380]	@ (80052b0 <HAL_RCC_OscConfig+0x470>)
 8005134:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005136:	4a5e      	ldr	r2, [pc, #376]	@ (80052b0 <HAL_RCC_OscConfig+0x470>)
 8005138:	f043 0304 	orr.w	r3, r3, #4
 800513c:	6713      	str	r3, [r2, #112]	@ 0x70
 800513e:	4b5c      	ldr	r3, [pc, #368]	@ (80052b0 <HAL_RCC_OscConfig+0x470>)
 8005140:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005142:	4a5b      	ldr	r2, [pc, #364]	@ (80052b0 <HAL_RCC_OscConfig+0x470>)
 8005144:	f043 0301 	orr.w	r3, r3, #1
 8005148:	6713      	str	r3, [r2, #112]	@ 0x70
 800514a:	e00b      	b.n	8005164 <HAL_RCC_OscConfig+0x324>
 800514c:	4b58      	ldr	r3, [pc, #352]	@ (80052b0 <HAL_RCC_OscConfig+0x470>)
 800514e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005150:	4a57      	ldr	r2, [pc, #348]	@ (80052b0 <HAL_RCC_OscConfig+0x470>)
 8005152:	f023 0301 	bic.w	r3, r3, #1
 8005156:	6713      	str	r3, [r2, #112]	@ 0x70
 8005158:	4b55      	ldr	r3, [pc, #340]	@ (80052b0 <HAL_RCC_OscConfig+0x470>)
 800515a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800515c:	4a54      	ldr	r2, [pc, #336]	@ (80052b0 <HAL_RCC_OscConfig+0x470>)
 800515e:	f023 0304 	bic.w	r3, r3, #4
 8005162:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d015      	beq.n	8005198 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800516c:	f7fe fad0 	bl	8003710 <HAL_GetTick>
 8005170:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005172:	e00a      	b.n	800518a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005174:	f7fe facc 	bl	8003710 <HAL_GetTick>
 8005178:	4602      	mov	r2, r0
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005182:	4293      	cmp	r3, r2
 8005184:	d901      	bls.n	800518a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005186:	2303      	movs	r3, #3
 8005188:	e0cb      	b.n	8005322 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800518a:	4b49      	ldr	r3, [pc, #292]	@ (80052b0 <HAL_RCC_OscConfig+0x470>)
 800518c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800518e:	f003 0302 	and.w	r3, r3, #2
 8005192:	2b00      	cmp	r3, #0
 8005194:	d0ee      	beq.n	8005174 <HAL_RCC_OscConfig+0x334>
 8005196:	e014      	b.n	80051c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005198:	f7fe faba 	bl	8003710 <HAL_GetTick>
 800519c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800519e:	e00a      	b.n	80051b6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051a0:	f7fe fab6 	bl	8003710 <HAL_GetTick>
 80051a4:	4602      	mov	r2, r0
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d901      	bls.n	80051b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80051b2:	2303      	movs	r3, #3
 80051b4:	e0b5      	b.n	8005322 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051b6:	4b3e      	ldr	r3, [pc, #248]	@ (80052b0 <HAL_RCC_OscConfig+0x470>)
 80051b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051ba:	f003 0302 	and.w	r3, r3, #2
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d1ee      	bne.n	80051a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80051c2:	7dfb      	ldrb	r3, [r7, #23]
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d105      	bne.n	80051d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051c8:	4b39      	ldr	r3, [pc, #228]	@ (80052b0 <HAL_RCC_OscConfig+0x470>)
 80051ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051cc:	4a38      	ldr	r2, [pc, #224]	@ (80052b0 <HAL_RCC_OscConfig+0x470>)
 80051ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051d2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	699b      	ldr	r3, [r3, #24]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	f000 80a1 	beq.w	8005320 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80051de:	4b34      	ldr	r3, [pc, #208]	@ (80052b0 <HAL_RCC_OscConfig+0x470>)
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	f003 030c 	and.w	r3, r3, #12
 80051e6:	2b08      	cmp	r3, #8
 80051e8:	d05c      	beq.n	80052a4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	699b      	ldr	r3, [r3, #24]
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d141      	bne.n	8005276 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051f2:	4b31      	ldr	r3, [pc, #196]	@ (80052b8 <HAL_RCC_OscConfig+0x478>)
 80051f4:	2200      	movs	r2, #0
 80051f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051f8:	f7fe fa8a 	bl	8003710 <HAL_GetTick>
 80051fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051fe:	e008      	b.n	8005212 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005200:	f7fe fa86 	bl	8003710 <HAL_GetTick>
 8005204:	4602      	mov	r2, r0
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	2b02      	cmp	r3, #2
 800520c:	d901      	bls.n	8005212 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800520e:	2303      	movs	r3, #3
 8005210:	e087      	b.n	8005322 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005212:	4b27      	ldr	r3, [pc, #156]	@ (80052b0 <HAL_RCC_OscConfig+0x470>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800521a:	2b00      	cmp	r3, #0
 800521c:	d1f0      	bne.n	8005200 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	69da      	ldr	r2, [r3, #28]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a1b      	ldr	r3, [r3, #32]
 8005226:	431a      	orrs	r2, r3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800522c:	019b      	lsls	r3, r3, #6
 800522e:	431a      	orrs	r2, r3
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005234:	085b      	lsrs	r3, r3, #1
 8005236:	3b01      	subs	r3, #1
 8005238:	041b      	lsls	r3, r3, #16
 800523a:	431a      	orrs	r2, r3
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005240:	061b      	lsls	r3, r3, #24
 8005242:	491b      	ldr	r1, [pc, #108]	@ (80052b0 <HAL_RCC_OscConfig+0x470>)
 8005244:	4313      	orrs	r3, r2
 8005246:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005248:	4b1b      	ldr	r3, [pc, #108]	@ (80052b8 <HAL_RCC_OscConfig+0x478>)
 800524a:	2201      	movs	r2, #1
 800524c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800524e:	f7fe fa5f 	bl	8003710 <HAL_GetTick>
 8005252:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005254:	e008      	b.n	8005268 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005256:	f7fe fa5b 	bl	8003710 <HAL_GetTick>
 800525a:	4602      	mov	r2, r0
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	1ad3      	subs	r3, r2, r3
 8005260:	2b02      	cmp	r3, #2
 8005262:	d901      	bls.n	8005268 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005264:	2303      	movs	r3, #3
 8005266:	e05c      	b.n	8005322 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005268:	4b11      	ldr	r3, [pc, #68]	@ (80052b0 <HAL_RCC_OscConfig+0x470>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005270:	2b00      	cmp	r3, #0
 8005272:	d0f0      	beq.n	8005256 <HAL_RCC_OscConfig+0x416>
 8005274:	e054      	b.n	8005320 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005276:	4b10      	ldr	r3, [pc, #64]	@ (80052b8 <HAL_RCC_OscConfig+0x478>)
 8005278:	2200      	movs	r2, #0
 800527a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800527c:	f7fe fa48 	bl	8003710 <HAL_GetTick>
 8005280:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005282:	e008      	b.n	8005296 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005284:	f7fe fa44 	bl	8003710 <HAL_GetTick>
 8005288:	4602      	mov	r2, r0
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	2b02      	cmp	r3, #2
 8005290:	d901      	bls.n	8005296 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005292:	2303      	movs	r3, #3
 8005294:	e045      	b.n	8005322 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005296:	4b06      	ldr	r3, [pc, #24]	@ (80052b0 <HAL_RCC_OscConfig+0x470>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d1f0      	bne.n	8005284 <HAL_RCC_OscConfig+0x444>
 80052a2:	e03d      	b.n	8005320 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	699b      	ldr	r3, [r3, #24]
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d107      	bne.n	80052bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e038      	b.n	8005322 <HAL_RCC_OscConfig+0x4e2>
 80052b0:	40023800 	.word	0x40023800
 80052b4:	40007000 	.word	0x40007000
 80052b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80052bc:	4b1b      	ldr	r3, [pc, #108]	@ (800532c <HAL_RCC_OscConfig+0x4ec>)
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	699b      	ldr	r3, [r3, #24]
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d028      	beq.n	800531c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d121      	bne.n	800531c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d11a      	bne.n	800531c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052e6:	68fa      	ldr	r2, [r7, #12]
 80052e8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80052ec:	4013      	ands	r3, r2
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80052f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d111      	bne.n	800531c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005302:	085b      	lsrs	r3, r3, #1
 8005304:	3b01      	subs	r3, #1
 8005306:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005308:	429a      	cmp	r2, r3
 800530a:	d107      	bne.n	800531c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005316:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005318:	429a      	cmp	r2, r3
 800531a:	d001      	beq.n	8005320 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	e000      	b.n	8005322 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	3718      	adds	r7, #24
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	40023800 	.word	0x40023800

08005330 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b084      	sub	sp, #16
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d101      	bne.n	8005344 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	e0cc      	b.n	80054de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005344:	4b68      	ldr	r3, [pc, #416]	@ (80054e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 0307 	and.w	r3, r3, #7
 800534c:	683a      	ldr	r2, [r7, #0]
 800534e:	429a      	cmp	r2, r3
 8005350:	d90c      	bls.n	800536c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005352:	4b65      	ldr	r3, [pc, #404]	@ (80054e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005354:	683a      	ldr	r2, [r7, #0]
 8005356:	b2d2      	uxtb	r2, r2
 8005358:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800535a:	4b63      	ldr	r3, [pc, #396]	@ (80054e8 <HAL_RCC_ClockConfig+0x1b8>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 0307 	and.w	r3, r3, #7
 8005362:	683a      	ldr	r2, [r7, #0]
 8005364:	429a      	cmp	r2, r3
 8005366:	d001      	beq.n	800536c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e0b8      	b.n	80054de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 0302 	and.w	r3, r3, #2
 8005374:	2b00      	cmp	r3, #0
 8005376:	d020      	beq.n	80053ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 0304 	and.w	r3, r3, #4
 8005380:	2b00      	cmp	r3, #0
 8005382:	d005      	beq.n	8005390 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005384:	4b59      	ldr	r3, [pc, #356]	@ (80054ec <HAL_RCC_ClockConfig+0x1bc>)
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	4a58      	ldr	r2, [pc, #352]	@ (80054ec <HAL_RCC_ClockConfig+0x1bc>)
 800538a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800538e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 0308 	and.w	r3, r3, #8
 8005398:	2b00      	cmp	r3, #0
 800539a:	d005      	beq.n	80053a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800539c:	4b53      	ldr	r3, [pc, #332]	@ (80054ec <HAL_RCC_ClockConfig+0x1bc>)
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	4a52      	ldr	r2, [pc, #328]	@ (80054ec <HAL_RCC_ClockConfig+0x1bc>)
 80053a2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80053a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053a8:	4b50      	ldr	r3, [pc, #320]	@ (80054ec <HAL_RCC_ClockConfig+0x1bc>)
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	494d      	ldr	r1, [pc, #308]	@ (80054ec <HAL_RCC_ClockConfig+0x1bc>)
 80053b6:	4313      	orrs	r3, r2
 80053b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 0301 	and.w	r3, r3, #1
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d044      	beq.n	8005450 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	d107      	bne.n	80053de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053ce:	4b47      	ldr	r3, [pc, #284]	@ (80054ec <HAL_RCC_ClockConfig+0x1bc>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d119      	bne.n	800540e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e07f      	b.n	80054de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	d003      	beq.n	80053ee <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053ea:	2b03      	cmp	r3, #3
 80053ec:	d107      	bne.n	80053fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053ee:	4b3f      	ldr	r3, [pc, #252]	@ (80054ec <HAL_RCC_ClockConfig+0x1bc>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d109      	bne.n	800540e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	e06f      	b.n	80054de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053fe:	4b3b      	ldr	r3, [pc, #236]	@ (80054ec <HAL_RCC_ClockConfig+0x1bc>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f003 0302 	and.w	r3, r3, #2
 8005406:	2b00      	cmp	r3, #0
 8005408:	d101      	bne.n	800540e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e067      	b.n	80054de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800540e:	4b37      	ldr	r3, [pc, #220]	@ (80054ec <HAL_RCC_ClockConfig+0x1bc>)
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	f023 0203 	bic.w	r2, r3, #3
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	4934      	ldr	r1, [pc, #208]	@ (80054ec <HAL_RCC_ClockConfig+0x1bc>)
 800541c:	4313      	orrs	r3, r2
 800541e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005420:	f7fe f976 	bl	8003710 <HAL_GetTick>
 8005424:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005426:	e00a      	b.n	800543e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005428:	f7fe f972 	bl	8003710 <HAL_GetTick>
 800542c:	4602      	mov	r2, r0
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005436:	4293      	cmp	r3, r2
 8005438:	d901      	bls.n	800543e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	e04f      	b.n	80054de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800543e:	4b2b      	ldr	r3, [pc, #172]	@ (80054ec <HAL_RCC_ClockConfig+0x1bc>)
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	f003 020c 	and.w	r2, r3, #12
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	429a      	cmp	r2, r3
 800544e:	d1eb      	bne.n	8005428 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005450:	4b25      	ldr	r3, [pc, #148]	@ (80054e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 0307 	and.w	r3, r3, #7
 8005458:	683a      	ldr	r2, [r7, #0]
 800545a:	429a      	cmp	r2, r3
 800545c:	d20c      	bcs.n	8005478 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800545e:	4b22      	ldr	r3, [pc, #136]	@ (80054e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005460:	683a      	ldr	r2, [r7, #0]
 8005462:	b2d2      	uxtb	r2, r2
 8005464:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005466:	4b20      	ldr	r3, [pc, #128]	@ (80054e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 0307 	and.w	r3, r3, #7
 800546e:	683a      	ldr	r2, [r7, #0]
 8005470:	429a      	cmp	r2, r3
 8005472:	d001      	beq.n	8005478 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	e032      	b.n	80054de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 0304 	and.w	r3, r3, #4
 8005480:	2b00      	cmp	r3, #0
 8005482:	d008      	beq.n	8005496 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005484:	4b19      	ldr	r3, [pc, #100]	@ (80054ec <HAL_RCC_ClockConfig+0x1bc>)
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	4916      	ldr	r1, [pc, #88]	@ (80054ec <HAL_RCC_ClockConfig+0x1bc>)
 8005492:	4313      	orrs	r3, r2
 8005494:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 0308 	and.w	r3, r3, #8
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d009      	beq.n	80054b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054a2:	4b12      	ldr	r3, [pc, #72]	@ (80054ec <HAL_RCC_ClockConfig+0x1bc>)
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	00db      	lsls	r3, r3, #3
 80054b0:	490e      	ldr	r1, [pc, #56]	@ (80054ec <HAL_RCC_ClockConfig+0x1bc>)
 80054b2:	4313      	orrs	r3, r2
 80054b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80054b6:	f000 f821 	bl	80054fc <HAL_RCC_GetSysClockFreq>
 80054ba:	4602      	mov	r2, r0
 80054bc:	4b0b      	ldr	r3, [pc, #44]	@ (80054ec <HAL_RCC_ClockConfig+0x1bc>)
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	091b      	lsrs	r3, r3, #4
 80054c2:	f003 030f 	and.w	r3, r3, #15
 80054c6:	490a      	ldr	r1, [pc, #40]	@ (80054f0 <HAL_RCC_ClockConfig+0x1c0>)
 80054c8:	5ccb      	ldrb	r3, [r1, r3]
 80054ca:	fa22 f303 	lsr.w	r3, r2, r3
 80054ce:	4a09      	ldr	r2, [pc, #36]	@ (80054f4 <HAL_RCC_ClockConfig+0x1c4>)
 80054d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80054d2:	4b09      	ldr	r3, [pc, #36]	@ (80054f8 <HAL_RCC_ClockConfig+0x1c8>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4618      	mov	r0, r3
 80054d8:	f7fe f8d6 	bl	8003688 <HAL_InitTick>

  return HAL_OK;
 80054dc:	2300      	movs	r3, #0
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3710      	adds	r7, #16
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	bf00      	nop
 80054e8:	40023c00 	.word	0x40023c00
 80054ec:	40023800 	.word	0x40023800
 80054f0:	0800d284 	.word	0x0800d284
 80054f4:	20000020 	.word	0x20000020
 80054f8:	20000024 	.word	0x20000024

080054fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005500:	b090      	sub	sp, #64	@ 0x40
 8005502:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005504:	2300      	movs	r3, #0
 8005506:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8005508:	2300      	movs	r3, #0
 800550a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800550c:	2300      	movs	r3, #0
 800550e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005510:	2300      	movs	r3, #0
 8005512:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005514:	4b59      	ldr	r3, [pc, #356]	@ (800567c <HAL_RCC_GetSysClockFreq+0x180>)
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	f003 030c 	and.w	r3, r3, #12
 800551c:	2b08      	cmp	r3, #8
 800551e:	d00d      	beq.n	800553c <HAL_RCC_GetSysClockFreq+0x40>
 8005520:	2b08      	cmp	r3, #8
 8005522:	f200 80a1 	bhi.w	8005668 <HAL_RCC_GetSysClockFreq+0x16c>
 8005526:	2b00      	cmp	r3, #0
 8005528:	d002      	beq.n	8005530 <HAL_RCC_GetSysClockFreq+0x34>
 800552a:	2b04      	cmp	r3, #4
 800552c:	d003      	beq.n	8005536 <HAL_RCC_GetSysClockFreq+0x3a>
 800552e:	e09b      	b.n	8005668 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005530:	4b53      	ldr	r3, [pc, #332]	@ (8005680 <HAL_RCC_GetSysClockFreq+0x184>)
 8005532:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005534:	e09b      	b.n	800566e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005536:	4b53      	ldr	r3, [pc, #332]	@ (8005684 <HAL_RCC_GetSysClockFreq+0x188>)
 8005538:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800553a:	e098      	b.n	800566e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800553c:	4b4f      	ldr	r3, [pc, #316]	@ (800567c <HAL_RCC_GetSysClockFreq+0x180>)
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005544:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005546:	4b4d      	ldr	r3, [pc, #308]	@ (800567c <HAL_RCC_GetSysClockFreq+0x180>)
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800554e:	2b00      	cmp	r3, #0
 8005550:	d028      	beq.n	80055a4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005552:	4b4a      	ldr	r3, [pc, #296]	@ (800567c <HAL_RCC_GetSysClockFreq+0x180>)
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	099b      	lsrs	r3, r3, #6
 8005558:	2200      	movs	r2, #0
 800555a:	623b      	str	r3, [r7, #32]
 800555c:	627a      	str	r2, [r7, #36]	@ 0x24
 800555e:	6a3b      	ldr	r3, [r7, #32]
 8005560:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005564:	2100      	movs	r1, #0
 8005566:	4b47      	ldr	r3, [pc, #284]	@ (8005684 <HAL_RCC_GetSysClockFreq+0x188>)
 8005568:	fb03 f201 	mul.w	r2, r3, r1
 800556c:	2300      	movs	r3, #0
 800556e:	fb00 f303 	mul.w	r3, r0, r3
 8005572:	4413      	add	r3, r2
 8005574:	4a43      	ldr	r2, [pc, #268]	@ (8005684 <HAL_RCC_GetSysClockFreq+0x188>)
 8005576:	fba0 1202 	umull	r1, r2, r0, r2
 800557a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800557c:	460a      	mov	r2, r1
 800557e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005580:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005582:	4413      	add	r3, r2
 8005584:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005586:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005588:	2200      	movs	r2, #0
 800558a:	61bb      	str	r3, [r7, #24]
 800558c:	61fa      	str	r2, [r7, #28]
 800558e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005592:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005596:	f7fb fb77 	bl	8000c88 <__aeabi_uldivmod>
 800559a:	4602      	mov	r2, r0
 800559c:	460b      	mov	r3, r1
 800559e:	4613      	mov	r3, r2
 80055a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80055a2:	e053      	b.n	800564c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055a4:	4b35      	ldr	r3, [pc, #212]	@ (800567c <HAL_RCC_GetSysClockFreq+0x180>)
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	099b      	lsrs	r3, r3, #6
 80055aa:	2200      	movs	r2, #0
 80055ac:	613b      	str	r3, [r7, #16]
 80055ae:	617a      	str	r2, [r7, #20]
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80055b6:	f04f 0b00 	mov.w	fp, #0
 80055ba:	4652      	mov	r2, sl
 80055bc:	465b      	mov	r3, fp
 80055be:	f04f 0000 	mov.w	r0, #0
 80055c2:	f04f 0100 	mov.w	r1, #0
 80055c6:	0159      	lsls	r1, r3, #5
 80055c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80055cc:	0150      	lsls	r0, r2, #5
 80055ce:	4602      	mov	r2, r0
 80055d0:	460b      	mov	r3, r1
 80055d2:	ebb2 080a 	subs.w	r8, r2, sl
 80055d6:	eb63 090b 	sbc.w	r9, r3, fp
 80055da:	f04f 0200 	mov.w	r2, #0
 80055de:	f04f 0300 	mov.w	r3, #0
 80055e2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80055e6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80055ea:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80055ee:	ebb2 0408 	subs.w	r4, r2, r8
 80055f2:	eb63 0509 	sbc.w	r5, r3, r9
 80055f6:	f04f 0200 	mov.w	r2, #0
 80055fa:	f04f 0300 	mov.w	r3, #0
 80055fe:	00eb      	lsls	r3, r5, #3
 8005600:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005604:	00e2      	lsls	r2, r4, #3
 8005606:	4614      	mov	r4, r2
 8005608:	461d      	mov	r5, r3
 800560a:	eb14 030a 	adds.w	r3, r4, sl
 800560e:	603b      	str	r3, [r7, #0]
 8005610:	eb45 030b 	adc.w	r3, r5, fp
 8005614:	607b      	str	r3, [r7, #4]
 8005616:	f04f 0200 	mov.w	r2, #0
 800561a:	f04f 0300 	mov.w	r3, #0
 800561e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005622:	4629      	mov	r1, r5
 8005624:	028b      	lsls	r3, r1, #10
 8005626:	4621      	mov	r1, r4
 8005628:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800562c:	4621      	mov	r1, r4
 800562e:	028a      	lsls	r2, r1, #10
 8005630:	4610      	mov	r0, r2
 8005632:	4619      	mov	r1, r3
 8005634:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005636:	2200      	movs	r2, #0
 8005638:	60bb      	str	r3, [r7, #8]
 800563a:	60fa      	str	r2, [r7, #12]
 800563c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005640:	f7fb fb22 	bl	8000c88 <__aeabi_uldivmod>
 8005644:	4602      	mov	r2, r0
 8005646:	460b      	mov	r3, r1
 8005648:	4613      	mov	r3, r2
 800564a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800564c:	4b0b      	ldr	r3, [pc, #44]	@ (800567c <HAL_RCC_GetSysClockFreq+0x180>)
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	0c1b      	lsrs	r3, r3, #16
 8005652:	f003 0303 	and.w	r3, r3, #3
 8005656:	3301      	adds	r3, #1
 8005658:	005b      	lsls	r3, r3, #1
 800565a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800565c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800565e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005660:	fbb2 f3f3 	udiv	r3, r2, r3
 8005664:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005666:	e002      	b.n	800566e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005668:	4b05      	ldr	r3, [pc, #20]	@ (8005680 <HAL_RCC_GetSysClockFreq+0x184>)
 800566a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800566c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800566e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005670:	4618      	mov	r0, r3
 8005672:	3740      	adds	r7, #64	@ 0x40
 8005674:	46bd      	mov	sp, r7
 8005676:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800567a:	bf00      	nop
 800567c:	40023800 	.word	0x40023800
 8005680:	00f42400 	.word	0x00f42400
 8005684:	017d7840 	.word	0x017d7840

08005688 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005688:	b480      	push	{r7}
 800568a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800568c:	4b03      	ldr	r3, [pc, #12]	@ (800569c <HAL_RCC_GetHCLKFreq+0x14>)
 800568e:	681b      	ldr	r3, [r3, #0]
}
 8005690:	4618      	mov	r0, r3
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr
 800569a:	bf00      	nop
 800569c:	20000020 	.word	0x20000020

080056a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80056a4:	f7ff fff0 	bl	8005688 <HAL_RCC_GetHCLKFreq>
 80056a8:	4602      	mov	r2, r0
 80056aa:	4b05      	ldr	r3, [pc, #20]	@ (80056c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	0a9b      	lsrs	r3, r3, #10
 80056b0:	f003 0307 	and.w	r3, r3, #7
 80056b4:	4903      	ldr	r1, [pc, #12]	@ (80056c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80056b6:	5ccb      	ldrb	r3, [r1, r3]
 80056b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056bc:	4618      	mov	r0, r3
 80056be:	bd80      	pop	{r7, pc}
 80056c0:	40023800 	.word	0x40023800
 80056c4:	0800d294 	.word	0x0800d294

080056c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80056cc:	f7ff ffdc 	bl	8005688 <HAL_RCC_GetHCLKFreq>
 80056d0:	4602      	mov	r2, r0
 80056d2:	4b05      	ldr	r3, [pc, #20]	@ (80056e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	0b5b      	lsrs	r3, r3, #13
 80056d8:	f003 0307 	and.w	r3, r3, #7
 80056dc:	4903      	ldr	r1, [pc, #12]	@ (80056ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80056de:	5ccb      	ldrb	r3, [r1, r3]
 80056e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	bd80      	pop	{r7, pc}
 80056e8:	40023800 	.word	0x40023800
 80056ec:	0800d294 	.word	0x0800d294

080056f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b082      	sub	sp, #8
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d101      	bne.n	8005702 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e041      	b.n	8005786 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005708:	b2db      	uxtb	r3, r3
 800570a:	2b00      	cmp	r3, #0
 800570c:	d106      	bne.n	800571c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2200      	movs	r2, #0
 8005712:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f7fc fdac 	bl	8002274 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2202      	movs	r2, #2
 8005720:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	3304      	adds	r3, #4
 800572c:	4619      	mov	r1, r3
 800572e:	4610      	mov	r0, r2
 8005730:	f000 fe8c 	bl	800644c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2201      	movs	r2, #1
 8005758:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005784:	2300      	movs	r3, #0
}
 8005786:	4618      	mov	r0, r3
 8005788:	3708      	adds	r7, #8
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
	...

08005790 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005790:	b480      	push	{r7}
 8005792:	b085      	sub	sp, #20
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d001      	beq.n	80057a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	e04e      	b.n	8005846 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2202      	movs	r2, #2
 80057ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	68da      	ldr	r2, [r3, #12]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f042 0201 	orr.w	r2, r2, #1
 80057be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a23      	ldr	r2, [pc, #140]	@ (8005854 <HAL_TIM_Base_Start_IT+0xc4>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d022      	beq.n	8005810 <HAL_TIM_Base_Start_IT+0x80>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057d2:	d01d      	beq.n	8005810 <HAL_TIM_Base_Start_IT+0x80>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a1f      	ldr	r2, [pc, #124]	@ (8005858 <HAL_TIM_Base_Start_IT+0xc8>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d018      	beq.n	8005810 <HAL_TIM_Base_Start_IT+0x80>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a1e      	ldr	r2, [pc, #120]	@ (800585c <HAL_TIM_Base_Start_IT+0xcc>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d013      	beq.n	8005810 <HAL_TIM_Base_Start_IT+0x80>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a1c      	ldr	r2, [pc, #112]	@ (8005860 <HAL_TIM_Base_Start_IT+0xd0>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d00e      	beq.n	8005810 <HAL_TIM_Base_Start_IT+0x80>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a1b      	ldr	r2, [pc, #108]	@ (8005864 <HAL_TIM_Base_Start_IT+0xd4>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d009      	beq.n	8005810 <HAL_TIM_Base_Start_IT+0x80>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a19      	ldr	r2, [pc, #100]	@ (8005868 <HAL_TIM_Base_Start_IT+0xd8>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d004      	beq.n	8005810 <HAL_TIM_Base_Start_IT+0x80>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a18      	ldr	r2, [pc, #96]	@ (800586c <HAL_TIM_Base_Start_IT+0xdc>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d111      	bne.n	8005834 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	f003 0307 	and.w	r3, r3, #7
 800581a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2b06      	cmp	r3, #6
 8005820:	d010      	beq.n	8005844 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f042 0201 	orr.w	r2, r2, #1
 8005830:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005832:	e007      	b.n	8005844 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f042 0201 	orr.w	r2, r2, #1
 8005842:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005844:	2300      	movs	r3, #0
}
 8005846:	4618      	mov	r0, r3
 8005848:	3714      	adds	r7, #20
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr
 8005852:	bf00      	nop
 8005854:	40010000 	.word	0x40010000
 8005858:	40000400 	.word	0x40000400
 800585c:	40000800 	.word	0x40000800
 8005860:	40000c00 	.word	0x40000c00
 8005864:	40010400 	.word	0x40010400
 8005868:	40014000 	.word	0x40014000
 800586c:	40001800 	.word	0x40001800

08005870 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b082      	sub	sp, #8
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d101      	bne.n	8005882 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e041      	b.n	8005906 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005888:	b2db      	uxtb	r3, r3
 800588a:	2b00      	cmp	r3, #0
 800588c:	d106      	bne.n	800589c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 f839 	bl	800590e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2202      	movs	r2, #2
 80058a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	3304      	adds	r3, #4
 80058ac:	4619      	mov	r1, r3
 80058ae:	4610      	mov	r0, r2
 80058b0:	f000 fdcc 	bl	800644c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005904:	2300      	movs	r3, #0
}
 8005906:	4618      	mov	r0, r3
 8005908:	3708      	adds	r7, #8
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}

0800590e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800590e:	b480      	push	{r7}
 8005910:	b083      	sub	sp, #12
 8005912:	af00      	add	r7, sp, #0
 8005914:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005916:	bf00      	nop
 8005918:	370c      	adds	r7, #12
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr
	...

08005924 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b084      	sub	sp, #16
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d109      	bne.n	8005948 <HAL_TIM_PWM_Start+0x24>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800593a:	b2db      	uxtb	r3, r3
 800593c:	2b01      	cmp	r3, #1
 800593e:	bf14      	ite	ne
 8005940:	2301      	movne	r3, #1
 8005942:	2300      	moveq	r3, #0
 8005944:	b2db      	uxtb	r3, r3
 8005946:	e022      	b.n	800598e <HAL_TIM_PWM_Start+0x6a>
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	2b04      	cmp	r3, #4
 800594c:	d109      	bne.n	8005962 <HAL_TIM_PWM_Start+0x3e>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005954:	b2db      	uxtb	r3, r3
 8005956:	2b01      	cmp	r3, #1
 8005958:	bf14      	ite	ne
 800595a:	2301      	movne	r3, #1
 800595c:	2300      	moveq	r3, #0
 800595e:	b2db      	uxtb	r3, r3
 8005960:	e015      	b.n	800598e <HAL_TIM_PWM_Start+0x6a>
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	2b08      	cmp	r3, #8
 8005966:	d109      	bne.n	800597c <HAL_TIM_PWM_Start+0x58>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800596e:	b2db      	uxtb	r3, r3
 8005970:	2b01      	cmp	r3, #1
 8005972:	bf14      	ite	ne
 8005974:	2301      	movne	r3, #1
 8005976:	2300      	moveq	r3, #0
 8005978:	b2db      	uxtb	r3, r3
 800597a:	e008      	b.n	800598e <HAL_TIM_PWM_Start+0x6a>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005982:	b2db      	uxtb	r3, r3
 8005984:	2b01      	cmp	r3, #1
 8005986:	bf14      	ite	ne
 8005988:	2301      	movne	r3, #1
 800598a:	2300      	moveq	r3, #0
 800598c:	b2db      	uxtb	r3, r3
 800598e:	2b00      	cmp	r3, #0
 8005990:	d001      	beq.n	8005996 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	e07c      	b.n	8005a90 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d104      	bne.n	80059a6 <HAL_TIM_PWM_Start+0x82>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2202      	movs	r2, #2
 80059a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80059a4:	e013      	b.n	80059ce <HAL_TIM_PWM_Start+0xaa>
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	2b04      	cmp	r3, #4
 80059aa:	d104      	bne.n	80059b6 <HAL_TIM_PWM_Start+0x92>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2202      	movs	r2, #2
 80059b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80059b4:	e00b      	b.n	80059ce <HAL_TIM_PWM_Start+0xaa>
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	2b08      	cmp	r3, #8
 80059ba:	d104      	bne.n	80059c6 <HAL_TIM_PWM_Start+0xa2>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2202      	movs	r2, #2
 80059c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80059c4:	e003      	b.n	80059ce <HAL_TIM_PWM_Start+0xaa>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2202      	movs	r2, #2
 80059ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	2201      	movs	r2, #1
 80059d4:	6839      	ldr	r1, [r7, #0]
 80059d6:	4618      	mov	r0, r3
 80059d8:	f001 f952 	bl	8006c80 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a2d      	ldr	r2, [pc, #180]	@ (8005a98 <HAL_TIM_PWM_Start+0x174>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d004      	beq.n	80059f0 <HAL_TIM_PWM_Start+0xcc>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a2c      	ldr	r2, [pc, #176]	@ (8005a9c <HAL_TIM_PWM_Start+0x178>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d101      	bne.n	80059f4 <HAL_TIM_PWM_Start+0xd0>
 80059f0:	2301      	movs	r3, #1
 80059f2:	e000      	b.n	80059f6 <HAL_TIM_PWM_Start+0xd2>
 80059f4:	2300      	movs	r3, #0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d007      	beq.n	8005a0a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005a08:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a22      	ldr	r2, [pc, #136]	@ (8005a98 <HAL_TIM_PWM_Start+0x174>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d022      	beq.n	8005a5a <HAL_TIM_PWM_Start+0x136>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a1c:	d01d      	beq.n	8005a5a <HAL_TIM_PWM_Start+0x136>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a1f      	ldr	r2, [pc, #124]	@ (8005aa0 <HAL_TIM_PWM_Start+0x17c>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d018      	beq.n	8005a5a <HAL_TIM_PWM_Start+0x136>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a1d      	ldr	r2, [pc, #116]	@ (8005aa4 <HAL_TIM_PWM_Start+0x180>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d013      	beq.n	8005a5a <HAL_TIM_PWM_Start+0x136>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a1c      	ldr	r2, [pc, #112]	@ (8005aa8 <HAL_TIM_PWM_Start+0x184>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d00e      	beq.n	8005a5a <HAL_TIM_PWM_Start+0x136>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a16      	ldr	r2, [pc, #88]	@ (8005a9c <HAL_TIM_PWM_Start+0x178>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d009      	beq.n	8005a5a <HAL_TIM_PWM_Start+0x136>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a18      	ldr	r2, [pc, #96]	@ (8005aac <HAL_TIM_PWM_Start+0x188>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d004      	beq.n	8005a5a <HAL_TIM_PWM_Start+0x136>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a16      	ldr	r2, [pc, #88]	@ (8005ab0 <HAL_TIM_PWM_Start+0x18c>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d111      	bne.n	8005a7e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	f003 0307 	and.w	r3, r3, #7
 8005a64:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2b06      	cmp	r3, #6
 8005a6a:	d010      	beq.n	8005a8e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f042 0201 	orr.w	r2, r2, #1
 8005a7a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a7c:	e007      	b.n	8005a8e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f042 0201 	orr.w	r2, r2, #1
 8005a8c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a8e:	2300      	movs	r3, #0
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3710      	adds	r7, #16
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	40010000 	.word	0x40010000
 8005a9c:	40010400 	.word	0x40010400
 8005aa0:	40000400 	.word	0x40000400
 8005aa4:	40000800 	.word	0x40000800
 8005aa8:	40000c00 	.word	0x40000c00
 8005aac:	40014000 	.word	0x40014000
 8005ab0:	40001800 	.word	0x40001800

08005ab4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b082      	sub	sp, #8
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d101      	bne.n	8005ac6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e041      	b.n	8005b4a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d106      	bne.n	8005ae0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 f839 	bl	8005b52 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2202      	movs	r2, #2
 8005ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	3304      	adds	r3, #4
 8005af0:	4619      	mov	r1, r3
 8005af2:	4610      	mov	r0, r2
 8005af4:	f000 fcaa 	bl	800644c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2201      	movs	r2, #1
 8005b24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b48:	2300      	movs	r3, #0
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3708      	adds	r7, #8
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}

08005b52 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005b52:	b480      	push	{r7}
 8005b54:	b083      	sub	sp, #12
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005b5a:	bf00      	nop
 8005b5c:	370c      	adds	r7, #12
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr

08005b66 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005b66:	b580      	push	{r7, lr}
 8005b68:	b086      	sub	sp, #24
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	6078      	str	r0, [r7, #4]
 8005b6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d101      	bne.n	8005b7a <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e097      	b.n	8005caa <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d106      	bne.n	8005b94 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f7fc faf2 	bl	8002178 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2202      	movs	r2, #2
 8005b98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	6812      	ldr	r2, [r2, #0]
 8005ba6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005baa:	f023 0307 	bic.w	r3, r3, #7
 8005bae:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	3304      	adds	r3, #4
 8005bb8:	4619      	mov	r1, r3
 8005bba:	4610      	mov	r0, r2
 8005bbc:	f000 fc46 	bl	800644c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	699b      	ldr	r3, [r3, #24]
 8005bce:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	6a1b      	ldr	r3, [r3, #32]
 8005bd6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	697a      	ldr	r2, [r7, #20]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005be8:	f023 0303 	bic.w	r3, r3, #3
 8005bec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	689a      	ldr	r2, [r3, #8]
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	699b      	ldr	r3, [r3, #24]
 8005bf6:	021b      	lsls	r3, r3, #8
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	693a      	ldr	r2, [r7, #16]
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005c06:	f023 030c 	bic.w	r3, r3, #12
 8005c0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005c12:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005c16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	68da      	ldr	r2, [r3, #12]
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	69db      	ldr	r3, [r3, #28]
 8005c20:	021b      	lsls	r3, r3, #8
 8005c22:	4313      	orrs	r3, r2
 8005c24:	693a      	ldr	r2, [r7, #16]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	691b      	ldr	r3, [r3, #16]
 8005c2e:	011a      	lsls	r2, r3, #4
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	6a1b      	ldr	r3, [r3, #32]
 8005c34:	031b      	lsls	r3, r3, #12
 8005c36:	4313      	orrs	r3, r2
 8005c38:	693a      	ldr	r2, [r7, #16]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005c44:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005c4c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	685a      	ldr	r2, [r3, #4]
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	695b      	ldr	r3, [r3, #20]
 8005c56:	011b      	lsls	r3, r3, #4
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	68fa      	ldr	r2, [r7, #12]
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	697a      	ldr	r2, [r7, #20]
 8005c66:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	693a      	ldr	r2, [r7, #16]
 8005c6e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	68fa      	ldr	r2, [r7, #12]
 8005c76:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005ca8:	2300      	movs	r3, #0
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3718      	adds	r7, #24
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}

08005cb2 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005cb2:	b580      	push	{r7, lr}
 8005cb4:	b084      	sub	sp, #16
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	6078      	str	r0, [r7, #4]
 8005cba:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005cc2:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005cca:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005cd2:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005cda:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d110      	bne.n	8005d04 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ce2:	7bfb      	ldrb	r3, [r7, #15]
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d102      	bne.n	8005cee <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005ce8:	7b7b      	ldrb	r3, [r7, #13]
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d001      	beq.n	8005cf2 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e069      	b.n	8005dc6 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2202      	movs	r2, #2
 8005cf6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2202      	movs	r2, #2
 8005cfe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005d02:	e031      	b.n	8005d68 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	2b04      	cmp	r3, #4
 8005d08:	d110      	bne.n	8005d2c <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d0a:	7bbb      	ldrb	r3, [r7, #14]
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d102      	bne.n	8005d16 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005d10:	7b3b      	ldrb	r3, [r7, #12]
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d001      	beq.n	8005d1a <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e055      	b.n	8005dc6 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2202      	movs	r2, #2
 8005d1e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2202      	movs	r2, #2
 8005d26:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005d2a:	e01d      	b.n	8005d68 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d2c:	7bfb      	ldrb	r3, [r7, #15]
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d108      	bne.n	8005d44 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d32:	7bbb      	ldrb	r3, [r7, #14]
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d105      	bne.n	8005d44 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d38:	7b7b      	ldrb	r3, [r7, #13]
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d102      	bne.n	8005d44 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005d3e:	7b3b      	ldrb	r3, [r7, #12]
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d001      	beq.n	8005d48 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005d44:	2301      	movs	r3, #1
 8005d46:	e03e      	b.n	8005dc6 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2202      	movs	r2, #2
 8005d4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2202      	movs	r2, #2
 8005d54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2202      	movs	r2, #2
 8005d5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2202      	movs	r2, #2
 8005d64:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d003      	beq.n	8005d76 <HAL_TIM_Encoder_Start+0xc4>
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	2b04      	cmp	r3, #4
 8005d72:	d008      	beq.n	8005d86 <HAL_TIM_Encoder_Start+0xd4>
 8005d74:	e00f      	b.n	8005d96 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	2100      	movs	r1, #0
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f000 ff7e 	bl	8006c80 <TIM_CCxChannelCmd>
      break;
 8005d84:	e016      	b.n	8005db4 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	2104      	movs	r1, #4
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f000 ff76 	bl	8006c80 <TIM_CCxChannelCmd>
      break;
 8005d94:	e00e      	b.n	8005db4 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	2100      	movs	r1, #0
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f000 ff6e 	bl	8006c80 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	2201      	movs	r2, #1
 8005daa:	2104      	movs	r1, #4
 8005dac:	4618      	mov	r0, r3
 8005dae:	f000 ff67 	bl	8006c80 <TIM_CCxChannelCmd>
      break;
 8005db2:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f042 0201 	orr.w	r2, r2, #1
 8005dc2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005dc4:	2300      	movs	r3, #0
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3710      	adds	r7, #16
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}

08005dce <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005dce:	b580      	push	{r7, lr}
 8005dd0:	b084      	sub	sp, #16
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	691b      	ldr	r3, [r3, #16]
 8005de4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	f003 0302 	and.w	r3, r3, #2
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d020      	beq.n	8005e32 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f003 0302 	and.w	r3, r3, #2
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d01b      	beq.n	8005e32 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f06f 0202 	mvn.w	r2, #2
 8005e02:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2201      	movs	r2, #1
 8005e08:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	699b      	ldr	r3, [r3, #24]
 8005e10:	f003 0303 	and.w	r3, r3, #3
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d003      	beq.n	8005e20 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f000 faf8 	bl	800640e <HAL_TIM_IC_CaptureCallback>
 8005e1e:	e005      	b.n	8005e2c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f000 faea 	bl	80063fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f000 fafb 	bl	8006422 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	f003 0304 	and.w	r3, r3, #4
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d020      	beq.n	8005e7e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f003 0304 	and.w	r3, r3, #4
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d01b      	beq.n	8005e7e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f06f 0204 	mvn.w	r2, #4
 8005e4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2202      	movs	r2, #2
 8005e54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	699b      	ldr	r3, [r3, #24]
 8005e5c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d003      	beq.n	8005e6c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f000 fad2 	bl	800640e <HAL_TIM_IC_CaptureCallback>
 8005e6a:	e005      	b.n	8005e78 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f000 fac4 	bl	80063fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 fad5 	bl	8006422 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	f003 0308 	and.w	r3, r3, #8
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d020      	beq.n	8005eca <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f003 0308 	and.w	r3, r3, #8
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d01b      	beq.n	8005eca <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f06f 0208 	mvn.w	r2, #8
 8005e9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2204      	movs	r2, #4
 8005ea0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	69db      	ldr	r3, [r3, #28]
 8005ea8:	f003 0303 	and.w	r3, r3, #3
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d003      	beq.n	8005eb8 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f000 faac 	bl	800640e <HAL_TIM_IC_CaptureCallback>
 8005eb6:	e005      	b.n	8005ec4 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f000 fa9e 	bl	80063fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 faaf 	bl	8006422 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	f003 0310 	and.w	r3, r3, #16
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d020      	beq.n	8005f16 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f003 0310 	and.w	r3, r3, #16
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d01b      	beq.n	8005f16 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f06f 0210 	mvn.w	r2, #16
 8005ee6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2208      	movs	r2, #8
 8005eec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	69db      	ldr	r3, [r3, #28]
 8005ef4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d003      	beq.n	8005f04 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f000 fa86 	bl	800640e <HAL_TIM_IC_CaptureCallback>
 8005f02:	e005      	b.n	8005f10 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f000 fa78 	bl	80063fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f000 fa89 	bl	8006422 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2200      	movs	r2, #0
 8005f14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	f003 0301 	and.w	r3, r3, #1
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d00c      	beq.n	8005f3a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f003 0301 	and.w	r3, r3, #1
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d007      	beq.n	8005f3a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f06f 0201 	mvn.w	r2, #1
 8005f32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f7fb fd39 	bl	80019ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d00c      	beq.n	8005f5e <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d007      	beq.n	8005f5e <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005f56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 ff3d 	bl	8006dd8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d00c      	beq.n	8005f82 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d007      	beq.n	8005f82 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005f7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f000 fa5a 	bl	8006436 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	f003 0320 	and.w	r3, r3, #32
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d00c      	beq.n	8005fa6 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f003 0320 	and.w	r3, r3, #32
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d007      	beq.n	8005fa6 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f06f 0220 	mvn.w	r2, #32
 8005f9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f000 ff0f 	bl	8006dc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005fa6:	bf00      	nop
 8005fa8:	3710      	adds	r7, #16
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}

08005fae <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005fae:	b580      	push	{r7, lr}
 8005fb0:	b086      	sub	sp, #24
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	60f8      	str	r0, [r7, #12]
 8005fb6:	60b9      	str	r1, [r7, #8]
 8005fb8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d101      	bne.n	8005fcc <HAL_TIM_IC_ConfigChannel+0x1e>
 8005fc8:	2302      	movs	r3, #2
 8005fca:	e088      	b.n	80060de <HAL_TIM_IC_ConfigChannel+0x130>
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d11b      	bne.n	8006012 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005fea:	f000 fc85 	bl	80068f8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	699a      	ldr	r2, [r3, #24]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f022 020c 	bic.w	r2, r2, #12
 8005ffc:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	6999      	ldr	r1, [r3, #24]
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	689a      	ldr	r2, [r3, #8]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	430a      	orrs	r2, r1
 800600e:	619a      	str	r2, [r3, #24]
 8006010:	e060      	b.n	80060d4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2b04      	cmp	r3, #4
 8006016:	d11c      	bne.n	8006052 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8006028:	f000 fd09 	bl	8006a3e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	699a      	ldr	r2, [r3, #24]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800603a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	6999      	ldr	r1, [r3, #24]
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	021a      	lsls	r2, r3, #8
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	430a      	orrs	r2, r1
 800604e:	619a      	str	r2, [r3, #24]
 8006050:	e040      	b.n	80060d4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2b08      	cmp	r3, #8
 8006056:	d11b      	bne.n	8006090 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8006068:	f000 fd56 	bl	8006b18 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	69da      	ldr	r2, [r3, #28]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f022 020c 	bic.w	r2, r2, #12
 800607a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	69d9      	ldr	r1, [r3, #28]
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	689a      	ldr	r2, [r3, #8]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	430a      	orrs	r2, r1
 800608c:	61da      	str	r2, [r3, #28]
 800608e:	e021      	b.n	80060d4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2b0c      	cmp	r3, #12
 8006094:	d11c      	bne.n	80060d0 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80060a6:	f000 fd73 	bl	8006b90 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	69da      	ldr	r2, [r3, #28]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80060b8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	69d9      	ldr	r1, [r3, #28]
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	021a      	lsls	r2, r3, #8
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	430a      	orrs	r2, r1
 80060cc:	61da      	str	r2, [r3, #28]
 80060ce:	e001      	b.n	80060d4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2200      	movs	r2, #0
 80060d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80060dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3718      	adds	r7, #24
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}
	...

080060e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b086      	sub	sp, #24
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	60f8      	str	r0, [r7, #12]
 80060f0:	60b9      	str	r1, [r7, #8]
 80060f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060f4:	2300      	movs	r3, #0
 80060f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d101      	bne.n	8006106 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006102:	2302      	movs	r3, #2
 8006104:	e0ae      	b.n	8006264 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2201      	movs	r2, #1
 800610a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2b0c      	cmp	r3, #12
 8006112:	f200 809f 	bhi.w	8006254 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006116:	a201      	add	r2, pc, #4	@ (adr r2, 800611c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800611c:	08006151 	.word	0x08006151
 8006120:	08006255 	.word	0x08006255
 8006124:	08006255 	.word	0x08006255
 8006128:	08006255 	.word	0x08006255
 800612c:	08006191 	.word	0x08006191
 8006130:	08006255 	.word	0x08006255
 8006134:	08006255 	.word	0x08006255
 8006138:	08006255 	.word	0x08006255
 800613c:	080061d3 	.word	0x080061d3
 8006140:	08006255 	.word	0x08006255
 8006144:	08006255 	.word	0x08006255
 8006148:	08006255 	.word	0x08006255
 800614c:	08006213 	.word	0x08006213
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	68b9      	ldr	r1, [r7, #8]
 8006156:	4618      	mov	r0, r3
 8006158:	f000 fa1e 	bl	8006598 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	699a      	ldr	r2, [r3, #24]
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f042 0208 	orr.w	r2, r2, #8
 800616a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	699a      	ldr	r2, [r3, #24]
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f022 0204 	bic.w	r2, r2, #4
 800617a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	6999      	ldr	r1, [r3, #24]
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	691a      	ldr	r2, [r3, #16]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	430a      	orrs	r2, r1
 800618c:	619a      	str	r2, [r3, #24]
      break;
 800618e:	e064      	b.n	800625a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	68b9      	ldr	r1, [r7, #8]
 8006196:	4618      	mov	r0, r3
 8006198:	f000 fa6e 	bl	8006678 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	699a      	ldr	r2, [r3, #24]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80061aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	699a      	ldr	r2, [r3, #24]
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	6999      	ldr	r1, [r3, #24]
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	691b      	ldr	r3, [r3, #16]
 80061c6:	021a      	lsls	r2, r3, #8
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	430a      	orrs	r2, r1
 80061ce:	619a      	str	r2, [r3, #24]
      break;
 80061d0:	e043      	b.n	800625a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	68b9      	ldr	r1, [r7, #8]
 80061d8:	4618      	mov	r0, r3
 80061da:	f000 fac3 	bl	8006764 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	69da      	ldr	r2, [r3, #28]
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f042 0208 	orr.w	r2, r2, #8
 80061ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	69da      	ldr	r2, [r3, #28]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f022 0204 	bic.w	r2, r2, #4
 80061fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	69d9      	ldr	r1, [r3, #28]
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	691a      	ldr	r2, [r3, #16]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	430a      	orrs	r2, r1
 800620e:	61da      	str	r2, [r3, #28]
      break;
 8006210:	e023      	b.n	800625a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	68b9      	ldr	r1, [r7, #8]
 8006218:	4618      	mov	r0, r3
 800621a:	f000 fb17 	bl	800684c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	69da      	ldr	r2, [r3, #28]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800622c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	69da      	ldr	r2, [r3, #28]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800623c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	69d9      	ldr	r1, [r3, #28]
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	691b      	ldr	r3, [r3, #16]
 8006248:	021a      	lsls	r2, r3, #8
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	430a      	orrs	r2, r1
 8006250:	61da      	str	r2, [r3, #28]
      break;
 8006252:	e002      	b.n	800625a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	75fb      	strb	r3, [r7, #23]
      break;
 8006258:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2200      	movs	r2, #0
 800625e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006262:	7dfb      	ldrb	r3, [r7, #23]
}
 8006264:	4618      	mov	r0, r3
 8006266:	3718      	adds	r7, #24
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}

0800626c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b084      	sub	sp, #16
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006276:	2300      	movs	r3, #0
 8006278:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006280:	2b01      	cmp	r3, #1
 8006282:	d101      	bne.n	8006288 <HAL_TIM_ConfigClockSource+0x1c>
 8006284:	2302      	movs	r3, #2
 8006286:	e0b4      	b.n	80063f2 <HAL_TIM_ConfigClockSource+0x186>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2202      	movs	r2, #2
 8006294:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80062a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80062ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	68ba      	ldr	r2, [r7, #8]
 80062b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062c0:	d03e      	beq.n	8006340 <HAL_TIM_ConfigClockSource+0xd4>
 80062c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062c6:	f200 8087 	bhi.w	80063d8 <HAL_TIM_ConfigClockSource+0x16c>
 80062ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062ce:	f000 8086 	beq.w	80063de <HAL_TIM_ConfigClockSource+0x172>
 80062d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062d6:	d87f      	bhi.n	80063d8 <HAL_TIM_ConfigClockSource+0x16c>
 80062d8:	2b70      	cmp	r3, #112	@ 0x70
 80062da:	d01a      	beq.n	8006312 <HAL_TIM_ConfigClockSource+0xa6>
 80062dc:	2b70      	cmp	r3, #112	@ 0x70
 80062de:	d87b      	bhi.n	80063d8 <HAL_TIM_ConfigClockSource+0x16c>
 80062e0:	2b60      	cmp	r3, #96	@ 0x60
 80062e2:	d050      	beq.n	8006386 <HAL_TIM_ConfigClockSource+0x11a>
 80062e4:	2b60      	cmp	r3, #96	@ 0x60
 80062e6:	d877      	bhi.n	80063d8 <HAL_TIM_ConfigClockSource+0x16c>
 80062e8:	2b50      	cmp	r3, #80	@ 0x50
 80062ea:	d03c      	beq.n	8006366 <HAL_TIM_ConfigClockSource+0xfa>
 80062ec:	2b50      	cmp	r3, #80	@ 0x50
 80062ee:	d873      	bhi.n	80063d8 <HAL_TIM_ConfigClockSource+0x16c>
 80062f0:	2b40      	cmp	r3, #64	@ 0x40
 80062f2:	d058      	beq.n	80063a6 <HAL_TIM_ConfigClockSource+0x13a>
 80062f4:	2b40      	cmp	r3, #64	@ 0x40
 80062f6:	d86f      	bhi.n	80063d8 <HAL_TIM_ConfigClockSource+0x16c>
 80062f8:	2b30      	cmp	r3, #48	@ 0x30
 80062fa:	d064      	beq.n	80063c6 <HAL_TIM_ConfigClockSource+0x15a>
 80062fc:	2b30      	cmp	r3, #48	@ 0x30
 80062fe:	d86b      	bhi.n	80063d8 <HAL_TIM_ConfigClockSource+0x16c>
 8006300:	2b20      	cmp	r3, #32
 8006302:	d060      	beq.n	80063c6 <HAL_TIM_ConfigClockSource+0x15a>
 8006304:	2b20      	cmp	r3, #32
 8006306:	d867      	bhi.n	80063d8 <HAL_TIM_ConfigClockSource+0x16c>
 8006308:	2b00      	cmp	r3, #0
 800630a:	d05c      	beq.n	80063c6 <HAL_TIM_ConfigClockSource+0x15a>
 800630c:	2b10      	cmp	r3, #16
 800630e:	d05a      	beq.n	80063c6 <HAL_TIM_ConfigClockSource+0x15a>
 8006310:	e062      	b.n	80063d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006322:	f000 fc8d 	bl	8006c40 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006334:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	68ba      	ldr	r2, [r7, #8]
 800633c:	609a      	str	r2, [r3, #8]
      break;
 800633e:	e04f      	b.n	80063e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006350:	f000 fc76 	bl	8006c40 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	689a      	ldr	r2, [r3, #8]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006362:	609a      	str	r2, [r3, #8]
      break;
 8006364:	e03c      	b.n	80063e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006372:	461a      	mov	r2, r3
 8006374:	f000 fb34 	bl	80069e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	2150      	movs	r1, #80	@ 0x50
 800637e:	4618      	mov	r0, r3
 8006380:	f000 fc43 	bl	8006c0a <TIM_ITRx_SetConfig>
      break;
 8006384:	e02c      	b.n	80063e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006392:	461a      	mov	r2, r3
 8006394:	f000 fb90 	bl	8006ab8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	2160      	movs	r1, #96	@ 0x60
 800639e:	4618      	mov	r0, r3
 80063a0:	f000 fc33 	bl	8006c0a <TIM_ITRx_SetConfig>
      break;
 80063a4:	e01c      	b.n	80063e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80063b2:	461a      	mov	r2, r3
 80063b4:	f000 fb14 	bl	80069e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	2140      	movs	r1, #64	@ 0x40
 80063be:	4618      	mov	r0, r3
 80063c0:	f000 fc23 	bl	8006c0a <TIM_ITRx_SetConfig>
      break;
 80063c4:	e00c      	b.n	80063e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4619      	mov	r1, r3
 80063d0:	4610      	mov	r0, r2
 80063d2:	f000 fc1a 	bl	8006c0a <TIM_ITRx_SetConfig>
      break;
 80063d6:	e003      	b.n	80063e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80063d8:	2301      	movs	r3, #1
 80063da:	73fb      	strb	r3, [r7, #15]
      break;
 80063dc:	e000      	b.n	80063e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80063de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2201      	movs	r2, #1
 80063e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2200      	movs	r2, #0
 80063ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80063f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3710      	adds	r7, #16
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}

080063fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80063fa:	b480      	push	{r7}
 80063fc:	b083      	sub	sp, #12
 80063fe:	af00      	add	r7, sp, #0
 8006400:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006402:	bf00      	nop
 8006404:	370c      	adds	r7, #12
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr

0800640e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800640e:	b480      	push	{r7}
 8006410:	b083      	sub	sp, #12
 8006412:	af00      	add	r7, sp, #0
 8006414:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006416:	bf00      	nop
 8006418:	370c      	adds	r7, #12
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr

08006422 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006422:	b480      	push	{r7}
 8006424:	b083      	sub	sp, #12
 8006426:	af00      	add	r7, sp, #0
 8006428:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800642a:	bf00      	nop
 800642c:	370c      	adds	r7, #12
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr

08006436 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006436:	b480      	push	{r7}
 8006438:	b083      	sub	sp, #12
 800643a:	af00      	add	r7, sp, #0
 800643c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800643e:	bf00      	nop
 8006440:	370c      	adds	r7, #12
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr
	...

0800644c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800644c:	b480      	push	{r7}
 800644e:	b085      	sub	sp, #20
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	4a43      	ldr	r2, [pc, #268]	@ (800656c <TIM_Base_SetConfig+0x120>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d013      	beq.n	800648c <TIM_Base_SetConfig+0x40>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800646a:	d00f      	beq.n	800648c <TIM_Base_SetConfig+0x40>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	4a40      	ldr	r2, [pc, #256]	@ (8006570 <TIM_Base_SetConfig+0x124>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d00b      	beq.n	800648c <TIM_Base_SetConfig+0x40>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	4a3f      	ldr	r2, [pc, #252]	@ (8006574 <TIM_Base_SetConfig+0x128>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d007      	beq.n	800648c <TIM_Base_SetConfig+0x40>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	4a3e      	ldr	r2, [pc, #248]	@ (8006578 <TIM_Base_SetConfig+0x12c>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d003      	beq.n	800648c <TIM_Base_SetConfig+0x40>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	4a3d      	ldr	r2, [pc, #244]	@ (800657c <TIM_Base_SetConfig+0x130>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d108      	bne.n	800649e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006492:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	68fa      	ldr	r2, [r7, #12]
 800649a:	4313      	orrs	r3, r2
 800649c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4a32      	ldr	r2, [pc, #200]	@ (800656c <TIM_Base_SetConfig+0x120>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d02b      	beq.n	80064fe <TIM_Base_SetConfig+0xb2>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064ac:	d027      	beq.n	80064fe <TIM_Base_SetConfig+0xb2>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	4a2f      	ldr	r2, [pc, #188]	@ (8006570 <TIM_Base_SetConfig+0x124>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d023      	beq.n	80064fe <TIM_Base_SetConfig+0xb2>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	4a2e      	ldr	r2, [pc, #184]	@ (8006574 <TIM_Base_SetConfig+0x128>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d01f      	beq.n	80064fe <TIM_Base_SetConfig+0xb2>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	4a2d      	ldr	r2, [pc, #180]	@ (8006578 <TIM_Base_SetConfig+0x12c>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d01b      	beq.n	80064fe <TIM_Base_SetConfig+0xb2>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	4a2c      	ldr	r2, [pc, #176]	@ (800657c <TIM_Base_SetConfig+0x130>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d017      	beq.n	80064fe <TIM_Base_SetConfig+0xb2>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	4a2b      	ldr	r2, [pc, #172]	@ (8006580 <TIM_Base_SetConfig+0x134>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d013      	beq.n	80064fe <TIM_Base_SetConfig+0xb2>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	4a2a      	ldr	r2, [pc, #168]	@ (8006584 <TIM_Base_SetConfig+0x138>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d00f      	beq.n	80064fe <TIM_Base_SetConfig+0xb2>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	4a29      	ldr	r2, [pc, #164]	@ (8006588 <TIM_Base_SetConfig+0x13c>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d00b      	beq.n	80064fe <TIM_Base_SetConfig+0xb2>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	4a28      	ldr	r2, [pc, #160]	@ (800658c <TIM_Base_SetConfig+0x140>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d007      	beq.n	80064fe <TIM_Base_SetConfig+0xb2>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	4a27      	ldr	r2, [pc, #156]	@ (8006590 <TIM_Base_SetConfig+0x144>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d003      	beq.n	80064fe <TIM_Base_SetConfig+0xb2>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	4a26      	ldr	r2, [pc, #152]	@ (8006594 <TIM_Base_SetConfig+0x148>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d108      	bne.n	8006510 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006504:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	68db      	ldr	r3, [r3, #12]
 800650a:	68fa      	ldr	r2, [r7, #12]
 800650c:	4313      	orrs	r3, r2
 800650e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	695b      	ldr	r3, [r3, #20]
 800651a:	4313      	orrs	r3, r2
 800651c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	689a      	ldr	r2, [r3, #8]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4a0e      	ldr	r2, [pc, #56]	@ (800656c <TIM_Base_SetConfig+0x120>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d003      	beq.n	800653e <TIM_Base_SetConfig+0xf2>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4a10      	ldr	r2, [pc, #64]	@ (800657c <TIM_Base_SetConfig+0x130>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d103      	bne.n	8006546 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	691a      	ldr	r2, [r3, #16]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f043 0204 	orr.w	r2, r3, #4
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2201      	movs	r2, #1
 8006556:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	68fa      	ldr	r2, [r7, #12]
 800655c:	601a      	str	r2, [r3, #0]
}
 800655e:	bf00      	nop
 8006560:	3714      	adds	r7, #20
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr
 800656a:	bf00      	nop
 800656c:	40010000 	.word	0x40010000
 8006570:	40000400 	.word	0x40000400
 8006574:	40000800 	.word	0x40000800
 8006578:	40000c00 	.word	0x40000c00
 800657c:	40010400 	.word	0x40010400
 8006580:	40014000 	.word	0x40014000
 8006584:	40014400 	.word	0x40014400
 8006588:	40014800 	.word	0x40014800
 800658c:	40001800 	.word	0x40001800
 8006590:	40001c00 	.word	0x40001c00
 8006594:	40002000 	.word	0x40002000

08006598 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006598:	b480      	push	{r7}
 800659a:	b087      	sub	sp, #28
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a1b      	ldr	r3, [r3, #32]
 80065a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6a1b      	ldr	r3, [r3, #32]
 80065ac:	f023 0201 	bic.w	r2, r3, #1
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	699b      	ldr	r3, [r3, #24]
 80065be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f023 0303 	bic.w	r3, r3, #3
 80065ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	68fa      	ldr	r2, [r7, #12]
 80065d6:	4313      	orrs	r3, r2
 80065d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	f023 0302 	bic.w	r3, r3, #2
 80065e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	689b      	ldr	r3, [r3, #8]
 80065e6:	697a      	ldr	r2, [r7, #20]
 80065e8:	4313      	orrs	r3, r2
 80065ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	4a20      	ldr	r2, [pc, #128]	@ (8006670 <TIM_OC1_SetConfig+0xd8>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d003      	beq.n	80065fc <TIM_OC1_SetConfig+0x64>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	4a1f      	ldr	r2, [pc, #124]	@ (8006674 <TIM_OC1_SetConfig+0xdc>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d10c      	bne.n	8006616 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	f023 0308 	bic.w	r3, r3, #8
 8006602:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	68db      	ldr	r3, [r3, #12]
 8006608:	697a      	ldr	r2, [r7, #20]
 800660a:	4313      	orrs	r3, r2
 800660c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	f023 0304 	bic.w	r3, r3, #4
 8006614:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	4a15      	ldr	r2, [pc, #84]	@ (8006670 <TIM_OC1_SetConfig+0xd8>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d003      	beq.n	8006626 <TIM_OC1_SetConfig+0x8e>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	4a14      	ldr	r2, [pc, #80]	@ (8006674 <TIM_OC1_SetConfig+0xdc>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d111      	bne.n	800664a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800662c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006634:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	695b      	ldr	r3, [r3, #20]
 800663a:	693a      	ldr	r2, [r7, #16]
 800663c:	4313      	orrs	r3, r2
 800663e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	699b      	ldr	r3, [r3, #24]
 8006644:	693a      	ldr	r2, [r7, #16]
 8006646:	4313      	orrs	r3, r2
 8006648:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	693a      	ldr	r2, [r7, #16]
 800664e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	68fa      	ldr	r2, [r7, #12]
 8006654:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	685a      	ldr	r2, [r3, #4]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	697a      	ldr	r2, [r7, #20]
 8006662:	621a      	str	r2, [r3, #32]
}
 8006664:	bf00      	nop
 8006666:	371c      	adds	r7, #28
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr
 8006670:	40010000 	.word	0x40010000
 8006674:	40010400 	.word	0x40010400

08006678 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006678:	b480      	push	{r7}
 800667a:	b087      	sub	sp, #28
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6a1b      	ldr	r3, [r3, #32]
 8006686:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6a1b      	ldr	r3, [r3, #32]
 800668c:	f023 0210 	bic.w	r2, r3, #16
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	699b      	ldr	r3, [r3, #24]
 800669e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	021b      	lsls	r3, r3, #8
 80066b6:	68fa      	ldr	r2, [r7, #12]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	f023 0320 	bic.w	r3, r3, #32
 80066c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	011b      	lsls	r3, r3, #4
 80066ca:	697a      	ldr	r2, [r7, #20]
 80066cc:	4313      	orrs	r3, r2
 80066ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	4a22      	ldr	r2, [pc, #136]	@ (800675c <TIM_OC2_SetConfig+0xe4>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d003      	beq.n	80066e0 <TIM_OC2_SetConfig+0x68>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	4a21      	ldr	r2, [pc, #132]	@ (8006760 <TIM_OC2_SetConfig+0xe8>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d10d      	bne.n	80066fc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80066e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	68db      	ldr	r3, [r3, #12]
 80066ec:	011b      	lsls	r3, r3, #4
 80066ee:	697a      	ldr	r2, [r7, #20]
 80066f0:	4313      	orrs	r3, r2
 80066f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066fa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	4a17      	ldr	r2, [pc, #92]	@ (800675c <TIM_OC2_SetConfig+0xe4>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d003      	beq.n	800670c <TIM_OC2_SetConfig+0x94>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	4a16      	ldr	r2, [pc, #88]	@ (8006760 <TIM_OC2_SetConfig+0xe8>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d113      	bne.n	8006734 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006712:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800671a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	695b      	ldr	r3, [r3, #20]
 8006720:	009b      	lsls	r3, r3, #2
 8006722:	693a      	ldr	r2, [r7, #16]
 8006724:	4313      	orrs	r3, r2
 8006726:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	699b      	ldr	r3, [r3, #24]
 800672c:	009b      	lsls	r3, r3, #2
 800672e:	693a      	ldr	r2, [r7, #16]
 8006730:	4313      	orrs	r3, r2
 8006732:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	693a      	ldr	r2, [r7, #16]
 8006738:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	68fa      	ldr	r2, [r7, #12]
 800673e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	685a      	ldr	r2, [r3, #4]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	697a      	ldr	r2, [r7, #20]
 800674c:	621a      	str	r2, [r3, #32]
}
 800674e:	bf00      	nop
 8006750:	371c      	adds	r7, #28
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr
 800675a:	bf00      	nop
 800675c:	40010000 	.word	0x40010000
 8006760:	40010400 	.word	0x40010400

08006764 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006764:	b480      	push	{r7}
 8006766:	b087      	sub	sp, #28
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6a1b      	ldr	r3, [r3, #32]
 8006772:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6a1b      	ldr	r3, [r3, #32]
 8006778:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	69db      	ldr	r3, [r3, #28]
 800678a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006792:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f023 0303 	bic.w	r3, r3, #3
 800679a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	68fa      	ldr	r2, [r7, #12]
 80067a2:	4313      	orrs	r3, r2
 80067a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80067ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	021b      	lsls	r3, r3, #8
 80067b4:	697a      	ldr	r2, [r7, #20]
 80067b6:	4313      	orrs	r3, r2
 80067b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	4a21      	ldr	r2, [pc, #132]	@ (8006844 <TIM_OC3_SetConfig+0xe0>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d003      	beq.n	80067ca <TIM_OC3_SetConfig+0x66>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	4a20      	ldr	r2, [pc, #128]	@ (8006848 <TIM_OC3_SetConfig+0xe4>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d10d      	bne.n	80067e6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80067d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	68db      	ldr	r3, [r3, #12]
 80067d6:	021b      	lsls	r3, r3, #8
 80067d8:	697a      	ldr	r2, [r7, #20]
 80067da:	4313      	orrs	r3, r2
 80067dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80067e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	4a16      	ldr	r2, [pc, #88]	@ (8006844 <TIM_OC3_SetConfig+0xe0>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d003      	beq.n	80067f6 <TIM_OC3_SetConfig+0x92>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	4a15      	ldr	r2, [pc, #84]	@ (8006848 <TIM_OC3_SetConfig+0xe4>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d113      	bne.n	800681e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80067fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006804:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	695b      	ldr	r3, [r3, #20]
 800680a:	011b      	lsls	r3, r3, #4
 800680c:	693a      	ldr	r2, [r7, #16]
 800680e:	4313      	orrs	r3, r2
 8006810:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	699b      	ldr	r3, [r3, #24]
 8006816:	011b      	lsls	r3, r3, #4
 8006818:	693a      	ldr	r2, [r7, #16]
 800681a:	4313      	orrs	r3, r2
 800681c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	693a      	ldr	r2, [r7, #16]
 8006822:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	68fa      	ldr	r2, [r7, #12]
 8006828:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	685a      	ldr	r2, [r3, #4]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	697a      	ldr	r2, [r7, #20]
 8006836:	621a      	str	r2, [r3, #32]
}
 8006838:	bf00      	nop
 800683a:	371c      	adds	r7, #28
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr
 8006844:	40010000 	.word	0x40010000
 8006848:	40010400 	.word	0x40010400

0800684c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800684c:	b480      	push	{r7}
 800684e:	b087      	sub	sp, #28
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6a1b      	ldr	r3, [r3, #32]
 800685a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6a1b      	ldr	r3, [r3, #32]
 8006860:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	69db      	ldr	r3, [r3, #28]
 8006872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800687a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006882:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	021b      	lsls	r3, r3, #8
 800688a:	68fa      	ldr	r2, [r7, #12]
 800688c:	4313      	orrs	r3, r2
 800688e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006896:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	031b      	lsls	r3, r3, #12
 800689e:	693a      	ldr	r2, [r7, #16]
 80068a0:	4313      	orrs	r3, r2
 80068a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	4a12      	ldr	r2, [pc, #72]	@ (80068f0 <TIM_OC4_SetConfig+0xa4>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d003      	beq.n	80068b4 <TIM_OC4_SetConfig+0x68>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	4a11      	ldr	r2, [pc, #68]	@ (80068f4 <TIM_OC4_SetConfig+0xa8>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d109      	bne.n	80068c8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80068ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	695b      	ldr	r3, [r3, #20]
 80068c0:	019b      	lsls	r3, r3, #6
 80068c2:	697a      	ldr	r2, [r7, #20]
 80068c4:	4313      	orrs	r3, r2
 80068c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	697a      	ldr	r2, [r7, #20]
 80068cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	68fa      	ldr	r2, [r7, #12]
 80068d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	685a      	ldr	r2, [r3, #4]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	693a      	ldr	r2, [r7, #16]
 80068e0:	621a      	str	r2, [r3, #32]
}
 80068e2:	bf00      	nop
 80068e4:	371c      	adds	r7, #28
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr
 80068ee:	bf00      	nop
 80068f0:	40010000 	.word	0x40010000
 80068f4:	40010400 	.word	0x40010400

080068f8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b087      	sub	sp, #28
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	60f8      	str	r0, [r7, #12]
 8006900:	60b9      	str	r1, [r7, #8]
 8006902:	607a      	str	r2, [r7, #4]
 8006904:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	6a1b      	ldr	r3, [r3, #32]
 800690a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	6a1b      	ldr	r3, [r3, #32]
 8006910:	f023 0201 	bic.w	r2, r3, #1
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	699b      	ldr	r3, [r3, #24]
 800691c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	4a28      	ldr	r2, [pc, #160]	@ (80069c4 <TIM_TI1_SetConfig+0xcc>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d01b      	beq.n	800695e <TIM_TI1_SetConfig+0x66>
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800692c:	d017      	beq.n	800695e <TIM_TI1_SetConfig+0x66>
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	4a25      	ldr	r2, [pc, #148]	@ (80069c8 <TIM_TI1_SetConfig+0xd0>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d013      	beq.n	800695e <TIM_TI1_SetConfig+0x66>
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	4a24      	ldr	r2, [pc, #144]	@ (80069cc <TIM_TI1_SetConfig+0xd4>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d00f      	beq.n	800695e <TIM_TI1_SetConfig+0x66>
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	4a23      	ldr	r2, [pc, #140]	@ (80069d0 <TIM_TI1_SetConfig+0xd8>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d00b      	beq.n	800695e <TIM_TI1_SetConfig+0x66>
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	4a22      	ldr	r2, [pc, #136]	@ (80069d4 <TIM_TI1_SetConfig+0xdc>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d007      	beq.n	800695e <TIM_TI1_SetConfig+0x66>
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	4a21      	ldr	r2, [pc, #132]	@ (80069d8 <TIM_TI1_SetConfig+0xe0>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d003      	beq.n	800695e <TIM_TI1_SetConfig+0x66>
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	4a20      	ldr	r2, [pc, #128]	@ (80069dc <TIM_TI1_SetConfig+0xe4>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d101      	bne.n	8006962 <TIM_TI1_SetConfig+0x6a>
 800695e:	2301      	movs	r3, #1
 8006960:	e000      	b.n	8006964 <TIM_TI1_SetConfig+0x6c>
 8006962:	2300      	movs	r3, #0
 8006964:	2b00      	cmp	r3, #0
 8006966:	d008      	beq.n	800697a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	f023 0303 	bic.w	r3, r3, #3
 800696e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006970:	697a      	ldr	r2, [r7, #20]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4313      	orrs	r3, r2
 8006976:	617b      	str	r3, [r7, #20]
 8006978:	e003      	b.n	8006982 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	f043 0301 	orr.w	r3, r3, #1
 8006980:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006988:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	011b      	lsls	r3, r3, #4
 800698e:	b2db      	uxtb	r3, r3
 8006990:	697a      	ldr	r2, [r7, #20]
 8006992:	4313      	orrs	r3, r2
 8006994:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	f023 030a 	bic.w	r3, r3, #10
 800699c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	f003 030a 	and.w	r3, r3, #10
 80069a4:	693a      	ldr	r2, [r7, #16]
 80069a6:	4313      	orrs	r3, r2
 80069a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	697a      	ldr	r2, [r7, #20]
 80069ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	693a      	ldr	r2, [r7, #16]
 80069b4:	621a      	str	r2, [r3, #32]
}
 80069b6:	bf00      	nop
 80069b8:	371c      	adds	r7, #28
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr
 80069c2:	bf00      	nop
 80069c4:	40010000 	.word	0x40010000
 80069c8:	40000400 	.word	0x40000400
 80069cc:	40000800 	.word	0x40000800
 80069d0:	40000c00 	.word	0x40000c00
 80069d4:	40010400 	.word	0x40010400
 80069d8:	40014000 	.word	0x40014000
 80069dc:	40001800 	.word	0x40001800

080069e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b087      	sub	sp, #28
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	60f8      	str	r0, [r7, #12]
 80069e8:	60b9      	str	r1, [r7, #8]
 80069ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	6a1b      	ldr	r3, [r3, #32]
 80069f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	6a1b      	ldr	r3, [r3, #32]
 80069f6:	f023 0201 	bic.w	r2, r3, #1
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	699b      	ldr	r3, [r3, #24]
 8006a02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006a0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	011b      	lsls	r3, r3, #4
 8006a10:	693a      	ldr	r2, [r7, #16]
 8006a12:	4313      	orrs	r3, r2
 8006a14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	f023 030a 	bic.w	r3, r3, #10
 8006a1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a1e:	697a      	ldr	r2, [r7, #20]
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	4313      	orrs	r3, r2
 8006a24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	693a      	ldr	r2, [r7, #16]
 8006a2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	697a      	ldr	r2, [r7, #20]
 8006a30:	621a      	str	r2, [r3, #32]
}
 8006a32:	bf00      	nop
 8006a34:	371c      	adds	r7, #28
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr

08006a3e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006a3e:	b480      	push	{r7}
 8006a40:	b087      	sub	sp, #28
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	60f8      	str	r0, [r7, #12]
 8006a46:	60b9      	str	r1, [r7, #8]
 8006a48:	607a      	str	r2, [r7, #4]
 8006a4a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	6a1b      	ldr	r3, [r3, #32]
 8006a50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	6a1b      	ldr	r3, [r3, #32]
 8006a56:	f023 0210 	bic.w	r2, r3, #16
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	699b      	ldr	r3, [r3, #24]
 8006a62:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	021b      	lsls	r3, r3, #8
 8006a70:	693a      	ldr	r2, [r7, #16]
 8006a72:	4313      	orrs	r3, r2
 8006a74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006a7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	031b      	lsls	r3, r3, #12
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	693a      	ldr	r2, [r7, #16]
 8006a86:	4313      	orrs	r3, r2
 8006a88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006a90:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	011b      	lsls	r3, r3, #4
 8006a96:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006a9a:	697a      	ldr	r2, [r7, #20]
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	693a      	ldr	r2, [r7, #16]
 8006aa4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	697a      	ldr	r2, [r7, #20]
 8006aaa:	621a      	str	r2, [r3, #32]
}
 8006aac:	bf00      	nop
 8006aae:	371c      	adds	r7, #28
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	4770      	bx	lr

08006ab8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b087      	sub	sp, #28
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	60f8      	str	r0, [r7, #12]
 8006ac0:	60b9      	str	r1, [r7, #8]
 8006ac2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	6a1b      	ldr	r3, [r3, #32]
 8006ac8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	6a1b      	ldr	r3, [r3, #32]
 8006ace:	f023 0210 	bic.w	r2, r3, #16
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	699b      	ldr	r3, [r3, #24]
 8006ada:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006ae2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	031b      	lsls	r3, r3, #12
 8006ae8:	693a      	ldr	r2, [r7, #16]
 8006aea:	4313      	orrs	r3, r2
 8006aec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006af4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	011b      	lsls	r3, r3, #4
 8006afa:	697a      	ldr	r2, [r7, #20]
 8006afc:	4313      	orrs	r3, r2
 8006afe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	693a      	ldr	r2, [r7, #16]
 8006b04:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	697a      	ldr	r2, [r7, #20]
 8006b0a:	621a      	str	r2, [r3, #32]
}
 8006b0c:	bf00      	nop
 8006b0e:	371c      	adds	r7, #28
 8006b10:	46bd      	mov	sp, r7
 8006b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b16:	4770      	bx	lr

08006b18 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b087      	sub	sp, #28
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	60f8      	str	r0, [r7, #12]
 8006b20:	60b9      	str	r1, [r7, #8]
 8006b22:	607a      	str	r2, [r7, #4]
 8006b24:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	6a1b      	ldr	r3, [r3, #32]
 8006b2a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	6a1b      	ldr	r3, [r3, #32]
 8006b30:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	69db      	ldr	r3, [r3, #28]
 8006b3c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	f023 0303 	bic.w	r3, r3, #3
 8006b44:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006b46:	693a      	ldr	r2, [r7, #16]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006b54:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	011b      	lsls	r3, r3, #4
 8006b5a:	b2db      	uxtb	r3, r3
 8006b5c:	693a      	ldr	r2, [r7, #16]
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8006b68:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	021b      	lsls	r3, r3, #8
 8006b6e:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8006b72:	697a      	ldr	r2, [r7, #20]
 8006b74:	4313      	orrs	r3, r2
 8006b76:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	693a      	ldr	r2, [r7, #16]
 8006b7c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	697a      	ldr	r2, [r7, #20]
 8006b82:	621a      	str	r2, [r3, #32]
}
 8006b84:	bf00      	nop
 8006b86:	371c      	adds	r7, #28
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr

08006b90 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b087      	sub	sp, #28
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	60f8      	str	r0, [r7, #12]
 8006b98:	60b9      	str	r1, [r7, #8]
 8006b9a:	607a      	str	r2, [r7, #4]
 8006b9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	6a1b      	ldr	r3, [r3, #32]
 8006ba2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	6a1b      	ldr	r3, [r3, #32]
 8006ba8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	69db      	ldr	r3, [r3, #28]
 8006bb4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006bbc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	021b      	lsls	r3, r3, #8
 8006bc2:	693a      	ldr	r2, [r7, #16]
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006bce:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	031b      	lsls	r3, r3, #12
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	693a      	ldr	r2, [r7, #16]
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8006be2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	031b      	lsls	r3, r3, #12
 8006be8:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8006bec:	697a      	ldr	r2, [r7, #20]
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	693a      	ldr	r2, [r7, #16]
 8006bf6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	697a      	ldr	r2, [r7, #20]
 8006bfc:	621a      	str	r2, [r3, #32]
}
 8006bfe:	bf00      	nop
 8006c00:	371c      	adds	r7, #28
 8006c02:	46bd      	mov	sp, r7
 8006c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c08:	4770      	bx	lr

08006c0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c0a:	b480      	push	{r7}
 8006c0c:	b085      	sub	sp, #20
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	6078      	str	r0, [r7, #4]
 8006c12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c22:	683a      	ldr	r2, [r7, #0]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	4313      	orrs	r3, r2
 8006c28:	f043 0307 	orr.w	r3, r3, #7
 8006c2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	68fa      	ldr	r2, [r7, #12]
 8006c32:	609a      	str	r2, [r3, #8]
}
 8006c34:	bf00      	nop
 8006c36:	3714      	adds	r7, #20
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr

08006c40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b087      	sub	sp, #28
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	60f8      	str	r0, [r7, #12]
 8006c48:	60b9      	str	r1, [r7, #8]
 8006c4a:	607a      	str	r2, [r7, #4]
 8006c4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006c5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	021a      	lsls	r2, r3, #8
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	431a      	orrs	r2, r3
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	4313      	orrs	r3, r2
 8006c68:	697a      	ldr	r2, [r7, #20]
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	697a      	ldr	r2, [r7, #20]
 8006c72:	609a      	str	r2, [r3, #8]
}
 8006c74:	bf00      	nop
 8006c76:	371c      	adds	r7, #28
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr

08006c80 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b087      	sub	sp, #28
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	60f8      	str	r0, [r7, #12]
 8006c88:	60b9      	str	r1, [r7, #8]
 8006c8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	f003 031f 	and.w	r3, r3, #31
 8006c92:	2201      	movs	r2, #1
 8006c94:	fa02 f303 	lsl.w	r3, r2, r3
 8006c98:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	6a1a      	ldr	r2, [r3, #32]
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	43db      	mvns	r3, r3
 8006ca2:	401a      	ands	r2, r3
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	6a1a      	ldr	r2, [r3, #32]
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	f003 031f 	and.w	r3, r3, #31
 8006cb2:	6879      	ldr	r1, [r7, #4]
 8006cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8006cb8:	431a      	orrs	r2, r3
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	621a      	str	r2, [r3, #32]
}
 8006cbe:	bf00      	nop
 8006cc0:	371c      	adds	r7, #28
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc8:	4770      	bx	lr
	...

08006ccc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b085      	sub	sp, #20
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
 8006cd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d101      	bne.n	8006ce4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ce0:	2302      	movs	r3, #2
 8006ce2:	e05a      	b.n	8006d9a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2202      	movs	r2, #2
 8006cf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	689b      	ldr	r3, [r3, #8]
 8006d02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	68fa      	ldr	r2, [r7, #12]
 8006d12:	4313      	orrs	r3, r2
 8006d14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	68fa      	ldr	r2, [r7, #12]
 8006d1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a21      	ldr	r2, [pc, #132]	@ (8006da8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d022      	beq.n	8006d6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d30:	d01d      	beq.n	8006d6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a1d      	ldr	r2, [pc, #116]	@ (8006dac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d018      	beq.n	8006d6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a1b      	ldr	r2, [pc, #108]	@ (8006db0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d013      	beq.n	8006d6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a1a      	ldr	r2, [pc, #104]	@ (8006db4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d00e      	beq.n	8006d6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a18      	ldr	r2, [pc, #96]	@ (8006db8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d009      	beq.n	8006d6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a17      	ldr	r2, [pc, #92]	@ (8006dbc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d004      	beq.n	8006d6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a15      	ldr	r2, [pc, #84]	@ (8006dc0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d10c      	bne.n	8006d88 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	68ba      	ldr	r2, [r7, #8]
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	68ba      	ldr	r2, [r7, #8]
 8006d86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2200      	movs	r2, #0
 8006d94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006d98:	2300      	movs	r3, #0
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3714      	adds	r7, #20
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr
 8006da6:	bf00      	nop
 8006da8:	40010000 	.word	0x40010000
 8006dac:	40000400 	.word	0x40000400
 8006db0:	40000800 	.word	0x40000800
 8006db4:	40000c00 	.word	0x40000c00
 8006db8:	40010400 	.word	0x40010400
 8006dbc:	40014000 	.word	0x40014000
 8006dc0:	40001800 	.word	0x40001800

08006dc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b083      	sub	sp, #12
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006dcc:	bf00      	nop
 8006dce:	370c      	adds	r7, #12
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr

08006dd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b083      	sub	sp, #12
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006de0:	bf00      	nop
 8006de2:	370c      	adds	r7, #12
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr

08006dec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b082      	sub	sp, #8
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d101      	bne.n	8006dfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	e042      	b.n	8006e84 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e04:	b2db      	uxtb	r3, r3
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d106      	bne.n	8006e18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f7fb fb6a 	bl	80024ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2224      	movs	r2, #36	@ 0x24
 8006e1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	68da      	ldr	r2, [r3, #12]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006e2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f000 ffb9 	bl	8007da8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	691a      	ldr	r2, [r3, #16]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006e44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	695a      	ldr	r2, [r3, #20]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006e54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	68da      	ldr	r2, [r3, #12]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006e64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2220      	movs	r2, #32
 8006e70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2220      	movs	r2, #32
 8006e78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006e82:	2300      	movs	r3, #0
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3708      	adds	r7, #8
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}

08006e8c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b08c      	sub	sp, #48	@ 0x30
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	60f8      	str	r0, [r7, #12]
 8006e94:	60b9      	str	r1, [r7, #8]
 8006e96:	4613      	mov	r3, r2
 8006e98:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ea0:	b2db      	uxtb	r3, r3
 8006ea2:	2b20      	cmp	r3, #32
 8006ea4:	d162      	bne.n	8006f6c <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d002      	beq.n	8006eb2 <HAL_UART_Transmit_DMA+0x26>
 8006eac:	88fb      	ldrh	r3, [r7, #6]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d101      	bne.n	8006eb6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	e05b      	b.n	8006f6e <HAL_UART_Transmit_DMA+0xe2>
    }

    huart->pTxBuffPtr = pData;
 8006eb6:	68ba      	ldr	r2, [r7, #8]
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	88fa      	ldrh	r2, [r7, #6]
 8006ec0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	88fa      	ldrh	r2, [r7, #6]
 8006ec6:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2221      	movs	r2, #33	@ 0x21
 8006ed2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eda:	4a27      	ldr	r2, [pc, #156]	@ (8006f78 <HAL_UART_Transmit_DMA+0xec>)
 8006edc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ee2:	4a26      	ldr	r2, [pc, #152]	@ (8006f7c <HAL_UART_Transmit_DMA+0xf0>)
 8006ee4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eea:	4a25      	ldr	r2, [pc, #148]	@ (8006f80 <HAL_UART_Transmit_DMA+0xf4>)
 8006eec:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8006ef6:	f107 0308 	add.w	r3, r7, #8
 8006efa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size) != HAL_OK)
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006f00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f02:	6819      	ldr	r1, [r3, #0]
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	3304      	adds	r3, #4
 8006f0a:	461a      	mov	r2, r3
 8006f0c:	88fb      	ldrh	r3, [r7, #6]
 8006f0e:	f7fc fdef 	bl	8003af0 <HAL_DMA_Start_IT>
 8006f12:	4603      	mov	r3, r0
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d008      	beq.n	8006f2a <HAL_UART_Transmit_DMA+0x9e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2210      	movs	r2, #16
 8006f1c:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2220      	movs	r2, #32
 8006f22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_ERROR;
 8006f26:	2301      	movs	r3, #1
 8006f28:	e021      	b.n	8006f6e <HAL_UART_Transmit_DMA+0xe2>
    }
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006f32:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	3314      	adds	r3, #20
 8006f3a:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f3c:	69bb      	ldr	r3, [r7, #24]
 8006f3e:	e853 3f00 	ldrex	r3, [r3]
 8006f42:	617b      	str	r3, [r7, #20]
   return(result);
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f4a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	3314      	adds	r3, #20
 8006f52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006f54:	627a      	str	r2, [r7, #36]	@ 0x24
 8006f56:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f58:	6a39      	ldr	r1, [r7, #32]
 8006f5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f5c:	e841 2300 	strex	r3, r2, [r1]
 8006f60:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f62:	69fb      	ldr	r3, [r7, #28]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d1e5      	bne.n	8006f34 <HAL_UART_Transmit_DMA+0xa8>

    return HAL_OK;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	e000      	b.n	8006f6e <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8006f6c:	2302      	movs	r3, #2
  }
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3730      	adds	r7, #48	@ 0x30
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}
 8006f76:	bf00      	nop
 8006f78:	08007625 	.word	0x08007625
 8006f7c:	080076bf 	.word	0x080076bf
 8006f80:	08007843 	.word	0x08007843

08006f84 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b084      	sub	sp, #16
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	60f8      	str	r0, [r7, #12]
 8006f8c:	60b9      	str	r1, [r7, #8]
 8006f8e:	4613      	mov	r3, r2
 8006f90:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006f98:	b2db      	uxtb	r3, r3
 8006f9a:	2b20      	cmp	r3, #32
 8006f9c:	d112      	bne.n	8006fc4 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d002      	beq.n	8006faa <HAL_UART_Receive_DMA+0x26>
 8006fa4:	88fb      	ldrh	r3, [r7, #6]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d101      	bne.n	8006fae <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006faa:	2301      	movs	r3, #1
 8006fac:	e00b      	b.n	8006fc6 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006fb4:	88fb      	ldrh	r3, [r7, #6]
 8006fb6:	461a      	mov	r2, r3
 8006fb8:	68b9      	ldr	r1, [r7, #8]
 8006fba:	68f8      	ldr	r0, [r7, #12]
 8006fbc:	f000 fc8c 	bl	80078d8 <UART_Start_Receive_DMA>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	e000      	b.n	8006fc6 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006fc4:	2302      	movs	r3, #2
  }
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3710      	adds	r7, #16
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}

08006fce <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006fce:	b580      	push	{r7, lr}
 8006fd0:	b08c      	sub	sp, #48	@ 0x30
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	60f8      	str	r0, [r7, #12]
 8006fd6:	60b9      	str	r1, [r7, #8]
 8006fd8:	4613      	mov	r3, r2
 8006fda:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006fe2:	b2db      	uxtb	r3, r3
 8006fe4:	2b20      	cmp	r3, #32
 8006fe6:	d146      	bne.n	8007076 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d002      	beq.n	8006ff4 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8006fee:	88fb      	ldrh	r3, [r7, #6]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d101      	bne.n	8006ff8 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	e03f      	b.n	8007078 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2200      	movs	r2, #0
 8007002:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8007004:	88fb      	ldrh	r3, [r7, #6]
 8007006:	461a      	mov	r2, r3
 8007008:	68b9      	ldr	r1, [r7, #8]
 800700a:	68f8      	ldr	r0, [r7, #12]
 800700c:	f000 fc64 	bl	80078d8 <UART_Start_Receive_DMA>
 8007010:	4603      	mov	r3, r0
 8007012:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800701a:	2b01      	cmp	r3, #1
 800701c:	d125      	bne.n	800706a <HAL_UARTEx_ReceiveToIdle_DMA+0x9c>
    {
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 800701e:	2300      	movs	r3, #0
 8007020:	613b      	str	r3, [r7, #16]
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	613b      	str	r3, [r7, #16]
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	613b      	str	r3, [r7, #16]
 8007032:	693b      	ldr	r3, [r7, #16]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	330c      	adds	r3, #12
 800703a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800703c:	69bb      	ldr	r3, [r7, #24]
 800703e:	e853 3f00 	ldrex	r3, [r3]
 8007042:	617b      	str	r3, [r7, #20]
   return(result);
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	f043 0310 	orr.w	r3, r3, #16
 800704a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	330c      	adds	r3, #12
 8007052:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007054:	627a      	str	r2, [r7, #36]	@ 0x24
 8007056:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007058:	6a39      	ldr	r1, [r7, #32]
 800705a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800705c:	e841 2300 	strex	r3, r2, [r1]
 8007060:	61fb      	str	r3, [r7, #28]
   return(result);
 8007062:	69fb      	ldr	r3, [r7, #28]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d1e5      	bne.n	8007034 <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
 8007068:	e002      	b.n	8007070 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 800706a:	2301      	movs	r3, #1
 800706c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 8007070:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007074:	e000      	b.n	8007078 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
  }
  else
  {
    return HAL_BUSY;
 8007076:	2302      	movs	r3, #2
  }
}
 8007078:	4618      	mov	r0, r3
 800707a:	3730      	adds	r7, #48	@ 0x30
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}

08007080 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b0ba      	sub	sp, #232	@ 0xe8
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	68db      	ldr	r3, [r3, #12]
 8007098:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	695b      	ldr	r3, [r3, #20]
 80070a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80070a6:	2300      	movs	r3, #0
 80070a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80070ac:	2300      	movs	r3, #0
 80070ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80070b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070b6:	f003 030f 	and.w	r3, r3, #15
 80070ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80070be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d10f      	bne.n	80070e6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80070c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070ca:	f003 0320 	and.w	r3, r3, #32
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d009      	beq.n	80070e6 <HAL_UART_IRQHandler+0x66>
 80070d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070d6:	f003 0320 	and.w	r3, r3, #32
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d003      	beq.n	80070e6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 fda4 	bl	8007c2c <UART_Receive_IT>
      return;
 80070e4:	e273      	b.n	80075ce <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80070e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	f000 80de 	beq.w	80072ac <HAL_UART_IRQHandler+0x22c>
 80070f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80070f4:	f003 0301 	and.w	r3, r3, #1
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d106      	bne.n	800710a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80070fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007100:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007104:	2b00      	cmp	r3, #0
 8007106:	f000 80d1 	beq.w	80072ac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800710a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800710e:	f003 0301 	and.w	r3, r3, #1
 8007112:	2b00      	cmp	r3, #0
 8007114:	d00b      	beq.n	800712e <HAL_UART_IRQHandler+0xae>
 8007116:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800711a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800711e:	2b00      	cmp	r3, #0
 8007120:	d005      	beq.n	800712e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007126:	f043 0201 	orr.w	r2, r3, #1
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800712e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007132:	f003 0304 	and.w	r3, r3, #4
 8007136:	2b00      	cmp	r3, #0
 8007138:	d00b      	beq.n	8007152 <HAL_UART_IRQHandler+0xd2>
 800713a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800713e:	f003 0301 	and.w	r3, r3, #1
 8007142:	2b00      	cmp	r3, #0
 8007144:	d005      	beq.n	8007152 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800714a:	f043 0202 	orr.w	r2, r3, #2
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007152:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007156:	f003 0302 	and.w	r3, r3, #2
 800715a:	2b00      	cmp	r3, #0
 800715c:	d00b      	beq.n	8007176 <HAL_UART_IRQHandler+0xf6>
 800715e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007162:	f003 0301 	and.w	r3, r3, #1
 8007166:	2b00      	cmp	r3, #0
 8007168:	d005      	beq.n	8007176 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800716e:	f043 0204 	orr.w	r2, r3, #4
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800717a:	f003 0308 	and.w	r3, r3, #8
 800717e:	2b00      	cmp	r3, #0
 8007180:	d011      	beq.n	80071a6 <HAL_UART_IRQHandler+0x126>
 8007182:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007186:	f003 0320 	and.w	r3, r3, #32
 800718a:	2b00      	cmp	r3, #0
 800718c:	d105      	bne.n	800719a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800718e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007192:	f003 0301 	and.w	r3, r3, #1
 8007196:	2b00      	cmp	r3, #0
 8007198:	d005      	beq.n	80071a6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800719e:	f043 0208 	orr.w	r2, r3, #8
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	f000 820a 	beq.w	80075c4 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80071b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071b4:	f003 0320 	and.w	r3, r3, #32
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d008      	beq.n	80071ce <HAL_UART_IRQHandler+0x14e>
 80071bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071c0:	f003 0320 	and.w	r3, r3, #32
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d002      	beq.n	80071ce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f000 fd2f 	bl	8007c2c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	695b      	ldr	r3, [r3, #20]
 80071d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071d8:	2b40      	cmp	r3, #64	@ 0x40
 80071da:	bf0c      	ite	eq
 80071dc:	2301      	moveq	r3, #1
 80071de:	2300      	movne	r3, #0
 80071e0:	b2db      	uxtb	r3, r3
 80071e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071ea:	f003 0308 	and.w	r3, r3, #8
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d103      	bne.n	80071fa <HAL_UART_IRQHandler+0x17a>
 80071f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d04f      	beq.n	800729a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f000 fc3a 	bl	8007a74 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	695b      	ldr	r3, [r3, #20]
 8007206:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800720a:	2b40      	cmp	r3, #64	@ 0x40
 800720c:	d141      	bne.n	8007292 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	3314      	adds	r3, #20
 8007214:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007218:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800721c:	e853 3f00 	ldrex	r3, [r3]
 8007220:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007224:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007228:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800722c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	3314      	adds	r3, #20
 8007236:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800723a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800723e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007242:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007246:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800724a:	e841 2300 	strex	r3, r2, [r1]
 800724e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007252:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007256:	2b00      	cmp	r3, #0
 8007258:	d1d9      	bne.n	800720e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800725e:	2b00      	cmp	r3, #0
 8007260:	d013      	beq.n	800728a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007266:	4a8a      	ldr	r2, [pc, #552]	@ (8007490 <HAL_UART_IRQHandler+0x410>)
 8007268:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800726e:	4618      	mov	r0, r3
 8007270:	f7fc fd06 	bl	8003c80 <HAL_DMA_Abort_IT>
 8007274:	4603      	mov	r3, r0
 8007276:	2b00      	cmp	r3, #0
 8007278:	d016      	beq.n	80072a8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800727e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007284:	4610      	mov	r0, r2
 8007286:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007288:	e00e      	b.n	80072a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 f9c0 	bl	8007610 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007290:	e00a      	b.n	80072a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f000 f9bc 	bl	8007610 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007298:	e006      	b.n	80072a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 f9b8 	bl	8007610 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2200      	movs	r2, #0
 80072a4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80072a6:	e18d      	b.n	80075c4 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072a8:	bf00      	nop
    return;
 80072aa:	e18b      	b.n	80075c4 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	f040 8167 	bne.w	8007584 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80072b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072ba:	f003 0310 	and.w	r3, r3, #16
 80072be:	2b00      	cmp	r3, #0
 80072c0:	f000 8160 	beq.w	8007584 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80072c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80072c8:	f003 0310 	and.w	r3, r3, #16
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	f000 8159 	beq.w	8007584 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80072d2:	2300      	movs	r3, #0
 80072d4:	60bb      	str	r3, [r7, #8]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	60bb      	str	r3, [r7, #8]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	60bb      	str	r3, [r7, #8]
 80072e6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	695b      	ldr	r3, [r3, #20]
 80072ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072f2:	2b40      	cmp	r3, #64	@ 0x40
 80072f4:	f040 80ce 	bne.w	8007494 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007304:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007308:	2b00      	cmp	r3, #0
 800730a:	f000 80a9 	beq.w	8007460 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007312:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007316:	429a      	cmp	r2, r3
 8007318:	f080 80a2 	bcs.w	8007460 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007322:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007328:	69db      	ldr	r3, [r3, #28]
 800732a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800732e:	f000 8088 	beq.w	8007442 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	330c      	adds	r3, #12
 8007338:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800733c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007340:	e853 3f00 	ldrex	r3, [r3]
 8007344:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007348:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800734c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007350:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	330c      	adds	r3, #12
 800735a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800735e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007362:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007366:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800736a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800736e:	e841 2300 	strex	r3, r2, [r1]
 8007372:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007376:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800737a:	2b00      	cmp	r3, #0
 800737c:	d1d9      	bne.n	8007332 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	3314      	adds	r3, #20
 8007384:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007386:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007388:	e853 3f00 	ldrex	r3, [r3]
 800738c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800738e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007390:	f023 0301 	bic.w	r3, r3, #1
 8007394:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	3314      	adds	r3, #20
 800739e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80073a2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80073a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80073aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80073ae:	e841 2300 	strex	r3, r2, [r1]
 80073b2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80073b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d1e1      	bne.n	800737e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	3314      	adds	r3, #20
 80073c0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80073c4:	e853 3f00 	ldrex	r3, [r3]
 80073c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80073ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80073cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80073d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	3314      	adds	r3, #20
 80073da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80073de:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80073e0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073e2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80073e4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80073e6:	e841 2300 	strex	r3, r2, [r1]
 80073ea:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80073ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d1e3      	bne.n	80073ba <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2220      	movs	r2, #32
 80073f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2200      	movs	r2, #0
 80073fe:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	330c      	adds	r3, #12
 8007406:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007408:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800740a:	e853 3f00 	ldrex	r3, [r3]
 800740e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007410:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007412:	f023 0310 	bic.w	r3, r3, #16
 8007416:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	330c      	adds	r3, #12
 8007420:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007424:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007426:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007428:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800742a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800742c:	e841 2300 	strex	r3, r2, [r1]
 8007430:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007432:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007434:	2b00      	cmp	r3, #0
 8007436:	d1e3      	bne.n	8007400 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800743c:	4618      	mov	r0, r3
 800743e:	f7fc fbaf 	bl	8003ba0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2202      	movs	r2, #2
 8007446:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007450:	b29b      	uxth	r3, r3
 8007452:	1ad3      	subs	r3, r2, r3
 8007454:	b29b      	uxth	r3, r3
 8007456:	4619      	mov	r1, r3
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f7fa f90f 	bl	800167c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800745e:	e0b3      	b.n	80075c8 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007464:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007468:	429a      	cmp	r2, r3
 800746a:	f040 80ad 	bne.w	80075c8 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007472:	69db      	ldr	r3, [r3, #28]
 8007474:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007478:	f040 80a6 	bne.w	80075c8 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2202      	movs	r2, #2
 8007480:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007486:	4619      	mov	r1, r3
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f7fa f8f7 	bl	800167c <HAL_UARTEx_RxEventCallback>
      return;
 800748e:	e09b      	b.n	80075c8 <HAL_UART_IRQHandler+0x548>
 8007490:	08007b3b 	.word	0x08007b3b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800749c:	b29b      	uxth	r3, r3
 800749e:	1ad3      	subs	r3, r2, r3
 80074a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	f000 808e 	beq.w	80075cc <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80074b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	f000 8089 	beq.w	80075cc <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	330c      	adds	r3, #12
 80074c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074c4:	e853 3f00 	ldrex	r3, [r3]
 80074c8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80074ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80074d0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	330c      	adds	r3, #12
 80074da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80074de:	647a      	str	r2, [r7, #68]	@ 0x44
 80074e0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80074e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80074e6:	e841 2300 	strex	r3, r2, [r1]
 80074ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80074ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d1e3      	bne.n	80074ba <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	3314      	adds	r3, #20
 80074f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074fc:	e853 3f00 	ldrex	r3, [r3]
 8007500:	623b      	str	r3, [r7, #32]
   return(result);
 8007502:	6a3b      	ldr	r3, [r7, #32]
 8007504:	f023 0301 	bic.w	r3, r3, #1
 8007508:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	3314      	adds	r3, #20
 8007512:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007516:	633a      	str	r2, [r7, #48]	@ 0x30
 8007518:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800751a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800751c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800751e:	e841 2300 	strex	r3, r2, [r1]
 8007522:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007526:	2b00      	cmp	r3, #0
 8007528:	d1e3      	bne.n	80074f2 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2220      	movs	r2, #32
 800752e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2200      	movs	r2, #0
 8007536:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	330c      	adds	r3, #12
 800753e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	e853 3f00 	ldrex	r3, [r3]
 8007546:	60fb      	str	r3, [r7, #12]
   return(result);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f023 0310 	bic.w	r3, r3, #16
 800754e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	330c      	adds	r3, #12
 8007558:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800755c:	61fa      	str	r2, [r7, #28]
 800755e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007560:	69b9      	ldr	r1, [r7, #24]
 8007562:	69fa      	ldr	r2, [r7, #28]
 8007564:	e841 2300 	strex	r3, r2, [r1]
 8007568:	617b      	str	r3, [r7, #20]
   return(result);
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d1e3      	bne.n	8007538 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2202      	movs	r2, #2
 8007574:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007576:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800757a:	4619      	mov	r1, r3
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f7fa f87d 	bl	800167c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007582:	e023      	b.n	80075cc <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007584:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007588:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800758c:	2b00      	cmp	r3, #0
 800758e:	d009      	beq.n	80075a4 <HAL_UART_IRQHandler+0x524>
 8007590:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007594:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007598:	2b00      	cmp	r3, #0
 800759a:	d003      	beq.n	80075a4 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f000 fadd 	bl	8007b5c <UART_Transmit_IT>
    return;
 80075a2:	e014      	b.n	80075ce <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80075a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d00e      	beq.n	80075ce <HAL_UART_IRQHandler+0x54e>
 80075b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d008      	beq.n	80075ce <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f000 fb1d 	bl	8007bfc <UART_EndTransmit_IT>
    return;
 80075c2:	e004      	b.n	80075ce <HAL_UART_IRQHandler+0x54e>
    return;
 80075c4:	bf00      	nop
 80075c6:	e002      	b.n	80075ce <HAL_UART_IRQHandler+0x54e>
      return;
 80075c8:	bf00      	nop
 80075ca:	e000      	b.n	80075ce <HAL_UART_IRQHandler+0x54e>
      return;
 80075cc:	bf00      	nop
  }
}
 80075ce:	37e8      	adds	r7, #232	@ 0xe8
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}

080075d4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b083      	sub	sp, #12
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80075dc:	bf00      	nop
 80075de:	370c      	adds	r7, #12
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr

080075e8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b083      	sub	sp, #12
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80075f0:	bf00      	nop
 80075f2:	370c      	adds	r7, #12
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr

080075fc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b083      	sub	sp, #12
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007604:	bf00      	nop
 8007606:	370c      	adds	r7, #12
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr

08007610 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007610:	b480      	push	{r7}
 8007612:	b083      	sub	sp, #12
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007618:	bf00      	nop
 800761a:	370c      	adds	r7, #12
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr

08007624 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b090      	sub	sp, #64	@ 0x40
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007630:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800763c:	2b00      	cmp	r3, #0
 800763e:	d137      	bne.n	80076b0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007640:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007642:	2200      	movs	r2, #0
 8007644:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007646:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	3314      	adds	r3, #20
 800764c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800764e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007650:	e853 3f00 	ldrex	r3, [r3]
 8007654:	623b      	str	r3, [r7, #32]
   return(result);
 8007656:	6a3b      	ldr	r3, [r7, #32]
 8007658:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800765c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800765e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	3314      	adds	r3, #20
 8007664:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007666:	633a      	str	r2, [r7, #48]	@ 0x30
 8007668:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800766a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800766c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800766e:	e841 2300 	strex	r3, r2, [r1]
 8007672:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007676:	2b00      	cmp	r3, #0
 8007678:	d1e5      	bne.n	8007646 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800767a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	330c      	adds	r3, #12
 8007680:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	e853 3f00 	ldrex	r3, [r3]
 8007688:	60fb      	str	r3, [r7, #12]
   return(result);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007690:	637b      	str	r3, [r7, #52]	@ 0x34
 8007692:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	330c      	adds	r3, #12
 8007698:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800769a:	61fa      	str	r2, [r7, #28]
 800769c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800769e:	69b9      	ldr	r1, [r7, #24]
 80076a0:	69fa      	ldr	r2, [r7, #28]
 80076a2:	e841 2300 	strex	r3, r2, [r1]
 80076a6:	617b      	str	r3, [r7, #20]
   return(result);
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d1e5      	bne.n	800767a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80076ae:	e002      	b.n	80076b6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80076b0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80076b2:	f7fa f959 	bl	8001968 <HAL_UART_TxCpltCallback>
}
 80076b6:	bf00      	nop
 80076b8:	3740      	adds	r7, #64	@ 0x40
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}

080076be <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80076be:	b580      	push	{r7, lr}
 80076c0:	b084      	sub	sp, #16
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076ca:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80076cc:	68f8      	ldr	r0, [r7, #12]
 80076ce:	f7ff ff81 	bl	80075d4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076d2:	bf00      	nop
 80076d4:	3710      	adds	r7, #16
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}

080076da <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80076da:	b580      	push	{r7, lr}
 80076dc:	b09c      	sub	sp, #112	@ 0x70
 80076de:	af00      	add	r7, sp, #0
 80076e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076e6:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d172      	bne.n	80077dc <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80076f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80076f8:	2200      	movs	r2, #0
 80076fa:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80076fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	330c      	adds	r3, #12
 8007702:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007704:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007706:	e853 3f00 	ldrex	r3, [r3]
 800770a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800770c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800770e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007712:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007714:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	330c      	adds	r3, #12
 800771a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800771c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800771e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007720:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007722:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007724:	e841 2300 	strex	r3, r2, [r1]
 8007728:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800772a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800772c:	2b00      	cmp	r3, #0
 800772e:	d1e5      	bne.n	80076fc <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007730:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	3314      	adds	r3, #20
 8007736:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007738:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800773a:	e853 3f00 	ldrex	r3, [r3]
 800773e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007740:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007742:	f023 0301 	bic.w	r3, r3, #1
 8007746:	667b      	str	r3, [r7, #100]	@ 0x64
 8007748:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	3314      	adds	r3, #20
 800774e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007750:	647a      	str	r2, [r7, #68]	@ 0x44
 8007752:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007754:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007756:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007758:	e841 2300 	strex	r3, r2, [r1]
 800775c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800775e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007760:	2b00      	cmp	r3, #0
 8007762:	d1e5      	bne.n	8007730 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007764:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	3314      	adds	r3, #20
 800776a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800776c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800776e:	e853 3f00 	ldrex	r3, [r3]
 8007772:	623b      	str	r3, [r7, #32]
   return(result);
 8007774:	6a3b      	ldr	r3, [r7, #32]
 8007776:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800777a:	663b      	str	r3, [r7, #96]	@ 0x60
 800777c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	3314      	adds	r3, #20
 8007782:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007784:	633a      	str	r2, [r7, #48]	@ 0x30
 8007786:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007788:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800778a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800778c:	e841 2300 	strex	r3, r2, [r1]
 8007790:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007794:	2b00      	cmp	r3, #0
 8007796:	d1e5      	bne.n	8007764 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007798:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800779a:	2220      	movs	r2, #32
 800779c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80077a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077a4:	2b01      	cmp	r3, #1
 80077a6:	d119      	bne.n	80077dc <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	330c      	adds	r3, #12
 80077ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	e853 3f00 	ldrex	r3, [r3]
 80077b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f023 0310 	bic.w	r3, r3, #16
 80077be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80077c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	330c      	adds	r3, #12
 80077c6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80077c8:	61fa      	str	r2, [r7, #28]
 80077ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077cc:	69b9      	ldr	r1, [r7, #24]
 80077ce:	69fa      	ldr	r2, [r7, #28]
 80077d0:	e841 2300 	strex	r3, r2, [r1]
 80077d4:	617b      	str	r3, [r7, #20]
   return(result);
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d1e5      	bne.n	80077a8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80077dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80077de:	2200      	movs	r2, #0
 80077e0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80077e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077e6:	2b01      	cmp	r3, #1
 80077e8:	d106      	bne.n	80077f8 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80077ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80077ec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80077ee:	4619      	mov	r1, r3
 80077f0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80077f2:	f7f9 ff43 	bl	800167c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80077f6:	e002      	b.n	80077fe <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80077f8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80077fa:	f7ff fef5 	bl	80075e8 <HAL_UART_RxCpltCallback>
}
 80077fe:	bf00      	nop
 8007800:	3770      	adds	r7, #112	@ 0x70
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}

08007806 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007806:	b580      	push	{r7, lr}
 8007808:	b084      	sub	sp, #16
 800780a:	af00      	add	r7, sp, #0
 800780c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007812:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2201      	movs	r2, #1
 8007818:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800781e:	2b01      	cmp	r3, #1
 8007820:	d108      	bne.n	8007834 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007826:	085b      	lsrs	r3, r3, #1
 8007828:	b29b      	uxth	r3, r3
 800782a:	4619      	mov	r1, r3
 800782c:	68f8      	ldr	r0, [r7, #12]
 800782e:	f7f9 ff25 	bl	800167c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007832:	e002      	b.n	800783a <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8007834:	68f8      	ldr	r0, [r7, #12]
 8007836:	f7ff fee1 	bl	80075fc <HAL_UART_RxHalfCpltCallback>
}
 800783a:	bf00      	nop
 800783c:	3710      	adds	r7, #16
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}

08007842 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007842:	b580      	push	{r7, lr}
 8007844:	b084      	sub	sp, #16
 8007846:	af00      	add	r7, sp, #0
 8007848:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800784a:	2300      	movs	r3, #0
 800784c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007852:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	695b      	ldr	r3, [r3, #20]
 800785a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800785e:	2b80      	cmp	r3, #128	@ 0x80
 8007860:	bf0c      	ite	eq
 8007862:	2301      	moveq	r3, #1
 8007864:	2300      	movne	r3, #0
 8007866:	b2db      	uxtb	r3, r3
 8007868:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007870:	b2db      	uxtb	r3, r3
 8007872:	2b21      	cmp	r3, #33	@ 0x21
 8007874:	d108      	bne.n	8007888 <UART_DMAError+0x46>
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d005      	beq.n	8007888 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	2200      	movs	r2, #0
 8007880:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8007882:	68b8      	ldr	r0, [r7, #8]
 8007884:	f000 f8ce 	bl	8007a24 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	695b      	ldr	r3, [r3, #20]
 800788e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007892:	2b40      	cmp	r3, #64	@ 0x40
 8007894:	bf0c      	ite	eq
 8007896:	2301      	moveq	r3, #1
 8007898:	2300      	movne	r3, #0
 800789a:	b2db      	uxtb	r3, r3
 800789c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80078a4:	b2db      	uxtb	r3, r3
 80078a6:	2b22      	cmp	r3, #34	@ 0x22
 80078a8:	d108      	bne.n	80078bc <UART_DMAError+0x7a>
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d005      	beq.n	80078bc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	2200      	movs	r2, #0
 80078b4:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80078b6:	68b8      	ldr	r0, [r7, #8]
 80078b8:	f000 f8dc 	bl	8007a74 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078c0:	f043 0210 	orr.w	r2, r3, #16
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80078c8:	68b8      	ldr	r0, [r7, #8]
 80078ca:	f7ff fea1 	bl	8007610 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078ce:	bf00      	nop
 80078d0:	3710      	adds	r7, #16
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}
	...

080078d8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b098      	sub	sp, #96	@ 0x60
 80078dc:	af00      	add	r7, sp, #0
 80078de:	60f8      	str	r0, [r7, #12]
 80078e0:	60b9      	str	r1, [r7, #8]
 80078e2:	4613      	mov	r3, r2
 80078e4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80078e6:	68ba      	ldr	r2, [r7, #8]
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	88fa      	ldrh	r2, [r7, #6]
 80078f0:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2200      	movs	r2, #0
 80078f6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2222      	movs	r2, #34	@ 0x22
 80078fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007904:	4a44      	ldr	r2, [pc, #272]	@ (8007a18 <UART_Start_Receive_DMA+0x140>)
 8007906:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800790c:	4a43      	ldr	r2, [pc, #268]	@ (8007a1c <UART_Start_Receive_DMA+0x144>)
 800790e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007914:	4a42      	ldr	r2, [pc, #264]	@ (8007a20 <UART_Start_Receive_DMA+0x148>)
 8007916:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800791c:	2200      	movs	r2, #0
 800791e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007920:	f107 0308 	add.w	r3, r7, #8
 8007924:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	3304      	adds	r3, #4
 8007930:	4619      	mov	r1, r3
 8007932:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007934:	681a      	ldr	r2, [r3, #0]
 8007936:	88fb      	ldrh	r3, [r7, #6]
 8007938:	f7fc f8da 	bl	8003af0 <HAL_DMA_Start_IT>
 800793c:	4603      	mov	r3, r0
 800793e:	2b00      	cmp	r3, #0
 8007940:	d008      	beq.n	8007954 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	2210      	movs	r2, #16
 8007946:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	2220      	movs	r2, #32
 800794c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 8007950:	2301      	movs	r3, #1
 8007952:	e05d      	b.n	8007a10 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007954:	2300      	movs	r3, #0
 8007956:	613b      	str	r3, [r7, #16]
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	613b      	str	r3, [r7, #16]
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	685b      	ldr	r3, [r3, #4]
 8007966:	613b      	str	r3, [r7, #16]
 8007968:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	691b      	ldr	r3, [r3, #16]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d019      	beq.n	80079a6 <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	330c      	adds	r3, #12
 8007978:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800797a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800797c:	e853 3f00 	ldrex	r3, [r3]
 8007980:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007982:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007984:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007988:	65bb      	str	r3, [r7, #88]	@ 0x58
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	330c      	adds	r3, #12
 8007990:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007992:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8007994:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007996:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007998:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800799a:	e841 2300 	strex	r3, r2, [r1]
 800799e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80079a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d1e5      	bne.n	8007972 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	3314      	adds	r3, #20
 80079ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079b0:	e853 3f00 	ldrex	r3, [r3]
 80079b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80079b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079b8:	f043 0301 	orr.w	r3, r3, #1
 80079bc:	657b      	str	r3, [r7, #84]	@ 0x54
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	3314      	adds	r3, #20
 80079c4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80079c6:	63ba      	str	r2, [r7, #56]	@ 0x38
 80079c8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ca:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80079cc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80079ce:	e841 2300 	strex	r3, r2, [r1]
 80079d2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80079d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d1e5      	bne.n	80079a6 <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	3314      	adds	r3, #20
 80079e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e2:	69bb      	ldr	r3, [r7, #24]
 80079e4:	e853 3f00 	ldrex	r3, [r3]
 80079e8:	617b      	str	r3, [r7, #20]
   return(result);
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079f0:	653b      	str	r3, [r7, #80]	@ 0x50
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	3314      	adds	r3, #20
 80079f8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80079fa:	627a      	str	r2, [r7, #36]	@ 0x24
 80079fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079fe:	6a39      	ldr	r1, [r7, #32]
 8007a00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a02:	e841 2300 	strex	r3, r2, [r1]
 8007a06:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a08:	69fb      	ldr	r3, [r7, #28]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d1e5      	bne.n	80079da <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 8007a0e:	2300      	movs	r3, #0
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	3760      	adds	r7, #96	@ 0x60
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}
 8007a18:	080076db 	.word	0x080076db
 8007a1c:	08007807 	.word	0x08007807
 8007a20:	08007843 	.word	0x08007843

08007a24 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b089      	sub	sp, #36	@ 0x24
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	330c      	adds	r3, #12
 8007a32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	e853 3f00 	ldrex	r3, [r3]
 8007a3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007a42:	61fb      	str	r3, [r7, #28]
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	330c      	adds	r3, #12
 8007a4a:	69fa      	ldr	r2, [r7, #28]
 8007a4c:	61ba      	str	r2, [r7, #24]
 8007a4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a50:	6979      	ldr	r1, [r7, #20]
 8007a52:	69ba      	ldr	r2, [r7, #24]
 8007a54:	e841 2300 	strex	r3, r2, [r1]
 8007a58:	613b      	str	r3, [r7, #16]
   return(result);
 8007a5a:	693b      	ldr	r3, [r7, #16]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d1e5      	bne.n	8007a2c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2220      	movs	r2, #32
 8007a64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8007a68:	bf00      	nop
 8007a6a:	3724      	adds	r7, #36	@ 0x24
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr

08007a74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b095      	sub	sp, #84	@ 0x54
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	330c      	adds	r3, #12
 8007a82:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a86:	e853 3f00 	ldrex	r3, [r3]
 8007a8a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a8e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007a92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	330c      	adds	r3, #12
 8007a9a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007a9c:	643a      	str	r2, [r7, #64]	@ 0x40
 8007a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007aa2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007aa4:	e841 2300 	strex	r3, r2, [r1]
 8007aa8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007aaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d1e5      	bne.n	8007a7c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	3314      	adds	r3, #20
 8007ab6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab8:	6a3b      	ldr	r3, [r7, #32]
 8007aba:	e853 3f00 	ldrex	r3, [r3]
 8007abe:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ac0:	69fb      	ldr	r3, [r7, #28]
 8007ac2:	f023 0301 	bic.w	r3, r3, #1
 8007ac6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	3314      	adds	r3, #20
 8007ace:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007ad0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007ad2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ad4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007ad6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ad8:	e841 2300 	strex	r3, r2, [r1]
 8007adc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d1e5      	bne.n	8007ab0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ae8:	2b01      	cmp	r3, #1
 8007aea:	d119      	bne.n	8007b20 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	330c      	adds	r3, #12
 8007af2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	e853 3f00 	ldrex	r3, [r3]
 8007afa:	60bb      	str	r3, [r7, #8]
   return(result);
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	f023 0310 	bic.w	r3, r3, #16
 8007b02:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	330c      	adds	r3, #12
 8007b0a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007b0c:	61ba      	str	r2, [r7, #24]
 8007b0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b10:	6979      	ldr	r1, [r7, #20]
 8007b12:	69ba      	ldr	r2, [r7, #24]
 8007b14:	e841 2300 	strex	r3, r2, [r1]
 8007b18:	613b      	str	r3, [r7, #16]
   return(result);
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d1e5      	bne.n	8007aec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2220      	movs	r2, #32
 8007b24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007b2e:	bf00      	nop
 8007b30:	3754      	adds	r7, #84	@ 0x54
 8007b32:	46bd      	mov	sp, r7
 8007b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b38:	4770      	bx	lr

08007b3a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007b3a:	b580      	push	{r7, lr}
 8007b3c:	b084      	sub	sp, #16
 8007b3e:	af00      	add	r7, sp, #0
 8007b40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b46:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007b4e:	68f8      	ldr	r0, [r7, #12]
 8007b50:	f7ff fd5e 	bl	8007610 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b54:	bf00      	nop
 8007b56:	3710      	adds	r7, #16
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}

08007b5c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b085      	sub	sp, #20
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b6a:	b2db      	uxtb	r3, r3
 8007b6c:	2b21      	cmp	r3, #33	@ 0x21
 8007b6e:	d13e      	bne.n	8007bee <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	689b      	ldr	r3, [r3, #8]
 8007b74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b78:	d114      	bne.n	8007ba4 <UART_Transmit_IT+0x48>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	691b      	ldr	r3, [r3, #16]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d110      	bne.n	8007ba4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6a1b      	ldr	r3, [r3, #32]
 8007b86:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	881b      	ldrh	r3, [r3, #0]
 8007b8c:	461a      	mov	r2, r3
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b96:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6a1b      	ldr	r3, [r3, #32]
 8007b9c:	1c9a      	adds	r2, r3, #2
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	621a      	str	r2, [r3, #32]
 8007ba2:	e008      	b.n	8007bb6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6a1b      	ldr	r3, [r3, #32]
 8007ba8:	1c59      	adds	r1, r3, #1
 8007baa:	687a      	ldr	r2, [r7, #4]
 8007bac:	6211      	str	r1, [r2, #32]
 8007bae:	781a      	ldrb	r2, [r3, #0]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007bba:	b29b      	uxth	r3, r3
 8007bbc:	3b01      	subs	r3, #1
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	687a      	ldr	r2, [r7, #4]
 8007bc2:	4619      	mov	r1, r3
 8007bc4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d10f      	bne.n	8007bea <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	68da      	ldr	r2, [r3, #12]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007bd8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	68da      	ldr	r2, [r3, #12]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007be8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007bea:	2300      	movs	r3, #0
 8007bec:	e000      	b.n	8007bf0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007bee:	2302      	movs	r3, #2
  }
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3714      	adds	r7, #20
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr

08007bfc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b082      	sub	sp, #8
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	68da      	ldr	r2, [r3, #12]
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007c12:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2220      	movs	r2, #32
 8007c18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f7f9 fea3 	bl	8001968 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007c22:	2300      	movs	r3, #0
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3708      	adds	r7, #8
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}

08007c2c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b08c      	sub	sp, #48	@ 0x30
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8007c34:	2300      	movs	r3, #0
 8007c36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007c42:	b2db      	uxtb	r3, r3
 8007c44:	2b22      	cmp	r3, #34	@ 0x22
 8007c46:	f040 80aa 	bne.w	8007d9e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	689b      	ldr	r3, [r3, #8]
 8007c4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c52:	d115      	bne.n	8007c80 <UART_Receive_IT+0x54>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	691b      	ldr	r3, [r3, #16]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d111      	bne.n	8007c80 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c60:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	685b      	ldr	r3, [r3, #4]
 8007c68:	b29b      	uxth	r3, r3
 8007c6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c6e:	b29a      	uxth	r2, r3
 8007c70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c72:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c78:	1c9a      	adds	r2, r3, #2
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	629a      	str	r2, [r3, #40]	@ 0x28
 8007c7e:	e024      	b.n	8007cca <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c84:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	689b      	ldr	r3, [r3, #8]
 8007c8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c8e:	d007      	beq.n	8007ca0 <UART_Receive_IT+0x74>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	689b      	ldr	r3, [r3, #8]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d10a      	bne.n	8007cae <UART_Receive_IT+0x82>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	691b      	ldr	r3, [r3, #16]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d106      	bne.n	8007cae <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	b2da      	uxtb	r2, r3
 8007ca8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007caa:	701a      	strb	r2, [r3, #0]
 8007cac:	e008      	b.n	8007cc0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	685b      	ldr	r3, [r3, #4]
 8007cb4:	b2db      	uxtb	r3, r3
 8007cb6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007cba:	b2da      	uxtb	r2, r3
 8007cbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cbe:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cc4:	1c5a      	adds	r2, r3, #1
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007cce:	b29b      	uxth	r3, r3
 8007cd0:	3b01      	subs	r3, #1
 8007cd2:	b29b      	uxth	r3, r3
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	4619      	mov	r1, r3
 8007cd8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d15d      	bne.n	8007d9a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	68da      	ldr	r2, [r3, #12]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f022 0220 	bic.w	r2, r2, #32
 8007cec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	68da      	ldr	r2, [r3, #12]
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007cfc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	695a      	ldr	r2, [r3, #20]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f022 0201 	bic.w	r2, r2, #1
 8007d0c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2220      	movs	r2, #32
 8007d12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d20:	2b01      	cmp	r3, #1
 8007d22:	d135      	bne.n	8007d90 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2200      	movs	r2, #0
 8007d28:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	330c      	adds	r3, #12
 8007d30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	e853 3f00 	ldrex	r3, [r3]
 8007d38:	613b      	str	r3, [r7, #16]
   return(result);
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	f023 0310 	bic.w	r3, r3, #16
 8007d40:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	330c      	adds	r3, #12
 8007d48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d4a:	623a      	str	r2, [r7, #32]
 8007d4c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d4e:	69f9      	ldr	r1, [r7, #28]
 8007d50:	6a3a      	ldr	r2, [r7, #32]
 8007d52:	e841 2300 	strex	r3, r2, [r1]
 8007d56:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d58:	69bb      	ldr	r3, [r7, #24]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d1e5      	bne.n	8007d2a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f003 0310 	and.w	r3, r3, #16
 8007d68:	2b10      	cmp	r3, #16
 8007d6a:	d10a      	bne.n	8007d82 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	60fb      	str	r3, [r7, #12]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	60fb      	str	r3, [r7, #12]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	60fb      	str	r3, [r7, #12]
 8007d80:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007d86:	4619      	mov	r1, r3
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f7f9 fc77 	bl	800167c <HAL_UARTEx_RxEventCallback>
 8007d8e:	e002      	b.n	8007d96 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f7ff fc29 	bl	80075e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007d96:	2300      	movs	r3, #0
 8007d98:	e002      	b.n	8007da0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	e000      	b.n	8007da0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007d9e:	2302      	movs	r3, #2
  }
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3730      	adds	r7, #48	@ 0x30
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}

08007da8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007da8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007dac:	b0c0      	sub	sp, #256	@ 0x100
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	691b      	ldr	r3, [r3, #16]
 8007dbc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007dc4:	68d9      	ldr	r1, [r3, #12]
 8007dc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007dca:	681a      	ldr	r2, [r3, #0]
 8007dcc:	ea40 0301 	orr.w	r3, r0, r1
 8007dd0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007dd6:	689a      	ldr	r2, [r3, #8]
 8007dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ddc:	691b      	ldr	r3, [r3, #16]
 8007dde:	431a      	orrs	r2, r3
 8007de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007de4:	695b      	ldr	r3, [r3, #20]
 8007de6:	431a      	orrs	r2, r3
 8007de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007dec:	69db      	ldr	r3, [r3, #28]
 8007dee:	4313      	orrs	r3, r2
 8007df0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	68db      	ldr	r3, [r3, #12]
 8007dfc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007e00:	f021 010c 	bic.w	r1, r1, #12
 8007e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e08:	681a      	ldr	r2, [r3, #0]
 8007e0a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007e0e:	430b      	orrs	r3, r1
 8007e10:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	695b      	ldr	r3, [r3, #20]
 8007e1a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e22:	6999      	ldr	r1, [r3, #24]
 8007e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e28:	681a      	ldr	r2, [r3, #0]
 8007e2a:	ea40 0301 	orr.w	r3, r0, r1
 8007e2e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e34:	681a      	ldr	r2, [r3, #0]
 8007e36:	4b8f      	ldr	r3, [pc, #572]	@ (8008074 <UART_SetConfig+0x2cc>)
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	d005      	beq.n	8007e48 <UART_SetConfig+0xa0>
 8007e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e40:	681a      	ldr	r2, [r3, #0]
 8007e42:	4b8d      	ldr	r3, [pc, #564]	@ (8008078 <UART_SetConfig+0x2d0>)
 8007e44:	429a      	cmp	r2, r3
 8007e46:	d104      	bne.n	8007e52 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007e48:	f7fd fc3e 	bl	80056c8 <HAL_RCC_GetPCLK2Freq>
 8007e4c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007e50:	e003      	b.n	8007e5a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007e52:	f7fd fc25 	bl	80056a0 <HAL_RCC_GetPCLK1Freq>
 8007e56:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e5e:	69db      	ldr	r3, [r3, #28]
 8007e60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007e64:	f040 810c 	bne.w	8008080 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007e68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007e72:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007e76:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007e7a:	4622      	mov	r2, r4
 8007e7c:	462b      	mov	r3, r5
 8007e7e:	1891      	adds	r1, r2, r2
 8007e80:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007e82:	415b      	adcs	r3, r3
 8007e84:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007e86:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007e8a:	4621      	mov	r1, r4
 8007e8c:	eb12 0801 	adds.w	r8, r2, r1
 8007e90:	4629      	mov	r1, r5
 8007e92:	eb43 0901 	adc.w	r9, r3, r1
 8007e96:	f04f 0200 	mov.w	r2, #0
 8007e9a:	f04f 0300 	mov.w	r3, #0
 8007e9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007ea2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007ea6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007eaa:	4690      	mov	r8, r2
 8007eac:	4699      	mov	r9, r3
 8007eae:	4623      	mov	r3, r4
 8007eb0:	eb18 0303 	adds.w	r3, r8, r3
 8007eb4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007eb8:	462b      	mov	r3, r5
 8007eba:	eb49 0303 	adc.w	r3, r9, r3
 8007ebe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007ec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ec6:	685b      	ldr	r3, [r3, #4]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007ece:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007ed2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007ed6:	460b      	mov	r3, r1
 8007ed8:	18db      	adds	r3, r3, r3
 8007eda:	653b      	str	r3, [r7, #80]	@ 0x50
 8007edc:	4613      	mov	r3, r2
 8007ede:	eb42 0303 	adc.w	r3, r2, r3
 8007ee2:	657b      	str	r3, [r7, #84]	@ 0x54
 8007ee4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007ee8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007eec:	f7f8 fecc 	bl	8000c88 <__aeabi_uldivmod>
 8007ef0:	4602      	mov	r2, r0
 8007ef2:	460b      	mov	r3, r1
 8007ef4:	4b61      	ldr	r3, [pc, #388]	@ (800807c <UART_SetConfig+0x2d4>)
 8007ef6:	fba3 2302 	umull	r2, r3, r3, r2
 8007efa:	095b      	lsrs	r3, r3, #5
 8007efc:	011c      	lsls	r4, r3, #4
 8007efe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f02:	2200      	movs	r2, #0
 8007f04:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007f08:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007f0c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007f10:	4642      	mov	r2, r8
 8007f12:	464b      	mov	r3, r9
 8007f14:	1891      	adds	r1, r2, r2
 8007f16:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007f18:	415b      	adcs	r3, r3
 8007f1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007f1c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007f20:	4641      	mov	r1, r8
 8007f22:	eb12 0a01 	adds.w	sl, r2, r1
 8007f26:	4649      	mov	r1, r9
 8007f28:	eb43 0b01 	adc.w	fp, r3, r1
 8007f2c:	f04f 0200 	mov.w	r2, #0
 8007f30:	f04f 0300 	mov.w	r3, #0
 8007f34:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007f38:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007f3c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007f40:	4692      	mov	sl, r2
 8007f42:	469b      	mov	fp, r3
 8007f44:	4643      	mov	r3, r8
 8007f46:	eb1a 0303 	adds.w	r3, sl, r3
 8007f4a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007f4e:	464b      	mov	r3, r9
 8007f50:	eb4b 0303 	adc.w	r3, fp, r3
 8007f54:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007f64:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007f68:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007f6c:	460b      	mov	r3, r1
 8007f6e:	18db      	adds	r3, r3, r3
 8007f70:	643b      	str	r3, [r7, #64]	@ 0x40
 8007f72:	4613      	mov	r3, r2
 8007f74:	eb42 0303 	adc.w	r3, r2, r3
 8007f78:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f7a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007f7e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007f82:	f7f8 fe81 	bl	8000c88 <__aeabi_uldivmod>
 8007f86:	4602      	mov	r2, r0
 8007f88:	460b      	mov	r3, r1
 8007f8a:	4611      	mov	r1, r2
 8007f8c:	4b3b      	ldr	r3, [pc, #236]	@ (800807c <UART_SetConfig+0x2d4>)
 8007f8e:	fba3 2301 	umull	r2, r3, r3, r1
 8007f92:	095b      	lsrs	r3, r3, #5
 8007f94:	2264      	movs	r2, #100	@ 0x64
 8007f96:	fb02 f303 	mul.w	r3, r2, r3
 8007f9a:	1acb      	subs	r3, r1, r3
 8007f9c:	00db      	lsls	r3, r3, #3
 8007f9e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007fa2:	4b36      	ldr	r3, [pc, #216]	@ (800807c <UART_SetConfig+0x2d4>)
 8007fa4:	fba3 2302 	umull	r2, r3, r3, r2
 8007fa8:	095b      	lsrs	r3, r3, #5
 8007faa:	005b      	lsls	r3, r3, #1
 8007fac:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007fb0:	441c      	add	r4, r3
 8007fb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007fbc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007fc0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007fc4:	4642      	mov	r2, r8
 8007fc6:	464b      	mov	r3, r9
 8007fc8:	1891      	adds	r1, r2, r2
 8007fca:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007fcc:	415b      	adcs	r3, r3
 8007fce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007fd0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007fd4:	4641      	mov	r1, r8
 8007fd6:	1851      	adds	r1, r2, r1
 8007fd8:	6339      	str	r1, [r7, #48]	@ 0x30
 8007fda:	4649      	mov	r1, r9
 8007fdc:	414b      	adcs	r3, r1
 8007fde:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fe0:	f04f 0200 	mov.w	r2, #0
 8007fe4:	f04f 0300 	mov.w	r3, #0
 8007fe8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007fec:	4659      	mov	r1, fp
 8007fee:	00cb      	lsls	r3, r1, #3
 8007ff0:	4651      	mov	r1, sl
 8007ff2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007ff6:	4651      	mov	r1, sl
 8007ff8:	00ca      	lsls	r2, r1, #3
 8007ffa:	4610      	mov	r0, r2
 8007ffc:	4619      	mov	r1, r3
 8007ffe:	4603      	mov	r3, r0
 8008000:	4642      	mov	r2, r8
 8008002:	189b      	adds	r3, r3, r2
 8008004:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008008:	464b      	mov	r3, r9
 800800a:	460a      	mov	r2, r1
 800800c:	eb42 0303 	adc.w	r3, r2, r3
 8008010:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008018:	685b      	ldr	r3, [r3, #4]
 800801a:	2200      	movs	r2, #0
 800801c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008020:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008024:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008028:	460b      	mov	r3, r1
 800802a:	18db      	adds	r3, r3, r3
 800802c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800802e:	4613      	mov	r3, r2
 8008030:	eb42 0303 	adc.w	r3, r2, r3
 8008034:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008036:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800803a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800803e:	f7f8 fe23 	bl	8000c88 <__aeabi_uldivmod>
 8008042:	4602      	mov	r2, r0
 8008044:	460b      	mov	r3, r1
 8008046:	4b0d      	ldr	r3, [pc, #52]	@ (800807c <UART_SetConfig+0x2d4>)
 8008048:	fba3 1302 	umull	r1, r3, r3, r2
 800804c:	095b      	lsrs	r3, r3, #5
 800804e:	2164      	movs	r1, #100	@ 0x64
 8008050:	fb01 f303 	mul.w	r3, r1, r3
 8008054:	1ad3      	subs	r3, r2, r3
 8008056:	00db      	lsls	r3, r3, #3
 8008058:	3332      	adds	r3, #50	@ 0x32
 800805a:	4a08      	ldr	r2, [pc, #32]	@ (800807c <UART_SetConfig+0x2d4>)
 800805c:	fba2 2303 	umull	r2, r3, r2, r3
 8008060:	095b      	lsrs	r3, r3, #5
 8008062:	f003 0207 	and.w	r2, r3, #7
 8008066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4422      	add	r2, r4
 800806e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008070:	e106      	b.n	8008280 <UART_SetConfig+0x4d8>
 8008072:	bf00      	nop
 8008074:	40011000 	.word	0x40011000
 8008078:	40011400 	.word	0x40011400
 800807c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008080:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008084:	2200      	movs	r2, #0
 8008086:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800808a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800808e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008092:	4642      	mov	r2, r8
 8008094:	464b      	mov	r3, r9
 8008096:	1891      	adds	r1, r2, r2
 8008098:	6239      	str	r1, [r7, #32]
 800809a:	415b      	adcs	r3, r3
 800809c:	627b      	str	r3, [r7, #36]	@ 0x24
 800809e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80080a2:	4641      	mov	r1, r8
 80080a4:	1854      	adds	r4, r2, r1
 80080a6:	4649      	mov	r1, r9
 80080a8:	eb43 0501 	adc.w	r5, r3, r1
 80080ac:	f04f 0200 	mov.w	r2, #0
 80080b0:	f04f 0300 	mov.w	r3, #0
 80080b4:	00eb      	lsls	r3, r5, #3
 80080b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80080ba:	00e2      	lsls	r2, r4, #3
 80080bc:	4614      	mov	r4, r2
 80080be:	461d      	mov	r5, r3
 80080c0:	4643      	mov	r3, r8
 80080c2:	18e3      	adds	r3, r4, r3
 80080c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80080c8:	464b      	mov	r3, r9
 80080ca:	eb45 0303 	adc.w	r3, r5, r3
 80080ce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80080d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	2200      	movs	r2, #0
 80080da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80080de:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80080e2:	f04f 0200 	mov.w	r2, #0
 80080e6:	f04f 0300 	mov.w	r3, #0
 80080ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80080ee:	4629      	mov	r1, r5
 80080f0:	008b      	lsls	r3, r1, #2
 80080f2:	4621      	mov	r1, r4
 80080f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80080f8:	4621      	mov	r1, r4
 80080fa:	008a      	lsls	r2, r1, #2
 80080fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008100:	f7f8 fdc2 	bl	8000c88 <__aeabi_uldivmod>
 8008104:	4602      	mov	r2, r0
 8008106:	460b      	mov	r3, r1
 8008108:	4b60      	ldr	r3, [pc, #384]	@ (800828c <UART_SetConfig+0x4e4>)
 800810a:	fba3 2302 	umull	r2, r3, r3, r2
 800810e:	095b      	lsrs	r3, r3, #5
 8008110:	011c      	lsls	r4, r3, #4
 8008112:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008116:	2200      	movs	r2, #0
 8008118:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800811c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008120:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008124:	4642      	mov	r2, r8
 8008126:	464b      	mov	r3, r9
 8008128:	1891      	adds	r1, r2, r2
 800812a:	61b9      	str	r1, [r7, #24]
 800812c:	415b      	adcs	r3, r3
 800812e:	61fb      	str	r3, [r7, #28]
 8008130:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008134:	4641      	mov	r1, r8
 8008136:	1851      	adds	r1, r2, r1
 8008138:	6139      	str	r1, [r7, #16]
 800813a:	4649      	mov	r1, r9
 800813c:	414b      	adcs	r3, r1
 800813e:	617b      	str	r3, [r7, #20]
 8008140:	f04f 0200 	mov.w	r2, #0
 8008144:	f04f 0300 	mov.w	r3, #0
 8008148:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800814c:	4659      	mov	r1, fp
 800814e:	00cb      	lsls	r3, r1, #3
 8008150:	4651      	mov	r1, sl
 8008152:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008156:	4651      	mov	r1, sl
 8008158:	00ca      	lsls	r2, r1, #3
 800815a:	4610      	mov	r0, r2
 800815c:	4619      	mov	r1, r3
 800815e:	4603      	mov	r3, r0
 8008160:	4642      	mov	r2, r8
 8008162:	189b      	adds	r3, r3, r2
 8008164:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008168:	464b      	mov	r3, r9
 800816a:	460a      	mov	r2, r1
 800816c:	eb42 0303 	adc.w	r3, r2, r3
 8008170:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008178:	685b      	ldr	r3, [r3, #4]
 800817a:	2200      	movs	r2, #0
 800817c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800817e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008180:	f04f 0200 	mov.w	r2, #0
 8008184:	f04f 0300 	mov.w	r3, #0
 8008188:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800818c:	4649      	mov	r1, r9
 800818e:	008b      	lsls	r3, r1, #2
 8008190:	4641      	mov	r1, r8
 8008192:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008196:	4641      	mov	r1, r8
 8008198:	008a      	lsls	r2, r1, #2
 800819a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800819e:	f7f8 fd73 	bl	8000c88 <__aeabi_uldivmod>
 80081a2:	4602      	mov	r2, r0
 80081a4:	460b      	mov	r3, r1
 80081a6:	4611      	mov	r1, r2
 80081a8:	4b38      	ldr	r3, [pc, #224]	@ (800828c <UART_SetConfig+0x4e4>)
 80081aa:	fba3 2301 	umull	r2, r3, r3, r1
 80081ae:	095b      	lsrs	r3, r3, #5
 80081b0:	2264      	movs	r2, #100	@ 0x64
 80081b2:	fb02 f303 	mul.w	r3, r2, r3
 80081b6:	1acb      	subs	r3, r1, r3
 80081b8:	011b      	lsls	r3, r3, #4
 80081ba:	3332      	adds	r3, #50	@ 0x32
 80081bc:	4a33      	ldr	r2, [pc, #204]	@ (800828c <UART_SetConfig+0x4e4>)
 80081be:	fba2 2303 	umull	r2, r3, r2, r3
 80081c2:	095b      	lsrs	r3, r3, #5
 80081c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80081c8:	441c      	add	r4, r3
 80081ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80081ce:	2200      	movs	r2, #0
 80081d0:	673b      	str	r3, [r7, #112]	@ 0x70
 80081d2:	677a      	str	r2, [r7, #116]	@ 0x74
 80081d4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80081d8:	4642      	mov	r2, r8
 80081da:	464b      	mov	r3, r9
 80081dc:	1891      	adds	r1, r2, r2
 80081de:	60b9      	str	r1, [r7, #8]
 80081e0:	415b      	adcs	r3, r3
 80081e2:	60fb      	str	r3, [r7, #12]
 80081e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80081e8:	4641      	mov	r1, r8
 80081ea:	1851      	adds	r1, r2, r1
 80081ec:	6039      	str	r1, [r7, #0]
 80081ee:	4649      	mov	r1, r9
 80081f0:	414b      	adcs	r3, r1
 80081f2:	607b      	str	r3, [r7, #4]
 80081f4:	f04f 0200 	mov.w	r2, #0
 80081f8:	f04f 0300 	mov.w	r3, #0
 80081fc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008200:	4659      	mov	r1, fp
 8008202:	00cb      	lsls	r3, r1, #3
 8008204:	4651      	mov	r1, sl
 8008206:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800820a:	4651      	mov	r1, sl
 800820c:	00ca      	lsls	r2, r1, #3
 800820e:	4610      	mov	r0, r2
 8008210:	4619      	mov	r1, r3
 8008212:	4603      	mov	r3, r0
 8008214:	4642      	mov	r2, r8
 8008216:	189b      	adds	r3, r3, r2
 8008218:	66bb      	str	r3, [r7, #104]	@ 0x68
 800821a:	464b      	mov	r3, r9
 800821c:	460a      	mov	r2, r1
 800821e:	eb42 0303 	adc.w	r3, r2, r3
 8008222:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008228:	685b      	ldr	r3, [r3, #4]
 800822a:	2200      	movs	r2, #0
 800822c:	663b      	str	r3, [r7, #96]	@ 0x60
 800822e:	667a      	str	r2, [r7, #100]	@ 0x64
 8008230:	f04f 0200 	mov.w	r2, #0
 8008234:	f04f 0300 	mov.w	r3, #0
 8008238:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800823c:	4649      	mov	r1, r9
 800823e:	008b      	lsls	r3, r1, #2
 8008240:	4641      	mov	r1, r8
 8008242:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008246:	4641      	mov	r1, r8
 8008248:	008a      	lsls	r2, r1, #2
 800824a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800824e:	f7f8 fd1b 	bl	8000c88 <__aeabi_uldivmod>
 8008252:	4602      	mov	r2, r0
 8008254:	460b      	mov	r3, r1
 8008256:	4b0d      	ldr	r3, [pc, #52]	@ (800828c <UART_SetConfig+0x4e4>)
 8008258:	fba3 1302 	umull	r1, r3, r3, r2
 800825c:	095b      	lsrs	r3, r3, #5
 800825e:	2164      	movs	r1, #100	@ 0x64
 8008260:	fb01 f303 	mul.w	r3, r1, r3
 8008264:	1ad3      	subs	r3, r2, r3
 8008266:	011b      	lsls	r3, r3, #4
 8008268:	3332      	adds	r3, #50	@ 0x32
 800826a:	4a08      	ldr	r2, [pc, #32]	@ (800828c <UART_SetConfig+0x4e4>)
 800826c:	fba2 2303 	umull	r2, r3, r2, r3
 8008270:	095b      	lsrs	r3, r3, #5
 8008272:	f003 020f 	and.w	r2, r3, #15
 8008276:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4422      	add	r2, r4
 800827e:	609a      	str	r2, [r3, #8]
}
 8008280:	bf00      	nop
 8008282:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008286:	46bd      	mov	sp, r7
 8008288:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800828c:	51eb851f 	.word	0x51eb851f

08008290 <__cvt>:
 8008290:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008294:	ec57 6b10 	vmov	r6, r7, d0
 8008298:	2f00      	cmp	r7, #0
 800829a:	460c      	mov	r4, r1
 800829c:	4619      	mov	r1, r3
 800829e:	463b      	mov	r3, r7
 80082a0:	bfbb      	ittet	lt
 80082a2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80082a6:	461f      	movlt	r7, r3
 80082a8:	2300      	movge	r3, #0
 80082aa:	232d      	movlt	r3, #45	@ 0x2d
 80082ac:	700b      	strb	r3, [r1, #0]
 80082ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80082b0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80082b4:	4691      	mov	r9, r2
 80082b6:	f023 0820 	bic.w	r8, r3, #32
 80082ba:	bfbc      	itt	lt
 80082bc:	4632      	movlt	r2, r6
 80082be:	4616      	movlt	r6, r2
 80082c0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80082c4:	d005      	beq.n	80082d2 <__cvt+0x42>
 80082c6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80082ca:	d100      	bne.n	80082ce <__cvt+0x3e>
 80082cc:	3401      	adds	r4, #1
 80082ce:	2102      	movs	r1, #2
 80082d0:	e000      	b.n	80082d4 <__cvt+0x44>
 80082d2:	2103      	movs	r1, #3
 80082d4:	ab03      	add	r3, sp, #12
 80082d6:	9301      	str	r3, [sp, #4]
 80082d8:	ab02      	add	r3, sp, #8
 80082da:	9300      	str	r3, [sp, #0]
 80082dc:	ec47 6b10 	vmov	d0, r6, r7
 80082e0:	4653      	mov	r3, sl
 80082e2:	4622      	mov	r2, r4
 80082e4:	f001 f8bc 	bl	8009460 <_dtoa_r>
 80082e8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80082ec:	4605      	mov	r5, r0
 80082ee:	d119      	bne.n	8008324 <__cvt+0x94>
 80082f0:	f019 0f01 	tst.w	r9, #1
 80082f4:	d00e      	beq.n	8008314 <__cvt+0x84>
 80082f6:	eb00 0904 	add.w	r9, r0, r4
 80082fa:	2200      	movs	r2, #0
 80082fc:	2300      	movs	r3, #0
 80082fe:	4630      	mov	r0, r6
 8008300:	4639      	mov	r1, r7
 8008302:	f7f8 fbe1 	bl	8000ac8 <__aeabi_dcmpeq>
 8008306:	b108      	cbz	r0, 800830c <__cvt+0x7c>
 8008308:	f8cd 900c 	str.w	r9, [sp, #12]
 800830c:	2230      	movs	r2, #48	@ 0x30
 800830e:	9b03      	ldr	r3, [sp, #12]
 8008310:	454b      	cmp	r3, r9
 8008312:	d31e      	bcc.n	8008352 <__cvt+0xc2>
 8008314:	9b03      	ldr	r3, [sp, #12]
 8008316:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008318:	1b5b      	subs	r3, r3, r5
 800831a:	4628      	mov	r0, r5
 800831c:	6013      	str	r3, [r2, #0]
 800831e:	b004      	add	sp, #16
 8008320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008324:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008328:	eb00 0904 	add.w	r9, r0, r4
 800832c:	d1e5      	bne.n	80082fa <__cvt+0x6a>
 800832e:	7803      	ldrb	r3, [r0, #0]
 8008330:	2b30      	cmp	r3, #48	@ 0x30
 8008332:	d10a      	bne.n	800834a <__cvt+0xba>
 8008334:	2200      	movs	r2, #0
 8008336:	2300      	movs	r3, #0
 8008338:	4630      	mov	r0, r6
 800833a:	4639      	mov	r1, r7
 800833c:	f7f8 fbc4 	bl	8000ac8 <__aeabi_dcmpeq>
 8008340:	b918      	cbnz	r0, 800834a <__cvt+0xba>
 8008342:	f1c4 0401 	rsb	r4, r4, #1
 8008346:	f8ca 4000 	str.w	r4, [sl]
 800834a:	f8da 3000 	ldr.w	r3, [sl]
 800834e:	4499      	add	r9, r3
 8008350:	e7d3      	b.n	80082fa <__cvt+0x6a>
 8008352:	1c59      	adds	r1, r3, #1
 8008354:	9103      	str	r1, [sp, #12]
 8008356:	701a      	strb	r2, [r3, #0]
 8008358:	e7d9      	b.n	800830e <__cvt+0x7e>

0800835a <__exponent>:
 800835a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800835c:	2900      	cmp	r1, #0
 800835e:	bfba      	itte	lt
 8008360:	4249      	neglt	r1, r1
 8008362:	232d      	movlt	r3, #45	@ 0x2d
 8008364:	232b      	movge	r3, #43	@ 0x2b
 8008366:	2909      	cmp	r1, #9
 8008368:	7002      	strb	r2, [r0, #0]
 800836a:	7043      	strb	r3, [r0, #1]
 800836c:	dd29      	ble.n	80083c2 <__exponent+0x68>
 800836e:	f10d 0307 	add.w	r3, sp, #7
 8008372:	461d      	mov	r5, r3
 8008374:	270a      	movs	r7, #10
 8008376:	461a      	mov	r2, r3
 8008378:	fbb1 f6f7 	udiv	r6, r1, r7
 800837c:	fb07 1416 	mls	r4, r7, r6, r1
 8008380:	3430      	adds	r4, #48	@ 0x30
 8008382:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008386:	460c      	mov	r4, r1
 8008388:	2c63      	cmp	r4, #99	@ 0x63
 800838a:	f103 33ff 	add.w	r3, r3, #4294967295
 800838e:	4631      	mov	r1, r6
 8008390:	dcf1      	bgt.n	8008376 <__exponent+0x1c>
 8008392:	3130      	adds	r1, #48	@ 0x30
 8008394:	1e94      	subs	r4, r2, #2
 8008396:	f803 1c01 	strb.w	r1, [r3, #-1]
 800839a:	1c41      	adds	r1, r0, #1
 800839c:	4623      	mov	r3, r4
 800839e:	42ab      	cmp	r3, r5
 80083a0:	d30a      	bcc.n	80083b8 <__exponent+0x5e>
 80083a2:	f10d 0309 	add.w	r3, sp, #9
 80083a6:	1a9b      	subs	r3, r3, r2
 80083a8:	42ac      	cmp	r4, r5
 80083aa:	bf88      	it	hi
 80083ac:	2300      	movhi	r3, #0
 80083ae:	3302      	adds	r3, #2
 80083b0:	4403      	add	r3, r0
 80083b2:	1a18      	subs	r0, r3, r0
 80083b4:	b003      	add	sp, #12
 80083b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083b8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80083bc:	f801 6f01 	strb.w	r6, [r1, #1]!
 80083c0:	e7ed      	b.n	800839e <__exponent+0x44>
 80083c2:	2330      	movs	r3, #48	@ 0x30
 80083c4:	3130      	adds	r1, #48	@ 0x30
 80083c6:	7083      	strb	r3, [r0, #2]
 80083c8:	70c1      	strb	r1, [r0, #3]
 80083ca:	1d03      	adds	r3, r0, #4
 80083cc:	e7f1      	b.n	80083b2 <__exponent+0x58>
	...

080083d0 <_printf_float>:
 80083d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083d4:	b08d      	sub	sp, #52	@ 0x34
 80083d6:	460c      	mov	r4, r1
 80083d8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80083dc:	4616      	mov	r6, r2
 80083de:	461f      	mov	r7, r3
 80083e0:	4605      	mov	r5, r0
 80083e2:	f000 ff27 	bl	8009234 <_localeconv_r>
 80083e6:	6803      	ldr	r3, [r0, #0]
 80083e8:	9304      	str	r3, [sp, #16]
 80083ea:	4618      	mov	r0, r3
 80083ec:	f7f7 ff40 	bl	8000270 <strlen>
 80083f0:	2300      	movs	r3, #0
 80083f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80083f4:	f8d8 3000 	ldr.w	r3, [r8]
 80083f8:	9005      	str	r0, [sp, #20]
 80083fa:	3307      	adds	r3, #7
 80083fc:	f023 0307 	bic.w	r3, r3, #7
 8008400:	f103 0208 	add.w	r2, r3, #8
 8008404:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008408:	f8d4 b000 	ldr.w	fp, [r4]
 800840c:	f8c8 2000 	str.w	r2, [r8]
 8008410:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008414:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008418:	9307      	str	r3, [sp, #28]
 800841a:	f8cd 8018 	str.w	r8, [sp, #24]
 800841e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008422:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008426:	4b9c      	ldr	r3, [pc, #624]	@ (8008698 <_printf_float+0x2c8>)
 8008428:	f04f 32ff 	mov.w	r2, #4294967295
 800842c:	f7f8 fb7e 	bl	8000b2c <__aeabi_dcmpun>
 8008430:	bb70      	cbnz	r0, 8008490 <_printf_float+0xc0>
 8008432:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008436:	4b98      	ldr	r3, [pc, #608]	@ (8008698 <_printf_float+0x2c8>)
 8008438:	f04f 32ff 	mov.w	r2, #4294967295
 800843c:	f7f8 fb58 	bl	8000af0 <__aeabi_dcmple>
 8008440:	bb30      	cbnz	r0, 8008490 <_printf_float+0xc0>
 8008442:	2200      	movs	r2, #0
 8008444:	2300      	movs	r3, #0
 8008446:	4640      	mov	r0, r8
 8008448:	4649      	mov	r1, r9
 800844a:	f7f8 fb47 	bl	8000adc <__aeabi_dcmplt>
 800844e:	b110      	cbz	r0, 8008456 <_printf_float+0x86>
 8008450:	232d      	movs	r3, #45	@ 0x2d
 8008452:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008456:	4a91      	ldr	r2, [pc, #580]	@ (800869c <_printf_float+0x2cc>)
 8008458:	4b91      	ldr	r3, [pc, #580]	@ (80086a0 <_printf_float+0x2d0>)
 800845a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800845e:	bf8c      	ite	hi
 8008460:	4690      	movhi	r8, r2
 8008462:	4698      	movls	r8, r3
 8008464:	2303      	movs	r3, #3
 8008466:	6123      	str	r3, [r4, #16]
 8008468:	f02b 0304 	bic.w	r3, fp, #4
 800846c:	6023      	str	r3, [r4, #0]
 800846e:	f04f 0900 	mov.w	r9, #0
 8008472:	9700      	str	r7, [sp, #0]
 8008474:	4633      	mov	r3, r6
 8008476:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008478:	4621      	mov	r1, r4
 800847a:	4628      	mov	r0, r5
 800847c:	f000 f9d2 	bl	8008824 <_printf_common>
 8008480:	3001      	adds	r0, #1
 8008482:	f040 808d 	bne.w	80085a0 <_printf_float+0x1d0>
 8008486:	f04f 30ff 	mov.w	r0, #4294967295
 800848a:	b00d      	add	sp, #52	@ 0x34
 800848c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008490:	4642      	mov	r2, r8
 8008492:	464b      	mov	r3, r9
 8008494:	4640      	mov	r0, r8
 8008496:	4649      	mov	r1, r9
 8008498:	f7f8 fb48 	bl	8000b2c <__aeabi_dcmpun>
 800849c:	b140      	cbz	r0, 80084b0 <_printf_float+0xe0>
 800849e:	464b      	mov	r3, r9
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	bfbc      	itt	lt
 80084a4:	232d      	movlt	r3, #45	@ 0x2d
 80084a6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80084aa:	4a7e      	ldr	r2, [pc, #504]	@ (80086a4 <_printf_float+0x2d4>)
 80084ac:	4b7e      	ldr	r3, [pc, #504]	@ (80086a8 <_printf_float+0x2d8>)
 80084ae:	e7d4      	b.n	800845a <_printf_float+0x8a>
 80084b0:	6863      	ldr	r3, [r4, #4]
 80084b2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80084b6:	9206      	str	r2, [sp, #24]
 80084b8:	1c5a      	adds	r2, r3, #1
 80084ba:	d13b      	bne.n	8008534 <_printf_float+0x164>
 80084bc:	2306      	movs	r3, #6
 80084be:	6063      	str	r3, [r4, #4]
 80084c0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80084c4:	2300      	movs	r3, #0
 80084c6:	6022      	str	r2, [r4, #0]
 80084c8:	9303      	str	r3, [sp, #12]
 80084ca:	ab0a      	add	r3, sp, #40	@ 0x28
 80084cc:	e9cd a301 	strd	sl, r3, [sp, #4]
 80084d0:	ab09      	add	r3, sp, #36	@ 0x24
 80084d2:	9300      	str	r3, [sp, #0]
 80084d4:	6861      	ldr	r1, [r4, #4]
 80084d6:	ec49 8b10 	vmov	d0, r8, r9
 80084da:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80084de:	4628      	mov	r0, r5
 80084e0:	f7ff fed6 	bl	8008290 <__cvt>
 80084e4:	9b06      	ldr	r3, [sp, #24]
 80084e6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80084e8:	2b47      	cmp	r3, #71	@ 0x47
 80084ea:	4680      	mov	r8, r0
 80084ec:	d129      	bne.n	8008542 <_printf_float+0x172>
 80084ee:	1cc8      	adds	r0, r1, #3
 80084f0:	db02      	blt.n	80084f8 <_printf_float+0x128>
 80084f2:	6863      	ldr	r3, [r4, #4]
 80084f4:	4299      	cmp	r1, r3
 80084f6:	dd41      	ble.n	800857c <_printf_float+0x1ac>
 80084f8:	f1aa 0a02 	sub.w	sl, sl, #2
 80084fc:	fa5f fa8a 	uxtb.w	sl, sl
 8008500:	3901      	subs	r1, #1
 8008502:	4652      	mov	r2, sl
 8008504:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008508:	9109      	str	r1, [sp, #36]	@ 0x24
 800850a:	f7ff ff26 	bl	800835a <__exponent>
 800850e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008510:	1813      	adds	r3, r2, r0
 8008512:	2a01      	cmp	r2, #1
 8008514:	4681      	mov	r9, r0
 8008516:	6123      	str	r3, [r4, #16]
 8008518:	dc02      	bgt.n	8008520 <_printf_float+0x150>
 800851a:	6822      	ldr	r2, [r4, #0]
 800851c:	07d2      	lsls	r2, r2, #31
 800851e:	d501      	bpl.n	8008524 <_printf_float+0x154>
 8008520:	3301      	adds	r3, #1
 8008522:	6123      	str	r3, [r4, #16]
 8008524:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008528:	2b00      	cmp	r3, #0
 800852a:	d0a2      	beq.n	8008472 <_printf_float+0xa2>
 800852c:	232d      	movs	r3, #45	@ 0x2d
 800852e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008532:	e79e      	b.n	8008472 <_printf_float+0xa2>
 8008534:	9a06      	ldr	r2, [sp, #24]
 8008536:	2a47      	cmp	r2, #71	@ 0x47
 8008538:	d1c2      	bne.n	80084c0 <_printf_float+0xf0>
 800853a:	2b00      	cmp	r3, #0
 800853c:	d1c0      	bne.n	80084c0 <_printf_float+0xf0>
 800853e:	2301      	movs	r3, #1
 8008540:	e7bd      	b.n	80084be <_printf_float+0xee>
 8008542:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008546:	d9db      	bls.n	8008500 <_printf_float+0x130>
 8008548:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800854c:	d118      	bne.n	8008580 <_printf_float+0x1b0>
 800854e:	2900      	cmp	r1, #0
 8008550:	6863      	ldr	r3, [r4, #4]
 8008552:	dd0b      	ble.n	800856c <_printf_float+0x19c>
 8008554:	6121      	str	r1, [r4, #16]
 8008556:	b913      	cbnz	r3, 800855e <_printf_float+0x18e>
 8008558:	6822      	ldr	r2, [r4, #0]
 800855a:	07d0      	lsls	r0, r2, #31
 800855c:	d502      	bpl.n	8008564 <_printf_float+0x194>
 800855e:	3301      	adds	r3, #1
 8008560:	440b      	add	r3, r1
 8008562:	6123      	str	r3, [r4, #16]
 8008564:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008566:	f04f 0900 	mov.w	r9, #0
 800856a:	e7db      	b.n	8008524 <_printf_float+0x154>
 800856c:	b913      	cbnz	r3, 8008574 <_printf_float+0x1a4>
 800856e:	6822      	ldr	r2, [r4, #0]
 8008570:	07d2      	lsls	r2, r2, #31
 8008572:	d501      	bpl.n	8008578 <_printf_float+0x1a8>
 8008574:	3302      	adds	r3, #2
 8008576:	e7f4      	b.n	8008562 <_printf_float+0x192>
 8008578:	2301      	movs	r3, #1
 800857a:	e7f2      	b.n	8008562 <_printf_float+0x192>
 800857c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008580:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008582:	4299      	cmp	r1, r3
 8008584:	db05      	blt.n	8008592 <_printf_float+0x1c2>
 8008586:	6823      	ldr	r3, [r4, #0]
 8008588:	6121      	str	r1, [r4, #16]
 800858a:	07d8      	lsls	r0, r3, #31
 800858c:	d5ea      	bpl.n	8008564 <_printf_float+0x194>
 800858e:	1c4b      	adds	r3, r1, #1
 8008590:	e7e7      	b.n	8008562 <_printf_float+0x192>
 8008592:	2900      	cmp	r1, #0
 8008594:	bfd4      	ite	le
 8008596:	f1c1 0202 	rsble	r2, r1, #2
 800859a:	2201      	movgt	r2, #1
 800859c:	4413      	add	r3, r2
 800859e:	e7e0      	b.n	8008562 <_printf_float+0x192>
 80085a0:	6823      	ldr	r3, [r4, #0]
 80085a2:	055a      	lsls	r2, r3, #21
 80085a4:	d407      	bmi.n	80085b6 <_printf_float+0x1e6>
 80085a6:	6923      	ldr	r3, [r4, #16]
 80085a8:	4642      	mov	r2, r8
 80085aa:	4631      	mov	r1, r6
 80085ac:	4628      	mov	r0, r5
 80085ae:	47b8      	blx	r7
 80085b0:	3001      	adds	r0, #1
 80085b2:	d12b      	bne.n	800860c <_printf_float+0x23c>
 80085b4:	e767      	b.n	8008486 <_printf_float+0xb6>
 80085b6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80085ba:	f240 80dd 	bls.w	8008778 <_printf_float+0x3a8>
 80085be:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80085c2:	2200      	movs	r2, #0
 80085c4:	2300      	movs	r3, #0
 80085c6:	f7f8 fa7f 	bl	8000ac8 <__aeabi_dcmpeq>
 80085ca:	2800      	cmp	r0, #0
 80085cc:	d033      	beq.n	8008636 <_printf_float+0x266>
 80085ce:	4a37      	ldr	r2, [pc, #220]	@ (80086ac <_printf_float+0x2dc>)
 80085d0:	2301      	movs	r3, #1
 80085d2:	4631      	mov	r1, r6
 80085d4:	4628      	mov	r0, r5
 80085d6:	47b8      	blx	r7
 80085d8:	3001      	adds	r0, #1
 80085da:	f43f af54 	beq.w	8008486 <_printf_float+0xb6>
 80085de:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80085e2:	4543      	cmp	r3, r8
 80085e4:	db02      	blt.n	80085ec <_printf_float+0x21c>
 80085e6:	6823      	ldr	r3, [r4, #0]
 80085e8:	07d8      	lsls	r0, r3, #31
 80085ea:	d50f      	bpl.n	800860c <_printf_float+0x23c>
 80085ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80085f0:	4631      	mov	r1, r6
 80085f2:	4628      	mov	r0, r5
 80085f4:	47b8      	blx	r7
 80085f6:	3001      	adds	r0, #1
 80085f8:	f43f af45 	beq.w	8008486 <_printf_float+0xb6>
 80085fc:	f04f 0900 	mov.w	r9, #0
 8008600:	f108 38ff 	add.w	r8, r8, #4294967295
 8008604:	f104 0a1a 	add.w	sl, r4, #26
 8008608:	45c8      	cmp	r8, r9
 800860a:	dc09      	bgt.n	8008620 <_printf_float+0x250>
 800860c:	6823      	ldr	r3, [r4, #0]
 800860e:	079b      	lsls	r3, r3, #30
 8008610:	f100 8103 	bmi.w	800881a <_printf_float+0x44a>
 8008614:	68e0      	ldr	r0, [r4, #12]
 8008616:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008618:	4298      	cmp	r0, r3
 800861a:	bfb8      	it	lt
 800861c:	4618      	movlt	r0, r3
 800861e:	e734      	b.n	800848a <_printf_float+0xba>
 8008620:	2301      	movs	r3, #1
 8008622:	4652      	mov	r2, sl
 8008624:	4631      	mov	r1, r6
 8008626:	4628      	mov	r0, r5
 8008628:	47b8      	blx	r7
 800862a:	3001      	adds	r0, #1
 800862c:	f43f af2b 	beq.w	8008486 <_printf_float+0xb6>
 8008630:	f109 0901 	add.w	r9, r9, #1
 8008634:	e7e8      	b.n	8008608 <_printf_float+0x238>
 8008636:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008638:	2b00      	cmp	r3, #0
 800863a:	dc39      	bgt.n	80086b0 <_printf_float+0x2e0>
 800863c:	4a1b      	ldr	r2, [pc, #108]	@ (80086ac <_printf_float+0x2dc>)
 800863e:	2301      	movs	r3, #1
 8008640:	4631      	mov	r1, r6
 8008642:	4628      	mov	r0, r5
 8008644:	47b8      	blx	r7
 8008646:	3001      	adds	r0, #1
 8008648:	f43f af1d 	beq.w	8008486 <_printf_float+0xb6>
 800864c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008650:	ea59 0303 	orrs.w	r3, r9, r3
 8008654:	d102      	bne.n	800865c <_printf_float+0x28c>
 8008656:	6823      	ldr	r3, [r4, #0]
 8008658:	07d9      	lsls	r1, r3, #31
 800865a:	d5d7      	bpl.n	800860c <_printf_float+0x23c>
 800865c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008660:	4631      	mov	r1, r6
 8008662:	4628      	mov	r0, r5
 8008664:	47b8      	blx	r7
 8008666:	3001      	adds	r0, #1
 8008668:	f43f af0d 	beq.w	8008486 <_printf_float+0xb6>
 800866c:	f04f 0a00 	mov.w	sl, #0
 8008670:	f104 0b1a 	add.w	fp, r4, #26
 8008674:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008676:	425b      	negs	r3, r3
 8008678:	4553      	cmp	r3, sl
 800867a:	dc01      	bgt.n	8008680 <_printf_float+0x2b0>
 800867c:	464b      	mov	r3, r9
 800867e:	e793      	b.n	80085a8 <_printf_float+0x1d8>
 8008680:	2301      	movs	r3, #1
 8008682:	465a      	mov	r2, fp
 8008684:	4631      	mov	r1, r6
 8008686:	4628      	mov	r0, r5
 8008688:	47b8      	blx	r7
 800868a:	3001      	adds	r0, #1
 800868c:	f43f aefb 	beq.w	8008486 <_printf_float+0xb6>
 8008690:	f10a 0a01 	add.w	sl, sl, #1
 8008694:	e7ee      	b.n	8008674 <_printf_float+0x2a4>
 8008696:	bf00      	nop
 8008698:	7fefffff 	.word	0x7fefffff
 800869c:	0800d940 	.word	0x0800d940
 80086a0:	0800d93c 	.word	0x0800d93c
 80086a4:	0800d948 	.word	0x0800d948
 80086a8:	0800d944 	.word	0x0800d944
 80086ac:	0800da82 	.word	0x0800da82
 80086b0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80086b2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80086b6:	4553      	cmp	r3, sl
 80086b8:	bfa8      	it	ge
 80086ba:	4653      	movge	r3, sl
 80086bc:	2b00      	cmp	r3, #0
 80086be:	4699      	mov	r9, r3
 80086c0:	dc36      	bgt.n	8008730 <_printf_float+0x360>
 80086c2:	f04f 0b00 	mov.w	fp, #0
 80086c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80086ca:	f104 021a 	add.w	r2, r4, #26
 80086ce:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80086d0:	9306      	str	r3, [sp, #24]
 80086d2:	eba3 0309 	sub.w	r3, r3, r9
 80086d6:	455b      	cmp	r3, fp
 80086d8:	dc31      	bgt.n	800873e <_printf_float+0x36e>
 80086da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086dc:	459a      	cmp	sl, r3
 80086de:	dc3a      	bgt.n	8008756 <_printf_float+0x386>
 80086e0:	6823      	ldr	r3, [r4, #0]
 80086e2:	07da      	lsls	r2, r3, #31
 80086e4:	d437      	bmi.n	8008756 <_printf_float+0x386>
 80086e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086e8:	ebaa 0903 	sub.w	r9, sl, r3
 80086ec:	9b06      	ldr	r3, [sp, #24]
 80086ee:	ebaa 0303 	sub.w	r3, sl, r3
 80086f2:	4599      	cmp	r9, r3
 80086f4:	bfa8      	it	ge
 80086f6:	4699      	movge	r9, r3
 80086f8:	f1b9 0f00 	cmp.w	r9, #0
 80086fc:	dc33      	bgt.n	8008766 <_printf_float+0x396>
 80086fe:	f04f 0800 	mov.w	r8, #0
 8008702:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008706:	f104 0b1a 	add.w	fp, r4, #26
 800870a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800870c:	ebaa 0303 	sub.w	r3, sl, r3
 8008710:	eba3 0309 	sub.w	r3, r3, r9
 8008714:	4543      	cmp	r3, r8
 8008716:	f77f af79 	ble.w	800860c <_printf_float+0x23c>
 800871a:	2301      	movs	r3, #1
 800871c:	465a      	mov	r2, fp
 800871e:	4631      	mov	r1, r6
 8008720:	4628      	mov	r0, r5
 8008722:	47b8      	blx	r7
 8008724:	3001      	adds	r0, #1
 8008726:	f43f aeae 	beq.w	8008486 <_printf_float+0xb6>
 800872a:	f108 0801 	add.w	r8, r8, #1
 800872e:	e7ec      	b.n	800870a <_printf_float+0x33a>
 8008730:	4642      	mov	r2, r8
 8008732:	4631      	mov	r1, r6
 8008734:	4628      	mov	r0, r5
 8008736:	47b8      	blx	r7
 8008738:	3001      	adds	r0, #1
 800873a:	d1c2      	bne.n	80086c2 <_printf_float+0x2f2>
 800873c:	e6a3      	b.n	8008486 <_printf_float+0xb6>
 800873e:	2301      	movs	r3, #1
 8008740:	4631      	mov	r1, r6
 8008742:	4628      	mov	r0, r5
 8008744:	9206      	str	r2, [sp, #24]
 8008746:	47b8      	blx	r7
 8008748:	3001      	adds	r0, #1
 800874a:	f43f ae9c 	beq.w	8008486 <_printf_float+0xb6>
 800874e:	9a06      	ldr	r2, [sp, #24]
 8008750:	f10b 0b01 	add.w	fp, fp, #1
 8008754:	e7bb      	b.n	80086ce <_printf_float+0x2fe>
 8008756:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800875a:	4631      	mov	r1, r6
 800875c:	4628      	mov	r0, r5
 800875e:	47b8      	blx	r7
 8008760:	3001      	adds	r0, #1
 8008762:	d1c0      	bne.n	80086e6 <_printf_float+0x316>
 8008764:	e68f      	b.n	8008486 <_printf_float+0xb6>
 8008766:	9a06      	ldr	r2, [sp, #24]
 8008768:	464b      	mov	r3, r9
 800876a:	4442      	add	r2, r8
 800876c:	4631      	mov	r1, r6
 800876e:	4628      	mov	r0, r5
 8008770:	47b8      	blx	r7
 8008772:	3001      	adds	r0, #1
 8008774:	d1c3      	bne.n	80086fe <_printf_float+0x32e>
 8008776:	e686      	b.n	8008486 <_printf_float+0xb6>
 8008778:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800877c:	f1ba 0f01 	cmp.w	sl, #1
 8008780:	dc01      	bgt.n	8008786 <_printf_float+0x3b6>
 8008782:	07db      	lsls	r3, r3, #31
 8008784:	d536      	bpl.n	80087f4 <_printf_float+0x424>
 8008786:	2301      	movs	r3, #1
 8008788:	4642      	mov	r2, r8
 800878a:	4631      	mov	r1, r6
 800878c:	4628      	mov	r0, r5
 800878e:	47b8      	blx	r7
 8008790:	3001      	adds	r0, #1
 8008792:	f43f ae78 	beq.w	8008486 <_printf_float+0xb6>
 8008796:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800879a:	4631      	mov	r1, r6
 800879c:	4628      	mov	r0, r5
 800879e:	47b8      	blx	r7
 80087a0:	3001      	adds	r0, #1
 80087a2:	f43f ae70 	beq.w	8008486 <_printf_float+0xb6>
 80087a6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80087aa:	2200      	movs	r2, #0
 80087ac:	2300      	movs	r3, #0
 80087ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 80087b2:	f7f8 f989 	bl	8000ac8 <__aeabi_dcmpeq>
 80087b6:	b9c0      	cbnz	r0, 80087ea <_printf_float+0x41a>
 80087b8:	4653      	mov	r3, sl
 80087ba:	f108 0201 	add.w	r2, r8, #1
 80087be:	4631      	mov	r1, r6
 80087c0:	4628      	mov	r0, r5
 80087c2:	47b8      	blx	r7
 80087c4:	3001      	adds	r0, #1
 80087c6:	d10c      	bne.n	80087e2 <_printf_float+0x412>
 80087c8:	e65d      	b.n	8008486 <_printf_float+0xb6>
 80087ca:	2301      	movs	r3, #1
 80087cc:	465a      	mov	r2, fp
 80087ce:	4631      	mov	r1, r6
 80087d0:	4628      	mov	r0, r5
 80087d2:	47b8      	blx	r7
 80087d4:	3001      	adds	r0, #1
 80087d6:	f43f ae56 	beq.w	8008486 <_printf_float+0xb6>
 80087da:	f108 0801 	add.w	r8, r8, #1
 80087de:	45d0      	cmp	r8, sl
 80087e0:	dbf3      	blt.n	80087ca <_printf_float+0x3fa>
 80087e2:	464b      	mov	r3, r9
 80087e4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80087e8:	e6df      	b.n	80085aa <_printf_float+0x1da>
 80087ea:	f04f 0800 	mov.w	r8, #0
 80087ee:	f104 0b1a 	add.w	fp, r4, #26
 80087f2:	e7f4      	b.n	80087de <_printf_float+0x40e>
 80087f4:	2301      	movs	r3, #1
 80087f6:	4642      	mov	r2, r8
 80087f8:	e7e1      	b.n	80087be <_printf_float+0x3ee>
 80087fa:	2301      	movs	r3, #1
 80087fc:	464a      	mov	r2, r9
 80087fe:	4631      	mov	r1, r6
 8008800:	4628      	mov	r0, r5
 8008802:	47b8      	blx	r7
 8008804:	3001      	adds	r0, #1
 8008806:	f43f ae3e 	beq.w	8008486 <_printf_float+0xb6>
 800880a:	f108 0801 	add.w	r8, r8, #1
 800880e:	68e3      	ldr	r3, [r4, #12]
 8008810:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008812:	1a5b      	subs	r3, r3, r1
 8008814:	4543      	cmp	r3, r8
 8008816:	dcf0      	bgt.n	80087fa <_printf_float+0x42a>
 8008818:	e6fc      	b.n	8008614 <_printf_float+0x244>
 800881a:	f04f 0800 	mov.w	r8, #0
 800881e:	f104 0919 	add.w	r9, r4, #25
 8008822:	e7f4      	b.n	800880e <_printf_float+0x43e>

08008824 <_printf_common>:
 8008824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008828:	4616      	mov	r6, r2
 800882a:	4698      	mov	r8, r3
 800882c:	688a      	ldr	r2, [r1, #8]
 800882e:	690b      	ldr	r3, [r1, #16]
 8008830:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008834:	4293      	cmp	r3, r2
 8008836:	bfb8      	it	lt
 8008838:	4613      	movlt	r3, r2
 800883a:	6033      	str	r3, [r6, #0]
 800883c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008840:	4607      	mov	r7, r0
 8008842:	460c      	mov	r4, r1
 8008844:	b10a      	cbz	r2, 800884a <_printf_common+0x26>
 8008846:	3301      	adds	r3, #1
 8008848:	6033      	str	r3, [r6, #0]
 800884a:	6823      	ldr	r3, [r4, #0]
 800884c:	0699      	lsls	r1, r3, #26
 800884e:	bf42      	ittt	mi
 8008850:	6833      	ldrmi	r3, [r6, #0]
 8008852:	3302      	addmi	r3, #2
 8008854:	6033      	strmi	r3, [r6, #0]
 8008856:	6825      	ldr	r5, [r4, #0]
 8008858:	f015 0506 	ands.w	r5, r5, #6
 800885c:	d106      	bne.n	800886c <_printf_common+0x48>
 800885e:	f104 0a19 	add.w	sl, r4, #25
 8008862:	68e3      	ldr	r3, [r4, #12]
 8008864:	6832      	ldr	r2, [r6, #0]
 8008866:	1a9b      	subs	r3, r3, r2
 8008868:	42ab      	cmp	r3, r5
 800886a:	dc26      	bgt.n	80088ba <_printf_common+0x96>
 800886c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008870:	6822      	ldr	r2, [r4, #0]
 8008872:	3b00      	subs	r3, #0
 8008874:	bf18      	it	ne
 8008876:	2301      	movne	r3, #1
 8008878:	0692      	lsls	r2, r2, #26
 800887a:	d42b      	bmi.n	80088d4 <_printf_common+0xb0>
 800887c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008880:	4641      	mov	r1, r8
 8008882:	4638      	mov	r0, r7
 8008884:	47c8      	blx	r9
 8008886:	3001      	adds	r0, #1
 8008888:	d01e      	beq.n	80088c8 <_printf_common+0xa4>
 800888a:	6823      	ldr	r3, [r4, #0]
 800888c:	6922      	ldr	r2, [r4, #16]
 800888e:	f003 0306 	and.w	r3, r3, #6
 8008892:	2b04      	cmp	r3, #4
 8008894:	bf02      	ittt	eq
 8008896:	68e5      	ldreq	r5, [r4, #12]
 8008898:	6833      	ldreq	r3, [r6, #0]
 800889a:	1aed      	subeq	r5, r5, r3
 800889c:	68a3      	ldr	r3, [r4, #8]
 800889e:	bf0c      	ite	eq
 80088a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80088a4:	2500      	movne	r5, #0
 80088a6:	4293      	cmp	r3, r2
 80088a8:	bfc4      	itt	gt
 80088aa:	1a9b      	subgt	r3, r3, r2
 80088ac:	18ed      	addgt	r5, r5, r3
 80088ae:	2600      	movs	r6, #0
 80088b0:	341a      	adds	r4, #26
 80088b2:	42b5      	cmp	r5, r6
 80088b4:	d11a      	bne.n	80088ec <_printf_common+0xc8>
 80088b6:	2000      	movs	r0, #0
 80088b8:	e008      	b.n	80088cc <_printf_common+0xa8>
 80088ba:	2301      	movs	r3, #1
 80088bc:	4652      	mov	r2, sl
 80088be:	4641      	mov	r1, r8
 80088c0:	4638      	mov	r0, r7
 80088c2:	47c8      	blx	r9
 80088c4:	3001      	adds	r0, #1
 80088c6:	d103      	bne.n	80088d0 <_printf_common+0xac>
 80088c8:	f04f 30ff 	mov.w	r0, #4294967295
 80088cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088d0:	3501      	adds	r5, #1
 80088d2:	e7c6      	b.n	8008862 <_printf_common+0x3e>
 80088d4:	18e1      	adds	r1, r4, r3
 80088d6:	1c5a      	adds	r2, r3, #1
 80088d8:	2030      	movs	r0, #48	@ 0x30
 80088da:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80088de:	4422      	add	r2, r4
 80088e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80088e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80088e8:	3302      	adds	r3, #2
 80088ea:	e7c7      	b.n	800887c <_printf_common+0x58>
 80088ec:	2301      	movs	r3, #1
 80088ee:	4622      	mov	r2, r4
 80088f0:	4641      	mov	r1, r8
 80088f2:	4638      	mov	r0, r7
 80088f4:	47c8      	blx	r9
 80088f6:	3001      	adds	r0, #1
 80088f8:	d0e6      	beq.n	80088c8 <_printf_common+0xa4>
 80088fa:	3601      	adds	r6, #1
 80088fc:	e7d9      	b.n	80088b2 <_printf_common+0x8e>
	...

08008900 <_printf_i>:
 8008900:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008904:	7e0f      	ldrb	r7, [r1, #24]
 8008906:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008908:	2f78      	cmp	r7, #120	@ 0x78
 800890a:	4691      	mov	r9, r2
 800890c:	4680      	mov	r8, r0
 800890e:	460c      	mov	r4, r1
 8008910:	469a      	mov	sl, r3
 8008912:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008916:	d807      	bhi.n	8008928 <_printf_i+0x28>
 8008918:	2f62      	cmp	r7, #98	@ 0x62
 800891a:	d80a      	bhi.n	8008932 <_printf_i+0x32>
 800891c:	2f00      	cmp	r7, #0
 800891e:	f000 80d1 	beq.w	8008ac4 <_printf_i+0x1c4>
 8008922:	2f58      	cmp	r7, #88	@ 0x58
 8008924:	f000 80b8 	beq.w	8008a98 <_printf_i+0x198>
 8008928:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800892c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008930:	e03a      	b.n	80089a8 <_printf_i+0xa8>
 8008932:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008936:	2b15      	cmp	r3, #21
 8008938:	d8f6      	bhi.n	8008928 <_printf_i+0x28>
 800893a:	a101      	add	r1, pc, #4	@ (adr r1, 8008940 <_printf_i+0x40>)
 800893c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008940:	08008999 	.word	0x08008999
 8008944:	080089ad 	.word	0x080089ad
 8008948:	08008929 	.word	0x08008929
 800894c:	08008929 	.word	0x08008929
 8008950:	08008929 	.word	0x08008929
 8008954:	08008929 	.word	0x08008929
 8008958:	080089ad 	.word	0x080089ad
 800895c:	08008929 	.word	0x08008929
 8008960:	08008929 	.word	0x08008929
 8008964:	08008929 	.word	0x08008929
 8008968:	08008929 	.word	0x08008929
 800896c:	08008aab 	.word	0x08008aab
 8008970:	080089d7 	.word	0x080089d7
 8008974:	08008a65 	.word	0x08008a65
 8008978:	08008929 	.word	0x08008929
 800897c:	08008929 	.word	0x08008929
 8008980:	08008acd 	.word	0x08008acd
 8008984:	08008929 	.word	0x08008929
 8008988:	080089d7 	.word	0x080089d7
 800898c:	08008929 	.word	0x08008929
 8008990:	08008929 	.word	0x08008929
 8008994:	08008a6d 	.word	0x08008a6d
 8008998:	6833      	ldr	r3, [r6, #0]
 800899a:	1d1a      	adds	r2, r3, #4
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	6032      	str	r2, [r6, #0]
 80089a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80089a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80089a8:	2301      	movs	r3, #1
 80089aa:	e09c      	b.n	8008ae6 <_printf_i+0x1e6>
 80089ac:	6833      	ldr	r3, [r6, #0]
 80089ae:	6820      	ldr	r0, [r4, #0]
 80089b0:	1d19      	adds	r1, r3, #4
 80089b2:	6031      	str	r1, [r6, #0]
 80089b4:	0606      	lsls	r6, r0, #24
 80089b6:	d501      	bpl.n	80089bc <_printf_i+0xbc>
 80089b8:	681d      	ldr	r5, [r3, #0]
 80089ba:	e003      	b.n	80089c4 <_printf_i+0xc4>
 80089bc:	0645      	lsls	r5, r0, #25
 80089be:	d5fb      	bpl.n	80089b8 <_printf_i+0xb8>
 80089c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80089c4:	2d00      	cmp	r5, #0
 80089c6:	da03      	bge.n	80089d0 <_printf_i+0xd0>
 80089c8:	232d      	movs	r3, #45	@ 0x2d
 80089ca:	426d      	negs	r5, r5
 80089cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80089d0:	4858      	ldr	r0, [pc, #352]	@ (8008b34 <_printf_i+0x234>)
 80089d2:	230a      	movs	r3, #10
 80089d4:	e011      	b.n	80089fa <_printf_i+0xfa>
 80089d6:	6821      	ldr	r1, [r4, #0]
 80089d8:	6833      	ldr	r3, [r6, #0]
 80089da:	0608      	lsls	r0, r1, #24
 80089dc:	f853 5b04 	ldr.w	r5, [r3], #4
 80089e0:	d402      	bmi.n	80089e8 <_printf_i+0xe8>
 80089e2:	0649      	lsls	r1, r1, #25
 80089e4:	bf48      	it	mi
 80089e6:	b2ad      	uxthmi	r5, r5
 80089e8:	2f6f      	cmp	r7, #111	@ 0x6f
 80089ea:	4852      	ldr	r0, [pc, #328]	@ (8008b34 <_printf_i+0x234>)
 80089ec:	6033      	str	r3, [r6, #0]
 80089ee:	bf14      	ite	ne
 80089f0:	230a      	movne	r3, #10
 80089f2:	2308      	moveq	r3, #8
 80089f4:	2100      	movs	r1, #0
 80089f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80089fa:	6866      	ldr	r6, [r4, #4]
 80089fc:	60a6      	str	r6, [r4, #8]
 80089fe:	2e00      	cmp	r6, #0
 8008a00:	db05      	blt.n	8008a0e <_printf_i+0x10e>
 8008a02:	6821      	ldr	r1, [r4, #0]
 8008a04:	432e      	orrs	r6, r5
 8008a06:	f021 0104 	bic.w	r1, r1, #4
 8008a0a:	6021      	str	r1, [r4, #0]
 8008a0c:	d04b      	beq.n	8008aa6 <_printf_i+0x1a6>
 8008a0e:	4616      	mov	r6, r2
 8008a10:	fbb5 f1f3 	udiv	r1, r5, r3
 8008a14:	fb03 5711 	mls	r7, r3, r1, r5
 8008a18:	5dc7      	ldrb	r7, [r0, r7]
 8008a1a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008a1e:	462f      	mov	r7, r5
 8008a20:	42bb      	cmp	r3, r7
 8008a22:	460d      	mov	r5, r1
 8008a24:	d9f4      	bls.n	8008a10 <_printf_i+0x110>
 8008a26:	2b08      	cmp	r3, #8
 8008a28:	d10b      	bne.n	8008a42 <_printf_i+0x142>
 8008a2a:	6823      	ldr	r3, [r4, #0]
 8008a2c:	07df      	lsls	r7, r3, #31
 8008a2e:	d508      	bpl.n	8008a42 <_printf_i+0x142>
 8008a30:	6923      	ldr	r3, [r4, #16]
 8008a32:	6861      	ldr	r1, [r4, #4]
 8008a34:	4299      	cmp	r1, r3
 8008a36:	bfde      	ittt	le
 8008a38:	2330      	movle	r3, #48	@ 0x30
 8008a3a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008a3e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008a42:	1b92      	subs	r2, r2, r6
 8008a44:	6122      	str	r2, [r4, #16]
 8008a46:	f8cd a000 	str.w	sl, [sp]
 8008a4a:	464b      	mov	r3, r9
 8008a4c:	aa03      	add	r2, sp, #12
 8008a4e:	4621      	mov	r1, r4
 8008a50:	4640      	mov	r0, r8
 8008a52:	f7ff fee7 	bl	8008824 <_printf_common>
 8008a56:	3001      	adds	r0, #1
 8008a58:	d14a      	bne.n	8008af0 <_printf_i+0x1f0>
 8008a5a:	f04f 30ff 	mov.w	r0, #4294967295
 8008a5e:	b004      	add	sp, #16
 8008a60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a64:	6823      	ldr	r3, [r4, #0]
 8008a66:	f043 0320 	orr.w	r3, r3, #32
 8008a6a:	6023      	str	r3, [r4, #0]
 8008a6c:	4832      	ldr	r0, [pc, #200]	@ (8008b38 <_printf_i+0x238>)
 8008a6e:	2778      	movs	r7, #120	@ 0x78
 8008a70:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008a74:	6823      	ldr	r3, [r4, #0]
 8008a76:	6831      	ldr	r1, [r6, #0]
 8008a78:	061f      	lsls	r7, r3, #24
 8008a7a:	f851 5b04 	ldr.w	r5, [r1], #4
 8008a7e:	d402      	bmi.n	8008a86 <_printf_i+0x186>
 8008a80:	065f      	lsls	r7, r3, #25
 8008a82:	bf48      	it	mi
 8008a84:	b2ad      	uxthmi	r5, r5
 8008a86:	6031      	str	r1, [r6, #0]
 8008a88:	07d9      	lsls	r1, r3, #31
 8008a8a:	bf44      	itt	mi
 8008a8c:	f043 0320 	orrmi.w	r3, r3, #32
 8008a90:	6023      	strmi	r3, [r4, #0]
 8008a92:	b11d      	cbz	r5, 8008a9c <_printf_i+0x19c>
 8008a94:	2310      	movs	r3, #16
 8008a96:	e7ad      	b.n	80089f4 <_printf_i+0xf4>
 8008a98:	4826      	ldr	r0, [pc, #152]	@ (8008b34 <_printf_i+0x234>)
 8008a9a:	e7e9      	b.n	8008a70 <_printf_i+0x170>
 8008a9c:	6823      	ldr	r3, [r4, #0]
 8008a9e:	f023 0320 	bic.w	r3, r3, #32
 8008aa2:	6023      	str	r3, [r4, #0]
 8008aa4:	e7f6      	b.n	8008a94 <_printf_i+0x194>
 8008aa6:	4616      	mov	r6, r2
 8008aa8:	e7bd      	b.n	8008a26 <_printf_i+0x126>
 8008aaa:	6833      	ldr	r3, [r6, #0]
 8008aac:	6825      	ldr	r5, [r4, #0]
 8008aae:	6961      	ldr	r1, [r4, #20]
 8008ab0:	1d18      	adds	r0, r3, #4
 8008ab2:	6030      	str	r0, [r6, #0]
 8008ab4:	062e      	lsls	r6, r5, #24
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	d501      	bpl.n	8008abe <_printf_i+0x1be>
 8008aba:	6019      	str	r1, [r3, #0]
 8008abc:	e002      	b.n	8008ac4 <_printf_i+0x1c4>
 8008abe:	0668      	lsls	r0, r5, #25
 8008ac0:	d5fb      	bpl.n	8008aba <_printf_i+0x1ba>
 8008ac2:	8019      	strh	r1, [r3, #0]
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	6123      	str	r3, [r4, #16]
 8008ac8:	4616      	mov	r6, r2
 8008aca:	e7bc      	b.n	8008a46 <_printf_i+0x146>
 8008acc:	6833      	ldr	r3, [r6, #0]
 8008ace:	1d1a      	adds	r2, r3, #4
 8008ad0:	6032      	str	r2, [r6, #0]
 8008ad2:	681e      	ldr	r6, [r3, #0]
 8008ad4:	6862      	ldr	r2, [r4, #4]
 8008ad6:	2100      	movs	r1, #0
 8008ad8:	4630      	mov	r0, r6
 8008ada:	f7f7 fb79 	bl	80001d0 <memchr>
 8008ade:	b108      	cbz	r0, 8008ae4 <_printf_i+0x1e4>
 8008ae0:	1b80      	subs	r0, r0, r6
 8008ae2:	6060      	str	r0, [r4, #4]
 8008ae4:	6863      	ldr	r3, [r4, #4]
 8008ae6:	6123      	str	r3, [r4, #16]
 8008ae8:	2300      	movs	r3, #0
 8008aea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008aee:	e7aa      	b.n	8008a46 <_printf_i+0x146>
 8008af0:	6923      	ldr	r3, [r4, #16]
 8008af2:	4632      	mov	r2, r6
 8008af4:	4649      	mov	r1, r9
 8008af6:	4640      	mov	r0, r8
 8008af8:	47d0      	blx	sl
 8008afa:	3001      	adds	r0, #1
 8008afc:	d0ad      	beq.n	8008a5a <_printf_i+0x15a>
 8008afe:	6823      	ldr	r3, [r4, #0]
 8008b00:	079b      	lsls	r3, r3, #30
 8008b02:	d413      	bmi.n	8008b2c <_printf_i+0x22c>
 8008b04:	68e0      	ldr	r0, [r4, #12]
 8008b06:	9b03      	ldr	r3, [sp, #12]
 8008b08:	4298      	cmp	r0, r3
 8008b0a:	bfb8      	it	lt
 8008b0c:	4618      	movlt	r0, r3
 8008b0e:	e7a6      	b.n	8008a5e <_printf_i+0x15e>
 8008b10:	2301      	movs	r3, #1
 8008b12:	4632      	mov	r2, r6
 8008b14:	4649      	mov	r1, r9
 8008b16:	4640      	mov	r0, r8
 8008b18:	47d0      	blx	sl
 8008b1a:	3001      	adds	r0, #1
 8008b1c:	d09d      	beq.n	8008a5a <_printf_i+0x15a>
 8008b1e:	3501      	adds	r5, #1
 8008b20:	68e3      	ldr	r3, [r4, #12]
 8008b22:	9903      	ldr	r1, [sp, #12]
 8008b24:	1a5b      	subs	r3, r3, r1
 8008b26:	42ab      	cmp	r3, r5
 8008b28:	dcf2      	bgt.n	8008b10 <_printf_i+0x210>
 8008b2a:	e7eb      	b.n	8008b04 <_printf_i+0x204>
 8008b2c:	2500      	movs	r5, #0
 8008b2e:	f104 0619 	add.w	r6, r4, #25
 8008b32:	e7f5      	b.n	8008b20 <_printf_i+0x220>
 8008b34:	0800d94c 	.word	0x0800d94c
 8008b38:	0800d95d 	.word	0x0800d95d

08008b3c <_scanf_float>:
 8008b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b40:	b087      	sub	sp, #28
 8008b42:	4691      	mov	r9, r2
 8008b44:	9303      	str	r3, [sp, #12]
 8008b46:	688b      	ldr	r3, [r1, #8]
 8008b48:	1e5a      	subs	r2, r3, #1
 8008b4a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008b4e:	bf81      	itttt	hi
 8008b50:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008b54:	eb03 0b05 	addhi.w	fp, r3, r5
 8008b58:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008b5c:	608b      	strhi	r3, [r1, #8]
 8008b5e:	680b      	ldr	r3, [r1, #0]
 8008b60:	460a      	mov	r2, r1
 8008b62:	f04f 0500 	mov.w	r5, #0
 8008b66:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8008b6a:	f842 3b1c 	str.w	r3, [r2], #28
 8008b6e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008b72:	4680      	mov	r8, r0
 8008b74:	460c      	mov	r4, r1
 8008b76:	bf98      	it	ls
 8008b78:	f04f 0b00 	movls.w	fp, #0
 8008b7c:	9201      	str	r2, [sp, #4]
 8008b7e:	4616      	mov	r6, r2
 8008b80:	46aa      	mov	sl, r5
 8008b82:	462f      	mov	r7, r5
 8008b84:	9502      	str	r5, [sp, #8]
 8008b86:	68a2      	ldr	r2, [r4, #8]
 8008b88:	b15a      	cbz	r2, 8008ba2 <_scanf_float+0x66>
 8008b8a:	f8d9 3000 	ldr.w	r3, [r9]
 8008b8e:	781b      	ldrb	r3, [r3, #0]
 8008b90:	2b4e      	cmp	r3, #78	@ 0x4e
 8008b92:	d863      	bhi.n	8008c5c <_scanf_float+0x120>
 8008b94:	2b40      	cmp	r3, #64	@ 0x40
 8008b96:	d83b      	bhi.n	8008c10 <_scanf_float+0xd4>
 8008b98:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8008b9c:	b2c8      	uxtb	r0, r1
 8008b9e:	280e      	cmp	r0, #14
 8008ba0:	d939      	bls.n	8008c16 <_scanf_float+0xda>
 8008ba2:	b11f      	cbz	r7, 8008bac <_scanf_float+0x70>
 8008ba4:	6823      	ldr	r3, [r4, #0]
 8008ba6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008baa:	6023      	str	r3, [r4, #0]
 8008bac:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008bb0:	f1ba 0f01 	cmp.w	sl, #1
 8008bb4:	f200 8114 	bhi.w	8008de0 <_scanf_float+0x2a4>
 8008bb8:	9b01      	ldr	r3, [sp, #4]
 8008bba:	429e      	cmp	r6, r3
 8008bbc:	f200 8105 	bhi.w	8008dca <_scanf_float+0x28e>
 8008bc0:	2001      	movs	r0, #1
 8008bc2:	b007      	add	sp, #28
 8008bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bc8:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008bcc:	2a0d      	cmp	r2, #13
 8008bce:	d8e8      	bhi.n	8008ba2 <_scanf_float+0x66>
 8008bd0:	a101      	add	r1, pc, #4	@ (adr r1, 8008bd8 <_scanf_float+0x9c>)
 8008bd2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008bd6:	bf00      	nop
 8008bd8:	08008d21 	.word	0x08008d21
 8008bdc:	08008ba3 	.word	0x08008ba3
 8008be0:	08008ba3 	.word	0x08008ba3
 8008be4:	08008ba3 	.word	0x08008ba3
 8008be8:	08008d7d 	.word	0x08008d7d
 8008bec:	08008d57 	.word	0x08008d57
 8008bf0:	08008ba3 	.word	0x08008ba3
 8008bf4:	08008ba3 	.word	0x08008ba3
 8008bf8:	08008d2f 	.word	0x08008d2f
 8008bfc:	08008ba3 	.word	0x08008ba3
 8008c00:	08008ba3 	.word	0x08008ba3
 8008c04:	08008ba3 	.word	0x08008ba3
 8008c08:	08008ba3 	.word	0x08008ba3
 8008c0c:	08008ceb 	.word	0x08008ceb
 8008c10:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008c14:	e7da      	b.n	8008bcc <_scanf_float+0x90>
 8008c16:	290e      	cmp	r1, #14
 8008c18:	d8c3      	bhi.n	8008ba2 <_scanf_float+0x66>
 8008c1a:	a001      	add	r0, pc, #4	@ (adr r0, 8008c20 <_scanf_float+0xe4>)
 8008c1c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008c20:	08008cdb 	.word	0x08008cdb
 8008c24:	08008ba3 	.word	0x08008ba3
 8008c28:	08008cdb 	.word	0x08008cdb
 8008c2c:	08008d6b 	.word	0x08008d6b
 8008c30:	08008ba3 	.word	0x08008ba3
 8008c34:	08008c7d 	.word	0x08008c7d
 8008c38:	08008cc1 	.word	0x08008cc1
 8008c3c:	08008cc1 	.word	0x08008cc1
 8008c40:	08008cc1 	.word	0x08008cc1
 8008c44:	08008cc1 	.word	0x08008cc1
 8008c48:	08008cc1 	.word	0x08008cc1
 8008c4c:	08008cc1 	.word	0x08008cc1
 8008c50:	08008cc1 	.word	0x08008cc1
 8008c54:	08008cc1 	.word	0x08008cc1
 8008c58:	08008cc1 	.word	0x08008cc1
 8008c5c:	2b6e      	cmp	r3, #110	@ 0x6e
 8008c5e:	d809      	bhi.n	8008c74 <_scanf_float+0x138>
 8008c60:	2b60      	cmp	r3, #96	@ 0x60
 8008c62:	d8b1      	bhi.n	8008bc8 <_scanf_float+0x8c>
 8008c64:	2b54      	cmp	r3, #84	@ 0x54
 8008c66:	d07b      	beq.n	8008d60 <_scanf_float+0x224>
 8008c68:	2b59      	cmp	r3, #89	@ 0x59
 8008c6a:	d19a      	bne.n	8008ba2 <_scanf_float+0x66>
 8008c6c:	2d07      	cmp	r5, #7
 8008c6e:	d198      	bne.n	8008ba2 <_scanf_float+0x66>
 8008c70:	2508      	movs	r5, #8
 8008c72:	e02f      	b.n	8008cd4 <_scanf_float+0x198>
 8008c74:	2b74      	cmp	r3, #116	@ 0x74
 8008c76:	d073      	beq.n	8008d60 <_scanf_float+0x224>
 8008c78:	2b79      	cmp	r3, #121	@ 0x79
 8008c7a:	e7f6      	b.n	8008c6a <_scanf_float+0x12e>
 8008c7c:	6821      	ldr	r1, [r4, #0]
 8008c7e:	05c8      	lsls	r0, r1, #23
 8008c80:	d51e      	bpl.n	8008cc0 <_scanf_float+0x184>
 8008c82:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8008c86:	6021      	str	r1, [r4, #0]
 8008c88:	3701      	adds	r7, #1
 8008c8a:	f1bb 0f00 	cmp.w	fp, #0
 8008c8e:	d003      	beq.n	8008c98 <_scanf_float+0x15c>
 8008c90:	3201      	adds	r2, #1
 8008c92:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008c96:	60a2      	str	r2, [r4, #8]
 8008c98:	68a3      	ldr	r3, [r4, #8]
 8008c9a:	3b01      	subs	r3, #1
 8008c9c:	60a3      	str	r3, [r4, #8]
 8008c9e:	6923      	ldr	r3, [r4, #16]
 8008ca0:	3301      	adds	r3, #1
 8008ca2:	6123      	str	r3, [r4, #16]
 8008ca4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8008ca8:	3b01      	subs	r3, #1
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	f8c9 3004 	str.w	r3, [r9, #4]
 8008cb0:	f340 8082 	ble.w	8008db8 <_scanf_float+0x27c>
 8008cb4:	f8d9 3000 	ldr.w	r3, [r9]
 8008cb8:	3301      	adds	r3, #1
 8008cba:	f8c9 3000 	str.w	r3, [r9]
 8008cbe:	e762      	b.n	8008b86 <_scanf_float+0x4a>
 8008cc0:	eb1a 0105 	adds.w	r1, sl, r5
 8008cc4:	f47f af6d 	bne.w	8008ba2 <_scanf_float+0x66>
 8008cc8:	6822      	ldr	r2, [r4, #0]
 8008cca:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008cce:	6022      	str	r2, [r4, #0]
 8008cd0:	460d      	mov	r5, r1
 8008cd2:	468a      	mov	sl, r1
 8008cd4:	f806 3b01 	strb.w	r3, [r6], #1
 8008cd8:	e7de      	b.n	8008c98 <_scanf_float+0x15c>
 8008cda:	6822      	ldr	r2, [r4, #0]
 8008cdc:	0610      	lsls	r0, r2, #24
 8008cde:	f57f af60 	bpl.w	8008ba2 <_scanf_float+0x66>
 8008ce2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008ce6:	6022      	str	r2, [r4, #0]
 8008ce8:	e7f4      	b.n	8008cd4 <_scanf_float+0x198>
 8008cea:	f1ba 0f00 	cmp.w	sl, #0
 8008cee:	d10c      	bne.n	8008d0a <_scanf_float+0x1ce>
 8008cf0:	b977      	cbnz	r7, 8008d10 <_scanf_float+0x1d4>
 8008cf2:	6822      	ldr	r2, [r4, #0]
 8008cf4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008cf8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008cfc:	d108      	bne.n	8008d10 <_scanf_float+0x1d4>
 8008cfe:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008d02:	6022      	str	r2, [r4, #0]
 8008d04:	f04f 0a01 	mov.w	sl, #1
 8008d08:	e7e4      	b.n	8008cd4 <_scanf_float+0x198>
 8008d0a:	f1ba 0f02 	cmp.w	sl, #2
 8008d0e:	d050      	beq.n	8008db2 <_scanf_float+0x276>
 8008d10:	2d01      	cmp	r5, #1
 8008d12:	d002      	beq.n	8008d1a <_scanf_float+0x1de>
 8008d14:	2d04      	cmp	r5, #4
 8008d16:	f47f af44 	bne.w	8008ba2 <_scanf_float+0x66>
 8008d1a:	3501      	adds	r5, #1
 8008d1c:	b2ed      	uxtb	r5, r5
 8008d1e:	e7d9      	b.n	8008cd4 <_scanf_float+0x198>
 8008d20:	f1ba 0f01 	cmp.w	sl, #1
 8008d24:	f47f af3d 	bne.w	8008ba2 <_scanf_float+0x66>
 8008d28:	f04f 0a02 	mov.w	sl, #2
 8008d2c:	e7d2      	b.n	8008cd4 <_scanf_float+0x198>
 8008d2e:	b975      	cbnz	r5, 8008d4e <_scanf_float+0x212>
 8008d30:	2f00      	cmp	r7, #0
 8008d32:	f47f af37 	bne.w	8008ba4 <_scanf_float+0x68>
 8008d36:	6822      	ldr	r2, [r4, #0]
 8008d38:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008d3c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008d40:	f040 8103 	bne.w	8008f4a <_scanf_float+0x40e>
 8008d44:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008d48:	6022      	str	r2, [r4, #0]
 8008d4a:	2501      	movs	r5, #1
 8008d4c:	e7c2      	b.n	8008cd4 <_scanf_float+0x198>
 8008d4e:	2d03      	cmp	r5, #3
 8008d50:	d0e3      	beq.n	8008d1a <_scanf_float+0x1de>
 8008d52:	2d05      	cmp	r5, #5
 8008d54:	e7df      	b.n	8008d16 <_scanf_float+0x1da>
 8008d56:	2d02      	cmp	r5, #2
 8008d58:	f47f af23 	bne.w	8008ba2 <_scanf_float+0x66>
 8008d5c:	2503      	movs	r5, #3
 8008d5e:	e7b9      	b.n	8008cd4 <_scanf_float+0x198>
 8008d60:	2d06      	cmp	r5, #6
 8008d62:	f47f af1e 	bne.w	8008ba2 <_scanf_float+0x66>
 8008d66:	2507      	movs	r5, #7
 8008d68:	e7b4      	b.n	8008cd4 <_scanf_float+0x198>
 8008d6a:	6822      	ldr	r2, [r4, #0]
 8008d6c:	0591      	lsls	r1, r2, #22
 8008d6e:	f57f af18 	bpl.w	8008ba2 <_scanf_float+0x66>
 8008d72:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8008d76:	6022      	str	r2, [r4, #0]
 8008d78:	9702      	str	r7, [sp, #8]
 8008d7a:	e7ab      	b.n	8008cd4 <_scanf_float+0x198>
 8008d7c:	6822      	ldr	r2, [r4, #0]
 8008d7e:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8008d82:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008d86:	d005      	beq.n	8008d94 <_scanf_float+0x258>
 8008d88:	0550      	lsls	r0, r2, #21
 8008d8a:	f57f af0a 	bpl.w	8008ba2 <_scanf_float+0x66>
 8008d8e:	2f00      	cmp	r7, #0
 8008d90:	f000 80db 	beq.w	8008f4a <_scanf_float+0x40e>
 8008d94:	0591      	lsls	r1, r2, #22
 8008d96:	bf58      	it	pl
 8008d98:	9902      	ldrpl	r1, [sp, #8]
 8008d9a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008d9e:	bf58      	it	pl
 8008da0:	1a79      	subpl	r1, r7, r1
 8008da2:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8008da6:	bf58      	it	pl
 8008da8:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008dac:	6022      	str	r2, [r4, #0]
 8008dae:	2700      	movs	r7, #0
 8008db0:	e790      	b.n	8008cd4 <_scanf_float+0x198>
 8008db2:	f04f 0a03 	mov.w	sl, #3
 8008db6:	e78d      	b.n	8008cd4 <_scanf_float+0x198>
 8008db8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008dbc:	4649      	mov	r1, r9
 8008dbe:	4640      	mov	r0, r8
 8008dc0:	4798      	blx	r3
 8008dc2:	2800      	cmp	r0, #0
 8008dc4:	f43f aedf 	beq.w	8008b86 <_scanf_float+0x4a>
 8008dc8:	e6eb      	b.n	8008ba2 <_scanf_float+0x66>
 8008dca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008dce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008dd2:	464a      	mov	r2, r9
 8008dd4:	4640      	mov	r0, r8
 8008dd6:	4798      	blx	r3
 8008dd8:	6923      	ldr	r3, [r4, #16]
 8008dda:	3b01      	subs	r3, #1
 8008ddc:	6123      	str	r3, [r4, #16]
 8008dde:	e6eb      	b.n	8008bb8 <_scanf_float+0x7c>
 8008de0:	1e6b      	subs	r3, r5, #1
 8008de2:	2b06      	cmp	r3, #6
 8008de4:	d824      	bhi.n	8008e30 <_scanf_float+0x2f4>
 8008de6:	2d02      	cmp	r5, #2
 8008de8:	d836      	bhi.n	8008e58 <_scanf_float+0x31c>
 8008dea:	9b01      	ldr	r3, [sp, #4]
 8008dec:	429e      	cmp	r6, r3
 8008dee:	f67f aee7 	bls.w	8008bc0 <_scanf_float+0x84>
 8008df2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008df6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008dfa:	464a      	mov	r2, r9
 8008dfc:	4640      	mov	r0, r8
 8008dfe:	4798      	blx	r3
 8008e00:	6923      	ldr	r3, [r4, #16]
 8008e02:	3b01      	subs	r3, #1
 8008e04:	6123      	str	r3, [r4, #16]
 8008e06:	e7f0      	b.n	8008dea <_scanf_float+0x2ae>
 8008e08:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008e0c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008e10:	464a      	mov	r2, r9
 8008e12:	4640      	mov	r0, r8
 8008e14:	4798      	blx	r3
 8008e16:	6923      	ldr	r3, [r4, #16]
 8008e18:	3b01      	subs	r3, #1
 8008e1a:	6123      	str	r3, [r4, #16]
 8008e1c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008e20:	fa5f fa8a 	uxtb.w	sl, sl
 8008e24:	f1ba 0f02 	cmp.w	sl, #2
 8008e28:	d1ee      	bne.n	8008e08 <_scanf_float+0x2cc>
 8008e2a:	3d03      	subs	r5, #3
 8008e2c:	b2ed      	uxtb	r5, r5
 8008e2e:	1b76      	subs	r6, r6, r5
 8008e30:	6823      	ldr	r3, [r4, #0]
 8008e32:	05da      	lsls	r2, r3, #23
 8008e34:	d530      	bpl.n	8008e98 <_scanf_float+0x35c>
 8008e36:	055b      	lsls	r3, r3, #21
 8008e38:	d511      	bpl.n	8008e5e <_scanf_float+0x322>
 8008e3a:	9b01      	ldr	r3, [sp, #4]
 8008e3c:	429e      	cmp	r6, r3
 8008e3e:	f67f aebf 	bls.w	8008bc0 <_scanf_float+0x84>
 8008e42:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008e46:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008e4a:	464a      	mov	r2, r9
 8008e4c:	4640      	mov	r0, r8
 8008e4e:	4798      	blx	r3
 8008e50:	6923      	ldr	r3, [r4, #16]
 8008e52:	3b01      	subs	r3, #1
 8008e54:	6123      	str	r3, [r4, #16]
 8008e56:	e7f0      	b.n	8008e3a <_scanf_float+0x2fe>
 8008e58:	46aa      	mov	sl, r5
 8008e5a:	46b3      	mov	fp, r6
 8008e5c:	e7de      	b.n	8008e1c <_scanf_float+0x2e0>
 8008e5e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008e62:	6923      	ldr	r3, [r4, #16]
 8008e64:	2965      	cmp	r1, #101	@ 0x65
 8008e66:	f103 33ff 	add.w	r3, r3, #4294967295
 8008e6a:	f106 35ff 	add.w	r5, r6, #4294967295
 8008e6e:	6123      	str	r3, [r4, #16]
 8008e70:	d00c      	beq.n	8008e8c <_scanf_float+0x350>
 8008e72:	2945      	cmp	r1, #69	@ 0x45
 8008e74:	d00a      	beq.n	8008e8c <_scanf_float+0x350>
 8008e76:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008e7a:	464a      	mov	r2, r9
 8008e7c:	4640      	mov	r0, r8
 8008e7e:	4798      	blx	r3
 8008e80:	6923      	ldr	r3, [r4, #16]
 8008e82:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008e86:	3b01      	subs	r3, #1
 8008e88:	1eb5      	subs	r5, r6, #2
 8008e8a:	6123      	str	r3, [r4, #16]
 8008e8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008e90:	464a      	mov	r2, r9
 8008e92:	4640      	mov	r0, r8
 8008e94:	4798      	blx	r3
 8008e96:	462e      	mov	r6, r5
 8008e98:	6822      	ldr	r2, [r4, #0]
 8008e9a:	f012 0210 	ands.w	r2, r2, #16
 8008e9e:	d001      	beq.n	8008ea4 <_scanf_float+0x368>
 8008ea0:	2000      	movs	r0, #0
 8008ea2:	e68e      	b.n	8008bc2 <_scanf_float+0x86>
 8008ea4:	7032      	strb	r2, [r6, #0]
 8008ea6:	6823      	ldr	r3, [r4, #0]
 8008ea8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008eac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008eb0:	d125      	bne.n	8008efe <_scanf_float+0x3c2>
 8008eb2:	9b02      	ldr	r3, [sp, #8]
 8008eb4:	429f      	cmp	r7, r3
 8008eb6:	d00a      	beq.n	8008ece <_scanf_float+0x392>
 8008eb8:	1bda      	subs	r2, r3, r7
 8008eba:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008ebe:	429e      	cmp	r6, r3
 8008ec0:	bf28      	it	cs
 8008ec2:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008ec6:	4922      	ldr	r1, [pc, #136]	@ (8008f50 <_scanf_float+0x414>)
 8008ec8:	4630      	mov	r0, r6
 8008eca:	f000 f907 	bl	80090dc <siprintf>
 8008ece:	9901      	ldr	r1, [sp, #4]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	4640      	mov	r0, r8
 8008ed4:	f002 fc40 	bl	800b758 <_strtod_r>
 8008ed8:	9b03      	ldr	r3, [sp, #12]
 8008eda:	6821      	ldr	r1, [r4, #0]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f011 0f02 	tst.w	r1, #2
 8008ee2:	ec57 6b10 	vmov	r6, r7, d0
 8008ee6:	f103 0204 	add.w	r2, r3, #4
 8008eea:	d015      	beq.n	8008f18 <_scanf_float+0x3dc>
 8008eec:	9903      	ldr	r1, [sp, #12]
 8008eee:	600a      	str	r2, [r1, #0]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	e9c3 6700 	strd	r6, r7, [r3]
 8008ef6:	68e3      	ldr	r3, [r4, #12]
 8008ef8:	3301      	adds	r3, #1
 8008efa:	60e3      	str	r3, [r4, #12]
 8008efc:	e7d0      	b.n	8008ea0 <_scanf_float+0x364>
 8008efe:	9b04      	ldr	r3, [sp, #16]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d0e4      	beq.n	8008ece <_scanf_float+0x392>
 8008f04:	9905      	ldr	r1, [sp, #20]
 8008f06:	230a      	movs	r3, #10
 8008f08:	3101      	adds	r1, #1
 8008f0a:	4640      	mov	r0, r8
 8008f0c:	f002 fca4 	bl	800b858 <_strtol_r>
 8008f10:	9b04      	ldr	r3, [sp, #16]
 8008f12:	9e05      	ldr	r6, [sp, #20]
 8008f14:	1ac2      	subs	r2, r0, r3
 8008f16:	e7d0      	b.n	8008eba <_scanf_float+0x37e>
 8008f18:	f011 0f04 	tst.w	r1, #4
 8008f1c:	9903      	ldr	r1, [sp, #12]
 8008f1e:	600a      	str	r2, [r1, #0]
 8008f20:	d1e6      	bne.n	8008ef0 <_scanf_float+0x3b4>
 8008f22:	681d      	ldr	r5, [r3, #0]
 8008f24:	4632      	mov	r2, r6
 8008f26:	463b      	mov	r3, r7
 8008f28:	4630      	mov	r0, r6
 8008f2a:	4639      	mov	r1, r7
 8008f2c:	f7f7 fdfe 	bl	8000b2c <__aeabi_dcmpun>
 8008f30:	b128      	cbz	r0, 8008f3e <_scanf_float+0x402>
 8008f32:	4808      	ldr	r0, [pc, #32]	@ (8008f54 <_scanf_float+0x418>)
 8008f34:	f000 fa04 	bl	8009340 <nanf>
 8008f38:	ed85 0a00 	vstr	s0, [r5]
 8008f3c:	e7db      	b.n	8008ef6 <_scanf_float+0x3ba>
 8008f3e:	4630      	mov	r0, r6
 8008f40:	4639      	mov	r1, r7
 8008f42:	f7f7 fe51 	bl	8000be8 <__aeabi_d2f>
 8008f46:	6028      	str	r0, [r5, #0]
 8008f48:	e7d5      	b.n	8008ef6 <_scanf_float+0x3ba>
 8008f4a:	2700      	movs	r7, #0
 8008f4c:	e62e      	b.n	8008bac <_scanf_float+0x70>
 8008f4e:	bf00      	nop
 8008f50:	0800d96e 	.word	0x0800d96e
 8008f54:	0800daca 	.word	0x0800daca

08008f58 <std>:
 8008f58:	2300      	movs	r3, #0
 8008f5a:	b510      	push	{r4, lr}
 8008f5c:	4604      	mov	r4, r0
 8008f5e:	e9c0 3300 	strd	r3, r3, [r0]
 8008f62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008f66:	6083      	str	r3, [r0, #8]
 8008f68:	8181      	strh	r1, [r0, #12]
 8008f6a:	6643      	str	r3, [r0, #100]	@ 0x64
 8008f6c:	81c2      	strh	r2, [r0, #14]
 8008f6e:	6183      	str	r3, [r0, #24]
 8008f70:	4619      	mov	r1, r3
 8008f72:	2208      	movs	r2, #8
 8008f74:	305c      	adds	r0, #92	@ 0x5c
 8008f76:	f000 f954 	bl	8009222 <memset>
 8008f7a:	4b0d      	ldr	r3, [pc, #52]	@ (8008fb0 <std+0x58>)
 8008f7c:	6263      	str	r3, [r4, #36]	@ 0x24
 8008f7e:	4b0d      	ldr	r3, [pc, #52]	@ (8008fb4 <std+0x5c>)
 8008f80:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008f82:	4b0d      	ldr	r3, [pc, #52]	@ (8008fb8 <std+0x60>)
 8008f84:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008f86:	4b0d      	ldr	r3, [pc, #52]	@ (8008fbc <std+0x64>)
 8008f88:	6323      	str	r3, [r4, #48]	@ 0x30
 8008f8a:	4b0d      	ldr	r3, [pc, #52]	@ (8008fc0 <std+0x68>)
 8008f8c:	6224      	str	r4, [r4, #32]
 8008f8e:	429c      	cmp	r4, r3
 8008f90:	d006      	beq.n	8008fa0 <std+0x48>
 8008f92:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008f96:	4294      	cmp	r4, r2
 8008f98:	d002      	beq.n	8008fa0 <std+0x48>
 8008f9a:	33d0      	adds	r3, #208	@ 0xd0
 8008f9c:	429c      	cmp	r4, r3
 8008f9e:	d105      	bne.n	8008fac <std+0x54>
 8008fa0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008fa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fa8:	f000 b9b8 	b.w	800931c <__retarget_lock_init_recursive>
 8008fac:	bd10      	pop	{r4, pc}
 8008fae:	bf00      	nop
 8008fb0:	08009179 	.word	0x08009179
 8008fb4:	0800919f 	.word	0x0800919f
 8008fb8:	080091d7 	.word	0x080091d7
 8008fbc:	080091fb 	.word	0x080091fb
 8008fc0:	20001044 	.word	0x20001044

08008fc4 <stdio_exit_handler>:
 8008fc4:	4a02      	ldr	r2, [pc, #8]	@ (8008fd0 <stdio_exit_handler+0xc>)
 8008fc6:	4903      	ldr	r1, [pc, #12]	@ (8008fd4 <stdio_exit_handler+0x10>)
 8008fc8:	4803      	ldr	r0, [pc, #12]	@ (8008fd8 <stdio_exit_handler+0x14>)
 8008fca:	f000 b869 	b.w	80090a0 <_fwalk_sglue>
 8008fce:	bf00      	nop
 8008fd0:	2000002c 	.word	0x2000002c
 8008fd4:	0800c251 	.word	0x0800c251
 8008fd8:	2000003c 	.word	0x2000003c

08008fdc <cleanup_stdio>:
 8008fdc:	6841      	ldr	r1, [r0, #4]
 8008fde:	4b0c      	ldr	r3, [pc, #48]	@ (8009010 <cleanup_stdio+0x34>)
 8008fe0:	4299      	cmp	r1, r3
 8008fe2:	b510      	push	{r4, lr}
 8008fe4:	4604      	mov	r4, r0
 8008fe6:	d001      	beq.n	8008fec <cleanup_stdio+0x10>
 8008fe8:	f003 f932 	bl	800c250 <_fflush_r>
 8008fec:	68a1      	ldr	r1, [r4, #8]
 8008fee:	4b09      	ldr	r3, [pc, #36]	@ (8009014 <cleanup_stdio+0x38>)
 8008ff0:	4299      	cmp	r1, r3
 8008ff2:	d002      	beq.n	8008ffa <cleanup_stdio+0x1e>
 8008ff4:	4620      	mov	r0, r4
 8008ff6:	f003 f92b 	bl	800c250 <_fflush_r>
 8008ffa:	68e1      	ldr	r1, [r4, #12]
 8008ffc:	4b06      	ldr	r3, [pc, #24]	@ (8009018 <cleanup_stdio+0x3c>)
 8008ffe:	4299      	cmp	r1, r3
 8009000:	d004      	beq.n	800900c <cleanup_stdio+0x30>
 8009002:	4620      	mov	r0, r4
 8009004:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009008:	f003 b922 	b.w	800c250 <_fflush_r>
 800900c:	bd10      	pop	{r4, pc}
 800900e:	bf00      	nop
 8009010:	20001044 	.word	0x20001044
 8009014:	200010ac 	.word	0x200010ac
 8009018:	20001114 	.word	0x20001114

0800901c <global_stdio_init.part.0>:
 800901c:	b510      	push	{r4, lr}
 800901e:	4b0b      	ldr	r3, [pc, #44]	@ (800904c <global_stdio_init.part.0+0x30>)
 8009020:	4c0b      	ldr	r4, [pc, #44]	@ (8009050 <global_stdio_init.part.0+0x34>)
 8009022:	4a0c      	ldr	r2, [pc, #48]	@ (8009054 <global_stdio_init.part.0+0x38>)
 8009024:	601a      	str	r2, [r3, #0]
 8009026:	4620      	mov	r0, r4
 8009028:	2200      	movs	r2, #0
 800902a:	2104      	movs	r1, #4
 800902c:	f7ff ff94 	bl	8008f58 <std>
 8009030:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009034:	2201      	movs	r2, #1
 8009036:	2109      	movs	r1, #9
 8009038:	f7ff ff8e 	bl	8008f58 <std>
 800903c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009040:	2202      	movs	r2, #2
 8009042:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009046:	2112      	movs	r1, #18
 8009048:	f7ff bf86 	b.w	8008f58 <std>
 800904c:	2000117c 	.word	0x2000117c
 8009050:	20001044 	.word	0x20001044
 8009054:	08008fc5 	.word	0x08008fc5

08009058 <__sfp_lock_acquire>:
 8009058:	4801      	ldr	r0, [pc, #4]	@ (8009060 <__sfp_lock_acquire+0x8>)
 800905a:	f000 b960 	b.w	800931e <__retarget_lock_acquire_recursive>
 800905e:	bf00      	nop
 8009060:	20001185 	.word	0x20001185

08009064 <__sfp_lock_release>:
 8009064:	4801      	ldr	r0, [pc, #4]	@ (800906c <__sfp_lock_release+0x8>)
 8009066:	f000 b95b 	b.w	8009320 <__retarget_lock_release_recursive>
 800906a:	bf00      	nop
 800906c:	20001185 	.word	0x20001185

08009070 <__sinit>:
 8009070:	b510      	push	{r4, lr}
 8009072:	4604      	mov	r4, r0
 8009074:	f7ff fff0 	bl	8009058 <__sfp_lock_acquire>
 8009078:	6a23      	ldr	r3, [r4, #32]
 800907a:	b11b      	cbz	r3, 8009084 <__sinit+0x14>
 800907c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009080:	f7ff bff0 	b.w	8009064 <__sfp_lock_release>
 8009084:	4b04      	ldr	r3, [pc, #16]	@ (8009098 <__sinit+0x28>)
 8009086:	6223      	str	r3, [r4, #32]
 8009088:	4b04      	ldr	r3, [pc, #16]	@ (800909c <__sinit+0x2c>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d1f5      	bne.n	800907c <__sinit+0xc>
 8009090:	f7ff ffc4 	bl	800901c <global_stdio_init.part.0>
 8009094:	e7f2      	b.n	800907c <__sinit+0xc>
 8009096:	bf00      	nop
 8009098:	08008fdd 	.word	0x08008fdd
 800909c:	2000117c 	.word	0x2000117c

080090a0 <_fwalk_sglue>:
 80090a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090a4:	4607      	mov	r7, r0
 80090a6:	4688      	mov	r8, r1
 80090a8:	4614      	mov	r4, r2
 80090aa:	2600      	movs	r6, #0
 80090ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80090b0:	f1b9 0901 	subs.w	r9, r9, #1
 80090b4:	d505      	bpl.n	80090c2 <_fwalk_sglue+0x22>
 80090b6:	6824      	ldr	r4, [r4, #0]
 80090b8:	2c00      	cmp	r4, #0
 80090ba:	d1f7      	bne.n	80090ac <_fwalk_sglue+0xc>
 80090bc:	4630      	mov	r0, r6
 80090be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090c2:	89ab      	ldrh	r3, [r5, #12]
 80090c4:	2b01      	cmp	r3, #1
 80090c6:	d907      	bls.n	80090d8 <_fwalk_sglue+0x38>
 80090c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80090cc:	3301      	adds	r3, #1
 80090ce:	d003      	beq.n	80090d8 <_fwalk_sglue+0x38>
 80090d0:	4629      	mov	r1, r5
 80090d2:	4638      	mov	r0, r7
 80090d4:	47c0      	blx	r8
 80090d6:	4306      	orrs	r6, r0
 80090d8:	3568      	adds	r5, #104	@ 0x68
 80090da:	e7e9      	b.n	80090b0 <_fwalk_sglue+0x10>

080090dc <siprintf>:
 80090dc:	b40e      	push	{r1, r2, r3}
 80090de:	b510      	push	{r4, lr}
 80090e0:	b09d      	sub	sp, #116	@ 0x74
 80090e2:	ab1f      	add	r3, sp, #124	@ 0x7c
 80090e4:	9002      	str	r0, [sp, #8]
 80090e6:	9006      	str	r0, [sp, #24]
 80090e8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80090ec:	480a      	ldr	r0, [pc, #40]	@ (8009118 <siprintf+0x3c>)
 80090ee:	9107      	str	r1, [sp, #28]
 80090f0:	9104      	str	r1, [sp, #16]
 80090f2:	490a      	ldr	r1, [pc, #40]	@ (800911c <siprintf+0x40>)
 80090f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80090f8:	9105      	str	r1, [sp, #20]
 80090fa:	2400      	movs	r4, #0
 80090fc:	a902      	add	r1, sp, #8
 80090fe:	6800      	ldr	r0, [r0, #0]
 8009100:	9301      	str	r3, [sp, #4]
 8009102:	941b      	str	r4, [sp, #108]	@ 0x6c
 8009104:	f002 fc06 	bl	800b914 <_svfiprintf_r>
 8009108:	9b02      	ldr	r3, [sp, #8]
 800910a:	701c      	strb	r4, [r3, #0]
 800910c:	b01d      	add	sp, #116	@ 0x74
 800910e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009112:	b003      	add	sp, #12
 8009114:	4770      	bx	lr
 8009116:	bf00      	nop
 8009118:	20000038 	.word	0x20000038
 800911c:	ffff0208 	.word	0xffff0208

08009120 <siscanf>:
 8009120:	b40e      	push	{r1, r2, r3}
 8009122:	b570      	push	{r4, r5, r6, lr}
 8009124:	b09d      	sub	sp, #116	@ 0x74
 8009126:	ac21      	add	r4, sp, #132	@ 0x84
 8009128:	2500      	movs	r5, #0
 800912a:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800912e:	f854 6b04 	ldr.w	r6, [r4], #4
 8009132:	f8ad 2014 	strh.w	r2, [sp, #20]
 8009136:	951b      	str	r5, [sp, #108]	@ 0x6c
 8009138:	9002      	str	r0, [sp, #8]
 800913a:	9006      	str	r0, [sp, #24]
 800913c:	f7f7 f898 	bl	8000270 <strlen>
 8009140:	4b0b      	ldr	r3, [pc, #44]	@ (8009170 <siscanf+0x50>)
 8009142:	9003      	str	r0, [sp, #12]
 8009144:	9007      	str	r0, [sp, #28]
 8009146:	480b      	ldr	r0, [pc, #44]	@ (8009174 <siscanf+0x54>)
 8009148:	930b      	str	r3, [sp, #44]	@ 0x2c
 800914a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800914e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009152:	4632      	mov	r2, r6
 8009154:	4623      	mov	r3, r4
 8009156:	a902      	add	r1, sp, #8
 8009158:	6800      	ldr	r0, [r0, #0]
 800915a:	950f      	str	r5, [sp, #60]	@ 0x3c
 800915c:	9514      	str	r5, [sp, #80]	@ 0x50
 800915e:	9401      	str	r4, [sp, #4]
 8009160:	f002 fd2e 	bl	800bbc0 <__ssvfiscanf_r>
 8009164:	b01d      	add	sp, #116	@ 0x74
 8009166:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800916a:	b003      	add	sp, #12
 800916c:	4770      	bx	lr
 800916e:	bf00      	nop
 8009170:	0800919b 	.word	0x0800919b
 8009174:	20000038 	.word	0x20000038

08009178 <__sread>:
 8009178:	b510      	push	{r4, lr}
 800917a:	460c      	mov	r4, r1
 800917c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009180:	f000 f87e 	bl	8009280 <_read_r>
 8009184:	2800      	cmp	r0, #0
 8009186:	bfab      	itete	ge
 8009188:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800918a:	89a3      	ldrhlt	r3, [r4, #12]
 800918c:	181b      	addge	r3, r3, r0
 800918e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009192:	bfac      	ite	ge
 8009194:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009196:	81a3      	strhlt	r3, [r4, #12]
 8009198:	bd10      	pop	{r4, pc}

0800919a <__seofread>:
 800919a:	2000      	movs	r0, #0
 800919c:	4770      	bx	lr

0800919e <__swrite>:
 800919e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091a2:	461f      	mov	r7, r3
 80091a4:	898b      	ldrh	r3, [r1, #12]
 80091a6:	05db      	lsls	r3, r3, #23
 80091a8:	4605      	mov	r5, r0
 80091aa:	460c      	mov	r4, r1
 80091ac:	4616      	mov	r6, r2
 80091ae:	d505      	bpl.n	80091bc <__swrite+0x1e>
 80091b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091b4:	2302      	movs	r3, #2
 80091b6:	2200      	movs	r2, #0
 80091b8:	f000 f850 	bl	800925c <_lseek_r>
 80091bc:	89a3      	ldrh	r3, [r4, #12]
 80091be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80091c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80091c6:	81a3      	strh	r3, [r4, #12]
 80091c8:	4632      	mov	r2, r6
 80091ca:	463b      	mov	r3, r7
 80091cc:	4628      	mov	r0, r5
 80091ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80091d2:	f000 b867 	b.w	80092a4 <_write_r>

080091d6 <__sseek>:
 80091d6:	b510      	push	{r4, lr}
 80091d8:	460c      	mov	r4, r1
 80091da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091de:	f000 f83d 	bl	800925c <_lseek_r>
 80091e2:	1c43      	adds	r3, r0, #1
 80091e4:	89a3      	ldrh	r3, [r4, #12]
 80091e6:	bf15      	itete	ne
 80091e8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80091ea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80091ee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80091f2:	81a3      	strheq	r3, [r4, #12]
 80091f4:	bf18      	it	ne
 80091f6:	81a3      	strhne	r3, [r4, #12]
 80091f8:	bd10      	pop	{r4, pc}

080091fa <__sclose>:
 80091fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091fe:	f000 b81d 	b.w	800923c <_close_r>

08009202 <memcmp>:
 8009202:	b510      	push	{r4, lr}
 8009204:	3901      	subs	r1, #1
 8009206:	4402      	add	r2, r0
 8009208:	4290      	cmp	r0, r2
 800920a:	d101      	bne.n	8009210 <memcmp+0xe>
 800920c:	2000      	movs	r0, #0
 800920e:	e005      	b.n	800921c <memcmp+0x1a>
 8009210:	7803      	ldrb	r3, [r0, #0]
 8009212:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009216:	42a3      	cmp	r3, r4
 8009218:	d001      	beq.n	800921e <memcmp+0x1c>
 800921a:	1b18      	subs	r0, r3, r4
 800921c:	bd10      	pop	{r4, pc}
 800921e:	3001      	adds	r0, #1
 8009220:	e7f2      	b.n	8009208 <memcmp+0x6>

08009222 <memset>:
 8009222:	4402      	add	r2, r0
 8009224:	4603      	mov	r3, r0
 8009226:	4293      	cmp	r3, r2
 8009228:	d100      	bne.n	800922c <memset+0xa>
 800922a:	4770      	bx	lr
 800922c:	f803 1b01 	strb.w	r1, [r3], #1
 8009230:	e7f9      	b.n	8009226 <memset+0x4>
	...

08009234 <_localeconv_r>:
 8009234:	4800      	ldr	r0, [pc, #0]	@ (8009238 <_localeconv_r+0x4>)
 8009236:	4770      	bx	lr
 8009238:	20000178 	.word	0x20000178

0800923c <_close_r>:
 800923c:	b538      	push	{r3, r4, r5, lr}
 800923e:	4d06      	ldr	r5, [pc, #24]	@ (8009258 <_close_r+0x1c>)
 8009240:	2300      	movs	r3, #0
 8009242:	4604      	mov	r4, r0
 8009244:	4608      	mov	r0, r1
 8009246:	602b      	str	r3, [r5, #0]
 8009248:	f7f8 fd6e 	bl	8001d28 <_close>
 800924c:	1c43      	adds	r3, r0, #1
 800924e:	d102      	bne.n	8009256 <_close_r+0x1a>
 8009250:	682b      	ldr	r3, [r5, #0]
 8009252:	b103      	cbz	r3, 8009256 <_close_r+0x1a>
 8009254:	6023      	str	r3, [r4, #0]
 8009256:	bd38      	pop	{r3, r4, r5, pc}
 8009258:	20001180 	.word	0x20001180

0800925c <_lseek_r>:
 800925c:	b538      	push	{r3, r4, r5, lr}
 800925e:	4d07      	ldr	r5, [pc, #28]	@ (800927c <_lseek_r+0x20>)
 8009260:	4604      	mov	r4, r0
 8009262:	4608      	mov	r0, r1
 8009264:	4611      	mov	r1, r2
 8009266:	2200      	movs	r2, #0
 8009268:	602a      	str	r2, [r5, #0]
 800926a:	461a      	mov	r2, r3
 800926c:	f7f8 fd83 	bl	8001d76 <_lseek>
 8009270:	1c43      	adds	r3, r0, #1
 8009272:	d102      	bne.n	800927a <_lseek_r+0x1e>
 8009274:	682b      	ldr	r3, [r5, #0]
 8009276:	b103      	cbz	r3, 800927a <_lseek_r+0x1e>
 8009278:	6023      	str	r3, [r4, #0]
 800927a:	bd38      	pop	{r3, r4, r5, pc}
 800927c:	20001180 	.word	0x20001180

08009280 <_read_r>:
 8009280:	b538      	push	{r3, r4, r5, lr}
 8009282:	4d07      	ldr	r5, [pc, #28]	@ (80092a0 <_read_r+0x20>)
 8009284:	4604      	mov	r4, r0
 8009286:	4608      	mov	r0, r1
 8009288:	4611      	mov	r1, r2
 800928a:	2200      	movs	r2, #0
 800928c:	602a      	str	r2, [r5, #0]
 800928e:	461a      	mov	r2, r3
 8009290:	f7f8 fd11 	bl	8001cb6 <_read>
 8009294:	1c43      	adds	r3, r0, #1
 8009296:	d102      	bne.n	800929e <_read_r+0x1e>
 8009298:	682b      	ldr	r3, [r5, #0]
 800929a:	b103      	cbz	r3, 800929e <_read_r+0x1e>
 800929c:	6023      	str	r3, [r4, #0]
 800929e:	bd38      	pop	{r3, r4, r5, pc}
 80092a0:	20001180 	.word	0x20001180

080092a4 <_write_r>:
 80092a4:	b538      	push	{r3, r4, r5, lr}
 80092a6:	4d07      	ldr	r5, [pc, #28]	@ (80092c4 <_write_r+0x20>)
 80092a8:	4604      	mov	r4, r0
 80092aa:	4608      	mov	r0, r1
 80092ac:	4611      	mov	r1, r2
 80092ae:	2200      	movs	r2, #0
 80092b0:	602a      	str	r2, [r5, #0]
 80092b2:	461a      	mov	r2, r3
 80092b4:	f7f8 fd1c 	bl	8001cf0 <_write>
 80092b8:	1c43      	adds	r3, r0, #1
 80092ba:	d102      	bne.n	80092c2 <_write_r+0x1e>
 80092bc:	682b      	ldr	r3, [r5, #0]
 80092be:	b103      	cbz	r3, 80092c2 <_write_r+0x1e>
 80092c0:	6023      	str	r3, [r4, #0]
 80092c2:	bd38      	pop	{r3, r4, r5, pc}
 80092c4:	20001180 	.word	0x20001180

080092c8 <__errno>:
 80092c8:	4b01      	ldr	r3, [pc, #4]	@ (80092d0 <__errno+0x8>)
 80092ca:	6818      	ldr	r0, [r3, #0]
 80092cc:	4770      	bx	lr
 80092ce:	bf00      	nop
 80092d0:	20000038 	.word	0x20000038

080092d4 <__libc_init_array>:
 80092d4:	b570      	push	{r4, r5, r6, lr}
 80092d6:	4d0d      	ldr	r5, [pc, #52]	@ (800930c <__libc_init_array+0x38>)
 80092d8:	4c0d      	ldr	r4, [pc, #52]	@ (8009310 <__libc_init_array+0x3c>)
 80092da:	1b64      	subs	r4, r4, r5
 80092dc:	10a4      	asrs	r4, r4, #2
 80092de:	2600      	movs	r6, #0
 80092e0:	42a6      	cmp	r6, r4
 80092e2:	d109      	bne.n	80092f8 <__libc_init_array+0x24>
 80092e4:	4d0b      	ldr	r5, [pc, #44]	@ (8009314 <__libc_init_array+0x40>)
 80092e6:	4c0c      	ldr	r4, [pc, #48]	@ (8009318 <__libc_init_array+0x44>)
 80092e8:	f003 ff7a 	bl	800d1e0 <_init>
 80092ec:	1b64      	subs	r4, r4, r5
 80092ee:	10a4      	asrs	r4, r4, #2
 80092f0:	2600      	movs	r6, #0
 80092f2:	42a6      	cmp	r6, r4
 80092f4:	d105      	bne.n	8009302 <__libc_init_array+0x2e>
 80092f6:	bd70      	pop	{r4, r5, r6, pc}
 80092f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80092fc:	4798      	blx	r3
 80092fe:	3601      	adds	r6, #1
 8009300:	e7ee      	b.n	80092e0 <__libc_init_array+0xc>
 8009302:	f855 3b04 	ldr.w	r3, [r5], #4
 8009306:	4798      	blx	r3
 8009308:	3601      	adds	r6, #1
 800930a:	e7f2      	b.n	80092f2 <__libc_init_array+0x1e>
 800930c:	0800dd84 	.word	0x0800dd84
 8009310:	0800dd84 	.word	0x0800dd84
 8009314:	0800dd84 	.word	0x0800dd84
 8009318:	0800dd88 	.word	0x0800dd88

0800931c <__retarget_lock_init_recursive>:
 800931c:	4770      	bx	lr

0800931e <__retarget_lock_acquire_recursive>:
 800931e:	4770      	bx	lr

08009320 <__retarget_lock_release_recursive>:
 8009320:	4770      	bx	lr

08009322 <memcpy>:
 8009322:	440a      	add	r2, r1
 8009324:	4291      	cmp	r1, r2
 8009326:	f100 33ff 	add.w	r3, r0, #4294967295
 800932a:	d100      	bne.n	800932e <memcpy+0xc>
 800932c:	4770      	bx	lr
 800932e:	b510      	push	{r4, lr}
 8009330:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009334:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009338:	4291      	cmp	r1, r2
 800933a:	d1f9      	bne.n	8009330 <memcpy+0xe>
 800933c:	bd10      	pop	{r4, pc}
	...

08009340 <nanf>:
 8009340:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009348 <nanf+0x8>
 8009344:	4770      	bx	lr
 8009346:	bf00      	nop
 8009348:	7fc00000 	.word	0x7fc00000

0800934c <quorem>:
 800934c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009350:	6903      	ldr	r3, [r0, #16]
 8009352:	690c      	ldr	r4, [r1, #16]
 8009354:	42a3      	cmp	r3, r4
 8009356:	4607      	mov	r7, r0
 8009358:	db7e      	blt.n	8009458 <quorem+0x10c>
 800935a:	3c01      	subs	r4, #1
 800935c:	f101 0814 	add.w	r8, r1, #20
 8009360:	00a3      	lsls	r3, r4, #2
 8009362:	f100 0514 	add.w	r5, r0, #20
 8009366:	9300      	str	r3, [sp, #0]
 8009368:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800936c:	9301      	str	r3, [sp, #4]
 800936e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009372:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009376:	3301      	adds	r3, #1
 8009378:	429a      	cmp	r2, r3
 800937a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800937e:	fbb2 f6f3 	udiv	r6, r2, r3
 8009382:	d32e      	bcc.n	80093e2 <quorem+0x96>
 8009384:	f04f 0a00 	mov.w	sl, #0
 8009388:	46c4      	mov	ip, r8
 800938a:	46ae      	mov	lr, r5
 800938c:	46d3      	mov	fp, sl
 800938e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009392:	b298      	uxth	r0, r3
 8009394:	fb06 a000 	mla	r0, r6, r0, sl
 8009398:	0c02      	lsrs	r2, r0, #16
 800939a:	0c1b      	lsrs	r3, r3, #16
 800939c:	fb06 2303 	mla	r3, r6, r3, r2
 80093a0:	f8de 2000 	ldr.w	r2, [lr]
 80093a4:	b280      	uxth	r0, r0
 80093a6:	b292      	uxth	r2, r2
 80093a8:	1a12      	subs	r2, r2, r0
 80093aa:	445a      	add	r2, fp
 80093ac:	f8de 0000 	ldr.w	r0, [lr]
 80093b0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80093b4:	b29b      	uxth	r3, r3
 80093b6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80093ba:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80093be:	b292      	uxth	r2, r2
 80093c0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80093c4:	45e1      	cmp	r9, ip
 80093c6:	f84e 2b04 	str.w	r2, [lr], #4
 80093ca:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80093ce:	d2de      	bcs.n	800938e <quorem+0x42>
 80093d0:	9b00      	ldr	r3, [sp, #0]
 80093d2:	58eb      	ldr	r3, [r5, r3]
 80093d4:	b92b      	cbnz	r3, 80093e2 <quorem+0x96>
 80093d6:	9b01      	ldr	r3, [sp, #4]
 80093d8:	3b04      	subs	r3, #4
 80093da:	429d      	cmp	r5, r3
 80093dc:	461a      	mov	r2, r3
 80093de:	d32f      	bcc.n	8009440 <quorem+0xf4>
 80093e0:	613c      	str	r4, [r7, #16]
 80093e2:	4638      	mov	r0, r7
 80093e4:	f001 f9c8 	bl	800a778 <__mcmp>
 80093e8:	2800      	cmp	r0, #0
 80093ea:	db25      	blt.n	8009438 <quorem+0xec>
 80093ec:	4629      	mov	r1, r5
 80093ee:	2000      	movs	r0, #0
 80093f0:	f858 2b04 	ldr.w	r2, [r8], #4
 80093f4:	f8d1 c000 	ldr.w	ip, [r1]
 80093f8:	fa1f fe82 	uxth.w	lr, r2
 80093fc:	fa1f f38c 	uxth.w	r3, ip
 8009400:	eba3 030e 	sub.w	r3, r3, lr
 8009404:	4403      	add	r3, r0
 8009406:	0c12      	lsrs	r2, r2, #16
 8009408:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800940c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009410:	b29b      	uxth	r3, r3
 8009412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009416:	45c1      	cmp	r9, r8
 8009418:	f841 3b04 	str.w	r3, [r1], #4
 800941c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009420:	d2e6      	bcs.n	80093f0 <quorem+0xa4>
 8009422:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009426:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800942a:	b922      	cbnz	r2, 8009436 <quorem+0xea>
 800942c:	3b04      	subs	r3, #4
 800942e:	429d      	cmp	r5, r3
 8009430:	461a      	mov	r2, r3
 8009432:	d30b      	bcc.n	800944c <quorem+0x100>
 8009434:	613c      	str	r4, [r7, #16]
 8009436:	3601      	adds	r6, #1
 8009438:	4630      	mov	r0, r6
 800943a:	b003      	add	sp, #12
 800943c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009440:	6812      	ldr	r2, [r2, #0]
 8009442:	3b04      	subs	r3, #4
 8009444:	2a00      	cmp	r2, #0
 8009446:	d1cb      	bne.n	80093e0 <quorem+0x94>
 8009448:	3c01      	subs	r4, #1
 800944a:	e7c6      	b.n	80093da <quorem+0x8e>
 800944c:	6812      	ldr	r2, [r2, #0]
 800944e:	3b04      	subs	r3, #4
 8009450:	2a00      	cmp	r2, #0
 8009452:	d1ef      	bne.n	8009434 <quorem+0xe8>
 8009454:	3c01      	subs	r4, #1
 8009456:	e7ea      	b.n	800942e <quorem+0xe2>
 8009458:	2000      	movs	r0, #0
 800945a:	e7ee      	b.n	800943a <quorem+0xee>
 800945c:	0000      	movs	r0, r0
	...

08009460 <_dtoa_r>:
 8009460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009464:	69c7      	ldr	r7, [r0, #28]
 8009466:	b097      	sub	sp, #92	@ 0x5c
 8009468:	ed8d 0b04 	vstr	d0, [sp, #16]
 800946c:	ec55 4b10 	vmov	r4, r5, d0
 8009470:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8009472:	9107      	str	r1, [sp, #28]
 8009474:	4681      	mov	r9, r0
 8009476:	920c      	str	r2, [sp, #48]	@ 0x30
 8009478:	9311      	str	r3, [sp, #68]	@ 0x44
 800947a:	b97f      	cbnz	r7, 800949c <_dtoa_r+0x3c>
 800947c:	2010      	movs	r0, #16
 800947e:	f000 fe09 	bl	800a094 <malloc>
 8009482:	4602      	mov	r2, r0
 8009484:	f8c9 001c 	str.w	r0, [r9, #28]
 8009488:	b920      	cbnz	r0, 8009494 <_dtoa_r+0x34>
 800948a:	4ba9      	ldr	r3, [pc, #676]	@ (8009730 <_dtoa_r+0x2d0>)
 800948c:	21ef      	movs	r1, #239	@ 0xef
 800948e:	48a9      	ldr	r0, [pc, #676]	@ (8009734 <_dtoa_r+0x2d4>)
 8009490:	f002 ffbe 	bl	800c410 <__assert_func>
 8009494:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009498:	6007      	str	r7, [r0, #0]
 800949a:	60c7      	str	r7, [r0, #12]
 800949c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80094a0:	6819      	ldr	r1, [r3, #0]
 80094a2:	b159      	cbz	r1, 80094bc <_dtoa_r+0x5c>
 80094a4:	685a      	ldr	r2, [r3, #4]
 80094a6:	604a      	str	r2, [r1, #4]
 80094a8:	2301      	movs	r3, #1
 80094aa:	4093      	lsls	r3, r2
 80094ac:	608b      	str	r3, [r1, #8]
 80094ae:	4648      	mov	r0, r9
 80094b0:	f000 fee6 	bl	800a280 <_Bfree>
 80094b4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80094b8:	2200      	movs	r2, #0
 80094ba:	601a      	str	r2, [r3, #0]
 80094bc:	1e2b      	subs	r3, r5, #0
 80094be:	bfb9      	ittee	lt
 80094c0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80094c4:	9305      	strlt	r3, [sp, #20]
 80094c6:	2300      	movge	r3, #0
 80094c8:	6033      	strge	r3, [r6, #0]
 80094ca:	9f05      	ldr	r7, [sp, #20]
 80094cc:	4b9a      	ldr	r3, [pc, #616]	@ (8009738 <_dtoa_r+0x2d8>)
 80094ce:	bfbc      	itt	lt
 80094d0:	2201      	movlt	r2, #1
 80094d2:	6032      	strlt	r2, [r6, #0]
 80094d4:	43bb      	bics	r3, r7
 80094d6:	d112      	bne.n	80094fe <_dtoa_r+0x9e>
 80094d8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80094da:	f242 730f 	movw	r3, #9999	@ 0x270f
 80094de:	6013      	str	r3, [r2, #0]
 80094e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80094e4:	4323      	orrs	r3, r4
 80094e6:	f000 855a 	beq.w	8009f9e <_dtoa_r+0xb3e>
 80094ea:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80094ec:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800974c <_dtoa_r+0x2ec>
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	f000 855c 	beq.w	8009fae <_dtoa_r+0xb4e>
 80094f6:	f10a 0303 	add.w	r3, sl, #3
 80094fa:	f000 bd56 	b.w	8009faa <_dtoa_r+0xb4a>
 80094fe:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009502:	2200      	movs	r2, #0
 8009504:	ec51 0b17 	vmov	r0, r1, d7
 8009508:	2300      	movs	r3, #0
 800950a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800950e:	f7f7 fadb 	bl	8000ac8 <__aeabi_dcmpeq>
 8009512:	4680      	mov	r8, r0
 8009514:	b158      	cbz	r0, 800952e <_dtoa_r+0xce>
 8009516:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009518:	2301      	movs	r3, #1
 800951a:	6013      	str	r3, [r2, #0]
 800951c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800951e:	b113      	cbz	r3, 8009526 <_dtoa_r+0xc6>
 8009520:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009522:	4b86      	ldr	r3, [pc, #536]	@ (800973c <_dtoa_r+0x2dc>)
 8009524:	6013      	str	r3, [r2, #0]
 8009526:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8009750 <_dtoa_r+0x2f0>
 800952a:	f000 bd40 	b.w	8009fae <_dtoa_r+0xb4e>
 800952e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8009532:	aa14      	add	r2, sp, #80	@ 0x50
 8009534:	a915      	add	r1, sp, #84	@ 0x54
 8009536:	4648      	mov	r0, r9
 8009538:	f001 fa3e 	bl	800a9b8 <__d2b>
 800953c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009540:	9002      	str	r0, [sp, #8]
 8009542:	2e00      	cmp	r6, #0
 8009544:	d078      	beq.n	8009638 <_dtoa_r+0x1d8>
 8009546:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009548:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800954c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009550:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009554:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009558:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800955c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009560:	4619      	mov	r1, r3
 8009562:	2200      	movs	r2, #0
 8009564:	4b76      	ldr	r3, [pc, #472]	@ (8009740 <_dtoa_r+0x2e0>)
 8009566:	f7f6 fe8f 	bl	8000288 <__aeabi_dsub>
 800956a:	a36b      	add	r3, pc, #428	@ (adr r3, 8009718 <_dtoa_r+0x2b8>)
 800956c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009570:	f7f7 f842 	bl	80005f8 <__aeabi_dmul>
 8009574:	a36a      	add	r3, pc, #424	@ (adr r3, 8009720 <_dtoa_r+0x2c0>)
 8009576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800957a:	f7f6 fe87 	bl	800028c <__adddf3>
 800957e:	4604      	mov	r4, r0
 8009580:	4630      	mov	r0, r6
 8009582:	460d      	mov	r5, r1
 8009584:	f7f6 ffce 	bl	8000524 <__aeabi_i2d>
 8009588:	a367      	add	r3, pc, #412	@ (adr r3, 8009728 <_dtoa_r+0x2c8>)
 800958a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800958e:	f7f7 f833 	bl	80005f8 <__aeabi_dmul>
 8009592:	4602      	mov	r2, r0
 8009594:	460b      	mov	r3, r1
 8009596:	4620      	mov	r0, r4
 8009598:	4629      	mov	r1, r5
 800959a:	f7f6 fe77 	bl	800028c <__adddf3>
 800959e:	4604      	mov	r4, r0
 80095a0:	460d      	mov	r5, r1
 80095a2:	f7f7 fad9 	bl	8000b58 <__aeabi_d2iz>
 80095a6:	2200      	movs	r2, #0
 80095a8:	4607      	mov	r7, r0
 80095aa:	2300      	movs	r3, #0
 80095ac:	4620      	mov	r0, r4
 80095ae:	4629      	mov	r1, r5
 80095b0:	f7f7 fa94 	bl	8000adc <__aeabi_dcmplt>
 80095b4:	b140      	cbz	r0, 80095c8 <_dtoa_r+0x168>
 80095b6:	4638      	mov	r0, r7
 80095b8:	f7f6 ffb4 	bl	8000524 <__aeabi_i2d>
 80095bc:	4622      	mov	r2, r4
 80095be:	462b      	mov	r3, r5
 80095c0:	f7f7 fa82 	bl	8000ac8 <__aeabi_dcmpeq>
 80095c4:	b900      	cbnz	r0, 80095c8 <_dtoa_r+0x168>
 80095c6:	3f01      	subs	r7, #1
 80095c8:	2f16      	cmp	r7, #22
 80095ca:	d852      	bhi.n	8009672 <_dtoa_r+0x212>
 80095cc:	4b5d      	ldr	r3, [pc, #372]	@ (8009744 <_dtoa_r+0x2e4>)
 80095ce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80095d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095d6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80095da:	f7f7 fa7f 	bl	8000adc <__aeabi_dcmplt>
 80095de:	2800      	cmp	r0, #0
 80095e0:	d049      	beq.n	8009676 <_dtoa_r+0x216>
 80095e2:	3f01      	subs	r7, #1
 80095e4:	2300      	movs	r3, #0
 80095e6:	9310      	str	r3, [sp, #64]	@ 0x40
 80095e8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80095ea:	1b9b      	subs	r3, r3, r6
 80095ec:	1e5a      	subs	r2, r3, #1
 80095ee:	bf45      	ittet	mi
 80095f0:	f1c3 0301 	rsbmi	r3, r3, #1
 80095f4:	9300      	strmi	r3, [sp, #0]
 80095f6:	2300      	movpl	r3, #0
 80095f8:	2300      	movmi	r3, #0
 80095fa:	9206      	str	r2, [sp, #24]
 80095fc:	bf54      	ite	pl
 80095fe:	9300      	strpl	r3, [sp, #0]
 8009600:	9306      	strmi	r3, [sp, #24]
 8009602:	2f00      	cmp	r7, #0
 8009604:	db39      	blt.n	800967a <_dtoa_r+0x21a>
 8009606:	9b06      	ldr	r3, [sp, #24]
 8009608:	970d      	str	r7, [sp, #52]	@ 0x34
 800960a:	443b      	add	r3, r7
 800960c:	9306      	str	r3, [sp, #24]
 800960e:	2300      	movs	r3, #0
 8009610:	9308      	str	r3, [sp, #32]
 8009612:	9b07      	ldr	r3, [sp, #28]
 8009614:	2b09      	cmp	r3, #9
 8009616:	d863      	bhi.n	80096e0 <_dtoa_r+0x280>
 8009618:	2b05      	cmp	r3, #5
 800961a:	bfc4      	itt	gt
 800961c:	3b04      	subgt	r3, #4
 800961e:	9307      	strgt	r3, [sp, #28]
 8009620:	9b07      	ldr	r3, [sp, #28]
 8009622:	f1a3 0302 	sub.w	r3, r3, #2
 8009626:	bfcc      	ite	gt
 8009628:	2400      	movgt	r4, #0
 800962a:	2401      	movle	r4, #1
 800962c:	2b03      	cmp	r3, #3
 800962e:	d863      	bhi.n	80096f8 <_dtoa_r+0x298>
 8009630:	e8df f003 	tbb	[pc, r3]
 8009634:	2b375452 	.word	0x2b375452
 8009638:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800963c:	441e      	add	r6, r3
 800963e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009642:	2b20      	cmp	r3, #32
 8009644:	bfc1      	itttt	gt
 8009646:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800964a:	409f      	lslgt	r7, r3
 800964c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009650:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009654:	bfd6      	itet	le
 8009656:	f1c3 0320 	rsble	r3, r3, #32
 800965a:	ea47 0003 	orrgt.w	r0, r7, r3
 800965e:	fa04 f003 	lslle.w	r0, r4, r3
 8009662:	f7f6 ff4f 	bl	8000504 <__aeabi_ui2d>
 8009666:	2201      	movs	r2, #1
 8009668:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800966c:	3e01      	subs	r6, #1
 800966e:	9212      	str	r2, [sp, #72]	@ 0x48
 8009670:	e776      	b.n	8009560 <_dtoa_r+0x100>
 8009672:	2301      	movs	r3, #1
 8009674:	e7b7      	b.n	80095e6 <_dtoa_r+0x186>
 8009676:	9010      	str	r0, [sp, #64]	@ 0x40
 8009678:	e7b6      	b.n	80095e8 <_dtoa_r+0x188>
 800967a:	9b00      	ldr	r3, [sp, #0]
 800967c:	1bdb      	subs	r3, r3, r7
 800967e:	9300      	str	r3, [sp, #0]
 8009680:	427b      	negs	r3, r7
 8009682:	9308      	str	r3, [sp, #32]
 8009684:	2300      	movs	r3, #0
 8009686:	930d      	str	r3, [sp, #52]	@ 0x34
 8009688:	e7c3      	b.n	8009612 <_dtoa_r+0x1b2>
 800968a:	2301      	movs	r3, #1
 800968c:	9309      	str	r3, [sp, #36]	@ 0x24
 800968e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009690:	eb07 0b03 	add.w	fp, r7, r3
 8009694:	f10b 0301 	add.w	r3, fp, #1
 8009698:	2b01      	cmp	r3, #1
 800969a:	9303      	str	r3, [sp, #12]
 800969c:	bfb8      	it	lt
 800969e:	2301      	movlt	r3, #1
 80096a0:	e006      	b.n	80096b0 <_dtoa_r+0x250>
 80096a2:	2301      	movs	r3, #1
 80096a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80096a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	dd28      	ble.n	80096fe <_dtoa_r+0x29e>
 80096ac:	469b      	mov	fp, r3
 80096ae:	9303      	str	r3, [sp, #12]
 80096b0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80096b4:	2100      	movs	r1, #0
 80096b6:	2204      	movs	r2, #4
 80096b8:	f102 0514 	add.w	r5, r2, #20
 80096bc:	429d      	cmp	r5, r3
 80096be:	d926      	bls.n	800970e <_dtoa_r+0x2ae>
 80096c0:	6041      	str	r1, [r0, #4]
 80096c2:	4648      	mov	r0, r9
 80096c4:	f000 fd9c 	bl	800a200 <_Balloc>
 80096c8:	4682      	mov	sl, r0
 80096ca:	2800      	cmp	r0, #0
 80096cc:	d142      	bne.n	8009754 <_dtoa_r+0x2f4>
 80096ce:	4b1e      	ldr	r3, [pc, #120]	@ (8009748 <_dtoa_r+0x2e8>)
 80096d0:	4602      	mov	r2, r0
 80096d2:	f240 11af 	movw	r1, #431	@ 0x1af
 80096d6:	e6da      	b.n	800948e <_dtoa_r+0x2e>
 80096d8:	2300      	movs	r3, #0
 80096da:	e7e3      	b.n	80096a4 <_dtoa_r+0x244>
 80096dc:	2300      	movs	r3, #0
 80096de:	e7d5      	b.n	800968c <_dtoa_r+0x22c>
 80096e0:	2401      	movs	r4, #1
 80096e2:	2300      	movs	r3, #0
 80096e4:	9307      	str	r3, [sp, #28]
 80096e6:	9409      	str	r4, [sp, #36]	@ 0x24
 80096e8:	f04f 3bff 	mov.w	fp, #4294967295
 80096ec:	2200      	movs	r2, #0
 80096ee:	f8cd b00c 	str.w	fp, [sp, #12]
 80096f2:	2312      	movs	r3, #18
 80096f4:	920c      	str	r2, [sp, #48]	@ 0x30
 80096f6:	e7db      	b.n	80096b0 <_dtoa_r+0x250>
 80096f8:	2301      	movs	r3, #1
 80096fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80096fc:	e7f4      	b.n	80096e8 <_dtoa_r+0x288>
 80096fe:	f04f 0b01 	mov.w	fp, #1
 8009702:	f8cd b00c 	str.w	fp, [sp, #12]
 8009706:	465b      	mov	r3, fp
 8009708:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800970c:	e7d0      	b.n	80096b0 <_dtoa_r+0x250>
 800970e:	3101      	adds	r1, #1
 8009710:	0052      	lsls	r2, r2, #1
 8009712:	e7d1      	b.n	80096b8 <_dtoa_r+0x258>
 8009714:	f3af 8000 	nop.w
 8009718:	636f4361 	.word	0x636f4361
 800971c:	3fd287a7 	.word	0x3fd287a7
 8009720:	8b60c8b3 	.word	0x8b60c8b3
 8009724:	3fc68a28 	.word	0x3fc68a28
 8009728:	509f79fb 	.word	0x509f79fb
 800972c:	3fd34413 	.word	0x3fd34413
 8009730:	0800d980 	.word	0x0800d980
 8009734:	0800d997 	.word	0x0800d997
 8009738:	7ff00000 	.word	0x7ff00000
 800973c:	0800da83 	.word	0x0800da83
 8009740:	3ff80000 	.word	0x3ff80000
 8009744:	0800db60 	.word	0x0800db60
 8009748:	0800d9ef 	.word	0x0800d9ef
 800974c:	0800d97c 	.word	0x0800d97c
 8009750:	0800da82 	.word	0x0800da82
 8009754:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009758:	6018      	str	r0, [r3, #0]
 800975a:	9b03      	ldr	r3, [sp, #12]
 800975c:	2b0e      	cmp	r3, #14
 800975e:	f200 80a1 	bhi.w	80098a4 <_dtoa_r+0x444>
 8009762:	2c00      	cmp	r4, #0
 8009764:	f000 809e 	beq.w	80098a4 <_dtoa_r+0x444>
 8009768:	2f00      	cmp	r7, #0
 800976a:	dd33      	ble.n	80097d4 <_dtoa_r+0x374>
 800976c:	4b9c      	ldr	r3, [pc, #624]	@ (80099e0 <_dtoa_r+0x580>)
 800976e:	f007 020f 	and.w	r2, r7, #15
 8009772:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009776:	ed93 7b00 	vldr	d7, [r3]
 800977a:	05f8      	lsls	r0, r7, #23
 800977c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8009780:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009784:	d516      	bpl.n	80097b4 <_dtoa_r+0x354>
 8009786:	4b97      	ldr	r3, [pc, #604]	@ (80099e4 <_dtoa_r+0x584>)
 8009788:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800978c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009790:	f7f7 f85c 	bl	800084c <__aeabi_ddiv>
 8009794:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009798:	f004 040f 	and.w	r4, r4, #15
 800979c:	2603      	movs	r6, #3
 800979e:	4d91      	ldr	r5, [pc, #580]	@ (80099e4 <_dtoa_r+0x584>)
 80097a0:	b954      	cbnz	r4, 80097b8 <_dtoa_r+0x358>
 80097a2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80097a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80097aa:	f7f7 f84f 	bl	800084c <__aeabi_ddiv>
 80097ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80097b2:	e028      	b.n	8009806 <_dtoa_r+0x3a6>
 80097b4:	2602      	movs	r6, #2
 80097b6:	e7f2      	b.n	800979e <_dtoa_r+0x33e>
 80097b8:	07e1      	lsls	r1, r4, #31
 80097ba:	d508      	bpl.n	80097ce <_dtoa_r+0x36e>
 80097bc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80097c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80097c4:	f7f6 ff18 	bl	80005f8 <__aeabi_dmul>
 80097c8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80097cc:	3601      	adds	r6, #1
 80097ce:	1064      	asrs	r4, r4, #1
 80097d0:	3508      	adds	r5, #8
 80097d2:	e7e5      	b.n	80097a0 <_dtoa_r+0x340>
 80097d4:	f000 80af 	beq.w	8009936 <_dtoa_r+0x4d6>
 80097d8:	427c      	negs	r4, r7
 80097da:	4b81      	ldr	r3, [pc, #516]	@ (80099e0 <_dtoa_r+0x580>)
 80097dc:	4d81      	ldr	r5, [pc, #516]	@ (80099e4 <_dtoa_r+0x584>)
 80097de:	f004 020f 	and.w	r2, r4, #15
 80097e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80097e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80097ee:	f7f6 ff03 	bl	80005f8 <__aeabi_dmul>
 80097f2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80097f6:	1124      	asrs	r4, r4, #4
 80097f8:	2300      	movs	r3, #0
 80097fa:	2602      	movs	r6, #2
 80097fc:	2c00      	cmp	r4, #0
 80097fe:	f040 808f 	bne.w	8009920 <_dtoa_r+0x4c0>
 8009802:	2b00      	cmp	r3, #0
 8009804:	d1d3      	bne.n	80097ae <_dtoa_r+0x34e>
 8009806:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009808:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800980c:	2b00      	cmp	r3, #0
 800980e:	f000 8094 	beq.w	800993a <_dtoa_r+0x4da>
 8009812:	4b75      	ldr	r3, [pc, #468]	@ (80099e8 <_dtoa_r+0x588>)
 8009814:	2200      	movs	r2, #0
 8009816:	4620      	mov	r0, r4
 8009818:	4629      	mov	r1, r5
 800981a:	f7f7 f95f 	bl	8000adc <__aeabi_dcmplt>
 800981e:	2800      	cmp	r0, #0
 8009820:	f000 808b 	beq.w	800993a <_dtoa_r+0x4da>
 8009824:	9b03      	ldr	r3, [sp, #12]
 8009826:	2b00      	cmp	r3, #0
 8009828:	f000 8087 	beq.w	800993a <_dtoa_r+0x4da>
 800982c:	f1bb 0f00 	cmp.w	fp, #0
 8009830:	dd34      	ble.n	800989c <_dtoa_r+0x43c>
 8009832:	4620      	mov	r0, r4
 8009834:	4b6d      	ldr	r3, [pc, #436]	@ (80099ec <_dtoa_r+0x58c>)
 8009836:	2200      	movs	r2, #0
 8009838:	4629      	mov	r1, r5
 800983a:	f7f6 fedd 	bl	80005f8 <__aeabi_dmul>
 800983e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009842:	f107 38ff 	add.w	r8, r7, #4294967295
 8009846:	3601      	adds	r6, #1
 8009848:	465c      	mov	r4, fp
 800984a:	4630      	mov	r0, r6
 800984c:	f7f6 fe6a 	bl	8000524 <__aeabi_i2d>
 8009850:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009854:	f7f6 fed0 	bl	80005f8 <__aeabi_dmul>
 8009858:	4b65      	ldr	r3, [pc, #404]	@ (80099f0 <_dtoa_r+0x590>)
 800985a:	2200      	movs	r2, #0
 800985c:	f7f6 fd16 	bl	800028c <__adddf3>
 8009860:	4605      	mov	r5, r0
 8009862:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009866:	2c00      	cmp	r4, #0
 8009868:	d16a      	bne.n	8009940 <_dtoa_r+0x4e0>
 800986a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800986e:	4b61      	ldr	r3, [pc, #388]	@ (80099f4 <_dtoa_r+0x594>)
 8009870:	2200      	movs	r2, #0
 8009872:	f7f6 fd09 	bl	8000288 <__aeabi_dsub>
 8009876:	4602      	mov	r2, r0
 8009878:	460b      	mov	r3, r1
 800987a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800987e:	462a      	mov	r2, r5
 8009880:	4633      	mov	r3, r6
 8009882:	f7f7 f949 	bl	8000b18 <__aeabi_dcmpgt>
 8009886:	2800      	cmp	r0, #0
 8009888:	f040 8298 	bne.w	8009dbc <_dtoa_r+0x95c>
 800988c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009890:	462a      	mov	r2, r5
 8009892:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009896:	f7f7 f921 	bl	8000adc <__aeabi_dcmplt>
 800989a:	bb38      	cbnz	r0, 80098ec <_dtoa_r+0x48c>
 800989c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80098a0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80098a4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	f2c0 8157 	blt.w	8009b5a <_dtoa_r+0x6fa>
 80098ac:	2f0e      	cmp	r7, #14
 80098ae:	f300 8154 	bgt.w	8009b5a <_dtoa_r+0x6fa>
 80098b2:	4b4b      	ldr	r3, [pc, #300]	@ (80099e0 <_dtoa_r+0x580>)
 80098b4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80098b8:	ed93 7b00 	vldr	d7, [r3]
 80098bc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80098be:	2b00      	cmp	r3, #0
 80098c0:	ed8d 7b00 	vstr	d7, [sp]
 80098c4:	f280 80e5 	bge.w	8009a92 <_dtoa_r+0x632>
 80098c8:	9b03      	ldr	r3, [sp, #12]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	f300 80e1 	bgt.w	8009a92 <_dtoa_r+0x632>
 80098d0:	d10c      	bne.n	80098ec <_dtoa_r+0x48c>
 80098d2:	4b48      	ldr	r3, [pc, #288]	@ (80099f4 <_dtoa_r+0x594>)
 80098d4:	2200      	movs	r2, #0
 80098d6:	ec51 0b17 	vmov	r0, r1, d7
 80098da:	f7f6 fe8d 	bl	80005f8 <__aeabi_dmul>
 80098de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80098e2:	f7f7 f90f 	bl	8000b04 <__aeabi_dcmpge>
 80098e6:	2800      	cmp	r0, #0
 80098e8:	f000 8266 	beq.w	8009db8 <_dtoa_r+0x958>
 80098ec:	2400      	movs	r4, #0
 80098ee:	4625      	mov	r5, r4
 80098f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80098f2:	4656      	mov	r6, sl
 80098f4:	ea6f 0803 	mvn.w	r8, r3
 80098f8:	2700      	movs	r7, #0
 80098fa:	4621      	mov	r1, r4
 80098fc:	4648      	mov	r0, r9
 80098fe:	f000 fcbf 	bl	800a280 <_Bfree>
 8009902:	2d00      	cmp	r5, #0
 8009904:	f000 80bd 	beq.w	8009a82 <_dtoa_r+0x622>
 8009908:	b12f      	cbz	r7, 8009916 <_dtoa_r+0x4b6>
 800990a:	42af      	cmp	r7, r5
 800990c:	d003      	beq.n	8009916 <_dtoa_r+0x4b6>
 800990e:	4639      	mov	r1, r7
 8009910:	4648      	mov	r0, r9
 8009912:	f000 fcb5 	bl	800a280 <_Bfree>
 8009916:	4629      	mov	r1, r5
 8009918:	4648      	mov	r0, r9
 800991a:	f000 fcb1 	bl	800a280 <_Bfree>
 800991e:	e0b0      	b.n	8009a82 <_dtoa_r+0x622>
 8009920:	07e2      	lsls	r2, r4, #31
 8009922:	d505      	bpl.n	8009930 <_dtoa_r+0x4d0>
 8009924:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009928:	f7f6 fe66 	bl	80005f8 <__aeabi_dmul>
 800992c:	3601      	adds	r6, #1
 800992e:	2301      	movs	r3, #1
 8009930:	1064      	asrs	r4, r4, #1
 8009932:	3508      	adds	r5, #8
 8009934:	e762      	b.n	80097fc <_dtoa_r+0x39c>
 8009936:	2602      	movs	r6, #2
 8009938:	e765      	b.n	8009806 <_dtoa_r+0x3a6>
 800993a:	9c03      	ldr	r4, [sp, #12]
 800993c:	46b8      	mov	r8, r7
 800993e:	e784      	b.n	800984a <_dtoa_r+0x3ea>
 8009940:	4b27      	ldr	r3, [pc, #156]	@ (80099e0 <_dtoa_r+0x580>)
 8009942:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009944:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009948:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800994c:	4454      	add	r4, sl
 800994e:	2900      	cmp	r1, #0
 8009950:	d054      	beq.n	80099fc <_dtoa_r+0x59c>
 8009952:	4929      	ldr	r1, [pc, #164]	@ (80099f8 <_dtoa_r+0x598>)
 8009954:	2000      	movs	r0, #0
 8009956:	f7f6 ff79 	bl	800084c <__aeabi_ddiv>
 800995a:	4633      	mov	r3, r6
 800995c:	462a      	mov	r2, r5
 800995e:	f7f6 fc93 	bl	8000288 <__aeabi_dsub>
 8009962:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009966:	4656      	mov	r6, sl
 8009968:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800996c:	f7f7 f8f4 	bl	8000b58 <__aeabi_d2iz>
 8009970:	4605      	mov	r5, r0
 8009972:	f7f6 fdd7 	bl	8000524 <__aeabi_i2d>
 8009976:	4602      	mov	r2, r0
 8009978:	460b      	mov	r3, r1
 800997a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800997e:	f7f6 fc83 	bl	8000288 <__aeabi_dsub>
 8009982:	3530      	adds	r5, #48	@ 0x30
 8009984:	4602      	mov	r2, r0
 8009986:	460b      	mov	r3, r1
 8009988:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800998c:	f806 5b01 	strb.w	r5, [r6], #1
 8009990:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009994:	f7f7 f8a2 	bl	8000adc <__aeabi_dcmplt>
 8009998:	2800      	cmp	r0, #0
 800999a:	d172      	bne.n	8009a82 <_dtoa_r+0x622>
 800999c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80099a0:	4911      	ldr	r1, [pc, #68]	@ (80099e8 <_dtoa_r+0x588>)
 80099a2:	2000      	movs	r0, #0
 80099a4:	f7f6 fc70 	bl	8000288 <__aeabi_dsub>
 80099a8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80099ac:	f7f7 f896 	bl	8000adc <__aeabi_dcmplt>
 80099b0:	2800      	cmp	r0, #0
 80099b2:	f040 80b4 	bne.w	8009b1e <_dtoa_r+0x6be>
 80099b6:	42a6      	cmp	r6, r4
 80099b8:	f43f af70 	beq.w	800989c <_dtoa_r+0x43c>
 80099bc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80099c0:	4b0a      	ldr	r3, [pc, #40]	@ (80099ec <_dtoa_r+0x58c>)
 80099c2:	2200      	movs	r2, #0
 80099c4:	f7f6 fe18 	bl	80005f8 <__aeabi_dmul>
 80099c8:	4b08      	ldr	r3, [pc, #32]	@ (80099ec <_dtoa_r+0x58c>)
 80099ca:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80099ce:	2200      	movs	r2, #0
 80099d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80099d4:	f7f6 fe10 	bl	80005f8 <__aeabi_dmul>
 80099d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80099dc:	e7c4      	b.n	8009968 <_dtoa_r+0x508>
 80099de:	bf00      	nop
 80099e0:	0800db60 	.word	0x0800db60
 80099e4:	0800db38 	.word	0x0800db38
 80099e8:	3ff00000 	.word	0x3ff00000
 80099ec:	40240000 	.word	0x40240000
 80099f0:	401c0000 	.word	0x401c0000
 80099f4:	40140000 	.word	0x40140000
 80099f8:	3fe00000 	.word	0x3fe00000
 80099fc:	4631      	mov	r1, r6
 80099fe:	4628      	mov	r0, r5
 8009a00:	f7f6 fdfa 	bl	80005f8 <__aeabi_dmul>
 8009a04:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009a08:	9413      	str	r4, [sp, #76]	@ 0x4c
 8009a0a:	4656      	mov	r6, sl
 8009a0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009a10:	f7f7 f8a2 	bl	8000b58 <__aeabi_d2iz>
 8009a14:	4605      	mov	r5, r0
 8009a16:	f7f6 fd85 	bl	8000524 <__aeabi_i2d>
 8009a1a:	4602      	mov	r2, r0
 8009a1c:	460b      	mov	r3, r1
 8009a1e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009a22:	f7f6 fc31 	bl	8000288 <__aeabi_dsub>
 8009a26:	3530      	adds	r5, #48	@ 0x30
 8009a28:	f806 5b01 	strb.w	r5, [r6], #1
 8009a2c:	4602      	mov	r2, r0
 8009a2e:	460b      	mov	r3, r1
 8009a30:	42a6      	cmp	r6, r4
 8009a32:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009a36:	f04f 0200 	mov.w	r2, #0
 8009a3a:	d124      	bne.n	8009a86 <_dtoa_r+0x626>
 8009a3c:	4baf      	ldr	r3, [pc, #700]	@ (8009cfc <_dtoa_r+0x89c>)
 8009a3e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009a42:	f7f6 fc23 	bl	800028c <__adddf3>
 8009a46:	4602      	mov	r2, r0
 8009a48:	460b      	mov	r3, r1
 8009a4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009a4e:	f7f7 f863 	bl	8000b18 <__aeabi_dcmpgt>
 8009a52:	2800      	cmp	r0, #0
 8009a54:	d163      	bne.n	8009b1e <_dtoa_r+0x6be>
 8009a56:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009a5a:	49a8      	ldr	r1, [pc, #672]	@ (8009cfc <_dtoa_r+0x89c>)
 8009a5c:	2000      	movs	r0, #0
 8009a5e:	f7f6 fc13 	bl	8000288 <__aeabi_dsub>
 8009a62:	4602      	mov	r2, r0
 8009a64:	460b      	mov	r3, r1
 8009a66:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009a6a:	f7f7 f837 	bl	8000adc <__aeabi_dcmplt>
 8009a6e:	2800      	cmp	r0, #0
 8009a70:	f43f af14 	beq.w	800989c <_dtoa_r+0x43c>
 8009a74:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8009a76:	1e73      	subs	r3, r6, #1
 8009a78:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009a7a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009a7e:	2b30      	cmp	r3, #48	@ 0x30
 8009a80:	d0f8      	beq.n	8009a74 <_dtoa_r+0x614>
 8009a82:	4647      	mov	r7, r8
 8009a84:	e03b      	b.n	8009afe <_dtoa_r+0x69e>
 8009a86:	4b9e      	ldr	r3, [pc, #632]	@ (8009d00 <_dtoa_r+0x8a0>)
 8009a88:	f7f6 fdb6 	bl	80005f8 <__aeabi_dmul>
 8009a8c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009a90:	e7bc      	b.n	8009a0c <_dtoa_r+0x5ac>
 8009a92:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009a96:	4656      	mov	r6, sl
 8009a98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a9c:	4620      	mov	r0, r4
 8009a9e:	4629      	mov	r1, r5
 8009aa0:	f7f6 fed4 	bl	800084c <__aeabi_ddiv>
 8009aa4:	f7f7 f858 	bl	8000b58 <__aeabi_d2iz>
 8009aa8:	4680      	mov	r8, r0
 8009aaa:	f7f6 fd3b 	bl	8000524 <__aeabi_i2d>
 8009aae:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ab2:	f7f6 fda1 	bl	80005f8 <__aeabi_dmul>
 8009ab6:	4602      	mov	r2, r0
 8009ab8:	460b      	mov	r3, r1
 8009aba:	4620      	mov	r0, r4
 8009abc:	4629      	mov	r1, r5
 8009abe:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009ac2:	f7f6 fbe1 	bl	8000288 <__aeabi_dsub>
 8009ac6:	f806 4b01 	strb.w	r4, [r6], #1
 8009aca:	9d03      	ldr	r5, [sp, #12]
 8009acc:	eba6 040a 	sub.w	r4, r6, sl
 8009ad0:	42a5      	cmp	r5, r4
 8009ad2:	4602      	mov	r2, r0
 8009ad4:	460b      	mov	r3, r1
 8009ad6:	d133      	bne.n	8009b40 <_dtoa_r+0x6e0>
 8009ad8:	f7f6 fbd8 	bl	800028c <__adddf3>
 8009adc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ae0:	4604      	mov	r4, r0
 8009ae2:	460d      	mov	r5, r1
 8009ae4:	f7f7 f818 	bl	8000b18 <__aeabi_dcmpgt>
 8009ae8:	b9c0      	cbnz	r0, 8009b1c <_dtoa_r+0x6bc>
 8009aea:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009aee:	4620      	mov	r0, r4
 8009af0:	4629      	mov	r1, r5
 8009af2:	f7f6 ffe9 	bl	8000ac8 <__aeabi_dcmpeq>
 8009af6:	b110      	cbz	r0, 8009afe <_dtoa_r+0x69e>
 8009af8:	f018 0f01 	tst.w	r8, #1
 8009afc:	d10e      	bne.n	8009b1c <_dtoa_r+0x6bc>
 8009afe:	9902      	ldr	r1, [sp, #8]
 8009b00:	4648      	mov	r0, r9
 8009b02:	f000 fbbd 	bl	800a280 <_Bfree>
 8009b06:	2300      	movs	r3, #0
 8009b08:	7033      	strb	r3, [r6, #0]
 8009b0a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009b0c:	3701      	adds	r7, #1
 8009b0e:	601f      	str	r7, [r3, #0]
 8009b10:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	f000 824b 	beq.w	8009fae <_dtoa_r+0xb4e>
 8009b18:	601e      	str	r6, [r3, #0]
 8009b1a:	e248      	b.n	8009fae <_dtoa_r+0xb4e>
 8009b1c:	46b8      	mov	r8, r7
 8009b1e:	4633      	mov	r3, r6
 8009b20:	461e      	mov	r6, r3
 8009b22:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009b26:	2a39      	cmp	r2, #57	@ 0x39
 8009b28:	d106      	bne.n	8009b38 <_dtoa_r+0x6d8>
 8009b2a:	459a      	cmp	sl, r3
 8009b2c:	d1f8      	bne.n	8009b20 <_dtoa_r+0x6c0>
 8009b2e:	2230      	movs	r2, #48	@ 0x30
 8009b30:	f108 0801 	add.w	r8, r8, #1
 8009b34:	f88a 2000 	strb.w	r2, [sl]
 8009b38:	781a      	ldrb	r2, [r3, #0]
 8009b3a:	3201      	adds	r2, #1
 8009b3c:	701a      	strb	r2, [r3, #0]
 8009b3e:	e7a0      	b.n	8009a82 <_dtoa_r+0x622>
 8009b40:	4b6f      	ldr	r3, [pc, #444]	@ (8009d00 <_dtoa_r+0x8a0>)
 8009b42:	2200      	movs	r2, #0
 8009b44:	f7f6 fd58 	bl	80005f8 <__aeabi_dmul>
 8009b48:	2200      	movs	r2, #0
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	4604      	mov	r4, r0
 8009b4e:	460d      	mov	r5, r1
 8009b50:	f7f6 ffba 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b54:	2800      	cmp	r0, #0
 8009b56:	d09f      	beq.n	8009a98 <_dtoa_r+0x638>
 8009b58:	e7d1      	b.n	8009afe <_dtoa_r+0x69e>
 8009b5a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b5c:	2a00      	cmp	r2, #0
 8009b5e:	f000 80ea 	beq.w	8009d36 <_dtoa_r+0x8d6>
 8009b62:	9a07      	ldr	r2, [sp, #28]
 8009b64:	2a01      	cmp	r2, #1
 8009b66:	f300 80cd 	bgt.w	8009d04 <_dtoa_r+0x8a4>
 8009b6a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009b6c:	2a00      	cmp	r2, #0
 8009b6e:	f000 80c1 	beq.w	8009cf4 <_dtoa_r+0x894>
 8009b72:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009b76:	9c08      	ldr	r4, [sp, #32]
 8009b78:	9e00      	ldr	r6, [sp, #0]
 8009b7a:	9a00      	ldr	r2, [sp, #0]
 8009b7c:	441a      	add	r2, r3
 8009b7e:	9200      	str	r2, [sp, #0]
 8009b80:	9a06      	ldr	r2, [sp, #24]
 8009b82:	2101      	movs	r1, #1
 8009b84:	441a      	add	r2, r3
 8009b86:	4648      	mov	r0, r9
 8009b88:	9206      	str	r2, [sp, #24]
 8009b8a:	f000 fc77 	bl	800a47c <__i2b>
 8009b8e:	4605      	mov	r5, r0
 8009b90:	b166      	cbz	r6, 8009bac <_dtoa_r+0x74c>
 8009b92:	9b06      	ldr	r3, [sp, #24]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	dd09      	ble.n	8009bac <_dtoa_r+0x74c>
 8009b98:	42b3      	cmp	r3, r6
 8009b9a:	9a00      	ldr	r2, [sp, #0]
 8009b9c:	bfa8      	it	ge
 8009b9e:	4633      	movge	r3, r6
 8009ba0:	1ad2      	subs	r2, r2, r3
 8009ba2:	9200      	str	r2, [sp, #0]
 8009ba4:	9a06      	ldr	r2, [sp, #24]
 8009ba6:	1af6      	subs	r6, r6, r3
 8009ba8:	1ad3      	subs	r3, r2, r3
 8009baa:	9306      	str	r3, [sp, #24]
 8009bac:	9b08      	ldr	r3, [sp, #32]
 8009bae:	b30b      	cbz	r3, 8009bf4 <_dtoa_r+0x794>
 8009bb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	f000 80c6 	beq.w	8009d44 <_dtoa_r+0x8e4>
 8009bb8:	2c00      	cmp	r4, #0
 8009bba:	f000 80c0 	beq.w	8009d3e <_dtoa_r+0x8de>
 8009bbe:	4629      	mov	r1, r5
 8009bc0:	4622      	mov	r2, r4
 8009bc2:	4648      	mov	r0, r9
 8009bc4:	f000 fd12 	bl	800a5ec <__pow5mult>
 8009bc8:	9a02      	ldr	r2, [sp, #8]
 8009bca:	4601      	mov	r1, r0
 8009bcc:	4605      	mov	r5, r0
 8009bce:	4648      	mov	r0, r9
 8009bd0:	f000 fc6a 	bl	800a4a8 <__multiply>
 8009bd4:	9902      	ldr	r1, [sp, #8]
 8009bd6:	4680      	mov	r8, r0
 8009bd8:	4648      	mov	r0, r9
 8009bda:	f000 fb51 	bl	800a280 <_Bfree>
 8009bde:	9b08      	ldr	r3, [sp, #32]
 8009be0:	1b1b      	subs	r3, r3, r4
 8009be2:	9308      	str	r3, [sp, #32]
 8009be4:	f000 80b1 	beq.w	8009d4a <_dtoa_r+0x8ea>
 8009be8:	9a08      	ldr	r2, [sp, #32]
 8009bea:	4641      	mov	r1, r8
 8009bec:	4648      	mov	r0, r9
 8009bee:	f000 fcfd 	bl	800a5ec <__pow5mult>
 8009bf2:	9002      	str	r0, [sp, #8]
 8009bf4:	2101      	movs	r1, #1
 8009bf6:	4648      	mov	r0, r9
 8009bf8:	f000 fc40 	bl	800a47c <__i2b>
 8009bfc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009bfe:	4604      	mov	r4, r0
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	f000 81d8 	beq.w	8009fb6 <_dtoa_r+0xb56>
 8009c06:	461a      	mov	r2, r3
 8009c08:	4601      	mov	r1, r0
 8009c0a:	4648      	mov	r0, r9
 8009c0c:	f000 fcee 	bl	800a5ec <__pow5mult>
 8009c10:	9b07      	ldr	r3, [sp, #28]
 8009c12:	2b01      	cmp	r3, #1
 8009c14:	4604      	mov	r4, r0
 8009c16:	f300 809f 	bgt.w	8009d58 <_dtoa_r+0x8f8>
 8009c1a:	9b04      	ldr	r3, [sp, #16]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	f040 8097 	bne.w	8009d50 <_dtoa_r+0x8f0>
 8009c22:	9b05      	ldr	r3, [sp, #20]
 8009c24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	f040 8093 	bne.w	8009d54 <_dtoa_r+0x8f4>
 8009c2e:	9b05      	ldr	r3, [sp, #20]
 8009c30:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009c34:	0d1b      	lsrs	r3, r3, #20
 8009c36:	051b      	lsls	r3, r3, #20
 8009c38:	b133      	cbz	r3, 8009c48 <_dtoa_r+0x7e8>
 8009c3a:	9b00      	ldr	r3, [sp, #0]
 8009c3c:	3301      	adds	r3, #1
 8009c3e:	9300      	str	r3, [sp, #0]
 8009c40:	9b06      	ldr	r3, [sp, #24]
 8009c42:	3301      	adds	r3, #1
 8009c44:	9306      	str	r3, [sp, #24]
 8009c46:	2301      	movs	r3, #1
 8009c48:	9308      	str	r3, [sp, #32]
 8009c4a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	f000 81b8 	beq.w	8009fc2 <_dtoa_r+0xb62>
 8009c52:	6923      	ldr	r3, [r4, #16]
 8009c54:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009c58:	6918      	ldr	r0, [r3, #16]
 8009c5a:	f000 fbc3 	bl	800a3e4 <__hi0bits>
 8009c5e:	f1c0 0020 	rsb	r0, r0, #32
 8009c62:	9b06      	ldr	r3, [sp, #24]
 8009c64:	4418      	add	r0, r3
 8009c66:	f010 001f 	ands.w	r0, r0, #31
 8009c6a:	f000 8082 	beq.w	8009d72 <_dtoa_r+0x912>
 8009c6e:	f1c0 0320 	rsb	r3, r0, #32
 8009c72:	2b04      	cmp	r3, #4
 8009c74:	dd73      	ble.n	8009d5e <_dtoa_r+0x8fe>
 8009c76:	9b00      	ldr	r3, [sp, #0]
 8009c78:	f1c0 001c 	rsb	r0, r0, #28
 8009c7c:	4403      	add	r3, r0
 8009c7e:	9300      	str	r3, [sp, #0]
 8009c80:	9b06      	ldr	r3, [sp, #24]
 8009c82:	4403      	add	r3, r0
 8009c84:	4406      	add	r6, r0
 8009c86:	9306      	str	r3, [sp, #24]
 8009c88:	9b00      	ldr	r3, [sp, #0]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	dd05      	ble.n	8009c9a <_dtoa_r+0x83a>
 8009c8e:	9902      	ldr	r1, [sp, #8]
 8009c90:	461a      	mov	r2, r3
 8009c92:	4648      	mov	r0, r9
 8009c94:	f000 fd04 	bl	800a6a0 <__lshift>
 8009c98:	9002      	str	r0, [sp, #8]
 8009c9a:	9b06      	ldr	r3, [sp, #24]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	dd05      	ble.n	8009cac <_dtoa_r+0x84c>
 8009ca0:	4621      	mov	r1, r4
 8009ca2:	461a      	mov	r2, r3
 8009ca4:	4648      	mov	r0, r9
 8009ca6:	f000 fcfb 	bl	800a6a0 <__lshift>
 8009caa:	4604      	mov	r4, r0
 8009cac:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d061      	beq.n	8009d76 <_dtoa_r+0x916>
 8009cb2:	9802      	ldr	r0, [sp, #8]
 8009cb4:	4621      	mov	r1, r4
 8009cb6:	f000 fd5f 	bl	800a778 <__mcmp>
 8009cba:	2800      	cmp	r0, #0
 8009cbc:	da5b      	bge.n	8009d76 <_dtoa_r+0x916>
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	9902      	ldr	r1, [sp, #8]
 8009cc2:	220a      	movs	r2, #10
 8009cc4:	4648      	mov	r0, r9
 8009cc6:	f000 fafd 	bl	800a2c4 <__multadd>
 8009cca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ccc:	9002      	str	r0, [sp, #8]
 8009cce:	f107 38ff 	add.w	r8, r7, #4294967295
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	f000 8177 	beq.w	8009fc6 <_dtoa_r+0xb66>
 8009cd8:	4629      	mov	r1, r5
 8009cda:	2300      	movs	r3, #0
 8009cdc:	220a      	movs	r2, #10
 8009cde:	4648      	mov	r0, r9
 8009ce0:	f000 faf0 	bl	800a2c4 <__multadd>
 8009ce4:	f1bb 0f00 	cmp.w	fp, #0
 8009ce8:	4605      	mov	r5, r0
 8009cea:	dc6f      	bgt.n	8009dcc <_dtoa_r+0x96c>
 8009cec:	9b07      	ldr	r3, [sp, #28]
 8009cee:	2b02      	cmp	r3, #2
 8009cf0:	dc49      	bgt.n	8009d86 <_dtoa_r+0x926>
 8009cf2:	e06b      	b.n	8009dcc <_dtoa_r+0x96c>
 8009cf4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009cf6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009cfa:	e73c      	b.n	8009b76 <_dtoa_r+0x716>
 8009cfc:	3fe00000 	.word	0x3fe00000
 8009d00:	40240000 	.word	0x40240000
 8009d04:	9b03      	ldr	r3, [sp, #12]
 8009d06:	1e5c      	subs	r4, r3, #1
 8009d08:	9b08      	ldr	r3, [sp, #32]
 8009d0a:	42a3      	cmp	r3, r4
 8009d0c:	db09      	blt.n	8009d22 <_dtoa_r+0x8c2>
 8009d0e:	1b1c      	subs	r4, r3, r4
 8009d10:	9b03      	ldr	r3, [sp, #12]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	f6bf af30 	bge.w	8009b78 <_dtoa_r+0x718>
 8009d18:	9b00      	ldr	r3, [sp, #0]
 8009d1a:	9a03      	ldr	r2, [sp, #12]
 8009d1c:	1a9e      	subs	r6, r3, r2
 8009d1e:	2300      	movs	r3, #0
 8009d20:	e72b      	b.n	8009b7a <_dtoa_r+0x71a>
 8009d22:	9b08      	ldr	r3, [sp, #32]
 8009d24:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009d26:	9408      	str	r4, [sp, #32]
 8009d28:	1ae3      	subs	r3, r4, r3
 8009d2a:	441a      	add	r2, r3
 8009d2c:	9e00      	ldr	r6, [sp, #0]
 8009d2e:	9b03      	ldr	r3, [sp, #12]
 8009d30:	920d      	str	r2, [sp, #52]	@ 0x34
 8009d32:	2400      	movs	r4, #0
 8009d34:	e721      	b.n	8009b7a <_dtoa_r+0x71a>
 8009d36:	9c08      	ldr	r4, [sp, #32]
 8009d38:	9e00      	ldr	r6, [sp, #0]
 8009d3a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8009d3c:	e728      	b.n	8009b90 <_dtoa_r+0x730>
 8009d3e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8009d42:	e751      	b.n	8009be8 <_dtoa_r+0x788>
 8009d44:	9a08      	ldr	r2, [sp, #32]
 8009d46:	9902      	ldr	r1, [sp, #8]
 8009d48:	e750      	b.n	8009bec <_dtoa_r+0x78c>
 8009d4a:	f8cd 8008 	str.w	r8, [sp, #8]
 8009d4e:	e751      	b.n	8009bf4 <_dtoa_r+0x794>
 8009d50:	2300      	movs	r3, #0
 8009d52:	e779      	b.n	8009c48 <_dtoa_r+0x7e8>
 8009d54:	9b04      	ldr	r3, [sp, #16]
 8009d56:	e777      	b.n	8009c48 <_dtoa_r+0x7e8>
 8009d58:	2300      	movs	r3, #0
 8009d5a:	9308      	str	r3, [sp, #32]
 8009d5c:	e779      	b.n	8009c52 <_dtoa_r+0x7f2>
 8009d5e:	d093      	beq.n	8009c88 <_dtoa_r+0x828>
 8009d60:	9a00      	ldr	r2, [sp, #0]
 8009d62:	331c      	adds	r3, #28
 8009d64:	441a      	add	r2, r3
 8009d66:	9200      	str	r2, [sp, #0]
 8009d68:	9a06      	ldr	r2, [sp, #24]
 8009d6a:	441a      	add	r2, r3
 8009d6c:	441e      	add	r6, r3
 8009d6e:	9206      	str	r2, [sp, #24]
 8009d70:	e78a      	b.n	8009c88 <_dtoa_r+0x828>
 8009d72:	4603      	mov	r3, r0
 8009d74:	e7f4      	b.n	8009d60 <_dtoa_r+0x900>
 8009d76:	9b03      	ldr	r3, [sp, #12]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	46b8      	mov	r8, r7
 8009d7c:	dc20      	bgt.n	8009dc0 <_dtoa_r+0x960>
 8009d7e:	469b      	mov	fp, r3
 8009d80:	9b07      	ldr	r3, [sp, #28]
 8009d82:	2b02      	cmp	r3, #2
 8009d84:	dd1e      	ble.n	8009dc4 <_dtoa_r+0x964>
 8009d86:	f1bb 0f00 	cmp.w	fp, #0
 8009d8a:	f47f adb1 	bne.w	80098f0 <_dtoa_r+0x490>
 8009d8e:	4621      	mov	r1, r4
 8009d90:	465b      	mov	r3, fp
 8009d92:	2205      	movs	r2, #5
 8009d94:	4648      	mov	r0, r9
 8009d96:	f000 fa95 	bl	800a2c4 <__multadd>
 8009d9a:	4601      	mov	r1, r0
 8009d9c:	4604      	mov	r4, r0
 8009d9e:	9802      	ldr	r0, [sp, #8]
 8009da0:	f000 fcea 	bl	800a778 <__mcmp>
 8009da4:	2800      	cmp	r0, #0
 8009da6:	f77f ada3 	ble.w	80098f0 <_dtoa_r+0x490>
 8009daa:	4656      	mov	r6, sl
 8009dac:	2331      	movs	r3, #49	@ 0x31
 8009dae:	f806 3b01 	strb.w	r3, [r6], #1
 8009db2:	f108 0801 	add.w	r8, r8, #1
 8009db6:	e59f      	b.n	80098f8 <_dtoa_r+0x498>
 8009db8:	9c03      	ldr	r4, [sp, #12]
 8009dba:	46b8      	mov	r8, r7
 8009dbc:	4625      	mov	r5, r4
 8009dbe:	e7f4      	b.n	8009daa <_dtoa_r+0x94a>
 8009dc0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8009dc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	f000 8101 	beq.w	8009fce <_dtoa_r+0xb6e>
 8009dcc:	2e00      	cmp	r6, #0
 8009dce:	dd05      	ble.n	8009ddc <_dtoa_r+0x97c>
 8009dd0:	4629      	mov	r1, r5
 8009dd2:	4632      	mov	r2, r6
 8009dd4:	4648      	mov	r0, r9
 8009dd6:	f000 fc63 	bl	800a6a0 <__lshift>
 8009dda:	4605      	mov	r5, r0
 8009ddc:	9b08      	ldr	r3, [sp, #32]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d05c      	beq.n	8009e9c <_dtoa_r+0xa3c>
 8009de2:	6869      	ldr	r1, [r5, #4]
 8009de4:	4648      	mov	r0, r9
 8009de6:	f000 fa0b 	bl	800a200 <_Balloc>
 8009dea:	4606      	mov	r6, r0
 8009dec:	b928      	cbnz	r0, 8009dfa <_dtoa_r+0x99a>
 8009dee:	4b82      	ldr	r3, [pc, #520]	@ (8009ff8 <_dtoa_r+0xb98>)
 8009df0:	4602      	mov	r2, r0
 8009df2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009df6:	f7ff bb4a 	b.w	800948e <_dtoa_r+0x2e>
 8009dfa:	692a      	ldr	r2, [r5, #16]
 8009dfc:	3202      	adds	r2, #2
 8009dfe:	0092      	lsls	r2, r2, #2
 8009e00:	f105 010c 	add.w	r1, r5, #12
 8009e04:	300c      	adds	r0, #12
 8009e06:	f7ff fa8c 	bl	8009322 <memcpy>
 8009e0a:	2201      	movs	r2, #1
 8009e0c:	4631      	mov	r1, r6
 8009e0e:	4648      	mov	r0, r9
 8009e10:	f000 fc46 	bl	800a6a0 <__lshift>
 8009e14:	f10a 0301 	add.w	r3, sl, #1
 8009e18:	9300      	str	r3, [sp, #0]
 8009e1a:	eb0a 030b 	add.w	r3, sl, fp
 8009e1e:	9308      	str	r3, [sp, #32]
 8009e20:	9b04      	ldr	r3, [sp, #16]
 8009e22:	f003 0301 	and.w	r3, r3, #1
 8009e26:	462f      	mov	r7, r5
 8009e28:	9306      	str	r3, [sp, #24]
 8009e2a:	4605      	mov	r5, r0
 8009e2c:	9b00      	ldr	r3, [sp, #0]
 8009e2e:	9802      	ldr	r0, [sp, #8]
 8009e30:	4621      	mov	r1, r4
 8009e32:	f103 3bff 	add.w	fp, r3, #4294967295
 8009e36:	f7ff fa89 	bl	800934c <quorem>
 8009e3a:	4603      	mov	r3, r0
 8009e3c:	3330      	adds	r3, #48	@ 0x30
 8009e3e:	9003      	str	r0, [sp, #12]
 8009e40:	4639      	mov	r1, r7
 8009e42:	9802      	ldr	r0, [sp, #8]
 8009e44:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e46:	f000 fc97 	bl	800a778 <__mcmp>
 8009e4a:	462a      	mov	r2, r5
 8009e4c:	9004      	str	r0, [sp, #16]
 8009e4e:	4621      	mov	r1, r4
 8009e50:	4648      	mov	r0, r9
 8009e52:	f000 fcad 	bl	800a7b0 <__mdiff>
 8009e56:	68c2      	ldr	r2, [r0, #12]
 8009e58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e5a:	4606      	mov	r6, r0
 8009e5c:	bb02      	cbnz	r2, 8009ea0 <_dtoa_r+0xa40>
 8009e5e:	4601      	mov	r1, r0
 8009e60:	9802      	ldr	r0, [sp, #8]
 8009e62:	f000 fc89 	bl	800a778 <__mcmp>
 8009e66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e68:	4602      	mov	r2, r0
 8009e6a:	4631      	mov	r1, r6
 8009e6c:	4648      	mov	r0, r9
 8009e6e:	920c      	str	r2, [sp, #48]	@ 0x30
 8009e70:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e72:	f000 fa05 	bl	800a280 <_Bfree>
 8009e76:	9b07      	ldr	r3, [sp, #28]
 8009e78:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009e7a:	9e00      	ldr	r6, [sp, #0]
 8009e7c:	ea42 0103 	orr.w	r1, r2, r3
 8009e80:	9b06      	ldr	r3, [sp, #24]
 8009e82:	4319      	orrs	r1, r3
 8009e84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e86:	d10d      	bne.n	8009ea4 <_dtoa_r+0xa44>
 8009e88:	2b39      	cmp	r3, #57	@ 0x39
 8009e8a:	d027      	beq.n	8009edc <_dtoa_r+0xa7c>
 8009e8c:	9a04      	ldr	r2, [sp, #16]
 8009e8e:	2a00      	cmp	r2, #0
 8009e90:	dd01      	ble.n	8009e96 <_dtoa_r+0xa36>
 8009e92:	9b03      	ldr	r3, [sp, #12]
 8009e94:	3331      	adds	r3, #49	@ 0x31
 8009e96:	f88b 3000 	strb.w	r3, [fp]
 8009e9a:	e52e      	b.n	80098fa <_dtoa_r+0x49a>
 8009e9c:	4628      	mov	r0, r5
 8009e9e:	e7b9      	b.n	8009e14 <_dtoa_r+0x9b4>
 8009ea0:	2201      	movs	r2, #1
 8009ea2:	e7e2      	b.n	8009e6a <_dtoa_r+0xa0a>
 8009ea4:	9904      	ldr	r1, [sp, #16]
 8009ea6:	2900      	cmp	r1, #0
 8009ea8:	db04      	blt.n	8009eb4 <_dtoa_r+0xa54>
 8009eaa:	9807      	ldr	r0, [sp, #28]
 8009eac:	4301      	orrs	r1, r0
 8009eae:	9806      	ldr	r0, [sp, #24]
 8009eb0:	4301      	orrs	r1, r0
 8009eb2:	d120      	bne.n	8009ef6 <_dtoa_r+0xa96>
 8009eb4:	2a00      	cmp	r2, #0
 8009eb6:	ddee      	ble.n	8009e96 <_dtoa_r+0xa36>
 8009eb8:	9902      	ldr	r1, [sp, #8]
 8009eba:	9300      	str	r3, [sp, #0]
 8009ebc:	2201      	movs	r2, #1
 8009ebe:	4648      	mov	r0, r9
 8009ec0:	f000 fbee 	bl	800a6a0 <__lshift>
 8009ec4:	4621      	mov	r1, r4
 8009ec6:	9002      	str	r0, [sp, #8]
 8009ec8:	f000 fc56 	bl	800a778 <__mcmp>
 8009ecc:	2800      	cmp	r0, #0
 8009ece:	9b00      	ldr	r3, [sp, #0]
 8009ed0:	dc02      	bgt.n	8009ed8 <_dtoa_r+0xa78>
 8009ed2:	d1e0      	bne.n	8009e96 <_dtoa_r+0xa36>
 8009ed4:	07da      	lsls	r2, r3, #31
 8009ed6:	d5de      	bpl.n	8009e96 <_dtoa_r+0xa36>
 8009ed8:	2b39      	cmp	r3, #57	@ 0x39
 8009eda:	d1da      	bne.n	8009e92 <_dtoa_r+0xa32>
 8009edc:	2339      	movs	r3, #57	@ 0x39
 8009ede:	f88b 3000 	strb.w	r3, [fp]
 8009ee2:	4633      	mov	r3, r6
 8009ee4:	461e      	mov	r6, r3
 8009ee6:	3b01      	subs	r3, #1
 8009ee8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009eec:	2a39      	cmp	r2, #57	@ 0x39
 8009eee:	d04e      	beq.n	8009f8e <_dtoa_r+0xb2e>
 8009ef0:	3201      	adds	r2, #1
 8009ef2:	701a      	strb	r2, [r3, #0]
 8009ef4:	e501      	b.n	80098fa <_dtoa_r+0x49a>
 8009ef6:	2a00      	cmp	r2, #0
 8009ef8:	dd03      	ble.n	8009f02 <_dtoa_r+0xaa2>
 8009efa:	2b39      	cmp	r3, #57	@ 0x39
 8009efc:	d0ee      	beq.n	8009edc <_dtoa_r+0xa7c>
 8009efe:	3301      	adds	r3, #1
 8009f00:	e7c9      	b.n	8009e96 <_dtoa_r+0xa36>
 8009f02:	9a00      	ldr	r2, [sp, #0]
 8009f04:	9908      	ldr	r1, [sp, #32]
 8009f06:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009f0a:	428a      	cmp	r2, r1
 8009f0c:	d028      	beq.n	8009f60 <_dtoa_r+0xb00>
 8009f0e:	9902      	ldr	r1, [sp, #8]
 8009f10:	2300      	movs	r3, #0
 8009f12:	220a      	movs	r2, #10
 8009f14:	4648      	mov	r0, r9
 8009f16:	f000 f9d5 	bl	800a2c4 <__multadd>
 8009f1a:	42af      	cmp	r7, r5
 8009f1c:	9002      	str	r0, [sp, #8]
 8009f1e:	f04f 0300 	mov.w	r3, #0
 8009f22:	f04f 020a 	mov.w	r2, #10
 8009f26:	4639      	mov	r1, r7
 8009f28:	4648      	mov	r0, r9
 8009f2a:	d107      	bne.n	8009f3c <_dtoa_r+0xadc>
 8009f2c:	f000 f9ca 	bl	800a2c4 <__multadd>
 8009f30:	4607      	mov	r7, r0
 8009f32:	4605      	mov	r5, r0
 8009f34:	9b00      	ldr	r3, [sp, #0]
 8009f36:	3301      	adds	r3, #1
 8009f38:	9300      	str	r3, [sp, #0]
 8009f3a:	e777      	b.n	8009e2c <_dtoa_r+0x9cc>
 8009f3c:	f000 f9c2 	bl	800a2c4 <__multadd>
 8009f40:	4629      	mov	r1, r5
 8009f42:	4607      	mov	r7, r0
 8009f44:	2300      	movs	r3, #0
 8009f46:	220a      	movs	r2, #10
 8009f48:	4648      	mov	r0, r9
 8009f4a:	f000 f9bb 	bl	800a2c4 <__multadd>
 8009f4e:	4605      	mov	r5, r0
 8009f50:	e7f0      	b.n	8009f34 <_dtoa_r+0xad4>
 8009f52:	f1bb 0f00 	cmp.w	fp, #0
 8009f56:	bfcc      	ite	gt
 8009f58:	465e      	movgt	r6, fp
 8009f5a:	2601      	movle	r6, #1
 8009f5c:	4456      	add	r6, sl
 8009f5e:	2700      	movs	r7, #0
 8009f60:	9902      	ldr	r1, [sp, #8]
 8009f62:	9300      	str	r3, [sp, #0]
 8009f64:	2201      	movs	r2, #1
 8009f66:	4648      	mov	r0, r9
 8009f68:	f000 fb9a 	bl	800a6a0 <__lshift>
 8009f6c:	4621      	mov	r1, r4
 8009f6e:	9002      	str	r0, [sp, #8]
 8009f70:	f000 fc02 	bl	800a778 <__mcmp>
 8009f74:	2800      	cmp	r0, #0
 8009f76:	dcb4      	bgt.n	8009ee2 <_dtoa_r+0xa82>
 8009f78:	d102      	bne.n	8009f80 <_dtoa_r+0xb20>
 8009f7a:	9b00      	ldr	r3, [sp, #0]
 8009f7c:	07db      	lsls	r3, r3, #31
 8009f7e:	d4b0      	bmi.n	8009ee2 <_dtoa_r+0xa82>
 8009f80:	4633      	mov	r3, r6
 8009f82:	461e      	mov	r6, r3
 8009f84:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009f88:	2a30      	cmp	r2, #48	@ 0x30
 8009f8a:	d0fa      	beq.n	8009f82 <_dtoa_r+0xb22>
 8009f8c:	e4b5      	b.n	80098fa <_dtoa_r+0x49a>
 8009f8e:	459a      	cmp	sl, r3
 8009f90:	d1a8      	bne.n	8009ee4 <_dtoa_r+0xa84>
 8009f92:	2331      	movs	r3, #49	@ 0x31
 8009f94:	f108 0801 	add.w	r8, r8, #1
 8009f98:	f88a 3000 	strb.w	r3, [sl]
 8009f9c:	e4ad      	b.n	80098fa <_dtoa_r+0x49a>
 8009f9e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009fa0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8009ffc <_dtoa_r+0xb9c>
 8009fa4:	b11b      	cbz	r3, 8009fae <_dtoa_r+0xb4e>
 8009fa6:	f10a 0308 	add.w	r3, sl, #8
 8009faa:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009fac:	6013      	str	r3, [r2, #0]
 8009fae:	4650      	mov	r0, sl
 8009fb0:	b017      	add	sp, #92	@ 0x5c
 8009fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fb6:	9b07      	ldr	r3, [sp, #28]
 8009fb8:	2b01      	cmp	r3, #1
 8009fba:	f77f ae2e 	ble.w	8009c1a <_dtoa_r+0x7ba>
 8009fbe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009fc0:	9308      	str	r3, [sp, #32]
 8009fc2:	2001      	movs	r0, #1
 8009fc4:	e64d      	b.n	8009c62 <_dtoa_r+0x802>
 8009fc6:	f1bb 0f00 	cmp.w	fp, #0
 8009fca:	f77f aed9 	ble.w	8009d80 <_dtoa_r+0x920>
 8009fce:	4656      	mov	r6, sl
 8009fd0:	9802      	ldr	r0, [sp, #8]
 8009fd2:	4621      	mov	r1, r4
 8009fd4:	f7ff f9ba 	bl	800934c <quorem>
 8009fd8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8009fdc:	f806 3b01 	strb.w	r3, [r6], #1
 8009fe0:	eba6 020a 	sub.w	r2, r6, sl
 8009fe4:	4593      	cmp	fp, r2
 8009fe6:	ddb4      	ble.n	8009f52 <_dtoa_r+0xaf2>
 8009fe8:	9902      	ldr	r1, [sp, #8]
 8009fea:	2300      	movs	r3, #0
 8009fec:	220a      	movs	r2, #10
 8009fee:	4648      	mov	r0, r9
 8009ff0:	f000 f968 	bl	800a2c4 <__multadd>
 8009ff4:	9002      	str	r0, [sp, #8]
 8009ff6:	e7eb      	b.n	8009fd0 <_dtoa_r+0xb70>
 8009ff8:	0800d9ef 	.word	0x0800d9ef
 8009ffc:	0800d973 	.word	0x0800d973

0800a000 <_free_r>:
 800a000:	b538      	push	{r3, r4, r5, lr}
 800a002:	4605      	mov	r5, r0
 800a004:	2900      	cmp	r1, #0
 800a006:	d041      	beq.n	800a08c <_free_r+0x8c>
 800a008:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a00c:	1f0c      	subs	r4, r1, #4
 800a00e:	2b00      	cmp	r3, #0
 800a010:	bfb8      	it	lt
 800a012:	18e4      	addlt	r4, r4, r3
 800a014:	f000 f8e8 	bl	800a1e8 <__malloc_lock>
 800a018:	4a1d      	ldr	r2, [pc, #116]	@ (800a090 <_free_r+0x90>)
 800a01a:	6813      	ldr	r3, [r2, #0]
 800a01c:	b933      	cbnz	r3, 800a02c <_free_r+0x2c>
 800a01e:	6063      	str	r3, [r4, #4]
 800a020:	6014      	str	r4, [r2, #0]
 800a022:	4628      	mov	r0, r5
 800a024:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a028:	f000 b8e4 	b.w	800a1f4 <__malloc_unlock>
 800a02c:	42a3      	cmp	r3, r4
 800a02e:	d908      	bls.n	800a042 <_free_r+0x42>
 800a030:	6820      	ldr	r0, [r4, #0]
 800a032:	1821      	adds	r1, r4, r0
 800a034:	428b      	cmp	r3, r1
 800a036:	bf01      	itttt	eq
 800a038:	6819      	ldreq	r1, [r3, #0]
 800a03a:	685b      	ldreq	r3, [r3, #4]
 800a03c:	1809      	addeq	r1, r1, r0
 800a03e:	6021      	streq	r1, [r4, #0]
 800a040:	e7ed      	b.n	800a01e <_free_r+0x1e>
 800a042:	461a      	mov	r2, r3
 800a044:	685b      	ldr	r3, [r3, #4]
 800a046:	b10b      	cbz	r3, 800a04c <_free_r+0x4c>
 800a048:	42a3      	cmp	r3, r4
 800a04a:	d9fa      	bls.n	800a042 <_free_r+0x42>
 800a04c:	6811      	ldr	r1, [r2, #0]
 800a04e:	1850      	adds	r0, r2, r1
 800a050:	42a0      	cmp	r0, r4
 800a052:	d10b      	bne.n	800a06c <_free_r+0x6c>
 800a054:	6820      	ldr	r0, [r4, #0]
 800a056:	4401      	add	r1, r0
 800a058:	1850      	adds	r0, r2, r1
 800a05a:	4283      	cmp	r3, r0
 800a05c:	6011      	str	r1, [r2, #0]
 800a05e:	d1e0      	bne.n	800a022 <_free_r+0x22>
 800a060:	6818      	ldr	r0, [r3, #0]
 800a062:	685b      	ldr	r3, [r3, #4]
 800a064:	6053      	str	r3, [r2, #4]
 800a066:	4408      	add	r0, r1
 800a068:	6010      	str	r0, [r2, #0]
 800a06a:	e7da      	b.n	800a022 <_free_r+0x22>
 800a06c:	d902      	bls.n	800a074 <_free_r+0x74>
 800a06e:	230c      	movs	r3, #12
 800a070:	602b      	str	r3, [r5, #0]
 800a072:	e7d6      	b.n	800a022 <_free_r+0x22>
 800a074:	6820      	ldr	r0, [r4, #0]
 800a076:	1821      	adds	r1, r4, r0
 800a078:	428b      	cmp	r3, r1
 800a07a:	bf04      	itt	eq
 800a07c:	6819      	ldreq	r1, [r3, #0]
 800a07e:	685b      	ldreq	r3, [r3, #4]
 800a080:	6063      	str	r3, [r4, #4]
 800a082:	bf04      	itt	eq
 800a084:	1809      	addeq	r1, r1, r0
 800a086:	6021      	streq	r1, [r4, #0]
 800a088:	6054      	str	r4, [r2, #4]
 800a08a:	e7ca      	b.n	800a022 <_free_r+0x22>
 800a08c:	bd38      	pop	{r3, r4, r5, pc}
 800a08e:	bf00      	nop
 800a090:	2000118c 	.word	0x2000118c

0800a094 <malloc>:
 800a094:	4b02      	ldr	r3, [pc, #8]	@ (800a0a0 <malloc+0xc>)
 800a096:	4601      	mov	r1, r0
 800a098:	6818      	ldr	r0, [r3, #0]
 800a09a:	f000 b825 	b.w	800a0e8 <_malloc_r>
 800a09e:	bf00      	nop
 800a0a0:	20000038 	.word	0x20000038

0800a0a4 <sbrk_aligned>:
 800a0a4:	b570      	push	{r4, r5, r6, lr}
 800a0a6:	4e0f      	ldr	r6, [pc, #60]	@ (800a0e4 <sbrk_aligned+0x40>)
 800a0a8:	460c      	mov	r4, r1
 800a0aa:	6831      	ldr	r1, [r6, #0]
 800a0ac:	4605      	mov	r5, r0
 800a0ae:	b911      	cbnz	r1, 800a0b6 <sbrk_aligned+0x12>
 800a0b0:	f002 f996 	bl	800c3e0 <_sbrk_r>
 800a0b4:	6030      	str	r0, [r6, #0]
 800a0b6:	4621      	mov	r1, r4
 800a0b8:	4628      	mov	r0, r5
 800a0ba:	f002 f991 	bl	800c3e0 <_sbrk_r>
 800a0be:	1c43      	adds	r3, r0, #1
 800a0c0:	d103      	bne.n	800a0ca <sbrk_aligned+0x26>
 800a0c2:	f04f 34ff 	mov.w	r4, #4294967295
 800a0c6:	4620      	mov	r0, r4
 800a0c8:	bd70      	pop	{r4, r5, r6, pc}
 800a0ca:	1cc4      	adds	r4, r0, #3
 800a0cc:	f024 0403 	bic.w	r4, r4, #3
 800a0d0:	42a0      	cmp	r0, r4
 800a0d2:	d0f8      	beq.n	800a0c6 <sbrk_aligned+0x22>
 800a0d4:	1a21      	subs	r1, r4, r0
 800a0d6:	4628      	mov	r0, r5
 800a0d8:	f002 f982 	bl	800c3e0 <_sbrk_r>
 800a0dc:	3001      	adds	r0, #1
 800a0de:	d1f2      	bne.n	800a0c6 <sbrk_aligned+0x22>
 800a0e0:	e7ef      	b.n	800a0c2 <sbrk_aligned+0x1e>
 800a0e2:	bf00      	nop
 800a0e4:	20001188 	.word	0x20001188

0800a0e8 <_malloc_r>:
 800a0e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0ec:	1ccd      	adds	r5, r1, #3
 800a0ee:	f025 0503 	bic.w	r5, r5, #3
 800a0f2:	3508      	adds	r5, #8
 800a0f4:	2d0c      	cmp	r5, #12
 800a0f6:	bf38      	it	cc
 800a0f8:	250c      	movcc	r5, #12
 800a0fa:	2d00      	cmp	r5, #0
 800a0fc:	4606      	mov	r6, r0
 800a0fe:	db01      	blt.n	800a104 <_malloc_r+0x1c>
 800a100:	42a9      	cmp	r1, r5
 800a102:	d904      	bls.n	800a10e <_malloc_r+0x26>
 800a104:	230c      	movs	r3, #12
 800a106:	6033      	str	r3, [r6, #0]
 800a108:	2000      	movs	r0, #0
 800a10a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a10e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a1e4 <_malloc_r+0xfc>
 800a112:	f000 f869 	bl	800a1e8 <__malloc_lock>
 800a116:	f8d8 3000 	ldr.w	r3, [r8]
 800a11a:	461c      	mov	r4, r3
 800a11c:	bb44      	cbnz	r4, 800a170 <_malloc_r+0x88>
 800a11e:	4629      	mov	r1, r5
 800a120:	4630      	mov	r0, r6
 800a122:	f7ff ffbf 	bl	800a0a4 <sbrk_aligned>
 800a126:	1c43      	adds	r3, r0, #1
 800a128:	4604      	mov	r4, r0
 800a12a:	d158      	bne.n	800a1de <_malloc_r+0xf6>
 800a12c:	f8d8 4000 	ldr.w	r4, [r8]
 800a130:	4627      	mov	r7, r4
 800a132:	2f00      	cmp	r7, #0
 800a134:	d143      	bne.n	800a1be <_malloc_r+0xd6>
 800a136:	2c00      	cmp	r4, #0
 800a138:	d04b      	beq.n	800a1d2 <_malloc_r+0xea>
 800a13a:	6823      	ldr	r3, [r4, #0]
 800a13c:	4639      	mov	r1, r7
 800a13e:	4630      	mov	r0, r6
 800a140:	eb04 0903 	add.w	r9, r4, r3
 800a144:	f002 f94c 	bl	800c3e0 <_sbrk_r>
 800a148:	4581      	cmp	r9, r0
 800a14a:	d142      	bne.n	800a1d2 <_malloc_r+0xea>
 800a14c:	6821      	ldr	r1, [r4, #0]
 800a14e:	1a6d      	subs	r5, r5, r1
 800a150:	4629      	mov	r1, r5
 800a152:	4630      	mov	r0, r6
 800a154:	f7ff ffa6 	bl	800a0a4 <sbrk_aligned>
 800a158:	3001      	adds	r0, #1
 800a15a:	d03a      	beq.n	800a1d2 <_malloc_r+0xea>
 800a15c:	6823      	ldr	r3, [r4, #0]
 800a15e:	442b      	add	r3, r5
 800a160:	6023      	str	r3, [r4, #0]
 800a162:	f8d8 3000 	ldr.w	r3, [r8]
 800a166:	685a      	ldr	r2, [r3, #4]
 800a168:	bb62      	cbnz	r2, 800a1c4 <_malloc_r+0xdc>
 800a16a:	f8c8 7000 	str.w	r7, [r8]
 800a16e:	e00f      	b.n	800a190 <_malloc_r+0xa8>
 800a170:	6822      	ldr	r2, [r4, #0]
 800a172:	1b52      	subs	r2, r2, r5
 800a174:	d420      	bmi.n	800a1b8 <_malloc_r+0xd0>
 800a176:	2a0b      	cmp	r2, #11
 800a178:	d917      	bls.n	800a1aa <_malloc_r+0xc2>
 800a17a:	1961      	adds	r1, r4, r5
 800a17c:	42a3      	cmp	r3, r4
 800a17e:	6025      	str	r5, [r4, #0]
 800a180:	bf18      	it	ne
 800a182:	6059      	strne	r1, [r3, #4]
 800a184:	6863      	ldr	r3, [r4, #4]
 800a186:	bf08      	it	eq
 800a188:	f8c8 1000 	streq.w	r1, [r8]
 800a18c:	5162      	str	r2, [r4, r5]
 800a18e:	604b      	str	r3, [r1, #4]
 800a190:	4630      	mov	r0, r6
 800a192:	f000 f82f 	bl	800a1f4 <__malloc_unlock>
 800a196:	f104 000b 	add.w	r0, r4, #11
 800a19a:	1d23      	adds	r3, r4, #4
 800a19c:	f020 0007 	bic.w	r0, r0, #7
 800a1a0:	1ac2      	subs	r2, r0, r3
 800a1a2:	bf1c      	itt	ne
 800a1a4:	1a1b      	subne	r3, r3, r0
 800a1a6:	50a3      	strne	r3, [r4, r2]
 800a1a8:	e7af      	b.n	800a10a <_malloc_r+0x22>
 800a1aa:	6862      	ldr	r2, [r4, #4]
 800a1ac:	42a3      	cmp	r3, r4
 800a1ae:	bf0c      	ite	eq
 800a1b0:	f8c8 2000 	streq.w	r2, [r8]
 800a1b4:	605a      	strne	r2, [r3, #4]
 800a1b6:	e7eb      	b.n	800a190 <_malloc_r+0xa8>
 800a1b8:	4623      	mov	r3, r4
 800a1ba:	6864      	ldr	r4, [r4, #4]
 800a1bc:	e7ae      	b.n	800a11c <_malloc_r+0x34>
 800a1be:	463c      	mov	r4, r7
 800a1c0:	687f      	ldr	r7, [r7, #4]
 800a1c2:	e7b6      	b.n	800a132 <_malloc_r+0x4a>
 800a1c4:	461a      	mov	r2, r3
 800a1c6:	685b      	ldr	r3, [r3, #4]
 800a1c8:	42a3      	cmp	r3, r4
 800a1ca:	d1fb      	bne.n	800a1c4 <_malloc_r+0xdc>
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	6053      	str	r3, [r2, #4]
 800a1d0:	e7de      	b.n	800a190 <_malloc_r+0xa8>
 800a1d2:	230c      	movs	r3, #12
 800a1d4:	6033      	str	r3, [r6, #0]
 800a1d6:	4630      	mov	r0, r6
 800a1d8:	f000 f80c 	bl	800a1f4 <__malloc_unlock>
 800a1dc:	e794      	b.n	800a108 <_malloc_r+0x20>
 800a1de:	6005      	str	r5, [r0, #0]
 800a1e0:	e7d6      	b.n	800a190 <_malloc_r+0xa8>
 800a1e2:	bf00      	nop
 800a1e4:	2000118c 	.word	0x2000118c

0800a1e8 <__malloc_lock>:
 800a1e8:	4801      	ldr	r0, [pc, #4]	@ (800a1f0 <__malloc_lock+0x8>)
 800a1ea:	f7ff b898 	b.w	800931e <__retarget_lock_acquire_recursive>
 800a1ee:	bf00      	nop
 800a1f0:	20001184 	.word	0x20001184

0800a1f4 <__malloc_unlock>:
 800a1f4:	4801      	ldr	r0, [pc, #4]	@ (800a1fc <__malloc_unlock+0x8>)
 800a1f6:	f7ff b893 	b.w	8009320 <__retarget_lock_release_recursive>
 800a1fa:	bf00      	nop
 800a1fc:	20001184 	.word	0x20001184

0800a200 <_Balloc>:
 800a200:	b570      	push	{r4, r5, r6, lr}
 800a202:	69c6      	ldr	r6, [r0, #28]
 800a204:	4604      	mov	r4, r0
 800a206:	460d      	mov	r5, r1
 800a208:	b976      	cbnz	r6, 800a228 <_Balloc+0x28>
 800a20a:	2010      	movs	r0, #16
 800a20c:	f7ff ff42 	bl	800a094 <malloc>
 800a210:	4602      	mov	r2, r0
 800a212:	61e0      	str	r0, [r4, #28]
 800a214:	b920      	cbnz	r0, 800a220 <_Balloc+0x20>
 800a216:	4b18      	ldr	r3, [pc, #96]	@ (800a278 <_Balloc+0x78>)
 800a218:	4818      	ldr	r0, [pc, #96]	@ (800a27c <_Balloc+0x7c>)
 800a21a:	216b      	movs	r1, #107	@ 0x6b
 800a21c:	f002 f8f8 	bl	800c410 <__assert_func>
 800a220:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a224:	6006      	str	r6, [r0, #0]
 800a226:	60c6      	str	r6, [r0, #12]
 800a228:	69e6      	ldr	r6, [r4, #28]
 800a22a:	68f3      	ldr	r3, [r6, #12]
 800a22c:	b183      	cbz	r3, 800a250 <_Balloc+0x50>
 800a22e:	69e3      	ldr	r3, [r4, #28]
 800a230:	68db      	ldr	r3, [r3, #12]
 800a232:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a236:	b9b8      	cbnz	r0, 800a268 <_Balloc+0x68>
 800a238:	2101      	movs	r1, #1
 800a23a:	fa01 f605 	lsl.w	r6, r1, r5
 800a23e:	1d72      	adds	r2, r6, #5
 800a240:	0092      	lsls	r2, r2, #2
 800a242:	4620      	mov	r0, r4
 800a244:	f002 f902 	bl	800c44c <_calloc_r>
 800a248:	b160      	cbz	r0, 800a264 <_Balloc+0x64>
 800a24a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a24e:	e00e      	b.n	800a26e <_Balloc+0x6e>
 800a250:	2221      	movs	r2, #33	@ 0x21
 800a252:	2104      	movs	r1, #4
 800a254:	4620      	mov	r0, r4
 800a256:	f002 f8f9 	bl	800c44c <_calloc_r>
 800a25a:	69e3      	ldr	r3, [r4, #28]
 800a25c:	60f0      	str	r0, [r6, #12]
 800a25e:	68db      	ldr	r3, [r3, #12]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d1e4      	bne.n	800a22e <_Balloc+0x2e>
 800a264:	2000      	movs	r0, #0
 800a266:	bd70      	pop	{r4, r5, r6, pc}
 800a268:	6802      	ldr	r2, [r0, #0]
 800a26a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a26e:	2300      	movs	r3, #0
 800a270:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a274:	e7f7      	b.n	800a266 <_Balloc+0x66>
 800a276:	bf00      	nop
 800a278:	0800d980 	.word	0x0800d980
 800a27c:	0800da00 	.word	0x0800da00

0800a280 <_Bfree>:
 800a280:	b570      	push	{r4, r5, r6, lr}
 800a282:	69c6      	ldr	r6, [r0, #28]
 800a284:	4605      	mov	r5, r0
 800a286:	460c      	mov	r4, r1
 800a288:	b976      	cbnz	r6, 800a2a8 <_Bfree+0x28>
 800a28a:	2010      	movs	r0, #16
 800a28c:	f7ff ff02 	bl	800a094 <malloc>
 800a290:	4602      	mov	r2, r0
 800a292:	61e8      	str	r0, [r5, #28]
 800a294:	b920      	cbnz	r0, 800a2a0 <_Bfree+0x20>
 800a296:	4b09      	ldr	r3, [pc, #36]	@ (800a2bc <_Bfree+0x3c>)
 800a298:	4809      	ldr	r0, [pc, #36]	@ (800a2c0 <_Bfree+0x40>)
 800a29a:	218f      	movs	r1, #143	@ 0x8f
 800a29c:	f002 f8b8 	bl	800c410 <__assert_func>
 800a2a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a2a4:	6006      	str	r6, [r0, #0]
 800a2a6:	60c6      	str	r6, [r0, #12]
 800a2a8:	b13c      	cbz	r4, 800a2ba <_Bfree+0x3a>
 800a2aa:	69eb      	ldr	r3, [r5, #28]
 800a2ac:	6862      	ldr	r2, [r4, #4]
 800a2ae:	68db      	ldr	r3, [r3, #12]
 800a2b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a2b4:	6021      	str	r1, [r4, #0]
 800a2b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a2ba:	bd70      	pop	{r4, r5, r6, pc}
 800a2bc:	0800d980 	.word	0x0800d980
 800a2c0:	0800da00 	.word	0x0800da00

0800a2c4 <__multadd>:
 800a2c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2c8:	690d      	ldr	r5, [r1, #16]
 800a2ca:	4607      	mov	r7, r0
 800a2cc:	460c      	mov	r4, r1
 800a2ce:	461e      	mov	r6, r3
 800a2d0:	f101 0c14 	add.w	ip, r1, #20
 800a2d4:	2000      	movs	r0, #0
 800a2d6:	f8dc 3000 	ldr.w	r3, [ip]
 800a2da:	b299      	uxth	r1, r3
 800a2dc:	fb02 6101 	mla	r1, r2, r1, r6
 800a2e0:	0c1e      	lsrs	r6, r3, #16
 800a2e2:	0c0b      	lsrs	r3, r1, #16
 800a2e4:	fb02 3306 	mla	r3, r2, r6, r3
 800a2e8:	b289      	uxth	r1, r1
 800a2ea:	3001      	adds	r0, #1
 800a2ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a2f0:	4285      	cmp	r5, r0
 800a2f2:	f84c 1b04 	str.w	r1, [ip], #4
 800a2f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a2fa:	dcec      	bgt.n	800a2d6 <__multadd+0x12>
 800a2fc:	b30e      	cbz	r6, 800a342 <__multadd+0x7e>
 800a2fe:	68a3      	ldr	r3, [r4, #8]
 800a300:	42ab      	cmp	r3, r5
 800a302:	dc19      	bgt.n	800a338 <__multadd+0x74>
 800a304:	6861      	ldr	r1, [r4, #4]
 800a306:	4638      	mov	r0, r7
 800a308:	3101      	adds	r1, #1
 800a30a:	f7ff ff79 	bl	800a200 <_Balloc>
 800a30e:	4680      	mov	r8, r0
 800a310:	b928      	cbnz	r0, 800a31e <__multadd+0x5a>
 800a312:	4602      	mov	r2, r0
 800a314:	4b0c      	ldr	r3, [pc, #48]	@ (800a348 <__multadd+0x84>)
 800a316:	480d      	ldr	r0, [pc, #52]	@ (800a34c <__multadd+0x88>)
 800a318:	21ba      	movs	r1, #186	@ 0xba
 800a31a:	f002 f879 	bl	800c410 <__assert_func>
 800a31e:	6922      	ldr	r2, [r4, #16]
 800a320:	3202      	adds	r2, #2
 800a322:	f104 010c 	add.w	r1, r4, #12
 800a326:	0092      	lsls	r2, r2, #2
 800a328:	300c      	adds	r0, #12
 800a32a:	f7fe fffa 	bl	8009322 <memcpy>
 800a32e:	4621      	mov	r1, r4
 800a330:	4638      	mov	r0, r7
 800a332:	f7ff ffa5 	bl	800a280 <_Bfree>
 800a336:	4644      	mov	r4, r8
 800a338:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a33c:	3501      	adds	r5, #1
 800a33e:	615e      	str	r6, [r3, #20]
 800a340:	6125      	str	r5, [r4, #16]
 800a342:	4620      	mov	r0, r4
 800a344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a348:	0800d9ef 	.word	0x0800d9ef
 800a34c:	0800da00 	.word	0x0800da00

0800a350 <__s2b>:
 800a350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a354:	460c      	mov	r4, r1
 800a356:	4615      	mov	r5, r2
 800a358:	461f      	mov	r7, r3
 800a35a:	2209      	movs	r2, #9
 800a35c:	3308      	adds	r3, #8
 800a35e:	4606      	mov	r6, r0
 800a360:	fb93 f3f2 	sdiv	r3, r3, r2
 800a364:	2100      	movs	r1, #0
 800a366:	2201      	movs	r2, #1
 800a368:	429a      	cmp	r2, r3
 800a36a:	db09      	blt.n	800a380 <__s2b+0x30>
 800a36c:	4630      	mov	r0, r6
 800a36e:	f7ff ff47 	bl	800a200 <_Balloc>
 800a372:	b940      	cbnz	r0, 800a386 <__s2b+0x36>
 800a374:	4602      	mov	r2, r0
 800a376:	4b19      	ldr	r3, [pc, #100]	@ (800a3dc <__s2b+0x8c>)
 800a378:	4819      	ldr	r0, [pc, #100]	@ (800a3e0 <__s2b+0x90>)
 800a37a:	21d3      	movs	r1, #211	@ 0xd3
 800a37c:	f002 f848 	bl	800c410 <__assert_func>
 800a380:	0052      	lsls	r2, r2, #1
 800a382:	3101      	adds	r1, #1
 800a384:	e7f0      	b.n	800a368 <__s2b+0x18>
 800a386:	9b08      	ldr	r3, [sp, #32]
 800a388:	6143      	str	r3, [r0, #20]
 800a38a:	2d09      	cmp	r5, #9
 800a38c:	f04f 0301 	mov.w	r3, #1
 800a390:	6103      	str	r3, [r0, #16]
 800a392:	dd16      	ble.n	800a3c2 <__s2b+0x72>
 800a394:	f104 0909 	add.w	r9, r4, #9
 800a398:	46c8      	mov	r8, r9
 800a39a:	442c      	add	r4, r5
 800a39c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a3a0:	4601      	mov	r1, r0
 800a3a2:	3b30      	subs	r3, #48	@ 0x30
 800a3a4:	220a      	movs	r2, #10
 800a3a6:	4630      	mov	r0, r6
 800a3a8:	f7ff ff8c 	bl	800a2c4 <__multadd>
 800a3ac:	45a0      	cmp	r8, r4
 800a3ae:	d1f5      	bne.n	800a39c <__s2b+0x4c>
 800a3b0:	f1a5 0408 	sub.w	r4, r5, #8
 800a3b4:	444c      	add	r4, r9
 800a3b6:	1b2d      	subs	r5, r5, r4
 800a3b8:	1963      	adds	r3, r4, r5
 800a3ba:	42bb      	cmp	r3, r7
 800a3bc:	db04      	blt.n	800a3c8 <__s2b+0x78>
 800a3be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3c2:	340a      	adds	r4, #10
 800a3c4:	2509      	movs	r5, #9
 800a3c6:	e7f6      	b.n	800a3b6 <__s2b+0x66>
 800a3c8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a3cc:	4601      	mov	r1, r0
 800a3ce:	3b30      	subs	r3, #48	@ 0x30
 800a3d0:	220a      	movs	r2, #10
 800a3d2:	4630      	mov	r0, r6
 800a3d4:	f7ff ff76 	bl	800a2c4 <__multadd>
 800a3d8:	e7ee      	b.n	800a3b8 <__s2b+0x68>
 800a3da:	bf00      	nop
 800a3dc:	0800d9ef 	.word	0x0800d9ef
 800a3e0:	0800da00 	.word	0x0800da00

0800a3e4 <__hi0bits>:
 800a3e4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	bf36      	itet	cc
 800a3ec:	0403      	lslcc	r3, r0, #16
 800a3ee:	2000      	movcs	r0, #0
 800a3f0:	2010      	movcc	r0, #16
 800a3f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a3f6:	bf3c      	itt	cc
 800a3f8:	021b      	lslcc	r3, r3, #8
 800a3fa:	3008      	addcc	r0, #8
 800a3fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a400:	bf3c      	itt	cc
 800a402:	011b      	lslcc	r3, r3, #4
 800a404:	3004      	addcc	r0, #4
 800a406:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a40a:	bf3c      	itt	cc
 800a40c:	009b      	lslcc	r3, r3, #2
 800a40e:	3002      	addcc	r0, #2
 800a410:	2b00      	cmp	r3, #0
 800a412:	db05      	blt.n	800a420 <__hi0bits+0x3c>
 800a414:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a418:	f100 0001 	add.w	r0, r0, #1
 800a41c:	bf08      	it	eq
 800a41e:	2020      	moveq	r0, #32
 800a420:	4770      	bx	lr

0800a422 <__lo0bits>:
 800a422:	6803      	ldr	r3, [r0, #0]
 800a424:	4602      	mov	r2, r0
 800a426:	f013 0007 	ands.w	r0, r3, #7
 800a42a:	d00b      	beq.n	800a444 <__lo0bits+0x22>
 800a42c:	07d9      	lsls	r1, r3, #31
 800a42e:	d421      	bmi.n	800a474 <__lo0bits+0x52>
 800a430:	0798      	lsls	r0, r3, #30
 800a432:	bf49      	itett	mi
 800a434:	085b      	lsrmi	r3, r3, #1
 800a436:	089b      	lsrpl	r3, r3, #2
 800a438:	2001      	movmi	r0, #1
 800a43a:	6013      	strmi	r3, [r2, #0]
 800a43c:	bf5c      	itt	pl
 800a43e:	6013      	strpl	r3, [r2, #0]
 800a440:	2002      	movpl	r0, #2
 800a442:	4770      	bx	lr
 800a444:	b299      	uxth	r1, r3
 800a446:	b909      	cbnz	r1, 800a44c <__lo0bits+0x2a>
 800a448:	0c1b      	lsrs	r3, r3, #16
 800a44a:	2010      	movs	r0, #16
 800a44c:	b2d9      	uxtb	r1, r3
 800a44e:	b909      	cbnz	r1, 800a454 <__lo0bits+0x32>
 800a450:	3008      	adds	r0, #8
 800a452:	0a1b      	lsrs	r3, r3, #8
 800a454:	0719      	lsls	r1, r3, #28
 800a456:	bf04      	itt	eq
 800a458:	091b      	lsreq	r3, r3, #4
 800a45a:	3004      	addeq	r0, #4
 800a45c:	0799      	lsls	r1, r3, #30
 800a45e:	bf04      	itt	eq
 800a460:	089b      	lsreq	r3, r3, #2
 800a462:	3002      	addeq	r0, #2
 800a464:	07d9      	lsls	r1, r3, #31
 800a466:	d403      	bmi.n	800a470 <__lo0bits+0x4e>
 800a468:	085b      	lsrs	r3, r3, #1
 800a46a:	f100 0001 	add.w	r0, r0, #1
 800a46e:	d003      	beq.n	800a478 <__lo0bits+0x56>
 800a470:	6013      	str	r3, [r2, #0]
 800a472:	4770      	bx	lr
 800a474:	2000      	movs	r0, #0
 800a476:	4770      	bx	lr
 800a478:	2020      	movs	r0, #32
 800a47a:	4770      	bx	lr

0800a47c <__i2b>:
 800a47c:	b510      	push	{r4, lr}
 800a47e:	460c      	mov	r4, r1
 800a480:	2101      	movs	r1, #1
 800a482:	f7ff febd 	bl	800a200 <_Balloc>
 800a486:	4602      	mov	r2, r0
 800a488:	b928      	cbnz	r0, 800a496 <__i2b+0x1a>
 800a48a:	4b05      	ldr	r3, [pc, #20]	@ (800a4a0 <__i2b+0x24>)
 800a48c:	4805      	ldr	r0, [pc, #20]	@ (800a4a4 <__i2b+0x28>)
 800a48e:	f240 1145 	movw	r1, #325	@ 0x145
 800a492:	f001 ffbd 	bl	800c410 <__assert_func>
 800a496:	2301      	movs	r3, #1
 800a498:	6144      	str	r4, [r0, #20]
 800a49a:	6103      	str	r3, [r0, #16]
 800a49c:	bd10      	pop	{r4, pc}
 800a49e:	bf00      	nop
 800a4a0:	0800d9ef 	.word	0x0800d9ef
 800a4a4:	0800da00 	.word	0x0800da00

0800a4a8 <__multiply>:
 800a4a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4ac:	4617      	mov	r7, r2
 800a4ae:	690a      	ldr	r2, [r1, #16]
 800a4b0:	693b      	ldr	r3, [r7, #16]
 800a4b2:	429a      	cmp	r2, r3
 800a4b4:	bfa8      	it	ge
 800a4b6:	463b      	movge	r3, r7
 800a4b8:	4689      	mov	r9, r1
 800a4ba:	bfa4      	itt	ge
 800a4bc:	460f      	movge	r7, r1
 800a4be:	4699      	movge	r9, r3
 800a4c0:	693d      	ldr	r5, [r7, #16]
 800a4c2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a4c6:	68bb      	ldr	r3, [r7, #8]
 800a4c8:	6879      	ldr	r1, [r7, #4]
 800a4ca:	eb05 060a 	add.w	r6, r5, sl
 800a4ce:	42b3      	cmp	r3, r6
 800a4d0:	b085      	sub	sp, #20
 800a4d2:	bfb8      	it	lt
 800a4d4:	3101      	addlt	r1, #1
 800a4d6:	f7ff fe93 	bl	800a200 <_Balloc>
 800a4da:	b930      	cbnz	r0, 800a4ea <__multiply+0x42>
 800a4dc:	4602      	mov	r2, r0
 800a4de:	4b41      	ldr	r3, [pc, #260]	@ (800a5e4 <__multiply+0x13c>)
 800a4e0:	4841      	ldr	r0, [pc, #260]	@ (800a5e8 <__multiply+0x140>)
 800a4e2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a4e6:	f001 ff93 	bl	800c410 <__assert_func>
 800a4ea:	f100 0414 	add.w	r4, r0, #20
 800a4ee:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a4f2:	4623      	mov	r3, r4
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	4573      	cmp	r3, lr
 800a4f8:	d320      	bcc.n	800a53c <__multiply+0x94>
 800a4fa:	f107 0814 	add.w	r8, r7, #20
 800a4fe:	f109 0114 	add.w	r1, r9, #20
 800a502:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a506:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a50a:	9302      	str	r3, [sp, #8]
 800a50c:	1beb      	subs	r3, r5, r7
 800a50e:	3b15      	subs	r3, #21
 800a510:	f023 0303 	bic.w	r3, r3, #3
 800a514:	3304      	adds	r3, #4
 800a516:	3715      	adds	r7, #21
 800a518:	42bd      	cmp	r5, r7
 800a51a:	bf38      	it	cc
 800a51c:	2304      	movcc	r3, #4
 800a51e:	9301      	str	r3, [sp, #4]
 800a520:	9b02      	ldr	r3, [sp, #8]
 800a522:	9103      	str	r1, [sp, #12]
 800a524:	428b      	cmp	r3, r1
 800a526:	d80c      	bhi.n	800a542 <__multiply+0x9a>
 800a528:	2e00      	cmp	r6, #0
 800a52a:	dd03      	ble.n	800a534 <__multiply+0x8c>
 800a52c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a530:	2b00      	cmp	r3, #0
 800a532:	d055      	beq.n	800a5e0 <__multiply+0x138>
 800a534:	6106      	str	r6, [r0, #16]
 800a536:	b005      	add	sp, #20
 800a538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a53c:	f843 2b04 	str.w	r2, [r3], #4
 800a540:	e7d9      	b.n	800a4f6 <__multiply+0x4e>
 800a542:	f8b1 a000 	ldrh.w	sl, [r1]
 800a546:	f1ba 0f00 	cmp.w	sl, #0
 800a54a:	d01f      	beq.n	800a58c <__multiply+0xe4>
 800a54c:	46c4      	mov	ip, r8
 800a54e:	46a1      	mov	r9, r4
 800a550:	2700      	movs	r7, #0
 800a552:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a556:	f8d9 3000 	ldr.w	r3, [r9]
 800a55a:	fa1f fb82 	uxth.w	fp, r2
 800a55e:	b29b      	uxth	r3, r3
 800a560:	fb0a 330b 	mla	r3, sl, fp, r3
 800a564:	443b      	add	r3, r7
 800a566:	f8d9 7000 	ldr.w	r7, [r9]
 800a56a:	0c12      	lsrs	r2, r2, #16
 800a56c:	0c3f      	lsrs	r7, r7, #16
 800a56e:	fb0a 7202 	mla	r2, sl, r2, r7
 800a572:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a576:	b29b      	uxth	r3, r3
 800a578:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a57c:	4565      	cmp	r5, ip
 800a57e:	f849 3b04 	str.w	r3, [r9], #4
 800a582:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a586:	d8e4      	bhi.n	800a552 <__multiply+0xaa>
 800a588:	9b01      	ldr	r3, [sp, #4]
 800a58a:	50e7      	str	r7, [r4, r3]
 800a58c:	9b03      	ldr	r3, [sp, #12]
 800a58e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a592:	3104      	adds	r1, #4
 800a594:	f1b9 0f00 	cmp.w	r9, #0
 800a598:	d020      	beq.n	800a5dc <__multiply+0x134>
 800a59a:	6823      	ldr	r3, [r4, #0]
 800a59c:	4647      	mov	r7, r8
 800a59e:	46a4      	mov	ip, r4
 800a5a0:	f04f 0a00 	mov.w	sl, #0
 800a5a4:	f8b7 b000 	ldrh.w	fp, [r7]
 800a5a8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a5ac:	fb09 220b 	mla	r2, r9, fp, r2
 800a5b0:	4452      	add	r2, sl
 800a5b2:	b29b      	uxth	r3, r3
 800a5b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a5b8:	f84c 3b04 	str.w	r3, [ip], #4
 800a5bc:	f857 3b04 	ldr.w	r3, [r7], #4
 800a5c0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a5c4:	f8bc 3000 	ldrh.w	r3, [ip]
 800a5c8:	fb09 330a 	mla	r3, r9, sl, r3
 800a5cc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a5d0:	42bd      	cmp	r5, r7
 800a5d2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a5d6:	d8e5      	bhi.n	800a5a4 <__multiply+0xfc>
 800a5d8:	9a01      	ldr	r2, [sp, #4]
 800a5da:	50a3      	str	r3, [r4, r2]
 800a5dc:	3404      	adds	r4, #4
 800a5de:	e79f      	b.n	800a520 <__multiply+0x78>
 800a5e0:	3e01      	subs	r6, #1
 800a5e2:	e7a1      	b.n	800a528 <__multiply+0x80>
 800a5e4:	0800d9ef 	.word	0x0800d9ef
 800a5e8:	0800da00 	.word	0x0800da00

0800a5ec <__pow5mult>:
 800a5ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5f0:	4615      	mov	r5, r2
 800a5f2:	f012 0203 	ands.w	r2, r2, #3
 800a5f6:	4607      	mov	r7, r0
 800a5f8:	460e      	mov	r6, r1
 800a5fa:	d007      	beq.n	800a60c <__pow5mult+0x20>
 800a5fc:	4c25      	ldr	r4, [pc, #148]	@ (800a694 <__pow5mult+0xa8>)
 800a5fe:	3a01      	subs	r2, #1
 800a600:	2300      	movs	r3, #0
 800a602:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a606:	f7ff fe5d 	bl	800a2c4 <__multadd>
 800a60a:	4606      	mov	r6, r0
 800a60c:	10ad      	asrs	r5, r5, #2
 800a60e:	d03d      	beq.n	800a68c <__pow5mult+0xa0>
 800a610:	69fc      	ldr	r4, [r7, #28]
 800a612:	b97c      	cbnz	r4, 800a634 <__pow5mult+0x48>
 800a614:	2010      	movs	r0, #16
 800a616:	f7ff fd3d 	bl	800a094 <malloc>
 800a61a:	4602      	mov	r2, r0
 800a61c:	61f8      	str	r0, [r7, #28]
 800a61e:	b928      	cbnz	r0, 800a62c <__pow5mult+0x40>
 800a620:	4b1d      	ldr	r3, [pc, #116]	@ (800a698 <__pow5mult+0xac>)
 800a622:	481e      	ldr	r0, [pc, #120]	@ (800a69c <__pow5mult+0xb0>)
 800a624:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a628:	f001 fef2 	bl	800c410 <__assert_func>
 800a62c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a630:	6004      	str	r4, [r0, #0]
 800a632:	60c4      	str	r4, [r0, #12]
 800a634:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a638:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a63c:	b94c      	cbnz	r4, 800a652 <__pow5mult+0x66>
 800a63e:	f240 2171 	movw	r1, #625	@ 0x271
 800a642:	4638      	mov	r0, r7
 800a644:	f7ff ff1a 	bl	800a47c <__i2b>
 800a648:	2300      	movs	r3, #0
 800a64a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a64e:	4604      	mov	r4, r0
 800a650:	6003      	str	r3, [r0, #0]
 800a652:	f04f 0900 	mov.w	r9, #0
 800a656:	07eb      	lsls	r3, r5, #31
 800a658:	d50a      	bpl.n	800a670 <__pow5mult+0x84>
 800a65a:	4631      	mov	r1, r6
 800a65c:	4622      	mov	r2, r4
 800a65e:	4638      	mov	r0, r7
 800a660:	f7ff ff22 	bl	800a4a8 <__multiply>
 800a664:	4631      	mov	r1, r6
 800a666:	4680      	mov	r8, r0
 800a668:	4638      	mov	r0, r7
 800a66a:	f7ff fe09 	bl	800a280 <_Bfree>
 800a66e:	4646      	mov	r6, r8
 800a670:	106d      	asrs	r5, r5, #1
 800a672:	d00b      	beq.n	800a68c <__pow5mult+0xa0>
 800a674:	6820      	ldr	r0, [r4, #0]
 800a676:	b938      	cbnz	r0, 800a688 <__pow5mult+0x9c>
 800a678:	4622      	mov	r2, r4
 800a67a:	4621      	mov	r1, r4
 800a67c:	4638      	mov	r0, r7
 800a67e:	f7ff ff13 	bl	800a4a8 <__multiply>
 800a682:	6020      	str	r0, [r4, #0]
 800a684:	f8c0 9000 	str.w	r9, [r0]
 800a688:	4604      	mov	r4, r0
 800a68a:	e7e4      	b.n	800a656 <__pow5mult+0x6a>
 800a68c:	4630      	mov	r0, r6
 800a68e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a692:	bf00      	nop
 800a694:	0800db2c 	.word	0x0800db2c
 800a698:	0800d980 	.word	0x0800d980
 800a69c:	0800da00 	.word	0x0800da00

0800a6a0 <__lshift>:
 800a6a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6a4:	460c      	mov	r4, r1
 800a6a6:	6849      	ldr	r1, [r1, #4]
 800a6a8:	6923      	ldr	r3, [r4, #16]
 800a6aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a6ae:	68a3      	ldr	r3, [r4, #8]
 800a6b0:	4607      	mov	r7, r0
 800a6b2:	4691      	mov	r9, r2
 800a6b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a6b8:	f108 0601 	add.w	r6, r8, #1
 800a6bc:	42b3      	cmp	r3, r6
 800a6be:	db0b      	blt.n	800a6d8 <__lshift+0x38>
 800a6c0:	4638      	mov	r0, r7
 800a6c2:	f7ff fd9d 	bl	800a200 <_Balloc>
 800a6c6:	4605      	mov	r5, r0
 800a6c8:	b948      	cbnz	r0, 800a6de <__lshift+0x3e>
 800a6ca:	4602      	mov	r2, r0
 800a6cc:	4b28      	ldr	r3, [pc, #160]	@ (800a770 <__lshift+0xd0>)
 800a6ce:	4829      	ldr	r0, [pc, #164]	@ (800a774 <__lshift+0xd4>)
 800a6d0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a6d4:	f001 fe9c 	bl	800c410 <__assert_func>
 800a6d8:	3101      	adds	r1, #1
 800a6da:	005b      	lsls	r3, r3, #1
 800a6dc:	e7ee      	b.n	800a6bc <__lshift+0x1c>
 800a6de:	2300      	movs	r3, #0
 800a6e0:	f100 0114 	add.w	r1, r0, #20
 800a6e4:	f100 0210 	add.w	r2, r0, #16
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	4553      	cmp	r3, sl
 800a6ec:	db33      	blt.n	800a756 <__lshift+0xb6>
 800a6ee:	6920      	ldr	r0, [r4, #16]
 800a6f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a6f4:	f104 0314 	add.w	r3, r4, #20
 800a6f8:	f019 091f 	ands.w	r9, r9, #31
 800a6fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a700:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a704:	d02b      	beq.n	800a75e <__lshift+0xbe>
 800a706:	f1c9 0e20 	rsb	lr, r9, #32
 800a70a:	468a      	mov	sl, r1
 800a70c:	2200      	movs	r2, #0
 800a70e:	6818      	ldr	r0, [r3, #0]
 800a710:	fa00 f009 	lsl.w	r0, r0, r9
 800a714:	4310      	orrs	r0, r2
 800a716:	f84a 0b04 	str.w	r0, [sl], #4
 800a71a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a71e:	459c      	cmp	ip, r3
 800a720:	fa22 f20e 	lsr.w	r2, r2, lr
 800a724:	d8f3      	bhi.n	800a70e <__lshift+0x6e>
 800a726:	ebac 0304 	sub.w	r3, ip, r4
 800a72a:	3b15      	subs	r3, #21
 800a72c:	f023 0303 	bic.w	r3, r3, #3
 800a730:	3304      	adds	r3, #4
 800a732:	f104 0015 	add.w	r0, r4, #21
 800a736:	4560      	cmp	r0, ip
 800a738:	bf88      	it	hi
 800a73a:	2304      	movhi	r3, #4
 800a73c:	50ca      	str	r2, [r1, r3]
 800a73e:	b10a      	cbz	r2, 800a744 <__lshift+0xa4>
 800a740:	f108 0602 	add.w	r6, r8, #2
 800a744:	3e01      	subs	r6, #1
 800a746:	4638      	mov	r0, r7
 800a748:	612e      	str	r6, [r5, #16]
 800a74a:	4621      	mov	r1, r4
 800a74c:	f7ff fd98 	bl	800a280 <_Bfree>
 800a750:	4628      	mov	r0, r5
 800a752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a756:	f842 0f04 	str.w	r0, [r2, #4]!
 800a75a:	3301      	adds	r3, #1
 800a75c:	e7c5      	b.n	800a6ea <__lshift+0x4a>
 800a75e:	3904      	subs	r1, #4
 800a760:	f853 2b04 	ldr.w	r2, [r3], #4
 800a764:	f841 2f04 	str.w	r2, [r1, #4]!
 800a768:	459c      	cmp	ip, r3
 800a76a:	d8f9      	bhi.n	800a760 <__lshift+0xc0>
 800a76c:	e7ea      	b.n	800a744 <__lshift+0xa4>
 800a76e:	bf00      	nop
 800a770:	0800d9ef 	.word	0x0800d9ef
 800a774:	0800da00 	.word	0x0800da00

0800a778 <__mcmp>:
 800a778:	690a      	ldr	r2, [r1, #16]
 800a77a:	4603      	mov	r3, r0
 800a77c:	6900      	ldr	r0, [r0, #16]
 800a77e:	1a80      	subs	r0, r0, r2
 800a780:	b530      	push	{r4, r5, lr}
 800a782:	d10e      	bne.n	800a7a2 <__mcmp+0x2a>
 800a784:	3314      	adds	r3, #20
 800a786:	3114      	adds	r1, #20
 800a788:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a78c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a790:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a794:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a798:	4295      	cmp	r5, r2
 800a79a:	d003      	beq.n	800a7a4 <__mcmp+0x2c>
 800a79c:	d205      	bcs.n	800a7aa <__mcmp+0x32>
 800a79e:	f04f 30ff 	mov.w	r0, #4294967295
 800a7a2:	bd30      	pop	{r4, r5, pc}
 800a7a4:	42a3      	cmp	r3, r4
 800a7a6:	d3f3      	bcc.n	800a790 <__mcmp+0x18>
 800a7a8:	e7fb      	b.n	800a7a2 <__mcmp+0x2a>
 800a7aa:	2001      	movs	r0, #1
 800a7ac:	e7f9      	b.n	800a7a2 <__mcmp+0x2a>
	...

0800a7b0 <__mdiff>:
 800a7b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7b4:	4689      	mov	r9, r1
 800a7b6:	4606      	mov	r6, r0
 800a7b8:	4611      	mov	r1, r2
 800a7ba:	4648      	mov	r0, r9
 800a7bc:	4614      	mov	r4, r2
 800a7be:	f7ff ffdb 	bl	800a778 <__mcmp>
 800a7c2:	1e05      	subs	r5, r0, #0
 800a7c4:	d112      	bne.n	800a7ec <__mdiff+0x3c>
 800a7c6:	4629      	mov	r1, r5
 800a7c8:	4630      	mov	r0, r6
 800a7ca:	f7ff fd19 	bl	800a200 <_Balloc>
 800a7ce:	4602      	mov	r2, r0
 800a7d0:	b928      	cbnz	r0, 800a7de <__mdiff+0x2e>
 800a7d2:	4b3f      	ldr	r3, [pc, #252]	@ (800a8d0 <__mdiff+0x120>)
 800a7d4:	f240 2137 	movw	r1, #567	@ 0x237
 800a7d8:	483e      	ldr	r0, [pc, #248]	@ (800a8d4 <__mdiff+0x124>)
 800a7da:	f001 fe19 	bl	800c410 <__assert_func>
 800a7de:	2301      	movs	r3, #1
 800a7e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a7e4:	4610      	mov	r0, r2
 800a7e6:	b003      	add	sp, #12
 800a7e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7ec:	bfbc      	itt	lt
 800a7ee:	464b      	movlt	r3, r9
 800a7f0:	46a1      	movlt	r9, r4
 800a7f2:	4630      	mov	r0, r6
 800a7f4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a7f8:	bfba      	itte	lt
 800a7fa:	461c      	movlt	r4, r3
 800a7fc:	2501      	movlt	r5, #1
 800a7fe:	2500      	movge	r5, #0
 800a800:	f7ff fcfe 	bl	800a200 <_Balloc>
 800a804:	4602      	mov	r2, r0
 800a806:	b918      	cbnz	r0, 800a810 <__mdiff+0x60>
 800a808:	4b31      	ldr	r3, [pc, #196]	@ (800a8d0 <__mdiff+0x120>)
 800a80a:	f240 2145 	movw	r1, #581	@ 0x245
 800a80e:	e7e3      	b.n	800a7d8 <__mdiff+0x28>
 800a810:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a814:	6926      	ldr	r6, [r4, #16]
 800a816:	60c5      	str	r5, [r0, #12]
 800a818:	f109 0310 	add.w	r3, r9, #16
 800a81c:	f109 0514 	add.w	r5, r9, #20
 800a820:	f104 0e14 	add.w	lr, r4, #20
 800a824:	f100 0b14 	add.w	fp, r0, #20
 800a828:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a82c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a830:	9301      	str	r3, [sp, #4]
 800a832:	46d9      	mov	r9, fp
 800a834:	f04f 0c00 	mov.w	ip, #0
 800a838:	9b01      	ldr	r3, [sp, #4]
 800a83a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a83e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a842:	9301      	str	r3, [sp, #4]
 800a844:	fa1f f38a 	uxth.w	r3, sl
 800a848:	4619      	mov	r1, r3
 800a84a:	b283      	uxth	r3, r0
 800a84c:	1acb      	subs	r3, r1, r3
 800a84e:	0c00      	lsrs	r0, r0, #16
 800a850:	4463      	add	r3, ip
 800a852:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a856:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a85a:	b29b      	uxth	r3, r3
 800a85c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a860:	4576      	cmp	r6, lr
 800a862:	f849 3b04 	str.w	r3, [r9], #4
 800a866:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a86a:	d8e5      	bhi.n	800a838 <__mdiff+0x88>
 800a86c:	1b33      	subs	r3, r6, r4
 800a86e:	3b15      	subs	r3, #21
 800a870:	f023 0303 	bic.w	r3, r3, #3
 800a874:	3415      	adds	r4, #21
 800a876:	3304      	adds	r3, #4
 800a878:	42a6      	cmp	r6, r4
 800a87a:	bf38      	it	cc
 800a87c:	2304      	movcc	r3, #4
 800a87e:	441d      	add	r5, r3
 800a880:	445b      	add	r3, fp
 800a882:	461e      	mov	r6, r3
 800a884:	462c      	mov	r4, r5
 800a886:	4544      	cmp	r4, r8
 800a888:	d30e      	bcc.n	800a8a8 <__mdiff+0xf8>
 800a88a:	f108 0103 	add.w	r1, r8, #3
 800a88e:	1b49      	subs	r1, r1, r5
 800a890:	f021 0103 	bic.w	r1, r1, #3
 800a894:	3d03      	subs	r5, #3
 800a896:	45a8      	cmp	r8, r5
 800a898:	bf38      	it	cc
 800a89a:	2100      	movcc	r1, #0
 800a89c:	440b      	add	r3, r1
 800a89e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a8a2:	b191      	cbz	r1, 800a8ca <__mdiff+0x11a>
 800a8a4:	6117      	str	r7, [r2, #16]
 800a8a6:	e79d      	b.n	800a7e4 <__mdiff+0x34>
 800a8a8:	f854 1b04 	ldr.w	r1, [r4], #4
 800a8ac:	46e6      	mov	lr, ip
 800a8ae:	0c08      	lsrs	r0, r1, #16
 800a8b0:	fa1c fc81 	uxtah	ip, ip, r1
 800a8b4:	4471      	add	r1, lr
 800a8b6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a8ba:	b289      	uxth	r1, r1
 800a8bc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a8c0:	f846 1b04 	str.w	r1, [r6], #4
 800a8c4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a8c8:	e7dd      	b.n	800a886 <__mdiff+0xd6>
 800a8ca:	3f01      	subs	r7, #1
 800a8cc:	e7e7      	b.n	800a89e <__mdiff+0xee>
 800a8ce:	bf00      	nop
 800a8d0:	0800d9ef 	.word	0x0800d9ef
 800a8d4:	0800da00 	.word	0x0800da00

0800a8d8 <__ulp>:
 800a8d8:	b082      	sub	sp, #8
 800a8da:	ed8d 0b00 	vstr	d0, [sp]
 800a8de:	9a01      	ldr	r2, [sp, #4]
 800a8e0:	4b0f      	ldr	r3, [pc, #60]	@ (800a920 <__ulp+0x48>)
 800a8e2:	4013      	ands	r3, r2
 800a8e4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	dc08      	bgt.n	800a8fe <__ulp+0x26>
 800a8ec:	425b      	negs	r3, r3
 800a8ee:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a8f2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a8f6:	da04      	bge.n	800a902 <__ulp+0x2a>
 800a8f8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a8fc:	4113      	asrs	r3, r2
 800a8fe:	2200      	movs	r2, #0
 800a900:	e008      	b.n	800a914 <__ulp+0x3c>
 800a902:	f1a2 0314 	sub.w	r3, r2, #20
 800a906:	2b1e      	cmp	r3, #30
 800a908:	bfda      	itte	le
 800a90a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a90e:	40da      	lsrle	r2, r3
 800a910:	2201      	movgt	r2, #1
 800a912:	2300      	movs	r3, #0
 800a914:	4619      	mov	r1, r3
 800a916:	4610      	mov	r0, r2
 800a918:	ec41 0b10 	vmov	d0, r0, r1
 800a91c:	b002      	add	sp, #8
 800a91e:	4770      	bx	lr
 800a920:	7ff00000 	.word	0x7ff00000

0800a924 <__b2d>:
 800a924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a928:	6906      	ldr	r6, [r0, #16]
 800a92a:	f100 0814 	add.w	r8, r0, #20
 800a92e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a932:	1f37      	subs	r7, r6, #4
 800a934:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a938:	4610      	mov	r0, r2
 800a93a:	f7ff fd53 	bl	800a3e4 <__hi0bits>
 800a93e:	f1c0 0320 	rsb	r3, r0, #32
 800a942:	280a      	cmp	r0, #10
 800a944:	600b      	str	r3, [r1, #0]
 800a946:	491b      	ldr	r1, [pc, #108]	@ (800a9b4 <__b2d+0x90>)
 800a948:	dc15      	bgt.n	800a976 <__b2d+0x52>
 800a94a:	f1c0 0c0b 	rsb	ip, r0, #11
 800a94e:	fa22 f30c 	lsr.w	r3, r2, ip
 800a952:	45b8      	cmp	r8, r7
 800a954:	ea43 0501 	orr.w	r5, r3, r1
 800a958:	bf34      	ite	cc
 800a95a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a95e:	2300      	movcs	r3, #0
 800a960:	3015      	adds	r0, #21
 800a962:	fa02 f000 	lsl.w	r0, r2, r0
 800a966:	fa23 f30c 	lsr.w	r3, r3, ip
 800a96a:	4303      	orrs	r3, r0
 800a96c:	461c      	mov	r4, r3
 800a96e:	ec45 4b10 	vmov	d0, r4, r5
 800a972:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a976:	45b8      	cmp	r8, r7
 800a978:	bf3a      	itte	cc
 800a97a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a97e:	f1a6 0708 	subcc.w	r7, r6, #8
 800a982:	2300      	movcs	r3, #0
 800a984:	380b      	subs	r0, #11
 800a986:	d012      	beq.n	800a9ae <__b2d+0x8a>
 800a988:	f1c0 0120 	rsb	r1, r0, #32
 800a98c:	fa23 f401 	lsr.w	r4, r3, r1
 800a990:	4082      	lsls	r2, r0
 800a992:	4322      	orrs	r2, r4
 800a994:	4547      	cmp	r7, r8
 800a996:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a99a:	bf8c      	ite	hi
 800a99c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a9a0:	2200      	movls	r2, #0
 800a9a2:	4083      	lsls	r3, r0
 800a9a4:	40ca      	lsrs	r2, r1
 800a9a6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a9aa:	4313      	orrs	r3, r2
 800a9ac:	e7de      	b.n	800a96c <__b2d+0x48>
 800a9ae:	ea42 0501 	orr.w	r5, r2, r1
 800a9b2:	e7db      	b.n	800a96c <__b2d+0x48>
 800a9b4:	3ff00000 	.word	0x3ff00000

0800a9b8 <__d2b>:
 800a9b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a9bc:	460f      	mov	r7, r1
 800a9be:	2101      	movs	r1, #1
 800a9c0:	ec59 8b10 	vmov	r8, r9, d0
 800a9c4:	4616      	mov	r6, r2
 800a9c6:	f7ff fc1b 	bl	800a200 <_Balloc>
 800a9ca:	4604      	mov	r4, r0
 800a9cc:	b930      	cbnz	r0, 800a9dc <__d2b+0x24>
 800a9ce:	4602      	mov	r2, r0
 800a9d0:	4b23      	ldr	r3, [pc, #140]	@ (800aa60 <__d2b+0xa8>)
 800a9d2:	4824      	ldr	r0, [pc, #144]	@ (800aa64 <__d2b+0xac>)
 800a9d4:	f240 310f 	movw	r1, #783	@ 0x30f
 800a9d8:	f001 fd1a 	bl	800c410 <__assert_func>
 800a9dc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a9e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a9e4:	b10d      	cbz	r5, 800a9ea <__d2b+0x32>
 800a9e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a9ea:	9301      	str	r3, [sp, #4]
 800a9ec:	f1b8 0300 	subs.w	r3, r8, #0
 800a9f0:	d023      	beq.n	800aa3a <__d2b+0x82>
 800a9f2:	4668      	mov	r0, sp
 800a9f4:	9300      	str	r3, [sp, #0]
 800a9f6:	f7ff fd14 	bl	800a422 <__lo0bits>
 800a9fa:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a9fe:	b1d0      	cbz	r0, 800aa36 <__d2b+0x7e>
 800aa00:	f1c0 0320 	rsb	r3, r0, #32
 800aa04:	fa02 f303 	lsl.w	r3, r2, r3
 800aa08:	430b      	orrs	r3, r1
 800aa0a:	40c2      	lsrs	r2, r0
 800aa0c:	6163      	str	r3, [r4, #20]
 800aa0e:	9201      	str	r2, [sp, #4]
 800aa10:	9b01      	ldr	r3, [sp, #4]
 800aa12:	61a3      	str	r3, [r4, #24]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	bf0c      	ite	eq
 800aa18:	2201      	moveq	r2, #1
 800aa1a:	2202      	movne	r2, #2
 800aa1c:	6122      	str	r2, [r4, #16]
 800aa1e:	b1a5      	cbz	r5, 800aa4a <__d2b+0x92>
 800aa20:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800aa24:	4405      	add	r5, r0
 800aa26:	603d      	str	r5, [r7, #0]
 800aa28:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800aa2c:	6030      	str	r0, [r6, #0]
 800aa2e:	4620      	mov	r0, r4
 800aa30:	b003      	add	sp, #12
 800aa32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa36:	6161      	str	r1, [r4, #20]
 800aa38:	e7ea      	b.n	800aa10 <__d2b+0x58>
 800aa3a:	a801      	add	r0, sp, #4
 800aa3c:	f7ff fcf1 	bl	800a422 <__lo0bits>
 800aa40:	9b01      	ldr	r3, [sp, #4]
 800aa42:	6163      	str	r3, [r4, #20]
 800aa44:	3020      	adds	r0, #32
 800aa46:	2201      	movs	r2, #1
 800aa48:	e7e8      	b.n	800aa1c <__d2b+0x64>
 800aa4a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800aa4e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800aa52:	6038      	str	r0, [r7, #0]
 800aa54:	6918      	ldr	r0, [r3, #16]
 800aa56:	f7ff fcc5 	bl	800a3e4 <__hi0bits>
 800aa5a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800aa5e:	e7e5      	b.n	800aa2c <__d2b+0x74>
 800aa60:	0800d9ef 	.word	0x0800d9ef
 800aa64:	0800da00 	.word	0x0800da00

0800aa68 <__ratio>:
 800aa68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa6c:	b085      	sub	sp, #20
 800aa6e:	e9cd 1000 	strd	r1, r0, [sp]
 800aa72:	a902      	add	r1, sp, #8
 800aa74:	f7ff ff56 	bl	800a924 <__b2d>
 800aa78:	9800      	ldr	r0, [sp, #0]
 800aa7a:	a903      	add	r1, sp, #12
 800aa7c:	ec55 4b10 	vmov	r4, r5, d0
 800aa80:	f7ff ff50 	bl	800a924 <__b2d>
 800aa84:	9b01      	ldr	r3, [sp, #4]
 800aa86:	6919      	ldr	r1, [r3, #16]
 800aa88:	9b00      	ldr	r3, [sp, #0]
 800aa8a:	691b      	ldr	r3, [r3, #16]
 800aa8c:	1ac9      	subs	r1, r1, r3
 800aa8e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800aa92:	1a9b      	subs	r3, r3, r2
 800aa94:	ec5b ab10 	vmov	sl, fp, d0
 800aa98:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	bfce      	itee	gt
 800aaa0:	462a      	movgt	r2, r5
 800aaa2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800aaa6:	465a      	movle	r2, fp
 800aaa8:	462f      	mov	r7, r5
 800aaaa:	46d9      	mov	r9, fp
 800aaac:	bfcc      	ite	gt
 800aaae:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800aab2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800aab6:	464b      	mov	r3, r9
 800aab8:	4652      	mov	r2, sl
 800aaba:	4620      	mov	r0, r4
 800aabc:	4639      	mov	r1, r7
 800aabe:	f7f5 fec5 	bl	800084c <__aeabi_ddiv>
 800aac2:	ec41 0b10 	vmov	d0, r0, r1
 800aac6:	b005      	add	sp, #20
 800aac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aacc <__copybits>:
 800aacc:	3901      	subs	r1, #1
 800aace:	b570      	push	{r4, r5, r6, lr}
 800aad0:	1149      	asrs	r1, r1, #5
 800aad2:	6914      	ldr	r4, [r2, #16]
 800aad4:	3101      	adds	r1, #1
 800aad6:	f102 0314 	add.w	r3, r2, #20
 800aada:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800aade:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800aae2:	1f05      	subs	r5, r0, #4
 800aae4:	42a3      	cmp	r3, r4
 800aae6:	d30c      	bcc.n	800ab02 <__copybits+0x36>
 800aae8:	1aa3      	subs	r3, r4, r2
 800aaea:	3b11      	subs	r3, #17
 800aaec:	f023 0303 	bic.w	r3, r3, #3
 800aaf0:	3211      	adds	r2, #17
 800aaf2:	42a2      	cmp	r2, r4
 800aaf4:	bf88      	it	hi
 800aaf6:	2300      	movhi	r3, #0
 800aaf8:	4418      	add	r0, r3
 800aafa:	2300      	movs	r3, #0
 800aafc:	4288      	cmp	r0, r1
 800aafe:	d305      	bcc.n	800ab0c <__copybits+0x40>
 800ab00:	bd70      	pop	{r4, r5, r6, pc}
 800ab02:	f853 6b04 	ldr.w	r6, [r3], #4
 800ab06:	f845 6f04 	str.w	r6, [r5, #4]!
 800ab0a:	e7eb      	b.n	800aae4 <__copybits+0x18>
 800ab0c:	f840 3b04 	str.w	r3, [r0], #4
 800ab10:	e7f4      	b.n	800aafc <__copybits+0x30>

0800ab12 <__any_on>:
 800ab12:	f100 0214 	add.w	r2, r0, #20
 800ab16:	6900      	ldr	r0, [r0, #16]
 800ab18:	114b      	asrs	r3, r1, #5
 800ab1a:	4298      	cmp	r0, r3
 800ab1c:	b510      	push	{r4, lr}
 800ab1e:	db11      	blt.n	800ab44 <__any_on+0x32>
 800ab20:	dd0a      	ble.n	800ab38 <__any_on+0x26>
 800ab22:	f011 011f 	ands.w	r1, r1, #31
 800ab26:	d007      	beq.n	800ab38 <__any_on+0x26>
 800ab28:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ab2c:	fa24 f001 	lsr.w	r0, r4, r1
 800ab30:	fa00 f101 	lsl.w	r1, r0, r1
 800ab34:	428c      	cmp	r4, r1
 800ab36:	d10b      	bne.n	800ab50 <__any_on+0x3e>
 800ab38:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ab3c:	4293      	cmp	r3, r2
 800ab3e:	d803      	bhi.n	800ab48 <__any_on+0x36>
 800ab40:	2000      	movs	r0, #0
 800ab42:	bd10      	pop	{r4, pc}
 800ab44:	4603      	mov	r3, r0
 800ab46:	e7f7      	b.n	800ab38 <__any_on+0x26>
 800ab48:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ab4c:	2900      	cmp	r1, #0
 800ab4e:	d0f5      	beq.n	800ab3c <__any_on+0x2a>
 800ab50:	2001      	movs	r0, #1
 800ab52:	e7f6      	b.n	800ab42 <__any_on+0x30>

0800ab54 <sulp>:
 800ab54:	b570      	push	{r4, r5, r6, lr}
 800ab56:	4604      	mov	r4, r0
 800ab58:	460d      	mov	r5, r1
 800ab5a:	ec45 4b10 	vmov	d0, r4, r5
 800ab5e:	4616      	mov	r6, r2
 800ab60:	f7ff feba 	bl	800a8d8 <__ulp>
 800ab64:	ec51 0b10 	vmov	r0, r1, d0
 800ab68:	b17e      	cbz	r6, 800ab8a <sulp+0x36>
 800ab6a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ab6e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	dd09      	ble.n	800ab8a <sulp+0x36>
 800ab76:	051b      	lsls	r3, r3, #20
 800ab78:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800ab7c:	2400      	movs	r4, #0
 800ab7e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800ab82:	4622      	mov	r2, r4
 800ab84:	462b      	mov	r3, r5
 800ab86:	f7f5 fd37 	bl	80005f8 <__aeabi_dmul>
 800ab8a:	ec41 0b10 	vmov	d0, r0, r1
 800ab8e:	bd70      	pop	{r4, r5, r6, pc}

0800ab90 <_strtod_l>:
 800ab90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab94:	b09f      	sub	sp, #124	@ 0x7c
 800ab96:	460c      	mov	r4, r1
 800ab98:	9217      	str	r2, [sp, #92]	@ 0x5c
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	921a      	str	r2, [sp, #104]	@ 0x68
 800ab9e:	9005      	str	r0, [sp, #20]
 800aba0:	f04f 0a00 	mov.w	sl, #0
 800aba4:	f04f 0b00 	mov.w	fp, #0
 800aba8:	460a      	mov	r2, r1
 800abaa:	9219      	str	r2, [sp, #100]	@ 0x64
 800abac:	7811      	ldrb	r1, [r2, #0]
 800abae:	292b      	cmp	r1, #43	@ 0x2b
 800abb0:	d04a      	beq.n	800ac48 <_strtod_l+0xb8>
 800abb2:	d838      	bhi.n	800ac26 <_strtod_l+0x96>
 800abb4:	290d      	cmp	r1, #13
 800abb6:	d832      	bhi.n	800ac1e <_strtod_l+0x8e>
 800abb8:	2908      	cmp	r1, #8
 800abba:	d832      	bhi.n	800ac22 <_strtod_l+0x92>
 800abbc:	2900      	cmp	r1, #0
 800abbe:	d03b      	beq.n	800ac38 <_strtod_l+0xa8>
 800abc0:	2200      	movs	r2, #0
 800abc2:	920e      	str	r2, [sp, #56]	@ 0x38
 800abc4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800abc6:	782a      	ldrb	r2, [r5, #0]
 800abc8:	2a30      	cmp	r2, #48	@ 0x30
 800abca:	f040 80b2 	bne.w	800ad32 <_strtod_l+0x1a2>
 800abce:	786a      	ldrb	r2, [r5, #1]
 800abd0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800abd4:	2a58      	cmp	r2, #88	@ 0x58
 800abd6:	d16e      	bne.n	800acb6 <_strtod_l+0x126>
 800abd8:	9302      	str	r3, [sp, #8]
 800abda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800abdc:	9301      	str	r3, [sp, #4]
 800abde:	ab1a      	add	r3, sp, #104	@ 0x68
 800abe0:	9300      	str	r3, [sp, #0]
 800abe2:	4a8f      	ldr	r2, [pc, #572]	@ (800ae20 <_strtod_l+0x290>)
 800abe4:	9805      	ldr	r0, [sp, #20]
 800abe6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800abe8:	a919      	add	r1, sp, #100	@ 0x64
 800abea:	f001 fcab 	bl	800c544 <__gethex>
 800abee:	f010 060f 	ands.w	r6, r0, #15
 800abf2:	4604      	mov	r4, r0
 800abf4:	d005      	beq.n	800ac02 <_strtod_l+0x72>
 800abf6:	2e06      	cmp	r6, #6
 800abf8:	d128      	bne.n	800ac4c <_strtod_l+0xbc>
 800abfa:	3501      	adds	r5, #1
 800abfc:	2300      	movs	r3, #0
 800abfe:	9519      	str	r5, [sp, #100]	@ 0x64
 800ac00:	930e      	str	r3, [sp, #56]	@ 0x38
 800ac02:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	f040 858e 	bne.w	800b726 <_strtod_l+0xb96>
 800ac0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ac0c:	b1cb      	cbz	r3, 800ac42 <_strtod_l+0xb2>
 800ac0e:	4652      	mov	r2, sl
 800ac10:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800ac14:	ec43 2b10 	vmov	d0, r2, r3
 800ac18:	b01f      	add	sp, #124	@ 0x7c
 800ac1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac1e:	2920      	cmp	r1, #32
 800ac20:	d1ce      	bne.n	800abc0 <_strtod_l+0x30>
 800ac22:	3201      	adds	r2, #1
 800ac24:	e7c1      	b.n	800abaa <_strtod_l+0x1a>
 800ac26:	292d      	cmp	r1, #45	@ 0x2d
 800ac28:	d1ca      	bne.n	800abc0 <_strtod_l+0x30>
 800ac2a:	2101      	movs	r1, #1
 800ac2c:	910e      	str	r1, [sp, #56]	@ 0x38
 800ac2e:	1c51      	adds	r1, r2, #1
 800ac30:	9119      	str	r1, [sp, #100]	@ 0x64
 800ac32:	7852      	ldrb	r2, [r2, #1]
 800ac34:	2a00      	cmp	r2, #0
 800ac36:	d1c5      	bne.n	800abc4 <_strtod_l+0x34>
 800ac38:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ac3a:	9419      	str	r4, [sp, #100]	@ 0x64
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	f040 8570 	bne.w	800b722 <_strtod_l+0xb92>
 800ac42:	4652      	mov	r2, sl
 800ac44:	465b      	mov	r3, fp
 800ac46:	e7e5      	b.n	800ac14 <_strtod_l+0x84>
 800ac48:	2100      	movs	r1, #0
 800ac4a:	e7ef      	b.n	800ac2c <_strtod_l+0x9c>
 800ac4c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ac4e:	b13a      	cbz	r2, 800ac60 <_strtod_l+0xd0>
 800ac50:	2135      	movs	r1, #53	@ 0x35
 800ac52:	a81c      	add	r0, sp, #112	@ 0x70
 800ac54:	f7ff ff3a 	bl	800aacc <__copybits>
 800ac58:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ac5a:	9805      	ldr	r0, [sp, #20]
 800ac5c:	f7ff fb10 	bl	800a280 <_Bfree>
 800ac60:	3e01      	subs	r6, #1
 800ac62:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800ac64:	2e04      	cmp	r6, #4
 800ac66:	d806      	bhi.n	800ac76 <_strtod_l+0xe6>
 800ac68:	e8df f006 	tbb	[pc, r6]
 800ac6c:	201d0314 	.word	0x201d0314
 800ac70:	14          	.byte	0x14
 800ac71:	00          	.byte	0x00
 800ac72:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800ac76:	05e1      	lsls	r1, r4, #23
 800ac78:	bf48      	it	mi
 800ac7a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800ac7e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ac82:	0d1b      	lsrs	r3, r3, #20
 800ac84:	051b      	lsls	r3, r3, #20
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d1bb      	bne.n	800ac02 <_strtod_l+0x72>
 800ac8a:	f7fe fb1d 	bl	80092c8 <__errno>
 800ac8e:	2322      	movs	r3, #34	@ 0x22
 800ac90:	6003      	str	r3, [r0, #0]
 800ac92:	e7b6      	b.n	800ac02 <_strtod_l+0x72>
 800ac94:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800ac98:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ac9c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800aca0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800aca4:	e7e7      	b.n	800ac76 <_strtod_l+0xe6>
 800aca6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800ae28 <_strtod_l+0x298>
 800acaa:	e7e4      	b.n	800ac76 <_strtod_l+0xe6>
 800acac:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800acb0:	f04f 3aff 	mov.w	sl, #4294967295
 800acb4:	e7df      	b.n	800ac76 <_strtod_l+0xe6>
 800acb6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800acb8:	1c5a      	adds	r2, r3, #1
 800acba:	9219      	str	r2, [sp, #100]	@ 0x64
 800acbc:	785b      	ldrb	r3, [r3, #1]
 800acbe:	2b30      	cmp	r3, #48	@ 0x30
 800acc0:	d0f9      	beq.n	800acb6 <_strtod_l+0x126>
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d09d      	beq.n	800ac02 <_strtod_l+0x72>
 800acc6:	2301      	movs	r3, #1
 800acc8:	2700      	movs	r7, #0
 800acca:	9308      	str	r3, [sp, #32]
 800accc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800acce:	930c      	str	r3, [sp, #48]	@ 0x30
 800acd0:	970b      	str	r7, [sp, #44]	@ 0x2c
 800acd2:	46b9      	mov	r9, r7
 800acd4:	220a      	movs	r2, #10
 800acd6:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800acd8:	7805      	ldrb	r5, [r0, #0]
 800acda:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800acde:	b2d9      	uxtb	r1, r3
 800ace0:	2909      	cmp	r1, #9
 800ace2:	d928      	bls.n	800ad36 <_strtod_l+0x1a6>
 800ace4:	494f      	ldr	r1, [pc, #316]	@ (800ae24 <_strtod_l+0x294>)
 800ace6:	2201      	movs	r2, #1
 800ace8:	f001 fb67 	bl	800c3ba <strncmp>
 800acec:	2800      	cmp	r0, #0
 800acee:	d032      	beq.n	800ad56 <_strtod_l+0x1c6>
 800acf0:	2000      	movs	r0, #0
 800acf2:	462a      	mov	r2, r5
 800acf4:	900a      	str	r0, [sp, #40]	@ 0x28
 800acf6:	464d      	mov	r5, r9
 800acf8:	4603      	mov	r3, r0
 800acfa:	2a65      	cmp	r2, #101	@ 0x65
 800acfc:	d001      	beq.n	800ad02 <_strtod_l+0x172>
 800acfe:	2a45      	cmp	r2, #69	@ 0x45
 800ad00:	d114      	bne.n	800ad2c <_strtod_l+0x19c>
 800ad02:	b91d      	cbnz	r5, 800ad0c <_strtod_l+0x17c>
 800ad04:	9a08      	ldr	r2, [sp, #32]
 800ad06:	4302      	orrs	r2, r0
 800ad08:	d096      	beq.n	800ac38 <_strtod_l+0xa8>
 800ad0a:	2500      	movs	r5, #0
 800ad0c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800ad0e:	1c62      	adds	r2, r4, #1
 800ad10:	9219      	str	r2, [sp, #100]	@ 0x64
 800ad12:	7862      	ldrb	r2, [r4, #1]
 800ad14:	2a2b      	cmp	r2, #43	@ 0x2b
 800ad16:	d07a      	beq.n	800ae0e <_strtod_l+0x27e>
 800ad18:	2a2d      	cmp	r2, #45	@ 0x2d
 800ad1a:	d07e      	beq.n	800ae1a <_strtod_l+0x28a>
 800ad1c:	f04f 0c00 	mov.w	ip, #0
 800ad20:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800ad24:	2909      	cmp	r1, #9
 800ad26:	f240 8085 	bls.w	800ae34 <_strtod_l+0x2a4>
 800ad2a:	9419      	str	r4, [sp, #100]	@ 0x64
 800ad2c:	f04f 0800 	mov.w	r8, #0
 800ad30:	e0a5      	b.n	800ae7e <_strtod_l+0x2ee>
 800ad32:	2300      	movs	r3, #0
 800ad34:	e7c8      	b.n	800acc8 <_strtod_l+0x138>
 800ad36:	f1b9 0f08 	cmp.w	r9, #8
 800ad3a:	bfd8      	it	le
 800ad3c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800ad3e:	f100 0001 	add.w	r0, r0, #1
 800ad42:	bfda      	itte	le
 800ad44:	fb02 3301 	mlale	r3, r2, r1, r3
 800ad48:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800ad4a:	fb02 3707 	mlagt	r7, r2, r7, r3
 800ad4e:	f109 0901 	add.w	r9, r9, #1
 800ad52:	9019      	str	r0, [sp, #100]	@ 0x64
 800ad54:	e7bf      	b.n	800acd6 <_strtod_l+0x146>
 800ad56:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ad58:	1c5a      	adds	r2, r3, #1
 800ad5a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ad5c:	785a      	ldrb	r2, [r3, #1]
 800ad5e:	f1b9 0f00 	cmp.w	r9, #0
 800ad62:	d03b      	beq.n	800addc <_strtod_l+0x24c>
 800ad64:	900a      	str	r0, [sp, #40]	@ 0x28
 800ad66:	464d      	mov	r5, r9
 800ad68:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800ad6c:	2b09      	cmp	r3, #9
 800ad6e:	d912      	bls.n	800ad96 <_strtod_l+0x206>
 800ad70:	2301      	movs	r3, #1
 800ad72:	e7c2      	b.n	800acfa <_strtod_l+0x16a>
 800ad74:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ad76:	1c5a      	adds	r2, r3, #1
 800ad78:	9219      	str	r2, [sp, #100]	@ 0x64
 800ad7a:	785a      	ldrb	r2, [r3, #1]
 800ad7c:	3001      	adds	r0, #1
 800ad7e:	2a30      	cmp	r2, #48	@ 0x30
 800ad80:	d0f8      	beq.n	800ad74 <_strtod_l+0x1e4>
 800ad82:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ad86:	2b08      	cmp	r3, #8
 800ad88:	f200 84d2 	bhi.w	800b730 <_strtod_l+0xba0>
 800ad8c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ad8e:	900a      	str	r0, [sp, #40]	@ 0x28
 800ad90:	2000      	movs	r0, #0
 800ad92:	930c      	str	r3, [sp, #48]	@ 0x30
 800ad94:	4605      	mov	r5, r0
 800ad96:	3a30      	subs	r2, #48	@ 0x30
 800ad98:	f100 0301 	add.w	r3, r0, #1
 800ad9c:	d018      	beq.n	800add0 <_strtod_l+0x240>
 800ad9e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ada0:	4419      	add	r1, r3
 800ada2:	910a      	str	r1, [sp, #40]	@ 0x28
 800ada4:	462e      	mov	r6, r5
 800ada6:	f04f 0e0a 	mov.w	lr, #10
 800adaa:	1c71      	adds	r1, r6, #1
 800adac:	eba1 0c05 	sub.w	ip, r1, r5
 800adb0:	4563      	cmp	r3, ip
 800adb2:	dc15      	bgt.n	800ade0 <_strtod_l+0x250>
 800adb4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800adb8:	182b      	adds	r3, r5, r0
 800adba:	2b08      	cmp	r3, #8
 800adbc:	f105 0501 	add.w	r5, r5, #1
 800adc0:	4405      	add	r5, r0
 800adc2:	dc1a      	bgt.n	800adfa <_strtod_l+0x26a>
 800adc4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800adc6:	230a      	movs	r3, #10
 800adc8:	fb03 2301 	mla	r3, r3, r1, r2
 800adcc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800adce:	2300      	movs	r3, #0
 800add0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800add2:	1c51      	adds	r1, r2, #1
 800add4:	9119      	str	r1, [sp, #100]	@ 0x64
 800add6:	7852      	ldrb	r2, [r2, #1]
 800add8:	4618      	mov	r0, r3
 800adda:	e7c5      	b.n	800ad68 <_strtod_l+0x1d8>
 800addc:	4648      	mov	r0, r9
 800adde:	e7ce      	b.n	800ad7e <_strtod_l+0x1ee>
 800ade0:	2e08      	cmp	r6, #8
 800ade2:	dc05      	bgt.n	800adf0 <_strtod_l+0x260>
 800ade4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800ade6:	fb0e f606 	mul.w	r6, lr, r6
 800adea:	960b      	str	r6, [sp, #44]	@ 0x2c
 800adec:	460e      	mov	r6, r1
 800adee:	e7dc      	b.n	800adaa <_strtod_l+0x21a>
 800adf0:	2910      	cmp	r1, #16
 800adf2:	bfd8      	it	le
 800adf4:	fb0e f707 	mulle.w	r7, lr, r7
 800adf8:	e7f8      	b.n	800adec <_strtod_l+0x25c>
 800adfa:	2b0f      	cmp	r3, #15
 800adfc:	bfdc      	itt	le
 800adfe:	230a      	movle	r3, #10
 800ae00:	fb03 2707 	mlale	r7, r3, r7, r2
 800ae04:	e7e3      	b.n	800adce <_strtod_l+0x23e>
 800ae06:	2300      	movs	r3, #0
 800ae08:	930a      	str	r3, [sp, #40]	@ 0x28
 800ae0a:	2301      	movs	r3, #1
 800ae0c:	e77a      	b.n	800ad04 <_strtod_l+0x174>
 800ae0e:	f04f 0c00 	mov.w	ip, #0
 800ae12:	1ca2      	adds	r2, r4, #2
 800ae14:	9219      	str	r2, [sp, #100]	@ 0x64
 800ae16:	78a2      	ldrb	r2, [r4, #2]
 800ae18:	e782      	b.n	800ad20 <_strtod_l+0x190>
 800ae1a:	f04f 0c01 	mov.w	ip, #1
 800ae1e:	e7f8      	b.n	800ae12 <_strtod_l+0x282>
 800ae20:	0800dc3c 	.word	0x0800dc3c
 800ae24:	0800da59 	.word	0x0800da59
 800ae28:	7ff00000 	.word	0x7ff00000
 800ae2c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ae2e:	1c51      	adds	r1, r2, #1
 800ae30:	9119      	str	r1, [sp, #100]	@ 0x64
 800ae32:	7852      	ldrb	r2, [r2, #1]
 800ae34:	2a30      	cmp	r2, #48	@ 0x30
 800ae36:	d0f9      	beq.n	800ae2c <_strtod_l+0x29c>
 800ae38:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800ae3c:	2908      	cmp	r1, #8
 800ae3e:	f63f af75 	bhi.w	800ad2c <_strtod_l+0x19c>
 800ae42:	3a30      	subs	r2, #48	@ 0x30
 800ae44:	9209      	str	r2, [sp, #36]	@ 0x24
 800ae46:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ae48:	920f      	str	r2, [sp, #60]	@ 0x3c
 800ae4a:	f04f 080a 	mov.w	r8, #10
 800ae4e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ae50:	1c56      	adds	r6, r2, #1
 800ae52:	9619      	str	r6, [sp, #100]	@ 0x64
 800ae54:	7852      	ldrb	r2, [r2, #1]
 800ae56:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800ae5a:	f1be 0f09 	cmp.w	lr, #9
 800ae5e:	d939      	bls.n	800aed4 <_strtod_l+0x344>
 800ae60:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ae62:	1a76      	subs	r6, r6, r1
 800ae64:	2e08      	cmp	r6, #8
 800ae66:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800ae6a:	dc03      	bgt.n	800ae74 <_strtod_l+0x2e4>
 800ae6c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ae6e:	4588      	cmp	r8, r1
 800ae70:	bfa8      	it	ge
 800ae72:	4688      	movge	r8, r1
 800ae74:	f1bc 0f00 	cmp.w	ip, #0
 800ae78:	d001      	beq.n	800ae7e <_strtod_l+0x2ee>
 800ae7a:	f1c8 0800 	rsb	r8, r8, #0
 800ae7e:	2d00      	cmp	r5, #0
 800ae80:	d14e      	bne.n	800af20 <_strtod_l+0x390>
 800ae82:	9908      	ldr	r1, [sp, #32]
 800ae84:	4308      	orrs	r0, r1
 800ae86:	f47f aebc 	bne.w	800ac02 <_strtod_l+0x72>
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	f47f aed4 	bne.w	800ac38 <_strtod_l+0xa8>
 800ae90:	2a69      	cmp	r2, #105	@ 0x69
 800ae92:	d028      	beq.n	800aee6 <_strtod_l+0x356>
 800ae94:	dc25      	bgt.n	800aee2 <_strtod_l+0x352>
 800ae96:	2a49      	cmp	r2, #73	@ 0x49
 800ae98:	d025      	beq.n	800aee6 <_strtod_l+0x356>
 800ae9a:	2a4e      	cmp	r2, #78	@ 0x4e
 800ae9c:	f47f aecc 	bne.w	800ac38 <_strtod_l+0xa8>
 800aea0:	499a      	ldr	r1, [pc, #616]	@ (800b10c <_strtod_l+0x57c>)
 800aea2:	a819      	add	r0, sp, #100	@ 0x64
 800aea4:	f001 fd70 	bl	800c988 <__match>
 800aea8:	2800      	cmp	r0, #0
 800aeaa:	f43f aec5 	beq.w	800ac38 <_strtod_l+0xa8>
 800aeae:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aeb0:	781b      	ldrb	r3, [r3, #0]
 800aeb2:	2b28      	cmp	r3, #40	@ 0x28
 800aeb4:	d12e      	bne.n	800af14 <_strtod_l+0x384>
 800aeb6:	4996      	ldr	r1, [pc, #600]	@ (800b110 <_strtod_l+0x580>)
 800aeb8:	aa1c      	add	r2, sp, #112	@ 0x70
 800aeba:	a819      	add	r0, sp, #100	@ 0x64
 800aebc:	f001 fd78 	bl	800c9b0 <__hexnan>
 800aec0:	2805      	cmp	r0, #5
 800aec2:	d127      	bne.n	800af14 <_strtod_l+0x384>
 800aec4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800aec6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800aeca:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800aece:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800aed2:	e696      	b.n	800ac02 <_strtod_l+0x72>
 800aed4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800aed6:	fb08 2101 	mla	r1, r8, r1, r2
 800aeda:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800aede:	9209      	str	r2, [sp, #36]	@ 0x24
 800aee0:	e7b5      	b.n	800ae4e <_strtod_l+0x2be>
 800aee2:	2a6e      	cmp	r2, #110	@ 0x6e
 800aee4:	e7da      	b.n	800ae9c <_strtod_l+0x30c>
 800aee6:	498b      	ldr	r1, [pc, #556]	@ (800b114 <_strtod_l+0x584>)
 800aee8:	a819      	add	r0, sp, #100	@ 0x64
 800aeea:	f001 fd4d 	bl	800c988 <__match>
 800aeee:	2800      	cmp	r0, #0
 800aef0:	f43f aea2 	beq.w	800ac38 <_strtod_l+0xa8>
 800aef4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aef6:	4988      	ldr	r1, [pc, #544]	@ (800b118 <_strtod_l+0x588>)
 800aef8:	3b01      	subs	r3, #1
 800aefa:	a819      	add	r0, sp, #100	@ 0x64
 800aefc:	9319      	str	r3, [sp, #100]	@ 0x64
 800aefe:	f001 fd43 	bl	800c988 <__match>
 800af02:	b910      	cbnz	r0, 800af0a <_strtod_l+0x37a>
 800af04:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800af06:	3301      	adds	r3, #1
 800af08:	9319      	str	r3, [sp, #100]	@ 0x64
 800af0a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800b128 <_strtod_l+0x598>
 800af0e:	f04f 0a00 	mov.w	sl, #0
 800af12:	e676      	b.n	800ac02 <_strtod_l+0x72>
 800af14:	4881      	ldr	r0, [pc, #516]	@ (800b11c <_strtod_l+0x58c>)
 800af16:	f001 fa73 	bl	800c400 <nan>
 800af1a:	ec5b ab10 	vmov	sl, fp, d0
 800af1e:	e670      	b.n	800ac02 <_strtod_l+0x72>
 800af20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af22:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800af24:	eba8 0303 	sub.w	r3, r8, r3
 800af28:	f1b9 0f00 	cmp.w	r9, #0
 800af2c:	bf08      	it	eq
 800af2e:	46a9      	moveq	r9, r5
 800af30:	2d10      	cmp	r5, #16
 800af32:	9309      	str	r3, [sp, #36]	@ 0x24
 800af34:	462c      	mov	r4, r5
 800af36:	bfa8      	it	ge
 800af38:	2410      	movge	r4, #16
 800af3a:	f7f5 fae3 	bl	8000504 <__aeabi_ui2d>
 800af3e:	2d09      	cmp	r5, #9
 800af40:	4682      	mov	sl, r0
 800af42:	468b      	mov	fp, r1
 800af44:	dc13      	bgt.n	800af6e <_strtod_l+0x3de>
 800af46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af48:	2b00      	cmp	r3, #0
 800af4a:	f43f ae5a 	beq.w	800ac02 <_strtod_l+0x72>
 800af4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af50:	dd78      	ble.n	800b044 <_strtod_l+0x4b4>
 800af52:	2b16      	cmp	r3, #22
 800af54:	dc5f      	bgt.n	800b016 <_strtod_l+0x486>
 800af56:	4972      	ldr	r1, [pc, #456]	@ (800b120 <_strtod_l+0x590>)
 800af58:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800af5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af60:	4652      	mov	r2, sl
 800af62:	465b      	mov	r3, fp
 800af64:	f7f5 fb48 	bl	80005f8 <__aeabi_dmul>
 800af68:	4682      	mov	sl, r0
 800af6a:	468b      	mov	fp, r1
 800af6c:	e649      	b.n	800ac02 <_strtod_l+0x72>
 800af6e:	4b6c      	ldr	r3, [pc, #432]	@ (800b120 <_strtod_l+0x590>)
 800af70:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800af74:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800af78:	f7f5 fb3e 	bl	80005f8 <__aeabi_dmul>
 800af7c:	4682      	mov	sl, r0
 800af7e:	4638      	mov	r0, r7
 800af80:	468b      	mov	fp, r1
 800af82:	f7f5 fabf 	bl	8000504 <__aeabi_ui2d>
 800af86:	4602      	mov	r2, r0
 800af88:	460b      	mov	r3, r1
 800af8a:	4650      	mov	r0, sl
 800af8c:	4659      	mov	r1, fp
 800af8e:	f7f5 f97d 	bl	800028c <__adddf3>
 800af92:	2d0f      	cmp	r5, #15
 800af94:	4682      	mov	sl, r0
 800af96:	468b      	mov	fp, r1
 800af98:	ddd5      	ble.n	800af46 <_strtod_l+0x3b6>
 800af9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af9c:	1b2c      	subs	r4, r5, r4
 800af9e:	441c      	add	r4, r3
 800afa0:	2c00      	cmp	r4, #0
 800afa2:	f340 8093 	ble.w	800b0cc <_strtod_l+0x53c>
 800afa6:	f014 030f 	ands.w	r3, r4, #15
 800afaa:	d00a      	beq.n	800afc2 <_strtod_l+0x432>
 800afac:	495c      	ldr	r1, [pc, #368]	@ (800b120 <_strtod_l+0x590>)
 800afae:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800afb2:	4652      	mov	r2, sl
 800afb4:	465b      	mov	r3, fp
 800afb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800afba:	f7f5 fb1d 	bl	80005f8 <__aeabi_dmul>
 800afbe:	4682      	mov	sl, r0
 800afc0:	468b      	mov	fp, r1
 800afc2:	f034 040f 	bics.w	r4, r4, #15
 800afc6:	d073      	beq.n	800b0b0 <_strtod_l+0x520>
 800afc8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800afcc:	dd49      	ble.n	800b062 <_strtod_l+0x4d2>
 800afce:	2400      	movs	r4, #0
 800afd0:	46a0      	mov	r8, r4
 800afd2:	940b      	str	r4, [sp, #44]	@ 0x2c
 800afd4:	46a1      	mov	r9, r4
 800afd6:	9a05      	ldr	r2, [sp, #20]
 800afd8:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800b128 <_strtod_l+0x598>
 800afdc:	2322      	movs	r3, #34	@ 0x22
 800afde:	6013      	str	r3, [r2, #0]
 800afe0:	f04f 0a00 	mov.w	sl, #0
 800afe4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	f43f ae0b 	beq.w	800ac02 <_strtod_l+0x72>
 800afec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800afee:	9805      	ldr	r0, [sp, #20]
 800aff0:	f7ff f946 	bl	800a280 <_Bfree>
 800aff4:	9805      	ldr	r0, [sp, #20]
 800aff6:	4649      	mov	r1, r9
 800aff8:	f7ff f942 	bl	800a280 <_Bfree>
 800affc:	9805      	ldr	r0, [sp, #20]
 800affe:	4641      	mov	r1, r8
 800b000:	f7ff f93e 	bl	800a280 <_Bfree>
 800b004:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b006:	9805      	ldr	r0, [sp, #20]
 800b008:	f7ff f93a 	bl	800a280 <_Bfree>
 800b00c:	9805      	ldr	r0, [sp, #20]
 800b00e:	4621      	mov	r1, r4
 800b010:	f7ff f936 	bl	800a280 <_Bfree>
 800b014:	e5f5      	b.n	800ac02 <_strtod_l+0x72>
 800b016:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b018:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800b01c:	4293      	cmp	r3, r2
 800b01e:	dbbc      	blt.n	800af9a <_strtod_l+0x40a>
 800b020:	4c3f      	ldr	r4, [pc, #252]	@ (800b120 <_strtod_l+0x590>)
 800b022:	f1c5 050f 	rsb	r5, r5, #15
 800b026:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b02a:	4652      	mov	r2, sl
 800b02c:	465b      	mov	r3, fp
 800b02e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b032:	f7f5 fae1 	bl	80005f8 <__aeabi_dmul>
 800b036:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b038:	1b5d      	subs	r5, r3, r5
 800b03a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b03e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b042:	e78f      	b.n	800af64 <_strtod_l+0x3d4>
 800b044:	3316      	adds	r3, #22
 800b046:	dba8      	blt.n	800af9a <_strtod_l+0x40a>
 800b048:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b04a:	eba3 0808 	sub.w	r8, r3, r8
 800b04e:	4b34      	ldr	r3, [pc, #208]	@ (800b120 <_strtod_l+0x590>)
 800b050:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800b054:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b058:	4650      	mov	r0, sl
 800b05a:	4659      	mov	r1, fp
 800b05c:	f7f5 fbf6 	bl	800084c <__aeabi_ddiv>
 800b060:	e782      	b.n	800af68 <_strtod_l+0x3d8>
 800b062:	2300      	movs	r3, #0
 800b064:	4f2f      	ldr	r7, [pc, #188]	@ (800b124 <_strtod_l+0x594>)
 800b066:	1124      	asrs	r4, r4, #4
 800b068:	4650      	mov	r0, sl
 800b06a:	4659      	mov	r1, fp
 800b06c:	461e      	mov	r6, r3
 800b06e:	2c01      	cmp	r4, #1
 800b070:	dc21      	bgt.n	800b0b6 <_strtod_l+0x526>
 800b072:	b10b      	cbz	r3, 800b078 <_strtod_l+0x4e8>
 800b074:	4682      	mov	sl, r0
 800b076:	468b      	mov	fp, r1
 800b078:	492a      	ldr	r1, [pc, #168]	@ (800b124 <_strtod_l+0x594>)
 800b07a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b07e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b082:	4652      	mov	r2, sl
 800b084:	465b      	mov	r3, fp
 800b086:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b08a:	f7f5 fab5 	bl	80005f8 <__aeabi_dmul>
 800b08e:	4b26      	ldr	r3, [pc, #152]	@ (800b128 <_strtod_l+0x598>)
 800b090:	460a      	mov	r2, r1
 800b092:	400b      	ands	r3, r1
 800b094:	4925      	ldr	r1, [pc, #148]	@ (800b12c <_strtod_l+0x59c>)
 800b096:	428b      	cmp	r3, r1
 800b098:	4682      	mov	sl, r0
 800b09a:	d898      	bhi.n	800afce <_strtod_l+0x43e>
 800b09c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800b0a0:	428b      	cmp	r3, r1
 800b0a2:	bf86      	itte	hi
 800b0a4:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800b130 <_strtod_l+0x5a0>
 800b0a8:	f04f 3aff 	movhi.w	sl, #4294967295
 800b0ac:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	9308      	str	r3, [sp, #32]
 800b0b4:	e076      	b.n	800b1a4 <_strtod_l+0x614>
 800b0b6:	07e2      	lsls	r2, r4, #31
 800b0b8:	d504      	bpl.n	800b0c4 <_strtod_l+0x534>
 800b0ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b0be:	f7f5 fa9b 	bl	80005f8 <__aeabi_dmul>
 800b0c2:	2301      	movs	r3, #1
 800b0c4:	3601      	adds	r6, #1
 800b0c6:	1064      	asrs	r4, r4, #1
 800b0c8:	3708      	adds	r7, #8
 800b0ca:	e7d0      	b.n	800b06e <_strtod_l+0x4de>
 800b0cc:	d0f0      	beq.n	800b0b0 <_strtod_l+0x520>
 800b0ce:	4264      	negs	r4, r4
 800b0d0:	f014 020f 	ands.w	r2, r4, #15
 800b0d4:	d00a      	beq.n	800b0ec <_strtod_l+0x55c>
 800b0d6:	4b12      	ldr	r3, [pc, #72]	@ (800b120 <_strtod_l+0x590>)
 800b0d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b0dc:	4650      	mov	r0, sl
 800b0de:	4659      	mov	r1, fp
 800b0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0e4:	f7f5 fbb2 	bl	800084c <__aeabi_ddiv>
 800b0e8:	4682      	mov	sl, r0
 800b0ea:	468b      	mov	fp, r1
 800b0ec:	1124      	asrs	r4, r4, #4
 800b0ee:	d0df      	beq.n	800b0b0 <_strtod_l+0x520>
 800b0f0:	2c1f      	cmp	r4, #31
 800b0f2:	dd1f      	ble.n	800b134 <_strtod_l+0x5a4>
 800b0f4:	2400      	movs	r4, #0
 800b0f6:	46a0      	mov	r8, r4
 800b0f8:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b0fa:	46a1      	mov	r9, r4
 800b0fc:	9a05      	ldr	r2, [sp, #20]
 800b0fe:	2322      	movs	r3, #34	@ 0x22
 800b100:	f04f 0a00 	mov.w	sl, #0
 800b104:	f04f 0b00 	mov.w	fp, #0
 800b108:	6013      	str	r3, [r2, #0]
 800b10a:	e76b      	b.n	800afe4 <_strtod_l+0x454>
 800b10c:	0800d949 	.word	0x0800d949
 800b110:	0800dc28 	.word	0x0800dc28
 800b114:	0800d941 	.word	0x0800d941
 800b118:	0800d976 	.word	0x0800d976
 800b11c:	0800daca 	.word	0x0800daca
 800b120:	0800db60 	.word	0x0800db60
 800b124:	0800db38 	.word	0x0800db38
 800b128:	7ff00000 	.word	0x7ff00000
 800b12c:	7ca00000 	.word	0x7ca00000
 800b130:	7fefffff 	.word	0x7fefffff
 800b134:	f014 0310 	ands.w	r3, r4, #16
 800b138:	bf18      	it	ne
 800b13a:	236a      	movne	r3, #106	@ 0x6a
 800b13c:	4ea9      	ldr	r6, [pc, #676]	@ (800b3e4 <_strtod_l+0x854>)
 800b13e:	9308      	str	r3, [sp, #32]
 800b140:	4650      	mov	r0, sl
 800b142:	4659      	mov	r1, fp
 800b144:	2300      	movs	r3, #0
 800b146:	07e7      	lsls	r7, r4, #31
 800b148:	d504      	bpl.n	800b154 <_strtod_l+0x5c4>
 800b14a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b14e:	f7f5 fa53 	bl	80005f8 <__aeabi_dmul>
 800b152:	2301      	movs	r3, #1
 800b154:	1064      	asrs	r4, r4, #1
 800b156:	f106 0608 	add.w	r6, r6, #8
 800b15a:	d1f4      	bne.n	800b146 <_strtod_l+0x5b6>
 800b15c:	b10b      	cbz	r3, 800b162 <_strtod_l+0x5d2>
 800b15e:	4682      	mov	sl, r0
 800b160:	468b      	mov	fp, r1
 800b162:	9b08      	ldr	r3, [sp, #32]
 800b164:	b1b3      	cbz	r3, 800b194 <_strtod_l+0x604>
 800b166:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b16a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800b16e:	2b00      	cmp	r3, #0
 800b170:	4659      	mov	r1, fp
 800b172:	dd0f      	ble.n	800b194 <_strtod_l+0x604>
 800b174:	2b1f      	cmp	r3, #31
 800b176:	dd56      	ble.n	800b226 <_strtod_l+0x696>
 800b178:	2b34      	cmp	r3, #52	@ 0x34
 800b17a:	bfde      	ittt	le
 800b17c:	f04f 33ff 	movle.w	r3, #4294967295
 800b180:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800b184:	4093      	lslle	r3, r2
 800b186:	f04f 0a00 	mov.w	sl, #0
 800b18a:	bfcc      	ite	gt
 800b18c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b190:	ea03 0b01 	andle.w	fp, r3, r1
 800b194:	2200      	movs	r2, #0
 800b196:	2300      	movs	r3, #0
 800b198:	4650      	mov	r0, sl
 800b19a:	4659      	mov	r1, fp
 800b19c:	f7f5 fc94 	bl	8000ac8 <__aeabi_dcmpeq>
 800b1a0:	2800      	cmp	r0, #0
 800b1a2:	d1a7      	bne.n	800b0f4 <_strtod_l+0x564>
 800b1a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b1a6:	9300      	str	r3, [sp, #0]
 800b1a8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b1aa:	9805      	ldr	r0, [sp, #20]
 800b1ac:	462b      	mov	r3, r5
 800b1ae:	464a      	mov	r2, r9
 800b1b0:	f7ff f8ce 	bl	800a350 <__s2b>
 800b1b4:	900b      	str	r0, [sp, #44]	@ 0x2c
 800b1b6:	2800      	cmp	r0, #0
 800b1b8:	f43f af09 	beq.w	800afce <_strtod_l+0x43e>
 800b1bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b1be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b1c0:	2a00      	cmp	r2, #0
 800b1c2:	eba3 0308 	sub.w	r3, r3, r8
 800b1c6:	bfa8      	it	ge
 800b1c8:	2300      	movge	r3, #0
 800b1ca:	9312      	str	r3, [sp, #72]	@ 0x48
 800b1cc:	2400      	movs	r4, #0
 800b1ce:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b1d2:	9316      	str	r3, [sp, #88]	@ 0x58
 800b1d4:	46a0      	mov	r8, r4
 800b1d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b1d8:	9805      	ldr	r0, [sp, #20]
 800b1da:	6859      	ldr	r1, [r3, #4]
 800b1dc:	f7ff f810 	bl	800a200 <_Balloc>
 800b1e0:	4681      	mov	r9, r0
 800b1e2:	2800      	cmp	r0, #0
 800b1e4:	f43f aef7 	beq.w	800afd6 <_strtod_l+0x446>
 800b1e8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b1ea:	691a      	ldr	r2, [r3, #16]
 800b1ec:	3202      	adds	r2, #2
 800b1ee:	f103 010c 	add.w	r1, r3, #12
 800b1f2:	0092      	lsls	r2, r2, #2
 800b1f4:	300c      	adds	r0, #12
 800b1f6:	f7fe f894 	bl	8009322 <memcpy>
 800b1fa:	ec4b ab10 	vmov	d0, sl, fp
 800b1fe:	9805      	ldr	r0, [sp, #20]
 800b200:	aa1c      	add	r2, sp, #112	@ 0x70
 800b202:	a91b      	add	r1, sp, #108	@ 0x6c
 800b204:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800b208:	f7ff fbd6 	bl	800a9b8 <__d2b>
 800b20c:	901a      	str	r0, [sp, #104]	@ 0x68
 800b20e:	2800      	cmp	r0, #0
 800b210:	f43f aee1 	beq.w	800afd6 <_strtod_l+0x446>
 800b214:	9805      	ldr	r0, [sp, #20]
 800b216:	2101      	movs	r1, #1
 800b218:	f7ff f930 	bl	800a47c <__i2b>
 800b21c:	4680      	mov	r8, r0
 800b21e:	b948      	cbnz	r0, 800b234 <_strtod_l+0x6a4>
 800b220:	f04f 0800 	mov.w	r8, #0
 800b224:	e6d7      	b.n	800afd6 <_strtod_l+0x446>
 800b226:	f04f 32ff 	mov.w	r2, #4294967295
 800b22a:	fa02 f303 	lsl.w	r3, r2, r3
 800b22e:	ea03 0a0a 	and.w	sl, r3, sl
 800b232:	e7af      	b.n	800b194 <_strtod_l+0x604>
 800b234:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800b236:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b238:	2d00      	cmp	r5, #0
 800b23a:	bfab      	itete	ge
 800b23c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800b23e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800b240:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800b242:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800b244:	bfac      	ite	ge
 800b246:	18ef      	addge	r7, r5, r3
 800b248:	1b5e      	sublt	r6, r3, r5
 800b24a:	9b08      	ldr	r3, [sp, #32]
 800b24c:	1aed      	subs	r5, r5, r3
 800b24e:	4415      	add	r5, r2
 800b250:	4b65      	ldr	r3, [pc, #404]	@ (800b3e8 <_strtod_l+0x858>)
 800b252:	3d01      	subs	r5, #1
 800b254:	429d      	cmp	r5, r3
 800b256:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b25a:	da50      	bge.n	800b2fe <_strtod_l+0x76e>
 800b25c:	1b5b      	subs	r3, r3, r5
 800b25e:	2b1f      	cmp	r3, #31
 800b260:	eba2 0203 	sub.w	r2, r2, r3
 800b264:	f04f 0101 	mov.w	r1, #1
 800b268:	dc3d      	bgt.n	800b2e6 <_strtod_l+0x756>
 800b26a:	fa01 f303 	lsl.w	r3, r1, r3
 800b26e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b270:	2300      	movs	r3, #0
 800b272:	9310      	str	r3, [sp, #64]	@ 0x40
 800b274:	18bd      	adds	r5, r7, r2
 800b276:	9b08      	ldr	r3, [sp, #32]
 800b278:	42af      	cmp	r7, r5
 800b27a:	4416      	add	r6, r2
 800b27c:	441e      	add	r6, r3
 800b27e:	463b      	mov	r3, r7
 800b280:	bfa8      	it	ge
 800b282:	462b      	movge	r3, r5
 800b284:	42b3      	cmp	r3, r6
 800b286:	bfa8      	it	ge
 800b288:	4633      	movge	r3, r6
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	bfc2      	ittt	gt
 800b28e:	1aed      	subgt	r5, r5, r3
 800b290:	1af6      	subgt	r6, r6, r3
 800b292:	1aff      	subgt	r7, r7, r3
 800b294:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b296:	2b00      	cmp	r3, #0
 800b298:	dd16      	ble.n	800b2c8 <_strtod_l+0x738>
 800b29a:	4641      	mov	r1, r8
 800b29c:	9805      	ldr	r0, [sp, #20]
 800b29e:	461a      	mov	r2, r3
 800b2a0:	f7ff f9a4 	bl	800a5ec <__pow5mult>
 800b2a4:	4680      	mov	r8, r0
 800b2a6:	2800      	cmp	r0, #0
 800b2a8:	d0ba      	beq.n	800b220 <_strtod_l+0x690>
 800b2aa:	4601      	mov	r1, r0
 800b2ac:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b2ae:	9805      	ldr	r0, [sp, #20]
 800b2b0:	f7ff f8fa 	bl	800a4a8 <__multiply>
 800b2b4:	900a      	str	r0, [sp, #40]	@ 0x28
 800b2b6:	2800      	cmp	r0, #0
 800b2b8:	f43f ae8d 	beq.w	800afd6 <_strtod_l+0x446>
 800b2bc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b2be:	9805      	ldr	r0, [sp, #20]
 800b2c0:	f7fe ffde 	bl	800a280 <_Bfree>
 800b2c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b2c6:	931a      	str	r3, [sp, #104]	@ 0x68
 800b2c8:	2d00      	cmp	r5, #0
 800b2ca:	dc1d      	bgt.n	800b308 <_strtod_l+0x778>
 800b2cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	dd23      	ble.n	800b31a <_strtod_l+0x78a>
 800b2d2:	4649      	mov	r1, r9
 800b2d4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b2d6:	9805      	ldr	r0, [sp, #20]
 800b2d8:	f7ff f988 	bl	800a5ec <__pow5mult>
 800b2dc:	4681      	mov	r9, r0
 800b2de:	b9e0      	cbnz	r0, 800b31a <_strtod_l+0x78a>
 800b2e0:	f04f 0900 	mov.w	r9, #0
 800b2e4:	e677      	b.n	800afd6 <_strtod_l+0x446>
 800b2e6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800b2ea:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800b2ee:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800b2f2:	35e2      	adds	r5, #226	@ 0xe2
 800b2f4:	fa01 f305 	lsl.w	r3, r1, r5
 800b2f8:	9310      	str	r3, [sp, #64]	@ 0x40
 800b2fa:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b2fc:	e7ba      	b.n	800b274 <_strtod_l+0x6e4>
 800b2fe:	2300      	movs	r3, #0
 800b300:	9310      	str	r3, [sp, #64]	@ 0x40
 800b302:	2301      	movs	r3, #1
 800b304:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b306:	e7b5      	b.n	800b274 <_strtod_l+0x6e4>
 800b308:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b30a:	9805      	ldr	r0, [sp, #20]
 800b30c:	462a      	mov	r2, r5
 800b30e:	f7ff f9c7 	bl	800a6a0 <__lshift>
 800b312:	901a      	str	r0, [sp, #104]	@ 0x68
 800b314:	2800      	cmp	r0, #0
 800b316:	d1d9      	bne.n	800b2cc <_strtod_l+0x73c>
 800b318:	e65d      	b.n	800afd6 <_strtod_l+0x446>
 800b31a:	2e00      	cmp	r6, #0
 800b31c:	dd07      	ble.n	800b32e <_strtod_l+0x79e>
 800b31e:	4649      	mov	r1, r9
 800b320:	9805      	ldr	r0, [sp, #20]
 800b322:	4632      	mov	r2, r6
 800b324:	f7ff f9bc 	bl	800a6a0 <__lshift>
 800b328:	4681      	mov	r9, r0
 800b32a:	2800      	cmp	r0, #0
 800b32c:	d0d8      	beq.n	800b2e0 <_strtod_l+0x750>
 800b32e:	2f00      	cmp	r7, #0
 800b330:	dd08      	ble.n	800b344 <_strtod_l+0x7b4>
 800b332:	4641      	mov	r1, r8
 800b334:	9805      	ldr	r0, [sp, #20]
 800b336:	463a      	mov	r2, r7
 800b338:	f7ff f9b2 	bl	800a6a0 <__lshift>
 800b33c:	4680      	mov	r8, r0
 800b33e:	2800      	cmp	r0, #0
 800b340:	f43f ae49 	beq.w	800afd6 <_strtod_l+0x446>
 800b344:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b346:	9805      	ldr	r0, [sp, #20]
 800b348:	464a      	mov	r2, r9
 800b34a:	f7ff fa31 	bl	800a7b0 <__mdiff>
 800b34e:	4604      	mov	r4, r0
 800b350:	2800      	cmp	r0, #0
 800b352:	f43f ae40 	beq.w	800afd6 <_strtod_l+0x446>
 800b356:	68c3      	ldr	r3, [r0, #12]
 800b358:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b35a:	2300      	movs	r3, #0
 800b35c:	60c3      	str	r3, [r0, #12]
 800b35e:	4641      	mov	r1, r8
 800b360:	f7ff fa0a 	bl	800a778 <__mcmp>
 800b364:	2800      	cmp	r0, #0
 800b366:	da45      	bge.n	800b3f4 <_strtod_l+0x864>
 800b368:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b36a:	ea53 030a 	orrs.w	r3, r3, sl
 800b36e:	d16b      	bne.n	800b448 <_strtod_l+0x8b8>
 800b370:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b374:	2b00      	cmp	r3, #0
 800b376:	d167      	bne.n	800b448 <_strtod_l+0x8b8>
 800b378:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b37c:	0d1b      	lsrs	r3, r3, #20
 800b37e:	051b      	lsls	r3, r3, #20
 800b380:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b384:	d960      	bls.n	800b448 <_strtod_l+0x8b8>
 800b386:	6963      	ldr	r3, [r4, #20]
 800b388:	b913      	cbnz	r3, 800b390 <_strtod_l+0x800>
 800b38a:	6923      	ldr	r3, [r4, #16]
 800b38c:	2b01      	cmp	r3, #1
 800b38e:	dd5b      	ble.n	800b448 <_strtod_l+0x8b8>
 800b390:	4621      	mov	r1, r4
 800b392:	2201      	movs	r2, #1
 800b394:	9805      	ldr	r0, [sp, #20]
 800b396:	f7ff f983 	bl	800a6a0 <__lshift>
 800b39a:	4641      	mov	r1, r8
 800b39c:	4604      	mov	r4, r0
 800b39e:	f7ff f9eb 	bl	800a778 <__mcmp>
 800b3a2:	2800      	cmp	r0, #0
 800b3a4:	dd50      	ble.n	800b448 <_strtod_l+0x8b8>
 800b3a6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b3aa:	9a08      	ldr	r2, [sp, #32]
 800b3ac:	0d1b      	lsrs	r3, r3, #20
 800b3ae:	051b      	lsls	r3, r3, #20
 800b3b0:	2a00      	cmp	r2, #0
 800b3b2:	d06a      	beq.n	800b48a <_strtod_l+0x8fa>
 800b3b4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b3b8:	d867      	bhi.n	800b48a <_strtod_l+0x8fa>
 800b3ba:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b3be:	f67f ae9d 	bls.w	800b0fc <_strtod_l+0x56c>
 800b3c2:	4b0a      	ldr	r3, [pc, #40]	@ (800b3ec <_strtod_l+0x85c>)
 800b3c4:	4650      	mov	r0, sl
 800b3c6:	4659      	mov	r1, fp
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	f7f5 f915 	bl	80005f8 <__aeabi_dmul>
 800b3ce:	4b08      	ldr	r3, [pc, #32]	@ (800b3f0 <_strtod_l+0x860>)
 800b3d0:	400b      	ands	r3, r1
 800b3d2:	4682      	mov	sl, r0
 800b3d4:	468b      	mov	fp, r1
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	f47f ae08 	bne.w	800afec <_strtod_l+0x45c>
 800b3dc:	9a05      	ldr	r2, [sp, #20]
 800b3de:	2322      	movs	r3, #34	@ 0x22
 800b3e0:	6013      	str	r3, [r2, #0]
 800b3e2:	e603      	b.n	800afec <_strtod_l+0x45c>
 800b3e4:	0800dc50 	.word	0x0800dc50
 800b3e8:	fffffc02 	.word	0xfffffc02
 800b3ec:	39500000 	.word	0x39500000
 800b3f0:	7ff00000 	.word	0x7ff00000
 800b3f4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800b3f8:	d165      	bne.n	800b4c6 <_strtod_l+0x936>
 800b3fa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b3fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b400:	b35a      	cbz	r2, 800b45a <_strtod_l+0x8ca>
 800b402:	4a9f      	ldr	r2, [pc, #636]	@ (800b680 <_strtod_l+0xaf0>)
 800b404:	4293      	cmp	r3, r2
 800b406:	d12b      	bne.n	800b460 <_strtod_l+0x8d0>
 800b408:	9b08      	ldr	r3, [sp, #32]
 800b40a:	4651      	mov	r1, sl
 800b40c:	b303      	cbz	r3, 800b450 <_strtod_l+0x8c0>
 800b40e:	4b9d      	ldr	r3, [pc, #628]	@ (800b684 <_strtod_l+0xaf4>)
 800b410:	465a      	mov	r2, fp
 800b412:	4013      	ands	r3, r2
 800b414:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b418:	f04f 32ff 	mov.w	r2, #4294967295
 800b41c:	d81b      	bhi.n	800b456 <_strtod_l+0x8c6>
 800b41e:	0d1b      	lsrs	r3, r3, #20
 800b420:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b424:	fa02 f303 	lsl.w	r3, r2, r3
 800b428:	4299      	cmp	r1, r3
 800b42a:	d119      	bne.n	800b460 <_strtod_l+0x8d0>
 800b42c:	4b96      	ldr	r3, [pc, #600]	@ (800b688 <_strtod_l+0xaf8>)
 800b42e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b430:	429a      	cmp	r2, r3
 800b432:	d102      	bne.n	800b43a <_strtod_l+0x8aa>
 800b434:	3101      	adds	r1, #1
 800b436:	f43f adce 	beq.w	800afd6 <_strtod_l+0x446>
 800b43a:	4b92      	ldr	r3, [pc, #584]	@ (800b684 <_strtod_l+0xaf4>)
 800b43c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b43e:	401a      	ands	r2, r3
 800b440:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800b444:	f04f 0a00 	mov.w	sl, #0
 800b448:	9b08      	ldr	r3, [sp, #32]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d1b9      	bne.n	800b3c2 <_strtod_l+0x832>
 800b44e:	e5cd      	b.n	800afec <_strtod_l+0x45c>
 800b450:	f04f 33ff 	mov.w	r3, #4294967295
 800b454:	e7e8      	b.n	800b428 <_strtod_l+0x898>
 800b456:	4613      	mov	r3, r2
 800b458:	e7e6      	b.n	800b428 <_strtod_l+0x898>
 800b45a:	ea53 030a 	orrs.w	r3, r3, sl
 800b45e:	d0a2      	beq.n	800b3a6 <_strtod_l+0x816>
 800b460:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b462:	b1db      	cbz	r3, 800b49c <_strtod_l+0x90c>
 800b464:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b466:	4213      	tst	r3, r2
 800b468:	d0ee      	beq.n	800b448 <_strtod_l+0x8b8>
 800b46a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b46c:	9a08      	ldr	r2, [sp, #32]
 800b46e:	4650      	mov	r0, sl
 800b470:	4659      	mov	r1, fp
 800b472:	b1bb      	cbz	r3, 800b4a4 <_strtod_l+0x914>
 800b474:	f7ff fb6e 	bl	800ab54 <sulp>
 800b478:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b47c:	ec53 2b10 	vmov	r2, r3, d0
 800b480:	f7f4 ff04 	bl	800028c <__adddf3>
 800b484:	4682      	mov	sl, r0
 800b486:	468b      	mov	fp, r1
 800b488:	e7de      	b.n	800b448 <_strtod_l+0x8b8>
 800b48a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b48e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b492:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b496:	f04f 3aff 	mov.w	sl, #4294967295
 800b49a:	e7d5      	b.n	800b448 <_strtod_l+0x8b8>
 800b49c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b49e:	ea13 0f0a 	tst.w	r3, sl
 800b4a2:	e7e1      	b.n	800b468 <_strtod_l+0x8d8>
 800b4a4:	f7ff fb56 	bl	800ab54 <sulp>
 800b4a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b4ac:	ec53 2b10 	vmov	r2, r3, d0
 800b4b0:	f7f4 feea 	bl	8000288 <__aeabi_dsub>
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	4682      	mov	sl, r0
 800b4ba:	468b      	mov	fp, r1
 800b4bc:	f7f5 fb04 	bl	8000ac8 <__aeabi_dcmpeq>
 800b4c0:	2800      	cmp	r0, #0
 800b4c2:	d0c1      	beq.n	800b448 <_strtod_l+0x8b8>
 800b4c4:	e61a      	b.n	800b0fc <_strtod_l+0x56c>
 800b4c6:	4641      	mov	r1, r8
 800b4c8:	4620      	mov	r0, r4
 800b4ca:	f7ff facd 	bl	800aa68 <__ratio>
 800b4ce:	ec57 6b10 	vmov	r6, r7, d0
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b4d8:	4630      	mov	r0, r6
 800b4da:	4639      	mov	r1, r7
 800b4dc:	f7f5 fb08 	bl	8000af0 <__aeabi_dcmple>
 800b4e0:	2800      	cmp	r0, #0
 800b4e2:	d06f      	beq.n	800b5c4 <_strtod_l+0xa34>
 800b4e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d17a      	bne.n	800b5e0 <_strtod_l+0xa50>
 800b4ea:	f1ba 0f00 	cmp.w	sl, #0
 800b4ee:	d158      	bne.n	800b5a2 <_strtod_l+0xa12>
 800b4f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b4f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d15a      	bne.n	800b5b0 <_strtod_l+0xa20>
 800b4fa:	4b64      	ldr	r3, [pc, #400]	@ (800b68c <_strtod_l+0xafc>)
 800b4fc:	2200      	movs	r2, #0
 800b4fe:	4630      	mov	r0, r6
 800b500:	4639      	mov	r1, r7
 800b502:	f7f5 faeb 	bl	8000adc <__aeabi_dcmplt>
 800b506:	2800      	cmp	r0, #0
 800b508:	d159      	bne.n	800b5be <_strtod_l+0xa2e>
 800b50a:	4630      	mov	r0, r6
 800b50c:	4639      	mov	r1, r7
 800b50e:	4b60      	ldr	r3, [pc, #384]	@ (800b690 <_strtod_l+0xb00>)
 800b510:	2200      	movs	r2, #0
 800b512:	f7f5 f871 	bl	80005f8 <__aeabi_dmul>
 800b516:	4606      	mov	r6, r0
 800b518:	460f      	mov	r7, r1
 800b51a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b51e:	9606      	str	r6, [sp, #24]
 800b520:	9307      	str	r3, [sp, #28]
 800b522:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b526:	4d57      	ldr	r5, [pc, #348]	@ (800b684 <_strtod_l+0xaf4>)
 800b528:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b52c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b52e:	401d      	ands	r5, r3
 800b530:	4b58      	ldr	r3, [pc, #352]	@ (800b694 <_strtod_l+0xb04>)
 800b532:	429d      	cmp	r5, r3
 800b534:	f040 80b2 	bne.w	800b69c <_strtod_l+0xb0c>
 800b538:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b53a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b53e:	ec4b ab10 	vmov	d0, sl, fp
 800b542:	f7ff f9c9 	bl	800a8d8 <__ulp>
 800b546:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b54a:	ec51 0b10 	vmov	r0, r1, d0
 800b54e:	f7f5 f853 	bl	80005f8 <__aeabi_dmul>
 800b552:	4652      	mov	r2, sl
 800b554:	465b      	mov	r3, fp
 800b556:	f7f4 fe99 	bl	800028c <__adddf3>
 800b55a:	460b      	mov	r3, r1
 800b55c:	4949      	ldr	r1, [pc, #292]	@ (800b684 <_strtod_l+0xaf4>)
 800b55e:	4a4e      	ldr	r2, [pc, #312]	@ (800b698 <_strtod_l+0xb08>)
 800b560:	4019      	ands	r1, r3
 800b562:	4291      	cmp	r1, r2
 800b564:	4682      	mov	sl, r0
 800b566:	d942      	bls.n	800b5ee <_strtod_l+0xa5e>
 800b568:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b56a:	4b47      	ldr	r3, [pc, #284]	@ (800b688 <_strtod_l+0xaf8>)
 800b56c:	429a      	cmp	r2, r3
 800b56e:	d103      	bne.n	800b578 <_strtod_l+0x9e8>
 800b570:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b572:	3301      	adds	r3, #1
 800b574:	f43f ad2f 	beq.w	800afd6 <_strtod_l+0x446>
 800b578:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800b688 <_strtod_l+0xaf8>
 800b57c:	f04f 3aff 	mov.w	sl, #4294967295
 800b580:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b582:	9805      	ldr	r0, [sp, #20]
 800b584:	f7fe fe7c 	bl	800a280 <_Bfree>
 800b588:	9805      	ldr	r0, [sp, #20]
 800b58a:	4649      	mov	r1, r9
 800b58c:	f7fe fe78 	bl	800a280 <_Bfree>
 800b590:	9805      	ldr	r0, [sp, #20]
 800b592:	4641      	mov	r1, r8
 800b594:	f7fe fe74 	bl	800a280 <_Bfree>
 800b598:	9805      	ldr	r0, [sp, #20]
 800b59a:	4621      	mov	r1, r4
 800b59c:	f7fe fe70 	bl	800a280 <_Bfree>
 800b5a0:	e619      	b.n	800b1d6 <_strtod_l+0x646>
 800b5a2:	f1ba 0f01 	cmp.w	sl, #1
 800b5a6:	d103      	bne.n	800b5b0 <_strtod_l+0xa20>
 800b5a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	f43f ada6 	beq.w	800b0fc <_strtod_l+0x56c>
 800b5b0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800b660 <_strtod_l+0xad0>
 800b5b4:	4f35      	ldr	r7, [pc, #212]	@ (800b68c <_strtod_l+0xafc>)
 800b5b6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b5ba:	2600      	movs	r6, #0
 800b5bc:	e7b1      	b.n	800b522 <_strtod_l+0x992>
 800b5be:	4f34      	ldr	r7, [pc, #208]	@ (800b690 <_strtod_l+0xb00>)
 800b5c0:	2600      	movs	r6, #0
 800b5c2:	e7aa      	b.n	800b51a <_strtod_l+0x98a>
 800b5c4:	4b32      	ldr	r3, [pc, #200]	@ (800b690 <_strtod_l+0xb00>)
 800b5c6:	4630      	mov	r0, r6
 800b5c8:	4639      	mov	r1, r7
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	f7f5 f814 	bl	80005f8 <__aeabi_dmul>
 800b5d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b5d2:	4606      	mov	r6, r0
 800b5d4:	460f      	mov	r7, r1
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d09f      	beq.n	800b51a <_strtod_l+0x98a>
 800b5da:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b5de:	e7a0      	b.n	800b522 <_strtod_l+0x992>
 800b5e0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b668 <_strtod_l+0xad8>
 800b5e4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b5e8:	ec57 6b17 	vmov	r6, r7, d7
 800b5ec:	e799      	b.n	800b522 <_strtod_l+0x992>
 800b5ee:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b5f2:	9b08      	ldr	r3, [sp, #32]
 800b5f4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d1c1      	bne.n	800b580 <_strtod_l+0x9f0>
 800b5fc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b600:	0d1b      	lsrs	r3, r3, #20
 800b602:	051b      	lsls	r3, r3, #20
 800b604:	429d      	cmp	r5, r3
 800b606:	d1bb      	bne.n	800b580 <_strtod_l+0x9f0>
 800b608:	4630      	mov	r0, r6
 800b60a:	4639      	mov	r1, r7
 800b60c:	f7f5 fb54 	bl	8000cb8 <__aeabi_d2lz>
 800b610:	f7f4 ffc4 	bl	800059c <__aeabi_l2d>
 800b614:	4602      	mov	r2, r0
 800b616:	460b      	mov	r3, r1
 800b618:	4630      	mov	r0, r6
 800b61a:	4639      	mov	r1, r7
 800b61c:	f7f4 fe34 	bl	8000288 <__aeabi_dsub>
 800b620:	460b      	mov	r3, r1
 800b622:	4602      	mov	r2, r0
 800b624:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b628:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b62c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b62e:	ea46 060a 	orr.w	r6, r6, sl
 800b632:	431e      	orrs	r6, r3
 800b634:	d06f      	beq.n	800b716 <_strtod_l+0xb86>
 800b636:	a30e      	add	r3, pc, #56	@ (adr r3, 800b670 <_strtod_l+0xae0>)
 800b638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b63c:	f7f5 fa4e 	bl	8000adc <__aeabi_dcmplt>
 800b640:	2800      	cmp	r0, #0
 800b642:	f47f acd3 	bne.w	800afec <_strtod_l+0x45c>
 800b646:	a30c      	add	r3, pc, #48	@ (adr r3, 800b678 <_strtod_l+0xae8>)
 800b648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b64c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b650:	f7f5 fa62 	bl	8000b18 <__aeabi_dcmpgt>
 800b654:	2800      	cmp	r0, #0
 800b656:	d093      	beq.n	800b580 <_strtod_l+0x9f0>
 800b658:	e4c8      	b.n	800afec <_strtod_l+0x45c>
 800b65a:	bf00      	nop
 800b65c:	f3af 8000 	nop.w
 800b660:	00000000 	.word	0x00000000
 800b664:	bff00000 	.word	0xbff00000
 800b668:	00000000 	.word	0x00000000
 800b66c:	3ff00000 	.word	0x3ff00000
 800b670:	94a03595 	.word	0x94a03595
 800b674:	3fdfffff 	.word	0x3fdfffff
 800b678:	35afe535 	.word	0x35afe535
 800b67c:	3fe00000 	.word	0x3fe00000
 800b680:	000fffff 	.word	0x000fffff
 800b684:	7ff00000 	.word	0x7ff00000
 800b688:	7fefffff 	.word	0x7fefffff
 800b68c:	3ff00000 	.word	0x3ff00000
 800b690:	3fe00000 	.word	0x3fe00000
 800b694:	7fe00000 	.word	0x7fe00000
 800b698:	7c9fffff 	.word	0x7c9fffff
 800b69c:	9b08      	ldr	r3, [sp, #32]
 800b69e:	b323      	cbz	r3, 800b6ea <_strtod_l+0xb5a>
 800b6a0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b6a4:	d821      	bhi.n	800b6ea <_strtod_l+0xb5a>
 800b6a6:	a328      	add	r3, pc, #160	@ (adr r3, 800b748 <_strtod_l+0xbb8>)
 800b6a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ac:	4630      	mov	r0, r6
 800b6ae:	4639      	mov	r1, r7
 800b6b0:	f7f5 fa1e 	bl	8000af0 <__aeabi_dcmple>
 800b6b4:	b1a0      	cbz	r0, 800b6e0 <_strtod_l+0xb50>
 800b6b6:	4639      	mov	r1, r7
 800b6b8:	4630      	mov	r0, r6
 800b6ba:	f7f5 fa75 	bl	8000ba8 <__aeabi_d2uiz>
 800b6be:	2801      	cmp	r0, #1
 800b6c0:	bf38      	it	cc
 800b6c2:	2001      	movcc	r0, #1
 800b6c4:	f7f4 ff1e 	bl	8000504 <__aeabi_ui2d>
 800b6c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b6ca:	4606      	mov	r6, r0
 800b6cc:	460f      	mov	r7, r1
 800b6ce:	b9fb      	cbnz	r3, 800b710 <_strtod_l+0xb80>
 800b6d0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b6d4:	9014      	str	r0, [sp, #80]	@ 0x50
 800b6d6:	9315      	str	r3, [sp, #84]	@ 0x54
 800b6d8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b6dc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b6e0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b6e2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b6e6:	1b5b      	subs	r3, r3, r5
 800b6e8:	9311      	str	r3, [sp, #68]	@ 0x44
 800b6ea:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b6ee:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b6f2:	f7ff f8f1 	bl	800a8d8 <__ulp>
 800b6f6:	4650      	mov	r0, sl
 800b6f8:	ec53 2b10 	vmov	r2, r3, d0
 800b6fc:	4659      	mov	r1, fp
 800b6fe:	f7f4 ff7b 	bl	80005f8 <__aeabi_dmul>
 800b702:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b706:	f7f4 fdc1 	bl	800028c <__adddf3>
 800b70a:	4682      	mov	sl, r0
 800b70c:	468b      	mov	fp, r1
 800b70e:	e770      	b.n	800b5f2 <_strtod_l+0xa62>
 800b710:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b714:	e7e0      	b.n	800b6d8 <_strtod_l+0xb48>
 800b716:	a30e      	add	r3, pc, #56	@ (adr r3, 800b750 <_strtod_l+0xbc0>)
 800b718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b71c:	f7f5 f9de 	bl	8000adc <__aeabi_dcmplt>
 800b720:	e798      	b.n	800b654 <_strtod_l+0xac4>
 800b722:	2300      	movs	r3, #0
 800b724:	930e      	str	r3, [sp, #56]	@ 0x38
 800b726:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b728:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b72a:	6013      	str	r3, [r2, #0]
 800b72c:	f7ff ba6d 	b.w	800ac0a <_strtod_l+0x7a>
 800b730:	2a65      	cmp	r2, #101	@ 0x65
 800b732:	f43f ab68 	beq.w	800ae06 <_strtod_l+0x276>
 800b736:	2a45      	cmp	r2, #69	@ 0x45
 800b738:	f43f ab65 	beq.w	800ae06 <_strtod_l+0x276>
 800b73c:	2301      	movs	r3, #1
 800b73e:	f7ff bba0 	b.w	800ae82 <_strtod_l+0x2f2>
 800b742:	bf00      	nop
 800b744:	f3af 8000 	nop.w
 800b748:	ffc00000 	.word	0xffc00000
 800b74c:	41dfffff 	.word	0x41dfffff
 800b750:	94a03595 	.word	0x94a03595
 800b754:	3fcfffff 	.word	0x3fcfffff

0800b758 <_strtod_r>:
 800b758:	4b01      	ldr	r3, [pc, #4]	@ (800b760 <_strtod_r+0x8>)
 800b75a:	f7ff ba19 	b.w	800ab90 <_strtod_l>
 800b75e:	bf00      	nop
 800b760:	20000088 	.word	0x20000088

0800b764 <_strtol_l.isra.0>:
 800b764:	2b24      	cmp	r3, #36	@ 0x24
 800b766:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b76a:	4686      	mov	lr, r0
 800b76c:	4690      	mov	r8, r2
 800b76e:	d801      	bhi.n	800b774 <_strtol_l.isra.0+0x10>
 800b770:	2b01      	cmp	r3, #1
 800b772:	d106      	bne.n	800b782 <_strtol_l.isra.0+0x1e>
 800b774:	f7fd fda8 	bl	80092c8 <__errno>
 800b778:	2316      	movs	r3, #22
 800b77a:	6003      	str	r3, [r0, #0]
 800b77c:	2000      	movs	r0, #0
 800b77e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b782:	4834      	ldr	r0, [pc, #208]	@ (800b854 <_strtol_l.isra.0+0xf0>)
 800b784:	460d      	mov	r5, r1
 800b786:	462a      	mov	r2, r5
 800b788:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b78c:	5d06      	ldrb	r6, [r0, r4]
 800b78e:	f016 0608 	ands.w	r6, r6, #8
 800b792:	d1f8      	bne.n	800b786 <_strtol_l.isra.0+0x22>
 800b794:	2c2d      	cmp	r4, #45	@ 0x2d
 800b796:	d110      	bne.n	800b7ba <_strtol_l.isra.0+0x56>
 800b798:	782c      	ldrb	r4, [r5, #0]
 800b79a:	2601      	movs	r6, #1
 800b79c:	1c95      	adds	r5, r2, #2
 800b79e:	f033 0210 	bics.w	r2, r3, #16
 800b7a2:	d115      	bne.n	800b7d0 <_strtol_l.isra.0+0x6c>
 800b7a4:	2c30      	cmp	r4, #48	@ 0x30
 800b7a6:	d10d      	bne.n	800b7c4 <_strtol_l.isra.0+0x60>
 800b7a8:	782a      	ldrb	r2, [r5, #0]
 800b7aa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b7ae:	2a58      	cmp	r2, #88	@ 0x58
 800b7b0:	d108      	bne.n	800b7c4 <_strtol_l.isra.0+0x60>
 800b7b2:	786c      	ldrb	r4, [r5, #1]
 800b7b4:	3502      	adds	r5, #2
 800b7b6:	2310      	movs	r3, #16
 800b7b8:	e00a      	b.n	800b7d0 <_strtol_l.isra.0+0x6c>
 800b7ba:	2c2b      	cmp	r4, #43	@ 0x2b
 800b7bc:	bf04      	itt	eq
 800b7be:	782c      	ldrbeq	r4, [r5, #0]
 800b7c0:	1c95      	addeq	r5, r2, #2
 800b7c2:	e7ec      	b.n	800b79e <_strtol_l.isra.0+0x3a>
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d1f6      	bne.n	800b7b6 <_strtol_l.isra.0+0x52>
 800b7c8:	2c30      	cmp	r4, #48	@ 0x30
 800b7ca:	bf14      	ite	ne
 800b7cc:	230a      	movne	r3, #10
 800b7ce:	2308      	moveq	r3, #8
 800b7d0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b7d4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b7d8:	2200      	movs	r2, #0
 800b7da:	fbbc f9f3 	udiv	r9, ip, r3
 800b7de:	4610      	mov	r0, r2
 800b7e0:	fb03 ca19 	mls	sl, r3, r9, ip
 800b7e4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b7e8:	2f09      	cmp	r7, #9
 800b7ea:	d80f      	bhi.n	800b80c <_strtol_l.isra.0+0xa8>
 800b7ec:	463c      	mov	r4, r7
 800b7ee:	42a3      	cmp	r3, r4
 800b7f0:	dd1b      	ble.n	800b82a <_strtol_l.isra.0+0xc6>
 800b7f2:	1c57      	adds	r7, r2, #1
 800b7f4:	d007      	beq.n	800b806 <_strtol_l.isra.0+0xa2>
 800b7f6:	4581      	cmp	r9, r0
 800b7f8:	d314      	bcc.n	800b824 <_strtol_l.isra.0+0xc0>
 800b7fa:	d101      	bne.n	800b800 <_strtol_l.isra.0+0x9c>
 800b7fc:	45a2      	cmp	sl, r4
 800b7fe:	db11      	blt.n	800b824 <_strtol_l.isra.0+0xc0>
 800b800:	fb00 4003 	mla	r0, r0, r3, r4
 800b804:	2201      	movs	r2, #1
 800b806:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b80a:	e7eb      	b.n	800b7e4 <_strtol_l.isra.0+0x80>
 800b80c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b810:	2f19      	cmp	r7, #25
 800b812:	d801      	bhi.n	800b818 <_strtol_l.isra.0+0xb4>
 800b814:	3c37      	subs	r4, #55	@ 0x37
 800b816:	e7ea      	b.n	800b7ee <_strtol_l.isra.0+0x8a>
 800b818:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b81c:	2f19      	cmp	r7, #25
 800b81e:	d804      	bhi.n	800b82a <_strtol_l.isra.0+0xc6>
 800b820:	3c57      	subs	r4, #87	@ 0x57
 800b822:	e7e4      	b.n	800b7ee <_strtol_l.isra.0+0x8a>
 800b824:	f04f 32ff 	mov.w	r2, #4294967295
 800b828:	e7ed      	b.n	800b806 <_strtol_l.isra.0+0xa2>
 800b82a:	1c53      	adds	r3, r2, #1
 800b82c:	d108      	bne.n	800b840 <_strtol_l.isra.0+0xdc>
 800b82e:	2322      	movs	r3, #34	@ 0x22
 800b830:	f8ce 3000 	str.w	r3, [lr]
 800b834:	4660      	mov	r0, ip
 800b836:	f1b8 0f00 	cmp.w	r8, #0
 800b83a:	d0a0      	beq.n	800b77e <_strtol_l.isra.0+0x1a>
 800b83c:	1e69      	subs	r1, r5, #1
 800b83e:	e006      	b.n	800b84e <_strtol_l.isra.0+0xea>
 800b840:	b106      	cbz	r6, 800b844 <_strtol_l.isra.0+0xe0>
 800b842:	4240      	negs	r0, r0
 800b844:	f1b8 0f00 	cmp.w	r8, #0
 800b848:	d099      	beq.n	800b77e <_strtol_l.isra.0+0x1a>
 800b84a:	2a00      	cmp	r2, #0
 800b84c:	d1f6      	bne.n	800b83c <_strtol_l.isra.0+0xd8>
 800b84e:	f8c8 1000 	str.w	r1, [r8]
 800b852:	e794      	b.n	800b77e <_strtol_l.isra.0+0x1a>
 800b854:	0800dc79 	.word	0x0800dc79

0800b858 <_strtol_r>:
 800b858:	f7ff bf84 	b.w	800b764 <_strtol_l.isra.0>

0800b85c <__ssputs_r>:
 800b85c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b860:	688e      	ldr	r6, [r1, #8]
 800b862:	461f      	mov	r7, r3
 800b864:	42be      	cmp	r6, r7
 800b866:	680b      	ldr	r3, [r1, #0]
 800b868:	4682      	mov	sl, r0
 800b86a:	460c      	mov	r4, r1
 800b86c:	4690      	mov	r8, r2
 800b86e:	d82d      	bhi.n	800b8cc <__ssputs_r+0x70>
 800b870:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b874:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b878:	d026      	beq.n	800b8c8 <__ssputs_r+0x6c>
 800b87a:	6965      	ldr	r5, [r4, #20]
 800b87c:	6909      	ldr	r1, [r1, #16]
 800b87e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b882:	eba3 0901 	sub.w	r9, r3, r1
 800b886:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b88a:	1c7b      	adds	r3, r7, #1
 800b88c:	444b      	add	r3, r9
 800b88e:	106d      	asrs	r5, r5, #1
 800b890:	429d      	cmp	r5, r3
 800b892:	bf38      	it	cc
 800b894:	461d      	movcc	r5, r3
 800b896:	0553      	lsls	r3, r2, #21
 800b898:	d527      	bpl.n	800b8ea <__ssputs_r+0x8e>
 800b89a:	4629      	mov	r1, r5
 800b89c:	f7fe fc24 	bl	800a0e8 <_malloc_r>
 800b8a0:	4606      	mov	r6, r0
 800b8a2:	b360      	cbz	r0, 800b8fe <__ssputs_r+0xa2>
 800b8a4:	6921      	ldr	r1, [r4, #16]
 800b8a6:	464a      	mov	r2, r9
 800b8a8:	f7fd fd3b 	bl	8009322 <memcpy>
 800b8ac:	89a3      	ldrh	r3, [r4, #12]
 800b8ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b8b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b8b6:	81a3      	strh	r3, [r4, #12]
 800b8b8:	6126      	str	r6, [r4, #16]
 800b8ba:	6165      	str	r5, [r4, #20]
 800b8bc:	444e      	add	r6, r9
 800b8be:	eba5 0509 	sub.w	r5, r5, r9
 800b8c2:	6026      	str	r6, [r4, #0]
 800b8c4:	60a5      	str	r5, [r4, #8]
 800b8c6:	463e      	mov	r6, r7
 800b8c8:	42be      	cmp	r6, r7
 800b8ca:	d900      	bls.n	800b8ce <__ssputs_r+0x72>
 800b8cc:	463e      	mov	r6, r7
 800b8ce:	6820      	ldr	r0, [r4, #0]
 800b8d0:	4632      	mov	r2, r6
 800b8d2:	4641      	mov	r1, r8
 800b8d4:	f000 fd57 	bl	800c386 <memmove>
 800b8d8:	68a3      	ldr	r3, [r4, #8]
 800b8da:	1b9b      	subs	r3, r3, r6
 800b8dc:	60a3      	str	r3, [r4, #8]
 800b8de:	6823      	ldr	r3, [r4, #0]
 800b8e0:	4433      	add	r3, r6
 800b8e2:	6023      	str	r3, [r4, #0]
 800b8e4:	2000      	movs	r0, #0
 800b8e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8ea:	462a      	mov	r2, r5
 800b8ec:	f001 f90d 	bl	800cb0a <_realloc_r>
 800b8f0:	4606      	mov	r6, r0
 800b8f2:	2800      	cmp	r0, #0
 800b8f4:	d1e0      	bne.n	800b8b8 <__ssputs_r+0x5c>
 800b8f6:	6921      	ldr	r1, [r4, #16]
 800b8f8:	4650      	mov	r0, sl
 800b8fa:	f7fe fb81 	bl	800a000 <_free_r>
 800b8fe:	230c      	movs	r3, #12
 800b900:	f8ca 3000 	str.w	r3, [sl]
 800b904:	89a3      	ldrh	r3, [r4, #12]
 800b906:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b90a:	81a3      	strh	r3, [r4, #12]
 800b90c:	f04f 30ff 	mov.w	r0, #4294967295
 800b910:	e7e9      	b.n	800b8e6 <__ssputs_r+0x8a>
	...

0800b914 <_svfiprintf_r>:
 800b914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b918:	4698      	mov	r8, r3
 800b91a:	898b      	ldrh	r3, [r1, #12]
 800b91c:	061b      	lsls	r3, r3, #24
 800b91e:	b09d      	sub	sp, #116	@ 0x74
 800b920:	4607      	mov	r7, r0
 800b922:	460d      	mov	r5, r1
 800b924:	4614      	mov	r4, r2
 800b926:	d510      	bpl.n	800b94a <_svfiprintf_r+0x36>
 800b928:	690b      	ldr	r3, [r1, #16]
 800b92a:	b973      	cbnz	r3, 800b94a <_svfiprintf_r+0x36>
 800b92c:	2140      	movs	r1, #64	@ 0x40
 800b92e:	f7fe fbdb 	bl	800a0e8 <_malloc_r>
 800b932:	6028      	str	r0, [r5, #0]
 800b934:	6128      	str	r0, [r5, #16]
 800b936:	b930      	cbnz	r0, 800b946 <_svfiprintf_r+0x32>
 800b938:	230c      	movs	r3, #12
 800b93a:	603b      	str	r3, [r7, #0]
 800b93c:	f04f 30ff 	mov.w	r0, #4294967295
 800b940:	b01d      	add	sp, #116	@ 0x74
 800b942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b946:	2340      	movs	r3, #64	@ 0x40
 800b948:	616b      	str	r3, [r5, #20]
 800b94a:	2300      	movs	r3, #0
 800b94c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b94e:	2320      	movs	r3, #32
 800b950:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b954:	f8cd 800c 	str.w	r8, [sp, #12]
 800b958:	2330      	movs	r3, #48	@ 0x30
 800b95a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800baf8 <_svfiprintf_r+0x1e4>
 800b95e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b962:	f04f 0901 	mov.w	r9, #1
 800b966:	4623      	mov	r3, r4
 800b968:	469a      	mov	sl, r3
 800b96a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b96e:	b10a      	cbz	r2, 800b974 <_svfiprintf_r+0x60>
 800b970:	2a25      	cmp	r2, #37	@ 0x25
 800b972:	d1f9      	bne.n	800b968 <_svfiprintf_r+0x54>
 800b974:	ebba 0b04 	subs.w	fp, sl, r4
 800b978:	d00b      	beq.n	800b992 <_svfiprintf_r+0x7e>
 800b97a:	465b      	mov	r3, fp
 800b97c:	4622      	mov	r2, r4
 800b97e:	4629      	mov	r1, r5
 800b980:	4638      	mov	r0, r7
 800b982:	f7ff ff6b 	bl	800b85c <__ssputs_r>
 800b986:	3001      	adds	r0, #1
 800b988:	f000 80a7 	beq.w	800bada <_svfiprintf_r+0x1c6>
 800b98c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b98e:	445a      	add	r2, fp
 800b990:	9209      	str	r2, [sp, #36]	@ 0x24
 800b992:	f89a 3000 	ldrb.w	r3, [sl]
 800b996:	2b00      	cmp	r3, #0
 800b998:	f000 809f 	beq.w	800bada <_svfiprintf_r+0x1c6>
 800b99c:	2300      	movs	r3, #0
 800b99e:	f04f 32ff 	mov.w	r2, #4294967295
 800b9a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b9a6:	f10a 0a01 	add.w	sl, sl, #1
 800b9aa:	9304      	str	r3, [sp, #16]
 800b9ac:	9307      	str	r3, [sp, #28]
 800b9ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b9b2:	931a      	str	r3, [sp, #104]	@ 0x68
 800b9b4:	4654      	mov	r4, sl
 800b9b6:	2205      	movs	r2, #5
 800b9b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9bc:	484e      	ldr	r0, [pc, #312]	@ (800baf8 <_svfiprintf_r+0x1e4>)
 800b9be:	f7f4 fc07 	bl	80001d0 <memchr>
 800b9c2:	9a04      	ldr	r2, [sp, #16]
 800b9c4:	b9d8      	cbnz	r0, 800b9fe <_svfiprintf_r+0xea>
 800b9c6:	06d0      	lsls	r0, r2, #27
 800b9c8:	bf44      	itt	mi
 800b9ca:	2320      	movmi	r3, #32
 800b9cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b9d0:	0711      	lsls	r1, r2, #28
 800b9d2:	bf44      	itt	mi
 800b9d4:	232b      	movmi	r3, #43	@ 0x2b
 800b9d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b9da:	f89a 3000 	ldrb.w	r3, [sl]
 800b9de:	2b2a      	cmp	r3, #42	@ 0x2a
 800b9e0:	d015      	beq.n	800ba0e <_svfiprintf_r+0xfa>
 800b9e2:	9a07      	ldr	r2, [sp, #28]
 800b9e4:	4654      	mov	r4, sl
 800b9e6:	2000      	movs	r0, #0
 800b9e8:	f04f 0c0a 	mov.w	ip, #10
 800b9ec:	4621      	mov	r1, r4
 800b9ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b9f2:	3b30      	subs	r3, #48	@ 0x30
 800b9f4:	2b09      	cmp	r3, #9
 800b9f6:	d94b      	bls.n	800ba90 <_svfiprintf_r+0x17c>
 800b9f8:	b1b0      	cbz	r0, 800ba28 <_svfiprintf_r+0x114>
 800b9fa:	9207      	str	r2, [sp, #28]
 800b9fc:	e014      	b.n	800ba28 <_svfiprintf_r+0x114>
 800b9fe:	eba0 0308 	sub.w	r3, r0, r8
 800ba02:	fa09 f303 	lsl.w	r3, r9, r3
 800ba06:	4313      	orrs	r3, r2
 800ba08:	9304      	str	r3, [sp, #16]
 800ba0a:	46a2      	mov	sl, r4
 800ba0c:	e7d2      	b.n	800b9b4 <_svfiprintf_r+0xa0>
 800ba0e:	9b03      	ldr	r3, [sp, #12]
 800ba10:	1d19      	adds	r1, r3, #4
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	9103      	str	r1, [sp, #12]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	bfbb      	ittet	lt
 800ba1a:	425b      	neglt	r3, r3
 800ba1c:	f042 0202 	orrlt.w	r2, r2, #2
 800ba20:	9307      	strge	r3, [sp, #28]
 800ba22:	9307      	strlt	r3, [sp, #28]
 800ba24:	bfb8      	it	lt
 800ba26:	9204      	strlt	r2, [sp, #16]
 800ba28:	7823      	ldrb	r3, [r4, #0]
 800ba2a:	2b2e      	cmp	r3, #46	@ 0x2e
 800ba2c:	d10a      	bne.n	800ba44 <_svfiprintf_r+0x130>
 800ba2e:	7863      	ldrb	r3, [r4, #1]
 800ba30:	2b2a      	cmp	r3, #42	@ 0x2a
 800ba32:	d132      	bne.n	800ba9a <_svfiprintf_r+0x186>
 800ba34:	9b03      	ldr	r3, [sp, #12]
 800ba36:	1d1a      	adds	r2, r3, #4
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	9203      	str	r2, [sp, #12]
 800ba3c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ba40:	3402      	adds	r4, #2
 800ba42:	9305      	str	r3, [sp, #20]
 800ba44:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bb08 <_svfiprintf_r+0x1f4>
 800ba48:	7821      	ldrb	r1, [r4, #0]
 800ba4a:	2203      	movs	r2, #3
 800ba4c:	4650      	mov	r0, sl
 800ba4e:	f7f4 fbbf 	bl	80001d0 <memchr>
 800ba52:	b138      	cbz	r0, 800ba64 <_svfiprintf_r+0x150>
 800ba54:	9b04      	ldr	r3, [sp, #16]
 800ba56:	eba0 000a 	sub.w	r0, r0, sl
 800ba5a:	2240      	movs	r2, #64	@ 0x40
 800ba5c:	4082      	lsls	r2, r0
 800ba5e:	4313      	orrs	r3, r2
 800ba60:	3401      	adds	r4, #1
 800ba62:	9304      	str	r3, [sp, #16]
 800ba64:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba68:	4824      	ldr	r0, [pc, #144]	@ (800bafc <_svfiprintf_r+0x1e8>)
 800ba6a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ba6e:	2206      	movs	r2, #6
 800ba70:	f7f4 fbae 	bl	80001d0 <memchr>
 800ba74:	2800      	cmp	r0, #0
 800ba76:	d036      	beq.n	800bae6 <_svfiprintf_r+0x1d2>
 800ba78:	4b21      	ldr	r3, [pc, #132]	@ (800bb00 <_svfiprintf_r+0x1ec>)
 800ba7a:	bb1b      	cbnz	r3, 800bac4 <_svfiprintf_r+0x1b0>
 800ba7c:	9b03      	ldr	r3, [sp, #12]
 800ba7e:	3307      	adds	r3, #7
 800ba80:	f023 0307 	bic.w	r3, r3, #7
 800ba84:	3308      	adds	r3, #8
 800ba86:	9303      	str	r3, [sp, #12]
 800ba88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba8a:	4433      	add	r3, r6
 800ba8c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba8e:	e76a      	b.n	800b966 <_svfiprintf_r+0x52>
 800ba90:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba94:	460c      	mov	r4, r1
 800ba96:	2001      	movs	r0, #1
 800ba98:	e7a8      	b.n	800b9ec <_svfiprintf_r+0xd8>
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	3401      	adds	r4, #1
 800ba9e:	9305      	str	r3, [sp, #20]
 800baa0:	4619      	mov	r1, r3
 800baa2:	f04f 0c0a 	mov.w	ip, #10
 800baa6:	4620      	mov	r0, r4
 800baa8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800baac:	3a30      	subs	r2, #48	@ 0x30
 800baae:	2a09      	cmp	r2, #9
 800bab0:	d903      	bls.n	800baba <_svfiprintf_r+0x1a6>
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d0c6      	beq.n	800ba44 <_svfiprintf_r+0x130>
 800bab6:	9105      	str	r1, [sp, #20]
 800bab8:	e7c4      	b.n	800ba44 <_svfiprintf_r+0x130>
 800baba:	fb0c 2101 	mla	r1, ip, r1, r2
 800babe:	4604      	mov	r4, r0
 800bac0:	2301      	movs	r3, #1
 800bac2:	e7f0      	b.n	800baa6 <_svfiprintf_r+0x192>
 800bac4:	ab03      	add	r3, sp, #12
 800bac6:	9300      	str	r3, [sp, #0]
 800bac8:	462a      	mov	r2, r5
 800baca:	4b0e      	ldr	r3, [pc, #56]	@ (800bb04 <_svfiprintf_r+0x1f0>)
 800bacc:	a904      	add	r1, sp, #16
 800bace:	4638      	mov	r0, r7
 800bad0:	f7fc fc7e 	bl	80083d0 <_printf_float>
 800bad4:	1c42      	adds	r2, r0, #1
 800bad6:	4606      	mov	r6, r0
 800bad8:	d1d6      	bne.n	800ba88 <_svfiprintf_r+0x174>
 800bada:	89ab      	ldrh	r3, [r5, #12]
 800badc:	065b      	lsls	r3, r3, #25
 800bade:	f53f af2d 	bmi.w	800b93c <_svfiprintf_r+0x28>
 800bae2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bae4:	e72c      	b.n	800b940 <_svfiprintf_r+0x2c>
 800bae6:	ab03      	add	r3, sp, #12
 800bae8:	9300      	str	r3, [sp, #0]
 800baea:	462a      	mov	r2, r5
 800baec:	4b05      	ldr	r3, [pc, #20]	@ (800bb04 <_svfiprintf_r+0x1f0>)
 800baee:	a904      	add	r1, sp, #16
 800baf0:	4638      	mov	r0, r7
 800baf2:	f7fc ff05 	bl	8008900 <_printf_i>
 800baf6:	e7ed      	b.n	800bad4 <_svfiprintf_r+0x1c0>
 800baf8:	0800da5b 	.word	0x0800da5b
 800bafc:	0800da65 	.word	0x0800da65
 800bb00:	080083d1 	.word	0x080083d1
 800bb04:	0800b85d 	.word	0x0800b85d
 800bb08:	0800da61 	.word	0x0800da61

0800bb0c <_sungetc_r>:
 800bb0c:	b538      	push	{r3, r4, r5, lr}
 800bb0e:	1c4b      	adds	r3, r1, #1
 800bb10:	4614      	mov	r4, r2
 800bb12:	d103      	bne.n	800bb1c <_sungetc_r+0x10>
 800bb14:	f04f 35ff 	mov.w	r5, #4294967295
 800bb18:	4628      	mov	r0, r5
 800bb1a:	bd38      	pop	{r3, r4, r5, pc}
 800bb1c:	8993      	ldrh	r3, [r2, #12]
 800bb1e:	f023 0320 	bic.w	r3, r3, #32
 800bb22:	8193      	strh	r3, [r2, #12]
 800bb24:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bb26:	6852      	ldr	r2, [r2, #4]
 800bb28:	b2cd      	uxtb	r5, r1
 800bb2a:	b18b      	cbz	r3, 800bb50 <_sungetc_r+0x44>
 800bb2c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800bb2e:	4293      	cmp	r3, r2
 800bb30:	dd08      	ble.n	800bb44 <_sungetc_r+0x38>
 800bb32:	6823      	ldr	r3, [r4, #0]
 800bb34:	1e5a      	subs	r2, r3, #1
 800bb36:	6022      	str	r2, [r4, #0]
 800bb38:	f803 5c01 	strb.w	r5, [r3, #-1]
 800bb3c:	6863      	ldr	r3, [r4, #4]
 800bb3e:	3301      	adds	r3, #1
 800bb40:	6063      	str	r3, [r4, #4]
 800bb42:	e7e9      	b.n	800bb18 <_sungetc_r+0xc>
 800bb44:	4621      	mov	r1, r4
 800bb46:	f000 fbe4 	bl	800c312 <__submore>
 800bb4a:	2800      	cmp	r0, #0
 800bb4c:	d0f1      	beq.n	800bb32 <_sungetc_r+0x26>
 800bb4e:	e7e1      	b.n	800bb14 <_sungetc_r+0x8>
 800bb50:	6921      	ldr	r1, [r4, #16]
 800bb52:	6823      	ldr	r3, [r4, #0]
 800bb54:	b151      	cbz	r1, 800bb6c <_sungetc_r+0x60>
 800bb56:	4299      	cmp	r1, r3
 800bb58:	d208      	bcs.n	800bb6c <_sungetc_r+0x60>
 800bb5a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800bb5e:	42a9      	cmp	r1, r5
 800bb60:	d104      	bne.n	800bb6c <_sungetc_r+0x60>
 800bb62:	3b01      	subs	r3, #1
 800bb64:	3201      	adds	r2, #1
 800bb66:	6023      	str	r3, [r4, #0]
 800bb68:	6062      	str	r2, [r4, #4]
 800bb6a:	e7d5      	b.n	800bb18 <_sungetc_r+0xc>
 800bb6c:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 800bb70:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bb74:	6363      	str	r3, [r4, #52]	@ 0x34
 800bb76:	2303      	movs	r3, #3
 800bb78:	63a3      	str	r3, [r4, #56]	@ 0x38
 800bb7a:	4623      	mov	r3, r4
 800bb7c:	f803 5f46 	strb.w	r5, [r3, #70]!
 800bb80:	6023      	str	r3, [r4, #0]
 800bb82:	2301      	movs	r3, #1
 800bb84:	e7dc      	b.n	800bb40 <_sungetc_r+0x34>

0800bb86 <__ssrefill_r>:
 800bb86:	b510      	push	{r4, lr}
 800bb88:	460c      	mov	r4, r1
 800bb8a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800bb8c:	b169      	cbz	r1, 800bbaa <__ssrefill_r+0x24>
 800bb8e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bb92:	4299      	cmp	r1, r3
 800bb94:	d001      	beq.n	800bb9a <__ssrefill_r+0x14>
 800bb96:	f7fe fa33 	bl	800a000 <_free_r>
 800bb9a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bb9c:	6063      	str	r3, [r4, #4]
 800bb9e:	2000      	movs	r0, #0
 800bba0:	6360      	str	r0, [r4, #52]	@ 0x34
 800bba2:	b113      	cbz	r3, 800bbaa <__ssrefill_r+0x24>
 800bba4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800bba6:	6023      	str	r3, [r4, #0]
 800bba8:	bd10      	pop	{r4, pc}
 800bbaa:	6923      	ldr	r3, [r4, #16]
 800bbac:	6023      	str	r3, [r4, #0]
 800bbae:	2300      	movs	r3, #0
 800bbb0:	6063      	str	r3, [r4, #4]
 800bbb2:	89a3      	ldrh	r3, [r4, #12]
 800bbb4:	f043 0320 	orr.w	r3, r3, #32
 800bbb8:	81a3      	strh	r3, [r4, #12]
 800bbba:	f04f 30ff 	mov.w	r0, #4294967295
 800bbbe:	e7f3      	b.n	800bba8 <__ssrefill_r+0x22>

0800bbc0 <__ssvfiscanf_r>:
 800bbc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbc4:	460c      	mov	r4, r1
 800bbc6:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 800bbca:	2100      	movs	r1, #0
 800bbcc:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800bbd0:	49a6      	ldr	r1, [pc, #664]	@ (800be6c <__ssvfiscanf_r+0x2ac>)
 800bbd2:	91a0      	str	r1, [sp, #640]	@ 0x280
 800bbd4:	f10d 0804 	add.w	r8, sp, #4
 800bbd8:	49a5      	ldr	r1, [pc, #660]	@ (800be70 <__ssvfiscanf_r+0x2b0>)
 800bbda:	4fa6      	ldr	r7, [pc, #664]	@ (800be74 <__ssvfiscanf_r+0x2b4>)
 800bbdc:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800bbe0:	4606      	mov	r6, r0
 800bbe2:	91a1      	str	r1, [sp, #644]	@ 0x284
 800bbe4:	9300      	str	r3, [sp, #0]
 800bbe6:	f892 9000 	ldrb.w	r9, [r2]
 800bbea:	f1b9 0f00 	cmp.w	r9, #0
 800bbee:	f000 8158 	beq.w	800bea2 <__ssvfiscanf_r+0x2e2>
 800bbf2:	f817 3009 	ldrb.w	r3, [r7, r9]
 800bbf6:	f013 0308 	ands.w	r3, r3, #8
 800bbfa:	f102 0501 	add.w	r5, r2, #1
 800bbfe:	d019      	beq.n	800bc34 <__ssvfiscanf_r+0x74>
 800bc00:	6863      	ldr	r3, [r4, #4]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	dd0f      	ble.n	800bc26 <__ssvfiscanf_r+0x66>
 800bc06:	6823      	ldr	r3, [r4, #0]
 800bc08:	781a      	ldrb	r2, [r3, #0]
 800bc0a:	5cba      	ldrb	r2, [r7, r2]
 800bc0c:	0712      	lsls	r2, r2, #28
 800bc0e:	d401      	bmi.n	800bc14 <__ssvfiscanf_r+0x54>
 800bc10:	462a      	mov	r2, r5
 800bc12:	e7e8      	b.n	800bbe6 <__ssvfiscanf_r+0x26>
 800bc14:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800bc16:	3201      	adds	r2, #1
 800bc18:	9245      	str	r2, [sp, #276]	@ 0x114
 800bc1a:	6862      	ldr	r2, [r4, #4]
 800bc1c:	3301      	adds	r3, #1
 800bc1e:	3a01      	subs	r2, #1
 800bc20:	6062      	str	r2, [r4, #4]
 800bc22:	6023      	str	r3, [r4, #0]
 800bc24:	e7ec      	b.n	800bc00 <__ssvfiscanf_r+0x40>
 800bc26:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800bc28:	4621      	mov	r1, r4
 800bc2a:	4630      	mov	r0, r6
 800bc2c:	4798      	blx	r3
 800bc2e:	2800      	cmp	r0, #0
 800bc30:	d0e9      	beq.n	800bc06 <__ssvfiscanf_r+0x46>
 800bc32:	e7ed      	b.n	800bc10 <__ssvfiscanf_r+0x50>
 800bc34:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 800bc38:	f040 8085 	bne.w	800bd46 <__ssvfiscanf_r+0x186>
 800bc3c:	9341      	str	r3, [sp, #260]	@ 0x104
 800bc3e:	9343      	str	r3, [sp, #268]	@ 0x10c
 800bc40:	7853      	ldrb	r3, [r2, #1]
 800bc42:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc44:	bf02      	ittt	eq
 800bc46:	2310      	moveq	r3, #16
 800bc48:	1c95      	addeq	r5, r2, #2
 800bc4a:	9341      	streq	r3, [sp, #260]	@ 0x104
 800bc4c:	220a      	movs	r2, #10
 800bc4e:	46aa      	mov	sl, r5
 800bc50:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800bc54:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800bc58:	2b09      	cmp	r3, #9
 800bc5a:	d91e      	bls.n	800bc9a <__ssvfiscanf_r+0xda>
 800bc5c:	f8df b218 	ldr.w	fp, [pc, #536]	@ 800be78 <__ssvfiscanf_r+0x2b8>
 800bc60:	2203      	movs	r2, #3
 800bc62:	4658      	mov	r0, fp
 800bc64:	f7f4 fab4 	bl	80001d0 <memchr>
 800bc68:	b138      	cbz	r0, 800bc7a <__ssvfiscanf_r+0xba>
 800bc6a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800bc6c:	eba0 000b 	sub.w	r0, r0, fp
 800bc70:	2301      	movs	r3, #1
 800bc72:	4083      	lsls	r3, r0
 800bc74:	4313      	orrs	r3, r2
 800bc76:	9341      	str	r3, [sp, #260]	@ 0x104
 800bc78:	4655      	mov	r5, sl
 800bc7a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bc7e:	2b78      	cmp	r3, #120	@ 0x78
 800bc80:	d806      	bhi.n	800bc90 <__ssvfiscanf_r+0xd0>
 800bc82:	2b57      	cmp	r3, #87	@ 0x57
 800bc84:	d810      	bhi.n	800bca8 <__ssvfiscanf_r+0xe8>
 800bc86:	2b25      	cmp	r3, #37	@ 0x25
 800bc88:	d05d      	beq.n	800bd46 <__ssvfiscanf_r+0x186>
 800bc8a:	d857      	bhi.n	800bd3c <__ssvfiscanf_r+0x17c>
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d075      	beq.n	800bd7c <__ssvfiscanf_r+0x1bc>
 800bc90:	2303      	movs	r3, #3
 800bc92:	9347      	str	r3, [sp, #284]	@ 0x11c
 800bc94:	230a      	movs	r3, #10
 800bc96:	9342      	str	r3, [sp, #264]	@ 0x108
 800bc98:	e088      	b.n	800bdac <__ssvfiscanf_r+0x1ec>
 800bc9a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800bc9c:	fb02 1103 	mla	r1, r2, r3, r1
 800bca0:	3930      	subs	r1, #48	@ 0x30
 800bca2:	9143      	str	r1, [sp, #268]	@ 0x10c
 800bca4:	4655      	mov	r5, sl
 800bca6:	e7d2      	b.n	800bc4e <__ssvfiscanf_r+0x8e>
 800bca8:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800bcac:	2a20      	cmp	r2, #32
 800bcae:	d8ef      	bhi.n	800bc90 <__ssvfiscanf_r+0xd0>
 800bcb0:	a101      	add	r1, pc, #4	@ (adr r1, 800bcb8 <__ssvfiscanf_r+0xf8>)
 800bcb2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800bcb6:	bf00      	nop
 800bcb8:	0800bd8b 	.word	0x0800bd8b
 800bcbc:	0800bc91 	.word	0x0800bc91
 800bcc0:	0800bc91 	.word	0x0800bc91
 800bcc4:	0800bde5 	.word	0x0800bde5
 800bcc8:	0800bc91 	.word	0x0800bc91
 800bccc:	0800bc91 	.word	0x0800bc91
 800bcd0:	0800bc91 	.word	0x0800bc91
 800bcd4:	0800bc91 	.word	0x0800bc91
 800bcd8:	0800bc91 	.word	0x0800bc91
 800bcdc:	0800bc91 	.word	0x0800bc91
 800bce0:	0800bc91 	.word	0x0800bc91
 800bce4:	0800bdfb 	.word	0x0800bdfb
 800bce8:	0800bde1 	.word	0x0800bde1
 800bcec:	0800bd43 	.word	0x0800bd43
 800bcf0:	0800bd43 	.word	0x0800bd43
 800bcf4:	0800bd43 	.word	0x0800bd43
 800bcf8:	0800bc91 	.word	0x0800bc91
 800bcfc:	0800bd9d 	.word	0x0800bd9d
 800bd00:	0800bc91 	.word	0x0800bc91
 800bd04:	0800bc91 	.word	0x0800bc91
 800bd08:	0800bc91 	.word	0x0800bc91
 800bd0c:	0800bc91 	.word	0x0800bc91
 800bd10:	0800be0b 	.word	0x0800be0b
 800bd14:	0800bda5 	.word	0x0800bda5
 800bd18:	0800bd83 	.word	0x0800bd83
 800bd1c:	0800bc91 	.word	0x0800bc91
 800bd20:	0800bc91 	.word	0x0800bc91
 800bd24:	0800be07 	.word	0x0800be07
 800bd28:	0800bc91 	.word	0x0800bc91
 800bd2c:	0800bde1 	.word	0x0800bde1
 800bd30:	0800bc91 	.word	0x0800bc91
 800bd34:	0800bc91 	.word	0x0800bc91
 800bd38:	0800bd8b 	.word	0x0800bd8b
 800bd3c:	3b45      	subs	r3, #69	@ 0x45
 800bd3e:	2b02      	cmp	r3, #2
 800bd40:	d8a6      	bhi.n	800bc90 <__ssvfiscanf_r+0xd0>
 800bd42:	2305      	movs	r3, #5
 800bd44:	e031      	b.n	800bdaa <__ssvfiscanf_r+0x1ea>
 800bd46:	6863      	ldr	r3, [r4, #4]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	dd0d      	ble.n	800bd68 <__ssvfiscanf_r+0x1a8>
 800bd4c:	6823      	ldr	r3, [r4, #0]
 800bd4e:	781a      	ldrb	r2, [r3, #0]
 800bd50:	454a      	cmp	r2, r9
 800bd52:	f040 80a6 	bne.w	800bea2 <__ssvfiscanf_r+0x2e2>
 800bd56:	3301      	adds	r3, #1
 800bd58:	6862      	ldr	r2, [r4, #4]
 800bd5a:	6023      	str	r3, [r4, #0]
 800bd5c:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800bd5e:	3a01      	subs	r2, #1
 800bd60:	3301      	adds	r3, #1
 800bd62:	6062      	str	r2, [r4, #4]
 800bd64:	9345      	str	r3, [sp, #276]	@ 0x114
 800bd66:	e753      	b.n	800bc10 <__ssvfiscanf_r+0x50>
 800bd68:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800bd6a:	4621      	mov	r1, r4
 800bd6c:	4630      	mov	r0, r6
 800bd6e:	4798      	blx	r3
 800bd70:	2800      	cmp	r0, #0
 800bd72:	d0eb      	beq.n	800bd4c <__ssvfiscanf_r+0x18c>
 800bd74:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800bd76:	2800      	cmp	r0, #0
 800bd78:	f040 808b 	bne.w	800be92 <__ssvfiscanf_r+0x2d2>
 800bd7c:	f04f 30ff 	mov.w	r0, #4294967295
 800bd80:	e08b      	b.n	800be9a <__ssvfiscanf_r+0x2da>
 800bd82:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800bd84:	f042 0220 	orr.w	r2, r2, #32
 800bd88:	9241      	str	r2, [sp, #260]	@ 0x104
 800bd8a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800bd8c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bd90:	9241      	str	r2, [sp, #260]	@ 0x104
 800bd92:	2210      	movs	r2, #16
 800bd94:	2b6e      	cmp	r3, #110	@ 0x6e
 800bd96:	9242      	str	r2, [sp, #264]	@ 0x108
 800bd98:	d902      	bls.n	800bda0 <__ssvfiscanf_r+0x1e0>
 800bd9a:	e005      	b.n	800bda8 <__ssvfiscanf_r+0x1e8>
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	9342      	str	r3, [sp, #264]	@ 0x108
 800bda0:	2303      	movs	r3, #3
 800bda2:	e002      	b.n	800bdaa <__ssvfiscanf_r+0x1ea>
 800bda4:	2308      	movs	r3, #8
 800bda6:	9342      	str	r3, [sp, #264]	@ 0x108
 800bda8:	2304      	movs	r3, #4
 800bdaa:	9347      	str	r3, [sp, #284]	@ 0x11c
 800bdac:	6863      	ldr	r3, [r4, #4]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	dd39      	ble.n	800be26 <__ssvfiscanf_r+0x266>
 800bdb2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800bdb4:	0659      	lsls	r1, r3, #25
 800bdb6:	d404      	bmi.n	800bdc2 <__ssvfiscanf_r+0x202>
 800bdb8:	6823      	ldr	r3, [r4, #0]
 800bdba:	781a      	ldrb	r2, [r3, #0]
 800bdbc:	5cba      	ldrb	r2, [r7, r2]
 800bdbe:	0712      	lsls	r2, r2, #28
 800bdc0:	d438      	bmi.n	800be34 <__ssvfiscanf_r+0x274>
 800bdc2:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800bdc4:	2b02      	cmp	r3, #2
 800bdc6:	dc47      	bgt.n	800be58 <__ssvfiscanf_r+0x298>
 800bdc8:	466b      	mov	r3, sp
 800bdca:	4622      	mov	r2, r4
 800bdcc:	a941      	add	r1, sp, #260	@ 0x104
 800bdce:	4630      	mov	r0, r6
 800bdd0:	f000 f86c 	bl	800beac <_scanf_chars>
 800bdd4:	2801      	cmp	r0, #1
 800bdd6:	d064      	beq.n	800bea2 <__ssvfiscanf_r+0x2e2>
 800bdd8:	2802      	cmp	r0, #2
 800bdda:	f47f af19 	bne.w	800bc10 <__ssvfiscanf_r+0x50>
 800bdde:	e7c9      	b.n	800bd74 <__ssvfiscanf_r+0x1b4>
 800bde0:	220a      	movs	r2, #10
 800bde2:	e7d7      	b.n	800bd94 <__ssvfiscanf_r+0x1d4>
 800bde4:	4629      	mov	r1, r5
 800bde6:	4640      	mov	r0, r8
 800bde8:	f000 fa5a 	bl	800c2a0 <__sccl>
 800bdec:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800bdee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bdf2:	9341      	str	r3, [sp, #260]	@ 0x104
 800bdf4:	4605      	mov	r5, r0
 800bdf6:	2301      	movs	r3, #1
 800bdf8:	e7d7      	b.n	800bdaa <__ssvfiscanf_r+0x1ea>
 800bdfa:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800bdfc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be00:	9341      	str	r3, [sp, #260]	@ 0x104
 800be02:	2300      	movs	r3, #0
 800be04:	e7d1      	b.n	800bdaa <__ssvfiscanf_r+0x1ea>
 800be06:	2302      	movs	r3, #2
 800be08:	e7cf      	b.n	800bdaa <__ssvfiscanf_r+0x1ea>
 800be0a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800be0c:	06c3      	lsls	r3, r0, #27
 800be0e:	f53f aeff 	bmi.w	800bc10 <__ssvfiscanf_r+0x50>
 800be12:	9b00      	ldr	r3, [sp, #0]
 800be14:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800be16:	1d19      	adds	r1, r3, #4
 800be18:	9100      	str	r1, [sp, #0]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	07c0      	lsls	r0, r0, #31
 800be1e:	bf4c      	ite	mi
 800be20:	801a      	strhmi	r2, [r3, #0]
 800be22:	601a      	strpl	r2, [r3, #0]
 800be24:	e6f4      	b.n	800bc10 <__ssvfiscanf_r+0x50>
 800be26:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800be28:	4621      	mov	r1, r4
 800be2a:	4630      	mov	r0, r6
 800be2c:	4798      	blx	r3
 800be2e:	2800      	cmp	r0, #0
 800be30:	d0bf      	beq.n	800bdb2 <__ssvfiscanf_r+0x1f2>
 800be32:	e79f      	b.n	800bd74 <__ssvfiscanf_r+0x1b4>
 800be34:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800be36:	3201      	adds	r2, #1
 800be38:	9245      	str	r2, [sp, #276]	@ 0x114
 800be3a:	6862      	ldr	r2, [r4, #4]
 800be3c:	3a01      	subs	r2, #1
 800be3e:	2a00      	cmp	r2, #0
 800be40:	6062      	str	r2, [r4, #4]
 800be42:	dd02      	ble.n	800be4a <__ssvfiscanf_r+0x28a>
 800be44:	3301      	adds	r3, #1
 800be46:	6023      	str	r3, [r4, #0]
 800be48:	e7b6      	b.n	800bdb8 <__ssvfiscanf_r+0x1f8>
 800be4a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800be4c:	4621      	mov	r1, r4
 800be4e:	4630      	mov	r0, r6
 800be50:	4798      	blx	r3
 800be52:	2800      	cmp	r0, #0
 800be54:	d0b0      	beq.n	800bdb8 <__ssvfiscanf_r+0x1f8>
 800be56:	e78d      	b.n	800bd74 <__ssvfiscanf_r+0x1b4>
 800be58:	2b04      	cmp	r3, #4
 800be5a:	dc0f      	bgt.n	800be7c <__ssvfiscanf_r+0x2bc>
 800be5c:	466b      	mov	r3, sp
 800be5e:	4622      	mov	r2, r4
 800be60:	a941      	add	r1, sp, #260	@ 0x104
 800be62:	4630      	mov	r0, r6
 800be64:	f000 f87c 	bl	800bf60 <_scanf_i>
 800be68:	e7b4      	b.n	800bdd4 <__ssvfiscanf_r+0x214>
 800be6a:	bf00      	nop
 800be6c:	0800bb0d 	.word	0x0800bb0d
 800be70:	0800bb87 	.word	0x0800bb87
 800be74:	0800dc79 	.word	0x0800dc79
 800be78:	0800da61 	.word	0x0800da61
 800be7c:	4b0a      	ldr	r3, [pc, #40]	@ (800bea8 <__ssvfiscanf_r+0x2e8>)
 800be7e:	2b00      	cmp	r3, #0
 800be80:	f43f aec6 	beq.w	800bc10 <__ssvfiscanf_r+0x50>
 800be84:	466b      	mov	r3, sp
 800be86:	4622      	mov	r2, r4
 800be88:	a941      	add	r1, sp, #260	@ 0x104
 800be8a:	4630      	mov	r0, r6
 800be8c:	f7fc fe56 	bl	8008b3c <_scanf_float>
 800be90:	e7a0      	b.n	800bdd4 <__ssvfiscanf_r+0x214>
 800be92:	89a3      	ldrh	r3, [r4, #12]
 800be94:	065b      	lsls	r3, r3, #25
 800be96:	f53f af71 	bmi.w	800bd7c <__ssvfiscanf_r+0x1bc>
 800be9a:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 800be9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bea2:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800bea4:	e7f9      	b.n	800be9a <__ssvfiscanf_r+0x2da>
 800bea6:	bf00      	nop
 800bea8:	08008b3d 	.word	0x08008b3d

0800beac <_scanf_chars>:
 800beac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800beb0:	4615      	mov	r5, r2
 800beb2:	688a      	ldr	r2, [r1, #8]
 800beb4:	4680      	mov	r8, r0
 800beb6:	460c      	mov	r4, r1
 800beb8:	b932      	cbnz	r2, 800bec8 <_scanf_chars+0x1c>
 800beba:	698a      	ldr	r2, [r1, #24]
 800bebc:	2a00      	cmp	r2, #0
 800bebe:	bf14      	ite	ne
 800bec0:	f04f 32ff 	movne.w	r2, #4294967295
 800bec4:	2201      	moveq	r2, #1
 800bec6:	608a      	str	r2, [r1, #8]
 800bec8:	6822      	ldr	r2, [r4, #0]
 800beca:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800bf5c <_scanf_chars+0xb0>
 800bece:	06d1      	lsls	r1, r2, #27
 800bed0:	bf5f      	itttt	pl
 800bed2:	681a      	ldrpl	r2, [r3, #0]
 800bed4:	1d11      	addpl	r1, r2, #4
 800bed6:	6019      	strpl	r1, [r3, #0]
 800bed8:	6816      	ldrpl	r6, [r2, #0]
 800beda:	2700      	movs	r7, #0
 800bedc:	69a0      	ldr	r0, [r4, #24]
 800bede:	b188      	cbz	r0, 800bf04 <_scanf_chars+0x58>
 800bee0:	2801      	cmp	r0, #1
 800bee2:	d107      	bne.n	800bef4 <_scanf_chars+0x48>
 800bee4:	682b      	ldr	r3, [r5, #0]
 800bee6:	781a      	ldrb	r2, [r3, #0]
 800bee8:	6963      	ldr	r3, [r4, #20]
 800beea:	5c9b      	ldrb	r3, [r3, r2]
 800beec:	b953      	cbnz	r3, 800bf04 <_scanf_chars+0x58>
 800beee:	2f00      	cmp	r7, #0
 800bef0:	d031      	beq.n	800bf56 <_scanf_chars+0xaa>
 800bef2:	e022      	b.n	800bf3a <_scanf_chars+0x8e>
 800bef4:	2802      	cmp	r0, #2
 800bef6:	d120      	bne.n	800bf3a <_scanf_chars+0x8e>
 800bef8:	682b      	ldr	r3, [r5, #0]
 800befa:	781b      	ldrb	r3, [r3, #0]
 800befc:	f819 3003 	ldrb.w	r3, [r9, r3]
 800bf00:	071b      	lsls	r3, r3, #28
 800bf02:	d41a      	bmi.n	800bf3a <_scanf_chars+0x8e>
 800bf04:	6823      	ldr	r3, [r4, #0]
 800bf06:	06da      	lsls	r2, r3, #27
 800bf08:	bf5e      	ittt	pl
 800bf0a:	682b      	ldrpl	r3, [r5, #0]
 800bf0c:	781b      	ldrbpl	r3, [r3, #0]
 800bf0e:	f806 3b01 	strbpl.w	r3, [r6], #1
 800bf12:	682a      	ldr	r2, [r5, #0]
 800bf14:	686b      	ldr	r3, [r5, #4]
 800bf16:	3201      	adds	r2, #1
 800bf18:	602a      	str	r2, [r5, #0]
 800bf1a:	68a2      	ldr	r2, [r4, #8]
 800bf1c:	3b01      	subs	r3, #1
 800bf1e:	3a01      	subs	r2, #1
 800bf20:	606b      	str	r3, [r5, #4]
 800bf22:	3701      	adds	r7, #1
 800bf24:	60a2      	str	r2, [r4, #8]
 800bf26:	b142      	cbz	r2, 800bf3a <_scanf_chars+0x8e>
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	dcd7      	bgt.n	800bedc <_scanf_chars+0x30>
 800bf2c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800bf30:	4629      	mov	r1, r5
 800bf32:	4640      	mov	r0, r8
 800bf34:	4798      	blx	r3
 800bf36:	2800      	cmp	r0, #0
 800bf38:	d0d0      	beq.n	800bedc <_scanf_chars+0x30>
 800bf3a:	6823      	ldr	r3, [r4, #0]
 800bf3c:	f013 0310 	ands.w	r3, r3, #16
 800bf40:	d105      	bne.n	800bf4e <_scanf_chars+0xa2>
 800bf42:	68e2      	ldr	r2, [r4, #12]
 800bf44:	3201      	adds	r2, #1
 800bf46:	60e2      	str	r2, [r4, #12]
 800bf48:	69a2      	ldr	r2, [r4, #24]
 800bf4a:	b102      	cbz	r2, 800bf4e <_scanf_chars+0xa2>
 800bf4c:	7033      	strb	r3, [r6, #0]
 800bf4e:	6923      	ldr	r3, [r4, #16]
 800bf50:	443b      	add	r3, r7
 800bf52:	6123      	str	r3, [r4, #16]
 800bf54:	2000      	movs	r0, #0
 800bf56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf5a:	bf00      	nop
 800bf5c:	0800dc79 	.word	0x0800dc79

0800bf60 <_scanf_i>:
 800bf60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf64:	4698      	mov	r8, r3
 800bf66:	4b74      	ldr	r3, [pc, #464]	@ (800c138 <_scanf_i+0x1d8>)
 800bf68:	460c      	mov	r4, r1
 800bf6a:	4682      	mov	sl, r0
 800bf6c:	4616      	mov	r6, r2
 800bf6e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bf72:	b087      	sub	sp, #28
 800bf74:	ab03      	add	r3, sp, #12
 800bf76:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800bf7a:	4b70      	ldr	r3, [pc, #448]	@ (800c13c <_scanf_i+0x1dc>)
 800bf7c:	69a1      	ldr	r1, [r4, #24]
 800bf7e:	4a70      	ldr	r2, [pc, #448]	@ (800c140 <_scanf_i+0x1e0>)
 800bf80:	2903      	cmp	r1, #3
 800bf82:	bf08      	it	eq
 800bf84:	461a      	moveq	r2, r3
 800bf86:	68a3      	ldr	r3, [r4, #8]
 800bf88:	9201      	str	r2, [sp, #4]
 800bf8a:	1e5a      	subs	r2, r3, #1
 800bf8c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800bf90:	bf88      	it	hi
 800bf92:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800bf96:	4627      	mov	r7, r4
 800bf98:	bf82      	ittt	hi
 800bf9a:	eb03 0905 	addhi.w	r9, r3, r5
 800bf9e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800bfa2:	60a3      	strhi	r3, [r4, #8]
 800bfa4:	f857 3b1c 	ldr.w	r3, [r7], #28
 800bfa8:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800bfac:	bf98      	it	ls
 800bfae:	f04f 0900 	movls.w	r9, #0
 800bfb2:	6023      	str	r3, [r4, #0]
 800bfb4:	463d      	mov	r5, r7
 800bfb6:	f04f 0b00 	mov.w	fp, #0
 800bfba:	6831      	ldr	r1, [r6, #0]
 800bfbc:	ab03      	add	r3, sp, #12
 800bfbe:	7809      	ldrb	r1, [r1, #0]
 800bfc0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800bfc4:	2202      	movs	r2, #2
 800bfc6:	f7f4 f903 	bl	80001d0 <memchr>
 800bfca:	b328      	cbz	r0, 800c018 <_scanf_i+0xb8>
 800bfcc:	f1bb 0f01 	cmp.w	fp, #1
 800bfd0:	d159      	bne.n	800c086 <_scanf_i+0x126>
 800bfd2:	6862      	ldr	r2, [r4, #4]
 800bfd4:	b92a      	cbnz	r2, 800bfe2 <_scanf_i+0x82>
 800bfd6:	6822      	ldr	r2, [r4, #0]
 800bfd8:	2108      	movs	r1, #8
 800bfda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bfde:	6061      	str	r1, [r4, #4]
 800bfe0:	6022      	str	r2, [r4, #0]
 800bfe2:	6822      	ldr	r2, [r4, #0]
 800bfe4:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800bfe8:	6022      	str	r2, [r4, #0]
 800bfea:	68a2      	ldr	r2, [r4, #8]
 800bfec:	1e51      	subs	r1, r2, #1
 800bfee:	60a1      	str	r1, [r4, #8]
 800bff0:	b192      	cbz	r2, 800c018 <_scanf_i+0xb8>
 800bff2:	6832      	ldr	r2, [r6, #0]
 800bff4:	1c51      	adds	r1, r2, #1
 800bff6:	6031      	str	r1, [r6, #0]
 800bff8:	7812      	ldrb	r2, [r2, #0]
 800bffa:	f805 2b01 	strb.w	r2, [r5], #1
 800bffe:	6872      	ldr	r2, [r6, #4]
 800c000:	3a01      	subs	r2, #1
 800c002:	2a00      	cmp	r2, #0
 800c004:	6072      	str	r2, [r6, #4]
 800c006:	dc07      	bgt.n	800c018 <_scanf_i+0xb8>
 800c008:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800c00c:	4631      	mov	r1, r6
 800c00e:	4650      	mov	r0, sl
 800c010:	4790      	blx	r2
 800c012:	2800      	cmp	r0, #0
 800c014:	f040 8085 	bne.w	800c122 <_scanf_i+0x1c2>
 800c018:	f10b 0b01 	add.w	fp, fp, #1
 800c01c:	f1bb 0f03 	cmp.w	fp, #3
 800c020:	d1cb      	bne.n	800bfba <_scanf_i+0x5a>
 800c022:	6863      	ldr	r3, [r4, #4]
 800c024:	b90b      	cbnz	r3, 800c02a <_scanf_i+0xca>
 800c026:	230a      	movs	r3, #10
 800c028:	6063      	str	r3, [r4, #4]
 800c02a:	6863      	ldr	r3, [r4, #4]
 800c02c:	4945      	ldr	r1, [pc, #276]	@ (800c144 <_scanf_i+0x1e4>)
 800c02e:	6960      	ldr	r0, [r4, #20]
 800c030:	1ac9      	subs	r1, r1, r3
 800c032:	f000 f935 	bl	800c2a0 <__sccl>
 800c036:	f04f 0b00 	mov.w	fp, #0
 800c03a:	68a3      	ldr	r3, [r4, #8]
 800c03c:	6822      	ldr	r2, [r4, #0]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d03d      	beq.n	800c0be <_scanf_i+0x15e>
 800c042:	6831      	ldr	r1, [r6, #0]
 800c044:	6960      	ldr	r0, [r4, #20]
 800c046:	f891 c000 	ldrb.w	ip, [r1]
 800c04a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800c04e:	2800      	cmp	r0, #0
 800c050:	d035      	beq.n	800c0be <_scanf_i+0x15e>
 800c052:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800c056:	d124      	bne.n	800c0a2 <_scanf_i+0x142>
 800c058:	0510      	lsls	r0, r2, #20
 800c05a:	d522      	bpl.n	800c0a2 <_scanf_i+0x142>
 800c05c:	f10b 0b01 	add.w	fp, fp, #1
 800c060:	f1b9 0f00 	cmp.w	r9, #0
 800c064:	d003      	beq.n	800c06e <_scanf_i+0x10e>
 800c066:	3301      	adds	r3, #1
 800c068:	f109 39ff 	add.w	r9, r9, #4294967295
 800c06c:	60a3      	str	r3, [r4, #8]
 800c06e:	6873      	ldr	r3, [r6, #4]
 800c070:	3b01      	subs	r3, #1
 800c072:	2b00      	cmp	r3, #0
 800c074:	6073      	str	r3, [r6, #4]
 800c076:	dd1b      	ble.n	800c0b0 <_scanf_i+0x150>
 800c078:	6833      	ldr	r3, [r6, #0]
 800c07a:	3301      	adds	r3, #1
 800c07c:	6033      	str	r3, [r6, #0]
 800c07e:	68a3      	ldr	r3, [r4, #8]
 800c080:	3b01      	subs	r3, #1
 800c082:	60a3      	str	r3, [r4, #8]
 800c084:	e7d9      	b.n	800c03a <_scanf_i+0xda>
 800c086:	f1bb 0f02 	cmp.w	fp, #2
 800c08a:	d1ae      	bne.n	800bfea <_scanf_i+0x8a>
 800c08c:	6822      	ldr	r2, [r4, #0]
 800c08e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800c092:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800c096:	d1c4      	bne.n	800c022 <_scanf_i+0xc2>
 800c098:	2110      	movs	r1, #16
 800c09a:	6061      	str	r1, [r4, #4]
 800c09c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c0a0:	e7a2      	b.n	800bfe8 <_scanf_i+0x88>
 800c0a2:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800c0a6:	6022      	str	r2, [r4, #0]
 800c0a8:	780b      	ldrb	r3, [r1, #0]
 800c0aa:	f805 3b01 	strb.w	r3, [r5], #1
 800c0ae:	e7de      	b.n	800c06e <_scanf_i+0x10e>
 800c0b0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800c0b4:	4631      	mov	r1, r6
 800c0b6:	4650      	mov	r0, sl
 800c0b8:	4798      	blx	r3
 800c0ba:	2800      	cmp	r0, #0
 800c0bc:	d0df      	beq.n	800c07e <_scanf_i+0x11e>
 800c0be:	6823      	ldr	r3, [r4, #0]
 800c0c0:	05d9      	lsls	r1, r3, #23
 800c0c2:	d50d      	bpl.n	800c0e0 <_scanf_i+0x180>
 800c0c4:	42bd      	cmp	r5, r7
 800c0c6:	d909      	bls.n	800c0dc <_scanf_i+0x17c>
 800c0c8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c0cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c0d0:	4632      	mov	r2, r6
 800c0d2:	4650      	mov	r0, sl
 800c0d4:	4798      	blx	r3
 800c0d6:	f105 39ff 	add.w	r9, r5, #4294967295
 800c0da:	464d      	mov	r5, r9
 800c0dc:	42bd      	cmp	r5, r7
 800c0de:	d028      	beq.n	800c132 <_scanf_i+0x1d2>
 800c0e0:	6822      	ldr	r2, [r4, #0]
 800c0e2:	f012 0210 	ands.w	r2, r2, #16
 800c0e6:	d113      	bne.n	800c110 <_scanf_i+0x1b0>
 800c0e8:	702a      	strb	r2, [r5, #0]
 800c0ea:	6863      	ldr	r3, [r4, #4]
 800c0ec:	9e01      	ldr	r6, [sp, #4]
 800c0ee:	4639      	mov	r1, r7
 800c0f0:	4650      	mov	r0, sl
 800c0f2:	47b0      	blx	r6
 800c0f4:	f8d8 3000 	ldr.w	r3, [r8]
 800c0f8:	6821      	ldr	r1, [r4, #0]
 800c0fa:	1d1a      	adds	r2, r3, #4
 800c0fc:	f8c8 2000 	str.w	r2, [r8]
 800c100:	f011 0f20 	tst.w	r1, #32
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	d00f      	beq.n	800c128 <_scanf_i+0x1c8>
 800c108:	6018      	str	r0, [r3, #0]
 800c10a:	68e3      	ldr	r3, [r4, #12]
 800c10c:	3301      	adds	r3, #1
 800c10e:	60e3      	str	r3, [r4, #12]
 800c110:	6923      	ldr	r3, [r4, #16]
 800c112:	1bed      	subs	r5, r5, r7
 800c114:	445d      	add	r5, fp
 800c116:	442b      	add	r3, r5
 800c118:	6123      	str	r3, [r4, #16]
 800c11a:	2000      	movs	r0, #0
 800c11c:	b007      	add	sp, #28
 800c11e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c122:	f04f 0b00 	mov.w	fp, #0
 800c126:	e7ca      	b.n	800c0be <_scanf_i+0x15e>
 800c128:	07ca      	lsls	r2, r1, #31
 800c12a:	bf4c      	ite	mi
 800c12c:	8018      	strhmi	r0, [r3, #0]
 800c12e:	6018      	strpl	r0, [r3, #0]
 800c130:	e7eb      	b.n	800c10a <_scanf_i+0x1aa>
 800c132:	2001      	movs	r0, #1
 800c134:	e7f2      	b.n	800c11c <_scanf_i+0x1bc>
 800c136:	bf00      	nop
 800c138:	0800d278 	.word	0x0800d278
 800c13c:	0800b859 	.word	0x0800b859
 800c140:	0800cc45 	.word	0x0800cc45
 800c144:	0800da7c 	.word	0x0800da7c

0800c148 <__sflush_r>:
 800c148:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c14c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c150:	0716      	lsls	r6, r2, #28
 800c152:	4605      	mov	r5, r0
 800c154:	460c      	mov	r4, r1
 800c156:	d454      	bmi.n	800c202 <__sflush_r+0xba>
 800c158:	684b      	ldr	r3, [r1, #4]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	dc02      	bgt.n	800c164 <__sflush_r+0x1c>
 800c15e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c160:	2b00      	cmp	r3, #0
 800c162:	dd48      	ble.n	800c1f6 <__sflush_r+0xae>
 800c164:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c166:	2e00      	cmp	r6, #0
 800c168:	d045      	beq.n	800c1f6 <__sflush_r+0xae>
 800c16a:	2300      	movs	r3, #0
 800c16c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c170:	682f      	ldr	r7, [r5, #0]
 800c172:	6a21      	ldr	r1, [r4, #32]
 800c174:	602b      	str	r3, [r5, #0]
 800c176:	d030      	beq.n	800c1da <__sflush_r+0x92>
 800c178:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c17a:	89a3      	ldrh	r3, [r4, #12]
 800c17c:	0759      	lsls	r1, r3, #29
 800c17e:	d505      	bpl.n	800c18c <__sflush_r+0x44>
 800c180:	6863      	ldr	r3, [r4, #4]
 800c182:	1ad2      	subs	r2, r2, r3
 800c184:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c186:	b10b      	cbz	r3, 800c18c <__sflush_r+0x44>
 800c188:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c18a:	1ad2      	subs	r2, r2, r3
 800c18c:	2300      	movs	r3, #0
 800c18e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c190:	6a21      	ldr	r1, [r4, #32]
 800c192:	4628      	mov	r0, r5
 800c194:	47b0      	blx	r6
 800c196:	1c43      	adds	r3, r0, #1
 800c198:	89a3      	ldrh	r3, [r4, #12]
 800c19a:	d106      	bne.n	800c1aa <__sflush_r+0x62>
 800c19c:	6829      	ldr	r1, [r5, #0]
 800c19e:	291d      	cmp	r1, #29
 800c1a0:	d82b      	bhi.n	800c1fa <__sflush_r+0xb2>
 800c1a2:	4a2a      	ldr	r2, [pc, #168]	@ (800c24c <__sflush_r+0x104>)
 800c1a4:	40ca      	lsrs	r2, r1
 800c1a6:	07d6      	lsls	r6, r2, #31
 800c1a8:	d527      	bpl.n	800c1fa <__sflush_r+0xb2>
 800c1aa:	2200      	movs	r2, #0
 800c1ac:	6062      	str	r2, [r4, #4]
 800c1ae:	04d9      	lsls	r1, r3, #19
 800c1b0:	6922      	ldr	r2, [r4, #16]
 800c1b2:	6022      	str	r2, [r4, #0]
 800c1b4:	d504      	bpl.n	800c1c0 <__sflush_r+0x78>
 800c1b6:	1c42      	adds	r2, r0, #1
 800c1b8:	d101      	bne.n	800c1be <__sflush_r+0x76>
 800c1ba:	682b      	ldr	r3, [r5, #0]
 800c1bc:	b903      	cbnz	r3, 800c1c0 <__sflush_r+0x78>
 800c1be:	6560      	str	r0, [r4, #84]	@ 0x54
 800c1c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c1c2:	602f      	str	r7, [r5, #0]
 800c1c4:	b1b9      	cbz	r1, 800c1f6 <__sflush_r+0xae>
 800c1c6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c1ca:	4299      	cmp	r1, r3
 800c1cc:	d002      	beq.n	800c1d4 <__sflush_r+0x8c>
 800c1ce:	4628      	mov	r0, r5
 800c1d0:	f7fd ff16 	bl	800a000 <_free_r>
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	6363      	str	r3, [r4, #52]	@ 0x34
 800c1d8:	e00d      	b.n	800c1f6 <__sflush_r+0xae>
 800c1da:	2301      	movs	r3, #1
 800c1dc:	4628      	mov	r0, r5
 800c1de:	47b0      	blx	r6
 800c1e0:	4602      	mov	r2, r0
 800c1e2:	1c50      	adds	r0, r2, #1
 800c1e4:	d1c9      	bne.n	800c17a <__sflush_r+0x32>
 800c1e6:	682b      	ldr	r3, [r5, #0]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d0c6      	beq.n	800c17a <__sflush_r+0x32>
 800c1ec:	2b1d      	cmp	r3, #29
 800c1ee:	d001      	beq.n	800c1f4 <__sflush_r+0xac>
 800c1f0:	2b16      	cmp	r3, #22
 800c1f2:	d11e      	bne.n	800c232 <__sflush_r+0xea>
 800c1f4:	602f      	str	r7, [r5, #0]
 800c1f6:	2000      	movs	r0, #0
 800c1f8:	e022      	b.n	800c240 <__sflush_r+0xf8>
 800c1fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c1fe:	b21b      	sxth	r3, r3
 800c200:	e01b      	b.n	800c23a <__sflush_r+0xf2>
 800c202:	690f      	ldr	r7, [r1, #16]
 800c204:	2f00      	cmp	r7, #0
 800c206:	d0f6      	beq.n	800c1f6 <__sflush_r+0xae>
 800c208:	0793      	lsls	r3, r2, #30
 800c20a:	680e      	ldr	r6, [r1, #0]
 800c20c:	bf08      	it	eq
 800c20e:	694b      	ldreq	r3, [r1, #20]
 800c210:	600f      	str	r7, [r1, #0]
 800c212:	bf18      	it	ne
 800c214:	2300      	movne	r3, #0
 800c216:	eba6 0807 	sub.w	r8, r6, r7
 800c21a:	608b      	str	r3, [r1, #8]
 800c21c:	f1b8 0f00 	cmp.w	r8, #0
 800c220:	dde9      	ble.n	800c1f6 <__sflush_r+0xae>
 800c222:	6a21      	ldr	r1, [r4, #32]
 800c224:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c226:	4643      	mov	r3, r8
 800c228:	463a      	mov	r2, r7
 800c22a:	4628      	mov	r0, r5
 800c22c:	47b0      	blx	r6
 800c22e:	2800      	cmp	r0, #0
 800c230:	dc08      	bgt.n	800c244 <__sflush_r+0xfc>
 800c232:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c236:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c23a:	81a3      	strh	r3, [r4, #12]
 800c23c:	f04f 30ff 	mov.w	r0, #4294967295
 800c240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c244:	4407      	add	r7, r0
 800c246:	eba8 0800 	sub.w	r8, r8, r0
 800c24a:	e7e7      	b.n	800c21c <__sflush_r+0xd4>
 800c24c:	20400001 	.word	0x20400001

0800c250 <_fflush_r>:
 800c250:	b538      	push	{r3, r4, r5, lr}
 800c252:	690b      	ldr	r3, [r1, #16]
 800c254:	4605      	mov	r5, r0
 800c256:	460c      	mov	r4, r1
 800c258:	b913      	cbnz	r3, 800c260 <_fflush_r+0x10>
 800c25a:	2500      	movs	r5, #0
 800c25c:	4628      	mov	r0, r5
 800c25e:	bd38      	pop	{r3, r4, r5, pc}
 800c260:	b118      	cbz	r0, 800c26a <_fflush_r+0x1a>
 800c262:	6a03      	ldr	r3, [r0, #32]
 800c264:	b90b      	cbnz	r3, 800c26a <_fflush_r+0x1a>
 800c266:	f7fc ff03 	bl	8009070 <__sinit>
 800c26a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d0f3      	beq.n	800c25a <_fflush_r+0xa>
 800c272:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c274:	07d0      	lsls	r0, r2, #31
 800c276:	d404      	bmi.n	800c282 <_fflush_r+0x32>
 800c278:	0599      	lsls	r1, r3, #22
 800c27a:	d402      	bmi.n	800c282 <_fflush_r+0x32>
 800c27c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c27e:	f7fd f84e 	bl	800931e <__retarget_lock_acquire_recursive>
 800c282:	4628      	mov	r0, r5
 800c284:	4621      	mov	r1, r4
 800c286:	f7ff ff5f 	bl	800c148 <__sflush_r>
 800c28a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c28c:	07da      	lsls	r2, r3, #31
 800c28e:	4605      	mov	r5, r0
 800c290:	d4e4      	bmi.n	800c25c <_fflush_r+0xc>
 800c292:	89a3      	ldrh	r3, [r4, #12]
 800c294:	059b      	lsls	r3, r3, #22
 800c296:	d4e1      	bmi.n	800c25c <_fflush_r+0xc>
 800c298:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c29a:	f7fd f841 	bl	8009320 <__retarget_lock_release_recursive>
 800c29e:	e7dd      	b.n	800c25c <_fflush_r+0xc>

0800c2a0 <__sccl>:
 800c2a0:	b570      	push	{r4, r5, r6, lr}
 800c2a2:	780b      	ldrb	r3, [r1, #0]
 800c2a4:	4604      	mov	r4, r0
 800c2a6:	2b5e      	cmp	r3, #94	@ 0x5e
 800c2a8:	bf0b      	itete	eq
 800c2aa:	784b      	ldrbeq	r3, [r1, #1]
 800c2ac:	1c4a      	addne	r2, r1, #1
 800c2ae:	1c8a      	addeq	r2, r1, #2
 800c2b0:	2100      	movne	r1, #0
 800c2b2:	bf08      	it	eq
 800c2b4:	2101      	moveq	r1, #1
 800c2b6:	3801      	subs	r0, #1
 800c2b8:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800c2bc:	f800 1f01 	strb.w	r1, [r0, #1]!
 800c2c0:	42a8      	cmp	r0, r5
 800c2c2:	d1fb      	bne.n	800c2bc <__sccl+0x1c>
 800c2c4:	b90b      	cbnz	r3, 800c2ca <__sccl+0x2a>
 800c2c6:	1e50      	subs	r0, r2, #1
 800c2c8:	bd70      	pop	{r4, r5, r6, pc}
 800c2ca:	f081 0101 	eor.w	r1, r1, #1
 800c2ce:	54e1      	strb	r1, [r4, r3]
 800c2d0:	4610      	mov	r0, r2
 800c2d2:	4602      	mov	r2, r0
 800c2d4:	f812 5b01 	ldrb.w	r5, [r2], #1
 800c2d8:	2d2d      	cmp	r5, #45	@ 0x2d
 800c2da:	d005      	beq.n	800c2e8 <__sccl+0x48>
 800c2dc:	2d5d      	cmp	r5, #93	@ 0x5d
 800c2de:	d016      	beq.n	800c30e <__sccl+0x6e>
 800c2e0:	2d00      	cmp	r5, #0
 800c2e2:	d0f1      	beq.n	800c2c8 <__sccl+0x28>
 800c2e4:	462b      	mov	r3, r5
 800c2e6:	e7f2      	b.n	800c2ce <__sccl+0x2e>
 800c2e8:	7846      	ldrb	r6, [r0, #1]
 800c2ea:	2e5d      	cmp	r6, #93	@ 0x5d
 800c2ec:	d0fa      	beq.n	800c2e4 <__sccl+0x44>
 800c2ee:	42b3      	cmp	r3, r6
 800c2f0:	dcf8      	bgt.n	800c2e4 <__sccl+0x44>
 800c2f2:	3002      	adds	r0, #2
 800c2f4:	461a      	mov	r2, r3
 800c2f6:	3201      	adds	r2, #1
 800c2f8:	4296      	cmp	r6, r2
 800c2fa:	54a1      	strb	r1, [r4, r2]
 800c2fc:	dcfb      	bgt.n	800c2f6 <__sccl+0x56>
 800c2fe:	1af2      	subs	r2, r6, r3
 800c300:	3a01      	subs	r2, #1
 800c302:	1c5d      	adds	r5, r3, #1
 800c304:	42b3      	cmp	r3, r6
 800c306:	bfa8      	it	ge
 800c308:	2200      	movge	r2, #0
 800c30a:	18ab      	adds	r3, r5, r2
 800c30c:	e7e1      	b.n	800c2d2 <__sccl+0x32>
 800c30e:	4610      	mov	r0, r2
 800c310:	e7da      	b.n	800c2c8 <__sccl+0x28>

0800c312 <__submore>:
 800c312:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c316:	460c      	mov	r4, r1
 800c318:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800c31a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c31e:	4299      	cmp	r1, r3
 800c320:	d11d      	bne.n	800c35e <__submore+0x4c>
 800c322:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800c326:	f7fd fedf 	bl	800a0e8 <_malloc_r>
 800c32a:	b918      	cbnz	r0, 800c334 <__submore+0x22>
 800c32c:	f04f 30ff 	mov.w	r0, #4294967295
 800c330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c334:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c338:	63a3      	str	r3, [r4, #56]	@ 0x38
 800c33a:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800c33e:	6360      	str	r0, [r4, #52]	@ 0x34
 800c340:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800c344:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800c348:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800c34c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800c350:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800c354:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800c358:	6020      	str	r0, [r4, #0]
 800c35a:	2000      	movs	r0, #0
 800c35c:	e7e8      	b.n	800c330 <__submore+0x1e>
 800c35e:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800c360:	0077      	lsls	r7, r6, #1
 800c362:	463a      	mov	r2, r7
 800c364:	f000 fbd1 	bl	800cb0a <_realloc_r>
 800c368:	4605      	mov	r5, r0
 800c36a:	2800      	cmp	r0, #0
 800c36c:	d0de      	beq.n	800c32c <__submore+0x1a>
 800c36e:	eb00 0806 	add.w	r8, r0, r6
 800c372:	4601      	mov	r1, r0
 800c374:	4632      	mov	r2, r6
 800c376:	4640      	mov	r0, r8
 800c378:	f7fc ffd3 	bl	8009322 <memcpy>
 800c37c:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800c380:	f8c4 8000 	str.w	r8, [r4]
 800c384:	e7e9      	b.n	800c35a <__submore+0x48>

0800c386 <memmove>:
 800c386:	4288      	cmp	r0, r1
 800c388:	b510      	push	{r4, lr}
 800c38a:	eb01 0402 	add.w	r4, r1, r2
 800c38e:	d902      	bls.n	800c396 <memmove+0x10>
 800c390:	4284      	cmp	r4, r0
 800c392:	4623      	mov	r3, r4
 800c394:	d807      	bhi.n	800c3a6 <memmove+0x20>
 800c396:	1e43      	subs	r3, r0, #1
 800c398:	42a1      	cmp	r1, r4
 800c39a:	d008      	beq.n	800c3ae <memmove+0x28>
 800c39c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c3a0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c3a4:	e7f8      	b.n	800c398 <memmove+0x12>
 800c3a6:	4402      	add	r2, r0
 800c3a8:	4601      	mov	r1, r0
 800c3aa:	428a      	cmp	r2, r1
 800c3ac:	d100      	bne.n	800c3b0 <memmove+0x2a>
 800c3ae:	bd10      	pop	{r4, pc}
 800c3b0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c3b4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c3b8:	e7f7      	b.n	800c3aa <memmove+0x24>

0800c3ba <strncmp>:
 800c3ba:	b510      	push	{r4, lr}
 800c3bc:	b16a      	cbz	r2, 800c3da <strncmp+0x20>
 800c3be:	3901      	subs	r1, #1
 800c3c0:	1884      	adds	r4, r0, r2
 800c3c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c3c6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c3ca:	429a      	cmp	r2, r3
 800c3cc:	d103      	bne.n	800c3d6 <strncmp+0x1c>
 800c3ce:	42a0      	cmp	r0, r4
 800c3d0:	d001      	beq.n	800c3d6 <strncmp+0x1c>
 800c3d2:	2a00      	cmp	r2, #0
 800c3d4:	d1f5      	bne.n	800c3c2 <strncmp+0x8>
 800c3d6:	1ad0      	subs	r0, r2, r3
 800c3d8:	bd10      	pop	{r4, pc}
 800c3da:	4610      	mov	r0, r2
 800c3dc:	e7fc      	b.n	800c3d8 <strncmp+0x1e>
	...

0800c3e0 <_sbrk_r>:
 800c3e0:	b538      	push	{r3, r4, r5, lr}
 800c3e2:	4d06      	ldr	r5, [pc, #24]	@ (800c3fc <_sbrk_r+0x1c>)
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	4604      	mov	r4, r0
 800c3e8:	4608      	mov	r0, r1
 800c3ea:	602b      	str	r3, [r5, #0]
 800c3ec:	f7f5 fcd0 	bl	8001d90 <_sbrk>
 800c3f0:	1c43      	adds	r3, r0, #1
 800c3f2:	d102      	bne.n	800c3fa <_sbrk_r+0x1a>
 800c3f4:	682b      	ldr	r3, [r5, #0]
 800c3f6:	b103      	cbz	r3, 800c3fa <_sbrk_r+0x1a>
 800c3f8:	6023      	str	r3, [r4, #0]
 800c3fa:	bd38      	pop	{r3, r4, r5, pc}
 800c3fc:	20001180 	.word	0x20001180

0800c400 <nan>:
 800c400:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c408 <nan+0x8>
 800c404:	4770      	bx	lr
 800c406:	bf00      	nop
 800c408:	00000000 	.word	0x00000000
 800c40c:	7ff80000 	.word	0x7ff80000

0800c410 <__assert_func>:
 800c410:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c412:	4614      	mov	r4, r2
 800c414:	461a      	mov	r2, r3
 800c416:	4b09      	ldr	r3, [pc, #36]	@ (800c43c <__assert_func+0x2c>)
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	4605      	mov	r5, r0
 800c41c:	68d8      	ldr	r0, [r3, #12]
 800c41e:	b14c      	cbz	r4, 800c434 <__assert_func+0x24>
 800c420:	4b07      	ldr	r3, [pc, #28]	@ (800c440 <__assert_func+0x30>)
 800c422:	9100      	str	r1, [sp, #0]
 800c424:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c428:	4906      	ldr	r1, [pc, #24]	@ (800c444 <__assert_func+0x34>)
 800c42a:	462b      	mov	r3, r5
 800c42c:	f000 fc1a 	bl	800cc64 <fiprintf>
 800c430:	f000 fc2a 	bl	800cc88 <abort>
 800c434:	4b04      	ldr	r3, [pc, #16]	@ (800c448 <__assert_func+0x38>)
 800c436:	461c      	mov	r4, r3
 800c438:	e7f3      	b.n	800c422 <__assert_func+0x12>
 800c43a:	bf00      	nop
 800c43c:	20000038 	.word	0x20000038
 800c440:	0800da8f 	.word	0x0800da8f
 800c444:	0800da9c 	.word	0x0800da9c
 800c448:	0800daca 	.word	0x0800daca

0800c44c <_calloc_r>:
 800c44c:	b570      	push	{r4, r5, r6, lr}
 800c44e:	fba1 5402 	umull	r5, r4, r1, r2
 800c452:	b934      	cbnz	r4, 800c462 <_calloc_r+0x16>
 800c454:	4629      	mov	r1, r5
 800c456:	f7fd fe47 	bl	800a0e8 <_malloc_r>
 800c45a:	4606      	mov	r6, r0
 800c45c:	b928      	cbnz	r0, 800c46a <_calloc_r+0x1e>
 800c45e:	4630      	mov	r0, r6
 800c460:	bd70      	pop	{r4, r5, r6, pc}
 800c462:	220c      	movs	r2, #12
 800c464:	6002      	str	r2, [r0, #0]
 800c466:	2600      	movs	r6, #0
 800c468:	e7f9      	b.n	800c45e <_calloc_r+0x12>
 800c46a:	462a      	mov	r2, r5
 800c46c:	4621      	mov	r1, r4
 800c46e:	f7fc fed8 	bl	8009222 <memset>
 800c472:	e7f4      	b.n	800c45e <_calloc_r+0x12>

0800c474 <rshift>:
 800c474:	6903      	ldr	r3, [r0, #16]
 800c476:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c47a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c47e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c482:	f100 0414 	add.w	r4, r0, #20
 800c486:	dd45      	ble.n	800c514 <rshift+0xa0>
 800c488:	f011 011f 	ands.w	r1, r1, #31
 800c48c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c490:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c494:	d10c      	bne.n	800c4b0 <rshift+0x3c>
 800c496:	f100 0710 	add.w	r7, r0, #16
 800c49a:	4629      	mov	r1, r5
 800c49c:	42b1      	cmp	r1, r6
 800c49e:	d334      	bcc.n	800c50a <rshift+0x96>
 800c4a0:	1a9b      	subs	r3, r3, r2
 800c4a2:	009b      	lsls	r3, r3, #2
 800c4a4:	1eea      	subs	r2, r5, #3
 800c4a6:	4296      	cmp	r6, r2
 800c4a8:	bf38      	it	cc
 800c4aa:	2300      	movcc	r3, #0
 800c4ac:	4423      	add	r3, r4
 800c4ae:	e015      	b.n	800c4dc <rshift+0x68>
 800c4b0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c4b4:	f1c1 0820 	rsb	r8, r1, #32
 800c4b8:	40cf      	lsrs	r7, r1
 800c4ba:	f105 0e04 	add.w	lr, r5, #4
 800c4be:	46a1      	mov	r9, r4
 800c4c0:	4576      	cmp	r6, lr
 800c4c2:	46f4      	mov	ip, lr
 800c4c4:	d815      	bhi.n	800c4f2 <rshift+0x7e>
 800c4c6:	1a9a      	subs	r2, r3, r2
 800c4c8:	0092      	lsls	r2, r2, #2
 800c4ca:	3a04      	subs	r2, #4
 800c4cc:	3501      	adds	r5, #1
 800c4ce:	42ae      	cmp	r6, r5
 800c4d0:	bf38      	it	cc
 800c4d2:	2200      	movcc	r2, #0
 800c4d4:	18a3      	adds	r3, r4, r2
 800c4d6:	50a7      	str	r7, [r4, r2]
 800c4d8:	b107      	cbz	r7, 800c4dc <rshift+0x68>
 800c4da:	3304      	adds	r3, #4
 800c4dc:	1b1a      	subs	r2, r3, r4
 800c4de:	42a3      	cmp	r3, r4
 800c4e0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c4e4:	bf08      	it	eq
 800c4e6:	2300      	moveq	r3, #0
 800c4e8:	6102      	str	r2, [r0, #16]
 800c4ea:	bf08      	it	eq
 800c4ec:	6143      	streq	r3, [r0, #20]
 800c4ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c4f2:	f8dc c000 	ldr.w	ip, [ip]
 800c4f6:	fa0c fc08 	lsl.w	ip, ip, r8
 800c4fa:	ea4c 0707 	orr.w	r7, ip, r7
 800c4fe:	f849 7b04 	str.w	r7, [r9], #4
 800c502:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c506:	40cf      	lsrs	r7, r1
 800c508:	e7da      	b.n	800c4c0 <rshift+0x4c>
 800c50a:	f851 cb04 	ldr.w	ip, [r1], #4
 800c50e:	f847 cf04 	str.w	ip, [r7, #4]!
 800c512:	e7c3      	b.n	800c49c <rshift+0x28>
 800c514:	4623      	mov	r3, r4
 800c516:	e7e1      	b.n	800c4dc <rshift+0x68>

0800c518 <__hexdig_fun>:
 800c518:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c51c:	2b09      	cmp	r3, #9
 800c51e:	d802      	bhi.n	800c526 <__hexdig_fun+0xe>
 800c520:	3820      	subs	r0, #32
 800c522:	b2c0      	uxtb	r0, r0
 800c524:	4770      	bx	lr
 800c526:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c52a:	2b05      	cmp	r3, #5
 800c52c:	d801      	bhi.n	800c532 <__hexdig_fun+0x1a>
 800c52e:	3847      	subs	r0, #71	@ 0x47
 800c530:	e7f7      	b.n	800c522 <__hexdig_fun+0xa>
 800c532:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c536:	2b05      	cmp	r3, #5
 800c538:	d801      	bhi.n	800c53e <__hexdig_fun+0x26>
 800c53a:	3827      	subs	r0, #39	@ 0x27
 800c53c:	e7f1      	b.n	800c522 <__hexdig_fun+0xa>
 800c53e:	2000      	movs	r0, #0
 800c540:	4770      	bx	lr
	...

0800c544 <__gethex>:
 800c544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c548:	b085      	sub	sp, #20
 800c54a:	468a      	mov	sl, r1
 800c54c:	9302      	str	r3, [sp, #8]
 800c54e:	680b      	ldr	r3, [r1, #0]
 800c550:	9001      	str	r0, [sp, #4]
 800c552:	4690      	mov	r8, r2
 800c554:	1c9c      	adds	r4, r3, #2
 800c556:	46a1      	mov	r9, r4
 800c558:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c55c:	2830      	cmp	r0, #48	@ 0x30
 800c55e:	d0fa      	beq.n	800c556 <__gethex+0x12>
 800c560:	eba9 0303 	sub.w	r3, r9, r3
 800c564:	f1a3 0b02 	sub.w	fp, r3, #2
 800c568:	f7ff ffd6 	bl	800c518 <__hexdig_fun>
 800c56c:	4605      	mov	r5, r0
 800c56e:	2800      	cmp	r0, #0
 800c570:	d168      	bne.n	800c644 <__gethex+0x100>
 800c572:	49a0      	ldr	r1, [pc, #640]	@ (800c7f4 <__gethex+0x2b0>)
 800c574:	2201      	movs	r2, #1
 800c576:	4648      	mov	r0, r9
 800c578:	f7ff ff1f 	bl	800c3ba <strncmp>
 800c57c:	4607      	mov	r7, r0
 800c57e:	2800      	cmp	r0, #0
 800c580:	d167      	bne.n	800c652 <__gethex+0x10e>
 800c582:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c586:	4626      	mov	r6, r4
 800c588:	f7ff ffc6 	bl	800c518 <__hexdig_fun>
 800c58c:	2800      	cmp	r0, #0
 800c58e:	d062      	beq.n	800c656 <__gethex+0x112>
 800c590:	4623      	mov	r3, r4
 800c592:	7818      	ldrb	r0, [r3, #0]
 800c594:	2830      	cmp	r0, #48	@ 0x30
 800c596:	4699      	mov	r9, r3
 800c598:	f103 0301 	add.w	r3, r3, #1
 800c59c:	d0f9      	beq.n	800c592 <__gethex+0x4e>
 800c59e:	f7ff ffbb 	bl	800c518 <__hexdig_fun>
 800c5a2:	fab0 f580 	clz	r5, r0
 800c5a6:	096d      	lsrs	r5, r5, #5
 800c5a8:	f04f 0b01 	mov.w	fp, #1
 800c5ac:	464a      	mov	r2, r9
 800c5ae:	4616      	mov	r6, r2
 800c5b0:	3201      	adds	r2, #1
 800c5b2:	7830      	ldrb	r0, [r6, #0]
 800c5b4:	f7ff ffb0 	bl	800c518 <__hexdig_fun>
 800c5b8:	2800      	cmp	r0, #0
 800c5ba:	d1f8      	bne.n	800c5ae <__gethex+0x6a>
 800c5bc:	498d      	ldr	r1, [pc, #564]	@ (800c7f4 <__gethex+0x2b0>)
 800c5be:	2201      	movs	r2, #1
 800c5c0:	4630      	mov	r0, r6
 800c5c2:	f7ff fefa 	bl	800c3ba <strncmp>
 800c5c6:	2800      	cmp	r0, #0
 800c5c8:	d13f      	bne.n	800c64a <__gethex+0x106>
 800c5ca:	b944      	cbnz	r4, 800c5de <__gethex+0x9a>
 800c5cc:	1c74      	adds	r4, r6, #1
 800c5ce:	4622      	mov	r2, r4
 800c5d0:	4616      	mov	r6, r2
 800c5d2:	3201      	adds	r2, #1
 800c5d4:	7830      	ldrb	r0, [r6, #0]
 800c5d6:	f7ff ff9f 	bl	800c518 <__hexdig_fun>
 800c5da:	2800      	cmp	r0, #0
 800c5dc:	d1f8      	bne.n	800c5d0 <__gethex+0x8c>
 800c5de:	1ba4      	subs	r4, r4, r6
 800c5e0:	00a7      	lsls	r7, r4, #2
 800c5e2:	7833      	ldrb	r3, [r6, #0]
 800c5e4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c5e8:	2b50      	cmp	r3, #80	@ 0x50
 800c5ea:	d13e      	bne.n	800c66a <__gethex+0x126>
 800c5ec:	7873      	ldrb	r3, [r6, #1]
 800c5ee:	2b2b      	cmp	r3, #43	@ 0x2b
 800c5f0:	d033      	beq.n	800c65a <__gethex+0x116>
 800c5f2:	2b2d      	cmp	r3, #45	@ 0x2d
 800c5f4:	d034      	beq.n	800c660 <__gethex+0x11c>
 800c5f6:	1c71      	adds	r1, r6, #1
 800c5f8:	2400      	movs	r4, #0
 800c5fa:	7808      	ldrb	r0, [r1, #0]
 800c5fc:	f7ff ff8c 	bl	800c518 <__hexdig_fun>
 800c600:	1e43      	subs	r3, r0, #1
 800c602:	b2db      	uxtb	r3, r3
 800c604:	2b18      	cmp	r3, #24
 800c606:	d830      	bhi.n	800c66a <__gethex+0x126>
 800c608:	f1a0 0210 	sub.w	r2, r0, #16
 800c60c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c610:	f7ff ff82 	bl	800c518 <__hexdig_fun>
 800c614:	f100 3cff 	add.w	ip, r0, #4294967295
 800c618:	fa5f fc8c 	uxtb.w	ip, ip
 800c61c:	f1bc 0f18 	cmp.w	ip, #24
 800c620:	f04f 030a 	mov.w	r3, #10
 800c624:	d91e      	bls.n	800c664 <__gethex+0x120>
 800c626:	b104      	cbz	r4, 800c62a <__gethex+0xe6>
 800c628:	4252      	negs	r2, r2
 800c62a:	4417      	add	r7, r2
 800c62c:	f8ca 1000 	str.w	r1, [sl]
 800c630:	b1ed      	cbz	r5, 800c66e <__gethex+0x12a>
 800c632:	f1bb 0f00 	cmp.w	fp, #0
 800c636:	bf0c      	ite	eq
 800c638:	2506      	moveq	r5, #6
 800c63a:	2500      	movne	r5, #0
 800c63c:	4628      	mov	r0, r5
 800c63e:	b005      	add	sp, #20
 800c640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c644:	2500      	movs	r5, #0
 800c646:	462c      	mov	r4, r5
 800c648:	e7b0      	b.n	800c5ac <__gethex+0x68>
 800c64a:	2c00      	cmp	r4, #0
 800c64c:	d1c7      	bne.n	800c5de <__gethex+0x9a>
 800c64e:	4627      	mov	r7, r4
 800c650:	e7c7      	b.n	800c5e2 <__gethex+0x9e>
 800c652:	464e      	mov	r6, r9
 800c654:	462f      	mov	r7, r5
 800c656:	2501      	movs	r5, #1
 800c658:	e7c3      	b.n	800c5e2 <__gethex+0x9e>
 800c65a:	2400      	movs	r4, #0
 800c65c:	1cb1      	adds	r1, r6, #2
 800c65e:	e7cc      	b.n	800c5fa <__gethex+0xb6>
 800c660:	2401      	movs	r4, #1
 800c662:	e7fb      	b.n	800c65c <__gethex+0x118>
 800c664:	fb03 0002 	mla	r0, r3, r2, r0
 800c668:	e7ce      	b.n	800c608 <__gethex+0xc4>
 800c66a:	4631      	mov	r1, r6
 800c66c:	e7de      	b.n	800c62c <__gethex+0xe8>
 800c66e:	eba6 0309 	sub.w	r3, r6, r9
 800c672:	3b01      	subs	r3, #1
 800c674:	4629      	mov	r1, r5
 800c676:	2b07      	cmp	r3, #7
 800c678:	dc0a      	bgt.n	800c690 <__gethex+0x14c>
 800c67a:	9801      	ldr	r0, [sp, #4]
 800c67c:	f7fd fdc0 	bl	800a200 <_Balloc>
 800c680:	4604      	mov	r4, r0
 800c682:	b940      	cbnz	r0, 800c696 <__gethex+0x152>
 800c684:	4b5c      	ldr	r3, [pc, #368]	@ (800c7f8 <__gethex+0x2b4>)
 800c686:	4602      	mov	r2, r0
 800c688:	21e4      	movs	r1, #228	@ 0xe4
 800c68a:	485c      	ldr	r0, [pc, #368]	@ (800c7fc <__gethex+0x2b8>)
 800c68c:	f7ff fec0 	bl	800c410 <__assert_func>
 800c690:	3101      	adds	r1, #1
 800c692:	105b      	asrs	r3, r3, #1
 800c694:	e7ef      	b.n	800c676 <__gethex+0x132>
 800c696:	f100 0a14 	add.w	sl, r0, #20
 800c69a:	2300      	movs	r3, #0
 800c69c:	4655      	mov	r5, sl
 800c69e:	469b      	mov	fp, r3
 800c6a0:	45b1      	cmp	r9, r6
 800c6a2:	d337      	bcc.n	800c714 <__gethex+0x1d0>
 800c6a4:	f845 bb04 	str.w	fp, [r5], #4
 800c6a8:	eba5 050a 	sub.w	r5, r5, sl
 800c6ac:	10ad      	asrs	r5, r5, #2
 800c6ae:	6125      	str	r5, [r4, #16]
 800c6b0:	4658      	mov	r0, fp
 800c6b2:	f7fd fe97 	bl	800a3e4 <__hi0bits>
 800c6b6:	016d      	lsls	r5, r5, #5
 800c6b8:	f8d8 6000 	ldr.w	r6, [r8]
 800c6bc:	1a2d      	subs	r5, r5, r0
 800c6be:	42b5      	cmp	r5, r6
 800c6c0:	dd54      	ble.n	800c76c <__gethex+0x228>
 800c6c2:	1bad      	subs	r5, r5, r6
 800c6c4:	4629      	mov	r1, r5
 800c6c6:	4620      	mov	r0, r4
 800c6c8:	f7fe fa23 	bl	800ab12 <__any_on>
 800c6cc:	4681      	mov	r9, r0
 800c6ce:	b178      	cbz	r0, 800c6f0 <__gethex+0x1ac>
 800c6d0:	1e6b      	subs	r3, r5, #1
 800c6d2:	1159      	asrs	r1, r3, #5
 800c6d4:	f003 021f 	and.w	r2, r3, #31
 800c6d8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c6dc:	f04f 0901 	mov.w	r9, #1
 800c6e0:	fa09 f202 	lsl.w	r2, r9, r2
 800c6e4:	420a      	tst	r2, r1
 800c6e6:	d003      	beq.n	800c6f0 <__gethex+0x1ac>
 800c6e8:	454b      	cmp	r3, r9
 800c6ea:	dc36      	bgt.n	800c75a <__gethex+0x216>
 800c6ec:	f04f 0902 	mov.w	r9, #2
 800c6f0:	4629      	mov	r1, r5
 800c6f2:	4620      	mov	r0, r4
 800c6f4:	f7ff febe 	bl	800c474 <rshift>
 800c6f8:	442f      	add	r7, r5
 800c6fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c6fe:	42bb      	cmp	r3, r7
 800c700:	da42      	bge.n	800c788 <__gethex+0x244>
 800c702:	9801      	ldr	r0, [sp, #4]
 800c704:	4621      	mov	r1, r4
 800c706:	f7fd fdbb 	bl	800a280 <_Bfree>
 800c70a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c70c:	2300      	movs	r3, #0
 800c70e:	6013      	str	r3, [r2, #0]
 800c710:	25a3      	movs	r5, #163	@ 0xa3
 800c712:	e793      	b.n	800c63c <__gethex+0xf8>
 800c714:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c718:	2a2e      	cmp	r2, #46	@ 0x2e
 800c71a:	d012      	beq.n	800c742 <__gethex+0x1fe>
 800c71c:	2b20      	cmp	r3, #32
 800c71e:	d104      	bne.n	800c72a <__gethex+0x1e6>
 800c720:	f845 bb04 	str.w	fp, [r5], #4
 800c724:	f04f 0b00 	mov.w	fp, #0
 800c728:	465b      	mov	r3, fp
 800c72a:	7830      	ldrb	r0, [r6, #0]
 800c72c:	9303      	str	r3, [sp, #12]
 800c72e:	f7ff fef3 	bl	800c518 <__hexdig_fun>
 800c732:	9b03      	ldr	r3, [sp, #12]
 800c734:	f000 000f 	and.w	r0, r0, #15
 800c738:	4098      	lsls	r0, r3
 800c73a:	ea4b 0b00 	orr.w	fp, fp, r0
 800c73e:	3304      	adds	r3, #4
 800c740:	e7ae      	b.n	800c6a0 <__gethex+0x15c>
 800c742:	45b1      	cmp	r9, r6
 800c744:	d8ea      	bhi.n	800c71c <__gethex+0x1d8>
 800c746:	492b      	ldr	r1, [pc, #172]	@ (800c7f4 <__gethex+0x2b0>)
 800c748:	9303      	str	r3, [sp, #12]
 800c74a:	2201      	movs	r2, #1
 800c74c:	4630      	mov	r0, r6
 800c74e:	f7ff fe34 	bl	800c3ba <strncmp>
 800c752:	9b03      	ldr	r3, [sp, #12]
 800c754:	2800      	cmp	r0, #0
 800c756:	d1e1      	bne.n	800c71c <__gethex+0x1d8>
 800c758:	e7a2      	b.n	800c6a0 <__gethex+0x15c>
 800c75a:	1ea9      	subs	r1, r5, #2
 800c75c:	4620      	mov	r0, r4
 800c75e:	f7fe f9d8 	bl	800ab12 <__any_on>
 800c762:	2800      	cmp	r0, #0
 800c764:	d0c2      	beq.n	800c6ec <__gethex+0x1a8>
 800c766:	f04f 0903 	mov.w	r9, #3
 800c76a:	e7c1      	b.n	800c6f0 <__gethex+0x1ac>
 800c76c:	da09      	bge.n	800c782 <__gethex+0x23e>
 800c76e:	1b75      	subs	r5, r6, r5
 800c770:	4621      	mov	r1, r4
 800c772:	9801      	ldr	r0, [sp, #4]
 800c774:	462a      	mov	r2, r5
 800c776:	f7fd ff93 	bl	800a6a0 <__lshift>
 800c77a:	1b7f      	subs	r7, r7, r5
 800c77c:	4604      	mov	r4, r0
 800c77e:	f100 0a14 	add.w	sl, r0, #20
 800c782:	f04f 0900 	mov.w	r9, #0
 800c786:	e7b8      	b.n	800c6fa <__gethex+0x1b6>
 800c788:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c78c:	42bd      	cmp	r5, r7
 800c78e:	dd6f      	ble.n	800c870 <__gethex+0x32c>
 800c790:	1bed      	subs	r5, r5, r7
 800c792:	42ae      	cmp	r6, r5
 800c794:	dc34      	bgt.n	800c800 <__gethex+0x2bc>
 800c796:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c79a:	2b02      	cmp	r3, #2
 800c79c:	d022      	beq.n	800c7e4 <__gethex+0x2a0>
 800c79e:	2b03      	cmp	r3, #3
 800c7a0:	d024      	beq.n	800c7ec <__gethex+0x2a8>
 800c7a2:	2b01      	cmp	r3, #1
 800c7a4:	d115      	bne.n	800c7d2 <__gethex+0x28e>
 800c7a6:	42ae      	cmp	r6, r5
 800c7a8:	d113      	bne.n	800c7d2 <__gethex+0x28e>
 800c7aa:	2e01      	cmp	r6, #1
 800c7ac:	d10b      	bne.n	800c7c6 <__gethex+0x282>
 800c7ae:	9a02      	ldr	r2, [sp, #8]
 800c7b0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c7b4:	6013      	str	r3, [r2, #0]
 800c7b6:	2301      	movs	r3, #1
 800c7b8:	6123      	str	r3, [r4, #16]
 800c7ba:	f8ca 3000 	str.w	r3, [sl]
 800c7be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c7c0:	2562      	movs	r5, #98	@ 0x62
 800c7c2:	601c      	str	r4, [r3, #0]
 800c7c4:	e73a      	b.n	800c63c <__gethex+0xf8>
 800c7c6:	1e71      	subs	r1, r6, #1
 800c7c8:	4620      	mov	r0, r4
 800c7ca:	f7fe f9a2 	bl	800ab12 <__any_on>
 800c7ce:	2800      	cmp	r0, #0
 800c7d0:	d1ed      	bne.n	800c7ae <__gethex+0x26a>
 800c7d2:	9801      	ldr	r0, [sp, #4]
 800c7d4:	4621      	mov	r1, r4
 800c7d6:	f7fd fd53 	bl	800a280 <_Bfree>
 800c7da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c7dc:	2300      	movs	r3, #0
 800c7de:	6013      	str	r3, [r2, #0]
 800c7e0:	2550      	movs	r5, #80	@ 0x50
 800c7e2:	e72b      	b.n	800c63c <__gethex+0xf8>
 800c7e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d1f3      	bne.n	800c7d2 <__gethex+0x28e>
 800c7ea:	e7e0      	b.n	800c7ae <__gethex+0x26a>
 800c7ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d1dd      	bne.n	800c7ae <__gethex+0x26a>
 800c7f2:	e7ee      	b.n	800c7d2 <__gethex+0x28e>
 800c7f4:	0800da59 	.word	0x0800da59
 800c7f8:	0800d9ef 	.word	0x0800d9ef
 800c7fc:	0800dacb 	.word	0x0800dacb
 800c800:	1e6f      	subs	r7, r5, #1
 800c802:	f1b9 0f00 	cmp.w	r9, #0
 800c806:	d130      	bne.n	800c86a <__gethex+0x326>
 800c808:	b127      	cbz	r7, 800c814 <__gethex+0x2d0>
 800c80a:	4639      	mov	r1, r7
 800c80c:	4620      	mov	r0, r4
 800c80e:	f7fe f980 	bl	800ab12 <__any_on>
 800c812:	4681      	mov	r9, r0
 800c814:	117a      	asrs	r2, r7, #5
 800c816:	2301      	movs	r3, #1
 800c818:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c81c:	f007 071f 	and.w	r7, r7, #31
 800c820:	40bb      	lsls	r3, r7
 800c822:	4213      	tst	r3, r2
 800c824:	4629      	mov	r1, r5
 800c826:	4620      	mov	r0, r4
 800c828:	bf18      	it	ne
 800c82a:	f049 0902 	orrne.w	r9, r9, #2
 800c82e:	f7ff fe21 	bl	800c474 <rshift>
 800c832:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c836:	1b76      	subs	r6, r6, r5
 800c838:	2502      	movs	r5, #2
 800c83a:	f1b9 0f00 	cmp.w	r9, #0
 800c83e:	d047      	beq.n	800c8d0 <__gethex+0x38c>
 800c840:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c844:	2b02      	cmp	r3, #2
 800c846:	d015      	beq.n	800c874 <__gethex+0x330>
 800c848:	2b03      	cmp	r3, #3
 800c84a:	d017      	beq.n	800c87c <__gethex+0x338>
 800c84c:	2b01      	cmp	r3, #1
 800c84e:	d109      	bne.n	800c864 <__gethex+0x320>
 800c850:	f019 0f02 	tst.w	r9, #2
 800c854:	d006      	beq.n	800c864 <__gethex+0x320>
 800c856:	f8da 3000 	ldr.w	r3, [sl]
 800c85a:	ea49 0903 	orr.w	r9, r9, r3
 800c85e:	f019 0f01 	tst.w	r9, #1
 800c862:	d10e      	bne.n	800c882 <__gethex+0x33e>
 800c864:	f045 0510 	orr.w	r5, r5, #16
 800c868:	e032      	b.n	800c8d0 <__gethex+0x38c>
 800c86a:	f04f 0901 	mov.w	r9, #1
 800c86e:	e7d1      	b.n	800c814 <__gethex+0x2d0>
 800c870:	2501      	movs	r5, #1
 800c872:	e7e2      	b.n	800c83a <__gethex+0x2f6>
 800c874:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c876:	f1c3 0301 	rsb	r3, r3, #1
 800c87a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c87c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d0f0      	beq.n	800c864 <__gethex+0x320>
 800c882:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c886:	f104 0314 	add.w	r3, r4, #20
 800c88a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c88e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c892:	f04f 0c00 	mov.w	ip, #0
 800c896:	4618      	mov	r0, r3
 800c898:	f853 2b04 	ldr.w	r2, [r3], #4
 800c89c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c8a0:	d01b      	beq.n	800c8da <__gethex+0x396>
 800c8a2:	3201      	adds	r2, #1
 800c8a4:	6002      	str	r2, [r0, #0]
 800c8a6:	2d02      	cmp	r5, #2
 800c8a8:	f104 0314 	add.w	r3, r4, #20
 800c8ac:	d13c      	bne.n	800c928 <__gethex+0x3e4>
 800c8ae:	f8d8 2000 	ldr.w	r2, [r8]
 800c8b2:	3a01      	subs	r2, #1
 800c8b4:	42b2      	cmp	r2, r6
 800c8b6:	d109      	bne.n	800c8cc <__gethex+0x388>
 800c8b8:	1171      	asrs	r1, r6, #5
 800c8ba:	2201      	movs	r2, #1
 800c8bc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c8c0:	f006 061f 	and.w	r6, r6, #31
 800c8c4:	fa02 f606 	lsl.w	r6, r2, r6
 800c8c8:	421e      	tst	r6, r3
 800c8ca:	d13a      	bne.n	800c942 <__gethex+0x3fe>
 800c8cc:	f045 0520 	orr.w	r5, r5, #32
 800c8d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c8d2:	601c      	str	r4, [r3, #0]
 800c8d4:	9b02      	ldr	r3, [sp, #8]
 800c8d6:	601f      	str	r7, [r3, #0]
 800c8d8:	e6b0      	b.n	800c63c <__gethex+0xf8>
 800c8da:	4299      	cmp	r1, r3
 800c8dc:	f843 cc04 	str.w	ip, [r3, #-4]
 800c8e0:	d8d9      	bhi.n	800c896 <__gethex+0x352>
 800c8e2:	68a3      	ldr	r3, [r4, #8]
 800c8e4:	459b      	cmp	fp, r3
 800c8e6:	db17      	blt.n	800c918 <__gethex+0x3d4>
 800c8e8:	6861      	ldr	r1, [r4, #4]
 800c8ea:	9801      	ldr	r0, [sp, #4]
 800c8ec:	3101      	adds	r1, #1
 800c8ee:	f7fd fc87 	bl	800a200 <_Balloc>
 800c8f2:	4681      	mov	r9, r0
 800c8f4:	b918      	cbnz	r0, 800c8fe <__gethex+0x3ba>
 800c8f6:	4b1a      	ldr	r3, [pc, #104]	@ (800c960 <__gethex+0x41c>)
 800c8f8:	4602      	mov	r2, r0
 800c8fa:	2184      	movs	r1, #132	@ 0x84
 800c8fc:	e6c5      	b.n	800c68a <__gethex+0x146>
 800c8fe:	6922      	ldr	r2, [r4, #16]
 800c900:	3202      	adds	r2, #2
 800c902:	f104 010c 	add.w	r1, r4, #12
 800c906:	0092      	lsls	r2, r2, #2
 800c908:	300c      	adds	r0, #12
 800c90a:	f7fc fd0a 	bl	8009322 <memcpy>
 800c90e:	4621      	mov	r1, r4
 800c910:	9801      	ldr	r0, [sp, #4]
 800c912:	f7fd fcb5 	bl	800a280 <_Bfree>
 800c916:	464c      	mov	r4, r9
 800c918:	6923      	ldr	r3, [r4, #16]
 800c91a:	1c5a      	adds	r2, r3, #1
 800c91c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c920:	6122      	str	r2, [r4, #16]
 800c922:	2201      	movs	r2, #1
 800c924:	615a      	str	r2, [r3, #20]
 800c926:	e7be      	b.n	800c8a6 <__gethex+0x362>
 800c928:	6922      	ldr	r2, [r4, #16]
 800c92a:	455a      	cmp	r2, fp
 800c92c:	dd0b      	ble.n	800c946 <__gethex+0x402>
 800c92e:	2101      	movs	r1, #1
 800c930:	4620      	mov	r0, r4
 800c932:	f7ff fd9f 	bl	800c474 <rshift>
 800c936:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c93a:	3701      	adds	r7, #1
 800c93c:	42bb      	cmp	r3, r7
 800c93e:	f6ff aee0 	blt.w	800c702 <__gethex+0x1be>
 800c942:	2501      	movs	r5, #1
 800c944:	e7c2      	b.n	800c8cc <__gethex+0x388>
 800c946:	f016 061f 	ands.w	r6, r6, #31
 800c94a:	d0fa      	beq.n	800c942 <__gethex+0x3fe>
 800c94c:	4453      	add	r3, sl
 800c94e:	f1c6 0620 	rsb	r6, r6, #32
 800c952:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c956:	f7fd fd45 	bl	800a3e4 <__hi0bits>
 800c95a:	42b0      	cmp	r0, r6
 800c95c:	dbe7      	blt.n	800c92e <__gethex+0x3ea>
 800c95e:	e7f0      	b.n	800c942 <__gethex+0x3fe>
 800c960:	0800d9ef 	.word	0x0800d9ef

0800c964 <L_shift>:
 800c964:	f1c2 0208 	rsb	r2, r2, #8
 800c968:	0092      	lsls	r2, r2, #2
 800c96a:	b570      	push	{r4, r5, r6, lr}
 800c96c:	f1c2 0620 	rsb	r6, r2, #32
 800c970:	6843      	ldr	r3, [r0, #4]
 800c972:	6804      	ldr	r4, [r0, #0]
 800c974:	fa03 f506 	lsl.w	r5, r3, r6
 800c978:	432c      	orrs	r4, r5
 800c97a:	40d3      	lsrs	r3, r2
 800c97c:	6004      	str	r4, [r0, #0]
 800c97e:	f840 3f04 	str.w	r3, [r0, #4]!
 800c982:	4288      	cmp	r0, r1
 800c984:	d3f4      	bcc.n	800c970 <L_shift+0xc>
 800c986:	bd70      	pop	{r4, r5, r6, pc}

0800c988 <__match>:
 800c988:	b530      	push	{r4, r5, lr}
 800c98a:	6803      	ldr	r3, [r0, #0]
 800c98c:	3301      	adds	r3, #1
 800c98e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c992:	b914      	cbnz	r4, 800c99a <__match+0x12>
 800c994:	6003      	str	r3, [r0, #0]
 800c996:	2001      	movs	r0, #1
 800c998:	bd30      	pop	{r4, r5, pc}
 800c99a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c99e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c9a2:	2d19      	cmp	r5, #25
 800c9a4:	bf98      	it	ls
 800c9a6:	3220      	addls	r2, #32
 800c9a8:	42a2      	cmp	r2, r4
 800c9aa:	d0f0      	beq.n	800c98e <__match+0x6>
 800c9ac:	2000      	movs	r0, #0
 800c9ae:	e7f3      	b.n	800c998 <__match+0x10>

0800c9b0 <__hexnan>:
 800c9b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9b4:	680b      	ldr	r3, [r1, #0]
 800c9b6:	6801      	ldr	r1, [r0, #0]
 800c9b8:	115e      	asrs	r6, r3, #5
 800c9ba:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c9be:	f013 031f 	ands.w	r3, r3, #31
 800c9c2:	b087      	sub	sp, #28
 800c9c4:	bf18      	it	ne
 800c9c6:	3604      	addne	r6, #4
 800c9c8:	2500      	movs	r5, #0
 800c9ca:	1f37      	subs	r7, r6, #4
 800c9cc:	4682      	mov	sl, r0
 800c9ce:	4690      	mov	r8, r2
 800c9d0:	9301      	str	r3, [sp, #4]
 800c9d2:	f846 5c04 	str.w	r5, [r6, #-4]
 800c9d6:	46b9      	mov	r9, r7
 800c9d8:	463c      	mov	r4, r7
 800c9da:	9502      	str	r5, [sp, #8]
 800c9dc:	46ab      	mov	fp, r5
 800c9de:	784a      	ldrb	r2, [r1, #1]
 800c9e0:	1c4b      	adds	r3, r1, #1
 800c9e2:	9303      	str	r3, [sp, #12]
 800c9e4:	b342      	cbz	r2, 800ca38 <__hexnan+0x88>
 800c9e6:	4610      	mov	r0, r2
 800c9e8:	9105      	str	r1, [sp, #20]
 800c9ea:	9204      	str	r2, [sp, #16]
 800c9ec:	f7ff fd94 	bl	800c518 <__hexdig_fun>
 800c9f0:	2800      	cmp	r0, #0
 800c9f2:	d151      	bne.n	800ca98 <__hexnan+0xe8>
 800c9f4:	9a04      	ldr	r2, [sp, #16]
 800c9f6:	9905      	ldr	r1, [sp, #20]
 800c9f8:	2a20      	cmp	r2, #32
 800c9fa:	d818      	bhi.n	800ca2e <__hexnan+0x7e>
 800c9fc:	9b02      	ldr	r3, [sp, #8]
 800c9fe:	459b      	cmp	fp, r3
 800ca00:	dd13      	ble.n	800ca2a <__hexnan+0x7a>
 800ca02:	454c      	cmp	r4, r9
 800ca04:	d206      	bcs.n	800ca14 <__hexnan+0x64>
 800ca06:	2d07      	cmp	r5, #7
 800ca08:	dc04      	bgt.n	800ca14 <__hexnan+0x64>
 800ca0a:	462a      	mov	r2, r5
 800ca0c:	4649      	mov	r1, r9
 800ca0e:	4620      	mov	r0, r4
 800ca10:	f7ff ffa8 	bl	800c964 <L_shift>
 800ca14:	4544      	cmp	r4, r8
 800ca16:	d952      	bls.n	800cabe <__hexnan+0x10e>
 800ca18:	2300      	movs	r3, #0
 800ca1a:	f1a4 0904 	sub.w	r9, r4, #4
 800ca1e:	f844 3c04 	str.w	r3, [r4, #-4]
 800ca22:	f8cd b008 	str.w	fp, [sp, #8]
 800ca26:	464c      	mov	r4, r9
 800ca28:	461d      	mov	r5, r3
 800ca2a:	9903      	ldr	r1, [sp, #12]
 800ca2c:	e7d7      	b.n	800c9de <__hexnan+0x2e>
 800ca2e:	2a29      	cmp	r2, #41	@ 0x29
 800ca30:	d157      	bne.n	800cae2 <__hexnan+0x132>
 800ca32:	3102      	adds	r1, #2
 800ca34:	f8ca 1000 	str.w	r1, [sl]
 800ca38:	f1bb 0f00 	cmp.w	fp, #0
 800ca3c:	d051      	beq.n	800cae2 <__hexnan+0x132>
 800ca3e:	454c      	cmp	r4, r9
 800ca40:	d206      	bcs.n	800ca50 <__hexnan+0xa0>
 800ca42:	2d07      	cmp	r5, #7
 800ca44:	dc04      	bgt.n	800ca50 <__hexnan+0xa0>
 800ca46:	462a      	mov	r2, r5
 800ca48:	4649      	mov	r1, r9
 800ca4a:	4620      	mov	r0, r4
 800ca4c:	f7ff ff8a 	bl	800c964 <L_shift>
 800ca50:	4544      	cmp	r4, r8
 800ca52:	d936      	bls.n	800cac2 <__hexnan+0x112>
 800ca54:	f1a8 0204 	sub.w	r2, r8, #4
 800ca58:	4623      	mov	r3, r4
 800ca5a:	f853 1b04 	ldr.w	r1, [r3], #4
 800ca5e:	f842 1f04 	str.w	r1, [r2, #4]!
 800ca62:	429f      	cmp	r7, r3
 800ca64:	d2f9      	bcs.n	800ca5a <__hexnan+0xaa>
 800ca66:	1b3b      	subs	r3, r7, r4
 800ca68:	f023 0303 	bic.w	r3, r3, #3
 800ca6c:	3304      	adds	r3, #4
 800ca6e:	3401      	adds	r4, #1
 800ca70:	3e03      	subs	r6, #3
 800ca72:	42b4      	cmp	r4, r6
 800ca74:	bf88      	it	hi
 800ca76:	2304      	movhi	r3, #4
 800ca78:	4443      	add	r3, r8
 800ca7a:	2200      	movs	r2, #0
 800ca7c:	f843 2b04 	str.w	r2, [r3], #4
 800ca80:	429f      	cmp	r7, r3
 800ca82:	d2fb      	bcs.n	800ca7c <__hexnan+0xcc>
 800ca84:	683b      	ldr	r3, [r7, #0]
 800ca86:	b91b      	cbnz	r3, 800ca90 <__hexnan+0xe0>
 800ca88:	4547      	cmp	r7, r8
 800ca8a:	d128      	bne.n	800cade <__hexnan+0x12e>
 800ca8c:	2301      	movs	r3, #1
 800ca8e:	603b      	str	r3, [r7, #0]
 800ca90:	2005      	movs	r0, #5
 800ca92:	b007      	add	sp, #28
 800ca94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca98:	3501      	adds	r5, #1
 800ca9a:	2d08      	cmp	r5, #8
 800ca9c:	f10b 0b01 	add.w	fp, fp, #1
 800caa0:	dd06      	ble.n	800cab0 <__hexnan+0x100>
 800caa2:	4544      	cmp	r4, r8
 800caa4:	d9c1      	bls.n	800ca2a <__hexnan+0x7a>
 800caa6:	2300      	movs	r3, #0
 800caa8:	f844 3c04 	str.w	r3, [r4, #-4]
 800caac:	2501      	movs	r5, #1
 800caae:	3c04      	subs	r4, #4
 800cab0:	6822      	ldr	r2, [r4, #0]
 800cab2:	f000 000f 	and.w	r0, r0, #15
 800cab6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800caba:	6020      	str	r0, [r4, #0]
 800cabc:	e7b5      	b.n	800ca2a <__hexnan+0x7a>
 800cabe:	2508      	movs	r5, #8
 800cac0:	e7b3      	b.n	800ca2a <__hexnan+0x7a>
 800cac2:	9b01      	ldr	r3, [sp, #4]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d0dd      	beq.n	800ca84 <__hexnan+0xd4>
 800cac8:	f1c3 0320 	rsb	r3, r3, #32
 800cacc:	f04f 32ff 	mov.w	r2, #4294967295
 800cad0:	40da      	lsrs	r2, r3
 800cad2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800cad6:	4013      	ands	r3, r2
 800cad8:	f846 3c04 	str.w	r3, [r6, #-4]
 800cadc:	e7d2      	b.n	800ca84 <__hexnan+0xd4>
 800cade:	3f04      	subs	r7, #4
 800cae0:	e7d0      	b.n	800ca84 <__hexnan+0xd4>
 800cae2:	2004      	movs	r0, #4
 800cae4:	e7d5      	b.n	800ca92 <__hexnan+0xe2>

0800cae6 <__ascii_mbtowc>:
 800cae6:	b082      	sub	sp, #8
 800cae8:	b901      	cbnz	r1, 800caec <__ascii_mbtowc+0x6>
 800caea:	a901      	add	r1, sp, #4
 800caec:	b142      	cbz	r2, 800cb00 <__ascii_mbtowc+0x1a>
 800caee:	b14b      	cbz	r3, 800cb04 <__ascii_mbtowc+0x1e>
 800caf0:	7813      	ldrb	r3, [r2, #0]
 800caf2:	600b      	str	r3, [r1, #0]
 800caf4:	7812      	ldrb	r2, [r2, #0]
 800caf6:	1e10      	subs	r0, r2, #0
 800caf8:	bf18      	it	ne
 800cafa:	2001      	movne	r0, #1
 800cafc:	b002      	add	sp, #8
 800cafe:	4770      	bx	lr
 800cb00:	4610      	mov	r0, r2
 800cb02:	e7fb      	b.n	800cafc <__ascii_mbtowc+0x16>
 800cb04:	f06f 0001 	mvn.w	r0, #1
 800cb08:	e7f8      	b.n	800cafc <__ascii_mbtowc+0x16>

0800cb0a <_realloc_r>:
 800cb0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb0e:	4607      	mov	r7, r0
 800cb10:	4614      	mov	r4, r2
 800cb12:	460d      	mov	r5, r1
 800cb14:	b921      	cbnz	r1, 800cb20 <_realloc_r+0x16>
 800cb16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cb1a:	4611      	mov	r1, r2
 800cb1c:	f7fd bae4 	b.w	800a0e8 <_malloc_r>
 800cb20:	b92a      	cbnz	r2, 800cb2e <_realloc_r+0x24>
 800cb22:	f7fd fa6d 	bl	800a000 <_free_r>
 800cb26:	4625      	mov	r5, r4
 800cb28:	4628      	mov	r0, r5
 800cb2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb2e:	f000 f8b2 	bl	800cc96 <_malloc_usable_size_r>
 800cb32:	4284      	cmp	r4, r0
 800cb34:	4606      	mov	r6, r0
 800cb36:	d802      	bhi.n	800cb3e <_realloc_r+0x34>
 800cb38:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cb3c:	d8f4      	bhi.n	800cb28 <_realloc_r+0x1e>
 800cb3e:	4621      	mov	r1, r4
 800cb40:	4638      	mov	r0, r7
 800cb42:	f7fd fad1 	bl	800a0e8 <_malloc_r>
 800cb46:	4680      	mov	r8, r0
 800cb48:	b908      	cbnz	r0, 800cb4e <_realloc_r+0x44>
 800cb4a:	4645      	mov	r5, r8
 800cb4c:	e7ec      	b.n	800cb28 <_realloc_r+0x1e>
 800cb4e:	42b4      	cmp	r4, r6
 800cb50:	4622      	mov	r2, r4
 800cb52:	4629      	mov	r1, r5
 800cb54:	bf28      	it	cs
 800cb56:	4632      	movcs	r2, r6
 800cb58:	f7fc fbe3 	bl	8009322 <memcpy>
 800cb5c:	4629      	mov	r1, r5
 800cb5e:	4638      	mov	r0, r7
 800cb60:	f7fd fa4e 	bl	800a000 <_free_r>
 800cb64:	e7f1      	b.n	800cb4a <_realloc_r+0x40>
	...

0800cb68 <_strtoul_l.isra.0>:
 800cb68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cb6c:	4e34      	ldr	r6, [pc, #208]	@ (800cc40 <_strtoul_l.isra.0+0xd8>)
 800cb6e:	4686      	mov	lr, r0
 800cb70:	460d      	mov	r5, r1
 800cb72:	4628      	mov	r0, r5
 800cb74:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cb78:	5d37      	ldrb	r7, [r6, r4]
 800cb7a:	f017 0708 	ands.w	r7, r7, #8
 800cb7e:	d1f8      	bne.n	800cb72 <_strtoul_l.isra.0+0xa>
 800cb80:	2c2d      	cmp	r4, #45	@ 0x2d
 800cb82:	d110      	bne.n	800cba6 <_strtoul_l.isra.0+0x3e>
 800cb84:	782c      	ldrb	r4, [r5, #0]
 800cb86:	2701      	movs	r7, #1
 800cb88:	1c85      	adds	r5, r0, #2
 800cb8a:	f033 0010 	bics.w	r0, r3, #16
 800cb8e:	d115      	bne.n	800cbbc <_strtoul_l.isra.0+0x54>
 800cb90:	2c30      	cmp	r4, #48	@ 0x30
 800cb92:	d10d      	bne.n	800cbb0 <_strtoul_l.isra.0+0x48>
 800cb94:	7828      	ldrb	r0, [r5, #0]
 800cb96:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800cb9a:	2858      	cmp	r0, #88	@ 0x58
 800cb9c:	d108      	bne.n	800cbb0 <_strtoul_l.isra.0+0x48>
 800cb9e:	786c      	ldrb	r4, [r5, #1]
 800cba0:	3502      	adds	r5, #2
 800cba2:	2310      	movs	r3, #16
 800cba4:	e00a      	b.n	800cbbc <_strtoul_l.isra.0+0x54>
 800cba6:	2c2b      	cmp	r4, #43	@ 0x2b
 800cba8:	bf04      	itt	eq
 800cbaa:	782c      	ldrbeq	r4, [r5, #0]
 800cbac:	1c85      	addeq	r5, r0, #2
 800cbae:	e7ec      	b.n	800cb8a <_strtoul_l.isra.0+0x22>
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d1f6      	bne.n	800cba2 <_strtoul_l.isra.0+0x3a>
 800cbb4:	2c30      	cmp	r4, #48	@ 0x30
 800cbb6:	bf14      	ite	ne
 800cbb8:	230a      	movne	r3, #10
 800cbba:	2308      	moveq	r3, #8
 800cbbc:	f04f 38ff 	mov.w	r8, #4294967295
 800cbc0:	2600      	movs	r6, #0
 800cbc2:	fbb8 f8f3 	udiv	r8, r8, r3
 800cbc6:	fb03 f908 	mul.w	r9, r3, r8
 800cbca:	ea6f 0909 	mvn.w	r9, r9
 800cbce:	4630      	mov	r0, r6
 800cbd0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800cbd4:	f1bc 0f09 	cmp.w	ip, #9
 800cbd8:	d810      	bhi.n	800cbfc <_strtoul_l.isra.0+0x94>
 800cbda:	4664      	mov	r4, ip
 800cbdc:	42a3      	cmp	r3, r4
 800cbde:	dd1e      	ble.n	800cc1e <_strtoul_l.isra.0+0xb6>
 800cbe0:	f1b6 3fff 	cmp.w	r6, #4294967295
 800cbe4:	d007      	beq.n	800cbf6 <_strtoul_l.isra.0+0x8e>
 800cbe6:	4580      	cmp	r8, r0
 800cbe8:	d316      	bcc.n	800cc18 <_strtoul_l.isra.0+0xb0>
 800cbea:	d101      	bne.n	800cbf0 <_strtoul_l.isra.0+0x88>
 800cbec:	45a1      	cmp	r9, r4
 800cbee:	db13      	blt.n	800cc18 <_strtoul_l.isra.0+0xb0>
 800cbf0:	fb00 4003 	mla	r0, r0, r3, r4
 800cbf4:	2601      	movs	r6, #1
 800cbf6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cbfa:	e7e9      	b.n	800cbd0 <_strtoul_l.isra.0+0x68>
 800cbfc:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800cc00:	f1bc 0f19 	cmp.w	ip, #25
 800cc04:	d801      	bhi.n	800cc0a <_strtoul_l.isra.0+0xa2>
 800cc06:	3c37      	subs	r4, #55	@ 0x37
 800cc08:	e7e8      	b.n	800cbdc <_strtoul_l.isra.0+0x74>
 800cc0a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800cc0e:	f1bc 0f19 	cmp.w	ip, #25
 800cc12:	d804      	bhi.n	800cc1e <_strtoul_l.isra.0+0xb6>
 800cc14:	3c57      	subs	r4, #87	@ 0x57
 800cc16:	e7e1      	b.n	800cbdc <_strtoul_l.isra.0+0x74>
 800cc18:	f04f 36ff 	mov.w	r6, #4294967295
 800cc1c:	e7eb      	b.n	800cbf6 <_strtoul_l.isra.0+0x8e>
 800cc1e:	1c73      	adds	r3, r6, #1
 800cc20:	d106      	bne.n	800cc30 <_strtoul_l.isra.0+0xc8>
 800cc22:	2322      	movs	r3, #34	@ 0x22
 800cc24:	f8ce 3000 	str.w	r3, [lr]
 800cc28:	4630      	mov	r0, r6
 800cc2a:	b932      	cbnz	r2, 800cc3a <_strtoul_l.isra.0+0xd2>
 800cc2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cc30:	b107      	cbz	r7, 800cc34 <_strtoul_l.isra.0+0xcc>
 800cc32:	4240      	negs	r0, r0
 800cc34:	2a00      	cmp	r2, #0
 800cc36:	d0f9      	beq.n	800cc2c <_strtoul_l.isra.0+0xc4>
 800cc38:	b106      	cbz	r6, 800cc3c <_strtoul_l.isra.0+0xd4>
 800cc3a:	1e69      	subs	r1, r5, #1
 800cc3c:	6011      	str	r1, [r2, #0]
 800cc3e:	e7f5      	b.n	800cc2c <_strtoul_l.isra.0+0xc4>
 800cc40:	0800dc79 	.word	0x0800dc79

0800cc44 <_strtoul_r>:
 800cc44:	f7ff bf90 	b.w	800cb68 <_strtoul_l.isra.0>

0800cc48 <__ascii_wctomb>:
 800cc48:	4603      	mov	r3, r0
 800cc4a:	4608      	mov	r0, r1
 800cc4c:	b141      	cbz	r1, 800cc60 <__ascii_wctomb+0x18>
 800cc4e:	2aff      	cmp	r2, #255	@ 0xff
 800cc50:	d904      	bls.n	800cc5c <__ascii_wctomb+0x14>
 800cc52:	228a      	movs	r2, #138	@ 0x8a
 800cc54:	601a      	str	r2, [r3, #0]
 800cc56:	f04f 30ff 	mov.w	r0, #4294967295
 800cc5a:	4770      	bx	lr
 800cc5c:	700a      	strb	r2, [r1, #0]
 800cc5e:	2001      	movs	r0, #1
 800cc60:	4770      	bx	lr
	...

0800cc64 <fiprintf>:
 800cc64:	b40e      	push	{r1, r2, r3}
 800cc66:	b503      	push	{r0, r1, lr}
 800cc68:	4601      	mov	r1, r0
 800cc6a:	ab03      	add	r3, sp, #12
 800cc6c:	4805      	ldr	r0, [pc, #20]	@ (800cc84 <fiprintf+0x20>)
 800cc6e:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc72:	6800      	ldr	r0, [r0, #0]
 800cc74:	9301      	str	r3, [sp, #4]
 800cc76:	f000 f83f 	bl	800ccf8 <_vfiprintf_r>
 800cc7a:	b002      	add	sp, #8
 800cc7c:	f85d eb04 	ldr.w	lr, [sp], #4
 800cc80:	b003      	add	sp, #12
 800cc82:	4770      	bx	lr
 800cc84:	20000038 	.word	0x20000038

0800cc88 <abort>:
 800cc88:	b508      	push	{r3, lr}
 800cc8a:	2006      	movs	r0, #6
 800cc8c:	f000 fa08 	bl	800d0a0 <raise>
 800cc90:	2001      	movs	r0, #1
 800cc92:	f7f5 f805 	bl	8001ca0 <_exit>

0800cc96 <_malloc_usable_size_r>:
 800cc96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc9a:	1f18      	subs	r0, r3, #4
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	bfbc      	itt	lt
 800cca0:	580b      	ldrlt	r3, [r1, r0]
 800cca2:	18c0      	addlt	r0, r0, r3
 800cca4:	4770      	bx	lr

0800cca6 <__sfputc_r>:
 800cca6:	6893      	ldr	r3, [r2, #8]
 800cca8:	3b01      	subs	r3, #1
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	b410      	push	{r4}
 800ccae:	6093      	str	r3, [r2, #8]
 800ccb0:	da08      	bge.n	800ccc4 <__sfputc_r+0x1e>
 800ccb2:	6994      	ldr	r4, [r2, #24]
 800ccb4:	42a3      	cmp	r3, r4
 800ccb6:	db01      	blt.n	800ccbc <__sfputc_r+0x16>
 800ccb8:	290a      	cmp	r1, #10
 800ccba:	d103      	bne.n	800ccc4 <__sfputc_r+0x1e>
 800ccbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ccc0:	f000 b932 	b.w	800cf28 <__swbuf_r>
 800ccc4:	6813      	ldr	r3, [r2, #0]
 800ccc6:	1c58      	adds	r0, r3, #1
 800ccc8:	6010      	str	r0, [r2, #0]
 800ccca:	7019      	strb	r1, [r3, #0]
 800cccc:	4608      	mov	r0, r1
 800ccce:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ccd2:	4770      	bx	lr

0800ccd4 <__sfputs_r>:
 800ccd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccd6:	4606      	mov	r6, r0
 800ccd8:	460f      	mov	r7, r1
 800ccda:	4614      	mov	r4, r2
 800ccdc:	18d5      	adds	r5, r2, r3
 800ccde:	42ac      	cmp	r4, r5
 800cce0:	d101      	bne.n	800cce6 <__sfputs_r+0x12>
 800cce2:	2000      	movs	r0, #0
 800cce4:	e007      	b.n	800ccf6 <__sfputs_r+0x22>
 800cce6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccea:	463a      	mov	r2, r7
 800ccec:	4630      	mov	r0, r6
 800ccee:	f7ff ffda 	bl	800cca6 <__sfputc_r>
 800ccf2:	1c43      	adds	r3, r0, #1
 800ccf4:	d1f3      	bne.n	800ccde <__sfputs_r+0xa>
 800ccf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ccf8 <_vfiprintf_r>:
 800ccf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccfc:	460d      	mov	r5, r1
 800ccfe:	b09d      	sub	sp, #116	@ 0x74
 800cd00:	4614      	mov	r4, r2
 800cd02:	4698      	mov	r8, r3
 800cd04:	4606      	mov	r6, r0
 800cd06:	b118      	cbz	r0, 800cd10 <_vfiprintf_r+0x18>
 800cd08:	6a03      	ldr	r3, [r0, #32]
 800cd0a:	b90b      	cbnz	r3, 800cd10 <_vfiprintf_r+0x18>
 800cd0c:	f7fc f9b0 	bl	8009070 <__sinit>
 800cd10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cd12:	07d9      	lsls	r1, r3, #31
 800cd14:	d405      	bmi.n	800cd22 <_vfiprintf_r+0x2a>
 800cd16:	89ab      	ldrh	r3, [r5, #12]
 800cd18:	059a      	lsls	r2, r3, #22
 800cd1a:	d402      	bmi.n	800cd22 <_vfiprintf_r+0x2a>
 800cd1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cd1e:	f7fc fafe 	bl	800931e <__retarget_lock_acquire_recursive>
 800cd22:	89ab      	ldrh	r3, [r5, #12]
 800cd24:	071b      	lsls	r3, r3, #28
 800cd26:	d501      	bpl.n	800cd2c <_vfiprintf_r+0x34>
 800cd28:	692b      	ldr	r3, [r5, #16]
 800cd2a:	b99b      	cbnz	r3, 800cd54 <_vfiprintf_r+0x5c>
 800cd2c:	4629      	mov	r1, r5
 800cd2e:	4630      	mov	r0, r6
 800cd30:	f000 f938 	bl	800cfa4 <__swsetup_r>
 800cd34:	b170      	cbz	r0, 800cd54 <_vfiprintf_r+0x5c>
 800cd36:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cd38:	07dc      	lsls	r4, r3, #31
 800cd3a:	d504      	bpl.n	800cd46 <_vfiprintf_r+0x4e>
 800cd3c:	f04f 30ff 	mov.w	r0, #4294967295
 800cd40:	b01d      	add	sp, #116	@ 0x74
 800cd42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd46:	89ab      	ldrh	r3, [r5, #12]
 800cd48:	0598      	lsls	r0, r3, #22
 800cd4a:	d4f7      	bmi.n	800cd3c <_vfiprintf_r+0x44>
 800cd4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cd4e:	f7fc fae7 	bl	8009320 <__retarget_lock_release_recursive>
 800cd52:	e7f3      	b.n	800cd3c <_vfiprintf_r+0x44>
 800cd54:	2300      	movs	r3, #0
 800cd56:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd58:	2320      	movs	r3, #32
 800cd5a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cd5e:	f8cd 800c 	str.w	r8, [sp, #12]
 800cd62:	2330      	movs	r3, #48	@ 0x30
 800cd64:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800cf14 <_vfiprintf_r+0x21c>
 800cd68:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cd6c:	f04f 0901 	mov.w	r9, #1
 800cd70:	4623      	mov	r3, r4
 800cd72:	469a      	mov	sl, r3
 800cd74:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd78:	b10a      	cbz	r2, 800cd7e <_vfiprintf_r+0x86>
 800cd7a:	2a25      	cmp	r2, #37	@ 0x25
 800cd7c:	d1f9      	bne.n	800cd72 <_vfiprintf_r+0x7a>
 800cd7e:	ebba 0b04 	subs.w	fp, sl, r4
 800cd82:	d00b      	beq.n	800cd9c <_vfiprintf_r+0xa4>
 800cd84:	465b      	mov	r3, fp
 800cd86:	4622      	mov	r2, r4
 800cd88:	4629      	mov	r1, r5
 800cd8a:	4630      	mov	r0, r6
 800cd8c:	f7ff ffa2 	bl	800ccd4 <__sfputs_r>
 800cd90:	3001      	adds	r0, #1
 800cd92:	f000 80a7 	beq.w	800cee4 <_vfiprintf_r+0x1ec>
 800cd96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cd98:	445a      	add	r2, fp
 800cd9a:	9209      	str	r2, [sp, #36]	@ 0x24
 800cd9c:	f89a 3000 	ldrb.w	r3, [sl]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	f000 809f 	beq.w	800cee4 <_vfiprintf_r+0x1ec>
 800cda6:	2300      	movs	r3, #0
 800cda8:	f04f 32ff 	mov.w	r2, #4294967295
 800cdac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cdb0:	f10a 0a01 	add.w	sl, sl, #1
 800cdb4:	9304      	str	r3, [sp, #16]
 800cdb6:	9307      	str	r3, [sp, #28]
 800cdb8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cdbc:	931a      	str	r3, [sp, #104]	@ 0x68
 800cdbe:	4654      	mov	r4, sl
 800cdc0:	2205      	movs	r2, #5
 800cdc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdc6:	4853      	ldr	r0, [pc, #332]	@ (800cf14 <_vfiprintf_r+0x21c>)
 800cdc8:	f7f3 fa02 	bl	80001d0 <memchr>
 800cdcc:	9a04      	ldr	r2, [sp, #16]
 800cdce:	b9d8      	cbnz	r0, 800ce08 <_vfiprintf_r+0x110>
 800cdd0:	06d1      	lsls	r1, r2, #27
 800cdd2:	bf44      	itt	mi
 800cdd4:	2320      	movmi	r3, #32
 800cdd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cdda:	0713      	lsls	r3, r2, #28
 800cddc:	bf44      	itt	mi
 800cdde:	232b      	movmi	r3, #43	@ 0x2b
 800cde0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cde4:	f89a 3000 	ldrb.w	r3, [sl]
 800cde8:	2b2a      	cmp	r3, #42	@ 0x2a
 800cdea:	d015      	beq.n	800ce18 <_vfiprintf_r+0x120>
 800cdec:	9a07      	ldr	r2, [sp, #28]
 800cdee:	4654      	mov	r4, sl
 800cdf0:	2000      	movs	r0, #0
 800cdf2:	f04f 0c0a 	mov.w	ip, #10
 800cdf6:	4621      	mov	r1, r4
 800cdf8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cdfc:	3b30      	subs	r3, #48	@ 0x30
 800cdfe:	2b09      	cmp	r3, #9
 800ce00:	d94b      	bls.n	800ce9a <_vfiprintf_r+0x1a2>
 800ce02:	b1b0      	cbz	r0, 800ce32 <_vfiprintf_r+0x13a>
 800ce04:	9207      	str	r2, [sp, #28]
 800ce06:	e014      	b.n	800ce32 <_vfiprintf_r+0x13a>
 800ce08:	eba0 0308 	sub.w	r3, r0, r8
 800ce0c:	fa09 f303 	lsl.w	r3, r9, r3
 800ce10:	4313      	orrs	r3, r2
 800ce12:	9304      	str	r3, [sp, #16]
 800ce14:	46a2      	mov	sl, r4
 800ce16:	e7d2      	b.n	800cdbe <_vfiprintf_r+0xc6>
 800ce18:	9b03      	ldr	r3, [sp, #12]
 800ce1a:	1d19      	adds	r1, r3, #4
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	9103      	str	r1, [sp, #12]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	bfbb      	ittet	lt
 800ce24:	425b      	neglt	r3, r3
 800ce26:	f042 0202 	orrlt.w	r2, r2, #2
 800ce2a:	9307      	strge	r3, [sp, #28]
 800ce2c:	9307      	strlt	r3, [sp, #28]
 800ce2e:	bfb8      	it	lt
 800ce30:	9204      	strlt	r2, [sp, #16]
 800ce32:	7823      	ldrb	r3, [r4, #0]
 800ce34:	2b2e      	cmp	r3, #46	@ 0x2e
 800ce36:	d10a      	bne.n	800ce4e <_vfiprintf_r+0x156>
 800ce38:	7863      	ldrb	r3, [r4, #1]
 800ce3a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ce3c:	d132      	bne.n	800cea4 <_vfiprintf_r+0x1ac>
 800ce3e:	9b03      	ldr	r3, [sp, #12]
 800ce40:	1d1a      	adds	r2, r3, #4
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	9203      	str	r2, [sp, #12]
 800ce46:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ce4a:	3402      	adds	r4, #2
 800ce4c:	9305      	str	r3, [sp, #20]
 800ce4e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cf24 <_vfiprintf_r+0x22c>
 800ce52:	7821      	ldrb	r1, [r4, #0]
 800ce54:	2203      	movs	r2, #3
 800ce56:	4650      	mov	r0, sl
 800ce58:	f7f3 f9ba 	bl	80001d0 <memchr>
 800ce5c:	b138      	cbz	r0, 800ce6e <_vfiprintf_r+0x176>
 800ce5e:	9b04      	ldr	r3, [sp, #16]
 800ce60:	eba0 000a 	sub.w	r0, r0, sl
 800ce64:	2240      	movs	r2, #64	@ 0x40
 800ce66:	4082      	lsls	r2, r0
 800ce68:	4313      	orrs	r3, r2
 800ce6a:	3401      	adds	r4, #1
 800ce6c:	9304      	str	r3, [sp, #16]
 800ce6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce72:	4829      	ldr	r0, [pc, #164]	@ (800cf18 <_vfiprintf_r+0x220>)
 800ce74:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ce78:	2206      	movs	r2, #6
 800ce7a:	f7f3 f9a9 	bl	80001d0 <memchr>
 800ce7e:	2800      	cmp	r0, #0
 800ce80:	d03f      	beq.n	800cf02 <_vfiprintf_r+0x20a>
 800ce82:	4b26      	ldr	r3, [pc, #152]	@ (800cf1c <_vfiprintf_r+0x224>)
 800ce84:	bb1b      	cbnz	r3, 800cece <_vfiprintf_r+0x1d6>
 800ce86:	9b03      	ldr	r3, [sp, #12]
 800ce88:	3307      	adds	r3, #7
 800ce8a:	f023 0307 	bic.w	r3, r3, #7
 800ce8e:	3308      	adds	r3, #8
 800ce90:	9303      	str	r3, [sp, #12]
 800ce92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce94:	443b      	add	r3, r7
 800ce96:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce98:	e76a      	b.n	800cd70 <_vfiprintf_r+0x78>
 800ce9a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ce9e:	460c      	mov	r4, r1
 800cea0:	2001      	movs	r0, #1
 800cea2:	e7a8      	b.n	800cdf6 <_vfiprintf_r+0xfe>
 800cea4:	2300      	movs	r3, #0
 800cea6:	3401      	adds	r4, #1
 800cea8:	9305      	str	r3, [sp, #20]
 800ceaa:	4619      	mov	r1, r3
 800ceac:	f04f 0c0a 	mov.w	ip, #10
 800ceb0:	4620      	mov	r0, r4
 800ceb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ceb6:	3a30      	subs	r2, #48	@ 0x30
 800ceb8:	2a09      	cmp	r2, #9
 800ceba:	d903      	bls.n	800cec4 <_vfiprintf_r+0x1cc>
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d0c6      	beq.n	800ce4e <_vfiprintf_r+0x156>
 800cec0:	9105      	str	r1, [sp, #20]
 800cec2:	e7c4      	b.n	800ce4e <_vfiprintf_r+0x156>
 800cec4:	fb0c 2101 	mla	r1, ip, r1, r2
 800cec8:	4604      	mov	r4, r0
 800ceca:	2301      	movs	r3, #1
 800cecc:	e7f0      	b.n	800ceb0 <_vfiprintf_r+0x1b8>
 800cece:	ab03      	add	r3, sp, #12
 800ced0:	9300      	str	r3, [sp, #0]
 800ced2:	462a      	mov	r2, r5
 800ced4:	4b12      	ldr	r3, [pc, #72]	@ (800cf20 <_vfiprintf_r+0x228>)
 800ced6:	a904      	add	r1, sp, #16
 800ced8:	4630      	mov	r0, r6
 800ceda:	f7fb fa79 	bl	80083d0 <_printf_float>
 800cede:	4607      	mov	r7, r0
 800cee0:	1c78      	adds	r0, r7, #1
 800cee2:	d1d6      	bne.n	800ce92 <_vfiprintf_r+0x19a>
 800cee4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cee6:	07d9      	lsls	r1, r3, #31
 800cee8:	d405      	bmi.n	800cef6 <_vfiprintf_r+0x1fe>
 800ceea:	89ab      	ldrh	r3, [r5, #12]
 800ceec:	059a      	lsls	r2, r3, #22
 800ceee:	d402      	bmi.n	800cef6 <_vfiprintf_r+0x1fe>
 800cef0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cef2:	f7fc fa15 	bl	8009320 <__retarget_lock_release_recursive>
 800cef6:	89ab      	ldrh	r3, [r5, #12]
 800cef8:	065b      	lsls	r3, r3, #25
 800cefa:	f53f af1f 	bmi.w	800cd3c <_vfiprintf_r+0x44>
 800cefe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cf00:	e71e      	b.n	800cd40 <_vfiprintf_r+0x48>
 800cf02:	ab03      	add	r3, sp, #12
 800cf04:	9300      	str	r3, [sp, #0]
 800cf06:	462a      	mov	r2, r5
 800cf08:	4b05      	ldr	r3, [pc, #20]	@ (800cf20 <_vfiprintf_r+0x228>)
 800cf0a:	a904      	add	r1, sp, #16
 800cf0c:	4630      	mov	r0, r6
 800cf0e:	f7fb fcf7 	bl	8008900 <_printf_i>
 800cf12:	e7e4      	b.n	800cede <_vfiprintf_r+0x1e6>
 800cf14:	0800da5b 	.word	0x0800da5b
 800cf18:	0800da65 	.word	0x0800da65
 800cf1c:	080083d1 	.word	0x080083d1
 800cf20:	0800ccd5 	.word	0x0800ccd5
 800cf24:	0800da61 	.word	0x0800da61

0800cf28 <__swbuf_r>:
 800cf28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf2a:	460e      	mov	r6, r1
 800cf2c:	4614      	mov	r4, r2
 800cf2e:	4605      	mov	r5, r0
 800cf30:	b118      	cbz	r0, 800cf3a <__swbuf_r+0x12>
 800cf32:	6a03      	ldr	r3, [r0, #32]
 800cf34:	b90b      	cbnz	r3, 800cf3a <__swbuf_r+0x12>
 800cf36:	f7fc f89b 	bl	8009070 <__sinit>
 800cf3a:	69a3      	ldr	r3, [r4, #24]
 800cf3c:	60a3      	str	r3, [r4, #8]
 800cf3e:	89a3      	ldrh	r3, [r4, #12]
 800cf40:	071a      	lsls	r2, r3, #28
 800cf42:	d501      	bpl.n	800cf48 <__swbuf_r+0x20>
 800cf44:	6923      	ldr	r3, [r4, #16]
 800cf46:	b943      	cbnz	r3, 800cf5a <__swbuf_r+0x32>
 800cf48:	4621      	mov	r1, r4
 800cf4a:	4628      	mov	r0, r5
 800cf4c:	f000 f82a 	bl	800cfa4 <__swsetup_r>
 800cf50:	b118      	cbz	r0, 800cf5a <__swbuf_r+0x32>
 800cf52:	f04f 37ff 	mov.w	r7, #4294967295
 800cf56:	4638      	mov	r0, r7
 800cf58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf5a:	6823      	ldr	r3, [r4, #0]
 800cf5c:	6922      	ldr	r2, [r4, #16]
 800cf5e:	1a98      	subs	r0, r3, r2
 800cf60:	6963      	ldr	r3, [r4, #20]
 800cf62:	b2f6      	uxtb	r6, r6
 800cf64:	4283      	cmp	r3, r0
 800cf66:	4637      	mov	r7, r6
 800cf68:	dc05      	bgt.n	800cf76 <__swbuf_r+0x4e>
 800cf6a:	4621      	mov	r1, r4
 800cf6c:	4628      	mov	r0, r5
 800cf6e:	f7ff f96f 	bl	800c250 <_fflush_r>
 800cf72:	2800      	cmp	r0, #0
 800cf74:	d1ed      	bne.n	800cf52 <__swbuf_r+0x2a>
 800cf76:	68a3      	ldr	r3, [r4, #8]
 800cf78:	3b01      	subs	r3, #1
 800cf7a:	60a3      	str	r3, [r4, #8]
 800cf7c:	6823      	ldr	r3, [r4, #0]
 800cf7e:	1c5a      	adds	r2, r3, #1
 800cf80:	6022      	str	r2, [r4, #0]
 800cf82:	701e      	strb	r6, [r3, #0]
 800cf84:	6962      	ldr	r2, [r4, #20]
 800cf86:	1c43      	adds	r3, r0, #1
 800cf88:	429a      	cmp	r2, r3
 800cf8a:	d004      	beq.n	800cf96 <__swbuf_r+0x6e>
 800cf8c:	89a3      	ldrh	r3, [r4, #12]
 800cf8e:	07db      	lsls	r3, r3, #31
 800cf90:	d5e1      	bpl.n	800cf56 <__swbuf_r+0x2e>
 800cf92:	2e0a      	cmp	r6, #10
 800cf94:	d1df      	bne.n	800cf56 <__swbuf_r+0x2e>
 800cf96:	4621      	mov	r1, r4
 800cf98:	4628      	mov	r0, r5
 800cf9a:	f7ff f959 	bl	800c250 <_fflush_r>
 800cf9e:	2800      	cmp	r0, #0
 800cfa0:	d0d9      	beq.n	800cf56 <__swbuf_r+0x2e>
 800cfa2:	e7d6      	b.n	800cf52 <__swbuf_r+0x2a>

0800cfa4 <__swsetup_r>:
 800cfa4:	b538      	push	{r3, r4, r5, lr}
 800cfa6:	4b29      	ldr	r3, [pc, #164]	@ (800d04c <__swsetup_r+0xa8>)
 800cfa8:	4605      	mov	r5, r0
 800cfaa:	6818      	ldr	r0, [r3, #0]
 800cfac:	460c      	mov	r4, r1
 800cfae:	b118      	cbz	r0, 800cfb8 <__swsetup_r+0x14>
 800cfb0:	6a03      	ldr	r3, [r0, #32]
 800cfb2:	b90b      	cbnz	r3, 800cfb8 <__swsetup_r+0x14>
 800cfb4:	f7fc f85c 	bl	8009070 <__sinit>
 800cfb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cfbc:	0719      	lsls	r1, r3, #28
 800cfbe:	d422      	bmi.n	800d006 <__swsetup_r+0x62>
 800cfc0:	06da      	lsls	r2, r3, #27
 800cfc2:	d407      	bmi.n	800cfd4 <__swsetup_r+0x30>
 800cfc4:	2209      	movs	r2, #9
 800cfc6:	602a      	str	r2, [r5, #0]
 800cfc8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cfcc:	81a3      	strh	r3, [r4, #12]
 800cfce:	f04f 30ff 	mov.w	r0, #4294967295
 800cfd2:	e033      	b.n	800d03c <__swsetup_r+0x98>
 800cfd4:	0758      	lsls	r0, r3, #29
 800cfd6:	d512      	bpl.n	800cffe <__swsetup_r+0x5a>
 800cfd8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cfda:	b141      	cbz	r1, 800cfee <__swsetup_r+0x4a>
 800cfdc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cfe0:	4299      	cmp	r1, r3
 800cfe2:	d002      	beq.n	800cfea <__swsetup_r+0x46>
 800cfe4:	4628      	mov	r0, r5
 800cfe6:	f7fd f80b 	bl	800a000 <_free_r>
 800cfea:	2300      	movs	r3, #0
 800cfec:	6363      	str	r3, [r4, #52]	@ 0x34
 800cfee:	89a3      	ldrh	r3, [r4, #12]
 800cff0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cff4:	81a3      	strh	r3, [r4, #12]
 800cff6:	2300      	movs	r3, #0
 800cff8:	6063      	str	r3, [r4, #4]
 800cffa:	6923      	ldr	r3, [r4, #16]
 800cffc:	6023      	str	r3, [r4, #0]
 800cffe:	89a3      	ldrh	r3, [r4, #12]
 800d000:	f043 0308 	orr.w	r3, r3, #8
 800d004:	81a3      	strh	r3, [r4, #12]
 800d006:	6923      	ldr	r3, [r4, #16]
 800d008:	b94b      	cbnz	r3, 800d01e <__swsetup_r+0x7a>
 800d00a:	89a3      	ldrh	r3, [r4, #12]
 800d00c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d010:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d014:	d003      	beq.n	800d01e <__swsetup_r+0x7a>
 800d016:	4621      	mov	r1, r4
 800d018:	4628      	mov	r0, r5
 800d01a:	f000 f883 	bl	800d124 <__smakebuf_r>
 800d01e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d022:	f013 0201 	ands.w	r2, r3, #1
 800d026:	d00a      	beq.n	800d03e <__swsetup_r+0x9a>
 800d028:	2200      	movs	r2, #0
 800d02a:	60a2      	str	r2, [r4, #8]
 800d02c:	6962      	ldr	r2, [r4, #20]
 800d02e:	4252      	negs	r2, r2
 800d030:	61a2      	str	r2, [r4, #24]
 800d032:	6922      	ldr	r2, [r4, #16]
 800d034:	b942      	cbnz	r2, 800d048 <__swsetup_r+0xa4>
 800d036:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d03a:	d1c5      	bne.n	800cfc8 <__swsetup_r+0x24>
 800d03c:	bd38      	pop	{r3, r4, r5, pc}
 800d03e:	0799      	lsls	r1, r3, #30
 800d040:	bf58      	it	pl
 800d042:	6962      	ldrpl	r2, [r4, #20]
 800d044:	60a2      	str	r2, [r4, #8]
 800d046:	e7f4      	b.n	800d032 <__swsetup_r+0x8e>
 800d048:	2000      	movs	r0, #0
 800d04a:	e7f7      	b.n	800d03c <__swsetup_r+0x98>
 800d04c:	20000038 	.word	0x20000038

0800d050 <_raise_r>:
 800d050:	291f      	cmp	r1, #31
 800d052:	b538      	push	{r3, r4, r5, lr}
 800d054:	4605      	mov	r5, r0
 800d056:	460c      	mov	r4, r1
 800d058:	d904      	bls.n	800d064 <_raise_r+0x14>
 800d05a:	2316      	movs	r3, #22
 800d05c:	6003      	str	r3, [r0, #0]
 800d05e:	f04f 30ff 	mov.w	r0, #4294967295
 800d062:	bd38      	pop	{r3, r4, r5, pc}
 800d064:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d066:	b112      	cbz	r2, 800d06e <_raise_r+0x1e>
 800d068:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d06c:	b94b      	cbnz	r3, 800d082 <_raise_r+0x32>
 800d06e:	4628      	mov	r0, r5
 800d070:	f000 f830 	bl	800d0d4 <_getpid_r>
 800d074:	4622      	mov	r2, r4
 800d076:	4601      	mov	r1, r0
 800d078:	4628      	mov	r0, r5
 800d07a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d07e:	f000 b817 	b.w	800d0b0 <_kill_r>
 800d082:	2b01      	cmp	r3, #1
 800d084:	d00a      	beq.n	800d09c <_raise_r+0x4c>
 800d086:	1c59      	adds	r1, r3, #1
 800d088:	d103      	bne.n	800d092 <_raise_r+0x42>
 800d08a:	2316      	movs	r3, #22
 800d08c:	6003      	str	r3, [r0, #0]
 800d08e:	2001      	movs	r0, #1
 800d090:	e7e7      	b.n	800d062 <_raise_r+0x12>
 800d092:	2100      	movs	r1, #0
 800d094:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d098:	4620      	mov	r0, r4
 800d09a:	4798      	blx	r3
 800d09c:	2000      	movs	r0, #0
 800d09e:	e7e0      	b.n	800d062 <_raise_r+0x12>

0800d0a0 <raise>:
 800d0a0:	4b02      	ldr	r3, [pc, #8]	@ (800d0ac <raise+0xc>)
 800d0a2:	4601      	mov	r1, r0
 800d0a4:	6818      	ldr	r0, [r3, #0]
 800d0a6:	f7ff bfd3 	b.w	800d050 <_raise_r>
 800d0aa:	bf00      	nop
 800d0ac:	20000038 	.word	0x20000038

0800d0b0 <_kill_r>:
 800d0b0:	b538      	push	{r3, r4, r5, lr}
 800d0b2:	4d07      	ldr	r5, [pc, #28]	@ (800d0d0 <_kill_r+0x20>)
 800d0b4:	2300      	movs	r3, #0
 800d0b6:	4604      	mov	r4, r0
 800d0b8:	4608      	mov	r0, r1
 800d0ba:	4611      	mov	r1, r2
 800d0bc:	602b      	str	r3, [r5, #0]
 800d0be:	f7f4 fddf 	bl	8001c80 <_kill>
 800d0c2:	1c43      	adds	r3, r0, #1
 800d0c4:	d102      	bne.n	800d0cc <_kill_r+0x1c>
 800d0c6:	682b      	ldr	r3, [r5, #0]
 800d0c8:	b103      	cbz	r3, 800d0cc <_kill_r+0x1c>
 800d0ca:	6023      	str	r3, [r4, #0]
 800d0cc:	bd38      	pop	{r3, r4, r5, pc}
 800d0ce:	bf00      	nop
 800d0d0:	20001180 	.word	0x20001180

0800d0d4 <_getpid_r>:
 800d0d4:	f7f4 bdcc 	b.w	8001c70 <_getpid>

0800d0d8 <__swhatbuf_r>:
 800d0d8:	b570      	push	{r4, r5, r6, lr}
 800d0da:	460c      	mov	r4, r1
 800d0dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0e0:	2900      	cmp	r1, #0
 800d0e2:	b096      	sub	sp, #88	@ 0x58
 800d0e4:	4615      	mov	r5, r2
 800d0e6:	461e      	mov	r6, r3
 800d0e8:	da0d      	bge.n	800d106 <__swhatbuf_r+0x2e>
 800d0ea:	89a3      	ldrh	r3, [r4, #12]
 800d0ec:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d0f0:	f04f 0100 	mov.w	r1, #0
 800d0f4:	bf14      	ite	ne
 800d0f6:	2340      	movne	r3, #64	@ 0x40
 800d0f8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d0fc:	2000      	movs	r0, #0
 800d0fe:	6031      	str	r1, [r6, #0]
 800d100:	602b      	str	r3, [r5, #0]
 800d102:	b016      	add	sp, #88	@ 0x58
 800d104:	bd70      	pop	{r4, r5, r6, pc}
 800d106:	466a      	mov	r2, sp
 800d108:	f000 f848 	bl	800d19c <_fstat_r>
 800d10c:	2800      	cmp	r0, #0
 800d10e:	dbec      	blt.n	800d0ea <__swhatbuf_r+0x12>
 800d110:	9901      	ldr	r1, [sp, #4]
 800d112:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d116:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d11a:	4259      	negs	r1, r3
 800d11c:	4159      	adcs	r1, r3
 800d11e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d122:	e7eb      	b.n	800d0fc <__swhatbuf_r+0x24>

0800d124 <__smakebuf_r>:
 800d124:	898b      	ldrh	r3, [r1, #12]
 800d126:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d128:	079d      	lsls	r5, r3, #30
 800d12a:	4606      	mov	r6, r0
 800d12c:	460c      	mov	r4, r1
 800d12e:	d507      	bpl.n	800d140 <__smakebuf_r+0x1c>
 800d130:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d134:	6023      	str	r3, [r4, #0]
 800d136:	6123      	str	r3, [r4, #16]
 800d138:	2301      	movs	r3, #1
 800d13a:	6163      	str	r3, [r4, #20]
 800d13c:	b003      	add	sp, #12
 800d13e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d140:	ab01      	add	r3, sp, #4
 800d142:	466a      	mov	r2, sp
 800d144:	f7ff ffc8 	bl	800d0d8 <__swhatbuf_r>
 800d148:	9f00      	ldr	r7, [sp, #0]
 800d14a:	4605      	mov	r5, r0
 800d14c:	4639      	mov	r1, r7
 800d14e:	4630      	mov	r0, r6
 800d150:	f7fc ffca 	bl	800a0e8 <_malloc_r>
 800d154:	b948      	cbnz	r0, 800d16a <__smakebuf_r+0x46>
 800d156:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d15a:	059a      	lsls	r2, r3, #22
 800d15c:	d4ee      	bmi.n	800d13c <__smakebuf_r+0x18>
 800d15e:	f023 0303 	bic.w	r3, r3, #3
 800d162:	f043 0302 	orr.w	r3, r3, #2
 800d166:	81a3      	strh	r3, [r4, #12]
 800d168:	e7e2      	b.n	800d130 <__smakebuf_r+0xc>
 800d16a:	89a3      	ldrh	r3, [r4, #12]
 800d16c:	6020      	str	r0, [r4, #0]
 800d16e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d172:	81a3      	strh	r3, [r4, #12]
 800d174:	9b01      	ldr	r3, [sp, #4]
 800d176:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d17a:	b15b      	cbz	r3, 800d194 <__smakebuf_r+0x70>
 800d17c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d180:	4630      	mov	r0, r6
 800d182:	f000 f81d 	bl	800d1c0 <_isatty_r>
 800d186:	b128      	cbz	r0, 800d194 <__smakebuf_r+0x70>
 800d188:	89a3      	ldrh	r3, [r4, #12]
 800d18a:	f023 0303 	bic.w	r3, r3, #3
 800d18e:	f043 0301 	orr.w	r3, r3, #1
 800d192:	81a3      	strh	r3, [r4, #12]
 800d194:	89a3      	ldrh	r3, [r4, #12]
 800d196:	431d      	orrs	r5, r3
 800d198:	81a5      	strh	r5, [r4, #12]
 800d19a:	e7cf      	b.n	800d13c <__smakebuf_r+0x18>

0800d19c <_fstat_r>:
 800d19c:	b538      	push	{r3, r4, r5, lr}
 800d19e:	4d07      	ldr	r5, [pc, #28]	@ (800d1bc <_fstat_r+0x20>)
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	4604      	mov	r4, r0
 800d1a4:	4608      	mov	r0, r1
 800d1a6:	4611      	mov	r1, r2
 800d1a8:	602b      	str	r3, [r5, #0]
 800d1aa:	f7f4 fdc9 	bl	8001d40 <_fstat>
 800d1ae:	1c43      	adds	r3, r0, #1
 800d1b0:	d102      	bne.n	800d1b8 <_fstat_r+0x1c>
 800d1b2:	682b      	ldr	r3, [r5, #0]
 800d1b4:	b103      	cbz	r3, 800d1b8 <_fstat_r+0x1c>
 800d1b6:	6023      	str	r3, [r4, #0]
 800d1b8:	bd38      	pop	{r3, r4, r5, pc}
 800d1ba:	bf00      	nop
 800d1bc:	20001180 	.word	0x20001180

0800d1c0 <_isatty_r>:
 800d1c0:	b538      	push	{r3, r4, r5, lr}
 800d1c2:	4d06      	ldr	r5, [pc, #24]	@ (800d1dc <_isatty_r+0x1c>)
 800d1c4:	2300      	movs	r3, #0
 800d1c6:	4604      	mov	r4, r0
 800d1c8:	4608      	mov	r0, r1
 800d1ca:	602b      	str	r3, [r5, #0]
 800d1cc:	f7f4 fdc8 	bl	8001d60 <_isatty>
 800d1d0:	1c43      	adds	r3, r0, #1
 800d1d2:	d102      	bne.n	800d1da <_isatty_r+0x1a>
 800d1d4:	682b      	ldr	r3, [r5, #0]
 800d1d6:	b103      	cbz	r3, 800d1da <_isatty_r+0x1a>
 800d1d8:	6023      	str	r3, [r4, #0]
 800d1da:	bd38      	pop	{r3, r4, r5, pc}
 800d1dc:	20001180 	.word	0x20001180

0800d1e0 <_init>:
 800d1e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1e2:	bf00      	nop
 800d1e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d1e6:	bc08      	pop	{r3}
 800d1e8:	469e      	mov	lr, r3
 800d1ea:	4770      	bx	lr

0800d1ec <_fini>:
 800d1ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1ee:	bf00      	nop
 800d1f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d1f2:	bc08      	pop	{r3}
 800d1f4:	469e      	mov	lr, r3
 800d1f6:	4770      	bx	lr
