
STM32F407VGT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cdb8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ba4  0800cf48  0800cf48  0000df48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800daec  0800daec  0000f1f0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800daec  0800daec  0000eaec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800daf4  0800daf4  0000f1f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800daf4  0800daf4  0000eaf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800daf8  0800daf8  0000eaf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f0  20000000  0800dafc  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f1f0  2**0
                  CONTENTS
 10 .bss          00000e84  200001f0  200001f0  0000f1f0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001074  20001074  0000f1f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f1f0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014465  00000000  00000000  0000f220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000318f  00000000  00000000  00023685  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001260  00000000  00000000  00026818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e59  00000000  00000000  00027a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023a7e  00000000  00000000  000288d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000185ba  00000000  00000000  0004c34f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0a16  00000000  00000000  00064909  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013531f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006388  00000000  00000000  00135364  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000054  00000000  00000000  0013b6ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cf30 	.word	0x0800cf30

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	0800cf30 	.word	0x0800cf30

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	607b      	str	r3, [r7, #4]
 800102a:	4b18      	ldr	r3, [pc, #96]	@ (800108c <MX_DMA_Init+0x6c>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102e:	4a17      	ldr	r2, [pc, #92]	@ (800108c <MX_DMA_Init+0x6c>)
 8001030:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001034:	6313      	str	r3, [r2, #48]	@ 0x30
 8001036:	4b15      	ldr	r3, [pc, #84]	@ (800108c <MX_DMA_Init+0x6c>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800103e:	607b      	str	r3, [r7, #4]
 8001040:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001042:	2200      	movs	r2, #0
 8001044:	2100      	movs	r1, #0
 8001046:	200c      	movs	r0, #12
 8001048:	f002 fb3b 	bl	80036c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800104c:	200c      	movs	r0, #12
 800104e:	f002 fb54 	bl	80036fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001052:	2200      	movs	r2, #0
 8001054:	2100      	movs	r1, #0
 8001056:	200e      	movs	r0, #14
 8001058:	f002 fb33 	bl	80036c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800105c:	200e      	movs	r0, #14
 800105e:	f002 fb4c 	bl	80036fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001062:	2200      	movs	r2, #0
 8001064:	2100      	movs	r1, #0
 8001066:	2010      	movs	r0, #16
 8001068:	f002 fb2b 	bl	80036c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800106c:	2010      	movs	r0, #16
 800106e:	f002 fb44 	bl	80036fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001072:	2200      	movs	r2, #0
 8001074:	2100      	movs	r1, #0
 8001076:	2011      	movs	r0, #17
 8001078:	f002 fb23 	bl	80036c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800107c:	2011      	movs	r0, #17
 800107e:	f002 fb3c 	bl	80036fa <HAL_NVIC_EnableIRQ>

}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40023800 	.word	0x40023800

08001090 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b08c      	sub	sp, #48	@ 0x30
 8001094:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001096:	f107 031c 	add.w	r3, r7, #28
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	605a      	str	r2, [r3, #4]
 80010a0:	609a      	str	r2, [r3, #8]
 80010a2:	60da      	str	r2, [r3, #12]
 80010a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	61bb      	str	r3, [r7, #24]
 80010aa:	4b45      	ldr	r3, [pc, #276]	@ (80011c0 <MX_GPIO_Init+0x130>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ae:	4a44      	ldr	r2, [pc, #272]	@ (80011c0 <MX_GPIO_Init+0x130>)
 80010b0:	f043 0310 	orr.w	r3, r3, #16
 80010b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010b6:	4b42      	ldr	r3, [pc, #264]	@ (80011c0 <MX_GPIO_Init+0x130>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ba:	f003 0310 	and.w	r3, r3, #16
 80010be:	61bb      	str	r3, [r7, #24]
 80010c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	617b      	str	r3, [r7, #20]
 80010c6:	4b3e      	ldr	r3, [pc, #248]	@ (80011c0 <MX_GPIO_Init+0x130>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ca:	4a3d      	ldr	r2, [pc, #244]	@ (80011c0 <MX_GPIO_Init+0x130>)
 80010cc:	f043 0304 	orr.w	r3, r3, #4
 80010d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010d2:	4b3b      	ldr	r3, [pc, #236]	@ (80011c0 <MX_GPIO_Init+0x130>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d6:	f003 0304 	and.w	r3, r3, #4
 80010da:	617b      	str	r3, [r7, #20]
 80010dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	613b      	str	r3, [r7, #16]
 80010e2:	4b37      	ldr	r3, [pc, #220]	@ (80011c0 <MX_GPIO_Init+0x130>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e6:	4a36      	ldr	r2, [pc, #216]	@ (80011c0 <MX_GPIO_Init+0x130>)
 80010e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ee:	4b34      	ldr	r3, [pc, #208]	@ (80011c0 <MX_GPIO_Init+0x130>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010f6:	613b      	str	r3, [r7, #16]
 80010f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	60fb      	str	r3, [r7, #12]
 80010fe:	4b30      	ldr	r3, [pc, #192]	@ (80011c0 <MX_GPIO_Init+0x130>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001102:	4a2f      	ldr	r2, [pc, #188]	@ (80011c0 <MX_GPIO_Init+0x130>)
 8001104:	f043 0301 	orr.w	r3, r3, #1
 8001108:	6313      	str	r3, [r2, #48]	@ 0x30
 800110a:	4b2d      	ldr	r3, [pc, #180]	@ (80011c0 <MX_GPIO_Init+0x130>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	60bb      	str	r3, [r7, #8]
 800111a:	4b29      	ldr	r3, [pc, #164]	@ (80011c0 <MX_GPIO_Init+0x130>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111e:	4a28      	ldr	r2, [pc, #160]	@ (80011c0 <MX_GPIO_Init+0x130>)
 8001120:	f043 0302 	orr.w	r3, r3, #2
 8001124:	6313      	str	r3, [r2, #48]	@ 0x30
 8001126:	4b26      	ldr	r3, [pc, #152]	@ (80011c0 <MX_GPIO_Init+0x130>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112a:	f003 0302 	and.w	r3, r3, #2
 800112e:	60bb      	str	r3, [r7, #8]
 8001130:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	607b      	str	r3, [r7, #4]
 8001136:	4b22      	ldr	r3, [pc, #136]	@ (80011c0 <MX_GPIO_Init+0x130>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113a:	4a21      	ldr	r2, [pc, #132]	@ (80011c0 <MX_GPIO_Init+0x130>)
 800113c:	f043 0308 	orr.w	r3, r3, #8
 8001140:	6313      	str	r3, [r2, #48]	@ 0x30
 8001142:	4b1f      	ldr	r3, [pc, #124]	@ (80011c0 <MX_GPIO_Init+0x130>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001146:	f003 0308 	and.w	r3, r3, #8
 800114a:	607b      	str	r3, [r7, #4]
 800114c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 800114e:	2200      	movs	r2, #0
 8001150:	2140      	movs	r1, #64	@ 0x40
 8001152:	481c      	ldr	r0, [pc, #112]	@ (80011c4 <MX_GPIO_Init+0x134>)
 8001154:	f003 f88a 	bl	800426c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, motorB1_Pin|motorA2_Pin|motorA1_Pin|MOTORB2_Pin, GPIO_PIN_RESET);
 8001158:	2200      	movs	r2, #0
 800115a:	f44f 51f0 	mov.w	r1, #7680	@ 0x1e00
 800115e:	481a      	ldr	r0, [pc, #104]	@ (80011c8 <MX_GPIO_Init+0x138>)
 8001160:	f003 f884 	bl	800426c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TRIG_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 8001164:	2340      	movs	r3, #64	@ 0x40
 8001166:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001168:	2301      	movs	r3, #1
 800116a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001170:	2302      	movs	r3, #2
 8001172:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 8001174:	f107 031c 	add.w	r3, r7, #28
 8001178:	4619      	mov	r1, r3
 800117a:	4812      	ldr	r0, [pc, #72]	@ (80011c4 <MX_GPIO_Init+0x134>)
 800117c:	f002 feda 	bl	8003f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : out1_Pin out2_Pin out3_Pin out4_Pin
                           out5_Pin */
  GPIO_InitStruct.Pin = out1_Pin|out2_Pin|out3_Pin|out4_Pin
 8001180:	f44f 43f8 	mov.w	r3, #31744	@ 0x7c00
 8001184:	61fb      	str	r3, [r7, #28]
                          |out5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001186:	2300      	movs	r3, #0
 8001188:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800118e:	f107 031c 	add.w	r3, r7, #28
 8001192:	4619      	mov	r1, r3
 8001194:	480b      	ldr	r0, [pc, #44]	@ (80011c4 <MX_GPIO_Init+0x134>)
 8001196:	f002 fecd 	bl	8003f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : motorB1_Pin motorA2_Pin motorA1_Pin MOTORB2_Pin */
  GPIO_InitStruct.Pin = motorB1_Pin|motorA2_Pin|motorA1_Pin|MOTORB2_Pin;
 800119a:	f44f 53f0 	mov.w	r3, #7680	@ 0x1e00
 800119e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a0:	2301      	movs	r3, #1
 80011a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a8:	2300      	movs	r3, #0
 80011aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011ac:	f107 031c 	add.w	r3, r7, #28
 80011b0:	4619      	mov	r1, r3
 80011b2:	4805      	ldr	r0, [pc, #20]	@ (80011c8 <MX_GPIO_Init+0x138>)
 80011b4:	f002 febe 	bl	8003f34 <HAL_GPIO_Init>

}
 80011b8:	bf00      	nop
 80011ba:	3730      	adds	r7, #48	@ 0x30
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40023800 	.word	0x40023800
 80011c4:	40021000 	.word	0x40021000
 80011c8:	40020c00 	.word	0x40020c00

080011cc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011d0:	4b12      	ldr	r3, [pc, #72]	@ (800121c <MX_I2C1_Init+0x50>)
 80011d2:	4a13      	ldr	r2, [pc, #76]	@ (8001220 <MX_I2C1_Init+0x54>)
 80011d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80011d6:	4b11      	ldr	r3, [pc, #68]	@ (800121c <MX_I2C1_Init+0x50>)
 80011d8:	4a12      	ldr	r2, [pc, #72]	@ (8001224 <MX_I2C1_Init+0x58>)
 80011da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011dc:	4b0f      	ldr	r3, [pc, #60]	@ (800121c <MX_I2C1_Init+0x50>)
 80011de:	2200      	movs	r2, #0
 80011e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011e2:	4b0e      	ldr	r3, [pc, #56]	@ (800121c <MX_I2C1_Init+0x50>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011e8:	4b0c      	ldr	r3, [pc, #48]	@ (800121c <MX_I2C1_Init+0x50>)
 80011ea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80011ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011f0:	4b0a      	ldr	r3, [pc, #40]	@ (800121c <MX_I2C1_Init+0x50>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011f6:	4b09      	ldr	r3, [pc, #36]	@ (800121c <MX_I2C1_Init+0x50>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011fc:	4b07      	ldr	r3, [pc, #28]	@ (800121c <MX_I2C1_Init+0x50>)
 80011fe:	2200      	movs	r2, #0
 8001200:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001202:	4b06      	ldr	r3, [pc, #24]	@ (800121c <MX_I2C1_Init+0x50>)
 8001204:	2200      	movs	r2, #0
 8001206:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001208:	4804      	ldr	r0, [pc, #16]	@ (800121c <MX_I2C1_Init+0x50>)
 800120a:	f003 f849 	bl	80042a0 <HAL_I2C_Init>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001214:	f000 fc1c 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001218:	bf00      	nop
 800121a:	bd80      	pop	{r7, pc}
 800121c:	2000020c 	.word	0x2000020c
 8001220:	40005400 	.word	0x40005400
 8001224:	00061a80 	.word	0x00061a80

08001228 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b08a      	sub	sp, #40	@ 0x28
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001230:	f107 0314 	add.w	r3, r7, #20
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]
 800123e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a19      	ldr	r2, [pc, #100]	@ (80012ac <HAL_I2C_MspInit+0x84>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d12b      	bne.n	80012a2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	613b      	str	r3, [r7, #16]
 800124e:	4b18      	ldr	r3, [pc, #96]	@ (80012b0 <HAL_I2C_MspInit+0x88>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001252:	4a17      	ldr	r2, [pc, #92]	@ (80012b0 <HAL_I2C_MspInit+0x88>)
 8001254:	f043 0302 	orr.w	r3, r3, #2
 8001258:	6313      	str	r3, [r2, #48]	@ 0x30
 800125a:	4b15      	ldr	r3, [pc, #84]	@ (80012b0 <HAL_I2C_MspInit+0x88>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	613b      	str	r3, [r7, #16]
 8001264:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001266:	23c0      	movs	r3, #192	@ 0xc0
 8001268:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800126a:	2312      	movs	r3, #18
 800126c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	2300      	movs	r3, #0
 8001270:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001272:	2303      	movs	r3, #3
 8001274:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001276:	2304      	movs	r3, #4
 8001278:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800127a:	f107 0314 	add.w	r3, r7, #20
 800127e:	4619      	mov	r1, r3
 8001280:	480c      	ldr	r0, [pc, #48]	@ (80012b4 <HAL_I2C_MspInit+0x8c>)
 8001282:	f002 fe57 	bl	8003f34 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	60fb      	str	r3, [r7, #12]
 800128a:	4b09      	ldr	r3, [pc, #36]	@ (80012b0 <HAL_I2C_MspInit+0x88>)
 800128c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800128e:	4a08      	ldr	r2, [pc, #32]	@ (80012b0 <HAL_I2C_MspInit+0x88>)
 8001290:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001294:	6413      	str	r3, [r2, #64]	@ 0x40
 8001296:	4b06      	ldr	r3, [pc, #24]	@ (80012b0 <HAL_I2C_MspInit+0x88>)
 8001298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800129a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80012a2:	bf00      	nop
 80012a4:	3728      	adds	r7, #40	@ 0x28
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40005400 	.word	0x40005400
 80012b0:	40023800 	.word	0x40023800
 80012b4:	40020400 	.word	0x40020400

080012b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
Trace_PID.target_val=0;
 80012be:	4b7f      	ldr	r3, [pc, #508]	@ (80014bc <main+0x204>)
 80012c0:	f04f 0200 	mov.w	r2, #0
 80012c4:	619a      	str	r2, [r3, #24]
Angle_PID.target_val=0;
 80012c6:	4b7e      	ldr	r3, [pc, #504]	@ (80014c0 <main+0x208>)
 80012c8:	f04f 0200 	mov.w	r2, #0
 80012cc:	619a      	str	r2, [r3, #24]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012ce:	f002 f887 	bl	80033e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012d2:	f000 f931 	bl	8001538 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012d6:	f7ff fedb 	bl	8001090 <MX_GPIO_Init>
  MX_DMA_Init();
 80012da:	f7ff fea1 	bl	8001020 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80012de:	f001 f825 	bl	800232c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80012e2:	f7ff ff73 	bl	80011cc <MX_I2C1_Init>
  MX_USART3_UART_Init();
 80012e6:	f001 f84b 	bl	8002380 <MX_USART3_UART_Init>
  MX_TIM12_Init();
 80012ea:	f000 fe75 	bl	8001fd8 <MX_TIM12_Init>
  MX_TIM5_Init();
 80012ee:	f000 fd35 	bl	8001d5c <MX_TIM5_Init>
  MX_TIM7_Init();
 80012f2:	f000 fd87 	bl	8001e04 <MX_TIM7_Init>
  MX_TIM9_Init();
 80012f6:	f000 fe13 	bl	8001f20 <MX_TIM9_Init>
  MX_TIM8_Init();
 80012fa:	f000 fdb9 	bl	8001e70 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  /*USER Init BEGIN*/
  HAL_Delay(20);
 80012fe:	2014      	movs	r0, #20
 8001300:	f002 f8e0 	bl	80034c4 <HAL_Delay>
  OLED_Init();
 8001304:	f001 fbaa 	bl	8002a5c <OLED_Init>
  PID_Trace_init(&Trace_PID,Trace_PID.target_val,Trace_PID_Kp,Trace_PID_Ki,Trace_PID_Kd);
 8001308:	4b6c      	ldr	r3, [pc, #432]	@ (80014bc <main+0x204>)
 800130a:	edd3 7a06 	vldr	s15, [r3, #24]
 800130e:	4b6d      	ldr	r3, [pc, #436]	@ (80014c4 <main+0x20c>)
 8001310:	ed93 7a00 	vldr	s14, [r3]
 8001314:	4b6c      	ldr	r3, [pc, #432]	@ (80014c8 <main+0x210>)
 8001316:	edd3 6a00 	vldr	s13, [r3]
 800131a:	4b6c      	ldr	r3, [pc, #432]	@ (80014cc <main+0x214>)
 800131c:	ed93 6a00 	vldr	s12, [r3]
 8001320:	eef0 1a46 	vmov.f32	s3, s12
 8001324:	eeb0 1a66 	vmov.f32	s2, s13
 8001328:	eef0 0a47 	vmov.f32	s1, s14
 800132c:	eeb0 0a67 	vmov.f32	s0, s15
 8001330:	4862      	ldr	r0, [pc, #392]	@ (80014bc <main+0x204>)
 8001332:	f001 fa81 	bl	8002838 <PID_Trace_init>
  PID_param_init(&PIDL,PIDL.target_val,PIDR_Kp,PIDR_Ki,PIDR_Kd);
 8001336:	4b66      	ldr	r3, [pc, #408]	@ (80014d0 <main+0x218>)
 8001338:	edd3 7a00 	vldr	s15, [r3]
 800133c:	4b65      	ldr	r3, [pc, #404]	@ (80014d4 <main+0x21c>)
 800133e:	ed93 7a00 	vldr	s14, [r3]
 8001342:	4b65      	ldr	r3, [pc, #404]	@ (80014d8 <main+0x220>)
 8001344:	edd3 6a00 	vldr	s13, [r3]
 8001348:	4b64      	ldr	r3, [pc, #400]	@ (80014dc <main+0x224>)
 800134a:	ed93 6a00 	vldr	s12, [r3]
 800134e:	eef0 1a46 	vmov.f32	s3, s12
 8001352:	eeb0 1a66 	vmov.f32	s2, s13
 8001356:	eef0 0a47 	vmov.f32	s1, s14
 800135a:	eeb0 0a67 	vmov.f32	s0, s15
 800135e:	485c      	ldr	r0, [pc, #368]	@ (80014d0 <main+0x218>)
 8001360:	f001 ff78 	bl	8003254 <PID_param_init>
  PID_param_init(&PIDR,PIDR.target_val,PIDR_Kp,PIDR_Ki,PIDR_Kd);
 8001364:	4b5e      	ldr	r3, [pc, #376]	@ (80014e0 <main+0x228>)
 8001366:	edd3 7a00 	vldr	s15, [r3]
 800136a:	4b5a      	ldr	r3, [pc, #360]	@ (80014d4 <main+0x21c>)
 800136c:	ed93 7a00 	vldr	s14, [r3]
 8001370:	4b59      	ldr	r3, [pc, #356]	@ (80014d8 <main+0x220>)
 8001372:	edd3 6a00 	vldr	s13, [r3]
 8001376:	4b59      	ldr	r3, [pc, #356]	@ (80014dc <main+0x224>)
 8001378:	ed93 6a00 	vldr	s12, [r3]
 800137c:	eef0 1a46 	vmov.f32	s3, s12
 8001380:	eeb0 1a66 	vmov.f32	s2, s13
 8001384:	eef0 0a47 	vmov.f32	s1, s14
 8001388:	eeb0 0a67 	vmov.f32	s0, s15
 800138c:	4854      	ldr	r0, [pc, #336]	@ (80014e0 <main+0x228>)
 800138e:	f001 ff61 	bl	8003254 <PID_param_init>
  PID_Angle_init(&Angle_PID, Angle_PID.target_val, Angle_PID_Kp, Angle_PID_Ki, Angle_PID_Kd);
 8001392:	4b4b      	ldr	r3, [pc, #300]	@ (80014c0 <main+0x208>)
 8001394:	edd3 7a06 	vldr	s15, [r3, #24]
 8001398:	4b52      	ldr	r3, [pc, #328]	@ (80014e4 <main+0x22c>)
 800139a:	ed93 7a00 	vldr	s14, [r3]
 800139e:	4b52      	ldr	r3, [pc, #328]	@ (80014e8 <main+0x230>)
 80013a0:	edd3 6a00 	vldr	s13, [r3]
 80013a4:	4b51      	ldr	r3, [pc, #324]	@ (80014ec <main+0x234>)
 80013a6:	ed93 6a00 	vldr	s12, [r3]
 80013aa:	eef0 1a46 	vmov.f32	s3, s12
 80013ae:	eeb0 1a66 	vmov.f32	s2, s13
 80013b2:	eef0 0a47 	vmov.f32	s1, s14
 80013b6:	eeb0 0a67 	vmov.f32	s0, s15
 80013ba:	4841      	ldr	r0, [pc, #260]	@ (80014c0 <main+0x208>)
 80013bc:	f001 f98b 	bl	80026d6 <PID_Angle_init>

  /*USER Init END*/
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *)RxBuffer,sizeof(RxBuffer));   //开启接受不定长
 80013c0:	22ff      	movs	r2, #255	@ 0xff
 80013c2:	494b      	ldr	r1, [pc, #300]	@ (80014f0 <main+0x238>)
 80013c4:	484b      	ldr	r0, [pc, #300]	@ (80014f4 <main+0x23c>)
 80013c6:	f005 fcab 	bl	8006d20 <HAL_UARTEx_ReceiveToIdle_DMA>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t *)RxBuffer2,sizeof(RxBuffer2));   //开启接受不定长
 80013ca:	22ff      	movs	r2, #255	@ 0xff
 80013cc:	494a      	ldr	r1, [pc, #296]	@ (80014f8 <main+0x240>)
 80013ce:	484b      	ldr	r0, [pc, #300]	@ (80014fc <main+0x244>)
 80013d0:	f005 fca6 	bl	8006d20 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(huart2.hdmarx, DMA_IT_HT);          //关闭接受半中断
 80013d4:	4b47      	ldr	r3, [pc, #284]	@ (80014f4 <main+0x23c>)
 80013d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	4b45      	ldr	r3, [pc, #276]	@ (80014f4 <main+0x23c>)
 80013de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f022 0208 	bic.w	r2, r2, #8
 80013e6:	601a      	str	r2, [r3, #0]
  __HAL_DMA_DISABLE_IT(huart3.hdmarx, DMA_IT_HT);          //关闭接受半中断
 80013e8:	4b44      	ldr	r3, [pc, #272]	@ (80014fc <main+0x244>)
 80013ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	4b42      	ldr	r3, [pc, #264]	@ (80014fc <main+0x244>)
 80013f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f022 0208 	bic.w	r2, r2, #8
 80013fa:	601a      	str	r2, [r3, #0]

  HAL_UART_Transmit_DMA(&huart2, JY62_z_Zero, sizeof(JY62_z_Zero));
 80013fc:	2203      	movs	r2, #3
 80013fe:	4940      	ldr	r1, [pc, #256]	@ (8001500 <main+0x248>)
 8001400:	483c      	ldr	r0, [pc, #240]	@ (80014f4 <main+0x23c>)
 8001402:	f005 fc11 	bl	8006c28 <HAL_UART_Transmit_DMA>
  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8001406:	2100      	movs	r1, #0
 8001408:	483e      	ldr	r0, [pc, #248]	@ (8001504 <main+0x24c>)
 800140a:	f004 f959 	bl	80056c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);
 800140e:	2104      	movs	r1, #4
 8001410:	483c      	ldr	r0, [pc, #240]	@ (8001504 <main+0x24c>)
 8001412:	f004 f955 	bl	80056c0 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim7);
 8001416:	483c      	ldr	r0, [pc, #240]	@ (8001508 <main+0x250>)
 8001418:	f004 f888 	bl	800552c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 800141c:	213c      	movs	r1, #60	@ 0x3c
 800141e:	483b      	ldr	r0, [pc, #236]	@ (800150c <main+0x254>)
 8001420:	f004 fb15 	bl	8005a4e <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 8001424:	213c      	movs	r1, #60	@ 0x3c
 8001426:	483a      	ldr	r0, [pc, #232]	@ (8001510 <main+0x258>)
 8001428:	f004 fb11 	bl	8005a4e <HAL_TIM_Encoder_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  OLED_NewFrame();
 800142c:	f001 fb72 	bl	8002b14 <OLED_NewFrame>
	  sprintf(message,"distanceL:%f",Trace_error());
 8001430:	f001 fa20 	bl	8002874 <Trace_error>
 8001434:	ee10 3a10 	vmov	r3, s0
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff f885 	bl	8000548 <__aeabi_f2d>
 800143e:	4602      	mov	r2, r0
 8001440:	460b      	mov	r3, r1
 8001442:	4934      	ldr	r1, [pc, #208]	@ (8001514 <main+0x25c>)
 8001444:	4834      	ldr	r0, [pc, #208]	@ (8001518 <main+0x260>)
 8001446:	f007 fcf3 	bl	8008e30 <siprintf>
	  OLED_PrintString(1, 0, message, &font16x16, 0);
 800144a:	2300      	movs	r3, #0
 800144c:	9300      	str	r3, [sp, #0]
 800144e:	4b33      	ldr	r3, [pc, #204]	@ (800151c <main+0x264>)
 8001450:	4a31      	ldr	r2, [pc, #196]	@ (8001518 <main+0x260>)
 8001452:	2100      	movs	r1, #0
 8001454:	2001      	movs	r0, #1
 8001456:	f001 fd83 	bl	8002f60 <OLED_PrintString>
	  sprintf(message,"distanceR:%d",distance2);
 800145a:	4b31      	ldr	r3, [pc, #196]	@ (8001520 <main+0x268>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	461a      	mov	r2, r3
 8001460:	4930      	ldr	r1, [pc, #192]	@ (8001524 <main+0x26c>)
 8001462:	482d      	ldr	r0, [pc, #180]	@ (8001518 <main+0x260>)
 8001464:	f007 fce4 	bl	8008e30 <siprintf>
	  OLED_PrintString(1, 16, message, &font16x16, 0);
 8001468:	2300      	movs	r3, #0
 800146a:	9300      	str	r3, [sp, #0]
 800146c:	4b2b      	ldr	r3, [pc, #172]	@ (800151c <main+0x264>)
 800146e:	4a2a      	ldr	r2, [pc, #168]	@ (8001518 <main+0x260>)
 8001470:	2110      	movs	r1, #16
 8001472:	2001      	movs	r0, #1
 8001474:	f001 fd74 	bl	8002f60 <OLED_PrintString>
	  sprintf(message,"speedl:%d",speednow);
 8001478:	4b2b      	ldr	r3, [pc, #172]	@ (8001528 <main+0x270>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	461a      	mov	r2, r3
 800147e:	492b      	ldr	r1, [pc, #172]	@ (800152c <main+0x274>)
 8001480:	4825      	ldr	r0, [pc, #148]	@ (8001518 <main+0x260>)
 8001482:	f007 fcd5 	bl	8008e30 <siprintf>
	  OLED_PrintString(1, 32, message, &font16x16, 0);
 8001486:	2300      	movs	r3, #0
 8001488:	9300      	str	r3, [sp, #0]
 800148a:	4b24      	ldr	r3, [pc, #144]	@ (800151c <main+0x264>)
 800148c:	4a22      	ldr	r2, [pc, #136]	@ (8001518 <main+0x260>)
 800148e:	2120      	movs	r1, #32
 8001490:	2001      	movs	r0, #1
 8001492:	f001 fd65 	bl	8002f60 <OLED_PrintString>
	  sprintf(message,"speedr:%d",speednow2);
 8001496:	4b26      	ldr	r3, [pc, #152]	@ (8001530 <main+0x278>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	461a      	mov	r2, r3
 800149c:	4925      	ldr	r1, [pc, #148]	@ (8001534 <main+0x27c>)
 800149e:	481e      	ldr	r0, [pc, #120]	@ (8001518 <main+0x260>)
 80014a0:	f007 fcc6 	bl	8008e30 <siprintf>
	  OLED_PrintString(1, 48, message, &font16x16, 0);
 80014a4:	2300      	movs	r3, #0
 80014a6:	9300      	str	r3, [sp, #0]
 80014a8:	4b1c      	ldr	r3, [pc, #112]	@ (800151c <main+0x264>)
 80014aa:	4a1b      	ldr	r2, [pc, #108]	@ (8001518 <main+0x260>)
 80014ac:	2130      	movs	r1, #48	@ 0x30
 80014ae:	2001      	movs	r0, #1
 80014b0:	f001 fd56 	bl	8002f60 <OLED_PrintString>
	  OLED_ShowFrame();
 80014b4:	f001 fb3a 	bl	8002b2c <OLED_ShowFrame>
	  OLED_NewFrame();
 80014b8:	bf00      	nop
 80014ba:	e7b7      	b.n	800142c <main+0x174>
 80014bc:	200002c0 	.word	0x200002c0
 80014c0:	200002e0 	.word	0x200002e0
 80014c4:	20000260 	.word	0x20000260
 80014c8:	20000264 	.word	0x20000264
 80014cc:	20000268 	.word	0x20000268
 80014d0:	20000278 	.word	0x20000278
 80014d4:	2000000c 	.word	0x2000000c
 80014d8:	20000010 	.word	0x20000010
 80014dc:	20000014 	.word	0x20000014
 80014e0:	2000029c 	.word	0x2000029c
 80014e4:	2000026c 	.word	0x2000026c
 80014e8:	20000270 	.word	0x20000270
 80014ec:	20000274 	.word	0x20000274
 80014f0:	20000400 	.word	0x20000400
 80014f4:	20000888 	.word	0x20000888
 80014f8:	20000500 	.word	0x20000500
 80014fc:	200008d0 	.word	0x200008d0
 8001500:	20000018 	.word	0x20000018
 8001504:	20000840 	.word	0x20000840
 8001508:	20000768 	.word	0x20000768
 800150c:	20000720 	.word	0x20000720
 8001510:	200007b0 	.word	0x200007b0
 8001514:	0800cf48 	.word	0x0800cf48
 8001518:	20000300 	.word	0x20000300
 800151c:	0800d690 	.word	0x0800d690
 8001520:	20000714 	.word	0x20000714
 8001524:	0800cf58 	.word	0x0800cf58
 8001528:	20000710 	.word	0x20000710
 800152c:	0800cf68 	.word	0x0800cf68
 8001530:	20000718 	.word	0x20000718
 8001534:	0800cf74 	.word	0x0800cf74

08001538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b094      	sub	sp, #80	@ 0x50
 800153c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800153e:	f107 0320 	add.w	r3, r7, #32
 8001542:	2230      	movs	r2, #48	@ 0x30
 8001544:	2100      	movs	r1, #0
 8001546:	4618      	mov	r0, r3
 8001548:	f007 fd15 	bl	8008f76 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800154c:	f107 030c 	add.w	r3, r7, #12
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	605a      	str	r2, [r3, #4]
 8001556:	609a      	str	r2, [r3, #8]
 8001558:	60da      	str	r2, [r3, #12]
 800155a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800155c:	2300      	movs	r3, #0
 800155e:	60bb      	str	r3, [r7, #8]
 8001560:	4b28      	ldr	r3, [pc, #160]	@ (8001604 <SystemClock_Config+0xcc>)
 8001562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001564:	4a27      	ldr	r2, [pc, #156]	@ (8001604 <SystemClock_Config+0xcc>)
 8001566:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800156a:	6413      	str	r3, [r2, #64]	@ 0x40
 800156c:	4b25      	ldr	r3, [pc, #148]	@ (8001604 <SystemClock_Config+0xcc>)
 800156e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001570:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001574:	60bb      	str	r3, [r7, #8]
 8001576:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001578:	2300      	movs	r3, #0
 800157a:	607b      	str	r3, [r7, #4]
 800157c:	4b22      	ldr	r3, [pc, #136]	@ (8001608 <SystemClock_Config+0xd0>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a21      	ldr	r2, [pc, #132]	@ (8001608 <SystemClock_Config+0xd0>)
 8001582:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001586:	6013      	str	r3, [r2, #0]
 8001588:	4b1f      	ldr	r3, [pc, #124]	@ (8001608 <SystemClock_Config+0xd0>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001590:	607b      	str	r3, [r7, #4]
 8001592:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001594:	2302      	movs	r3, #2
 8001596:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001598:	2301      	movs	r3, #1
 800159a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800159c:	2310      	movs	r3, #16
 800159e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015a0:	2302      	movs	r3, #2
 80015a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015a4:	2300      	movs	r3, #0
 80015a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80015a8:	2308      	movs	r3, #8
 80015aa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80015ac:	23a8      	movs	r3, #168	@ 0xa8
 80015ae:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015b0:	2302      	movs	r3, #2
 80015b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80015b4:	2304      	movs	r3, #4
 80015b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015b8:	f107 0320 	add.w	r3, r7, #32
 80015bc:	4618      	mov	r0, r3
 80015be:	f003 fb0d 	bl	8004bdc <HAL_RCC_OscConfig>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80015c8:	f000 fa42 	bl	8001a50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015cc:	230f      	movs	r3, #15
 80015ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015d0:	2302      	movs	r3, #2
 80015d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015d4:	2300      	movs	r3, #0
 80015d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015d8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80015dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80015de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80015e4:	f107 030c 	add.w	r3, r7, #12
 80015e8:	2105      	movs	r1, #5
 80015ea:	4618      	mov	r0, r3
 80015ec:	f003 fd6e 	bl	80050cc <HAL_RCC_ClockConfig>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80015f6:	f000 fa2b 	bl	8001a50 <Error_Handler>
  }
}
 80015fa:	bf00      	nop
 80015fc:	3750      	adds	r7, #80	@ 0x50
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40023800 	.word	0x40023800
 8001608:	40007000 	.word	0x40007000

0800160c <HAL_UARTEx_RxEventCallback>:
}




void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){ //串口接收中断
 800160c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001610:	b099      	sub	sp, #100	@ 0x64
 8001612:	af0e      	add	r7, sp, #56	@ 0x38
 8001614:	6278      	str	r0, [r7, #36]	@ 0x24
 8001616:	460b      	mov	r3, r1
 8001618:	847b      	strh	r3, [r7, #34]	@ 0x22
	if(huart==&huart2){  //接收JY62 数据中断
 800161a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800161c:	4a9c      	ldr	r2, [pc, #624]	@ (8001890 <HAL_UARTEx_RxEventCallback+0x284>)
 800161e:	4293      	cmp	r3, r2
 8001620:	f040 80d1 	bne.w	80017c6 <HAL_UARTEx_RxEventCallback+0x1ba>
		if(RxBuffer[22]==0x55){
 8001624:	4b9b      	ldr	r3, [pc, #620]	@ (8001894 <HAL_UARTEx_RxEventCallback+0x288>)
 8001626:	7d9b      	ldrb	r3, [r3, #22]
 8001628:	2b55      	cmp	r3, #85	@ 0x55
 800162a:	d16e      	bne.n	800170a <HAL_UARTEx_RxEventCallback+0xfe>
			if(RxBuffer[23]==0x53){
 800162c:	4b99      	ldr	r3, [pc, #612]	@ (8001894 <HAL_UARTEx_RxEventCallback+0x288>)
 800162e:	7ddb      	ldrb	r3, [r3, #23]
 8001630:	2b53      	cmp	r3, #83	@ 0x53
 8001632:	d16a      	bne.n	800170a <HAL_UARTEx_RxEventCallback+0xfe>
				RollX = (float)(((short)(RxBuffer[25]<<8)|RxBuffer[24])/32768.0*180);//处理数据，依据官方所给文档
 8001634:	4b97      	ldr	r3, [pc, #604]	@ (8001894 <HAL_UARTEx_RxEventCallback+0x288>)
 8001636:	7e5b      	ldrb	r3, [r3, #25]
 8001638:	b21b      	sxth	r3, r3
 800163a:	021b      	lsls	r3, r3, #8
 800163c:	b21b      	sxth	r3, r3
 800163e:	461a      	mov	r2, r3
 8001640:	4b94      	ldr	r3, [pc, #592]	@ (8001894 <HAL_UARTEx_RxEventCallback+0x288>)
 8001642:	7e1b      	ldrb	r3, [r3, #24]
 8001644:	4313      	orrs	r3, r2
 8001646:	4618      	mov	r0, r3
 8001648:	f7fe ff6c 	bl	8000524 <__aeabi_i2d>
 800164c:	f04f 0200 	mov.w	r2, #0
 8001650:	4b91      	ldr	r3, [pc, #580]	@ (8001898 <HAL_UARTEx_RxEventCallback+0x28c>)
 8001652:	f7ff f8fb 	bl	800084c <__aeabi_ddiv>
 8001656:	4602      	mov	r2, r0
 8001658:	460b      	mov	r3, r1
 800165a:	4610      	mov	r0, r2
 800165c:	4619      	mov	r1, r3
 800165e:	f04f 0200 	mov.w	r2, #0
 8001662:	4b8e      	ldr	r3, [pc, #568]	@ (800189c <HAL_UARTEx_RxEventCallback+0x290>)
 8001664:	f7fe ffc8 	bl	80005f8 <__aeabi_dmul>
 8001668:	4602      	mov	r2, r0
 800166a:	460b      	mov	r3, r1
 800166c:	4610      	mov	r0, r2
 800166e:	4619      	mov	r1, r3
 8001670:	f7ff faba 	bl	8000be8 <__aeabi_d2f>
 8001674:	4603      	mov	r3, r0
 8001676:	4a8a      	ldr	r2, [pc, #552]	@ (80018a0 <HAL_UARTEx_RxEventCallback+0x294>)
 8001678:	6013      	str	r3, [r2, #0]
				PitchY = (float)((short)((RxBuffer[27]<<8)|RxBuffer[26])/32768.0*180);
 800167a:	4b86      	ldr	r3, [pc, #536]	@ (8001894 <HAL_UARTEx_RxEventCallback+0x288>)
 800167c:	7edb      	ldrb	r3, [r3, #27]
 800167e:	b21b      	sxth	r3, r3
 8001680:	021b      	lsls	r3, r3, #8
 8001682:	b21a      	sxth	r2, r3
 8001684:	4b83      	ldr	r3, [pc, #524]	@ (8001894 <HAL_UARTEx_RxEventCallback+0x288>)
 8001686:	7e9b      	ldrb	r3, [r3, #26]
 8001688:	b21b      	sxth	r3, r3
 800168a:	4313      	orrs	r3, r2
 800168c:	b21b      	sxth	r3, r3
 800168e:	4618      	mov	r0, r3
 8001690:	f7fe ff48 	bl	8000524 <__aeabi_i2d>
 8001694:	f04f 0200 	mov.w	r2, #0
 8001698:	4b7f      	ldr	r3, [pc, #508]	@ (8001898 <HAL_UARTEx_RxEventCallback+0x28c>)
 800169a:	f7ff f8d7 	bl	800084c <__aeabi_ddiv>
 800169e:	4602      	mov	r2, r0
 80016a0:	460b      	mov	r3, r1
 80016a2:	4610      	mov	r0, r2
 80016a4:	4619      	mov	r1, r3
 80016a6:	f04f 0200 	mov.w	r2, #0
 80016aa:	4b7c      	ldr	r3, [pc, #496]	@ (800189c <HAL_UARTEx_RxEventCallback+0x290>)
 80016ac:	f7fe ffa4 	bl	80005f8 <__aeabi_dmul>
 80016b0:	4602      	mov	r2, r0
 80016b2:	460b      	mov	r3, r1
 80016b4:	4610      	mov	r0, r2
 80016b6:	4619      	mov	r1, r3
 80016b8:	f7ff fa96 	bl	8000be8 <__aeabi_d2f>
 80016bc:	4603      	mov	r3, r0
 80016be:	4a79      	ldr	r2, [pc, #484]	@ (80018a4 <HAL_UARTEx_RxEventCallback+0x298>)
 80016c0:	6013      	str	r3, [r2, #0]
				YawZ = (float)((short)((RxBuffer[29]<<8)|RxBuffer[28])/32768.0*180);
 80016c2:	4b74      	ldr	r3, [pc, #464]	@ (8001894 <HAL_UARTEx_RxEventCallback+0x288>)
 80016c4:	7f5b      	ldrb	r3, [r3, #29]
 80016c6:	b21b      	sxth	r3, r3
 80016c8:	021b      	lsls	r3, r3, #8
 80016ca:	b21a      	sxth	r2, r3
 80016cc:	4b71      	ldr	r3, [pc, #452]	@ (8001894 <HAL_UARTEx_RxEventCallback+0x288>)
 80016ce:	7f1b      	ldrb	r3, [r3, #28]
 80016d0:	b21b      	sxth	r3, r3
 80016d2:	4313      	orrs	r3, r2
 80016d4:	b21b      	sxth	r3, r3
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7fe ff24 	bl	8000524 <__aeabi_i2d>
 80016dc:	f04f 0200 	mov.w	r2, #0
 80016e0:	4b6d      	ldr	r3, [pc, #436]	@ (8001898 <HAL_UARTEx_RxEventCallback+0x28c>)
 80016e2:	f7ff f8b3 	bl	800084c <__aeabi_ddiv>
 80016e6:	4602      	mov	r2, r0
 80016e8:	460b      	mov	r3, r1
 80016ea:	4610      	mov	r0, r2
 80016ec:	4619      	mov	r1, r3
 80016ee:	f04f 0200 	mov.w	r2, #0
 80016f2:	4b6a      	ldr	r3, [pc, #424]	@ (800189c <HAL_UARTEx_RxEventCallback+0x290>)
 80016f4:	f7fe ff80 	bl	80005f8 <__aeabi_dmul>
 80016f8:	4602      	mov	r2, r0
 80016fa:	460b      	mov	r3, r1
 80016fc:	4610      	mov	r0, r2
 80016fe:	4619      	mov	r1, r3
 8001700:	f7ff fa72 	bl	8000be8 <__aeabi_d2f>
 8001704:	4603      	mov	r3, r0
 8001706:	4a68      	ldr	r2, [pc, #416]	@ (80018a8 <HAL_UARTEx_RxEventCallback+0x29c>)
 8001708:	6013      	str	r3, [r2, #0]
			}
		}

		sprintf(TxBuffer,"%.2f,%.2f,%.2f,%d,%d,%.2f,%.2f,%.2f,%.2f\n",
 800170a:	4b65      	ldr	r3, [pc, #404]	@ (80018a0 <HAL_UARTEx_RxEventCallback+0x294>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4618      	mov	r0, r3
 8001710:	f7fe ff1a 	bl	8000548 <__aeabi_f2d>
 8001714:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8001718:	4b62      	ldr	r3, [pc, #392]	@ (80018a4 <HAL_UARTEx_RxEventCallback+0x298>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4618      	mov	r0, r3
 800171e:	f7fe ff13 	bl	8000548 <__aeabi_f2d>
 8001722:	4682      	mov	sl, r0
 8001724:	468b      	mov	fp, r1
 8001726:	4b60      	ldr	r3, [pc, #384]	@ (80018a8 <HAL_UARTEx_RxEventCallback+0x29c>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4618      	mov	r0, r3
 800172c:	f7fe ff0c 	bl	8000548 <__aeabi_f2d>
 8001730:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8001734:	4b5d      	ldr	r3, [pc, #372]	@ (80018ac <HAL_UARTEx_RxEventCallback+0x2a0>)
 8001736:	681e      	ldr	r6, [r3, #0]
 8001738:	4b5d      	ldr	r3, [pc, #372]	@ (80018b0 <HAL_UARTEx_RxEventCallback+0x2a4>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	60fb      	str	r3, [r7, #12]
				RollX,PitchY,YawZ,speednow,speednow2,
				PIDL.target_val,PIDL.output_val,PIDR.target_val,PIDR.output_val);
 800173e:	4b5d      	ldr	r3, [pc, #372]	@ (80018b4 <HAL_UARTEx_RxEventCallback+0x2a8>)
 8001740:	681b      	ldr	r3, [r3, #0]
		sprintf(TxBuffer,"%.2f,%.2f,%.2f,%d,%d,%.2f,%.2f,%.2f,%.2f\n",
 8001742:	4618      	mov	r0, r3
 8001744:	f7fe ff00 	bl	8000548 <__aeabi_f2d>
 8001748:	e9c7 0100 	strd	r0, r1, [r7]
				PIDL.target_val,PIDL.output_val,PIDR.target_val,PIDR.output_val);
 800174c:	4b59      	ldr	r3, [pc, #356]	@ (80018b4 <HAL_UARTEx_RxEventCallback+0x2a8>)
 800174e:	6a1b      	ldr	r3, [r3, #32]
		sprintf(TxBuffer,"%.2f,%.2f,%.2f,%d,%d,%.2f,%.2f,%.2f,%.2f\n",
 8001750:	4618      	mov	r0, r3
 8001752:	f7fe fef9 	bl	8000548 <__aeabi_f2d>
 8001756:	4680      	mov	r8, r0
 8001758:	4689      	mov	r9, r1
				PIDL.target_val,PIDL.output_val,PIDR.target_val,PIDR.output_val);
 800175a:	4b57      	ldr	r3, [pc, #348]	@ (80018b8 <HAL_UARTEx_RxEventCallback+0x2ac>)
 800175c:	681b      	ldr	r3, [r3, #0]
		sprintf(TxBuffer,"%.2f,%.2f,%.2f,%d,%d,%.2f,%.2f,%.2f,%.2f\n",
 800175e:	4618      	mov	r0, r3
 8001760:	f7fe fef2 	bl	8000548 <__aeabi_f2d>
 8001764:	4604      	mov	r4, r0
 8001766:	460d      	mov	r5, r1
				PIDL.target_val,PIDL.output_val,PIDR.target_val,PIDR.output_val);
 8001768:	4b53      	ldr	r3, [pc, #332]	@ (80018b8 <HAL_UARTEx_RxEventCallback+0x2ac>)
 800176a:	6a1b      	ldr	r3, [r3, #32]
		sprintf(TxBuffer,"%.2f,%.2f,%.2f,%d,%d,%.2f,%.2f,%.2f,%.2f\n",
 800176c:	4618      	mov	r0, r3
 800176e:	f7fe feeb 	bl	8000548 <__aeabi_f2d>
 8001772:	4602      	mov	r2, r0
 8001774:	460b      	mov	r3, r1
 8001776:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800177a:	e9cd 450a 	strd	r4, r5, [sp, #40]	@ 0x28
 800177e:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8001782:	ed97 7b00 	vldr	d7, [r7]
 8001786:	ed8d 7b06 	vstr	d7, [sp, #24]
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	9305      	str	r3, [sp, #20]
 800178e:	9604      	str	r6, [sp, #16]
 8001790:	ed97 7b04 	vldr	d7, [r7, #16]
 8001794:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001798:	e9cd ab00 	strd	sl, fp, [sp]
 800179c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017a0:	4946      	ldr	r1, [pc, #280]	@ (80018bc <HAL_UARTEx_RxEventCallback+0x2b0>)
 80017a2:	4847      	ldr	r0, [pc, #284]	@ (80018c0 <HAL_UARTEx_RxEventCallback+0x2b4>)
 80017a4:	f007 fb44 	bl	8008e30 <siprintf>


		HAL_UART_Transmit_DMA(&huart3, (uint8_t *)TxBuffer, strlen(TxBuffer));   //将数据通过串口一发送出去
 80017a8:	4845      	ldr	r0, [pc, #276]	@ (80018c0 <HAL_UARTEx_RxEventCallback+0x2b4>)
 80017aa:	f7fe fd61 	bl	8000270 <strlen>
 80017ae:	4603      	mov	r3, r0
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	461a      	mov	r2, r3
 80017b4:	4942      	ldr	r1, [pc, #264]	@ (80018c0 <HAL_UARTEx_RxEventCallback+0x2b4>)
 80017b6:	4843      	ldr	r0, [pc, #268]	@ (80018c4 <HAL_UARTEx_RxEventCallback+0x2b8>)
 80017b8:	f005 fa36 	bl	8006c28 <HAL_UART_Transmit_DMA>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *)RxBuffer,sizeof(RxBuffer));   //开启接受不定长
 80017bc:	22ff      	movs	r2, #255	@ 0xff
 80017be:	4935      	ldr	r1, [pc, #212]	@ (8001894 <HAL_UARTEx_RxEventCallback+0x288>)
 80017c0:	4833      	ldr	r0, [pc, #204]	@ (8001890 <HAL_UARTEx_RxEventCallback+0x284>)
 80017c2:	f005 faad 	bl	8006d20 <HAL_UARTEx_ReceiveToIdle_DMA>





	if(huart==&huart3){
 80017c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017c8:	4a3e      	ldr	r2, [pc, #248]	@ (80018c4 <HAL_UARTEx_RxEventCallback+0x2b8>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d15b      	bne.n	8001886 <HAL_UARTEx_RxEventCallback+0x27a>
		memset(message, 0, sizeof(message));  // 整个数组
 80017ce:	22ff      	movs	r2, #255	@ 0xff
 80017d0:	2100      	movs	r1, #0
 80017d2:	483d      	ldr	r0, [pc, #244]	@ (80018c8 <HAL_UARTEx_RxEventCallback+0x2bc>)
 80017d4:	f007 fbcf 	bl	8008f76 <memset>
		 if (Size < sizeof(RxBuffer2)) {
 80017d8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80017da:	2bfe      	cmp	r3, #254	@ 0xfe
 80017dc:	d804      	bhi.n	80017e8 <HAL_UARTEx_RxEventCallback+0x1dc>
		            RxBuffer2[Size] = '\0';  // 添加字符串结束符
 80017de:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80017e0:	4a3a      	ldr	r2, [pc, #232]	@ (80018cc <HAL_UARTEx_RxEventCallback+0x2c0>)
 80017e2:	2100      	movs	r1, #0
 80017e4:	54d1      	strb	r1, [r2, r3]
 80017e6:	e003      	b.n	80017f0 <HAL_UARTEx_RxEventCallback+0x1e4>
		        } else {
		            RxBuffer2[sizeof(RxBuffer2) - 1] = '\0';  // 防止越界
 80017e8:	4b38      	ldr	r3, [pc, #224]	@ (80018cc <HAL_UARTEx_RxEventCallback+0x2c0>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	f883 20fe 	strb.w	r2, [r3, #254]	@ 0xfe
		        }
//左边电机PID在线调参

		 if (sscanf(RxBuffer2, "PIDL %f %f %f", &PIDL_Kp, &PIDL_Ki, &PIDL_Kd) == 3) {
 80017f0:	4b37      	ldr	r3, [pc, #220]	@ (80018d0 <HAL_UARTEx_RxEventCallback+0x2c4>)
 80017f2:	9300      	str	r3, [sp, #0]
 80017f4:	4b37      	ldr	r3, [pc, #220]	@ (80018d4 <HAL_UARTEx_RxEventCallback+0x2c8>)
 80017f6:	4a38      	ldr	r2, [pc, #224]	@ (80018d8 <HAL_UARTEx_RxEventCallback+0x2cc>)
 80017f8:	4938      	ldr	r1, [pc, #224]	@ (80018dc <HAL_UARTEx_RxEventCallback+0x2d0>)
 80017fa:	4834      	ldr	r0, [pc, #208]	@ (80018cc <HAL_UARTEx_RxEventCallback+0x2c0>)
 80017fc:	f007 fb3a 	bl	8008e74 <siscanf>
 8001800:	4603      	mov	r3, r0
 8001802:	2b03      	cmp	r3, #3
 8001804:	d10b      	bne.n	800181e <HAL_UARTEx_RxEventCallback+0x212>
			 PIDL_Kp=PIDL_Kp;
 8001806:	4b34      	ldr	r3, [pc, #208]	@ (80018d8 <HAL_UARTEx_RxEventCallback+0x2cc>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a33      	ldr	r2, [pc, #204]	@ (80018d8 <HAL_UARTEx_RxEventCallback+0x2cc>)
 800180c:	6013      	str	r3, [r2, #0]
			 PIDL_Ki=PIDL_Ki;
 800180e:	4b31      	ldr	r3, [pc, #196]	@ (80018d4 <HAL_UARTEx_RxEventCallback+0x2c8>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a30      	ldr	r2, [pc, #192]	@ (80018d4 <HAL_UARTEx_RxEventCallback+0x2c8>)
 8001814:	6013      	str	r3, [r2, #0]
			 PIDL_Kd=PIDL_Kd;
 8001816:	4b2e      	ldr	r3, [pc, #184]	@ (80018d0 <HAL_UARTEx_RxEventCallback+0x2c4>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a2d      	ldr	r2, [pc, #180]	@ (80018d0 <HAL_UARTEx_RxEventCallback+0x2c4>)
 800181c:	6013      	str	r3, [r2, #0]


		        }
		 if (sscanf(RxBuffer2, "speedl %f", &PIDL.target_val)== 1) {
 800181e:	4a25      	ldr	r2, [pc, #148]	@ (80018b4 <HAL_UARTEx_RxEventCallback+0x2a8>)
 8001820:	492f      	ldr	r1, [pc, #188]	@ (80018e0 <HAL_UARTEx_RxEventCallback+0x2d4>)
 8001822:	482a      	ldr	r0, [pc, #168]	@ (80018cc <HAL_UARTEx_RxEventCallback+0x2c0>)
 8001824:	f007 fb26 	bl	8008e74 <siscanf>
 8001828:	4603      	mov	r3, r0
 800182a:	2b01      	cmp	r3, #1
 800182c:	d103      	bne.n	8001836 <HAL_UARTEx_RxEventCallback+0x22a>
               PIDL.target_val=PIDL.target_val;
 800182e:	4b21      	ldr	r3, [pc, #132]	@ (80018b4 <HAL_UARTEx_RxEventCallback+0x2a8>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a20      	ldr	r2, [pc, #128]	@ (80018b4 <HAL_UARTEx_RxEventCallback+0x2a8>)
 8001834:	6013      	str	r3, [r2, #0]

	         }

//右边电机PID在线调参
		 if (sscanf(RxBuffer2, "PIDR %f %f %f", &PIDR_Kp, &PIDR_Ki, &PIDR_Kd) == 3) {
 8001836:	4b2b      	ldr	r3, [pc, #172]	@ (80018e4 <HAL_UARTEx_RxEventCallback+0x2d8>)
 8001838:	9300      	str	r3, [sp, #0]
 800183a:	4b2b      	ldr	r3, [pc, #172]	@ (80018e8 <HAL_UARTEx_RxEventCallback+0x2dc>)
 800183c:	4a2b      	ldr	r2, [pc, #172]	@ (80018ec <HAL_UARTEx_RxEventCallback+0x2e0>)
 800183e:	492c      	ldr	r1, [pc, #176]	@ (80018f0 <HAL_UARTEx_RxEventCallback+0x2e4>)
 8001840:	4822      	ldr	r0, [pc, #136]	@ (80018cc <HAL_UARTEx_RxEventCallback+0x2c0>)
 8001842:	f007 fb17 	bl	8008e74 <siscanf>
 8001846:	4603      	mov	r3, r0
 8001848:	2b03      	cmp	r3, #3
 800184a:	d10b      	bne.n	8001864 <HAL_UARTEx_RxEventCallback+0x258>
			 PIDR_Kp=PIDR_Kp;
 800184c:	4b27      	ldr	r3, [pc, #156]	@ (80018ec <HAL_UARTEx_RxEventCallback+0x2e0>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a26      	ldr	r2, [pc, #152]	@ (80018ec <HAL_UARTEx_RxEventCallback+0x2e0>)
 8001852:	6013      	str	r3, [r2, #0]
			 PIDR_Ki=PIDR_Ki;
 8001854:	4b24      	ldr	r3, [pc, #144]	@ (80018e8 <HAL_UARTEx_RxEventCallback+0x2dc>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a23      	ldr	r2, [pc, #140]	@ (80018e8 <HAL_UARTEx_RxEventCallback+0x2dc>)
 800185a:	6013      	str	r3, [r2, #0]
			 PIDR_Kd=PIDR_Kd;
 800185c:	4b21      	ldr	r3, [pc, #132]	@ (80018e4 <HAL_UARTEx_RxEventCallback+0x2d8>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a20      	ldr	r2, [pc, #128]	@ (80018e4 <HAL_UARTEx_RxEventCallback+0x2d8>)
 8001862:	6013      	str	r3, [r2, #0]
		        }
		 if (sscanf(RxBuffer2, "speedr %f", &PIDR.target_val)== 1) {
 8001864:	4a14      	ldr	r2, [pc, #80]	@ (80018b8 <HAL_UARTEx_RxEventCallback+0x2ac>)
 8001866:	4923      	ldr	r1, [pc, #140]	@ (80018f4 <HAL_UARTEx_RxEventCallback+0x2e8>)
 8001868:	4818      	ldr	r0, [pc, #96]	@ (80018cc <HAL_UARTEx_RxEventCallback+0x2c0>)
 800186a:	f007 fb03 	bl	8008e74 <siscanf>
 800186e:	4603      	mov	r3, r0
 8001870:	2b01      	cmp	r3, #1
 8001872:	d103      	bne.n	800187c <HAL_UARTEx_RxEventCallback+0x270>
               PIDR.target_val=PIDR.target_val;
 8001874:	4b10      	ldr	r3, [pc, #64]	@ (80018b8 <HAL_UARTEx_RxEventCallback+0x2ac>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a0f      	ldr	r2, [pc, #60]	@ (80018b8 <HAL_UARTEx_RxEventCallback+0x2ac>)
 800187a:	6013      	str	r3, [r2, #0]

	         }


	   	 HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t *)RxBuffer2,sizeof(RxBuffer2));   //开启接受不定长
 800187c:	22ff      	movs	r2, #255	@ 0xff
 800187e:	4913      	ldr	r1, [pc, #76]	@ (80018cc <HAL_UARTEx_RxEventCallback+0x2c0>)
 8001880:	4810      	ldr	r0, [pc, #64]	@ (80018c4 <HAL_UARTEx_RxEventCallback+0x2b8>)
 8001882:	f005 fa4d 	bl	8006d20 <HAL_UARTEx_ReceiveToIdle_DMA>





}
 8001886:	bf00      	nop
 8001888:	372c      	adds	r7, #44	@ 0x2c
 800188a:	46bd      	mov	sp, r7
 800188c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001890:	20000888 	.word	0x20000888
 8001894:	20000400 	.word	0x20000400
 8001898:	40e00000 	.word	0x40e00000
 800189c:	40668000 	.word	0x40668000
 80018a0:	20000700 	.word	0x20000700
 80018a4:	20000704 	.word	0x20000704
 80018a8:	20000708 	.word	0x20000708
 80018ac:	20000710 	.word	0x20000710
 80018b0:	20000718 	.word	0x20000718
 80018b4:	20000278 	.word	0x20000278
 80018b8:	2000029c 	.word	0x2000029c
 80018bc:	0800cf80 	.word	0x0800cf80
 80018c0:	20000600 	.word	0x20000600
 80018c4:	200008d0 	.word	0x200008d0
 80018c8:	20000300 	.word	0x20000300
 80018cc:	20000500 	.word	0x20000500
 80018d0:	20000008 	.word	0x20000008
 80018d4:	20000004 	.word	0x20000004
 80018d8:	20000000 	.word	0x20000000
 80018dc:	0800cfac 	.word	0x0800cfac
 80018e0:	0800cfbc 	.word	0x0800cfbc
 80018e4:	20000014 	.word	0x20000014
 80018e8:	20000010 	.word	0x20000010
 80018ec:	2000000c 	.word	0x2000000c
 80018f0:	0800cfc8 	.word	0x0800cfc8
 80018f4:	0800cfd8 	.word	0x0800cfd8

080018f8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {//处理数据发送完成后的操作
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
	if(huart == &huart2) {
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4a06      	ldr	r2, [pc, #24]	@ (800191c <HAL_UART_TxCpltCallback+0x24>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d104      	bne.n	8001912 <HAL_UART_TxCpltCallback+0x1a>

	     memset(TxBuffer, 0, sizeof(TxBuffer));
 8001908:	22ff      	movs	r2, #255	@ 0xff
 800190a:	2100      	movs	r1, #0
 800190c:	4804      	ldr	r0, [pc, #16]	@ (8001920 <HAL_UART_TxCpltCallback+0x28>)
 800190e:	f007 fb32 	bl	8008f76 <memset>


  }
}
 8001912:	bf00      	nop
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	20000888 	.word	0x20000888
 8001920:	20000600 	.word	0x20000600

08001924 <HAL_TIM_PeriodElapsedCallback>:




void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
	if(htim==&htim7){
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	4a3b      	ldr	r2, [pc, #236]	@ (8001a1c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d16e      	bne.n	8001a12 <HAL_TIM_PeriodElapsedCallback+0xee>
		speednow=10*(short)__HAL_TIM_GetCounter(&htim5);
 8001934:	4b3a      	ldr	r3, [pc, #232]	@ (8001a20 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800193a:	b21b      	sxth	r3, r3
 800193c:	461a      	mov	r2, r3
 800193e:	4613      	mov	r3, r2
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	4413      	add	r3, r2
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	461a      	mov	r2, r3
 8001948:	4b36      	ldr	r3, [pc, #216]	@ (8001a24 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800194a:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SetCounter(&htim5,0);
 800194c:	4b34      	ldr	r3, [pc, #208]	@ (8001a20 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2200      	movs	r2, #0
 8001952:	625a      	str	r2, [r3, #36]	@ 0x24
        distance+=speednow/10;
 8001954:	4b33      	ldr	r3, [pc, #204]	@ (8001a24 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a33      	ldr	r2, [pc, #204]	@ (8001a28 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800195a:	fb82 1203 	smull	r1, r2, r2, r3
 800195e:	1092      	asrs	r2, r2, #2
 8001960:	17db      	asrs	r3, r3, #31
 8001962:	1ad2      	subs	r2, r2, r3
 8001964:	4b31      	ldr	r3, [pc, #196]	@ (8001a2c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4413      	add	r3, r2
 800196a:	4a30      	ldr	r2, [pc, #192]	@ (8001a2c <HAL_TIM_PeriodElapsedCallback+0x108>)
 800196c:	6013      	str	r3, [r2, #0]

        speednow2=10*(short)__HAL_TIM_GetCounter(&htim8);
 800196e:	4b30      	ldr	r3, [pc, #192]	@ (8001a30 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001974:	b21b      	sxth	r3, r3
 8001976:	461a      	mov	r2, r3
 8001978:	4613      	mov	r3, r2
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	4413      	add	r3, r2
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	461a      	mov	r2, r3
 8001982:	4b2c      	ldr	r3, [pc, #176]	@ (8001a34 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001984:	601a      	str	r2, [r3, #0]
        __HAL_TIM_SetCounter(&htim8,0);
 8001986:	4b2a      	ldr	r3, [pc, #168]	@ (8001a30 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	2200      	movs	r2, #0
 800198c:	625a      	str	r2, [r3, #36]	@ 0x24
        distance2+=(speednow2)/10;
 800198e:	4b29      	ldr	r3, [pc, #164]	@ (8001a34 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a25      	ldr	r2, [pc, #148]	@ (8001a28 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001994:	fb82 1203 	smull	r1, r2, r2, r3
 8001998:	1092      	asrs	r2, r2, #2
 800199a:	17db      	asrs	r3, r3, #31
 800199c:	1ad2      	subs	r2, r2, r3
 800199e:	4b26      	ldr	r3, [pc, #152]	@ (8001a38 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4413      	add	r3, r2
 80019a4:	4a24      	ldr	r2, [pc, #144]	@ (8001a38 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80019a6:	6013      	str	r3, [r2, #0]

        PID_Trace_realize(&Trace_PID, Trace_error());
 80019a8:	f000 ff64 	bl	8002874 <Trace_error>
 80019ac:	eef0 7a40 	vmov.f32	s15, s0
 80019b0:	eeb0 0a67 	vmov.f32	s0, s15
 80019b4:	4821      	ldr	r0, [pc, #132]	@ (8001a3c <HAL_TIM_PeriodElapsedCallback+0x118>)
 80019b6:	f000 ff9f 	bl	80028f8 <PID_Trace_realize>
        PID_Angle_realize(&Angle_PID,YawZ);
 80019ba:	4b21      	ldr	r3, [pc, #132]	@ (8001a40 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80019bc:	edd3 7a00 	vldr	s15, [r3]
 80019c0:	eeb0 0a67 	vmov.f32	s0, s15
 80019c4:	481f      	ldr	r0, [pc, #124]	@ (8001a44 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80019c6:	f000 fea5 	bl	8002714 <PID_Angle_realize>
        Set_motor_speedL(&PIDL,PIDL.target_val-Trace_PID.output_val-Angle_PID.output_val);
 80019ca:	4b1f      	ldr	r3, [pc, #124]	@ (8001a48 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80019cc:	ed93 7a00 	vldr	s14, [r3]
 80019d0:	4b1a      	ldr	r3, [pc, #104]	@ (8001a3c <HAL_TIM_PeriodElapsedCallback+0x118>)
 80019d2:	edd3 7a07 	vldr	s15, [r3, #28]
 80019d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019da:	4b1a      	ldr	r3, [pc, #104]	@ (8001a44 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80019dc:	edd3 7a07 	vldr	s15, [r3, #28]
 80019e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019e4:	eeb0 0a67 	vmov.f32	s0, s15
 80019e8:	4817      	ldr	r0, [pc, #92]	@ (8001a48 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80019ea:	f001 fbf3 	bl	80031d4 <Set_motor_speedL>
        Set_motor_speedR(&PIDR,PIDR.target_val+Trace_PID.output_val+Angle_PID.output_val);
 80019ee:	4b17      	ldr	r3, [pc, #92]	@ (8001a4c <HAL_TIM_PeriodElapsedCallback+0x128>)
 80019f0:	ed93 7a00 	vldr	s14, [r3]
 80019f4:	4b11      	ldr	r3, [pc, #68]	@ (8001a3c <HAL_TIM_PeriodElapsedCallback+0x118>)
 80019f6:	edd3 7a07 	vldr	s15, [r3, #28]
 80019fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019fe:	4b11      	ldr	r3, [pc, #68]	@ (8001a44 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001a00:	edd3 7a07 	vldr	s15, [r3, #28]
 8001a04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a08:	eeb0 0a67 	vmov.f32	s0, s15
 8001a0c:	480f      	ldr	r0, [pc, #60]	@ (8001a4c <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001a0e:	f001 fc01 	bl	8003214 <Set_motor_speedR>





}
 8001a12:	bf00      	nop
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	20000768 	.word	0x20000768
 8001a20:	20000720 	.word	0x20000720
 8001a24:	20000710 	.word	0x20000710
 8001a28:	66666667 	.word	0x66666667
 8001a2c:	2000070c 	.word	0x2000070c
 8001a30:	200007b0 	.word	0x200007b0
 8001a34:	20000718 	.word	0x20000718
 8001a38:	20000714 	.word	0x20000714
 8001a3c:	200002c0 	.word	0x200002c0
 8001a40:	20000708 	.word	0x20000708
 8001a44:	200002e0 	.word	0x200002e0
 8001a48:	20000278 	.word	0x20000278
 8001a4c:	2000029c 	.word	0x2000029c

08001a50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a54:	b672      	cpsid	i
}
 8001a56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a58:	bf00      	nop
 8001a5a:	e7fd      	b.n	8001a58 <Error_Handler+0x8>

08001a5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	607b      	str	r3, [r7, #4]
 8001a66:	4b10      	ldr	r3, [pc, #64]	@ (8001aa8 <HAL_MspInit+0x4c>)
 8001a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a6a:	4a0f      	ldr	r2, [pc, #60]	@ (8001aa8 <HAL_MspInit+0x4c>)
 8001a6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a70:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a72:	4b0d      	ldr	r3, [pc, #52]	@ (8001aa8 <HAL_MspInit+0x4c>)
 8001a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a7a:	607b      	str	r3, [r7, #4]
 8001a7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	603b      	str	r3, [r7, #0]
 8001a82:	4b09      	ldr	r3, [pc, #36]	@ (8001aa8 <HAL_MspInit+0x4c>)
 8001a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a86:	4a08      	ldr	r2, [pc, #32]	@ (8001aa8 <HAL_MspInit+0x4c>)
 8001a88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a8e:	4b06      	ldr	r3, [pc, #24]	@ (8001aa8 <HAL_MspInit+0x4c>)
 8001a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a96:	603b      	str	r3, [r7, #0]
 8001a98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	40023800 	.word	0x40023800

08001aac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ab0:	bf00      	nop
 8001ab2:	e7fd      	b.n	8001ab0 <NMI_Handler+0x4>

08001ab4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ab8:	bf00      	nop
 8001aba:	e7fd      	b.n	8001ab8 <HardFault_Handler+0x4>

08001abc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ac0:	bf00      	nop
 8001ac2:	e7fd      	b.n	8001ac0 <MemManage_Handler+0x4>

08001ac4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ac8:	bf00      	nop
 8001aca:	e7fd      	b.n	8001ac8 <BusFault_Handler+0x4>

08001acc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ad0:	bf00      	nop
 8001ad2:	e7fd      	b.n	8001ad0 <UsageFault_Handler+0x4>

08001ad4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ad8:	bf00      	nop
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr

08001ae2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ae6:	bf00      	nop
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001af4:	bf00      	nop
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b02:	f001 fcbf 	bl	8003484 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b06:	bf00      	nop
 8001b08:	bd80      	pop	{r7, pc}
	...

08001b0c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001b10:	4802      	ldr	r0, [pc, #8]	@ (8001b1c <DMA1_Stream1_IRQHandler+0x10>)
 8001b12:	f001 ffa5 	bl	8003a60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001b16:	bf00      	nop
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	200009d8 	.word	0x200009d8

08001b20 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001b24:	4802      	ldr	r0, [pc, #8]	@ (8001b30 <DMA1_Stream3_IRQHandler+0x10>)
 8001b26:	f001 ff9b 	bl	8003a60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	20000a38 	.word	0x20000a38

08001b34 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001b38:	4802      	ldr	r0, [pc, #8]	@ (8001b44 <DMA1_Stream5_IRQHandler+0x10>)
 8001b3a:	f001 ff91 	bl	8003a60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	20000918 	.word	0x20000918

08001b48 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001b4c:	4802      	ldr	r0, [pc, #8]	@ (8001b58 <DMA1_Stream6_IRQHandler+0x10>)
 8001b4e:	f001 ff87 	bl	8003a60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001b52:	bf00      	nop
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	20000978 	.word	0x20000978

08001b5c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8001b60:	4802      	ldr	r0, [pc, #8]	@ (8001b6c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001b62:	f004 f802 	bl	8005b6a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001b66:	bf00      	nop
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	200007f8 	.word	0x200007f8

08001b70 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b74:	4802      	ldr	r0, [pc, #8]	@ (8001b80 <USART2_IRQHandler+0x10>)
 8001b76:	f005 f92d 	bl	8006dd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b7a:	bf00      	nop
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	20000888 	.word	0x20000888

08001b84 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001b88:	4802      	ldr	r0, [pc, #8]	@ (8001b94 <USART3_IRQHandler+0x10>)
 8001b8a:	f005 f923 	bl	8006dd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	200008d0 	.word	0x200008d0

08001b98 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001b9c:	4802      	ldr	r0, [pc, #8]	@ (8001ba8 <TIM7_IRQHandler+0x10>)
 8001b9e:	f003 ffe4 	bl	8005b6a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001ba2:	bf00      	nop
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	20000768 	.word	0x20000768

08001bac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  return 1;
 8001bb0:	2301      	movs	r3, #1
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <_kill>:

int _kill(int pid, int sig)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001bc6:	f007 fa29 	bl	800901c <__errno>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2216      	movs	r2, #22
 8001bce:	601a      	str	r2, [r3, #0]
  return -1;
 8001bd0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3708      	adds	r7, #8
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <_exit>:

void _exit (int status)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001be4:	f04f 31ff 	mov.w	r1, #4294967295
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f7ff ffe7 	bl	8001bbc <_kill>
  while (1) {}    /* Make sure we hang here */
 8001bee:	bf00      	nop
 8001bf0:	e7fd      	b.n	8001bee <_exit+0x12>

08001bf2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b086      	sub	sp, #24
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	60f8      	str	r0, [r7, #12]
 8001bfa:	60b9      	str	r1, [r7, #8]
 8001bfc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bfe:	2300      	movs	r3, #0
 8001c00:	617b      	str	r3, [r7, #20]
 8001c02:	e00a      	b.n	8001c1a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c04:	f3af 8000 	nop.w
 8001c08:	4601      	mov	r1, r0
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	1c5a      	adds	r2, r3, #1
 8001c0e:	60ba      	str	r2, [r7, #8]
 8001c10:	b2ca      	uxtb	r2, r1
 8001c12:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	3301      	adds	r3, #1
 8001c18:	617b      	str	r3, [r7, #20]
 8001c1a:	697a      	ldr	r2, [r7, #20]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	dbf0      	blt.n	8001c04 <_read+0x12>
  }

  return len;
 8001c22:	687b      	ldr	r3, [r7, #4]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3718      	adds	r7, #24
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c38:	2300      	movs	r3, #0
 8001c3a:	617b      	str	r3, [r7, #20]
 8001c3c:	e009      	b.n	8001c52 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	1c5a      	adds	r2, r3, #1
 8001c42:	60ba      	str	r2, [r7, #8]
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	3301      	adds	r3, #1
 8001c50:	617b      	str	r3, [r7, #20]
 8001c52:	697a      	ldr	r2, [r7, #20]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	dbf1      	blt.n	8001c3e <_write+0x12>
  }
  return len;
 8001c5a:	687b      	ldr	r3, [r7, #4]
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3718      	adds	r7, #24
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <_close>:

int _close(int file)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c8c:	605a      	str	r2, [r3, #4]
  return 0;
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <_isatty>:

int _isatty(int file)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ca4:	2301      	movs	r3, #1
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr

08001cb2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b085      	sub	sp, #20
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	60f8      	str	r0, [r7, #12]
 8001cba:	60b9      	str	r1, [r7, #8]
 8001cbc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cbe:	2300      	movs	r3, #0
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3714      	adds	r7, #20
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b086      	sub	sp, #24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cd4:	4a14      	ldr	r2, [pc, #80]	@ (8001d28 <_sbrk+0x5c>)
 8001cd6:	4b15      	ldr	r3, [pc, #84]	@ (8001d2c <_sbrk+0x60>)
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ce0:	4b13      	ldr	r3, [pc, #76]	@ (8001d30 <_sbrk+0x64>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d102      	bne.n	8001cee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ce8:	4b11      	ldr	r3, [pc, #68]	@ (8001d30 <_sbrk+0x64>)
 8001cea:	4a12      	ldr	r2, [pc, #72]	@ (8001d34 <_sbrk+0x68>)
 8001cec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cee:	4b10      	ldr	r3, [pc, #64]	@ (8001d30 <_sbrk+0x64>)
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d207      	bcs.n	8001d0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cfc:	f007 f98e 	bl	800901c <__errno>
 8001d00:	4603      	mov	r3, r0
 8001d02:	220c      	movs	r2, #12
 8001d04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d06:	f04f 33ff 	mov.w	r3, #4294967295
 8001d0a:	e009      	b.n	8001d20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d0c:	4b08      	ldr	r3, [pc, #32]	@ (8001d30 <_sbrk+0x64>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d12:	4b07      	ldr	r3, [pc, #28]	@ (8001d30 <_sbrk+0x64>)
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4413      	add	r3, r2
 8001d1a:	4a05      	ldr	r2, [pc, #20]	@ (8001d30 <_sbrk+0x64>)
 8001d1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3718      	adds	r7, #24
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	20020000 	.word	0x20020000
 8001d2c:	00000400 	.word	0x00000400
 8001d30:	2000071c 	.word	0x2000071c
 8001d34:	20001078 	.word	0x20001078

08001d38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d3c:	4b06      	ldr	r3, [pc, #24]	@ (8001d58 <SystemInit+0x20>)
 8001d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d42:	4a05      	ldr	r2, [pc, #20]	@ (8001d58 <SystemInit+0x20>)
 8001d44:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d4c:	bf00      	nop
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	e000ed00 	.word	0xe000ed00

08001d5c <MX_TIM5_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim12;

/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b08c      	sub	sp, #48	@ 0x30
 8001d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d62:	f107 030c 	add.w	r3, r7, #12
 8001d66:	2224      	movs	r2, #36	@ 0x24
 8001d68:	2100      	movs	r1, #0
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f007 f903 	bl	8008f76 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d70:	1d3b      	adds	r3, r7, #4
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001d78:	4b20      	ldr	r3, [pc, #128]	@ (8001dfc <MX_TIM5_Init+0xa0>)
 8001d7a:	4a21      	ldr	r2, [pc, #132]	@ (8001e00 <MX_TIM5_Init+0xa4>)
 8001d7c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001d7e:	4b1f      	ldr	r3, [pc, #124]	@ (8001dfc <MX_TIM5_Init+0xa0>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d84:	4b1d      	ldr	r3, [pc, #116]	@ (8001dfc <MX_TIM5_Init+0xa0>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65536;
 8001d8a:	4b1c      	ldr	r3, [pc, #112]	@ (8001dfc <MX_TIM5_Init+0xa0>)
 8001d8c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001d90:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d92:	4b1a      	ldr	r3, [pc, #104]	@ (8001dfc <MX_TIM5_Init+0xa0>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d98:	4b18      	ldr	r3, [pc, #96]	@ (8001dfc <MX_TIM5_Init+0xa0>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001da2:	2300      	movs	r3, #0
 8001da4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001da6:	2301      	movs	r3, #1
 8001da8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001daa:	2300      	movs	r3, #0
 8001dac:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001dae:	2300      	movs	r3, #0
 8001db0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001db2:	2300      	movs	r3, #0
 8001db4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001db6:	2301      	movs	r3, #1
 8001db8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001dc2:	f107 030c 	add.w	r3, r7, #12
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	480c      	ldr	r0, [pc, #48]	@ (8001dfc <MX_TIM5_Init+0xa0>)
 8001dca:	f003 fd9a 	bl	8005902 <HAL_TIM_Encoder_Init>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001dd4:	f7ff fe3c 	bl	8001a50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001de0:	1d3b      	adds	r3, r7, #4
 8001de2:	4619      	mov	r1, r3
 8001de4:	4805      	ldr	r0, [pc, #20]	@ (8001dfc <MX_TIM5_Init+0xa0>)
 8001de6:	f004 fe3f 	bl	8006a68 <HAL_TIMEx_MasterConfigSynchronization>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001df0:	f7ff fe2e 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001df4:	bf00      	nop
 8001df6:	3730      	adds	r7, #48	@ 0x30
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	20000720 	.word	0x20000720
 8001e00:	40000c00 	.word	0x40000c00

08001e04 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e0a:	463b      	mov	r3, r7
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001e12:	4b15      	ldr	r3, [pc, #84]	@ (8001e68 <MX_TIM7_Init+0x64>)
 8001e14:	4a15      	ldr	r2, [pc, #84]	@ (8001e6c <MX_TIM7_Init+0x68>)
 8001e16:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8400-1;
 8001e18:	4b13      	ldr	r3, [pc, #76]	@ (8001e68 <MX_TIM7_Init+0x64>)
 8001e1a:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001e1e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e20:	4b11      	ldr	r3, [pc, #68]	@ (8001e68 <MX_TIM7_Init+0x64>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 100-1;
 8001e26:	4b10      	ldr	r3, [pc, #64]	@ (8001e68 <MX_TIM7_Init+0x64>)
 8001e28:	2263      	movs	r2, #99	@ 0x63
 8001e2a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e2c:	4b0e      	ldr	r3, [pc, #56]	@ (8001e68 <MX_TIM7_Init+0x64>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001e32:	480d      	ldr	r0, [pc, #52]	@ (8001e68 <MX_TIM7_Init+0x64>)
 8001e34:	f003 fb2a 	bl	800548c <HAL_TIM_Base_Init>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001e3e:	f7ff fe07 	bl	8001a50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e42:	2300      	movs	r3, #0
 8001e44:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e46:	2300      	movs	r3, #0
 8001e48:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001e4a:	463b      	mov	r3, r7
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4806      	ldr	r0, [pc, #24]	@ (8001e68 <MX_TIM7_Init+0x64>)
 8001e50:	f004 fe0a 	bl	8006a68 <HAL_TIMEx_MasterConfigSynchronization>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001e5a:	f7ff fdf9 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001e5e:	bf00      	nop
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	20000768 	.word	0x20000768
 8001e6c:	40001400 	.word	0x40001400

08001e70 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b08c      	sub	sp, #48	@ 0x30
 8001e74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e76:	f107 030c 	add.w	r3, r7, #12
 8001e7a:	2224      	movs	r2, #36	@ 0x24
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f007 f879 	bl	8008f76 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e84:	1d3b      	adds	r3, r7, #4
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]
 8001e8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001e8c:	4b22      	ldr	r3, [pc, #136]	@ (8001f18 <MX_TIM8_Init+0xa8>)
 8001e8e:	4a23      	ldr	r2, [pc, #140]	@ (8001f1c <MX_TIM8_Init+0xac>)
 8001e90:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001e92:	4b21      	ldr	r3, [pc, #132]	@ (8001f18 <MX_TIM8_Init+0xa8>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e98:	4b1f      	ldr	r3, [pc, #124]	@ (8001f18 <MX_TIM8_Init+0xa8>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001e9e:	4b1e      	ldr	r3, [pc, #120]	@ (8001f18 <MX_TIM8_Init+0xa8>)
 8001ea0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ea4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ea6:	4b1c      	ldr	r3, [pc, #112]	@ (8001f18 <MX_TIM8_Init+0xa8>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001eac:	4b1a      	ldr	r3, [pc, #104]	@ (8001f18 <MX_TIM8_Init+0xa8>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eb2:	4b19      	ldr	r3, [pc, #100]	@ (8001f18 <MX_TIM8_Init+0xa8>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001edc:	f107 030c 	add.w	r3, r7, #12
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	480d      	ldr	r0, [pc, #52]	@ (8001f18 <MX_TIM8_Init+0xa8>)
 8001ee4:	f003 fd0d 	bl	8005902 <HAL_TIM_Encoder_Init>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8001eee:	f7ff fdaf 	bl	8001a50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001efa:	1d3b      	adds	r3, r7, #4
 8001efc:	4619      	mov	r1, r3
 8001efe:	4806      	ldr	r0, [pc, #24]	@ (8001f18 <MX_TIM8_Init+0xa8>)
 8001f00:	f004 fdb2 	bl	8006a68 <HAL_TIMEx_MasterConfigSynchronization>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8001f0a:	f7ff fda1 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001f0e:	bf00      	nop
 8001f10:	3730      	adds	r7, #48	@ 0x30
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	200007b0 	.word	0x200007b0
 8001f1c:	40010400 	.word	0x40010400

08001f20 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b088      	sub	sp, #32
 8001f24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f26:	f107 0310 	add.w	r3, r7, #16
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	601a      	str	r2, [r3, #0]
 8001f2e:	605a      	str	r2, [r3, #4]
 8001f30:	609a      	str	r2, [r3, #8]
 8001f32:	60da      	str	r2, [r3, #12]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001f34:	463b      	mov	r3, r7
 8001f36:	2200      	movs	r2, #0
 8001f38:	601a      	str	r2, [r3, #0]
 8001f3a:	605a      	str	r2, [r3, #4]
 8001f3c:	609a      	str	r2, [r3, #8]
 8001f3e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001f40:	4b23      	ldr	r3, [pc, #140]	@ (8001fd0 <MX_TIM9_Init+0xb0>)
 8001f42:	4a24      	ldr	r2, [pc, #144]	@ (8001fd4 <MX_TIM9_Init+0xb4>)
 8001f44:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 84-1;
 8001f46:	4b22      	ldr	r3, [pc, #136]	@ (8001fd0 <MX_TIM9_Init+0xb0>)
 8001f48:	2253      	movs	r2, #83	@ 0x53
 8001f4a:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f4c:	4b20      	ldr	r3, [pc, #128]	@ (8001fd0 <MX_TIM9_Init+0xb0>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8001f52:	4b1f      	ldr	r3, [pc, #124]	@ (8001fd0 <MX_TIM9_Init+0xb0>)
 8001f54:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f58:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f5a:	4b1d      	ldr	r3, [pc, #116]	@ (8001fd0 <MX_TIM9_Init+0xb0>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f60:	4b1b      	ldr	r3, [pc, #108]	@ (8001fd0 <MX_TIM9_Init+0xb0>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001f66:	481a      	ldr	r0, [pc, #104]	@ (8001fd0 <MX_TIM9_Init+0xb0>)
 8001f68:	f003 fa90 	bl	800548c <HAL_TIM_Base_Init>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <MX_TIM9_Init+0x56>
  {
    Error_Handler();
 8001f72:	f7ff fd6d 	bl	8001a50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f76:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f7a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001f7c:	f107 0310 	add.w	r3, r7, #16
 8001f80:	4619      	mov	r1, r3
 8001f82:	4813      	ldr	r0, [pc, #76]	@ (8001fd0 <MX_TIM9_Init+0xb0>)
 8001f84:	f004 f840 	bl	8006008 <HAL_TIM_ConfigClockSource>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <MX_TIM9_Init+0x72>
  {
    Error_Handler();
 8001f8e:	f7ff fd5f 	bl	8001a50 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim9) != HAL_OK)
 8001f92:	480f      	ldr	r0, [pc, #60]	@ (8001fd0 <MX_TIM9_Init+0xb0>)
 8001f94:	f003 fc5c 	bl	8005850 <HAL_TIM_IC_Init>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <MX_TIM9_Init+0x82>
  {
    Error_Handler();
 8001f9e:	f7ff fd57 	bl	8001a50 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001faa:	2300      	movs	r3, #0
 8001fac:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 8001fae:	230f      	movs	r3, #15
 8001fb0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim9, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001fb2:	463b      	mov	r3, r7
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	4805      	ldr	r0, [pc, #20]	@ (8001fd0 <MX_TIM9_Init+0xb0>)
 8001fba:	f003 fec6 	bl	8005d4a <HAL_TIM_IC_ConfigChannel>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <MX_TIM9_Init+0xa8>
  {
    Error_Handler();
 8001fc4:	f7ff fd44 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8001fc8:	bf00      	nop
 8001fca:	3720      	adds	r7, #32
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	200007f8 	.word	0x200007f8
 8001fd4:	40014000 	.word	0x40014000

08001fd8 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b08c      	sub	sp, #48	@ 0x30
 8001fdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fde:	f107 0320 	add.w	r3, r7, #32
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	601a      	str	r2, [r3, #0]
 8001fe6:	605a      	str	r2, [r3, #4]
 8001fe8:	609a      	str	r2, [r3, #8]
 8001fea:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fec:	1d3b      	adds	r3, r7, #4
 8001fee:	2200      	movs	r2, #0
 8001ff0:	601a      	str	r2, [r3, #0]
 8001ff2:	605a      	str	r2, [r3, #4]
 8001ff4:	609a      	str	r2, [r3, #8]
 8001ff6:	60da      	str	r2, [r3, #12]
 8001ff8:	611a      	str	r2, [r3, #16]
 8001ffa:	615a      	str	r2, [r3, #20]
 8001ffc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001ffe:	4b2b      	ldr	r3, [pc, #172]	@ (80020ac <MX_TIM12_Init+0xd4>)
 8002000:	4a2b      	ldr	r2, [pc, #172]	@ (80020b0 <MX_TIM12_Init+0xd8>)
 8002002:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 84-1;
 8002004:	4b29      	ldr	r3, [pc, #164]	@ (80020ac <MX_TIM12_Init+0xd4>)
 8002006:	2253      	movs	r2, #83	@ 0x53
 8002008:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800200a:	4b28      	ldr	r3, [pc, #160]	@ (80020ac <MX_TIM12_Init+0xd4>)
 800200c:	2200      	movs	r2, #0
 800200e:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 1000-1;
 8002010:	4b26      	ldr	r3, [pc, #152]	@ (80020ac <MX_TIM12_Init+0xd4>)
 8002012:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002016:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002018:	4b24      	ldr	r3, [pc, #144]	@ (80020ac <MX_TIM12_Init+0xd4>)
 800201a:	2200      	movs	r2, #0
 800201c:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800201e:	4b23      	ldr	r3, [pc, #140]	@ (80020ac <MX_TIM12_Init+0xd4>)
 8002020:	2200      	movs	r2, #0
 8002022:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8002024:	4821      	ldr	r0, [pc, #132]	@ (80020ac <MX_TIM12_Init+0xd4>)
 8002026:	f003 fa31 	bl	800548c <HAL_TIM_Base_Init>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8002030:	f7ff fd0e 	bl	8001a50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002034:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002038:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800203a:	f107 0320 	add.w	r3, r7, #32
 800203e:	4619      	mov	r1, r3
 8002040:	481a      	ldr	r0, [pc, #104]	@ (80020ac <MX_TIM12_Init+0xd4>)
 8002042:	f003 ffe1 	bl	8006008 <HAL_TIM_ConfigClockSource>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 800204c:	f7ff fd00 	bl	8001a50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002050:	4816      	ldr	r0, [pc, #88]	@ (80020ac <MX_TIM12_Init+0xd4>)
 8002052:	f003 fadb 	bl	800560c <HAL_TIM_PWM_Init>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 800205c:	f7ff fcf8 	bl	8001a50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002060:	2360      	movs	r3, #96	@ 0x60
 8002062:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002064:	2300      	movs	r3, #0
 8002066:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002068:	2300      	movs	r3, #0
 800206a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800206c:	2300      	movs	r3, #0
 800206e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002070:	1d3b      	adds	r3, r7, #4
 8002072:	2200      	movs	r2, #0
 8002074:	4619      	mov	r1, r3
 8002076:	480d      	ldr	r0, [pc, #52]	@ (80020ac <MX_TIM12_Init+0xd4>)
 8002078:	f003 ff04 	bl	8005e84 <HAL_TIM_PWM_ConfigChannel>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 8002082:	f7ff fce5 	bl	8001a50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002086:	1d3b      	adds	r3, r7, #4
 8002088:	2204      	movs	r2, #4
 800208a:	4619      	mov	r1, r3
 800208c:	4807      	ldr	r0, [pc, #28]	@ (80020ac <MX_TIM12_Init+0xd4>)
 800208e:	f003 fef9 	bl	8005e84 <HAL_TIM_PWM_ConfigChannel>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <MX_TIM12_Init+0xc4>
  {
    Error_Handler();
 8002098:	f7ff fcda 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800209c:	4803      	ldr	r0, [pc, #12]	@ (80020ac <MX_TIM12_Init+0xd4>)
 800209e:	f000 f90b 	bl	80022b8 <HAL_TIM_MspPostInit>

}
 80020a2:	bf00      	nop
 80020a4:	3730      	adds	r7, #48	@ 0x30
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	20000840 	.word	0x20000840
 80020b0:	40001800 	.word	0x40001800

080020b4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b08c      	sub	sp, #48	@ 0x30
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020bc:	f107 031c 	add.w	r3, r7, #28
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	605a      	str	r2, [r3, #4]
 80020c6:	609a      	str	r2, [r3, #8]
 80020c8:	60da      	str	r2, [r3, #12]
 80020ca:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM5)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a32      	ldr	r2, [pc, #200]	@ (800219c <HAL_TIM_Encoder_MspInit+0xe8>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d12c      	bne.n	8002130 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80020d6:	2300      	movs	r3, #0
 80020d8:	61bb      	str	r3, [r7, #24]
 80020da:	4b31      	ldr	r3, [pc, #196]	@ (80021a0 <HAL_TIM_Encoder_MspInit+0xec>)
 80020dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020de:	4a30      	ldr	r2, [pc, #192]	@ (80021a0 <HAL_TIM_Encoder_MspInit+0xec>)
 80020e0:	f043 0308 	orr.w	r3, r3, #8
 80020e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80020e6:	4b2e      	ldr	r3, [pc, #184]	@ (80021a0 <HAL_TIM_Encoder_MspInit+0xec>)
 80020e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ea:	f003 0308 	and.w	r3, r3, #8
 80020ee:	61bb      	str	r3, [r7, #24]
 80020f0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020f2:	2300      	movs	r3, #0
 80020f4:	617b      	str	r3, [r7, #20]
 80020f6:	4b2a      	ldr	r3, [pc, #168]	@ (80021a0 <HAL_TIM_Encoder_MspInit+0xec>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020fa:	4a29      	ldr	r2, [pc, #164]	@ (80021a0 <HAL_TIM_Encoder_MspInit+0xec>)
 80020fc:	f043 0301 	orr.w	r3, r3, #1
 8002100:	6313      	str	r3, [r2, #48]	@ 0x30
 8002102:	4b27      	ldr	r3, [pc, #156]	@ (80021a0 <HAL_TIM_Encoder_MspInit+0xec>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	617b      	str	r3, [r7, #20]
 800210c:	697b      	ldr	r3, [r7, #20]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800210e:	2303      	movs	r3, #3
 8002110:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002112:	2302      	movs	r3, #2
 8002114:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002116:	2300      	movs	r3, #0
 8002118:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800211a:	2300      	movs	r3, #0
 800211c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800211e:	2302      	movs	r3, #2
 8002120:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002122:	f107 031c 	add.w	r3, r7, #28
 8002126:	4619      	mov	r1, r3
 8002128:	481e      	ldr	r0, [pc, #120]	@ (80021a4 <HAL_TIM_Encoder_MspInit+0xf0>)
 800212a:	f001 ff03 	bl	8003f34 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800212e:	e030      	b.n	8002192 <HAL_TIM_Encoder_MspInit+0xde>
  else if(tim_encoderHandle->Instance==TIM8)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a1c      	ldr	r2, [pc, #112]	@ (80021a8 <HAL_TIM_Encoder_MspInit+0xf4>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d12b      	bne.n	8002192 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800213a:	2300      	movs	r3, #0
 800213c:	613b      	str	r3, [r7, #16]
 800213e:	4b18      	ldr	r3, [pc, #96]	@ (80021a0 <HAL_TIM_Encoder_MspInit+0xec>)
 8002140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002142:	4a17      	ldr	r2, [pc, #92]	@ (80021a0 <HAL_TIM_Encoder_MspInit+0xec>)
 8002144:	f043 0302 	orr.w	r3, r3, #2
 8002148:	6453      	str	r3, [r2, #68]	@ 0x44
 800214a:	4b15      	ldr	r3, [pc, #84]	@ (80021a0 <HAL_TIM_Encoder_MspInit+0xec>)
 800214c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	613b      	str	r3, [r7, #16]
 8002154:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002156:	2300      	movs	r3, #0
 8002158:	60fb      	str	r3, [r7, #12]
 800215a:	4b11      	ldr	r3, [pc, #68]	@ (80021a0 <HAL_TIM_Encoder_MspInit+0xec>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800215e:	4a10      	ldr	r2, [pc, #64]	@ (80021a0 <HAL_TIM_Encoder_MspInit+0xec>)
 8002160:	f043 0304 	orr.w	r3, r3, #4
 8002164:	6313      	str	r3, [r2, #48]	@ 0x30
 8002166:	4b0e      	ldr	r3, [pc, #56]	@ (80021a0 <HAL_TIM_Encoder_MspInit+0xec>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800216a:	f003 0304 	and.w	r3, r3, #4
 800216e:	60fb      	str	r3, [r7, #12]
 8002170:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002172:	23c0      	movs	r3, #192	@ 0xc0
 8002174:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002176:	2302      	movs	r3, #2
 8002178:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217a:	2300      	movs	r3, #0
 800217c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800217e:	2300      	movs	r3, #0
 8002180:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002182:	2303      	movs	r3, #3
 8002184:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002186:	f107 031c 	add.w	r3, r7, #28
 800218a:	4619      	mov	r1, r3
 800218c:	4807      	ldr	r0, [pc, #28]	@ (80021ac <HAL_TIM_Encoder_MspInit+0xf8>)
 800218e:	f001 fed1 	bl	8003f34 <HAL_GPIO_Init>
}
 8002192:	bf00      	nop
 8002194:	3730      	adds	r7, #48	@ 0x30
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	40000c00 	.word	0x40000c00
 80021a0:	40023800 	.word	0x40023800
 80021a4:	40020000 	.word	0x40020000
 80021a8:	40010400 	.word	0x40010400
 80021ac:	40020800 	.word	0x40020800

080021b0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b08c      	sub	sp, #48	@ 0x30
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b8:	f107 031c 	add.w	r3, r7, #28
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	605a      	str	r2, [r3, #4]
 80021c2:	609a      	str	r2, [r3, #8]
 80021c4:	60da      	str	r2, [r3, #12]
 80021c6:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM7)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a35      	ldr	r2, [pc, #212]	@ (80022a4 <HAL_TIM_Base_MspInit+0xf4>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d116      	bne.n	8002200 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80021d2:	2300      	movs	r3, #0
 80021d4:	61bb      	str	r3, [r7, #24]
 80021d6:	4b34      	ldr	r3, [pc, #208]	@ (80022a8 <HAL_TIM_Base_MspInit+0xf8>)
 80021d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021da:	4a33      	ldr	r2, [pc, #204]	@ (80022a8 <HAL_TIM_Base_MspInit+0xf8>)
 80021dc:	f043 0320 	orr.w	r3, r3, #32
 80021e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80021e2:	4b31      	ldr	r3, [pc, #196]	@ (80022a8 <HAL_TIM_Base_MspInit+0xf8>)
 80021e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e6:	f003 0320 	and.w	r3, r3, #32
 80021ea:	61bb      	str	r3, [r7, #24]
 80021ec:	69bb      	ldr	r3, [r7, #24]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80021ee:	2200      	movs	r2, #0
 80021f0:	2100      	movs	r1, #0
 80021f2:	2037      	movs	r0, #55	@ 0x37
 80021f4:	f001 fa65 	bl	80036c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80021f8:	2037      	movs	r0, #55	@ 0x37
 80021fa:	f001 fa7e 	bl	80036fa <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 80021fe:	e04c      	b.n	800229a <HAL_TIM_Base_MspInit+0xea>
  else if(tim_baseHandle->Instance==TIM9)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a29      	ldr	r2, [pc, #164]	@ (80022ac <HAL_TIM_Base_MspInit+0xfc>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d134      	bne.n	8002274 <HAL_TIM_Base_MspInit+0xc4>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800220a:	2300      	movs	r3, #0
 800220c:	617b      	str	r3, [r7, #20]
 800220e:	4b26      	ldr	r3, [pc, #152]	@ (80022a8 <HAL_TIM_Base_MspInit+0xf8>)
 8002210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002212:	4a25      	ldr	r2, [pc, #148]	@ (80022a8 <HAL_TIM_Base_MspInit+0xf8>)
 8002214:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002218:	6453      	str	r3, [r2, #68]	@ 0x44
 800221a:	4b23      	ldr	r3, [pc, #140]	@ (80022a8 <HAL_TIM_Base_MspInit+0xf8>)
 800221c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800221e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002222:	617b      	str	r3, [r7, #20]
 8002224:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002226:	2300      	movs	r3, #0
 8002228:	613b      	str	r3, [r7, #16]
 800222a:	4b1f      	ldr	r3, [pc, #124]	@ (80022a8 <HAL_TIM_Base_MspInit+0xf8>)
 800222c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800222e:	4a1e      	ldr	r2, [pc, #120]	@ (80022a8 <HAL_TIM_Base_MspInit+0xf8>)
 8002230:	f043 0310 	orr.w	r3, r3, #16
 8002234:	6313      	str	r3, [r2, #48]	@ 0x30
 8002236:	4b1c      	ldr	r3, [pc, #112]	@ (80022a8 <HAL_TIM_Base_MspInit+0xf8>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800223a:	f003 0310 	and.w	r3, r3, #16
 800223e:	613b      	str	r3, [r7, #16]
 8002240:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002242:	2320      	movs	r3, #32
 8002244:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002246:	2302      	movs	r3, #2
 8002248:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224a:	2300      	movs	r3, #0
 800224c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800224e:	2300      	movs	r3, #0
 8002250:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8002252:	2303      	movs	r3, #3
 8002254:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002256:	f107 031c 	add.w	r3, r7, #28
 800225a:	4619      	mov	r1, r3
 800225c:	4814      	ldr	r0, [pc, #80]	@ (80022b0 <HAL_TIM_Base_MspInit+0x100>)
 800225e:	f001 fe69 	bl	8003f34 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8002262:	2200      	movs	r2, #0
 8002264:	2100      	movs	r1, #0
 8002266:	2018      	movs	r0, #24
 8002268:	f001 fa2b 	bl	80036c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800226c:	2018      	movs	r0, #24
 800226e:	f001 fa44 	bl	80036fa <HAL_NVIC_EnableIRQ>
}
 8002272:	e012      	b.n	800229a <HAL_TIM_Base_MspInit+0xea>
  else if(tim_baseHandle->Instance==TIM12)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a0e      	ldr	r2, [pc, #56]	@ (80022b4 <HAL_TIM_Base_MspInit+0x104>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d10d      	bne.n	800229a <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800227e:	2300      	movs	r3, #0
 8002280:	60fb      	str	r3, [r7, #12]
 8002282:	4b09      	ldr	r3, [pc, #36]	@ (80022a8 <HAL_TIM_Base_MspInit+0xf8>)
 8002284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002286:	4a08      	ldr	r2, [pc, #32]	@ (80022a8 <HAL_TIM_Base_MspInit+0xf8>)
 8002288:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800228c:	6413      	str	r3, [r2, #64]	@ 0x40
 800228e:	4b06      	ldr	r3, [pc, #24]	@ (80022a8 <HAL_TIM_Base_MspInit+0xf8>)
 8002290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002292:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002296:	60fb      	str	r3, [r7, #12]
 8002298:	68fb      	ldr	r3, [r7, #12]
}
 800229a:	bf00      	nop
 800229c:	3730      	adds	r7, #48	@ 0x30
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	40001400 	.word	0x40001400
 80022a8:	40023800 	.word	0x40023800
 80022ac:	40014000 	.word	0x40014000
 80022b0:	40021000 	.word	0x40021000
 80022b4:	40001800 	.word	0x40001800

080022b8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b088      	sub	sp, #32
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c0:	f107 030c 	add.w	r3, r7, #12
 80022c4:	2200      	movs	r2, #0
 80022c6:	601a      	str	r2, [r3, #0]
 80022c8:	605a      	str	r2, [r3, #4]
 80022ca:	609a      	str	r2, [r3, #8]
 80022cc:	60da      	str	r2, [r3, #12]
 80022ce:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM12)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a12      	ldr	r2, [pc, #72]	@ (8002320 <HAL_TIM_MspPostInit+0x68>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d11e      	bne.n	8002318 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022da:	2300      	movs	r3, #0
 80022dc:	60bb      	str	r3, [r7, #8]
 80022de:	4b11      	ldr	r3, [pc, #68]	@ (8002324 <HAL_TIM_MspPostInit+0x6c>)
 80022e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e2:	4a10      	ldr	r2, [pc, #64]	@ (8002324 <HAL_TIM_MspPostInit+0x6c>)
 80022e4:	f043 0302 	orr.w	r3, r3, #2
 80022e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80022ea:	4b0e      	ldr	r3, [pc, #56]	@ (8002324 <HAL_TIM_MspPostInit+0x6c>)
 80022ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	60bb      	str	r3, [r7, #8]
 80022f4:	68bb      	ldr	r3, [r7, #8]
    /**TIM12 GPIO Configuration
    PB14     ------> TIM12_CH1
    PB15     ------> TIM12_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80022f6:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80022fa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022fc:	2302      	movs	r3, #2
 80022fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002300:	2300      	movs	r3, #0
 8002302:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002304:	2300      	movs	r3, #0
 8002306:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002308:	2309      	movs	r3, #9
 800230a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800230c:	f107 030c 	add.w	r3, r7, #12
 8002310:	4619      	mov	r1, r3
 8002312:	4805      	ldr	r0, [pc, #20]	@ (8002328 <HAL_TIM_MspPostInit+0x70>)
 8002314:	f001 fe0e 	bl	8003f34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002318:	bf00      	nop
 800231a:	3720      	adds	r7, #32
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40001800 	.word	0x40001800
 8002324:	40023800 	.word	0x40023800
 8002328:	40020400 	.word	0x40020400

0800232c <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002330:	4b11      	ldr	r3, [pc, #68]	@ (8002378 <MX_USART2_UART_Init+0x4c>)
 8002332:	4a12      	ldr	r2, [pc, #72]	@ (800237c <MX_USART2_UART_Init+0x50>)
 8002334:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002336:	4b10      	ldr	r3, [pc, #64]	@ (8002378 <MX_USART2_UART_Init+0x4c>)
 8002338:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800233c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800233e:	4b0e      	ldr	r3, [pc, #56]	@ (8002378 <MX_USART2_UART_Init+0x4c>)
 8002340:	2200      	movs	r2, #0
 8002342:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002344:	4b0c      	ldr	r3, [pc, #48]	@ (8002378 <MX_USART2_UART_Init+0x4c>)
 8002346:	2200      	movs	r2, #0
 8002348:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800234a:	4b0b      	ldr	r3, [pc, #44]	@ (8002378 <MX_USART2_UART_Init+0x4c>)
 800234c:	2200      	movs	r2, #0
 800234e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002350:	4b09      	ldr	r3, [pc, #36]	@ (8002378 <MX_USART2_UART_Init+0x4c>)
 8002352:	220c      	movs	r2, #12
 8002354:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002356:	4b08      	ldr	r3, [pc, #32]	@ (8002378 <MX_USART2_UART_Init+0x4c>)
 8002358:	2200      	movs	r2, #0
 800235a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800235c:	4b06      	ldr	r3, [pc, #24]	@ (8002378 <MX_USART2_UART_Init+0x4c>)
 800235e:	2200      	movs	r2, #0
 8002360:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002362:	4805      	ldr	r0, [pc, #20]	@ (8002378 <MX_USART2_UART_Init+0x4c>)
 8002364:	f004 fc10 	bl	8006b88 <HAL_UART_Init>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800236e:	f7ff fb6f 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002372:	bf00      	nop
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	20000888 	.word	0x20000888
 800237c:	40004400 	.word	0x40004400

08002380 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002384:	4b11      	ldr	r3, [pc, #68]	@ (80023cc <MX_USART3_UART_Init+0x4c>)
 8002386:	4a12      	ldr	r2, [pc, #72]	@ (80023d0 <MX_USART3_UART_Init+0x50>)
 8002388:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800238a:	4b10      	ldr	r3, [pc, #64]	@ (80023cc <MX_USART3_UART_Init+0x4c>)
 800238c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002390:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002392:	4b0e      	ldr	r3, [pc, #56]	@ (80023cc <MX_USART3_UART_Init+0x4c>)
 8002394:	2200      	movs	r2, #0
 8002396:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002398:	4b0c      	ldr	r3, [pc, #48]	@ (80023cc <MX_USART3_UART_Init+0x4c>)
 800239a:	2200      	movs	r2, #0
 800239c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800239e:	4b0b      	ldr	r3, [pc, #44]	@ (80023cc <MX_USART3_UART_Init+0x4c>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80023a4:	4b09      	ldr	r3, [pc, #36]	@ (80023cc <MX_USART3_UART_Init+0x4c>)
 80023a6:	220c      	movs	r2, #12
 80023a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023aa:	4b08      	ldr	r3, [pc, #32]	@ (80023cc <MX_USART3_UART_Init+0x4c>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80023b0:	4b06      	ldr	r3, [pc, #24]	@ (80023cc <MX_USART3_UART_Init+0x4c>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80023b6:	4805      	ldr	r0, [pc, #20]	@ (80023cc <MX_USART3_UART_Init+0x4c>)
 80023b8:	f004 fbe6 	bl	8006b88 <HAL_UART_Init>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80023c2:	f7ff fb45 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80023c6:	bf00      	nop
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	200008d0 	.word	0x200008d0
 80023d0:	40004800 	.word	0x40004800

080023d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b08c      	sub	sp, #48	@ 0x30
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023dc:	f107 031c 	add.w	r3, r7, #28
 80023e0:	2200      	movs	r2, #0
 80023e2:	601a      	str	r2, [r3, #0]
 80023e4:	605a      	str	r2, [r3, #4]
 80023e6:	609a      	str	r2, [r3, #8]
 80023e8:	60da      	str	r2, [r3, #12]
 80023ea:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a97      	ldr	r2, [pc, #604]	@ (8002650 <HAL_UART_MspInit+0x27c>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	f040 8091 	bne.w	800251a <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80023f8:	2300      	movs	r3, #0
 80023fa:	61bb      	str	r3, [r7, #24]
 80023fc:	4b95      	ldr	r3, [pc, #596]	@ (8002654 <HAL_UART_MspInit+0x280>)
 80023fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002400:	4a94      	ldr	r2, [pc, #592]	@ (8002654 <HAL_UART_MspInit+0x280>)
 8002402:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002406:	6413      	str	r3, [r2, #64]	@ 0x40
 8002408:	4b92      	ldr	r3, [pc, #584]	@ (8002654 <HAL_UART_MspInit+0x280>)
 800240a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002410:	61bb      	str	r3, [r7, #24]
 8002412:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002414:	2300      	movs	r3, #0
 8002416:	617b      	str	r3, [r7, #20]
 8002418:	4b8e      	ldr	r3, [pc, #568]	@ (8002654 <HAL_UART_MspInit+0x280>)
 800241a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800241c:	4a8d      	ldr	r2, [pc, #564]	@ (8002654 <HAL_UART_MspInit+0x280>)
 800241e:	f043 0301 	orr.w	r3, r3, #1
 8002422:	6313      	str	r3, [r2, #48]	@ 0x30
 8002424:	4b8b      	ldr	r3, [pc, #556]	@ (8002654 <HAL_UART_MspInit+0x280>)
 8002426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002428:	f003 0301 	and.w	r3, r3, #1
 800242c:	617b      	str	r3, [r7, #20]
 800242e:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002430:	230c      	movs	r3, #12
 8002432:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002434:	2302      	movs	r3, #2
 8002436:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002438:	2300      	movs	r3, #0
 800243a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800243c:	2303      	movs	r3, #3
 800243e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002440:	2307      	movs	r3, #7
 8002442:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002444:	f107 031c 	add.w	r3, r7, #28
 8002448:	4619      	mov	r1, r3
 800244a:	4883      	ldr	r0, [pc, #524]	@ (8002658 <HAL_UART_MspInit+0x284>)
 800244c:	f001 fd72 	bl	8003f34 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002450:	4b82      	ldr	r3, [pc, #520]	@ (800265c <HAL_UART_MspInit+0x288>)
 8002452:	4a83      	ldr	r2, [pc, #524]	@ (8002660 <HAL_UART_MspInit+0x28c>)
 8002454:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002456:	4b81      	ldr	r3, [pc, #516]	@ (800265c <HAL_UART_MspInit+0x288>)
 8002458:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800245c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800245e:	4b7f      	ldr	r3, [pc, #508]	@ (800265c <HAL_UART_MspInit+0x288>)
 8002460:	2200      	movs	r2, #0
 8002462:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002464:	4b7d      	ldr	r3, [pc, #500]	@ (800265c <HAL_UART_MspInit+0x288>)
 8002466:	2200      	movs	r2, #0
 8002468:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800246a:	4b7c      	ldr	r3, [pc, #496]	@ (800265c <HAL_UART_MspInit+0x288>)
 800246c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002470:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002472:	4b7a      	ldr	r3, [pc, #488]	@ (800265c <HAL_UART_MspInit+0x288>)
 8002474:	2200      	movs	r2, #0
 8002476:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002478:	4b78      	ldr	r3, [pc, #480]	@ (800265c <HAL_UART_MspInit+0x288>)
 800247a:	2200      	movs	r2, #0
 800247c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800247e:	4b77      	ldr	r3, [pc, #476]	@ (800265c <HAL_UART_MspInit+0x288>)
 8002480:	2200      	movs	r2, #0
 8002482:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002484:	4b75      	ldr	r3, [pc, #468]	@ (800265c <HAL_UART_MspInit+0x288>)
 8002486:	2200      	movs	r2, #0
 8002488:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800248a:	4b74      	ldr	r3, [pc, #464]	@ (800265c <HAL_UART_MspInit+0x288>)
 800248c:	2200      	movs	r2, #0
 800248e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002490:	4872      	ldr	r0, [pc, #456]	@ (800265c <HAL_UART_MspInit+0x288>)
 8002492:	f001 f94d 	bl	8003730 <HAL_DMA_Init>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 800249c:	f7ff fad8 	bl	8001a50 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	4a6e      	ldr	r2, [pc, #440]	@ (800265c <HAL_UART_MspInit+0x288>)
 80024a4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80024a6:	4a6d      	ldr	r2, [pc, #436]	@ (800265c <HAL_UART_MspInit+0x288>)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80024ac:	4b6d      	ldr	r3, [pc, #436]	@ (8002664 <HAL_UART_MspInit+0x290>)
 80024ae:	4a6e      	ldr	r2, [pc, #440]	@ (8002668 <HAL_UART_MspInit+0x294>)
 80024b0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80024b2:	4b6c      	ldr	r3, [pc, #432]	@ (8002664 <HAL_UART_MspInit+0x290>)
 80024b4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80024b8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024ba:	4b6a      	ldr	r3, [pc, #424]	@ (8002664 <HAL_UART_MspInit+0x290>)
 80024bc:	2240      	movs	r2, #64	@ 0x40
 80024be:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024c0:	4b68      	ldr	r3, [pc, #416]	@ (8002664 <HAL_UART_MspInit+0x290>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80024c6:	4b67      	ldr	r3, [pc, #412]	@ (8002664 <HAL_UART_MspInit+0x290>)
 80024c8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80024cc:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024ce:	4b65      	ldr	r3, [pc, #404]	@ (8002664 <HAL_UART_MspInit+0x290>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024d4:	4b63      	ldr	r3, [pc, #396]	@ (8002664 <HAL_UART_MspInit+0x290>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80024da:	4b62      	ldr	r3, [pc, #392]	@ (8002664 <HAL_UART_MspInit+0x290>)
 80024dc:	2200      	movs	r2, #0
 80024de:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80024e0:	4b60      	ldr	r3, [pc, #384]	@ (8002664 <HAL_UART_MspInit+0x290>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024e6:	4b5f      	ldr	r3, [pc, #380]	@ (8002664 <HAL_UART_MspInit+0x290>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80024ec:	485d      	ldr	r0, [pc, #372]	@ (8002664 <HAL_UART_MspInit+0x290>)
 80024ee:	f001 f91f 	bl	8003730 <HAL_DMA_Init>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 80024f8:	f7ff faaa 	bl	8001a50 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	4a59      	ldr	r2, [pc, #356]	@ (8002664 <HAL_UART_MspInit+0x290>)
 8002500:	639a      	str	r2, [r3, #56]	@ 0x38
 8002502:	4a58      	ldr	r2, [pc, #352]	@ (8002664 <HAL_UART_MspInit+0x290>)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 8002508:	2200      	movs	r2, #0
 800250a:	2103      	movs	r1, #3
 800250c:	2026      	movs	r0, #38	@ 0x26
 800250e:	f001 f8d8 	bl	80036c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002512:	2026      	movs	r0, #38	@ 0x26
 8002514:	f001 f8f1 	bl	80036fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002518:	e096      	b.n	8002648 <HAL_UART_MspInit+0x274>
  else if(uartHandle->Instance==USART3)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a53      	ldr	r2, [pc, #332]	@ (800266c <HAL_UART_MspInit+0x298>)
 8002520:	4293      	cmp	r3, r2
 8002522:	f040 8091 	bne.w	8002648 <HAL_UART_MspInit+0x274>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002526:	2300      	movs	r3, #0
 8002528:	613b      	str	r3, [r7, #16]
 800252a:	4b4a      	ldr	r3, [pc, #296]	@ (8002654 <HAL_UART_MspInit+0x280>)
 800252c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800252e:	4a49      	ldr	r2, [pc, #292]	@ (8002654 <HAL_UART_MspInit+0x280>)
 8002530:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002534:	6413      	str	r3, [r2, #64]	@ 0x40
 8002536:	4b47      	ldr	r3, [pc, #284]	@ (8002654 <HAL_UART_MspInit+0x280>)
 8002538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800253a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800253e:	613b      	str	r3, [r7, #16]
 8002540:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002542:	2300      	movs	r3, #0
 8002544:	60fb      	str	r3, [r7, #12]
 8002546:	4b43      	ldr	r3, [pc, #268]	@ (8002654 <HAL_UART_MspInit+0x280>)
 8002548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800254a:	4a42      	ldr	r2, [pc, #264]	@ (8002654 <HAL_UART_MspInit+0x280>)
 800254c:	f043 0302 	orr.w	r3, r3, #2
 8002550:	6313      	str	r3, [r2, #48]	@ 0x30
 8002552:	4b40      	ldr	r3, [pc, #256]	@ (8002654 <HAL_UART_MspInit+0x280>)
 8002554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	60fb      	str	r3, [r7, #12]
 800255c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800255e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002562:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002564:	2302      	movs	r3, #2
 8002566:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002568:	2300      	movs	r3, #0
 800256a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800256c:	2303      	movs	r3, #3
 800256e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002570:	2307      	movs	r3, #7
 8002572:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002574:	f107 031c 	add.w	r3, r7, #28
 8002578:	4619      	mov	r1, r3
 800257a:	483d      	ldr	r0, [pc, #244]	@ (8002670 <HAL_UART_MspInit+0x29c>)
 800257c:	f001 fcda 	bl	8003f34 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002580:	4b3c      	ldr	r3, [pc, #240]	@ (8002674 <HAL_UART_MspInit+0x2a0>)
 8002582:	4a3d      	ldr	r2, [pc, #244]	@ (8002678 <HAL_UART_MspInit+0x2a4>)
 8002584:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002586:	4b3b      	ldr	r3, [pc, #236]	@ (8002674 <HAL_UART_MspInit+0x2a0>)
 8002588:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800258c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800258e:	4b39      	ldr	r3, [pc, #228]	@ (8002674 <HAL_UART_MspInit+0x2a0>)
 8002590:	2200      	movs	r2, #0
 8002592:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002594:	4b37      	ldr	r3, [pc, #220]	@ (8002674 <HAL_UART_MspInit+0x2a0>)
 8002596:	2200      	movs	r2, #0
 8002598:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800259a:	4b36      	ldr	r3, [pc, #216]	@ (8002674 <HAL_UART_MspInit+0x2a0>)
 800259c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80025a0:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025a2:	4b34      	ldr	r3, [pc, #208]	@ (8002674 <HAL_UART_MspInit+0x2a0>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025a8:	4b32      	ldr	r3, [pc, #200]	@ (8002674 <HAL_UART_MspInit+0x2a0>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80025ae:	4b31      	ldr	r3, [pc, #196]	@ (8002674 <HAL_UART_MspInit+0x2a0>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80025b4:	4b2f      	ldr	r3, [pc, #188]	@ (8002674 <HAL_UART_MspInit+0x2a0>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025ba:	4b2e      	ldr	r3, [pc, #184]	@ (8002674 <HAL_UART_MspInit+0x2a0>)
 80025bc:	2200      	movs	r2, #0
 80025be:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80025c0:	482c      	ldr	r0, [pc, #176]	@ (8002674 <HAL_UART_MspInit+0x2a0>)
 80025c2:	f001 f8b5 	bl	8003730 <HAL_DMA_Init>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d001      	beq.n	80025d0 <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 80025cc:	f7ff fa40 	bl	8001a50 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	4a28      	ldr	r2, [pc, #160]	@ (8002674 <HAL_UART_MspInit+0x2a0>)
 80025d4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80025d6:	4a27      	ldr	r2, [pc, #156]	@ (8002674 <HAL_UART_MspInit+0x2a0>)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80025dc:	4b27      	ldr	r3, [pc, #156]	@ (800267c <HAL_UART_MspInit+0x2a8>)
 80025de:	4a28      	ldr	r2, [pc, #160]	@ (8002680 <HAL_UART_MspInit+0x2ac>)
 80025e0:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80025e2:	4b26      	ldr	r3, [pc, #152]	@ (800267c <HAL_UART_MspInit+0x2a8>)
 80025e4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80025e8:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80025ea:	4b24      	ldr	r3, [pc, #144]	@ (800267c <HAL_UART_MspInit+0x2a8>)
 80025ec:	2240      	movs	r2, #64	@ 0x40
 80025ee:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025f0:	4b22      	ldr	r3, [pc, #136]	@ (800267c <HAL_UART_MspInit+0x2a8>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80025f6:	4b21      	ldr	r3, [pc, #132]	@ (800267c <HAL_UART_MspInit+0x2a8>)
 80025f8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80025fc:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025fe:	4b1f      	ldr	r3, [pc, #124]	@ (800267c <HAL_UART_MspInit+0x2a8>)
 8002600:	2200      	movs	r2, #0
 8002602:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002604:	4b1d      	ldr	r3, [pc, #116]	@ (800267c <HAL_UART_MspInit+0x2a8>)
 8002606:	2200      	movs	r2, #0
 8002608:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800260a:	4b1c      	ldr	r3, [pc, #112]	@ (800267c <HAL_UART_MspInit+0x2a8>)
 800260c:	2200      	movs	r2, #0
 800260e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002610:	4b1a      	ldr	r3, [pc, #104]	@ (800267c <HAL_UART_MspInit+0x2a8>)
 8002612:	2200      	movs	r2, #0
 8002614:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002616:	4b19      	ldr	r3, [pc, #100]	@ (800267c <HAL_UART_MspInit+0x2a8>)
 8002618:	2200      	movs	r2, #0
 800261a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800261c:	4817      	ldr	r0, [pc, #92]	@ (800267c <HAL_UART_MspInit+0x2a8>)
 800261e:	f001 f887 	bl	8003730 <HAL_DMA_Init>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <HAL_UART_MspInit+0x258>
      Error_Handler();
 8002628:	f7ff fa12 	bl	8001a50 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	4a13      	ldr	r2, [pc, #76]	@ (800267c <HAL_UART_MspInit+0x2a8>)
 8002630:	639a      	str	r2, [r3, #56]	@ 0x38
 8002632:	4a12      	ldr	r2, [pc, #72]	@ (800267c <HAL_UART_MspInit+0x2a8>)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002638:	2200      	movs	r2, #0
 800263a:	2100      	movs	r1, #0
 800263c:	2027      	movs	r0, #39	@ 0x27
 800263e:	f001 f840 	bl	80036c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002642:	2027      	movs	r0, #39	@ 0x27
 8002644:	f001 f859 	bl	80036fa <HAL_NVIC_EnableIRQ>
}
 8002648:	bf00      	nop
 800264a:	3730      	adds	r7, #48	@ 0x30
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	40004400 	.word	0x40004400
 8002654:	40023800 	.word	0x40023800
 8002658:	40020000 	.word	0x40020000
 800265c:	20000918 	.word	0x20000918
 8002660:	40026088 	.word	0x40026088
 8002664:	20000978 	.word	0x20000978
 8002668:	400260a0 	.word	0x400260a0
 800266c:	40004800 	.word	0x40004800
 8002670:	40020400 	.word	0x40020400
 8002674:	200009d8 	.word	0x200009d8
 8002678:	40026028 	.word	0x40026028
 800267c:	20000a38 	.word	0x20000a38
 8002680:	40026058 	.word	0x40026058

08002684 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002684:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80026bc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002688:	f7ff fb56 	bl	8001d38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800268c:	480c      	ldr	r0, [pc, #48]	@ (80026c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800268e:	490d      	ldr	r1, [pc, #52]	@ (80026c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002690:	4a0d      	ldr	r2, [pc, #52]	@ (80026c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002692:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002694:	e002      	b.n	800269c <LoopCopyDataInit>

08002696 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002696:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002698:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800269a:	3304      	adds	r3, #4

0800269c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800269c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800269e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026a0:	d3f9      	bcc.n	8002696 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026a2:	4a0a      	ldr	r2, [pc, #40]	@ (80026cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80026a4:	4c0a      	ldr	r4, [pc, #40]	@ (80026d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80026a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026a8:	e001      	b.n	80026ae <LoopFillZerobss>

080026aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026ac:	3204      	adds	r2, #4

080026ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026b0:	d3fb      	bcc.n	80026aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026b2:	f006 fcb9 	bl	8009028 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026b6:	f7fe fdff 	bl	80012b8 <main>
  bx  lr    
 80026ba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80026bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80026c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026c4:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 80026c8:	0800dafc 	.word	0x0800dafc
  ldr r2, =_sbss
 80026cc:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80026d0:	20001074 	.word	0x20001074

080026d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026d4:	e7fe      	b.n	80026d4 <ADC_IRQHandler>

080026d6 <PID_Angle_init>:
#include "Angle_PID.h"

void PID_Angle_init(PID_Angle *pid,float target_val,float Kp,float Ki,float Kd)
{
 80026d6:	b480      	push	{r7}
 80026d8:	b087      	sub	sp, #28
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6178      	str	r0, [r7, #20]
 80026de:	ed87 0a04 	vstr	s0, [r7, #16]
 80026e2:	edc7 0a03 	vstr	s1, [r7, #12]
 80026e6:	ed87 1a02 	vstr	s2, [r7, #8]
 80026ea:	edc7 1a01 	vstr	s3, [r7, #4]
	pid->target_val=target_val;
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	693a      	ldr	r2, [r7, #16]
 80026f2:	619a      	str	r2, [r3, #24]
	pid->Kp = Kp;
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	68fa      	ldr	r2, [r7, #12]
 80026f8:	601a      	str	r2, [r3, #0]
	pid->Ki = Ki;
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	68ba      	ldr	r2, [r7, #8]
 80026fe:	605a      	str	r2, [r3, #4]
	pid->Kd = Kd;
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	609a      	str	r2, [r3, #8]


}
 8002706:	bf00      	nop
 8002708:	371c      	adds	r7, #28
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
	...

08002714 <PID_Angle_realize>:


void PID_Angle_realize(PID_Angle *pid, float CurrentAngle) {
 8002714:	b480      	push	{r7}
 8002716:	b085      	sub	sp, #20
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	ed87 0a00 	vstr	s0, [r7]
    // 1. 计算当前误差
    pid->Error = pid->target_val - CurrentAngle;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	ed93 7a06 	vldr	s14, [r3, #24]
 8002726:	edd7 7a00 	vldr	s15, [r7]
 800272a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	edc3 7a03 	vstr	s15, [r3, #12]

    // 2. 计算积分项 (带积分限幅，防止积分饱和)
    pid->Integral += pid->Error;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	ed93 7a05 	vldr	s14, [r3, #20]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002740:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	edc3 7a05 	vstr	s15, [r3, #20]
    if (pid->Integral > 300) pid->Integral = 300;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	edd3 7a05 	vldr	s15, [r3, #20]
 8002750:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8002818 <PID_Angle_realize+0x104>
 8002754:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800275c:	dd02      	ble.n	8002764 <PID_Angle_realize+0x50>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a2e      	ldr	r2, [pc, #184]	@ (800281c <PID_Angle_realize+0x108>)
 8002762:	615a      	str	r2, [r3, #20]
    if (pid->Integral < -300) pid->Integral = -300;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	edd3 7a05 	vldr	s15, [r3, #20]
 800276a:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8002820 <PID_Angle_realize+0x10c>
 800276e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002776:	d502      	bpl.n	800277e <PID_Angle_realize+0x6a>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	4a2a      	ldr	r2, [pc, #168]	@ (8002824 <PID_Angle_realize+0x110>)
 800277c:	615a      	str	r2, [r3, #20]

    // 3. 计算微分项
    float derivative = pid->Error - pid->LastError;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	ed93 7a03 	vldr	s14, [r3, #12]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	edd3 7a04 	vldr	s15, [r3, #16]
 800278a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800278e:	edc7 7a03 	vstr	s15, [r7, #12]

    // 4. 计算总输出
    pid->output_val = (pid->Kp * pid->Error) +
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	ed93 7a00 	vldr	s14, [r3]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	edd3 7a03 	vldr	s15, [r3, #12]
 800279e:	ee27 7a27 	vmul.f32	s14, s14, s15
                  (pid->Ki * pid->Integral) +
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	edd3 6a01 	vldr	s13, [r3, #4]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	edd3 7a05 	vldr	s15, [r3, #20]
 80027ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
    pid->output_val = (pid->Kp * pid->Error) +
 80027b2:	ee37 7a27 	vadd.f32	s14, s14, s15
                  (pid->Kd * derivative);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	edd3 6a02 	vldr	s13, [r3, #8]
 80027bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80027c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
                  (pid->Ki * pid->Integral) +
 80027c4:	ee77 7a27 	vadd.f32	s15, s14, s15
    pid->output_val = (pid->Kp * pid->Error) +
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	edc3 7a07 	vstr	s15, [r3, #28]
    if (pid->output_val > 500) pid->output_val = 500;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	edd3 7a07 	vldr	s15, [r3, #28]
 80027d4:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8002828 <PID_Angle_realize+0x114>
 80027d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027e0:	dd02      	ble.n	80027e8 <PID_Angle_realize+0xd4>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a11      	ldr	r2, [pc, #68]	@ (800282c <PID_Angle_realize+0x118>)
 80027e6:	61da      	str	r2, [r3, #28]
    if (pid->output_val < -500) pid->output_val = -500;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	edd3 7a07 	vldr	s15, [r3, #28]
 80027ee:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8002830 <PID_Angle_realize+0x11c>
 80027f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027fa:	d502      	bpl.n	8002802 <PID_Angle_realize+0xee>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	4a0d      	ldr	r2, [pc, #52]	@ (8002834 <PID_Angle_realize+0x120>)
 8002800:	61da      	str	r2, [r3, #28]
    // 5. 更新上次误差
    pid->LastError = pid->Error;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	68da      	ldr	r2, [r3, #12]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	611a      	str	r2, [r3, #16]
}
 800280a:	bf00      	nop
 800280c:	3714      	adds	r7, #20
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	43960000 	.word	0x43960000
 800281c:	43960000 	.word	0x43960000
 8002820:	c3960000 	.word	0xc3960000
 8002824:	c3960000 	.word	0xc3960000
 8002828:	43fa0000 	.word	0x43fa0000
 800282c:	43fa0000 	.word	0x43fa0000
 8002830:	c3fa0000 	.word	0xc3fa0000
 8002834:	c3fa0000 	.word	0xc3fa0000

08002838 <PID_Trace_init>:
uint8_t out5,out4,out3,out2,out1=0;



void PID_Trace_init(PID_Trace *pid,float target_val,float Kp,float Ki,float Kd)
{
 8002838:	b480      	push	{r7}
 800283a:	b087      	sub	sp, #28
 800283c:	af00      	add	r7, sp, #0
 800283e:	6178      	str	r0, [r7, #20]
 8002840:	ed87 0a04 	vstr	s0, [r7, #16]
 8002844:	edc7 0a03 	vstr	s1, [r7, #12]
 8002848:	ed87 1a02 	vstr	s2, [r7, #8]
 800284c:	edc7 1a01 	vstr	s3, [r7, #4]
	pid->target_val=target_val;
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	693a      	ldr	r2, [r7, #16]
 8002854:	619a      	str	r2, [r3, #24]
	pid->Kp = Kp;
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	68fa      	ldr	r2, [r7, #12]
 800285a:	601a      	str	r2, [r3, #0]
	pid->Ki = Ki;
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	68ba      	ldr	r2, [r7, #8]
 8002860:	605a      	str	r2, [r3, #4]
	pid->Kd = Kd;
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	609a      	str	r2, [r3, #8]


}
 8002868:	bf00      	nop
 800286a:	371c      	adds	r7, #28
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <Trace_error>:


float Trace_error(void) {
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
//    out4 = Read_GPIO(GPIOE, out4_Pin);
//    out3 = Read_GPIO(GPIOE, out3_Pin);
//    out2 = Read_GPIO(GPIOE, out2_Pin);
//    out1 = Read_GPIO(GPIOE, out1_Pin);

    float Error = (-2.0f * out5) + (-1.0f * out4) + (0.0f * out3) + (1.0f * out2) + (2.0f * out1);
 800287a:	4b1a      	ldr	r3, [pc, #104]	@ (80028e4 <Trace_error+0x70>)
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	ee07 3a90 	vmov	s15, r3
 8002882:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002886:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 800288a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800288e:	4b16      	ldr	r3, [pc, #88]	@ (80028e8 <Trace_error+0x74>)
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	ee07 3a90 	vmov	s15, r3
 8002896:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800289a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800289e:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80028ec <Trace_error+0x78>
 80028a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80028a6:	4b12      	ldr	r3, [pc, #72]	@ (80028f0 <Trace_error+0x7c>)
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	ee07 3a90 	vmov	s15, r3
 80028ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028b6:	4b0f      	ldr	r3, [pc, #60]	@ (80028f4 <Trace_error+0x80>)
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	ee07 3a90 	vmov	s15, r3
 80028be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028c2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80028c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028ca:	edc7 7a01 	vstr	s15, [r7, #4]
    return Error;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	ee07 3a90 	vmov	s15, r3

}
 80028d4:	eeb0 0a67 	vmov.f32	s0, s15
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	20000a98 	.word	0x20000a98
 80028e8:	20000a99 	.word	0x20000a99
 80028ec:	00000000 	.word	0x00000000
 80028f0:	20000a9a 	.word	0x20000a9a
 80028f4:	20000a9b 	.word	0x20000a9b

080028f8 <PID_Trace_realize>:


void PID_Trace_realize(PID_Trace *pid, float CurrentValue) {
 80028f8:	b480      	push	{r7}
 80028fa:	b085      	sub	sp, #20
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	ed87 0a00 	vstr	s0, [r7]
    // 1. 计算当前误差
    pid->Error = pid->target_val - CurrentValue;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	ed93 7a06 	vldr	s14, [r3, #24]
 800290a:	edd7 7a00 	vldr	s15, [r7]
 800290e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	edc3 7a03 	vstr	s15, [r3, #12]

    // 2. 计算积分项 (带积分限幅，防止积分饱和)
    pid->Integral += pid->Error;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	ed93 7a05 	vldr	s14, [r3, #20]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	edd3 7a03 	vldr	s15, [r3, #12]
 8002924:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	edc3 7a05 	vstr	s15, [r3, #20]
    if (pid->Integral > 500) pid->Integral = 500;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	edd3 7a05 	vldr	s15, [r3, #20]
 8002934:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80029fc <PID_Trace_realize+0x104>
 8002938:	eef4 7ac7 	vcmpe.f32	s15, s14
 800293c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002940:	dd02      	ble.n	8002948 <PID_Trace_realize+0x50>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a2e      	ldr	r2, [pc, #184]	@ (8002a00 <PID_Trace_realize+0x108>)
 8002946:	615a      	str	r2, [r3, #20]
    if (pid->Integral < -500) pid->Integral = -500;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	edd3 7a05 	vldr	s15, [r3, #20]
 800294e:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8002a04 <PID_Trace_realize+0x10c>
 8002952:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800295a:	d502      	bpl.n	8002962 <PID_Trace_realize+0x6a>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	4a2a      	ldr	r2, [pc, #168]	@ (8002a08 <PID_Trace_realize+0x110>)
 8002960:	615a      	str	r2, [r3, #20]

    // 3. 计算微分项
    float derivative = pid->Error - pid->LastError;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	ed93 7a03 	vldr	s14, [r3, #12]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	edd3 7a04 	vldr	s15, [r3, #16]
 800296e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002972:	edc7 7a03 	vstr	s15, [r7, #12]

    // 4. 计算总输出
    pid->output_val = (pid->Kp * pid->Error) +
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	ed93 7a00 	vldr	s14, [r3]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002982:	ee27 7a27 	vmul.f32	s14, s14, s15
                  (pid->Ki * pid->Integral) +
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	edd3 6a01 	vldr	s13, [r3, #4]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	edd3 7a05 	vldr	s15, [r3, #20]
 8002992:	ee66 7aa7 	vmul.f32	s15, s13, s15
    pid->output_val = (pid->Kp * pid->Error) +
 8002996:	ee37 7a27 	vadd.f32	s14, s14, s15
                  (pid->Kd * derivative);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	edd3 6a02 	vldr	s13, [r3, #8]
 80029a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80029a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
                  (pid->Ki * pid->Integral) +
 80029a8:	ee77 7a27 	vadd.f32	s15, s14, s15
    pid->output_val = (pid->Kp * pid->Error) +
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	edc3 7a07 	vstr	s15, [r3, #28]
    if (pid->output_val > 500) pid->output_val = 500;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	edd3 7a07 	vldr	s15, [r3, #28]
 80029b8:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80029fc <PID_Trace_realize+0x104>
 80029bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029c4:	dd02      	ble.n	80029cc <PID_Trace_realize+0xd4>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a0d      	ldr	r2, [pc, #52]	@ (8002a00 <PID_Trace_realize+0x108>)
 80029ca:	61da      	str	r2, [r3, #28]
    if (pid->output_val < -500) pid->output_val = -500;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	edd3 7a07 	vldr	s15, [r3, #28]
 80029d2:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8002a04 <PID_Trace_realize+0x10c>
 80029d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029de:	d502      	bpl.n	80029e6 <PID_Trace_realize+0xee>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4a09      	ldr	r2, [pc, #36]	@ (8002a08 <PID_Trace_realize+0x110>)
 80029e4:	61da      	str	r2, [r3, #28]
    // 5. 更新上次误差
    pid->LastError = pid->Error;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	68da      	ldr	r2, [r3, #12]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	611a      	str	r2, [r3, #16]
}
 80029ee:	bf00      	nop
 80029f0:	3714      	adds	r7, #20
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop
 80029fc:	43fa0000 	.word	0x43fa0000
 8002a00:	43fa0000 	.word	0x43fa0000
 8002a04:	c3fa0000 	.word	0xc3fa0000
 8002a08:	c3fa0000 	.word	0xc3fa0000

08002a0c <OLED_Send>:
 * @param len 要发送的数据长度
 * @return None
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他平台时应根据实际情况修改此函数
 */
void OLED_Send(uint8_t *data, uint8_t len)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af02      	add	r7, sp, #8
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	460b      	mov	r3, r1
 8002a16:	70fb      	strb	r3, [r7, #3]
  HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, data, len, HAL_MAX_DELAY);
 8002a18:	78fb      	ldrb	r3, [r7, #3]
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a20:	9200      	str	r2, [sp, #0]
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	2178      	movs	r1, #120	@ 0x78
 8002a26:	4803      	ldr	r0, [pc, #12]	@ (8002a34 <OLED_Send+0x28>)
 8002a28:	f001 fd7e 	bl	8004528 <HAL_I2C_Master_Transmit>
}
 8002a2c:	bf00      	nop
 8002a2e:	3708      	adds	r7, #8
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	2000020c 	.word	0x2000020c

08002a38 <OLED_SendCmd>:

/**
 * @brief 向OLED发送指令
 */
void OLED_SendCmd(uint8_t cmd)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	4603      	mov	r3, r0
 8002a40:	71fb      	strb	r3, [r7, #7]
  static uint8_t sendBuffer[2] = {0};
  sendBuffer[1] = cmd;
 8002a42:	4a05      	ldr	r2, [pc, #20]	@ (8002a58 <OLED_SendCmd+0x20>)
 8002a44:	79fb      	ldrb	r3, [r7, #7]
 8002a46:	7053      	strb	r3, [r2, #1]
  OLED_Send(sendBuffer, 2);
 8002a48:	2102      	movs	r1, #2
 8002a4a:	4803      	ldr	r0, [pc, #12]	@ (8002a58 <OLED_SendCmd+0x20>)
 8002a4c:	f7ff ffde 	bl	8002a0c <OLED_Send>
}
 8002a50:	bf00      	nop
 8002a52:	3708      	adds	r7, #8
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	20000e9c 	.word	0x20000e9c

08002a5c <OLED_Init>:
/**
 * @brief 初始化OLED (SSD1306)
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_Init()
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0
  OLED_SendCmd(0xAE); /*关闭显示 display off*/
 8002a60:	20ae      	movs	r0, #174	@ 0xae
 8002a62:	f7ff ffe9 	bl	8002a38 <OLED_SendCmd>

  OLED_SendCmd(0x20);
 8002a66:	2020      	movs	r0, #32
 8002a68:	f7ff ffe6 	bl	8002a38 <OLED_SendCmd>
  OLED_SendCmd(0x10);
 8002a6c:	2010      	movs	r0, #16
 8002a6e:	f7ff ffe3 	bl	8002a38 <OLED_SendCmd>

  OLED_SendCmd(0xB0);
 8002a72:	20b0      	movs	r0, #176	@ 0xb0
 8002a74:	f7ff ffe0 	bl	8002a38 <OLED_SendCmd>

  OLED_SendCmd(0xC8);
 8002a78:	20c8      	movs	r0, #200	@ 0xc8
 8002a7a:	f7ff ffdd 	bl	8002a38 <OLED_SendCmd>

  OLED_SendCmd(0x00);
 8002a7e:	2000      	movs	r0, #0
 8002a80:	f7ff ffda 	bl	8002a38 <OLED_SendCmd>
  OLED_SendCmd(0x10);
 8002a84:	2010      	movs	r0, #16
 8002a86:	f7ff ffd7 	bl	8002a38 <OLED_SendCmd>

  OLED_SendCmd(0x40);
 8002a8a:	2040      	movs	r0, #64	@ 0x40
 8002a8c:	f7ff ffd4 	bl	8002a38 <OLED_SendCmd>

  OLED_SendCmd(0x81);
 8002a90:	2081      	movs	r0, #129	@ 0x81
 8002a92:	f7ff ffd1 	bl	8002a38 <OLED_SendCmd>

  OLED_SendCmd(0xDF);
 8002a96:	20df      	movs	r0, #223	@ 0xdf
 8002a98:	f7ff ffce 	bl	8002a38 <OLED_SendCmd>
  OLED_SendCmd(0xA1);
 8002a9c:	20a1      	movs	r0, #161	@ 0xa1
 8002a9e:	f7ff ffcb 	bl	8002a38 <OLED_SendCmd>

  OLED_SendCmd(0xA6);
 8002aa2:	20a6      	movs	r0, #166	@ 0xa6
 8002aa4:	f7ff ffc8 	bl	8002a38 <OLED_SendCmd>
  OLED_SendCmd(0xA8);
 8002aa8:	20a8      	movs	r0, #168	@ 0xa8
 8002aaa:	f7ff ffc5 	bl	8002a38 <OLED_SendCmd>

  OLED_SendCmd(0x3F);
 8002aae:	203f      	movs	r0, #63	@ 0x3f
 8002ab0:	f7ff ffc2 	bl	8002a38 <OLED_SendCmd>

  OLED_SendCmd(0xA4);
 8002ab4:	20a4      	movs	r0, #164	@ 0xa4
 8002ab6:	f7ff ffbf 	bl	8002a38 <OLED_SendCmd>

  OLED_SendCmd(0xD3);
 8002aba:	20d3      	movs	r0, #211	@ 0xd3
 8002abc:	f7ff ffbc 	bl	8002a38 <OLED_SendCmd>
  OLED_SendCmd(0x00);
 8002ac0:	2000      	movs	r0, #0
 8002ac2:	f7ff ffb9 	bl	8002a38 <OLED_SendCmd>

  OLED_SendCmd(0xD5);
 8002ac6:	20d5      	movs	r0, #213	@ 0xd5
 8002ac8:	f7ff ffb6 	bl	8002a38 <OLED_SendCmd>
  OLED_SendCmd(0xF0);
 8002acc:	20f0      	movs	r0, #240	@ 0xf0
 8002ace:	f7ff ffb3 	bl	8002a38 <OLED_SendCmd>

  OLED_SendCmd(0xD9);
 8002ad2:	20d9      	movs	r0, #217	@ 0xd9
 8002ad4:	f7ff ffb0 	bl	8002a38 <OLED_SendCmd>
  OLED_SendCmd(0x22);
 8002ad8:	2022      	movs	r0, #34	@ 0x22
 8002ada:	f7ff ffad 	bl	8002a38 <OLED_SendCmd>

  OLED_SendCmd(0xDA);
 8002ade:	20da      	movs	r0, #218	@ 0xda
 8002ae0:	f7ff ffaa 	bl	8002a38 <OLED_SendCmd>
  OLED_SendCmd(0x12);
 8002ae4:	2012      	movs	r0, #18
 8002ae6:	f7ff ffa7 	bl	8002a38 <OLED_SendCmd>

  OLED_SendCmd(0xDB);
 8002aea:	20db      	movs	r0, #219	@ 0xdb
 8002aec:	f7ff ffa4 	bl	8002a38 <OLED_SendCmd>
  OLED_SendCmd(0x20);
 8002af0:	2020      	movs	r0, #32
 8002af2:	f7ff ffa1 	bl	8002a38 <OLED_SendCmd>

  OLED_SendCmd(0x8D);
 8002af6:	208d      	movs	r0, #141	@ 0x8d
 8002af8:	f7ff ff9e 	bl	8002a38 <OLED_SendCmd>
  OLED_SendCmd(0x14);
 8002afc:	2014      	movs	r0, #20
 8002afe:	f7ff ff9b 	bl	8002a38 <OLED_SendCmd>

  OLED_NewFrame();
 8002b02:	f000 f807 	bl	8002b14 <OLED_NewFrame>
  OLED_ShowFrame();
 8002b06:	f000 f811 	bl	8002b2c <OLED_ShowFrame>

  OLED_SendCmd(0xAF); /*开启显示 display ON*/
 8002b0a:	20af      	movs	r0, #175	@ 0xaf
 8002b0c:	f7ff ff94 	bl	8002a38 <OLED_SendCmd>
}
 8002b10:	bf00      	nop
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <OLED_NewFrame>:

/**
 * @brief 清空显存 绘制新的一帧
 */
void OLED_NewFrame()
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0
  memset(OLED_GRAM, 0, sizeof(OLED_GRAM));
 8002b18:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b1c:	2100      	movs	r1, #0
 8002b1e:	4802      	ldr	r0, [pc, #8]	@ (8002b28 <OLED_NewFrame+0x14>)
 8002b20:	f006 fa29 	bl	8008f76 <memset>
}
 8002b24:	bf00      	nop
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	20000a9c 	.word	0x20000a9c

08002b2c <OLED_ShowFrame>:
/**
 * @brief 将当前显存显示到屏幕上
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_ShowFrame()
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
  static uint8_t sendBuffer[OLED_COLUMN + 1];
  sendBuffer[0] = 0x40;
 8002b32:	4b15      	ldr	r3, [pc, #84]	@ (8002b88 <OLED_ShowFrame+0x5c>)
 8002b34:	2240      	movs	r2, #64	@ 0x40
 8002b36:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < OLED_PAGE; i++)
 8002b38:	2300      	movs	r3, #0
 8002b3a:	71fb      	strb	r3, [r7, #7]
 8002b3c:	e01b      	b.n	8002b76 <OLED_ShowFrame+0x4a>
  {
    OLED_SendCmd(0xB0 + i); // 设置页地址
 8002b3e:	79fb      	ldrb	r3, [r7, #7]
 8002b40:	3b50      	subs	r3, #80	@ 0x50
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7ff ff77 	bl	8002a38 <OLED_SendCmd>
    OLED_SendCmd(0x00);     // 设置列地址低4位
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	f7ff ff74 	bl	8002a38 <OLED_SendCmd>
    OLED_SendCmd(0x10);     // 设置列地址高4位
 8002b50:	2010      	movs	r0, #16
 8002b52:	f7ff ff71 	bl	8002a38 <OLED_SendCmd>
    memcpy(sendBuffer + 1, OLED_GRAM[i], OLED_COLUMN);
 8002b56:	480d      	ldr	r0, [pc, #52]	@ (8002b8c <OLED_ShowFrame+0x60>)
 8002b58:	79fb      	ldrb	r3, [r7, #7]
 8002b5a:	01db      	lsls	r3, r3, #7
 8002b5c:	4a0c      	ldr	r2, [pc, #48]	@ (8002b90 <OLED_ShowFrame+0x64>)
 8002b5e:	4413      	add	r3, r2
 8002b60:	2280      	movs	r2, #128	@ 0x80
 8002b62:	4619      	mov	r1, r3
 8002b64:	f006 fa87 	bl	8009076 <memcpy>
    OLED_Send(sendBuffer, OLED_COLUMN + 1);
 8002b68:	2181      	movs	r1, #129	@ 0x81
 8002b6a:	4807      	ldr	r0, [pc, #28]	@ (8002b88 <OLED_ShowFrame+0x5c>)
 8002b6c:	f7ff ff4e 	bl	8002a0c <OLED_Send>
  for (uint8_t i = 0; i < OLED_PAGE; i++)
 8002b70:	79fb      	ldrb	r3, [r7, #7]
 8002b72:	3301      	adds	r3, #1
 8002b74:	71fb      	strb	r3, [r7, #7]
 8002b76:	79fb      	ldrb	r3, [r7, #7]
 8002b78:	2b07      	cmp	r3, #7
 8002b7a:	d9e0      	bls.n	8002b3e <OLED_ShowFrame+0x12>
  }
}
 8002b7c:	bf00      	nop
 8002b7e:	bf00      	nop
 8002b80:	3708      	adds	r7, #8
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	20000ea0 	.word	0x20000ea0
 8002b8c:	20000ea1 	.word	0x20000ea1
 8002b90:	20000a9c 	.word	0x20000a9c

08002b94 <OLED_SetByte_Fine>:
 * @note 此函数将显存中的某一字节的第start位到第end位设置为与data相同
 * @note start和end的范围为0-7, start必须小于等于end
 * @note 此函数与OLED_SetByte_Fine的区别在于此函数只能设置显存中的某一真实字节
 */
void OLED_SetByte_Fine(uint8_t page, uint8_t column, uint8_t data, uint8_t start, uint8_t end, OLED_ColorMode color)
{
 8002b94:	b490      	push	{r4, r7}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	4604      	mov	r4, r0
 8002b9c:	4608      	mov	r0, r1
 8002b9e:	4611      	mov	r1, r2
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	4623      	mov	r3, r4
 8002ba4:	71fb      	strb	r3, [r7, #7]
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	71bb      	strb	r3, [r7, #6]
 8002baa:	460b      	mov	r3, r1
 8002bac:	717b      	strb	r3, [r7, #5]
 8002bae:	4613      	mov	r3, r2
 8002bb0:	713b      	strb	r3, [r7, #4]
  static uint8_t temp;
  if (page >= OLED_PAGE || column >= OLED_COLUMN)
 8002bb2:	79fb      	ldrb	r3, [r7, #7]
 8002bb4:	2b07      	cmp	r3, #7
 8002bb6:	d85f      	bhi.n	8002c78 <OLED_SetByte_Fine+0xe4>
 8002bb8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	db5b      	blt.n	8002c78 <OLED_SetByte_Fine+0xe4>
    return;
  if (color)
 8002bc0:	7d3b      	ldrb	r3, [r7, #20]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d002      	beq.n	8002bcc <OLED_SetByte_Fine+0x38>
    data = ~data;
 8002bc6:	797b      	ldrb	r3, [r7, #5]
 8002bc8:	43db      	mvns	r3, r3
 8002bca:	717b      	strb	r3, [r7, #5]

  temp = data | (0xff << (end + 1)) | (0xff >> (8 - start));
 8002bcc:	7c3b      	ldrb	r3, [r7, #16]
 8002bce:	3301      	adds	r3, #1
 8002bd0:	22ff      	movs	r2, #255	@ 0xff
 8002bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd6:	b25a      	sxtb	r2, r3
 8002bd8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	b25a      	sxtb	r2, r3
 8002be0:	793b      	ldrb	r3, [r7, #4]
 8002be2:	f1c3 0308 	rsb	r3, r3, #8
 8002be6:	21ff      	movs	r1, #255	@ 0xff
 8002be8:	fa41 f303 	asr.w	r3, r1, r3
 8002bec:	b25b      	sxtb	r3, r3
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	b25b      	sxtb	r3, r3
 8002bf2:	b2da      	uxtb	r2, r3
 8002bf4:	4b23      	ldr	r3, [pc, #140]	@ (8002c84 <OLED_SetByte_Fine+0xf0>)
 8002bf6:	701a      	strb	r2, [r3, #0]
  OLED_GRAM[page][column] &= temp;
 8002bf8:	79fa      	ldrb	r2, [r7, #7]
 8002bfa:	79bb      	ldrb	r3, [r7, #6]
 8002bfc:	4922      	ldr	r1, [pc, #136]	@ (8002c88 <OLED_SetByte_Fine+0xf4>)
 8002bfe:	01d2      	lsls	r2, r2, #7
 8002c00:	440a      	add	r2, r1
 8002c02:	4413      	add	r3, r2
 8002c04:	7818      	ldrb	r0, [r3, #0]
 8002c06:	4b1f      	ldr	r3, [pc, #124]	@ (8002c84 <OLED_SetByte_Fine+0xf0>)
 8002c08:	7819      	ldrb	r1, [r3, #0]
 8002c0a:	79fa      	ldrb	r2, [r7, #7]
 8002c0c:	79bb      	ldrb	r3, [r7, #6]
 8002c0e:	4001      	ands	r1, r0
 8002c10:	b2c8      	uxtb	r0, r1
 8002c12:	491d      	ldr	r1, [pc, #116]	@ (8002c88 <OLED_SetByte_Fine+0xf4>)
 8002c14:	01d2      	lsls	r2, r2, #7
 8002c16:	440a      	add	r2, r1
 8002c18:	4413      	add	r3, r2
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	701a      	strb	r2, [r3, #0]
  temp = data & ~(0xff << (end + 1)) & ~(0xff >> (8 - start));
 8002c1e:	7c3b      	ldrb	r3, [r7, #16]
 8002c20:	3301      	adds	r3, #1
 8002c22:	22ff      	movs	r2, #255	@ 0xff
 8002c24:	fa02 f303 	lsl.w	r3, r2, r3
 8002c28:	b25b      	sxtb	r3, r3
 8002c2a:	43db      	mvns	r3, r3
 8002c2c:	b25a      	sxtb	r2, r3
 8002c2e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002c32:	4013      	ands	r3, r2
 8002c34:	b25a      	sxtb	r2, r3
 8002c36:	793b      	ldrb	r3, [r7, #4]
 8002c38:	f1c3 0308 	rsb	r3, r3, #8
 8002c3c:	f06f 01ff 	mvn.w	r1, #255	@ 0xff
 8002c40:	fa41 f303 	asr.w	r3, r1, r3
 8002c44:	b25b      	sxtb	r3, r3
 8002c46:	4013      	ands	r3, r2
 8002c48:	b25b      	sxtb	r3, r3
 8002c4a:	b2da      	uxtb	r2, r3
 8002c4c:	4b0d      	ldr	r3, [pc, #52]	@ (8002c84 <OLED_SetByte_Fine+0xf0>)
 8002c4e:	701a      	strb	r2, [r3, #0]
  OLED_GRAM[page][column] |= temp;
 8002c50:	79fa      	ldrb	r2, [r7, #7]
 8002c52:	79bb      	ldrb	r3, [r7, #6]
 8002c54:	490c      	ldr	r1, [pc, #48]	@ (8002c88 <OLED_SetByte_Fine+0xf4>)
 8002c56:	01d2      	lsls	r2, r2, #7
 8002c58:	440a      	add	r2, r1
 8002c5a:	4413      	add	r3, r2
 8002c5c:	7818      	ldrb	r0, [r3, #0]
 8002c5e:	4b09      	ldr	r3, [pc, #36]	@ (8002c84 <OLED_SetByte_Fine+0xf0>)
 8002c60:	7819      	ldrb	r1, [r3, #0]
 8002c62:	79fa      	ldrb	r2, [r7, #7]
 8002c64:	79bb      	ldrb	r3, [r7, #6]
 8002c66:	4301      	orrs	r1, r0
 8002c68:	b2c8      	uxtb	r0, r1
 8002c6a:	4907      	ldr	r1, [pc, #28]	@ (8002c88 <OLED_SetByte_Fine+0xf4>)
 8002c6c:	01d2      	lsls	r2, r2, #7
 8002c6e:	440a      	add	r2, r1
 8002c70:	4413      	add	r3, r2
 8002c72:	4602      	mov	r2, r0
 8002c74:	701a      	strb	r2, [r3, #0]
 8002c76:	e000      	b.n	8002c7a <OLED_SetByte_Fine+0xe6>
    return;
 8002c78:	bf00      	nop
  // 使用OLED_SetPixel实现
  // for (uint8_t i = start; i <= end; i++) {
  //   OLED_SetPixel(column, page * 8 + i, !((data >> i) & 0x01));
  // }
}
 8002c7a:	3708      	adds	r7, #8
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bc90      	pop	{r4, r7}
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	20000f21 	.word	0x20000f21
 8002c88:	20000a9c 	.word	0x20000a9c

08002c8c <OLED_SetBits_Fine>:
 * @note 此函数将显存中从(x,y)开始向下数len位设置为与data相同
 * @note len的范围为1-8
 * @note 此函数与OLED_SetByte_Fine的区别在于此函数的横坐标和纵坐标是以像素为单位的, 可能出现跨两个真实字节的情况(跨页)
 */
void OLED_SetBits_Fine(uint8_t x, uint8_t y, uint8_t data, uint8_t len, OLED_ColorMode color)
{
 8002c8c:	b5b0      	push	{r4, r5, r7, lr}
 8002c8e:	b086      	sub	sp, #24
 8002c90:	af02      	add	r7, sp, #8
 8002c92:	4604      	mov	r4, r0
 8002c94:	4608      	mov	r0, r1
 8002c96:	4611      	mov	r1, r2
 8002c98:	461a      	mov	r2, r3
 8002c9a:	4623      	mov	r3, r4
 8002c9c:	71fb      	strb	r3, [r7, #7]
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	71bb      	strb	r3, [r7, #6]
 8002ca2:	460b      	mov	r3, r1
 8002ca4:	717b      	strb	r3, [r7, #5]
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	713b      	strb	r3, [r7, #4]
  uint8_t page = y / 8;
 8002caa:	79bb      	ldrb	r3, [r7, #6]
 8002cac:	08db      	lsrs	r3, r3, #3
 8002cae:	73fb      	strb	r3, [r7, #15]
  uint8_t bit = y % 8;
 8002cb0:	79bb      	ldrb	r3, [r7, #6]
 8002cb2:	f003 0307 	and.w	r3, r3, #7
 8002cb6:	73bb      	strb	r3, [r7, #14]
  if (bit + len > 8)
 8002cb8:	7bba      	ldrb	r2, [r7, #14]
 8002cba:	793b      	ldrb	r3, [r7, #4]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	2b08      	cmp	r3, #8
 8002cc0:	dd29      	ble.n	8002d16 <OLED_SetBits_Fine+0x8a>
  {
    OLED_SetByte_Fine(page, x, data << bit, bit, 7, color);
 8002cc2:	797a      	ldrb	r2, [r7, #5]
 8002cc4:	7bbb      	ldrb	r3, [r7, #14]
 8002cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cca:	b2da      	uxtb	r2, r3
 8002ccc:	7bbc      	ldrb	r4, [r7, #14]
 8002cce:	79f9      	ldrb	r1, [r7, #7]
 8002cd0:	7bf8      	ldrb	r0, [r7, #15]
 8002cd2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002cd6:	9301      	str	r3, [sp, #4]
 8002cd8:	2307      	movs	r3, #7
 8002cda:	9300      	str	r3, [sp, #0]
 8002cdc:	4623      	mov	r3, r4
 8002cde:	f7ff ff59 	bl	8002b94 <OLED_SetByte_Fine>
    OLED_SetByte_Fine(page + 1, x, data >> (8 - bit), 0, len + bit - 1 - 8, color);
 8002ce2:	7bfb      	ldrb	r3, [r7, #15]
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	b2d8      	uxtb	r0, r3
 8002ce8:	797a      	ldrb	r2, [r7, #5]
 8002cea:	7bbb      	ldrb	r3, [r7, #14]
 8002cec:	f1c3 0308 	rsb	r3, r3, #8
 8002cf0:	fa42 f303 	asr.w	r3, r2, r3
 8002cf4:	b2dc      	uxtb	r4, r3
 8002cf6:	793a      	ldrb	r2, [r7, #4]
 8002cf8:	7bbb      	ldrb	r3, [r7, #14]
 8002cfa:	4413      	add	r3, r2
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	3b09      	subs	r3, #9
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	79f9      	ldrb	r1, [r7, #7]
 8002d04:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002d08:	9201      	str	r2, [sp, #4]
 8002d0a:	9300      	str	r3, [sp, #0]
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	4622      	mov	r2, r4
 8002d10:	f7ff ff40 	bl	8002b94 <OLED_SetByte_Fine>
  }
  // 使用OLED_SetPixel实现
  // for (uint8_t i = 0; i < len; i++) {
  //   OLED_SetPixel(x, y + i, !((data >> i) & 0x01));
  // }
}
 8002d14:	e015      	b.n	8002d42 <OLED_SetBits_Fine+0xb6>
    OLED_SetByte_Fine(page, x, data << bit, bit, bit + len - 1, color);
 8002d16:	797a      	ldrb	r2, [r7, #5]
 8002d18:	7bbb      	ldrb	r3, [r7, #14]
 8002d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1e:	b2dc      	uxtb	r4, r3
 8002d20:	7bba      	ldrb	r2, [r7, #14]
 8002d22:	793b      	ldrb	r3, [r7, #4]
 8002d24:	4413      	add	r3, r2
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	3b01      	subs	r3, #1
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	7bbd      	ldrb	r5, [r7, #14]
 8002d2e:	79f9      	ldrb	r1, [r7, #7]
 8002d30:	7bf8      	ldrb	r0, [r7, #15]
 8002d32:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002d36:	9201      	str	r2, [sp, #4]
 8002d38:	9300      	str	r3, [sp, #0]
 8002d3a:	462b      	mov	r3, r5
 8002d3c:	4622      	mov	r2, r4
 8002d3e:	f7ff ff29 	bl	8002b94 <OLED_SetByte_Fine>
}
 8002d42:	bf00      	nop
 8002d44:	3710      	adds	r7, #16
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bdb0      	pop	{r4, r5, r7, pc}

08002d4a <OLED_SetBits>:
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始向下数8位设置为与data相同
 * @note 此函数与OLED_SetByte的区别在于此函数的横坐标和纵坐标是以像素为单位的, 可能出现跨两个真实字节的情况(跨页)
 */
void OLED_SetBits(uint8_t x, uint8_t y, uint8_t data, OLED_ColorMode color)
{
 8002d4a:	b590      	push	{r4, r7, lr}
 8002d4c:	b087      	sub	sp, #28
 8002d4e:	af02      	add	r7, sp, #8
 8002d50:	4604      	mov	r4, r0
 8002d52:	4608      	mov	r0, r1
 8002d54:	4611      	mov	r1, r2
 8002d56:	461a      	mov	r2, r3
 8002d58:	4623      	mov	r3, r4
 8002d5a:	71fb      	strb	r3, [r7, #7]
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	71bb      	strb	r3, [r7, #6]
 8002d60:	460b      	mov	r3, r1
 8002d62:	717b      	strb	r3, [r7, #5]
 8002d64:	4613      	mov	r3, r2
 8002d66:	713b      	strb	r3, [r7, #4]
  uint8_t page = y / 8;
 8002d68:	79bb      	ldrb	r3, [r7, #6]
 8002d6a:	08db      	lsrs	r3, r3, #3
 8002d6c:	73fb      	strb	r3, [r7, #15]
  uint8_t bit = y % 8;
 8002d6e:	79bb      	ldrb	r3, [r7, #6]
 8002d70:	f003 0307 	and.w	r3, r3, #7
 8002d74:	73bb      	strb	r3, [r7, #14]
  OLED_SetByte_Fine(page, x, data << bit, bit, 7, color);
 8002d76:	797a      	ldrb	r2, [r7, #5]
 8002d78:	7bbb      	ldrb	r3, [r7, #14]
 8002d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7e:	b2da      	uxtb	r2, r3
 8002d80:	7bbc      	ldrb	r4, [r7, #14]
 8002d82:	79f9      	ldrb	r1, [r7, #7]
 8002d84:	7bf8      	ldrb	r0, [r7, #15]
 8002d86:	793b      	ldrb	r3, [r7, #4]
 8002d88:	9301      	str	r3, [sp, #4]
 8002d8a:	2307      	movs	r3, #7
 8002d8c:	9300      	str	r3, [sp, #0]
 8002d8e:	4623      	mov	r3, r4
 8002d90:	f7ff ff00 	bl	8002b94 <OLED_SetByte_Fine>
  if (bit)
 8002d94:	7bbb      	ldrb	r3, [r7, #14]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d014      	beq.n	8002dc4 <OLED_SetBits+0x7a>
  {
    OLED_SetByte_Fine(page + 1, x, data >> (8 - bit), 0, bit - 1, color);
 8002d9a:	7bfb      	ldrb	r3, [r7, #15]
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	b2d8      	uxtb	r0, r3
 8002da0:	797a      	ldrb	r2, [r7, #5]
 8002da2:	7bbb      	ldrb	r3, [r7, #14]
 8002da4:	f1c3 0308 	rsb	r3, r3, #8
 8002da8:	fa42 f303 	asr.w	r3, r2, r3
 8002dac:	b2dc      	uxtb	r4, r3
 8002dae:	7bbb      	ldrb	r3, [r7, #14]
 8002db0:	3b01      	subs	r3, #1
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	79f9      	ldrb	r1, [r7, #7]
 8002db6:	793a      	ldrb	r2, [r7, #4]
 8002db8:	9201      	str	r2, [sp, #4]
 8002dba:	9300      	str	r3, [sp, #0]
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	4622      	mov	r2, r4
 8002dc0:	f7ff fee8 	bl	8002b94 <OLED_SetByte_Fine>
  }
}
 8002dc4:	bf00      	nop
 8002dc6:	3714      	adds	r7, #20
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd90      	pop	{r4, r7, pc}

08002dcc <OLED_SetBlock>:
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始的w*h个像素设置为data中的数据
 * @note data的数据应该采用列行式排列
 */
void OLED_SetBlock(uint8_t x, uint8_t y, const uint8_t *data, uint8_t w, uint8_t h, OLED_ColorMode color)
{
 8002dcc:	b590      	push	{r4, r7, lr}
 8002dce:	b087      	sub	sp, #28
 8002dd0:	af02      	add	r7, sp, #8
 8002dd2:	603a      	str	r2, [r7, #0]
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	71fb      	strb	r3, [r7, #7]
 8002dda:	460b      	mov	r3, r1
 8002ddc:	71bb      	strb	r3, [r7, #6]
 8002dde:	4613      	mov	r3, r2
 8002de0:	717b      	strb	r3, [r7, #5]
  uint8_t fullRow = h / 8; // 完整的行数
 8002de2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002de6:	08db      	lsrs	r3, r3, #3
 8002de8:	733b      	strb	r3, [r7, #12]
  uint8_t partBit = h % 8; // 不完整的字节中的有效位数
 8002dea:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002dee:	f003 0307 	and.w	r3, r3, #7
 8002df2:	72fb      	strb	r3, [r7, #11]
  for (uint8_t i = 0; i < w; i++)
 8002df4:	2300      	movs	r3, #0
 8002df6:	73fb      	strb	r3, [r7, #15]
 8002df8:	e025      	b.n	8002e46 <OLED_SetBlock+0x7a>
  {
    for (uint8_t j = 0; j < fullRow; j++)
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	73bb      	strb	r3, [r7, #14]
 8002dfe:	e01b      	b.n	8002e38 <OLED_SetBlock+0x6c>
    {
      OLED_SetBits(x + i, y + j * 8, data[i + j * w], color);
 8002e00:	79fa      	ldrb	r2, [r7, #7]
 8002e02:	7bfb      	ldrb	r3, [r7, #15]
 8002e04:	4413      	add	r3, r2
 8002e06:	b2d8      	uxtb	r0, r3
 8002e08:	7bbb      	ldrb	r3, [r7, #14]
 8002e0a:	00db      	lsls	r3, r3, #3
 8002e0c:	b2da      	uxtb	r2, r3
 8002e0e:	79bb      	ldrb	r3, [r7, #6]
 8002e10:	4413      	add	r3, r2
 8002e12:	b2dc      	uxtb	r4, r3
 8002e14:	7bfa      	ldrb	r2, [r7, #15]
 8002e16:	7bbb      	ldrb	r3, [r7, #14]
 8002e18:	7979      	ldrb	r1, [r7, #5]
 8002e1a:	fb01 f303 	mul.w	r3, r1, r3
 8002e1e:	4413      	add	r3, r2
 8002e20:	461a      	mov	r2, r3
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	4413      	add	r3, r2
 8002e26:	781a      	ldrb	r2, [r3, #0]
 8002e28:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002e2c:	4621      	mov	r1, r4
 8002e2e:	f7ff ff8c 	bl	8002d4a <OLED_SetBits>
    for (uint8_t j = 0; j < fullRow; j++)
 8002e32:	7bbb      	ldrb	r3, [r7, #14]
 8002e34:	3301      	adds	r3, #1
 8002e36:	73bb      	strb	r3, [r7, #14]
 8002e38:	7bba      	ldrb	r2, [r7, #14]
 8002e3a:	7b3b      	ldrb	r3, [r7, #12]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d3df      	bcc.n	8002e00 <OLED_SetBlock+0x34>
  for (uint8_t i = 0; i < w; i++)
 8002e40:	7bfb      	ldrb	r3, [r7, #15]
 8002e42:	3301      	adds	r3, #1
 8002e44:	73fb      	strb	r3, [r7, #15]
 8002e46:	7bfa      	ldrb	r2, [r7, #15]
 8002e48:	797b      	ldrb	r3, [r7, #5]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d3d5      	bcc.n	8002dfa <OLED_SetBlock+0x2e>
    }
  }
  if (partBit)
 8002e4e:	7afb      	ldrb	r3, [r7, #11]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d028      	beq.n	8002ea6 <OLED_SetBlock+0xda>
  {
    uint16_t fullNum = w * fullRow; // 完整的字节数
 8002e54:	797b      	ldrb	r3, [r7, #5]
 8002e56:	b29a      	uxth	r2, r3
 8002e58:	7b3b      	ldrb	r3, [r7, #12]
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	fb12 f303 	smulbb	r3, r2, r3
 8002e60:	813b      	strh	r3, [r7, #8]
    for (uint8_t i = 0; i < w; i++)
 8002e62:	2300      	movs	r3, #0
 8002e64:	737b      	strb	r3, [r7, #13]
 8002e66:	e01a      	b.n	8002e9e <OLED_SetBlock+0xd2>
    {
      OLED_SetBits_Fine(x + i, y + (fullRow * 8), data[fullNum + i], partBit, color);
 8002e68:	79fa      	ldrb	r2, [r7, #7]
 8002e6a:	7b7b      	ldrb	r3, [r7, #13]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	b2d8      	uxtb	r0, r3
 8002e70:	7b3b      	ldrb	r3, [r7, #12]
 8002e72:	00db      	lsls	r3, r3, #3
 8002e74:	b2da      	uxtb	r2, r3
 8002e76:	79bb      	ldrb	r3, [r7, #6]
 8002e78:	4413      	add	r3, r2
 8002e7a:	b2d9      	uxtb	r1, r3
 8002e7c:	893a      	ldrh	r2, [r7, #8]
 8002e7e:	7b7b      	ldrb	r3, [r7, #13]
 8002e80:	4413      	add	r3, r2
 8002e82:	461a      	mov	r2, r3
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	4413      	add	r3, r2
 8002e88:	781a      	ldrb	r2, [r3, #0]
 8002e8a:	7afc      	ldrb	r4, [r7, #11]
 8002e8c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002e90:	9300      	str	r3, [sp, #0]
 8002e92:	4623      	mov	r3, r4
 8002e94:	f7ff fefa 	bl	8002c8c <OLED_SetBits_Fine>
    for (uint8_t i = 0; i < w; i++)
 8002e98:	7b7b      	ldrb	r3, [r7, #13]
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	737b      	strb	r3, [r7, #13]
 8002e9e:	7b7a      	ldrb	r2, [r7, #13]
 8002ea0:	797b      	ldrb	r3, [r7, #5]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d3e0      	bcc.n	8002e68 <OLED_SetBlock+0x9c>
  //       if (j * 8 + k >= h) break; // 防止越界(不完整的字节
  //       OLED_SetPixel(x + i, y + j * 8 + k, !((data[i + j * w] >> k) & 0x01));
  //     }
  //   }
  // }
}
 8002ea6:	bf00      	nop
 8002ea8:	3714      	adds	r7, #20
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd90      	pop	{r4, r7, pc}

08002eae <OLED_PrintASCIIChar>:
 * @param ch 字符
 * @param font 字体
 * @param color 颜色
 */
void OLED_PrintASCIIChar(uint8_t x, uint8_t y, char ch, const ASCIIFont *font, OLED_ColorMode color)
{
 8002eae:	b5b0      	push	{r4, r5, r7, lr}
 8002eb0:	b084      	sub	sp, #16
 8002eb2:	af02      	add	r7, sp, #8
 8002eb4:	603b      	str	r3, [r7, #0]
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	71fb      	strb	r3, [r7, #7]
 8002eba:	460b      	mov	r3, r1
 8002ebc:	71bb      	strb	r3, [r7, #6]
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	717b      	strb	r3, [r7, #5]
  OLED_SetBlock(x, y, font->chars + (ch - ' ') * (((font->h + 7) / 8) * font->w), font->w, font->h, color);
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	685a      	ldr	r2, [r3, #4]
 8002ec6:	797b      	ldrb	r3, [r7, #5]
 8002ec8:	f1a3 0120 	sub.w	r1, r3, #32
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	3307      	adds	r3, #7
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	da00      	bge.n	8002ed8 <OLED_PrintASCIIChar+0x2a>
 8002ed6:	3307      	adds	r3, #7
 8002ed8:	10db      	asrs	r3, r3, #3
 8002eda:	4618      	mov	r0, r3
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	785b      	ldrb	r3, [r3, #1]
 8002ee0:	fb00 f303 	mul.w	r3, r0, r3
 8002ee4:	fb01 f303 	mul.w	r3, r1, r3
 8002ee8:	18d4      	adds	r4, r2, r3
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	785d      	ldrb	r5, [r3, #1]
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	79b9      	ldrb	r1, [r7, #6]
 8002ef4:	79f8      	ldrb	r0, [r7, #7]
 8002ef6:	7e3a      	ldrb	r2, [r7, #24]
 8002ef8:	9201      	str	r2, [sp, #4]
 8002efa:	9300      	str	r3, [sp, #0]
 8002efc:	462b      	mov	r3, r5
 8002efe:	4622      	mov	r2, r4
 8002f00:	f7ff ff64 	bl	8002dcc <OLED_SetBlock>
}
 8002f04:	bf00      	nop
 8002f06:	3708      	adds	r7, #8
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bdb0      	pop	{r4, r5, r7, pc}

08002f0c <_OLED_GetUTF8Len>:

/**
 * @brief 获取UTF-8编码的字符长度
 */
uint8_t _OLED_GetUTF8Len(char *string)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  if ((string[0] & 0x80) == 0x00)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	b25b      	sxtb	r3, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	db01      	blt.n	8002f22 <_OLED_GetUTF8Len+0x16>
  {
    return 1;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e018      	b.n	8002f54 <_OLED_GetUTF8Len+0x48>
  }
  else if ((string[0] & 0xE0) == 0xC0)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8002f2a:	2bc0      	cmp	r3, #192	@ 0xc0
 8002f2c:	d101      	bne.n	8002f32 <_OLED_GetUTF8Len+0x26>
  {
    return 2;
 8002f2e:	2302      	movs	r3, #2
 8002f30:	e010      	b.n	8002f54 <_OLED_GetUTF8Len+0x48>
  }
  else if ((string[0] & 0xF0) == 0xE0)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f3a:	2be0      	cmp	r3, #224	@ 0xe0
 8002f3c:	d101      	bne.n	8002f42 <_OLED_GetUTF8Len+0x36>
  {
    return 3;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e008      	b.n	8002f54 <_OLED_GetUTF8Len+0x48>
  }
  else if ((string[0] & 0xF8) == 0xF0)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8002f4a:	2bf0      	cmp	r3, #240	@ 0xf0
 8002f4c:	d101      	bne.n	8002f52 <_OLED_GetUTF8Len+0x46>
  {
    return 4;
 8002f4e:	2304      	movs	r3, #4
 8002f50:	e000      	b.n	8002f54 <_OLED_GetUTF8Len+0x48>
  }
  return 0;
 8002f52:	2300      	movs	r3, #0
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <OLED_PrintString>:
 * @note 为保证字符串中的中文会被自动识别并绘制, 需:
 * 1. 编译器字符集设置为UTF-8
 * 2. 使用波特律动LED取模工具生成字模(https://led.baud-dance.com)
 */
void OLED_PrintString(uint8_t x, uint8_t y, char *str, const Font *font, OLED_ColorMode color)
{
 8002f60:	b5b0      	push	{r4, r5, r7, lr}
 8002f62:	b08a      	sub	sp, #40	@ 0x28
 8002f64:	af02      	add	r7, sp, #8
 8002f66:	60ba      	str	r2, [r7, #8]
 8002f68:	607b      	str	r3, [r7, #4]
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	73fb      	strb	r3, [r7, #15]
 8002f6e:	460b      	mov	r3, r1
 8002f70:	73bb      	strb	r3, [r7, #14]
  uint16_t i = 0;                                       // 字符串索引
 8002f72:	2300      	movs	r3, #0
 8002f74:	83fb      	strh	r3, [r7, #30]
  uint8_t oneLen = (((font->h + 7) / 8) * font->w) + 4; // 一个字模占多少字节
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	3307      	adds	r3, #7
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	da00      	bge.n	8002f82 <OLED_PrintString+0x22>
 8002f80:	3307      	adds	r3, #7
 8002f82:	10db      	asrs	r3, r3, #3
 8002f84:	b2da      	uxtb	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	785b      	ldrb	r3, [r3, #1]
 8002f8a:	fb12 f303 	smulbb	r3, r2, r3
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	3304      	adds	r3, #4
 8002f92:	76fb      	strb	r3, [r7, #27]
  uint8_t found;                                        // 是否找到字模
  uint8_t utf8Len;                                      // UTF-8编码长度
  uint8_t *head;                                        // 字模头指针
  while (str[i])
 8002f94:	e07d      	b.n	8003092 <OLED_PrintString+0x132>
  {
    found = 0;
 8002f96:	2300      	movs	r3, #0
 8002f98:	777b      	strb	r3, [r7, #29]
    utf8Len = _OLED_GetUTF8Len(str + i);
 8002f9a:	8bfb      	ldrh	r3, [r7, #30]
 8002f9c:	68ba      	ldr	r2, [r7, #8]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7ff ffb3 	bl	8002f0c <_OLED_GetUTF8Len>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	76bb      	strb	r3, [r7, #26]
    if (utf8Len == 0)
 8002faa:	7ebb      	ldrb	r3, [r7, #26]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d078      	beq.n	80030a2 <OLED_PrintString+0x142>
      break; // 有问题的UTF-8编码

    // 寻找字符  TODO 优化查找算法, 二分查找或者hash
    for (uint8_t j = 0; j < font->len; j++)
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	773b      	strb	r3, [r7, #28]
 8002fb4:	e032      	b.n	800301c <OLED_PrintString+0xbc>
    {
      head = (uint8_t *)(font->chars) + (j * oneLen);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	7f3a      	ldrb	r2, [r7, #28]
 8002fbc:	7ef9      	ldrb	r1, [r7, #27]
 8002fbe:	fb01 f202 	mul.w	r2, r1, r2
 8002fc2:	4413      	add	r3, r2
 8002fc4:	617b      	str	r3, [r7, #20]
      if (memcmp(str + i, head, utf8Len) == 0)
 8002fc6:	8bfb      	ldrh	r3, [r7, #30]
 8002fc8:	68ba      	ldr	r2, [r7, #8]
 8002fca:	4413      	add	r3, r2
 8002fcc:	7eba      	ldrb	r2, [r7, #26]
 8002fce:	6979      	ldr	r1, [r7, #20]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f005 ffc0 	bl	8008f56 <memcmp>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d11c      	bne.n	8003016 <OLED_PrintString+0xb6>
      {
        OLED_SetBlock(x, y, head + 4, font->w, font->h, color);
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	1d1c      	adds	r4, r3, #4
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	785d      	ldrb	r5, [r3, #1]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	7bb9      	ldrb	r1, [r7, #14]
 8002fea:	7bf8      	ldrb	r0, [r7, #15]
 8002fec:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8002ff0:	9201      	str	r2, [sp, #4]
 8002ff2:	9300      	str	r3, [sp, #0]
 8002ff4:	462b      	mov	r3, r5
 8002ff6:	4622      	mov	r2, r4
 8002ff8:	f7ff fee8 	bl	8002dcc <OLED_SetBlock>
        // 移动光标
        x += font->w;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	785a      	ldrb	r2, [r3, #1]
 8003000:	7bfb      	ldrb	r3, [r7, #15]
 8003002:	4413      	add	r3, r2
 8003004:	73fb      	strb	r3, [r7, #15]
        i += utf8Len;
 8003006:	7ebb      	ldrb	r3, [r7, #26]
 8003008:	b29a      	uxth	r2, r3
 800300a:	8bfb      	ldrh	r3, [r7, #30]
 800300c:	4413      	add	r3, r2
 800300e:	83fb      	strh	r3, [r7, #30]
        found = 1;
 8003010:	2301      	movs	r3, #1
 8003012:	777b      	strb	r3, [r7, #29]
        break;
 8003014:	e007      	b.n	8003026 <OLED_PrintString+0xc6>
    for (uint8_t j = 0; j < font->len; j++)
 8003016:	7f3b      	ldrb	r3, [r7, #28]
 8003018:	3301      	adds	r3, #1
 800301a:	773b      	strb	r3, [r7, #28]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	7a1b      	ldrb	r3, [r3, #8]
 8003020:	7f3a      	ldrb	r2, [r7, #28]
 8003022:	429a      	cmp	r2, r3
 8003024:	d3c7      	bcc.n	8002fb6 <OLED_PrintString+0x56>
      }
    }

    // 若未找到字模,且为ASCII字符, 则缺省显示ASCII字符
    if (found == 0)
 8003026:	7f7b      	ldrb	r3, [r7, #29]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d132      	bne.n	8003092 <OLED_PrintString+0x132>
    {
      if (utf8Len == 1)
 800302c:	7ebb      	ldrb	r3, [r7, #26]
 800302e:	2b01      	cmp	r3, #1
 8003030:	d119      	bne.n	8003066 <OLED_PrintString+0x106>
      {
        OLED_PrintASCIIChar(x, y, str[i], font->ascii, color);
 8003032:	8bfb      	ldrh	r3, [r7, #30]
 8003034:	68ba      	ldr	r2, [r7, #8]
 8003036:	4413      	add	r3, r2
 8003038:	781a      	ldrb	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	68dc      	ldr	r4, [r3, #12]
 800303e:	7bb9      	ldrb	r1, [r7, #14]
 8003040:	7bf8      	ldrb	r0, [r7, #15]
 8003042:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8003046:	9300      	str	r3, [sp, #0]
 8003048:	4623      	mov	r3, r4
 800304a:	f7ff ff30 	bl	8002eae <OLED_PrintASCIIChar>
        // 移动光标
        x += font->ascii->w;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	785a      	ldrb	r2, [r3, #1]
 8003054:	7bfb      	ldrb	r3, [r7, #15]
 8003056:	4413      	add	r3, r2
 8003058:	73fb      	strb	r3, [r7, #15]
        i += utf8Len;
 800305a:	7ebb      	ldrb	r3, [r7, #26]
 800305c:	b29a      	uxth	r2, r3
 800305e:	8bfb      	ldrh	r3, [r7, #30]
 8003060:	4413      	add	r3, r2
 8003062:	83fb      	strh	r3, [r7, #30]
 8003064:	e015      	b.n	8003092 <OLED_PrintString+0x132>
      }
      else
      {
        OLED_PrintASCIIChar(x, y, ' ', font->ascii, color);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	68da      	ldr	r2, [r3, #12]
 800306a:	7bb9      	ldrb	r1, [r7, #14]
 800306c:	7bf8      	ldrb	r0, [r7, #15]
 800306e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8003072:	9300      	str	r3, [sp, #0]
 8003074:	4613      	mov	r3, r2
 8003076:	2220      	movs	r2, #32
 8003078:	f7ff ff19 	bl	8002eae <OLED_PrintASCIIChar>
        x += font->ascii->w;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	785a      	ldrb	r2, [r3, #1]
 8003082:	7bfb      	ldrb	r3, [r7, #15]
 8003084:	4413      	add	r3, r2
 8003086:	73fb      	strb	r3, [r7, #15]
        i += utf8Len;
 8003088:	7ebb      	ldrb	r3, [r7, #26]
 800308a:	b29a      	uxth	r2, r3
 800308c:	8bfb      	ldrh	r3, [r7, #30]
 800308e:	4413      	add	r3, r2
 8003090:	83fb      	strh	r3, [r7, #30]
  while (str[i])
 8003092:	8bfb      	ldrh	r3, [r7, #30]
 8003094:	68ba      	ldr	r2, [r7, #8]
 8003096:	4413      	add	r3, r2
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	2b00      	cmp	r3, #0
 800309c:	f47f af7b 	bne.w	8002f96 <OLED_PrintString+0x36>
      }
    }
  }
}
 80030a0:	e000      	b.n	80030a4 <OLED_PrintString+0x144>
      break; // 有问题的UTF-8编码
 80030a2:	bf00      	nop
}
 80030a4:	bf00      	nop
 80030a6:	3720      	adds	r7, #32
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bdb0      	pop	{r4, r5, r7, pc}

080030ac <Set_motor_pwmL>:
#include "pidspeed.h"

void Set_motor_pwmL(float pwm){
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	ed87 0a01 	vstr	s0, [r7, #4]
	if(pwm<0)
 80030b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80030ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80030be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030c2:	d517      	bpl.n	80030f4 <Set_motor_pwmL+0x48>
	{HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, ENABLE);
 80030c4:	2201      	movs	r2, #1
 80030c6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80030ca:	481b      	ldr	r0, [pc, #108]	@ (8003138 <Set_motor_pwmL+0x8c>)
 80030cc:	f001 f8ce 	bl	800426c <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, DISABLE);
 80030d0:	2200      	movs	r2, #0
 80030d2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80030d6:	4818      	ldr	r0, [pc, #96]	@ (8003138 <Set_motor_pwmL+0x8c>)
 80030d8:	f001 f8c8 	bl	800426c <HAL_GPIO_WritePin>
	 __HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,-pwm);
 80030dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80030e0:	eef1 7a67 	vneg.f32	s15, s15
 80030e4:	4b15      	ldr	r3, [pc, #84]	@ (800313c <Set_motor_pwmL+0x90>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030ec:	ee17 2a90 	vmov	r2, s15
 80030f0:	635a      	str	r2, [r3, #52]	@ 0x34
	else if(pwm>=0){
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, DISABLE);
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, ENABLE);
	 __HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,pwm);
	}
}
 80030f2:	e01c      	b.n	800312e <Set_motor_pwmL+0x82>
	else if(pwm>=0){
 80030f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80030f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80030fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003100:	da00      	bge.n	8003104 <Set_motor_pwmL+0x58>
}
 8003102:	e014      	b.n	800312e <Set_motor_pwmL+0x82>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, DISABLE);
 8003104:	2200      	movs	r2, #0
 8003106:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800310a:	480b      	ldr	r0, [pc, #44]	@ (8003138 <Set_motor_pwmL+0x8c>)
 800310c:	f001 f8ae 	bl	800426c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, ENABLE);
 8003110:	2201      	movs	r2, #1
 8003112:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003116:	4808      	ldr	r0, [pc, #32]	@ (8003138 <Set_motor_pwmL+0x8c>)
 8003118:	f001 f8a8 	bl	800426c <HAL_GPIO_WritePin>
	 __HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,pwm);
 800311c:	4b07      	ldr	r3, [pc, #28]	@ (800313c <Set_motor_pwmL+0x90>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	edd7 7a01 	vldr	s15, [r7, #4]
 8003124:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003128:	ee17 2a90 	vmov	r2, s15
 800312c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800312e:	bf00      	nop
 8003130:	3708      	adds	r7, #8
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	40020c00 	.word	0x40020c00
 800313c:	20000840 	.word	0x20000840

08003140 <Set_motor_pwmR>:

void Set_motor_pwmR(float pwm){
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	ed87 0a01 	vstr	s0, [r7, #4]
	if(pwm<0)
 800314a:	edd7 7a01 	vldr	s15, [r7, #4]
 800314e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003156:	d517      	bpl.n	8003188 <Set_motor_pwmR+0x48>
	{HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, DISABLE);
 8003158:	2200      	movs	r2, #0
 800315a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800315e:	481b      	ldr	r0, [pc, #108]	@ (80031cc <Set_motor_pwmR+0x8c>)
 8003160:	f001 f884 	bl	800426c <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, ENABLE);
 8003164:	2201      	movs	r2, #1
 8003166:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800316a:	4818      	ldr	r0, [pc, #96]	@ (80031cc <Set_motor_pwmR+0x8c>)
 800316c:	f001 f87e 	bl	800426c <HAL_GPIO_WritePin>
	 __HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_2,-pwm);
 8003170:	edd7 7a01 	vldr	s15, [r7, #4]
 8003174:	eef1 7a67 	vneg.f32	s15, s15
 8003178:	4b15      	ldr	r3, [pc, #84]	@ (80031d0 <Set_motor_pwmR+0x90>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003180:	ee17 2a90 	vmov	r2, s15
 8003184:	639a      	str	r2, [r3, #56]	@ 0x38
	else if(pwm>=0){
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, ENABLE);
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, DISABLE);
	 __HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_2,pwm);
	}
}
 8003186:	e01c      	b.n	80031c2 <Set_motor_pwmR+0x82>
	else if(pwm>=0){
 8003188:	edd7 7a01 	vldr	s15, [r7, #4]
 800318c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003194:	da00      	bge.n	8003198 <Set_motor_pwmR+0x58>
}
 8003196:	e014      	b.n	80031c2 <Set_motor_pwmR+0x82>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, ENABLE);
 8003198:	2201      	movs	r2, #1
 800319a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800319e:	480b      	ldr	r0, [pc, #44]	@ (80031cc <Set_motor_pwmR+0x8c>)
 80031a0:	f001 f864 	bl	800426c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, DISABLE);
 80031a4:	2200      	movs	r2, #0
 80031a6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80031aa:	4808      	ldr	r0, [pc, #32]	@ (80031cc <Set_motor_pwmR+0x8c>)
 80031ac:	f001 f85e 	bl	800426c <HAL_GPIO_WritePin>
	 __HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_2,pwm);
 80031b0:	4b07      	ldr	r3, [pc, #28]	@ (80031d0 <Set_motor_pwmR+0x90>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80031b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031bc:	ee17 2a90 	vmov	r2, s15
 80031c0:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80031c2:	bf00      	nop
 80031c4:	3708      	adds	r7, #8
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	40020c00 	.word	0x40020c00
 80031d0:	20000840 	.word	0x20000840

080031d4 <Set_motor_speedL>:


/*设置左轮速度值 pid为PID参数结构体
 * speed为期望达到速度
 */
void Set_motor_speedL(PID *pid,float speed){
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	ed87 0a00 	vstr	s0, [r7]
	pid->target_val=speed;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	683a      	ldr	r2, [r7, #0]
 80031e4:	601a      	str	r2, [r3, #0]
	Set_motor_pwmL(PosionPID_realize(pid,speednow));
 80031e6:	4b0a      	ldr	r3, [pc, #40]	@ (8003210 <Set_motor_speedL+0x3c>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	ee07 3a90 	vmov	s15, r3
 80031ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031f2:	eeb0 0a67 	vmov.f32	s0, s15
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 f84a 	bl	8003290 <PosionPID_realize>
 80031fc:	eef0 7a40 	vmov.f32	s15, s0
 8003200:	eeb0 0a67 	vmov.f32	s0, s15
 8003204:	f7ff ff52 	bl	80030ac <Set_motor_pwmL>


}
 8003208:	bf00      	nop
 800320a:	3708      	adds	r7, #8
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	20000710 	.word	0x20000710

08003214 <Set_motor_speedR>:
/*设置右轮速度值 pid为PID参数结构体
 * speed为期望达到速度
 */
void Set_motor_speedR(PID *pid,float speed){
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	ed87 0a00 	vstr	s0, [r7]
	pid->target_val=speed;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	683a      	ldr	r2, [r7, #0]
 8003224:	601a      	str	r2, [r3, #0]
	Set_motor_pwmR(PosionPID_realize(pid,speednow2));
 8003226:	4b0a      	ldr	r3, [pc, #40]	@ (8003250 <Set_motor_speedR+0x3c>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	ee07 3a90 	vmov	s15, r3
 800322e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003232:	eeb0 0a67 	vmov.f32	s0, s15
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f000 f82a 	bl	8003290 <PosionPID_realize>
 800323c:	eef0 7a40 	vmov.f32	s15, s0
 8003240:	eeb0 0a67 	vmov.f32	s0, s15
 8003244:	f7ff ff7c 	bl	8003140 <Set_motor_pwmR>

}
 8003248:	bf00      	nop
 800324a:	3708      	adds	r7, #8
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	20000718 	.word	0x20000718

08003254 <PID_param_init>:
  * @brief  PID参数初始化
  *	@note 	无
  * @retval 无
  */
void PID_param_init(PID *pid,float target_val,float Kp,float Ki,float Kd)
{
 8003254:	b480      	push	{r7}
 8003256:	b087      	sub	sp, #28
 8003258:	af00      	add	r7, sp, #0
 800325a:	6178      	str	r0, [r7, #20]
 800325c:	ed87 0a04 	vstr	s0, [r7, #16]
 8003260:	edc7 0a03 	vstr	s1, [r7, #12]
 8003264:	ed87 1a02 	vstr	s2, [r7, #8]
 8003268:	edc7 1a01 	vstr	s3, [r7, #4]
	pid->target_val=target_val;
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	601a      	str	r2, [r3, #0]
	pid->Kp = Kp;
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	68fa      	ldr	r2, [r7, #12]
 8003276:	611a      	str	r2, [r3, #16]
	pid->Ki = Ki;
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	68ba      	ldr	r2, [r7, #8]
 800327c:	615a      	str	r2, [r3, #20]
	pid->Kd = Kd;
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	619a      	str	r2, [r3, #24]


}
 8003284:	bf00      	nop
 8003286:	371c      	adds	r7, #28
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <PosionPID_realize>:
  * @param  actual_val:实际测量值
  *	@note 	无
  * @retval 通过PID计算后的输出
  */
float PosionPID_realize(PID *pid, float actual_val)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	ed87 0a00 	vstr	s0, [r7]
	/*计算目标值与实际值的误差*/
	pid->Error = pid->target_val - actual_val;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	ed93 7a00 	vldr	s14, [r3]
 80032a2:	edd7 7a00 	vldr	s15, [r7]
 80032a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	edc3 7a01 	vstr	s15, [r3, #4]
	/*积分项*/
	pid->integral += pid->Error;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	ed93 7a07 	vldr	s14, [r3, #28]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	edd3 7a01 	vldr	s15, [r3, #4]
 80032bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	edc3 7a07 	vstr	s15, [r3, #28]
	if (pid->integral > 800 / pid->Ki) {
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	ed93 7a07 	vldr	s14, [r3, #28]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	edd3 6a05 	vldr	s13, [r3, #20]
 80032d2:	ed9f 6a3d 	vldr	s12, [pc, #244]	@ 80033c8 <PosionPID_realize+0x138>
 80032d6:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80032da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80032de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032e2:	dd0a      	ble.n	80032fa <PosionPID_realize+0x6a>
	    pid->integral = 800 / pid->Ki;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	ed93 7a05 	vldr	s14, [r3, #20]
 80032ea:	eddf 6a37 	vldr	s13, [pc, #220]	@ 80033c8 <PosionPID_realize+0x138>
 80032ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	edc3 7a07 	vstr	s15, [r3, #28]
 80032f8:	e018      	b.n	800332c <PosionPID_realize+0x9c>
	} else if (pid->integral < -800 / pid->Ki) {
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	ed93 7a07 	vldr	s14, [r3, #28]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	edd3 6a05 	vldr	s13, [r3, #20]
 8003306:	ed9f 6a31 	vldr	s12, [pc, #196]	@ 80033cc <PosionPID_realize+0x13c>
 800330a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800330e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003316:	d509      	bpl.n	800332c <PosionPID_realize+0x9c>
	    pid->integral = -800 / pid->Ki;}
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	ed93 7a05 	vldr	s14, [r3, #20]
 800331e:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 80033cc <PosionPID_realize+0x13c>
 8003322:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	edc3 7a07 	vstr	s15, [r3, #28]
	/*PID算法实现*/
	pid->output_val = pid->Kp * pid->Error +
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	ed93 7a04 	vldr	s14, [r3, #16]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	edd3 7a01 	vldr	s15, [r3, #4]
 8003338:	ee27 7a27 	vmul.f32	s14, s14, s15
	                  pid->Ki * pid->integral +
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	edd3 6a05 	vldr	s13, [r3, #20]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	edd3 7a07 	vldr	s15, [r3, #28]
 8003348:	ee66 7aa7 	vmul.f32	s15, s13, s15
	pid->output_val = pid->Kp * pid->Error +
 800334c:	ee37 7a27 	vadd.f32	s14, s14, s15
	                  pid->Kd *(pid->Error -pid->LastError);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	edd3 6a06 	vldr	s13, [r3, #24]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	ed93 6a01 	vldr	s12, [r3, #4]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003362:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003366:	ee66 7aa7 	vmul.f32	s15, s13, s15
	                  pid->Ki * pid->integral +
 800336a:	ee77 7a27 	vadd.f32	s15, s14, s15
	pid->output_val = pid->Kp * pid->Error +
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	edc3 7a08 	vstr	s15, [r3, #32]
    if (pid->output_val > 500) pid->output_val = 500;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	edd3 7a08 	vldr	s15, [r3, #32]
 800337a:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 80033d0 <PosionPID_realize+0x140>
 800337e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003386:	dd02      	ble.n	800338e <PosionPID_realize+0xfe>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a12      	ldr	r2, [pc, #72]	@ (80033d4 <PosionPID_realize+0x144>)
 800338c:	621a      	str	r2, [r3, #32]
    if (pid->output_val < -500) pid->output_val = -500;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	edd3 7a08 	vldr	s15, [r3, #32]
 8003394:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80033d8 <PosionPID_realize+0x148>
 8003398:	eef4 7ac7 	vcmpe.f32	s15, s14
 800339c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033a0:	d502      	bpl.n	80033a8 <PosionPID_realize+0x118>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a0d      	ldr	r2, [pc, #52]	@ (80033dc <PosionPID_realize+0x14c>)
 80033a6:	621a      	str	r2, [r3, #32]
	/*误差传递*/
	pid-> LastError = pid->Error;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685a      	ldr	r2, [r3, #4]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	609a      	str	r2, [r3, #8]



	return pid->output_val;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a1b      	ldr	r3, [r3, #32]
 80033b4:	ee07 3a90 	vmov	s15, r3
}
 80033b8:	eeb0 0a67 	vmov.f32	s0, s15
 80033bc:	370c      	adds	r7, #12
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	44480000 	.word	0x44480000
 80033cc:	c4480000 	.word	0xc4480000
 80033d0:	43fa0000 	.word	0x43fa0000
 80033d4:	43fa0000 	.word	0x43fa0000
 80033d8:	c3fa0000 	.word	0xc3fa0000
 80033dc:	c3fa0000 	.word	0xc3fa0000

080033e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80033e4:	4b0e      	ldr	r3, [pc, #56]	@ (8003420 <HAL_Init+0x40>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a0d      	ldr	r2, [pc, #52]	@ (8003420 <HAL_Init+0x40>)
 80033ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80033ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80033f0:	4b0b      	ldr	r3, [pc, #44]	@ (8003420 <HAL_Init+0x40>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a0a      	ldr	r2, [pc, #40]	@ (8003420 <HAL_Init+0x40>)
 80033f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80033fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80033fc:	4b08      	ldr	r3, [pc, #32]	@ (8003420 <HAL_Init+0x40>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a07      	ldr	r2, [pc, #28]	@ (8003420 <HAL_Init+0x40>)
 8003402:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003406:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003408:	2003      	movs	r0, #3
 800340a:	f000 f94f 	bl	80036ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800340e:	2000      	movs	r0, #0
 8003410:	f000 f808 	bl	8003424 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003414:	f7fe fb22 	bl	8001a5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	40023c00 	.word	0x40023c00

08003424 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800342c:	4b12      	ldr	r3, [pc, #72]	@ (8003478 <HAL_InitTick+0x54>)
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	4b12      	ldr	r3, [pc, #72]	@ (800347c <HAL_InitTick+0x58>)
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	4619      	mov	r1, r3
 8003436:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800343a:	fbb3 f3f1 	udiv	r3, r3, r1
 800343e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003442:	4618      	mov	r0, r3
 8003444:	f000 f967 	bl	8003716 <HAL_SYSTICK_Config>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d001      	beq.n	8003452 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e00e      	b.n	8003470 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2b0f      	cmp	r3, #15
 8003456:	d80a      	bhi.n	800346e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003458:	2200      	movs	r2, #0
 800345a:	6879      	ldr	r1, [r7, #4]
 800345c:	f04f 30ff 	mov.w	r0, #4294967295
 8003460:	f000 f92f 	bl	80036c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003464:	4a06      	ldr	r2, [pc, #24]	@ (8003480 <HAL_InitTick+0x5c>)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800346a:	2300      	movs	r3, #0
 800346c:	e000      	b.n	8003470 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
}
 8003470:	4618      	mov	r0, r3
 8003472:	3708      	adds	r7, #8
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	2000001c 	.word	0x2000001c
 800347c:	20000024 	.word	0x20000024
 8003480:	20000020 	.word	0x20000020

08003484 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003484:	b480      	push	{r7}
 8003486:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003488:	4b06      	ldr	r3, [pc, #24]	@ (80034a4 <HAL_IncTick+0x20>)
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	461a      	mov	r2, r3
 800348e:	4b06      	ldr	r3, [pc, #24]	@ (80034a8 <HAL_IncTick+0x24>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4413      	add	r3, r2
 8003494:	4a04      	ldr	r2, [pc, #16]	@ (80034a8 <HAL_IncTick+0x24>)
 8003496:	6013      	str	r3, [r2, #0]
}
 8003498:	bf00      	nop
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	20000024 	.word	0x20000024
 80034a8:	20000f24 	.word	0x20000f24

080034ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034ac:	b480      	push	{r7}
 80034ae:	af00      	add	r7, sp, #0
  return uwTick;
 80034b0:	4b03      	ldr	r3, [pc, #12]	@ (80034c0 <HAL_GetTick+0x14>)
 80034b2:	681b      	ldr	r3, [r3, #0]
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	20000f24 	.word	0x20000f24

080034c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80034cc:	f7ff ffee 	bl	80034ac <HAL_GetTick>
 80034d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034dc:	d005      	beq.n	80034ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80034de:	4b0a      	ldr	r3, [pc, #40]	@ (8003508 <HAL_Delay+0x44>)
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	461a      	mov	r2, r3
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	4413      	add	r3, r2
 80034e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80034ea:	bf00      	nop
 80034ec:	f7ff ffde 	bl	80034ac <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	68fa      	ldr	r2, [r7, #12]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d8f7      	bhi.n	80034ec <HAL_Delay+0x28>
  {
  }
}
 80034fc:	bf00      	nop
 80034fe:	bf00      	nop
 8003500:	3710      	adds	r7, #16
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	20000024 	.word	0x20000024

0800350c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800350c:	b480      	push	{r7}
 800350e:	b085      	sub	sp, #20
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f003 0307 	and.w	r3, r3, #7
 800351a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800351c:	4b0c      	ldr	r3, [pc, #48]	@ (8003550 <__NVIC_SetPriorityGrouping+0x44>)
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003522:	68ba      	ldr	r2, [r7, #8]
 8003524:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003528:	4013      	ands	r3, r2
 800352a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003534:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003538:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800353c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800353e:	4a04      	ldr	r2, [pc, #16]	@ (8003550 <__NVIC_SetPriorityGrouping+0x44>)
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	60d3      	str	r3, [r2, #12]
}
 8003544:	bf00      	nop
 8003546:	3714      	adds	r7, #20
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr
 8003550:	e000ed00 	.word	0xe000ed00

08003554 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003554:	b480      	push	{r7}
 8003556:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003558:	4b04      	ldr	r3, [pc, #16]	@ (800356c <__NVIC_GetPriorityGrouping+0x18>)
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	0a1b      	lsrs	r3, r3, #8
 800355e:	f003 0307 	and.w	r3, r3, #7
}
 8003562:	4618      	mov	r0, r3
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr
 800356c:	e000ed00 	.word	0xe000ed00

08003570 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	4603      	mov	r3, r0
 8003578:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800357a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800357e:	2b00      	cmp	r3, #0
 8003580:	db0b      	blt.n	800359a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003582:	79fb      	ldrb	r3, [r7, #7]
 8003584:	f003 021f 	and.w	r2, r3, #31
 8003588:	4907      	ldr	r1, [pc, #28]	@ (80035a8 <__NVIC_EnableIRQ+0x38>)
 800358a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800358e:	095b      	lsrs	r3, r3, #5
 8003590:	2001      	movs	r0, #1
 8003592:	fa00 f202 	lsl.w	r2, r0, r2
 8003596:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800359a:	bf00      	nop
 800359c:	370c      	adds	r7, #12
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	e000e100 	.word	0xe000e100

080035ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	4603      	mov	r3, r0
 80035b4:	6039      	str	r1, [r7, #0]
 80035b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	db0a      	blt.n	80035d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	b2da      	uxtb	r2, r3
 80035c4:	490c      	ldr	r1, [pc, #48]	@ (80035f8 <__NVIC_SetPriority+0x4c>)
 80035c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ca:	0112      	lsls	r2, r2, #4
 80035cc:	b2d2      	uxtb	r2, r2
 80035ce:	440b      	add	r3, r1
 80035d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035d4:	e00a      	b.n	80035ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	b2da      	uxtb	r2, r3
 80035da:	4908      	ldr	r1, [pc, #32]	@ (80035fc <__NVIC_SetPriority+0x50>)
 80035dc:	79fb      	ldrb	r3, [r7, #7]
 80035de:	f003 030f 	and.w	r3, r3, #15
 80035e2:	3b04      	subs	r3, #4
 80035e4:	0112      	lsls	r2, r2, #4
 80035e6:	b2d2      	uxtb	r2, r2
 80035e8:	440b      	add	r3, r1
 80035ea:	761a      	strb	r2, [r3, #24]
}
 80035ec:	bf00      	nop
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr
 80035f8:	e000e100 	.word	0xe000e100
 80035fc:	e000ed00 	.word	0xe000ed00

08003600 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003600:	b480      	push	{r7}
 8003602:	b089      	sub	sp, #36	@ 0x24
 8003604:	af00      	add	r7, sp, #0
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f003 0307 	and.w	r3, r3, #7
 8003612:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	f1c3 0307 	rsb	r3, r3, #7
 800361a:	2b04      	cmp	r3, #4
 800361c:	bf28      	it	cs
 800361e:	2304      	movcs	r3, #4
 8003620:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	3304      	adds	r3, #4
 8003626:	2b06      	cmp	r3, #6
 8003628:	d902      	bls.n	8003630 <NVIC_EncodePriority+0x30>
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	3b03      	subs	r3, #3
 800362e:	e000      	b.n	8003632 <NVIC_EncodePriority+0x32>
 8003630:	2300      	movs	r3, #0
 8003632:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003634:	f04f 32ff 	mov.w	r2, #4294967295
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	fa02 f303 	lsl.w	r3, r2, r3
 800363e:	43da      	mvns	r2, r3
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	401a      	ands	r2, r3
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003648:	f04f 31ff 	mov.w	r1, #4294967295
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	fa01 f303 	lsl.w	r3, r1, r3
 8003652:	43d9      	mvns	r1, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003658:	4313      	orrs	r3, r2
         );
}
 800365a:	4618      	mov	r0, r3
 800365c:	3724      	adds	r7, #36	@ 0x24
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
	...

08003668 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	3b01      	subs	r3, #1
 8003674:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003678:	d301      	bcc.n	800367e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800367a:	2301      	movs	r3, #1
 800367c:	e00f      	b.n	800369e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800367e:	4a0a      	ldr	r2, [pc, #40]	@ (80036a8 <SysTick_Config+0x40>)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	3b01      	subs	r3, #1
 8003684:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003686:	210f      	movs	r1, #15
 8003688:	f04f 30ff 	mov.w	r0, #4294967295
 800368c:	f7ff ff8e 	bl	80035ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003690:	4b05      	ldr	r3, [pc, #20]	@ (80036a8 <SysTick_Config+0x40>)
 8003692:	2200      	movs	r2, #0
 8003694:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003696:	4b04      	ldr	r3, [pc, #16]	@ (80036a8 <SysTick_Config+0x40>)
 8003698:	2207      	movs	r2, #7
 800369a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800369c:	2300      	movs	r3, #0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3708      	adds	r7, #8
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	e000e010 	.word	0xe000e010

080036ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f7ff ff29 	bl	800350c <__NVIC_SetPriorityGrouping>
}
 80036ba:	bf00      	nop
 80036bc:	3708      	adds	r7, #8
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}

080036c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80036c2:	b580      	push	{r7, lr}
 80036c4:	b086      	sub	sp, #24
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	4603      	mov	r3, r0
 80036ca:	60b9      	str	r1, [r7, #8]
 80036cc:	607a      	str	r2, [r7, #4]
 80036ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80036d0:	2300      	movs	r3, #0
 80036d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036d4:	f7ff ff3e 	bl	8003554 <__NVIC_GetPriorityGrouping>
 80036d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	68b9      	ldr	r1, [r7, #8]
 80036de:	6978      	ldr	r0, [r7, #20]
 80036e0:	f7ff ff8e 	bl	8003600 <NVIC_EncodePriority>
 80036e4:	4602      	mov	r2, r0
 80036e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036ea:	4611      	mov	r1, r2
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7ff ff5d 	bl	80035ac <__NVIC_SetPriority>
}
 80036f2:	bf00      	nop
 80036f4:	3718      	adds	r7, #24
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}

080036fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036fa:	b580      	push	{r7, lr}
 80036fc:	b082      	sub	sp, #8
 80036fe:	af00      	add	r7, sp, #0
 8003700:	4603      	mov	r3, r0
 8003702:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003704:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003708:	4618      	mov	r0, r3
 800370a:	f7ff ff31 	bl	8003570 <__NVIC_EnableIRQ>
}
 800370e:	bf00      	nop
 8003710:	3708      	adds	r7, #8
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}

08003716 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003716:	b580      	push	{r7, lr}
 8003718:	b082      	sub	sp, #8
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f7ff ffa2 	bl	8003668 <SysTick_Config>
 8003724:	4603      	mov	r3, r0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3708      	adds	r7, #8
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
	...

08003730 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b086      	sub	sp, #24
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003738:	2300      	movs	r3, #0
 800373a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800373c:	f7ff feb6 	bl	80034ac <HAL_GetTick>
 8003740:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d101      	bne.n	800374c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e099      	b.n	8003880 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2202      	movs	r2, #2
 8003750:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f022 0201 	bic.w	r2, r2, #1
 800376a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800376c:	e00f      	b.n	800378e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800376e:	f7ff fe9d 	bl	80034ac <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	2b05      	cmp	r3, #5
 800377a:	d908      	bls.n	800378e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2220      	movs	r2, #32
 8003780:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2203      	movs	r2, #3
 8003786:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e078      	b.n	8003880 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0301 	and.w	r3, r3, #1
 8003798:	2b00      	cmp	r3, #0
 800379a:	d1e8      	bne.n	800376e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80037a4:	697a      	ldr	r2, [r7, #20]
 80037a6:	4b38      	ldr	r3, [pc, #224]	@ (8003888 <HAL_DMA_Init+0x158>)
 80037a8:	4013      	ands	r3, r2
 80037aa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685a      	ldr	r2, [r3, #4]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	691b      	ldr	r3, [r3, #16]
 80037c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	699b      	ldr	r3, [r3, #24]
 80037cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6a1b      	ldr	r3, [r3, #32]
 80037d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037da:	697a      	ldr	r2, [r7, #20]
 80037dc:	4313      	orrs	r3, r2
 80037de:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e4:	2b04      	cmp	r3, #4
 80037e6:	d107      	bne.n	80037f8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037f0:	4313      	orrs	r3, r2
 80037f2:	697a      	ldr	r2, [r7, #20]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	697a      	ldr	r2, [r7, #20]
 80037fe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	695b      	ldr	r3, [r3, #20]
 8003806:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	f023 0307 	bic.w	r3, r3, #7
 800380e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003814:	697a      	ldr	r2, [r7, #20]
 8003816:	4313      	orrs	r3, r2
 8003818:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800381e:	2b04      	cmp	r3, #4
 8003820:	d117      	bne.n	8003852 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003826:	697a      	ldr	r2, [r7, #20]
 8003828:	4313      	orrs	r3, r2
 800382a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003830:	2b00      	cmp	r3, #0
 8003832:	d00e      	beq.n	8003852 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f000 fb01 	bl	8003e3c <DMA_CheckFifoParam>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d008      	beq.n	8003852 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2240      	movs	r2, #64	@ 0x40
 8003844:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2201      	movs	r2, #1
 800384a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800384e:	2301      	movs	r3, #1
 8003850:	e016      	b.n	8003880 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	697a      	ldr	r2, [r7, #20]
 8003858:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 fab8 	bl	8003dd0 <DMA_CalcBaseAndBitshift>
 8003860:	4603      	mov	r3, r0
 8003862:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003868:	223f      	movs	r2, #63	@ 0x3f
 800386a:	409a      	lsls	r2, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2201      	movs	r2, #1
 800387a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800387e:	2300      	movs	r3, #0
}
 8003880:	4618      	mov	r0, r3
 8003882:	3718      	adds	r7, #24
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	f010803f 	.word	0xf010803f

0800388c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b086      	sub	sp, #24
 8003890:	af00      	add	r7, sp, #0
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	60b9      	str	r1, [r7, #8]
 8003896:	607a      	str	r2, [r7, #4]
 8003898:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800389a:	2300      	movs	r3, #0
 800389c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038a2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d101      	bne.n	80038b2 <HAL_DMA_Start_IT+0x26>
 80038ae:	2302      	movs	r3, #2
 80038b0:	e040      	b.n	8003934 <HAL_DMA_Start_IT+0xa8>
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2201      	movs	r2, #1
 80038b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d12f      	bne.n	8003926 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2202      	movs	r2, #2
 80038ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	68b9      	ldr	r1, [r7, #8]
 80038da:	68f8      	ldr	r0, [r7, #12]
 80038dc:	f000 fa4a 	bl	8003d74 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038e4:	223f      	movs	r2, #63	@ 0x3f
 80038e6:	409a      	lsls	r2, r3
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f042 0216 	orr.w	r2, r2, #22
 80038fa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003900:	2b00      	cmp	r3, #0
 8003902:	d007      	beq.n	8003914 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f042 0208 	orr.w	r2, r2, #8
 8003912:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f042 0201 	orr.w	r2, r2, #1
 8003922:	601a      	str	r2, [r3, #0]
 8003924:	e005      	b.n	8003932 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800392e:	2302      	movs	r3, #2
 8003930:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003932:	7dfb      	ldrb	r3, [r7, #23]
}
 8003934:	4618      	mov	r0, r3
 8003936:	3718      	adds	r7, #24
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003948:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800394a:	f7ff fdaf 	bl	80034ac <HAL_GetTick>
 800394e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003956:	b2db      	uxtb	r3, r3
 8003958:	2b02      	cmp	r3, #2
 800395a:	d008      	beq.n	800396e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2280      	movs	r2, #128	@ 0x80
 8003960:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e052      	b.n	8003a14 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f022 0216 	bic.w	r2, r2, #22
 800397c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	695a      	ldr	r2, [r3, #20]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800398c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003992:	2b00      	cmp	r3, #0
 8003994:	d103      	bne.n	800399e <HAL_DMA_Abort+0x62>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800399a:	2b00      	cmp	r3, #0
 800399c:	d007      	beq.n	80039ae <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f022 0208 	bic.w	r2, r2, #8
 80039ac:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f022 0201 	bic.w	r2, r2, #1
 80039bc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039be:	e013      	b.n	80039e8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80039c0:	f7ff fd74 	bl	80034ac <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	2b05      	cmp	r3, #5
 80039cc:	d90c      	bls.n	80039e8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2220      	movs	r2, #32
 80039d2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2203      	movs	r2, #3
 80039d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e015      	b.n	8003a14 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0301 	and.w	r3, r3, #1
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d1e4      	bne.n	80039c0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039fa:	223f      	movs	r2, #63	@ 0x3f
 80039fc:	409a      	lsls	r2, r3
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2201      	movs	r2, #1
 8003a06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003a12:	2300      	movs	r3, #0
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3710      	adds	r7, #16
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d004      	beq.n	8003a3a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2280      	movs	r2, #128	@ 0x80
 8003a34:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e00c      	b.n	8003a54 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2205      	movs	r2, #5
 8003a3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f022 0201 	bic.w	r2, r2, #1
 8003a50:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003a52:	2300      	movs	r3, #0
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	370c      	adds	r7, #12
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b086      	sub	sp, #24
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003a6c:	4b8e      	ldr	r3, [pc, #568]	@ (8003ca8 <HAL_DMA_IRQHandler+0x248>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a8e      	ldr	r2, [pc, #568]	@ (8003cac <HAL_DMA_IRQHandler+0x24c>)
 8003a72:	fba2 2303 	umull	r2, r3, r2, r3
 8003a76:	0a9b      	lsrs	r3, r3, #10
 8003a78:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a7e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a8a:	2208      	movs	r2, #8
 8003a8c:	409a      	lsls	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	4013      	ands	r3, r2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d01a      	beq.n	8003acc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0304 	and.w	r3, r3, #4
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d013      	beq.n	8003acc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f022 0204 	bic.w	r2, r2, #4
 8003ab2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ab8:	2208      	movs	r2, #8
 8003aba:	409a      	lsls	r2, r3
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ac4:	f043 0201 	orr.w	r2, r3, #1
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	409a      	lsls	r2, r3
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d012      	beq.n	8003b02 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	695b      	ldr	r3, [r3, #20]
 8003ae2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00b      	beq.n	8003b02 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aee:	2201      	movs	r2, #1
 8003af0:	409a      	lsls	r2, r3
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003afa:	f043 0202 	orr.w	r2, r3, #2
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b06:	2204      	movs	r2, #4
 8003b08:	409a      	lsls	r2, r3
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d012      	beq.n	8003b38 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0302 	and.w	r3, r3, #2
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d00b      	beq.n	8003b38 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b24:	2204      	movs	r2, #4
 8003b26:	409a      	lsls	r2, r3
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b30:	f043 0204 	orr.w	r2, r3, #4
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b3c:	2210      	movs	r2, #16
 8003b3e:	409a      	lsls	r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	4013      	ands	r3, r2
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d043      	beq.n	8003bd0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0308 	and.w	r3, r3, #8
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d03c      	beq.n	8003bd0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b5a:	2210      	movs	r2, #16
 8003b5c:	409a      	lsls	r2, r3
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d018      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d108      	bne.n	8003b90 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d024      	beq.n	8003bd0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	4798      	blx	r3
 8003b8e:	e01f      	b.n	8003bd0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d01b      	beq.n	8003bd0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	4798      	blx	r3
 8003ba0:	e016      	b.n	8003bd0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d107      	bne.n	8003bc0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f022 0208 	bic.w	r2, r2, #8
 8003bbe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d003      	beq.n	8003bd0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bd4:	2220      	movs	r2, #32
 8003bd6:	409a      	lsls	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	4013      	ands	r3, r2
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	f000 808f 	beq.w	8003d00 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0310 	and.w	r3, r3, #16
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	f000 8087 	beq.w	8003d00 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bf6:	2220      	movs	r2, #32
 8003bf8:	409a      	lsls	r2, r3
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	2b05      	cmp	r3, #5
 8003c08:	d136      	bne.n	8003c78 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f022 0216 	bic.w	r2, r2, #22
 8003c18:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	695a      	ldr	r2, [r3, #20]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003c28:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d103      	bne.n	8003c3a <HAL_DMA_IRQHandler+0x1da>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d007      	beq.n	8003c4a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f022 0208 	bic.w	r2, r2, #8
 8003c48:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c4e:	223f      	movs	r2, #63	@ 0x3f
 8003c50:	409a      	lsls	r2, r3
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d07e      	beq.n	8003d6c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	4798      	blx	r3
        }
        return;
 8003c76:	e079      	b.n	8003d6c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d01d      	beq.n	8003cc2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d10d      	bne.n	8003cb0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d031      	beq.n	8003d00 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	4798      	blx	r3
 8003ca4:	e02c      	b.n	8003d00 <HAL_DMA_IRQHandler+0x2a0>
 8003ca6:	bf00      	nop
 8003ca8:	2000001c 	.word	0x2000001c
 8003cac:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d023      	beq.n	8003d00 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	4798      	blx	r3
 8003cc0:	e01e      	b.n	8003d00 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d10f      	bne.n	8003cf0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f022 0210 	bic.w	r2, r2, #16
 8003cde:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d003      	beq.n	8003d00 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d032      	beq.n	8003d6e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d0c:	f003 0301 	and.w	r3, r3, #1
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d022      	beq.n	8003d5a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2205      	movs	r2, #5
 8003d18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f022 0201 	bic.w	r2, r2, #1
 8003d2a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	3301      	adds	r3, #1
 8003d30:	60bb      	str	r3, [r7, #8]
 8003d32:	697a      	ldr	r2, [r7, #20]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d307      	bcc.n	8003d48 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0301 	and.w	r3, r3, #1
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d1f2      	bne.n	8003d2c <HAL_DMA_IRQHandler+0x2cc>
 8003d46:	e000      	b.n	8003d4a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003d48:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d005      	beq.n	8003d6e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	4798      	blx	r3
 8003d6a:	e000      	b.n	8003d6e <HAL_DMA_IRQHandler+0x30e>
        return;
 8003d6c:	bf00      	nop
    }
  }
}
 8003d6e:	3718      	adds	r7, #24
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b085      	sub	sp, #20
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	60b9      	str	r1, [r7, #8]
 8003d7e:	607a      	str	r2, [r7, #4]
 8003d80:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003d90:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	683a      	ldr	r2, [r7, #0]
 8003d98:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	2b40      	cmp	r3, #64	@ 0x40
 8003da0:	d108      	bne.n	8003db4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68ba      	ldr	r2, [r7, #8]
 8003db0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003db2:	e007      	b.n	8003dc4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68ba      	ldr	r2, [r7, #8]
 8003dba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	60da      	str	r2, [r3, #12]
}
 8003dc4:	bf00      	nop
 8003dc6:	3714      	adds	r7, #20
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr

08003dd0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b085      	sub	sp, #20
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	3b10      	subs	r3, #16
 8003de0:	4a14      	ldr	r2, [pc, #80]	@ (8003e34 <DMA_CalcBaseAndBitshift+0x64>)
 8003de2:	fba2 2303 	umull	r2, r3, r2, r3
 8003de6:	091b      	lsrs	r3, r3, #4
 8003de8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003dea:	4a13      	ldr	r2, [pc, #76]	@ (8003e38 <DMA_CalcBaseAndBitshift+0x68>)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	4413      	add	r3, r2
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	461a      	mov	r2, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2b03      	cmp	r3, #3
 8003dfc:	d909      	bls.n	8003e12 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003e06:	f023 0303 	bic.w	r3, r3, #3
 8003e0a:	1d1a      	adds	r2, r3, #4
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	659a      	str	r2, [r3, #88]	@ 0x58
 8003e10:	e007      	b.n	8003e22 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003e1a:	f023 0303 	bic.w	r3, r3, #3
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3714      	adds	r7, #20
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr
 8003e32:	bf00      	nop
 8003e34:	aaaaaaab 	.word	0xaaaaaaab
 8003e38:	0800d6a0 	.word	0x0800d6a0

08003e3c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b085      	sub	sp, #20
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e44:	2300      	movs	r3, #0
 8003e46:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e4c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d11f      	bne.n	8003e96 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	2b03      	cmp	r3, #3
 8003e5a:	d856      	bhi.n	8003f0a <DMA_CheckFifoParam+0xce>
 8003e5c:	a201      	add	r2, pc, #4	@ (adr r2, 8003e64 <DMA_CheckFifoParam+0x28>)
 8003e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e62:	bf00      	nop
 8003e64:	08003e75 	.word	0x08003e75
 8003e68:	08003e87 	.word	0x08003e87
 8003e6c:	08003e75 	.word	0x08003e75
 8003e70:	08003f0b 	.word	0x08003f0b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e78:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d046      	beq.n	8003f0e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e84:	e043      	b.n	8003f0e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e8a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003e8e:	d140      	bne.n	8003f12 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e94:	e03d      	b.n	8003f12 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	699b      	ldr	r3, [r3, #24]
 8003e9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e9e:	d121      	bne.n	8003ee4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	2b03      	cmp	r3, #3
 8003ea4:	d837      	bhi.n	8003f16 <DMA_CheckFifoParam+0xda>
 8003ea6:	a201      	add	r2, pc, #4	@ (adr r2, 8003eac <DMA_CheckFifoParam+0x70>)
 8003ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eac:	08003ebd 	.word	0x08003ebd
 8003eb0:	08003ec3 	.word	0x08003ec3
 8003eb4:	08003ebd 	.word	0x08003ebd
 8003eb8:	08003ed5 	.word	0x08003ed5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	73fb      	strb	r3, [r7, #15]
      break;
 8003ec0:	e030      	b.n	8003f24 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ec6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d025      	beq.n	8003f1a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ed2:	e022      	b.n	8003f1a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ed8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003edc:	d11f      	bne.n	8003f1e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003ee2:	e01c      	b.n	8003f1e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d903      	bls.n	8003ef2 <DMA_CheckFifoParam+0xb6>
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	2b03      	cmp	r3, #3
 8003eee:	d003      	beq.n	8003ef8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003ef0:	e018      	b.n	8003f24 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	73fb      	strb	r3, [r7, #15]
      break;
 8003ef6:	e015      	b.n	8003f24 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003efc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d00e      	beq.n	8003f22 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	73fb      	strb	r3, [r7, #15]
      break;
 8003f08:	e00b      	b.n	8003f22 <DMA_CheckFifoParam+0xe6>
      break;
 8003f0a:	bf00      	nop
 8003f0c:	e00a      	b.n	8003f24 <DMA_CheckFifoParam+0xe8>
      break;
 8003f0e:	bf00      	nop
 8003f10:	e008      	b.n	8003f24 <DMA_CheckFifoParam+0xe8>
      break;
 8003f12:	bf00      	nop
 8003f14:	e006      	b.n	8003f24 <DMA_CheckFifoParam+0xe8>
      break;
 8003f16:	bf00      	nop
 8003f18:	e004      	b.n	8003f24 <DMA_CheckFifoParam+0xe8>
      break;
 8003f1a:	bf00      	nop
 8003f1c:	e002      	b.n	8003f24 <DMA_CheckFifoParam+0xe8>
      break;   
 8003f1e:	bf00      	nop
 8003f20:	e000      	b.n	8003f24 <DMA_CheckFifoParam+0xe8>
      break;
 8003f22:	bf00      	nop
    }
  } 
  
  return status; 
 8003f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3714      	adds	r7, #20
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop

08003f34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b089      	sub	sp, #36	@ 0x24
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003f42:	2300      	movs	r3, #0
 8003f44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003f46:	2300      	movs	r3, #0
 8003f48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	61fb      	str	r3, [r7, #28]
 8003f4e:	e16b      	b.n	8004228 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003f50:	2201      	movs	r2, #1
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	fa02 f303 	lsl.w	r3, r2, r3
 8003f58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	697a      	ldr	r2, [r7, #20]
 8003f60:	4013      	ands	r3, r2
 8003f62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003f64:	693a      	ldr	r2, [r7, #16]
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	f040 815a 	bne.w	8004222 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f003 0303 	and.w	r3, r3, #3
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d005      	beq.n	8003f86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	d130      	bne.n	8003fe8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	005b      	lsls	r3, r3, #1
 8003f90:	2203      	movs	r2, #3
 8003f92:	fa02 f303 	lsl.w	r3, r2, r3
 8003f96:	43db      	mvns	r3, r3
 8003f98:	69ba      	ldr	r2, [r7, #24]
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	68da      	ldr	r2, [r3, #12]
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	005b      	lsls	r3, r3, #1
 8003fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8003faa:	69ba      	ldr	r2, [r7, #24]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	69ba      	ldr	r2, [r7, #24]
 8003fb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc4:	43db      	mvns	r3, r3
 8003fc6:	69ba      	ldr	r2, [r7, #24]
 8003fc8:	4013      	ands	r3, r2
 8003fca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	091b      	lsrs	r3, r3, #4
 8003fd2:	f003 0201 	and.w	r2, r3, #1
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fdc:	69ba      	ldr	r2, [r7, #24]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	69ba      	ldr	r2, [r7, #24]
 8003fe6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	f003 0303 	and.w	r3, r3, #3
 8003ff0:	2b03      	cmp	r3, #3
 8003ff2:	d017      	beq.n	8004024 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	005b      	lsls	r3, r3, #1
 8003ffe:	2203      	movs	r2, #3
 8004000:	fa02 f303 	lsl.w	r3, r2, r3
 8004004:	43db      	mvns	r3, r3
 8004006:	69ba      	ldr	r2, [r7, #24]
 8004008:	4013      	ands	r3, r2
 800400a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	689a      	ldr	r2, [r3, #8]
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	005b      	lsls	r3, r3, #1
 8004014:	fa02 f303 	lsl.w	r3, r2, r3
 8004018:	69ba      	ldr	r2, [r7, #24]
 800401a:	4313      	orrs	r3, r2
 800401c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	69ba      	ldr	r2, [r7, #24]
 8004022:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f003 0303 	and.w	r3, r3, #3
 800402c:	2b02      	cmp	r3, #2
 800402e:	d123      	bne.n	8004078 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	08da      	lsrs	r2, r3, #3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	3208      	adds	r2, #8
 8004038:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800403c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	f003 0307 	and.w	r3, r3, #7
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	220f      	movs	r2, #15
 8004048:	fa02 f303 	lsl.w	r3, r2, r3
 800404c:	43db      	mvns	r3, r3
 800404e:	69ba      	ldr	r2, [r7, #24]
 8004050:	4013      	ands	r3, r2
 8004052:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	691a      	ldr	r2, [r3, #16]
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	f003 0307 	and.w	r3, r3, #7
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	fa02 f303 	lsl.w	r3, r2, r3
 8004064:	69ba      	ldr	r2, [r7, #24]
 8004066:	4313      	orrs	r3, r2
 8004068:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	08da      	lsrs	r2, r3, #3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	3208      	adds	r2, #8
 8004072:	69b9      	ldr	r1, [r7, #24]
 8004074:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	005b      	lsls	r3, r3, #1
 8004082:	2203      	movs	r2, #3
 8004084:	fa02 f303 	lsl.w	r3, r2, r3
 8004088:	43db      	mvns	r3, r3
 800408a:	69ba      	ldr	r2, [r7, #24]
 800408c:	4013      	ands	r3, r2
 800408e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f003 0203 	and.w	r2, r3, #3
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	005b      	lsls	r3, r3, #1
 800409c:	fa02 f303 	lsl.w	r3, r2, r3
 80040a0:	69ba      	ldr	r2, [r7, #24]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	69ba      	ldr	r2, [r7, #24]
 80040aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	f000 80b4 	beq.w	8004222 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040ba:	2300      	movs	r3, #0
 80040bc:	60fb      	str	r3, [r7, #12]
 80040be:	4b60      	ldr	r3, [pc, #384]	@ (8004240 <HAL_GPIO_Init+0x30c>)
 80040c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040c2:	4a5f      	ldr	r2, [pc, #380]	@ (8004240 <HAL_GPIO_Init+0x30c>)
 80040c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80040c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80040ca:	4b5d      	ldr	r3, [pc, #372]	@ (8004240 <HAL_GPIO_Init+0x30c>)
 80040cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80040d2:	60fb      	str	r3, [r7, #12]
 80040d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80040d6:	4a5b      	ldr	r2, [pc, #364]	@ (8004244 <HAL_GPIO_Init+0x310>)
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	089b      	lsrs	r3, r3, #2
 80040dc:	3302      	adds	r3, #2
 80040de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	f003 0303 	and.w	r3, r3, #3
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	220f      	movs	r2, #15
 80040ee:	fa02 f303 	lsl.w	r3, r2, r3
 80040f2:	43db      	mvns	r3, r3
 80040f4:	69ba      	ldr	r2, [r7, #24]
 80040f6:	4013      	ands	r3, r2
 80040f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a52      	ldr	r2, [pc, #328]	@ (8004248 <HAL_GPIO_Init+0x314>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d02b      	beq.n	800415a <HAL_GPIO_Init+0x226>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a51      	ldr	r2, [pc, #324]	@ (800424c <HAL_GPIO_Init+0x318>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d025      	beq.n	8004156 <HAL_GPIO_Init+0x222>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4a50      	ldr	r2, [pc, #320]	@ (8004250 <HAL_GPIO_Init+0x31c>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d01f      	beq.n	8004152 <HAL_GPIO_Init+0x21e>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4a4f      	ldr	r2, [pc, #316]	@ (8004254 <HAL_GPIO_Init+0x320>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d019      	beq.n	800414e <HAL_GPIO_Init+0x21a>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a4e      	ldr	r2, [pc, #312]	@ (8004258 <HAL_GPIO_Init+0x324>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d013      	beq.n	800414a <HAL_GPIO_Init+0x216>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a4d      	ldr	r2, [pc, #308]	@ (800425c <HAL_GPIO_Init+0x328>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d00d      	beq.n	8004146 <HAL_GPIO_Init+0x212>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a4c      	ldr	r2, [pc, #304]	@ (8004260 <HAL_GPIO_Init+0x32c>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d007      	beq.n	8004142 <HAL_GPIO_Init+0x20e>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a4b      	ldr	r2, [pc, #300]	@ (8004264 <HAL_GPIO_Init+0x330>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d101      	bne.n	800413e <HAL_GPIO_Init+0x20a>
 800413a:	2307      	movs	r3, #7
 800413c:	e00e      	b.n	800415c <HAL_GPIO_Init+0x228>
 800413e:	2308      	movs	r3, #8
 8004140:	e00c      	b.n	800415c <HAL_GPIO_Init+0x228>
 8004142:	2306      	movs	r3, #6
 8004144:	e00a      	b.n	800415c <HAL_GPIO_Init+0x228>
 8004146:	2305      	movs	r3, #5
 8004148:	e008      	b.n	800415c <HAL_GPIO_Init+0x228>
 800414a:	2304      	movs	r3, #4
 800414c:	e006      	b.n	800415c <HAL_GPIO_Init+0x228>
 800414e:	2303      	movs	r3, #3
 8004150:	e004      	b.n	800415c <HAL_GPIO_Init+0x228>
 8004152:	2302      	movs	r3, #2
 8004154:	e002      	b.n	800415c <HAL_GPIO_Init+0x228>
 8004156:	2301      	movs	r3, #1
 8004158:	e000      	b.n	800415c <HAL_GPIO_Init+0x228>
 800415a:	2300      	movs	r3, #0
 800415c:	69fa      	ldr	r2, [r7, #28]
 800415e:	f002 0203 	and.w	r2, r2, #3
 8004162:	0092      	lsls	r2, r2, #2
 8004164:	4093      	lsls	r3, r2
 8004166:	69ba      	ldr	r2, [r7, #24]
 8004168:	4313      	orrs	r3, r2
 800416a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800416c:	4935      	ldr	r1, [pc, #212]	@ (8004244 <HAL_GPIO_Init+0x310>)
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	089b      	lsrs	r3, r3, #2
 8004172:	3302      	adds	r3, #2
 8004174:	69ba      	ldr	r2, [r7, #24]
 8004176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800417a:	4b3b      	ldr	r3, [pc, #236]	@ (8004268 <HAL_GPIO_Init+0x334>)
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	43db      	mvns	r3, r3
 8004184:	69ba      	ldr	r2, [r7, #24]
 8004186:	4013      	ands	r3, r2
 8004188:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d003      	beq.n	800419e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004196:	69ba      	ldr	r2, [r7, #24]
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	4313      	orrs	r3, r2
 800419c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800419e:	4a32      	ldr	r2, [pc, #200]	@ (8004268 <HAL_GPIO_Init+0x334>)
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80041a4:	4b30      	ldr	r3, [pc, #192]	@ (8004268 <HAL_GPIO_Init+0x334>)
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	43db      	mvns	r3, r3
 80041ae:	69ba      	ldr	r2, [r7, #24]
 80041b0:	4013      	ands	r3, r2
 80041b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d003      	beq.n	80041c8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80041c0:	69ba      	ldr	r2, [r7, #24]
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80041c8:	4a27      	ldr	r2, [pc, #156]	@ (8004268 <HAL_GPIO_Init+0x334>)
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80041ce:	4b26      	ldr	r3, [pc, #152]	@ (8004268 <HAL_GPIO_Init+0x334>)
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	43db      	mvns	r3, r3
 80041d8:	69ba      	ldr	r2, [r7, #24]
 80041da:	4013      	ands	r3, r2
 80041dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d003      	beq.n	80041f2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80041ea:	69ba      	ldr	r2, [r7, #24]
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80041f2:	4a1d      	ldr	r2, [pc, #116]	@ (8004268 <HAL_GPIO_Init+0x334>)
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80041f8:	4b1b      	ldr	r3, [pc, #108]	@ (8004268 <HAL_GPIO_Init+0x334>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	43db      	mvns	r3, r3
 8004202:	69ba      	ldr	r2, [r7, #24]
 8004204:	4013      	ands	r3, r2
 8004206:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d003      	beq.n	800421c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004214:	69ba      	ldr	r2, [r7, #24]
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	4313      	orrs	r3, r2
 800421a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800421c:	4a12      	ldr	r2, [pc, #72]	@ (8004268 <HAL_GPIO_Init+0x334>)
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	3301      	adds	r3, #1
 8004226:	61fb      	str	r3, [r7, #28]
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	2b0f      	cmp	r3, #15
 800422c:	f67f ae90 	bls.w	8003f50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004230:	bf00      	nop
 8004232:	bf00      	nop
 8004234:	3724      	adds	r7, #36	@ 0x24
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	40023800 	.word	0x40023800
 8004244:	40013800 	.word	0x40013800
 8004248:	40020000 	.word	0x40020000
 800424c:	40020400 	.word	0x40020400
 8004250:	40020800 	.word	0x40020800
 8004254:	40020c00 	.word	0x40020c00
 8004258:	40021000 	.word	0x40021000
 800425c:	40021400 	.word	0x40021400
 8004260:	40021800 	.word	0x40021800
 8004264:	40021c00 	.word	0x40021c00
 8004268:	40013c00 	.word	0x40013c00

0800426c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	460b      	mov	r3, r1
 8004276:	807b      	strh	r3, [r7, #2]
 8004278:	4613      	mov	r3, r2
 800427a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800427c:	787b      	ldrb	r3, [r7, #1]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d003      	beq.n	800428a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004282:	887a      	ldrh	r2, [r7, #2]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004288:	e003      	b.n	8004292 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800428a:	887b      	ldrh	r3, [r7, #2]
 800428c:	041a      	lsls	r2, r3, #16
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	619a      	str	r2, [r3, #24]
}
 8004292:	bf00      	nop
 8004294:	370c      	adds	r7, #12
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr
	...

080042a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d101      	bne.n	80042b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e12b      	b.n	800450a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d106      	bne.n	80042cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f7fc ffae 	bl	8001228 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2224      	movs	r2, #36	@ 0x24
 80042d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f022 0201 	bic.w	r2, r2, #1
 80042e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80042f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004302:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004304:	f001 f89a 	bl	800543c <HAL_RCC_GetPCLK1Freq>
 8004308:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	4a81      	ldr	r2, [pc, #516]	@ (8004514 <HAL_I2C_Init+0x274>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d807      	bhi.n	8004324 <HAL_I2C_Init+0x84>
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	4a80      	ldr	r2, [pc, #512]	@ (8004518 <HAL_I2C_Init+0x278>)
 8004318:	4293      	cmp	r3, r2
 800431a:	bf94      	ite	ls
 800431c:	2301      	movls	r3, #1
 800431e:	2300      	movhi	r3, #0
 8004320:	b2db      	uxtb	r3, r3
 8004322:	e006      	b.n	8004332 <HAL_I2C_Init+0x92>
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	4a7d      	ldr	r2, [pc, #500]	@ (800451c <HAL_I2C_Init+0x27c>)
 8004328:	4293      	cmp	r3, r2
 800432a:	bf94      	ite	ls
 800432c:	2301      	movls	r3, #1
 800432e:	2300      	movhi	r3, #0
 8004330:	b2db      	uxtb	r3, r3
 8004332:	2b00      	cmp	r3, #0
 8004334:	d001      	beq.n	800433a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e0e7      	b.n	800450a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	4a78      	ldr	r2, [pc, #480]	@ (8004520 <HAL_I2C_Init+0x280>)
 800433e:	fba2 2303 	umull	r2, r3, r2, r3
 8004342:	0c9b      	lsrs	r3, r3, #18
 8004344:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68ba      	ldr	r2, [r7, #8]
 8004356:	430a      	orrs	r2, r1
 8004358:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	6a1b      	ldr	r3, [r3, #32]
 8004360:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	4a6a      	ldr	r2, [pc, #424]	@ (8004514 <HAL_I2C_Init+0x274>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d802      	bhi.n	8004374 <HAL_I2C_Init+0xd4>
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	3301      	adds	r3, #1
 8004372:	e009      	b.n	8004388 <HAL_I2C_Init+0xe8>
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800437a:	fb02 f303 	mul.w	r3, r2, r3
 800437e:	4a69      	ldr	r2, [pc, #420]	@ (8004524 <HAL_I2C_Init+0x284>)
 8004380:	fba2 2303 	umull	r2, r3, r2, r3
 8004384:	099b      	lsrs	r3, r3, #6
 8004386:	3301      	adds	r3, #1
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	6812      	ldr	r2, [r2, #0]
 800438c:	430b      	orrs	r3, r1
 800438e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	69db      	ldr	r3, [r3, #28]
 8004396:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800439a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	495c      	ldr	r1, [pc, #368]	@ (8004514 <HAL_I2C_Init+0x274>)
 80043a4:	428b      	cmp	r3, r1
 80043a6:	d819      	bhi.n	80043dc <HAL_I2C_Init+0x13c>
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	1e59      	subs	r1, r3, #1
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	005b      	lsls	r3, r3, #1
 80043b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80043b6:	1c59      	adds	r1, r3, #1
 80043b8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80043bc:	400b      	ands	r3, r1
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d00a      	beq.n	80043d8 <HAL_I2C_Init+0x138>
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	1e59      	subs	r1, r3, #1
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	005b      	lsls	r3, r3, #1
 80043cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80043d0:	3301      	adds	r3, #1
 80043d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043d6:	e051      	b.n	800447c <HAL_I2C_Init+0x1dc>
 80043d8:	2304      	movs	r3, #4
 80043da:	e04f      	b.n	800447c <HAL_I2C_Init+0x1dc>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d111      	bne.n	8004408 <HAL_I2C_Init+0x168>
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	1e58      	subs	r0, r3, #1
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6859      	ldr	r1, [r3, #4]
 80043ec:	460b      	mov	r3, r1
 80043ee:	005b      	lsls	r3, r3, #1
 80043f0:	440b      	add	r3, r1
 80043f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80043f6:	3301      	adds	r3, #1
 80043f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	bf0c      	ite	eq
 8004400:	2301      	moveq	r3, #1
 8004402:	2300      	movne	r3, #0
 8004404:	b2db      	uxtb	r3, r3
 8004406:	e012      	b.n	800442e <HAL_I2C_Init+0x18e>
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	1e58      	subs	r0, r3, #1
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6859      	ldr	r1, [r3, #4]
 8004410:	460b      	mov	r3, r1
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	440b      	add	r3, r1
 8004416:	0099      	lsls	r1, r3, #2
 8004418:	440b      	add	r3, r1
 800441a:	fbb0 f3f3 	udiv	r3, r0, r3
 800441e:	3301      	adds	r3, #1
 8004420:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004424:	2b00      	cmp	r3, #0
 8004426:	bf0c      	ite	eq
 8004428:	2301      	moveq	r3, #1
 800442a:	2300      	movne	r3, #0
 800442c:	b2db      	uxtb	r3, r3
 800442e:	2b00      	cmp	r3, #0
 8004430:	d001      	beq.n	8004436 <HAL_I2C_Init+0x196>
 8004432:	2301      	movs	r3, #1
 8004434:	e022      	b.n	800447c <HAL_I2C_Init+0x1dc>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d10e      	bne.n	800445c <HAL_I2C_Init+0x1bc>
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	1e58      	subs	r0, r3, #1
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6859      	ldr	r1, [r3, #4]
 8004446:	460b      	mov	r3, r1
 8004448:	005b      	lsls	r3, r3, #1
 800444a:	440b      	add	r3, r1
 800444c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004450:	3301      	adds	r3, #1
 8004452:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004456:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800445a:	e00f      	b.n	800447c <HAL_I2C_Init+0x1dc>
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	1e58      	subs	r0, r3, #1
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6859      	ldr	r1, [r3, #4]
 8004464:	460b      	mov	r3, r1
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	440b      	add	r3, r1
 800446a:	0099      	lsls	r1, r3, #2
 800446c:	440b      	add	r3, r1
 800446e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004472:	3301      	adds	r3, #1
 8004474:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004478:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800447c:	6879      	ldr	r1, [r7, #4]
 800447e:	6809      	ldr	r1, [r1, #0]
 8004480:	4313      	orrs	r3, r2
 8004482:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	69da      	ldr	r2, [r3, #28]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a1b      	ldr	r3, [r3, #32]
 8004496:	431a      	orrs	r2, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	430a      	orrs	r2, r1
 800449e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80044aa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	6911      	ldr	r1, [r2, #16]
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	68d2      	ldr	r2, [r2, #12]
 80044b6:	4311      	orrs	r1, r2
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	6812      	ldr	r2, [r2, #0]
 80044bc:	430b      	orrs	r3, r1
 80044be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	695a      	ldr	r2, [r3, #20]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	431a      	orrs	r2, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	430a      	orrs	r2, r1
 80044da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f042 0201 	orr.w	r2, r2, #1
 80044ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2220      	movs	r2, #32
 80044f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004508:	2300      	movs	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	3710      	adds	r7, #16
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	000186a0 	.word	0x000186a0
 8004518:	001e847f 	.word	0x001e847f
 800451c:	003d08ff 	.word	0x003d08ff
 8004520:	431bde83 	.word	0x431bde83
 8004524:	10624dd3 	.word	0x10624dd3

08004528 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b088      	sub	sp, #32
 800452c:	af02      	add	r7, sp, #8
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	607a      	str	r2, [r7, #4]
 8004532:	461a      	mov	r2, r3
 8004534:	460b      	mov	r3, r1
 8004536:	817b      	strh	r3, [r7, #10]
 8004538:	4613      	mov	r3, r2
 800453a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800453c:	f7fe ffb6 	bl	80034ac <HAL_GetTick>
 8004540:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004548:	b2db      	uxtb	r3, r3
 800454a:	2b20      	cmp	r3, #32
 800454c:	f040 80e0 	bne.w	8004710 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	9300      	str	r3, [sp, #0]
 8004554:	2319      	movs	r3, #25
 8004556:	2201      	movs	r2, #1
 8004558:	4970      	ldr	r1, [pc, #448]	@ (800471c <HAL_I2C_Master_Transmit+0x1f4>)
 800455a:	68f8      	ldr	r0, [r7, #12]
 800455c:	f000 f964 	bl	8004828 <I2C_WaitOnFlagUntilTimeout>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d001      	beq.n	800456a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004566:	2302      	movs	r3, #2
 8004568:	e0d3      	b.n	8004712 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004570:	2b01      	cmp	r3, #1
 8004572:	d101      	bne.n	8004578 <HAL_I2C_Master_Transmit+0x50>
 8004574:	2302      	movs	r3, #2
 8004576:	e0cc      	b.n	8004712 <HAL_I2C_Master_Transmit+0x1ea>
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0301 	and.w	r3, r3, #1
 800458a:	2b01      	cmp	r3, #1
 800458c:	d007      	beq.n	800459e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f042 0201 	orr.w	r2, r2, #1
 800459c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80045ac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2221      	movs	r2, #33	@ 0x21
 80045b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2210      	movs	r2, #16
 80045ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2200      	movs	r2, #0
 80045c2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	893a      	ldrh	r2, [r7, #8]
 80045ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045d4:	b29a      	uxth	r2, r3
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	4a50      	ldr	r2, [pc, #320]	@ (8004720 <HAL_I2C_Master_Transmit+0x1f8>)
 80045de:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80045e0:	8979      	ldrh	r1, [r7, #10]
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	6a3a      	ldr	r2, [r7, #32]
 80045e6:	68f8      	ldr	r0, [r7, #12]
 80045e8:	f000 f89c 	bl	8004724 <I2C_MasterRequestWrite>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d001      	beq.n	80045f6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e08d      	b.n	8004712 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045f6:	2300      	movs	r3, #0
 80045f8:	613b      	str	r3, [r7, #16]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	695b      	ldr	r3, [r3, #20]
 8004600:	613b      	str	r3, [r7, #16]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	699b      	ldr	r3, [r3, #24]
 8004608:	613b      	str	r3, [r7, #16]
 800460a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800460c:	e066      	b.n	80046dc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800460e:	697a      	ldr	r2, [r7, #20]
 8004610:	6a39      	ldr	r1, [r7, #32]
 8004612:	68f8      	ldr	r0, [r7, #12]
 8004614:	f000 fa22 	bl	8004a5c <I2C_WaitOnTXEFlagUntilTimeout>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d00d      	beq.n	800463a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004622:	2b04      	cmp	r3, #4
 8004624:	d107      	bne.n	8004636 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004634:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e06b      	b.n	8004712 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800463e:	781a      	ldrb	r2, [r3, #0]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800464a:	1c5a      	adds	r2, r3, #1
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004654:	b29b      	uxth	r3, r3
 8004656:	3b01      	subs	r3, #1
 8004658:	b29a      	uxth	r2, r3
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004662:	3b01      	subs	r3, #1
 8004664:	b29a      	uxth	r2, r3
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	695b      	ldr	r3, [r3, #20]
 8004670:	f003 0304 	and.w	r3, r3, #4
 8004674:	2b04      	cmp	r3, #4
 8004676:	d11b      	bne.n	80046b0 <HAL_I2C_Master_Transmit+0x188>
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800467c:	2b00      	cmp	r3, #0
 800467e:	d017      	beq.n	80046b0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004684:	781a      	ldrb	r2, [r3, #0]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004690:	1c5a      	adds	r2, r3, #1
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800469a:	b29b      	uxth	r3, r3
 800469c:	3b01      	subs	r3, #1
 800469e:	b29a      	uxth	r2, r3
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046a8:	3b01      	subs	r3, #1
 80046aa:	b29a      	uxth	r2, r3
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046b0:	697a      	ldr	r2, [r7, #20]
 80046b2:	6a39      	ldr	r1, [r7, #32]
 80046b4:	68f8      	ldr	r0, [r7, #12]
 80046b6:	f000 fa19 	bl	8004aec <I2C_WaitOnBTFFlagUntilTimeout>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d00d      	beq.n	80046dc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c4:	2b04      	cmp	r3, #4
 80046c6:	d107      	bne.n	80046d8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046d6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e01a      	b.n	8004712 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d194      	bne.n	800460e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2220      	movs	r2, #32
 80046f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2200      	movs	r2, #0
 8004700:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2200      	movs	r2, #0
 8004708:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800470c:	2300      	movs	r3, #0
 800470e:	e000      	b.n	8004712 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004710:	2302      	movs	r3, #2
  }
}
 8004712:	4618      	mov	r0, r3
 8004714:	3718      	adds	r7, #24
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	00100002 	.word	0x00100002
 8004720:	ffff0000 	.word	0xffff0000

08004724 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b088      	sub	sp, #32
 8004728:	af02      	add	r7, sp, #8
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	607a      	str	r2, [r7, #4]
 800472e:	603b      	str	r3, [r7, #0]
 8004730:	460b      	mov	r3, r1
 8004732:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004738:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	2b08      	cmp	r3, #8
 800473e:	d006      	beq.n	800474e <I2C_MasterRequestWrite+0x2a>
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	2b01      	cmp	r3, #1
 8004744:	d003      	beq.n	800474e <I2C_MasterRequestWrite+0x2a>
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800474c:	d108      	bne.n	8004760 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800475c:	601a      	str	r2, [r3, #0]
 800475e:	e00b      	b.n	8004778 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004764:	2b12      	cmp	r3, #18
 8004766:	d107      	bne.n	8004778 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004776:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	9300      	str	r3, [sp, #0]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004784:	68f8      	ldr	r0, [r7, #12]
 8004786:	f000 f84f 	bl	8004828 <I2C_WaitOnFlagUntilTimeout>
 800478a:	4603      	mov	r3, r0
 800478c:	2b00      	cmp	r3, #0
 800478e:	d00d      	beq.n	80047ac <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800479a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800479e:	d103      	bne.n	80047a8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80047a6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80047a8:	2303      	movs	r3, #3
 80047aa:	e035      	b.n	8004818 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	691b      	ldr	r3, [r3, #16]
 80047b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80047b4:	d108      	bne.n	80047c8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80047b6:	897b      	ldrh	r3, [r7, #10]
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	461a      	mov	r2, r3
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80047c4:	611a      	str	r2, [r3, #16]
 80047c6:	e01b      	b.n	8004800 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80047c8:	897b      	ldrh	r3, [r7, #10]
 80047ca:	11db      	asrs	r3, r3, #7
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	f003 0306 	and.w	r3, r3, #6
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	f063 030f 	orn	r3, r3, #15
 80047d8:	b2da      	uxtb	r2, r3
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	490e      	ldr	r1, [pc, #56]	@ (8004820 <I2C_MasterRequestWrite+0xfc>)
 80047e6:	68f8      	ldr	r0, [r7, #12]
 80047e8:	f000 f898 	bl	800491c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d001      	beq.n	80047f6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e010      	b.n	8004818 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80047f6:	897b      	ldrh	r3, [r7, #10]
 80047f8:	b2da      	uxtb	r2, r3
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	4907      	ldr	r1, [pc, #28]	@ (8004824 <I2C_MasterRequestWrite+0x100>)
 8004806:	68f8      	ldr	r0, [r7, #12]
 8004808:	f000 f888 	bl	800491c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800480c:	4603      	mov	r3, r0
 800480e:	2b00      	cmp	r3, #0
 8004810:	d001      	beq.n	8004816 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e000      	b.n	8004818 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004816:	2300      	movs	r3, #0
}
 8004818:	4618      	mov	r0, r3
 800481a:	3718      	adds	r7, #24
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}
 8004820:	00010008 	.word	0x00010008
 8004824:	00010002 	.word	0x00010002

08004828 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	60f8      	str	r0, [r7, #12]
 8004830:	60b9      	str	r1, [r7, #8]
 8004832:	603b      	str	r3, [r7, #0]
 8004834:	4613      	mov	r3, r2
 8004836:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004838:	e048      	b.n	80048cc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004840:	d044      	beq.n	80048cc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004842:	f7fe fe33 	bl	80034ac <HAL_GetTick>
 8004846:	4602      	mov	r2, r0
 8004848:	69bb      	ldr	r3, [r7, #24]
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	683a      	ldr	r2, [r7, #0]
 800484e:	429a      	cmp	r2, r3
 8004850:	d302      	bcc.n	8004858 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d139      	bne.n	80048cc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	0c1b      	lsrs	r3, r3, #16
 800485c:	b2db      	uxtb	r3, r3
 800485e:	2b01      	cmp	r3, #1
 8004860:	d10d      	bne.n	800487e <I2C_WaitOnFlagUntilTimeout+0x56>
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	695b      	ldr	r3, [r3, #20]
 8004868:	43da      	mvns	r2, r3
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	4013      	ands	r3, r2
 800486e:	b29b      	uxth	r3, r3
 8004870:	2b00      	cmp	r3, #0
 8004872:	bf0c      	ite	eq
 8004874:	2301      	moveq	r3, #1
 8004876:	2300      	movne	r3, #0
 8004878:	b2db      	uxtb	r3, r3
 800487a:	461a      	mov	r2, r3
 800487c:	e00c      	b.n	8004898 <I2C_WaitOnFlagUntilTimeout+0x70>
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	699b      	ldr	r3, [r3, #24]
 8004884:	43da      	mvns	r2, r3
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	4013      	ands	r3, r2
 800488a:	b29b      	uxth	r3, r3
 800488c:	2b00      	cmp	r3, #0
 800488e:	bf0c      	ite	eq
 8004890:	2301      	moveq	r3, #1
 8004892:	2300      	movne	r3, #0
 8004894:	b2db      	uxtb	r3, r3
 8004896:	461a      	mov	r2, r3
 8004898:	79fb      	ldrb	r3, [r7, #7]
 800489a:	429a      	cmp	r2, r3
 800489c:	d116      	bne.n	80048cc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2200      	movs	r2, #0
 80048a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2220      	movs	r2, #32
 80048a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048b8:	f043 0220 	orr.w	r2, r3, #32
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e023      	b.n	8004914 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	0c1b      	lsrs	r3, r3, #16
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d10d      	bne.n	80048f2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	695b      	ldr	r3, [r3, #20]
 80048dc:	43da      	mvns	r2, r3
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	4013      	ands	r3, r2
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	bf0c      	ite	eq
 80048e8:	2301      	moveq	r3, #1
 80048ea:	2300      	movne	r3, #0
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	461a      	mov	r2, r3
 80048f0:	e00c      	b.n	800490c <I2C_WaitOnFlagUntilTimeout+0xe4>
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	699b      	ldr	r3, [r3, #24]
 80048f8:	43da      	mvns	r2, r3
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	4013      	ands	r3, r2
 80048fe:	b29b      	uxth	r3, r3
 8004900:	2b00      	cmp	r3, #0
 8004902:	bf0c      	ite	eq
 8004904:	2301      	moveq	r3, #1
 8004906:	2300      	movne	r3, #0
 8004908:	b2db      	uxtb	r3, r3
 800490a:	461a      	mov	r2, r3
 800490c:	79fb      	ldrb	r3, [r7, #7]
 800490e:	429a      	cmp	r2, r3
 8004910:	d093      	beq.n	800483a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004912:	2300      	movs	r3, #0
}
 8004914:	4618      	mov	r0, r3
 8004916:	3710      	adds	r7, #16
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}

0800491c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	607a      	str	r2, [r7, #4]
 8004928:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800492a:	e071      	b.n	8004a10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	695b      	ldr	r3, [r3, #20]
 8004932:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004936:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800493a:	d123      	bne.n	8004984 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800494a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004954:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2200      	movs	r2, #0
 800495a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2220      	movs	r2, #32
 8004960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004970:	f043 0204 	orr.w	r2, r3, #4
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2200      	movs	r2, #0
 800497c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	e067      	b.n	8004a54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800498a:	d041      	beq.n	8004a10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800498c:	f7fe fd8e 	bl	80034ac <HAL_GetTick>
 8004990:	4602      	mov	r2, r0
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	429a      	cmp	r2, r3
 800499a:	d302      	bcc.n	80049a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d136      	bne.n	8004a10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	0c1b      	lsrs	r3, r3, #16
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d10c      	bne.n	80049c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	695b      	ldr	r3, [r3, #20]
 80049b2:	43da      	mvns	r2, r3
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	4013      	ands	r3, r2
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	bf14      	ite	ne
 80049be:	2301      	movne	r3, #1
 80049c0:	2300      	moveq	r3, #0
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	e00b      	b.n	80049de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	699b      	ldr	r3, [r3, #24]
 80049cc:	43da      	mvns	r2, r3
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	4013      	ands	r3, r2
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	bf14      	ite	ne
 80049d8:	2301      	movne	r3, #1
 80049da:	2300      	moveq	r3, #0
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d016      	beq.n	8004a10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2200      	movs	r2, #0
 80049e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2220      	movs	r2, #32
 80049ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2200      	movs	r2, #0
 80049f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049fc:	f043 0220 	orr.w	r2, r3, #32
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e021      	b.n	8004a54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	0c1b      	lsrs	r3, r3, #16
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d10c      	bne.n	8004a34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	695b      	ldr	r3, [r3, #20]
 8004a20:	43da      	mvns	r2, r3
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	4013      	ands	r3, r2
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	bf14      	ite	ne
 8004a2c:	2301      	movne	r3, #1
 8004a2e:	2300      	moveq	r3, #0
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	e00b      	b.n	8004a4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	699b      	ldr	r3, [r3, #24]
 8004a3a:	43da      	mvns	r2, r3
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	4013      	ands	r3, r2
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	bf14      	ite	ne
 8004a46:	2301      	movne	r3, #1
 8004a48:	2300      	moveq	r3, #0
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	f47f af6d 	bne.w	800492c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004a52:	2300      	movs	r3, #0
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3710      	adds	r7, #16
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}

08004a5c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a68:	e034      	b.n	8004ad4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a6a:	68f8      	ldr	r0, [r7, #12]
 8004a6c:	f000 f886 	bl	8004b7c <I2C_IsAcknowledgeFailed>
 8004a70:	4603      	mov	r3, r0
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d001      	beq.n	8004a7a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e034      	b.n	8004ae4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a80:	d028      	beq.n	8004ad4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a82:	f7fe fd13 	bl	80034ac <HAL_GetTick>
 8004a86:	4602      	mov	r2, r0
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	1ad3      	subs	r3, r2, r3
 8004a8c:	68ba      	ldr	r2, [r7, #8]
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d302      	bcc.n	8004a98 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d11d      	bne.n	8004ad4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	695b      	ldr	r3, [r3, #20]
 8004a9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aa2:	2b80      	cmp	r3, #128	@ 0x80
 8004aa4:	d016      	beq.n	8004ad4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2220      	movs	r2, #32
 8004ab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ac0:	f043 0220 	orr.w	r2, r3, #32
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e007      	b.n	8004ae4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	695b      	ldr	r3, [r3, #20]
 8004ada:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ade:	2b80      	cmp	r3, #128	@ 0x80
 8004ae0:	d1c3      	bne.n	8004a6a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004ae2:	2300      	movs	r3, #0
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3710      	adds	r7, #16
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b084      	sub	sp, #16
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	60b9      	str	r1, [r7, #8]
 8004af6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004af8:	e034      	b.n	8004b64 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004afa:	68f8      	ldr	r0, [r7, #12]
 8004afc:	f000 f83e 	bl	8004b7c <I2C_IsAcknowledgeFailed>
 8004b00:	4603      	mov	r3, r0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d001      	beq.n	8004b0a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e034      	b.n	8004b74 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b10:	d028      	beq.n	8004b64 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b12:	f7fe fccb 	bl	80034ac <HAL_GetTick>
 8004b16:	4602      	mov	r2, r0
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	1ad3      	subs	r3, r2, r3
 8004b1c:	68ba      	ldr	r2, [r7, #8]
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d302      	bcc.n	8004b28 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d11d      	bne.n	8004b64 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	695b      	ldr	r3, [r3, #20]
 8004b2e:	f003 0304 	and.w	r3, r3, #4
 8004b32:	2b04      	cmp	r3, #4
 8004b34:	d016      	beq.n	8004b64 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2220      	movs	r2, #32
 8004b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b50:	f043 0220 	orr.w	r2, r3, #32
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e007      	b.n	8004b74 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	695b      	ldr	r3, [r3, #20]
 8004b6a:	f003 0304 	and.w	r3, r3, #4
 8004b6e:	2b04      	cmp	r3, #4
 8004b70:	d1c3      	bne.n	8004afa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004b72:	2300      	movs	r3, #0
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3710      	adds	r7, #16
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	695b      	ldr	r3, [r3, #20]
 8004b8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b92:	d11b      	bne.n	8004bcc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004b9c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2220      	movs	r2, #32
 8004ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bb8:	f043 0204 	orr.w	r2, r3, #4
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e000      	b.n	8004bce <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004bcc:	2300      	movs	r3, #0
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	370c      	adds	r7, #12
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr
	...

08004bdc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b086      	sub	sp, #24
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d101      	bne.n	8004bee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e267      	b.n	80050be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 0301 	and.w	r3, r3, #1
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d075      	beq.n	8004ce6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004bfa:	4b88      	ldr	r3, [pc, #544]	@ (8004e1c <HAL_RCC_OscConfig+0x240>)
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	f003 030c 	and.w	r3, r3, #12
 8004c02:	2b04      	cmp	r3, #4
 8004c04:	d00c      	beq.n	8004c20 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c06:	4b85      	ldr	r3, [pc, #532]	@ (8004e1c <HAL_RCC_OscConfig+0x240>)
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004c0e:	2b08      	cmp	r3, #8
 8004c10:	d112      	bne.n	8004c38 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c12:	4b82      	ldr	r3, [pc, #520]	@ (8004e1c <HAL_RCC_OscConfig+0x240>)
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c1a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c1e:	d10b      	bne.n	8004c38 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c20:	4b7e      	ldr	r3, [pc, #504]	@ (8004e1c <HAL_RCC_OscConfig+0x240>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d05b      	beq.n	8004ce4 <HAL_RCC_OscConfig+0x108>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d157      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	e242      	b.n	80050be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c40:	d106      	bne.n	8004c50 <HAL_RCC_OscConfig+0x74>
 8004c42:	4b76      	ldr	r3, [pc, #472]	@ (8004e1c <HAL_RCC_OscConfig+0x240>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a75      	ldr	r2, [pc, #468]	@ (8004e1c <HAL_RCC_OscConfig+0x240>)
 8004c48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c4c:	6013      	str	r3, [r2, #0]
 8004c4e:	e01d      	b.n	8004c8c <HAL_RCC_OscConfig+0xb0>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c58:	d10c      	bne.n	8004c74 <HAL_RCC_OscConfig+0x98>
 8004c5a:	4b70      	ldr	r3, [pc, #448]	@ (8004e1c <HAL_RCC_OscConfig+0x240>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a6f      	ldr	r2, [pc, #444]	@ (8004e1c <HAL_RCC_OscConfig+0x240>)
 8004c60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c64:	6013      	str	r3, [r2, #0]
 8004c66:	4b6d      	ldr	r3, [pc, #436]	@ (8004e1c <HAL_RCC_OscConfig+0x240>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a6c      	ldr	r2, [pc, #432]	@ (8004e1c <HAL_RCC_OscConfig+0x240>)
 8004c6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c70:	6013      	str	r3, [r2, #0]
 8004c72:	e00b      	b.n	8004c8c <HAL_RCC_OscConfig+0xb0>
 8004c74:	4b69      	ldr	r3, [pc, #420]	@ (8004e1c <HAL_RCC_OscConfig+0x240>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a68      	ldr	r2, [pc, #416]	@ (8004e1c <HAL_RCC_OscConfig+0x240>)
 8004c7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c7e:	6013      	str	r3, [r2, #0]
 8004c80:	4b66      	ldr	r3, [pc, #408]	@ (8004e1c <HAL_RCC_OscConfig+0x240>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a65      	ldr	r2, [pc, #404]	@ (8004e1c <HAL_RCC_OscConfig+0x240>)
 8004c86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d013      	beq.n	8004cbc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c94:	f7fe fc0a 	bl	80034ac <HAL_GetTick>
 8004c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c9a:	e008      	b.n	8004cae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c9c:	f7fe fc06 	bl	80034ac <HAL_GetTick>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	2b64      	cmp	r3, #100	@ 0x64
 8004ca8:	d901      	bls.n	8004cae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e207      	b.n	80050be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cae:	4b5b      	ldr	r3, [pc, #364]	@ (8004e1c <HAL_RCC_OscConfig+0x240>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d0f0      	beq.n	8004c9c <HAL_RCC_OscConfig+0xc0>
 8004cba:	e014      	b.n	8004ce6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cbc:	f7fe fbf6 	bl	80034ac <HAL_GetTick>
 8004cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cc2:	e008      	b.n	8004cd6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cc4:	f7fe fbf2 	bl	80034ac <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	2b64      	cmp	r3, #100	@ 0x64
 8004cd0:	d901      	bls.n	8004cd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e1f3      	b.n	80050be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cd6:	4b51      	ldr	r3, [pc, #324]	@ (8004e1c <HAL_RCC_OscConfig+0x240>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d1f0      	bne.n	8004cc4 <HAL_RCC_OscConfig+0xe8>
 8004ce2:	e000      	b.n	8004ce6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ce4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 0302 	and.w	r3, r3, #2
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d063      	beq.n	8004dba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004cf2:	4b4a      	ldr	r3, [pc, #296]	@ (8004e1c <HAL_RCC_OscConfig+0x240>)
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	f003 030c 	and.w	r3, r3, #12
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00b      	beq.n	8004d16 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cfe:	4b47      	ldr	r3, [pc, #284]	@ (8004e1c <HAL_RCC_OscConfig+0x240>)
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004d06:	2b08      	cmp	r3, #8
 8004d08:	d11c      	bne.n	8004d44 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d0a:	4b44      	ldr	r3, [pc, #272]	@ (8004e1c <HAL_RCC_OscConfig+0x240>)
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d116      	bne.n	8004d44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d16:	4b41      	ldr	r3, [pc, #260]	@ (8004e1c <HAL_RCC_OscConfig+0x240>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0302 	and.w	r3, r3, #2
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d005      	beq.n	8004d2e <HAL_RCC_OscConfig+0x152>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d001      	beq.n	8004d2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e1c7      	b.n	80050be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d2e:	4b3b      	ldr	r3, [pc, #236]	@ (8004e1c <HAL_RCC_OscConfig+0x240>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	691b      	ldr	r3, [r3, #16]
 8004d3a:	00db      	lsls	r3, r3, #3
 8004d3c:	4937      	ldr	r1, [pc, #220]	@ (8004e1c <HAL_RCC_OscConfig+0x240>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d42:	e03a      	b.n	8004dba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d020      	beq.n	8004d8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d4c:	4b34      	ldr	r3, [pc, #208]	@ (8004e20 <HAL_RCC_OscConfig+0x244>)
 8004d4e:	2201      	movs	r2, #1
 8004d50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d52:	f7fe fbab 	bl	80034ac <HAL_GetTick>
 8004d56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d58:	e008      	b.n	8004d6c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d5a:	f7fe fba7 	bl	80034ac <HAL_GetTick>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	2b02      	cmp	r3, #2
 8004d66:	d901      	bls.n	8004d6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004d68:	2303      	movs	r3, #3
 8004d6a:	e1a8      	b.n	80050be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d6c:	4b2b      	ldr	r3, [pc, #172]	@ (8004e1c <HAL_RCC_OscConfig+0x240>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 0302 	and.w	r3, r3, #2
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d0f0      	beq.n	8004d5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d78:	4b28      	ldr	r3, [pc, #160]	@ (8004e1c <HAL_RCC_OscConfig+0x240>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	691b      	ldr	r3, [r3, #16]
 8004d84:	00db      	lsls	r3, r3, #3
 8004d86:	4925      	ldr	r1, [pc, #148]	@ (8004e1c <HAL_RCC_OscConfig+0x240>)
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	600b      	str	r3, [r1, #0]
 8004d8c:	e015      	b.n	8004dba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d8e:	4b24      	ldr	r3, [pc, #144]	@ (8004e20 <HAL_RCC_OscConfig+0x244>)
 8004d90:	2200      	movs	r2, #0
 8004d92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d94:	f7fe fb8a 	bl	80034ac <HAL_GetTick>
 8004d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d9a:	e008      	b.n	8004dae <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d9c:	f7fe fb86 	bl	80034ac <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	2b02      	cmp	r3, #2
 8004da8:	d901      	bls.n	8004dae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	e187      	b.n	80050be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dae:	4b1b      	ldr	r3, [pc, #108]	@ (8004e1c <HAL_RCC_OscConfig+0x240>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 0302 	and.w	r3, r3, #2
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d1f0      	bne.n	8004d9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 0308 	and.w	r3, r3, #8
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d036      	beq.n	8004e34 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	695b      	ldr	r3, [r3, #20]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d016      	beq.n	8004dfc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004dce:	4b15      	ldr	r3, [pc, #84]	@ (8004e24 <HAL_RCC_OscConfig+0x248>)
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dd4:	f7fe fb6a 	bl	80034ac <HAL_GetTick>
 8004dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dda:	e008      	b.n	8004dee <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ddc:	f7fe fb66 	bl	80034ac <HAL_GetTick>
 8004de0:	4602      	mov	r2, r0
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d901      	bls.n	8004dee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e167      	b.n	80050be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dee:	4b0b      	ldr	r3, [pc, #44]	@ (8004e1c <HAL_RCC_OscConfig+0x240>)
 8004df0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004df2:	f003 0302 	and.w	r3, r3, #2
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d0f0      	beq.n	8004ddc <HAL_RCC_OscConfig+0x200>
 8004dfa:	e01b      	b.n	8004e34 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004dfc:	4b09      	ldr	r3, [pc, #36]	@ (8004e24 <HAL_RCC_OscConfig+0x248>)
 8004dfe:	2200      	movs	r2, #0
 8004e00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e02:	f7fe fb53 	bl	80034ac <HAL_GetTick>
 8004e06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e08:	e00e      	b.n	8004e28 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e0a:	f7fe fb4f 	bl	80034ac <HAL_GetTick>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	d907      	bls.n	8004e28 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004e18:	2303      	movs	r3, #3
 8004e1a:	e150      	b.n	80050be <HAL_RCC_OscConfig+0x4e2>
 8004e1c:	40023800 	.word	0x40023800
 8004e20:	42470000 	.word	0x42470000
 8004e24:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e28:	4b88      	ldr	r3, [pc, #544]	@ (800504c <HAL_RCC_OscConfig+0x470>)
 8004e2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e2c:	f003 0302 	and.w	r3, r3, #2
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d1ea      	bne.n	8004e0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 0304 	and.w	r3, r3, #4
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	f000 8097 	beq.w	8004f70 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e42:	2300      	movs	r3, #0
 8004e44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e46:	4b81      	ldr	r3, [pc, #516]	@ (800504c <HAL_RCC_OscConfig+0x470>)
 8004e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d10f      	bne.n	8004e72 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e52:	2300      	movs	r3, #0
 8004e54:	60bb      	str	r3, [r7, #8]
 8004e56:	4b7d      	ldr	r3, [pc, #500]	@ (800504c <HAL_RCC_OscConfig+0x470>)
 8004e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e5a:	4a7c      	ldr	r2, [pc, #496]	@ (800504c <HAL_RCC_OscConfig+0x470>)
 8004e5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e60:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e62:	4b7a      	ldr	r3, [pc, #488]	@ (800504c <HAL_RCC_OscConfig+0x470>)
 8004e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e6a:	60bb      	str	r3, [r7, #8]
 8004e6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e72:	4b77      	ldr	r3, [pc, #476]	@ (8005050 <HAL_RCC_OscConfig+0x474>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d118      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e7e:	4b74      	ldr	r3, [pc, #464]	@ (8005050 <HAL_RCC_OscConfig+0x474>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a73      	ldr	r2, [pc, #460]	@ (8005050 <HAL_RCC_OscConfig+0x474>)
 8004e84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e8a:	f7fe fb0f 	bl	80034ac <HAL_GetTick>
 8004e8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e90:	e008      	b.n	8004ea4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e92:	f7fe fb0b 	bl	80034ac <HAL_GetTick>
 8004e96:	4602      	mov	r2, r0
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	1ad3      	subs	r3, r2, r3
 8004e9c:	2b02      	cmp	r3, #2
 8004e9e:	d901      	bls.n	8004ea4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004ea0:	2303      	movs	r3, #3
 8004ea2:	e10c      	b.n	80050be <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ea4:	4b6a      	ldr	r3, [pc, #424]	@ (8005050 <HAL_RCC_OscConfig+0x474>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d0f0      	beq.n	8004e92 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d106      	bne.n	8004ec6 <HAL_RCC_OscConfig+0x2ea>
 8004eb8:	4b64      	ldr	r3, [pc, #400]	@ (800504c <HAL_RCC_OscConfig+0x470>)
 8004eba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ebc:	4a63      	ldr	r2, [pc, #396]	@ (800504c <HAL_RCC_OscConfig+0x470>)
 8004ebe:	f043 0301 	orr.w	r3, r3, #1
 8004ec2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ec4:	e01c      	b.n	8004f00 <HAL_RCC_OscConfig+0x324>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	2b05      	cmp	r3, #5
 8004ecc:	d10c      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x30c>
 8004ece:	4b5f      	ldr	r3, [pc, #380]	@ (800504c <HAL_RCC_OscConfig+0x470>)
 8004ed0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ed2:	4a5e      	ldr	r2, [pc, #376]	@ (800504c <HAL_RCC_OscConfig+0x470>)
 8004ed4:	f043 0304 	orr.w	r3, r3, #4
 8004ed8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004eda:	4b5c      	ldr	r3, [pc, #368]	@ (800504c <HAL_RCC_OscConfig+0x470>)
 8004edc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ede:	4a5b      	ldr	r2, [pc, #364]	@ (800504c <HAL_RCC_OscConfig+0x470>)
 8004ee0:	f043 0301 	orr.w	r3, r3, #1
 8004ee4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ee6:	e00b      	b.n	8004f00 <HAL_RCC_OscConfig+0x324>
 8004ee8:	4b58      	ldr	r3, [pc, #352]	@ (800504c <HAL_RCC_OscConfig+0x470>)
 8004eea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eec:	4a57      	ldr	r2, [pc, #348]	@ (800504c <HAL_RCC_OscConfig+0x470>)
 8004eee:	f023 0301 	bic.w	r3, r3, #1
 8004ef2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ef4:	4b55      	ldr	r3, [pc, #340]	@ (800504c <HAL_RCC_OscConfig+0x470>)
 8004ef6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ef8:	4a54      	ldr	r2, [pc, #336]	@ (800504c <HAL_RCC_OscConfig+0x470>)
 8004efa:	f023 0304 	bic.w	r3, r3, #4
 8004efe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d015      	beq.n	8004f34 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f08:	f7fe fad0 	bl	80034ac <HAL_GetTick>
 8004f0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f0e:	e00a      	b.n	8004f26 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f10:	f7fe facc 	bl	80034ac <HAL_GetTick>
 8004f14:	4602      	mov	r2, r0
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d901      	bls.n	8004f26 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e0cb      	b.n	80050be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f26:	4b49      	ldr	r3, [pc, #292]	@ (800504c <HAL_RCC_OscConfig+0x470>)
 8004f28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f2a:	f003 0302 	and.w	r3, r3, #2
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d0ee      	beq.n	8004f10 <HAL_RCC_OscConfig+0x334>
 8004f32:	e014      	b.n	8004f5e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f34:	f7fe faba 	bl	80034ac <HAL_GetTick>
 8004f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f3a:	e00a      	b.n	8004f52 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f3c:	f7fe fab6 	bl	80034ac <HAL_GetTick>
 8004f40:	4602      	mov	r2, r0
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d901      	bls.n	8004f52 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	e0b5      	b.n	80050be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f52:	4b3e      	ldr	r3, [pc, #248]	@ (800504c <HAL_RCC_OscConfig+0x470>)
 8004f54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f56:	f003 0302 	and.w	r3, r3, #2
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d1ee      	bne.n	8004f3c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004f5e:	7dfb      	ldrb	r3, [r7, #23]
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d105      	bne.n	8004f70 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f64:	4b39      	ldr	r3, [pc, #228]	@ (800504c <HAL_RCC_OscConfig+0x470>)
 8004f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f68:	4a38      	ldr	r2, [pc, #224]	@ (800504c <HAL_RCC_OscConfig+0x470>)
 8004f6a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f6e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	699b      	ldr	r3, [r3, #24]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	f000 80a1 	beq.w	80050bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f7a:	4b34      	ldr	r3, [pc, #208]	@ (800504c <HAL_RCC_OscConfig+0x470>)
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	f003 030c 	and.w	r3, r3, #12
 8004f82:	2b08      	cmp	r3, #8
 8004f84:	d05c      	beq.n	8005040 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	699b      	ldr	r3, [r3, #24]
 8004f8a:	2b02      	cmp	r3, #2
 8004f8c:	d141      	bne.n	8005012 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f8e:	4b31      	ldr	r3, [pc, #196]	@ (8005054 <HAL_RCC_OscConfig+0x478>)
 8004f90:	2200      	movs	r2, #0
 8004f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f94:	f7fe fa8a 	bl	80034ac <HAL_GetTick>
 8004f98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f9a:	e008      	b.n	8004fae <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f9c:	f7fe fa86 	bl	80034ac <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	2b02      	cmp	r3, #2
 8004fa8:	d901      	bls.n	8004fae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004faa:	2303      	movs	r3, #3
 8004fac:	e087      	b.n	80050be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fae:	4b27      	ldr	r3, [pc, #156]	@ (800504c <HAL_RCC_OscConfig+0x470>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d1f0      	bne.n	8004f9c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	69da      	ldr	r2, [r3, #28]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a1b      	ldr	r3, [r3, #32]
 8004fc2:	431a      	orrs	r2, r3
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fc8:	019b      	lsls	r3, r3, #6
 8004fca:	431a      	orrs	r2, r3
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fd0:	085b      	lsrs	r3, r3, #1
 8004fd2:	3b01      	subs	r3, #1
 8004fd4:	041b      	lsls	r3, r3, #16
 8004fd6:	431a      	orrs	r2, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fdc:	061b      	lsls	r3, r3, #24
 8004fde:	491b      	ldr	r1, [pc, #108]	@ (800504c <HAL_RCC_OscConfig+0x470>)
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fe4:	4b1b      	ldr	r3, [pc, #108]	@ (8005054 <HAL_RCC_OscConfig+0x478>)
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fea:	f7fe fa5f 	bl	80034ac <HAL_GetTick>
 8004fee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ff0:	e008      	b.n	8005004 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ff2:	f7fe fa5b 	bl	80034ac <HAL_GetTick>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	d901      	bls.n	8005004 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	e05c      	b.n	80050be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005004:	4b11      	ldr	r3, [pc, #68]	@ (800504c <HAL_RCC_OscConfig+0x470>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800500c:	2b00      	cmp	r3, #0
 800500e:	d0f0      	beq.n	8004ff2 <HAL_RCC_OscConfig+0x416>
 8005010:	e054      	b.n	80050bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005012:	4b10      	ldr	r3, [pc, #64]	@ (8005054 <HAL_RCC_OscConfig+0x478>)
 8005014:	2200      	movs	r2, #0
 8005016:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005018:	f7fe fa48 	bl	80034ac <HAL_GetTick>
 800501c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800501e:	e008      	b.n	8005032 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005020:	f7fe fa44 	bl	80034ac <HAL_GetTick>
 8005024:	4602      	mov	r2, r0
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	2b02      	cmp	r3, #2
 800502c:	d901      	bls.n	8005032 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	e045      	b.n	80050be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005032:	4b06      	ldr	r3, [pc, #24]	@ (800504c <HAL_RCC_OscConfig+0x470>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800503a:	2b00      	cmp	r3, #0
 800503c:	d1f0      	bne.n	8005020 <HAL_RCC_OscConfig+0x444>
 800503e:	e03d      	b.n	80050bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	699b      	ldr	r3, [r3, #24]
 8005044:	2b01      	cmp	r3, #1
 8005046:	d107      	bne.n	8005058 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e038      	b.n	80050be <HAL_RCC_OscConfig+0x4e2>
 800504c:	40023800 	.word	0x40023800
 8005050:	40007000 	.word	0x40007000
 8005054:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005058:	4b1b      	ldr	r3, [pc, #108]	@ (80050c8 <HAL_RCC_OscConfig+0x4ec>)
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	699b      	ldr	r3, [r3, #24]
 8005062:	2b01      	cmp	r3, #1
 8005064:	d028      	beq.n	80050b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005070:	429a      	cmp	r2, r3
 8005072:	d121      	bne.n	80050b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800507e:	429a      	cmp	r2, r3
 8005080:	d11a      	bne.n	80050b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005082:	68fa      	ldr	r2, [r7, #12]
 8005084:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005088:	4013      	ands	r3, r2
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800508e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005090:	4293      	cmp	r3, r2
 8005092:	d111      	bne.n	80050b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800509e:	085b      	lsrs	r3, r3, #1
 80050a0:	3b01      	subs	r3, #1
 80050a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d107      	bne.n	80050b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d001      	beq.n	80050bc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e000      	b.n	80050be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3718      	adds	r7, #24
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	40023800 	.word	0x40023800

080050cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d101      	bne.n	80050e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	e0cc      	b.n	800527a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80050e0:	4b68      	ldr	r3, [pc, #416]	@ (8005284 <HAL_RCC_ClockConfig+0x1b8>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 0307 	and.w	r3, r3, #7
 80050e8:	683a      	ldr	r2, [r7, #0]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d90c      	bls.n	8005108 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050ee:	4b65      	ldr	r3, [pc, #404]	@ (8005284 <HAL_RCC_ClockConfig+0x1b8>)
 80050f0:	683a      	ldr	r2, [r7, #0]
 80050f2:	b2d2      	uxtb	r2, r2
 80050f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050f6:	4b63      	ldr	r3, [pc, #396]	@ (8005284 <HAL_RCC_ClockConfig+0x1b8>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f003 0307 	and.w	r3, r3, #7
 80050fe:	683a      	ldr	r2, [r7, #0]
 8005100:	429a      	cmp	r2, r3
 8005102:	d001      	beq.n	8005108 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e0b8      	b.n	800527a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 0302 	and.w	r3, r3, #2
 8005110:	2b00      	cmp	r3, #0
 8005112:	d020      	beq.n	8005156 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 0304 	and.w	r3, r3, #4
 800511c:	2b00      	cmp	r3, #0
 800511e:	d005      	beq.n	800512c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005120:	4b59      	ldr	r3, [pc, #356]	@ (8005288 <HAL_RCC_ClockConfig+0x1bc>)
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	4a58      	ldr	r2, [pc, #352]	@ (8005288 <HAL_RCC_ClockConfig+0x1bc>)
 8005126:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800512a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 0308 	and.w	r3, r3, #8
 8005134:	2b00      	cmp	r3, #0
 8005136:	d005      	beq.n	8005144 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005138:	4b53      	ldr	r3, [pc, #332]	@ (8005288 <HAL_RCC_ClockConfig+0x1bc>)
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	4a52      	ldr	r2, [pc, #328]	@ (8005288 <HAL_RCC_ClockConfig+0x1bc>)
 800513e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005142:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005144:	4b50      	ldr	r3, [pc, #320]	@ (8005288 <HAL_RCC_ClockConfig+0x1bc>)
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	494d      	ldr	r1, [pc, #308]	@ (8005288 <HAL_RCC_ClockConfig+0x1bc>)
 8005152:	4313      	orrs	r3, r2
 8005154:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 0301 	and.w	r3, r3, #1
 800515e:	2b00      	cmp	r3, #0
 8005160:	d044      	beq.n	80051ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	2b01      	cmp	r3, #1
 8005168:	d107      	bne.n	800517a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800516a:	4b47      	ldr	r3, [pc, #284]	@ (8005288 <HAL_RCC_ClockConfig+0x1bc>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005172:	2b00      	cmp	r3, #0
 8005174:	d119      	bne.n	80051aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e07f      	b.n	800527a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	2b02      	cmp	r3, #2
 8005180:	d003      	beq.n	800518a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005186:	2b03      	cmp	r3, #3
 8005188:	d107      	bne.n	800519a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800518a:	4b3f      	ldr	r3, [pc, #252]	@ (8005288 <HAL_RCC_ClockConfig+0x1bc>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005192:	2b00      	cmp	r3, #0
 8005194:	d109      	bne.n	80051aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	e06f      	b.n	800527a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800519a:	4b3b      	ldr	r3, [pc, #236]	@ (8005288 <HAL_RCC_ClockConfig+0x1bc>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 0302 	and.w	r3, r3, #2
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d101      	bne.n	80051aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e067      	b.n	800527a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80051aa:	4b37      	ldr	r3, [pc, #220]	@ (8005288 <HAL_RCC_ClockConfig+0x1bc>)
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	f023 0203 	bic.w	r2, r3, #3
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	4934      	ldr	r1, [pc, #208]	@ (8005288 <HAL_RCC_ClockConfig+0x1bc>)
 80051b8:	4313      	orrs	r3, r2
 80051ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80051bc:	f7fe f976 	bl	80034ac <HAL_GetTick>
 80051c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051c2:	e00a      	b.n	80051da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051c4:	f7fe f972 	bl	80034ac <HAL_GetTick>
 80051c8:	4602      	mov	r2, r0
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	1ad3      	subs	r3, r2, r3
 80051ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d901      	bls.n	80051da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	e04f      	b.n	800527a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051da:	4b2b      	ldr	r3, [pc, #172]	@ (8005288 <HAL_RCC_ClockConfig+0x1bc>)
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	f003 020c 	and.w	r2, r3, #12
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d1eb      	bne.n	80051c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80051ec:	4b25      	ldr	r3, [pc, #148]	@ (8005284 <HAL_RCC_ClockConfig+0x1b8>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 0307 	and.w	r3, r3, #7
 80051f4:	683a      	ldr	r2, [r7, #0]
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d20c      	bcs.n	8005214 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051fa:	4b22      	ldr	r3, [pc, #136]	@ (8005284 <HAL_RCC_ClockConfig+0x1b8>)
 80051fc:	683a      	ldr	r2, [r7, #0]
 80051fe:	b2d2      	uxtb	r2, r2
 8005200:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005202:	4b20      	ldr	r3, [pc, #128]	@ (8005284 <HAL_RCC_ClockConfig+0x1b8>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 0307 	and.w	r3, r3, #7
 800520a:	683a      	ldr	r2, [r7, #0]
 800520c:	429a      	cmp	r2, r3
 800520e:	d001      	beq.n	8005214 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	e032      	b.n	800527a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 0304 	and.w	r3, r3, #4
 800521c:	2b00      	cmp	r3, #0
 800521e:	d008      	beq.n	8005232 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005220:	4b19      	ldr	r3, [pc, #100]	@ (8005288 <HAL_RCC_ClockConfig+0x1bc>)
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	4916      	ldr	r1, [pc, #88]	@ (8005288 <HAL_RCC_ClockConfig+0x1bc>)
 800522e:	4313      	orrs	r3, r2
 8005230:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 0308 	and.w	r3, r3, #8
 800523a:	2b00      	cmp	r3, #0
 800523c:	d009      	beq.n	8005252 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800523e:	4b12      	ldr	r3, [pc, #72]	@ (8005288 <HAL_RCC_ClockConfig+0x1bc>)
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	00db      	lsls	r3, r3, #3
 800524c:	490e      	ldr	r1, [pc, #56]	@ (8005288 <HAL_RCC_ClockConfig+0x1bc>)
 800524e:	4313      	orrs	r3, r2
 8005250:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005252:	f000 f821 	bl	8005298 <HAL_RCC_GetSysClockFreq>
 8005256:	4602      	mov	r2, r0
 8005258:	4b0b      	ldr	r3, [pc, #44]	@ (8005288 <HAL_RCC_ClockConfig+0x1bc>)
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	091b      	lsrs	r3, r3, #4
 800525e:	f003 030f 	and.w	r3, r3, #15
 8005262:	490a      	ldr	r1, [pc, #40]	@ (800528c <HAL_RCC_ClockConfig+0x1c0>)
 8005264:	5ccb      	ldrb	r3, [r1, r3]
 8005266:	fa22 f303 	lsr.w	r3, r2, r3
 800526a:	4a09      	ldr	r2, [pc, #36]	@ (8005290 <HAL_RCC_ClockConfig+0x1c4>)
 800526c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800526e:	4b09      	ldr	r3, [pc, #36]	@ (8005294 <HAL_RCC_ClockConfig+0x1c8>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4618      	mov	r0, r3
 8005274:	f7fe f8d6 	bl	8003424 <HAL_InitTick>

  return HAL_OK;
 8005278:	2300      	movs	r3, #0
}
 800527a:	4618      	mov	r0, r3
 800527c:	3710      	adds	r7, #16
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	40023c00 	.word	0x40023c00
 8005288:	40023800 	.word	0x40023800
 800528c:	0800cff0 	.word	0x0800cff0
 8005290:	2000001c 	.word	0x2000001c
 8005294:	20000020 	.word	0x20000020

08005298 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005298:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800529c:	b090      	sub	sp, #64	@ 0x40
 800529e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80052a0:	2300      	movs	r3, #0
 80052a2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80052a4:	2300      	movs	r3, #0
 80052a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80052a8:	2300      	movs	r3, #0
 80052aa:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80052ac:	2300      	movs	r3, #0
 80052ae:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80052b0:	4b59      	ldr	r3, [pc, #356]	@ (8005418 <HAL_RCC_GetSysClockFreq+0x180>)
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	f003 030c 	and.w	r3, r3, #12
 80052b8:	2b08      	cmp	r3, #8
 80052ba:	d00d      	beq.n	80052d8 <HAL_RCC_GetSysClockFreq+0x40>
 80052bc:	2b08      	cmp	r3, #8
 80052be:	f200 80a1 	bhi.w	8005404 <HAL_RCC_GetSysClockFreq+0x16c>
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d002      	beq.n	80052cc <HAL_RCC_GetSysClockFreq+0x34>
 80052c6:	2b04      	cmp	r3, #4
 80052c8:	d003      	beq.n	80052d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80052ca:	e09b      	b.n	8005404 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80052cc:	4b53      	ldr	r3, [pc, #332]	@ (800541c <HAL_RCC_GetSysClockFreq+0x184>)
 80052ce:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80052d0:	e09b      	b.n	800540a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80052d2:	4b53      	ldr	r3, [pc, #332]	@ (8005420 <HAL_RCC_GetSysClockFreq+0x188>)
 80052d4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80052d6:	e098      	b.n	800540a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80052d8:	4b4f      	ldr	r3, [pc, #316]	@ (8005418 <HAL_RCC_GetSysClockFreq+0x180>)
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80052e0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80052e2:	4b4d      	ldr	r3, [pc, #308]	@ (8005418 <HAL_RCC_GetSysClockFreq+0x180>)
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d028      	beq.n	8005340 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052ee:	4b4a      	ldr	r3, [pc, #296]	@ (8005418 <HAL_RCC_GetSysClockFreq+0x180>)
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	099b      	lsrs	r3, r3, #6
 80052f4:	2200      	movs	r2, #0
 80052f6:	623b      	str	r3, [r7, #32]
 80052f8:	627a      	str	r2, [r7, #36]	@ 0x24
 80052fa:	6a3b      	ldr	r3, [r7, #32]
 80052fc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005300:	2100      	movs	r1, #0
 8005302:	4b47      	ldr	r3, [pc, #284]	@ (8005420 <HAL_RCC_GetSysClockFreq+0x188>)
 8005304:	fb03 f201 	mul.w	r2, r3, r1
 8005308:	2300      	movs	r3, #0
 800530a:	fb00 f303 	mul.w	r3, r0, r3
 800530e:	4413      	add	r3, r2
 8005310:	4a43      	ldr	r2, [pc, #268]	@ (8005420 <HAL_RCC_GetSysClockFreq+0x188>)
 8005312:	fba0 1202 	umull	r1, r2, r0, r2
 8005316:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005318:	460a      	mov	r2, r1
 800531a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800531c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800531e:	4413      	add	r3, r2
 8005320:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005322:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005324:	2200      	movs	r2, #0
 8005326:	61bb      	str	r3, [r7, #24]
 8005328:	61fa      	str	r2, [r7, #28]
 800532a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800532e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005332:	f7fb fca9 	bl	8000c88 <__aeabi_uldivmod>
 8005336:	4602      	mov	r2, r0
 8005338:	460b      	mov	r3, r1
 800533a:	4613      	mov	r3, r2
 800533c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800533e:	e053      	b.n	80053e8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005340:	4b35      	ldr	r3, [pc, #212]	@ (8005418 <HAL_RCC_GetSysClockFreq+0x180>)
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	099b      	lsrs	r3, r3, #6
 8005346:	2200      	movs	r2, #0
 8005348:	613b      	str	r3, [r7, #16]
 800534a:	617a      	str	r2, [r7, #20]
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005352:	f04f 0b00 	mov.w	fp, #0
 8005356:	4652      	mov	r2, sl
 8005358:	465b      	mov	r3, fp
 800535a:	f04f 0000 	mov.w	r0, #0
 800535e:	f04f 0100 	mov.w	r1, #0
 8005362:	0159      	lsls	r1, r3, #5
 8005364:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005368:	0150      	lsls	r0, r2, #5
 800536a:	4602      	mov	r2, r0
 800536c:	460b      	mov	r3, r1
 800536e:	ebb2 080a 	subs.w	r8, r2, sl
 8005372:	eb63 090b 	sbc.w	r9, r3, fp
 8005376:	f04f 0200 	mov.w	r2, #0
 800537a:	f04f 0300 	mov.w	r3, #0
 800537e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005382:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005386:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800538a:	ebb2 0408 	subs.w	r4, r2, r8
 800538e:	eb63 0509 	sbc.w	r5, r3, r9
 8005392:	f04f 0200 	mov.w	r2, #0
 8005396:	f04f 0300 	mov.w	r3, #0
 800539a:	00eb      	lsls	r3, r5, #3
 800539c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80053a0:	00e2      	lsls	r2, r4, #3
 80053a2:	4614      	mov	r4, r2
 80053a4:	461d      	mov	r5, r3
 80053a6:	eb14 030a 	adds.w	r3, r4, sl
 80053aa:	603b      	str	r3, [r7, #0]
 80053ac:	eb45 030b 	adc.w	r3, r5, fp
 80053b0:	607b      	str	r3, [r7, #4]
 80053b2:	f04f 0200 	mov.w	r2, #0
 80053b6:	f04f 0300 	mov.w	r3, #0
 80053ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80053be:	4629      	mov	r1, r5
 80053c0:	028b      	lsls	r3, r1, #10
 80053c2:	4621      	mov	r1, r4
 80053c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80053c8:	4621      	mov	r1, r4
 80053ca:	028a      	lsls	r2, r1, #10
 80053cc:	4610      	mov	r0, r2
 80053ce:	4619      	mov	r1, r3
 80053d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053d2:	2200      	movs	r2, #0
 80053d4:	60bb      	str	r3, [r7, #8]
 80053d6:	60fa      	str	r2, [r7, #12]
 80053d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80053dc:	f7fb fc54 	bl	8000c88 <__aeabi_uldivmod>
 80053e0:	4602      	mov	r2, r0
 80053e2:	460b      	mov	r3, r1
 80053e4:	4613      	mov	r3, r2
 80053e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80053e8:	4b0b      	ldr	r3, [pc, #44]	@ (8005418 <HAL_RCC_GetSysClockFreq+0x180>)
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	0c1b      	lsrs	r3, r3, #16
 80053ee:	f003 0303 	and.w	r3, r3, #3
 80053f2:	3301      	adds	r3, #1
 80053f4:	005b      	lsls	r3, r3, #1
 80053f6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80053f8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80053fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005400:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005402:	e002      	b.n	800540a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005404:	4b05      	ldr	r3, [pc, #20]	@ (800541c <HAL_RCC_GetSysClockFreq+0x184>)
 8005406:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005408:	bf00      	nop
    }
  }
  return sysclockfreq;
 800540a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800540c:	4618      	mov	r0, r3
 800540e:	3740      	adds	r7, #64	@ 0x40
 8005410:	46bd      	mov	sp, r7
 8005412:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005416:	bf00      	nop
 8005418:	40023800 	.word	0x40023800
 800541c:	00f42400 	.word	0x00f42400
 8005420:	017d7840 	.word	0x017d7840

08005424 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005424:	b480      	push	{r7}
 8005426:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005428:	4b03      	ldr	r3, [pc, #12]	@ (8005438 <HAL_RCC_GetHCLKFreq+0x14>)
 800542a:	681b      	ldr	r3, [r3, #0]
}
 800542c:	4618      	mov	r0, r3
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr
 8005436:	bf00      	nop
 8005438:	2000001c 	.word	0x2000001c

0800543c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005440:	f7ff fff0 	bl	8005424 <HAL_RCC_GetHCLKFreq>
 8005444:	4602      	mov	r2, r0
 8005446:	4b05      	ldr	r3, [pc, #20]	@ (800545c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	0a9b      	lsrs	r3, r3, #10
 800544c:	f003 0307 	and.w	r3, r3, #7
 8005450:	4903      	ldr	r1, [pc, #12]	@ (8005460 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005452:	5ccb      	ldrb	r3, [r1, r3]
 8005454:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005458:	4618      	mov	r0, r3
 800545a:	bd80      	pop	{r7, pc}
 800545c:	40023800 	.word	0x40023800
 8005460:	0800d000 	.word	0x0800d000

08005464 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005468:	f7ff ffdc 	bl	8005424 <HAL_RCC_GetHCLKFreq>
 800546c:	4602      	mov	r2, r0
 800546e:	4b05      	ldr	r3, [pc, #20]	@ (8005484 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	0b5b      	lsrs	r3, r3, #13
 8005474:	f003 0307 	and.w	r3, r3, #7
 8005478:	4903      	ldr	r1, [pc, #12]	@ (8005488 <HAL_RCC_GetPCLK2Freq+0x24>)
 800547a:	5ccb      	ldrb	r3, [r1, r3]
 800547c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005480:	4618      	mov	r0, r3
 8005482:	bd80      	pop	{r7, pc}
 8005484:	40023800 	.word	0x40023800
 8005488:	0800d000 	.word	0x0800d000

0800548c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b082      	sub	sp, #8
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d101      	bne.n	800549e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e041      	b.n	8005522 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d106      	bne.n	80054b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f7fc fe7c 	bl	80021b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2202      	movs	r2, #2
 80054bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	3304      	adds	r3, #4
 80054c8:	4619      	mov	r1, r3
 80054ca:	4610      	mov	r0, r2
 80054cc:	f000 fe8c 	bl	80061e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2201      	movs	r2, #1
 80054d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2201      	movs	r2, #1
 80054fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005520:	2300      	movs	r3, #0
}
 8005522:	4618      	mov	r0, r3
 8005524:	3708      	adds	r7, #8
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
	...

0800552c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800552c:	b480      	push	{r7}
 800552e:	b085      	sub	sp, #20
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800553a:	b2db      	uxtb	r3, r3
 800553c:	2b01      	cmp	r3, #1
 800553e:	d001      	beq.n	8005544 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	e04e      	b.n	80055e2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2202      	movs	r2, #2
 8005548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68da      	ldr	r2, [r3, #12]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f042 0201 	orr.w	r2, r2, #1
 800555a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a23      	ldr	r2, [pc, #140]	@ (80055f0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d022      	beq.n	80055ac <HAL_TIM_Base_Start_IT+0x80>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800556e:	d01d      	beq.n	80055ac <HAL_TIM_Base_Start_IT+0x80>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a1f      	ldr	r2, [pc, #124]	@ (80055f4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d018      	beq.n	80055ac <HAL_TIM_Base_Start_IT+0x80>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a1e      	ldr	r2, [pc, #120]	@ (80055f8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d013      	beq.n	80055ac <HAL_TIM_Base_Start_IT+0x80>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a1c      	ldr	r2, [pc, #112]	@ (80055fc <HAL_TIM_Base_Start_IT+0xd0>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d00e      	beq.n	80055ac <HAL_TIM_Base_Start_IT+0x80>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a1b      	ldr	r2, [pc, #108]	@ (8005600 <HAL_TIM_Base_Start_IT+0xd4>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d009      	beq.n	80055ac <HAL_TIM_Base_Start_IT+0x80>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a19      	ldr	r2, [pc, #100]	@ (8005604 <HAL_TIM_Base_Start_IT+0xd8>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d004      	beq.n	80055ac <HAL_TIM_Base_Start_IT+0x80>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a18      	ldr	r2, [pc, #96]	@ (8005608 <HAL_TIM_Base_Start_IT+0xdc>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d111      	bne.n	80055d0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	f003 0307 	and.w	r3, r3, #7
 80055b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2b06      	cmp	r3, #6
 80055bc:	d010      	beq.n	80055e0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f042 0201 	orr.w	r2, r2, #1
 80055cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055ce:	e007      	b.n	80055e0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f042 0201 	orr.w	r2, r2, #1
 80055de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055e0:	2300      	movs	r3, #0
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3714      	adds	r7, #20
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr
 80055ee:	bf00      	nop
 80055f0:	40010000 	.word	0x40010000
 80055f4:	40000400 	.word	0x40000400
 80055f8:	40000800 	.word	0x40000800
 80055fc:	40000c00 	.word	0x40000c00
 8005600:	40010400 	.word	0x40010400
 8005604:	40014000 	.word	0x40014000
 8005608:	40001800 	.word	0x40001800

0800560c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b082      	sub	sp, #8
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d101      	bne.n	800561e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e041      	b.n	80056a2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005624:	b2db      	uxtb	r3, r3
 8005626:	2b00      	cmp	r3, #0
 8005628:	d106      	bne.n	8005638 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2200      	movs	r2, #0
 800562e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f000 f839 	bl	80056aa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2202      	movs	r2, #2
 800563c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	3304      	adds	r3, #4
 8005648:	4619      	mov	r1, r3
 800564a:	4610      	mov	r0, r2
 800564c:	f000 fdcc 	bl	80061e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2201      	movs	r2, #1
 8005654:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2201      	movs	r2, #1
 8005664:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80056a0:	2300      	movs	r3, #0
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3708      	adds	r7, #8
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}

080056aa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80056aa:	b480      	push	{r7}
 80056ac:	b083      	sub	sp, #12
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80056b2:	bf00      	nop
 80056b4:	370c      	adds	r7, #12
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr
	...

080056c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b084      	sub	sp, #16
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d109      	bne.n	80056e4 <HAL_TIM_PWM_Start+0x24>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	2b01      	cmp	r3, #1
 80056da:	bf14      	ite	ne
 80056dc:	2301      	movne	r3, #1
 80056de:	2300      	moveq	r3, #0
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	e022      	b.n	800572a <HAL_TIM_PWM_Start+0x6a>
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	2b04      	cmp	r3, #4
 80056e8:	d109      	bne.n	80056fe <HAL_TIM_PWM_Start+0x3e>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	bf14      	ite	ne
 80056f6:	2301      	movne	r3, #1
 80056f8:	2300      	moveq	r3, #0
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	e015      	b.n	800572a <HAL_TIM_PWM_Start+0x6a>
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	2b08      	cmp	r3, #8
 8005702:	d109      	bne.n	8005718 <HAL_TIM_PWM_Start+0x58>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800570a:	b2db      	uxtb	r3, r3
 800570c:	2b01      	cmp	r3, #1
 800570e:	bf14      	ite	ne
 8005710:	2301      	movne	r3, #1
 8005712:	2300      	moveq	r3, #0
 8005714:	b2db      	uxtb	r3, r3
 8005716:	e008      	b.n	800572a <HAL_TIM_PWM_Start+0x6a>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800571e:	b2db      	uxtb	r3, r3
 8005720:	2b01      	cmp	r3, #1
 8005722:	bf14      	ite	ne
 8005724:	2301      	movne	r3, #1
 8005726:	2300      	moveq	r3, #0
 8005728:	b2db      	uxtb	r3, r3
 800572a:	2b00      	cmp	r3, #0
 800572c:	d001      	beq.n	8005732 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	e07c      	b.n	800582c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d104      	bne.n	8005742 <HAL_TIM_PWM_Start+0x82>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2202      	movs	r2, #2
 800573c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005740:	e013      	b.n	800576a <HAL_TIM_PWM_Start+0xaa>
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	2b04      	cmp	r3, #4
 8005746:	d104      	bne.n	8005752 <HAL_TIM_PWM_Start+0x92>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2202      	movs	r2, #2
 800574c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005750:	e00b      	b.n	800576a <HAL_TIM_PWM_Start+0xaa>
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	2b08      	cmp	r3, #8
 8005756:	d104      	bne.n	8005762 <HAL_TIM_PWM_Start+0xa2>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2202      	movs	r2, #2
 800575c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005760:	e003      	b.n	800576a <HAL_TIM_PWM_Start+0xaa>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2202      	movs	r2, #2
 8005766:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	2201      	movs	r2, #1
 8005770:	6839      	ldr	r1, [r7, #0]
 8005772:	4618      	mov	r0, r3
 8005774:	f001 f952 	bl	8006a1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a2d      	ldr	r2, [pc, #180]	@ (8005834 <HAL_TIM_PWM_Start+0x174>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d004      	beq.n	800578c <HAL_TIM_PWM_Start+0xcc>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a2c      	ldr	r2, [pc, #176]	@ (8005838 <HAL_TIM_PWM_Start+0x178>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d101      	bne.n	8005790 <HAL_TIM_PWM_Start+0xd0>
 800578c:	2301      	movs	r3, #1
 800578e:	e000      	b.n	8005792 <HAL_TIM_PWM_Start+0xd2>
 8005790:	2300      	movs	r3, #0
 8005792:	2b00      	cmp	r3, #0
 8005794:	d007      	beq.n	80057a6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80057a4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a22      	ldr	r2, [pc, #136]	@ (8005834 <HAL_TIM_PWM_Start+0x174>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d022      	beq.n	80057f6 <HAL_TIM_PWM_Start+0x136>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057b8:	d01d      	beq.n	80057f6 <HAL_TIM_PWM_Start+0x136>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a1f      	ldr	r2, [pc, #124]	@ (800583c <HAL_TIM_PWM_Start+0x17c>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d018      	beq.n	80057f6 <HAL_TIM_PWM_Start+0x136>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a1d      	ldr	r2, [pc, #116]	@ (8005840 <HAL_TIM_PWM_Start+0x180>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d013      	beq.n	80057f6 <HAL_TIM_PWM_Start+0x136>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a1c      	ldr	r2, [pc, #112]	@ (8005844 <HAL_TIM_PWM_Start+0x184>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d00e      	beq.n	80057f6 <HAL_TIM_PWM_Start+0x136>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a16      	ldr	r2, [pc, #88]	@ (8005838 <HAL_TIM_PWM_Start+0x178>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d009      	beq.n	80057f6 <HAL_TIM_PWM_Start+0x136>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a18      	ldr	r2, [pc, #96]	@ (8005848 <HAL_TIM_PWM_Start+0x188>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d004      	beq.n	80057f6 <HAL_TIM_PWM_Start+0x136>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a16      	ldr	r2, [pc, #88]	@ (800584c <HAL_TIM_PWM_Start+0x18c>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d111      	bne.n	800581a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	f003 0307 	and.w	r3, r3, #7
 8005800:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2b06      	cmp	r3, #6
 8005806:	d010      	beq.n	800582a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f042 0201 	orr.w	r2, r2, #1
 8005816:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005818:	e007      	b.n	800582a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f042 0201 	orr.w	r2, r2, #1
 8005828:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800582a:	2300      	movs	r3, #0
}
 800582c:	4618      	mov	r0, r3
 800582e:	3710      	adds	r7, #16
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}
 8005834:	40010000 	.word	0x40010000
 8005838:	40010400 	.word	0x40010400
 800583c:	40000400 	.word	0x40000400
 8005840:	40000800 	.word	0x40000800
 8005844:	40000c00 	.word	0x40000c00
 8005848:	40014000 	.word	0x40014000
 800584c:	40001800 	.word	0x40001800

08005850 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b082      	sub	sp, #8
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d101      	bne.n	8005862 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e041      	b.n	80058e6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005868:	b2db      	uxtb	r3, r3
 800586a:	2b00      	cmp	r3, #0
 800586c:	d106      	bne.n	800587c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 f839 	bl	80058ee <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2202      	movs	r2, #2
 8005880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	3304      	adds	r3, #4
 800588c:	4619      	mov	r1, r3
 800588e:	4610      	mov	r0, r2
 8005890:	f000 fcaa 	bl	80061e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80058e4:	2300      	movs	r3, #0
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3708      	adds	r7, #8
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}

080058ee <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80058ee:	b480      	push	{r7}
 80058f0:	b083      	sub	sp, #12
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80058f6:	bf00      	nop
 80058f8:	370c      	adds	r7, #12
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr

08005902 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005902:	b580      	push	{r7, lr}
 8005904:	b086      	sub	sp, #24
 8005906:	af00      	add	r7, sp, #0
 8005908:	6078      	str	r0, [r7, #4]
 800590a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d101      	bne.n	8005916 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	e097      	b.n	8005a46 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800591c:	b2db      	uxtb	r3, r3
 800591e:	2b00      	cmp	r3, #0
 8005920:	d106      	bne.n	8005930 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f7fc fbc2 	bl	80020b4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2202      	movs	r2, #2
 8005934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	6812      	ldr	r2, [r2, #0]
 8005942:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005946:	f023 0307 	bic.w	r3, r3, #7
 800594a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	3304      	adds	r3, #4
 8005954:	4619      	mov	r1, r3
 8005956:	4610      	mov	r0, r2
 8005958:	f000 fc46 	bl	80061e8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	699b      	ldr	r3, [r3, #24]
 800596a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	6a1b      	ldr	r3, [r3, #32]
 8005972:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	697a      	ldr	r2, [r7, #20]
 800597a:	4313      	orrs	r3, r2
 800597c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005984:	f023 0303 	bic.w	r3, r3, #3
 8005988:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	689a      	ldr	r2, [r3, #8]
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	699b      	ldr	r3, [r3, #24]
 8005992:	021b      	lsls	r3, r3, #8
 8005994:	4313      	orrs	r3, r2
 8005996:	693a      	ldr	r2, [r7, #16]
 8005998:	4313      	orrs	r3, r2
 800599a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80059a2:	f023 030c 	bic.w	r3, r3, #12
 80059a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80059ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80059b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	68da      	ldr	r2, [r3, #12]
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	69db      	ldr	r3, [r3, #28]
 80059bc:	021b      	lsls	r3, r3, #8
 80059be:	4313      	orrs	r3, r2
 80059c0:	693a      	ldr	r2, [r7, #16]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	691b      	ldr	r3, [r3, #16]
 80059ca:	011a      	lsls	r2, r3, #4
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	6a1b      	ldr	r3, [r3, #32]
 80059d0:	031b      	lsls	r3, r3, #12
 80059d2:	4313      	orrs	r3, r2
 80059d4:	693a      	ldr	r2, [r7, #16]
 80059d6:	4313      	orrs	r3, r2
 80059d8:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80059e0:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80059e8:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	685a      	ldr	r2, [r3, #4]
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	695b      	ldr	r3, [r3, #20]
 80059f2:	011b      	lsls	r3, r3, #4
 80059f4:	4313      	orrs	r3, r2
 80059f6:	68fa      	ldr	r2, [r7, #12]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	697a      	ldr	r2, [r7, #20]
 8005a02:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	693a      	ldr	r2, [r7, #16]
 8005a0a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	68fa      	ldr	r2, [r7, #12]
 8005a12:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005a44:	2300      	movs	r3, #0
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3718      	adds	r7, #24
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}

08005a4e <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a4e:	b580      	push	{r7, lr}
 8005a50:	b084      	sub	sp, #16
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	6078      	str	r0, [r7, #4]
 8005a56:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005a5e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005a66:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005a6e:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005a76:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d110      	bne.n	8005aa0 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a7e:	7bfb      	ldrb	r3, [r7, #15]
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d102      	bne.n	8005a8a <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005a84:	7b7b      	ldrb	r3, [r7, #13]
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d001      	beq.n	8005a8e <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e069      	b.n	8005b62 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2202      	movs	r2, #2
 8005a92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2202      	movs	r2, #2
 8005a9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a9e:	e031      	b.n	8005b04 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	2b04      	cmp	r3, #4
 8005aa4:	d110      	bne.n	8005ac8 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005aa6:	7bbb      	ldrb	r3, [r7, #14]
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d102      	bne.n	8005ab2 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005aac:	7b3b      	ldrb	r3, [r7, #12]
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d001      	beq.n	8005ab6 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e055      	b.n	8005b62 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2202      	movs	r2, #2
 8005aba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2202      	movs	r2, #2
 8005ac2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005ac6:	e01d      	b.n	8005b04 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ac8:	7bfb      	ldrb	r3, [r7, #15]
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d108      	bne.n	8005ae0 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ace:	7bbb      	ldrb	r3, [r7, #14]
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d105      	bne.n	8005ae0 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ad4:	7b7b      	ldrb	r3, [r7, #13]
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d102      	bne.n	8005ae0 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005ada:	7b3b      	ldrb	r3, [r7, #12]
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d001      	beq.n	8005ae4 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e03e      	b.n	8005b62 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2202      	movs	r2, #2
 8005ae8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2202      	movs	r2, #2
 8005af0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2202      	movs	r2, #2
 8005af8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2202      	movs	r2, #2
 8005b00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d003      	beq.n	8005b12 <HAL_TIM_Encoder_Start+0xc4>
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	2b04      	cmp	r3, #4
 8005b0e:	d008      	beq.n	8005b22 <HAL_TIM_Encoder_Start+0xd4>
 8005b10:	e00f      	b.n	8005b32 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	2201      	movs	r2, #1
 8005b18:	2100      	movs	r1, #0
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f000 ff7e 	bl	8006a1c <TIM_CCxChannelCmd>
      break;
 8005b20:	e016      	b.n	8005b50 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	2201      	movs	r2, #1
 8005b28:	2104      	movs	r1, #4
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f000 ff76 	bl	8006a1c <TIM_CCxChannelCmd>
      break;
 8005b30:	e00e      	b.n	8005b50 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	2201      	movs	r2, #1
 8005b38:	2100      	movs	r1, #0
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f000 ff6e 	bl	8006a1c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	2201      	movs	r2, #1
 8005b46:	2104      	movs	r1, #4
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f000 ff67 	bl	8006a1c <TIM_CCxChannelCmd>
      break;
 8005b4e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f042 0201 	orr.w	r2, r2, #1
 8005b5e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005b60:	2300      	movs	r3, #0
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3710      	adds	r7, #16
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}

08005b6a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b6a:	b580      	push	{r7, lr}
 8005b6c:	b084      	sub	sp, #16
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	691b      	ldr	r3, [r3, #16]
 8005b80:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	f003 0302 	and.w	r3, r3, #2
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d020      	beq.n	8005bce <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f003 0302 	and.w	r3, r3, #2
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d01b      	beq.n	8005bce <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f06f 0202 	mvn.w	r2, #2
 8005b9e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	699b      	ldr	r3, [r3, #24]
 8005bac:	f003 0303 	and.w	r3, r3, #3
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d003      	beq.n	8005bbc <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f000 faf8 	bl	80061aa <HAL_TIM_IC_CaptureCallback>
 8005bba:	e005      	b.n	8005bc8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f000 faea 	bl	8006196 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 fafb 	bl	80061be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	f003 0304 	and.w	r3, r3, #4
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d020      	beq.n	8005c1a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f003 0304 	and.w	r3, r3, #4
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d01b      	beq.n	8005c1a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f06f 0204 	mvn.w	r2, #4
 8005bea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2202      	movs	r2, #2
 8005bf0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	699b      	ldr	r3, [r3, #24]
 8005bf8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d003      	beq.n	8005c08 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f000 fad2 	bl	80061aa <HAL_TIM_IC_CaptureCallback>
 8005c06:	e005      	b.n	8005c14 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f000 fac4 	bl	8006196 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f000 fad5 	bl	80061be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2200      	movs	r2, #0
 8005c18:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	f003 0308 	and.w	r3, r3, #8
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d020      	beq.n	8005c66 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f003 0308 	and.w	r3, r3, #8
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d01b      	beq.n	8005c66 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f06f 0208 	mvn.w	r2, #8
 8005c36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2204      	movs	r2, #4
 8005c3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	69db      	ldr	r3, [r3, #28]
 8005c44:	f003 0303 	and.w	r3, r3, #3
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d003      	beq.n	8005c54 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f000 faac 	bl	80061aa <HAL_TIM_IC_CaptureCallback>
 8005c52:	e005      	b.n	8005c60 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f000 fa9e 	bl	8006196 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f000 faaf 	bl	80061be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2200      	movs	r2, #0
 8005c64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	f003 0310 	and.w	r3, r3, #16
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d020      	beq.n	8005cb2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f003 0310 	and.w	r3, r3, #16
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d01b      	beq.n	8005cb2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f06f 0210 	mvn.w	r2, #16
 8005c82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2208      	movs	r2, #8
 8005c88:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	69db      	ldr	r3, [r3, #28]
 8005c90:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d003      	beq.n	8005ca0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f000 fa86 	bl	80061aa <HAL_TIM_IC_CaptureCallback>
 8005c9e:	e005      	b.n	8005cac <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f000 fa78 	bl	8006196 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f000 fa89 	bl	80061be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	f003 0301 	and.w	r3, r3, #1
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d00c      	beq.n	8005cd6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f003 0301 	and.w	r3, r3, #1
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d007      	beq.n	8005cd6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f06f 0201 	mvn.w	r2, #1
 8005cce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f7fb fe27 	bl	8001924 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d00c      	beq.n	8005cfa <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d007      	beq.n	8005cfa <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005cf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f000 ff3d 	bl	8006b74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d00c      	beq.n	8005d1e <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d007      	beq.n	8005d1e <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005d16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f000 fa5a 	bl	80061d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	f003 0320 	and.w	r3, r3, #32
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d00c      	beq.n	8005d42 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f003 0320 	and.w	r3, r3, #32
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d007      	beq.n	8005d42 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f06f 0220 	mvn.w	r2, #32
 8005d3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f000 ff0f 	bl	8006b60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d42:	bf00      	nop
 8005d44:	3710      	adds	r7, #16
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}

08005d4a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005d4a:	b580      	push	{r7, lr}
 8005d4c:	b086      	sub	sp, #24
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	60f8      	str	r0, [r7, #12]
 8005d52:	60b9      	str	r1, [r7, #8]
 8005d54:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d56:	2300      	movs	r3, #0
 8005d58:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d101      	bne.n	8005d68 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005d64:	2302      	movs	r3, #2
 8005d66:	e088      	b.n	8005e7a <HAL_TIM_IC_ConfigChannel+0x130>
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d11b      	bne.n	8005dae <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005d86:	f000 fc85 	bl	8006694 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	699a      	ldr	r2, [r3, #24]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f022 020c 	bic.w	r2, r2, #12
 8005d98:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	6999      	ldr	r1, [r3, #24]
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	689a      	ldr	r2, [r3, #8]
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	430a      	orrs	r2, r1
 8005daa:	619a      	str	r2, [r3, #24]
 8005dac:	e060      	b.n	8005e70 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2b04      	cmp	r3, #4
 8005db2:	d11c      	bne.n	8005dee <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005dc4:	f000 fd09 	bl	80067da <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	699a      	ldr	r2, [r3, #24]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005dd6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	6999      	ldr	r1, [r3, #24]
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	021a      	lsls	r2, r3, #8
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	430a      	orrs	r2, r1
 8005dea:	619a      	str	r2, [r3, #24]
 8005dec:	e040      	b.n	8005e70 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2b08      	cmp	r3, #8
 8005df2:	d11b      	bne.n	8005e2c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005e04:	f000 fd56 	bl	80068b4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	69da      	ldr	r2, [r3, #28]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f022 020c 	bic.w	r2, r2, #12
 8005e16:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	69d9      	ldr	r1, [r3, #28]
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	689a      	ldr	r2, [r3, #8]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	430a      	orrs	r2, r1
 8005e28:	61da      	str	r2, [r3, #28]
 8005e2a:	e021      	b.n	8005e70 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2b0c      	cmp	r3, #12
 8005e30:	d11c      	bne.n	8005e6c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005e42:	f000 fd73 	bl	800692c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	69da      	ldr	r2, [r3, #28]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005e54:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	69d9      	ldr	r1, [r3, #28]
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	021a      	lsls	r2, r3, #8
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	430a      	orrs	r2, r1
 8005e68:	61da      	str	r2, [r3, #28]
 8005e6a:	e001      	b.n	8005e70 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2200      	movs	r2, #0
 8005e74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005e78:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3718      	adds	r7, #24
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
	...

08005e84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b086      	sub	sp, #24
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	60f8      	str	r0, [r7, #12]
 8005e8c:	60b9      	str	r1, [r7, #8]
 8005e8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e90:	2300      	movs	r3, #0
 8005e92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d101      	bne.n	8005ea2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005e9e:	2302      	movs	r3, #2
 8005ea0:	e0ae      	b.n	8006000 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2b0c      	cmp	r3, #12
 8005eae:	f200 809f 	bhi.w	8005ff0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005eb2:	a201      	add	r2, pc, #4	@ (adr r2, 8005eb8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb8:	08005eed 	.word	0x08005eed
 8005ebc:	08005ff1 	.word	0x08005ff1
 8005ec0:	08005ff1 	.word	0x08005ff1
 8005ec4:	08005ff1 	.word	0x08005ff1
 8005ec8:	08005f2d 	.word	0x08005f2d
 8005ecc:	08005ff1 	.word	0x08005ff1
 8005ed0:	08005ff1 	.word	0x08005ff1
 8005ed4:	08005ff1 	.word	0x08005ff1
 8005ed8:	08005f6f 	.word	0x08005f6f
 8005edc:	08005ff1 	.word	0x08005ff1
 8005ee0:	08005ff1 	.word	0x08005ff1
 8005ee4:	08005ff1 	.word	0x08005ff1
 8005ee8:	08005faf 	.word	0x08005faf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	68b9      	ldr	r1, [r7, #8]
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f000 fa1e 	bl	8006334 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	699a      	ldr	r2, [r3, #24]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f042 0208 	orr.w	r2, r2, #8
 8005f06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	699a      	ldr	r2, [r3, #24]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f022 0204 	bic.w	r2, r2, #4
 8005f16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	6999      	ldr	r1, [r3, #24]
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	691a      	ldr	r2, [r3, #16]
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	430a      	orrs	r2, r1
 8005f28:	619a      	str	r2, [r3, #24]
      break;
 8005f2a:	e064      	b.n	8005ff6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	68b9      	ldr	r1, [r7, #8]
 8005f32:	4618      	mov	r0, r3
 8005f34:	f000 fa6e 	bl	8006414 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	699a      	ldr	r2, [r3, #24]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	699a      	ldr	r2, [r3, #24]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	6999      	ldr	r1, [r3, #24]
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	021a      	lsls	r2, r3, #8
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	430a      	orrs	r2, r1
 8005f6a:	619a      	str	r2, [r3, #24]
      break;
 8005f6c:	e043      	b.n	8005ff6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	68b9      	ldr	r1, [r7, #8]
 8005f74:	4618      	mov	r0, r3
 8005f76:	f000 fac3 	bl	8006500 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	69da      	ldr	r2, [r3, #28]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f042 0208 	orr.w	r2, r2, #8
 8005f88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	69da      	ldr	r2, [r3, #28]
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f022 0204 	bic.w	r2, r2, #4
 8005f98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	69d9      	ldr	r1, [r3, #28]
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	691a      	ldr	r2, [r3, #16]
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	430a      	orrs	r2, r1
 8005faa:	61da      	str	r2, [r3, #28]
      break;
 8005fac:	e023      	b.n	8005ff6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	68b9      	ldr	r1, [r7, #8]
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f000 fb17 	bl	80065e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	69da      	ldr	r2, [r3, #28]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005fc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	69da      	ldr	r2, [r3, #28]
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005fd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	69d9      	ldr	r1, [r3, #28]
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	691b      	ldr	r3, [r3, #16]
 8005fe4:	021a      	lsls	r2, r3, #8
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	430a      	orrs	r2, r1
 8005fec:	61da      	str	r2, [r3, #28]
      break;
 8005fee:	e002      	b.n	8005ff6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	75fb      	strb	r3, [r7, #23]
      break;
 8005ff4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005ffe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006000:	4618      	mov	r0, r3
 8006002:	3718      	adds	r7, #24
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}

08006008 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b084      	sub	sp, #16
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006012:	2300      	movs	r3, #0
 8006014:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800601c:	2b01      	cmp	r3, #1
 800601e:	d101      	bne.n	8006024 <HAL_TIM_ConfigClockSource+0x1c>
 8006020:	2302      	movs	r3, #2
 8006022:	e0b4      	b.n	800618e <HAL_TIM_ConfigClockSource+0x186>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2201      	movs	r2, #1
 8006028:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2202      	movs	r2, #2
 8006030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006042:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800604a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	68ba      	ldr	r2, [r7, #8]
 8006052:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800605c:	d03e      	beq.n	80060dc <HAL_TIM_ConfigClockSource+0xd4>
 800605e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006062:	f200 8087 	bhi.w	8006174 <HAL_TIM_ConfigClockSource+0x16c>
 8006066:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800606a:	f000 8086 	beq.w	800617a <HAL_TIM_ConfigClockSource+0x172>
 800606e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006072:	d87f      	bhi.n	8006174 <HAL_TIM_ConfigClockSource+0x16c>
 8006074:	2b70      	cmp	r3, #112	@ 0x70
 8006076:	d01a      	beq.n	80060ae <HAL_TIM_ConfigClockSource+0xa6>
 8006078:	2b70      	cmp	r3, #112	@ 0x70
 800607a:	d87b      	bhi.n	8006174 <HAL_TIM_ConfigClockSource+0x16c>
 800607c:	2b60      	cmp	r3, #96	@ 0x60
 800607e:	d050      	beq.n	8006122 <HAL_TIM_ConfigClockSource+0x11a>
 8006080:	2b60      	cmp	r3, #96	@ 0x60
 8006082:	d877      	bhi.n	8006174 <HAL_TIM_ConfigClockSource+0x16c>
 8006084:	2b50      	cmp	r3, #80	@ 0x50
 8006086:	d03c      	beq.n	8006102 <HAL_TIM_ConfigClockSource+0xfa>
 8006088:	2b50      	cmp	r3, #80	@ 0x50
 800608a:	d873      	bhi.n	8006174 <HAL_TIM_ConfigClockSource+0x16c>
 800608c:	2b40      	cmp	r3, #64	@ 0x40
 800608e:	d058      	beq.n	8006142 <HAL_TIM_ConfigClockSource+0x13a>
 8006090:	2b40      	cmp	r3, #64	@ 0x40
 8006092:	d86f      	bhi.n	8006174 <HAL_TIM_ConfigClockSource+0x16c>
 8006094:	2b30      	cmp	r3, #48	@ 0x30
 8006096:	d064      	beq.n	8006162 <HAL_TIM_ConfigClockSource+0x15a>
 8006098:	2b30      	cmp	r3, #48	@ 0x30
 800609a:	d86b      	bhi.n	8006174 <HAL_TIM_ConfigClockSource+0x16c>
 800609c:	2b20      	cmp	r3, #32
 800609e:	d060      	beq.n	8006162 <HAL_TIM_ConfigClockSource+0x15a>
 80060a0:	2b20      	cmp	r3, #32
 80060a2:	d867      	bhi.n	8006174 <HAL_TIM_ConfigClockSource+0x16c>
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d05c      	beq.n	8006162 <HAL_TIM_ConfigClockSource+0x15a>
 80060a8:	2b10      	cmp	r3, #16
 80060aa:	d05a      	beq.n	8006162 <HAL_TIM_ConfigClockSource+0x15a>
 80060ac:	e062      	b.n	8006174 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80060be:	f000 fc8d 	bl	80069dc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80060d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	68ba      	ldr	r2, [r7, #8]
 80060d8:	609a      	str	r2, [r3, #8]
      break;
 80060da:	e04f      	b.n	800617c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80060ec:	f000 fc76 	bl	80069dc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	689a      	ldr	r2, [r3, #8]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80060fe:	609a      	str	r2, [r3, #8]
      break;
 8006100:	e03c      	b.n	800617c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800610e:	461a      	mov	r2, r3
 8006110:	f000 fb34 	bl	800677c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	2150      	movs	r1, #80	@ 0x50
 800611a:	4618      	mov	r0, r3
 800611c:	f000 fc43 	bl	80069a6 <TIM_ITRx_SetConfig>
      break;
 8006120:	e02c      	b.n	800617c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800612e:	461a      	mov	r2, r3
 8006130:	f000 fb90 	bl	8006854 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	2160      	movs	r1, #96	@ 0x60
 800613a:	4618      	mov	r0, r3
 800613c:	f000 fc33 	bl	80069a6 <TIM_ITRx_SetConfig>
      break;
 8006140:	e01c      	b.n	800617c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800614e:	461a      	mov	r2, r3
 8006150:	f000 fb14 	bl	800677c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	2140      	movs	r1, #64	@ 0x40
 800615a:	4618      	mov	r0, r3
 800615c:	f000 fc23 	bl	80069a6 <TIM_ITRx_SetConfig>
      break;
 8006160:	e00c      	b.n	800617c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4619      	mov	r1, r3
 800616c:	4610      	mov	r0, r2
 800616e:	f000 fc1a 	bl	80069a6 <TIM_ITRx_SetConfig>
      break;
 8006172:	e003      	b.n	800617c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	73fb      	strb	r3, [r7, #15]
      break;
 8006178:	e000      	b.n	800617c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800617a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800618c:	7bfb      	ldrb	r3, [r7, #15]
}
 800618e:	4618      	mov	r0, r3
 8006190:	3710      	adds	r7, #16
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}

08006196 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006196:	b480      	push	{r7}
 8006198:	b083      	sub	sp, #12
 800619a:	af00      	add	r7, sp, #0
 800619c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800619e:	bf00      	nop
 80061a0:	370c      	adds	r7, #12
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr

080061aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80061aa:	b480      	push	{r7}
 80061ac:	b083      	sub	sp, #12
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80061b2:	bf00      	nop
 80061b4:	370c      	adds	r7, #12
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr

080061be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80061be:	b480      	push	{r7}
 80061c0:	b083      	sub	sp, #12
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80061c6:	bf00      	nop
 80061c8:	370c      	adds	r7, #12
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr

080061d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80061d2:	b480      	push	{r7}
 80061d4:	b083      	sub	sp, #12
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80061da:	bf00      	nop
 80061dc:	370c      	adds	r7, #12
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr
	...

080061e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b085      	sub	sp, #20
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	4a43      	ldr	r2, [pc, #268]	@ (8006308 <TIM_Base_SetConfig+0x120>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d013      	beq.n	8006228 <TIM_Base_SetConfig+0x40>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006206:	d00f      	beq.n	8006228 <TIM_Base_SetConfig+0x40>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	4a40      	ldr	r2, [pc, #256]	@ (800630c <TIM_Base_SetConfig+0x124>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d00b      	beq.n	8006228 <TIM_Base_SetConfig+0x40>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	4a3f      	ldr	r2, [pc, #252]	@ (8006310 <TIM_Base_SetConfig+0x128>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d007      	beq.n	8006228 <TIM_Base_SetConfig+0x40>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	4a3e      	ldr	r2, [pc, #248]	@ (8006314 <TIM_Base_SetConfig+0x12c>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d003      	beq.n	8006228 <TIM_Base_SetConfig+0x40>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	4a3d      	ldr	r2, [pc, #244]	@ (8006318 <TIM_Base_SetConfig+0x130>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d108      	bne.n	800623a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800622e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	68fa      	ldr	r2, [r7, #12]
 8006236:	4313      	orrs	r3, r2
 8006238:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4a32      	ldr	r2, [pc, #200]	@ (8006308 <TIM_Base_SetConfig+0x120>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d02b      	beq.n	800629a <TIM_Base_SetConfig+0xb2>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006248:	d027      	beq.n	800629a <TIM_Base_SetConfig+0xb2>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4a2f      	ldr	r2, [pc, #188]	@ (800630c <TIM_Base_SetConfig+0x124>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d023      	beq.n	800629a <TIM_Base_SetConfig+0xb2>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4a2e      	ldr	r2, [pc, #184]	@ (8006310 <TIM_Base_SetConfig+0x128>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d01f      	beq.n	800629a <TIM_Base_SetConfig+0xb2>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4a2d      	ldr	r2, [pc, #180]	@ (8006314 <TIM_Base_SetConfig+0x12c>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d01b      	beq.n	800629a <TIM_Base_SetConfig+0xb2>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	4a2c      	ldr	r2, [pc, #176]	@ (8006318 <TIM_Base_SetConfig+0x130>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d017      	beq.n	800629a <TIM_Base_SetConfig+0xb2>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4a2b      	ldr	r2, [pc, #172]	@ (800631c <TIM_Base_SetConfig+0x134>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d013      	beq.n	800629a <TIM_Base_SetConfig+0xb2>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	4a2a      	ldr	r2, [pc, #168]	@ (8006320 <TIM_Base_SetConfig+0x138>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d00f      	beq.n	800629a <TIM_Base_SetConfig+0xb2>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4a29      	ldr	r2, [pc, #164]	@ (8006324 <TIM_Base_SetConfig+0x13c>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d00b      	beq.n	800629a <TIM_Base_SetConfig+0xb2>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4a28      	ldr	r2, [pc, #160]	@ (8006328 <TIM_Base_SetConfig+0x140>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d007      	beq.n	800629a <TIM_Base_SetConfig+0xb2>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	4a27      	ldr	r2, [pc, #156]	@ (800632c <TIM_Base_SetConfig+0x144>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d003      	beq.n	800629a <TIM_Base_SetConfig+0xb2>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4a26      	ldr	r2, [pc, #152]	@ (8006330 <TIM_Base_SetConfig+0x148>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d108      	bne.n	80062ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	68db      	ldr	r3, [r3, #12]
 80062a6:	68fa      	ldr	r2, [r7, #12]
 80062a8:	4313      	orrs	r3, r2
 80062aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	695b      	ldr	r3, [r3, #20]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	689a      	ldr	r2, [r3, #8]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	4a0e      	ldr	r2, [pc, #56]	@ (8006308 <TIM_Base_SetConfig+0x120>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d003      	beq.n	80062da <TIM_Base_SetConfig+0xf2>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	4a10      	ldr	r2, [pc, #64]	@ (8006318 <TIM_Base_SetConfig+0x130>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d103      	bne.n	80062e2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	691a      	ldr	r2, [r3, #16]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f043 0204 	orr.w	r2, r3, #4
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2201      	movs	r2, #1
 80062f2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	68fa      	ldr	r2, [r7, #12]
 80062f8:	601a      	str	r2, [r3, #0]
}
 80062fa:	bf00      	nop
 80062fc:	3714      	adds	r7, #20
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr
 8006306:	bf00      	nop
 8006308:	40010000 	.word	0x40010000
 800630c:	40000400 	.word	0x40000400
 8006310:	40000800 	.word	0x40000800
 8006314:	40000c00 	.word	0x40000c00
 8006318:	40010400 	.word	0x40010400
 800631c:	40014000 	.word	0x40014000
 8006320:	40014400 	.word	0x40014400
 8006324:	40014800 	.word	0x40014800
 8006328:	40001800 	.word	0x40001800
 800632c:	40001c00 	.word	0x40001c00
 8006330:	40002000 	.word	0x40002000

08006334 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006334:	b480      	push	{r7}
 8006336:	b087      	sub	sp, #28
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6a1b      	ldr	r3, [r3, #32]
 8006342:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6a1b      	ldr	r3, [r3, #32]
 8006348:	f023 0201 	bic.w	r2, r3, #1
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	699b      	ldr	r3, [r3, #24]
 800635a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006362:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f023 0303 	bic.w	r3, r3, #3
 800636a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	68fa      	ldr	r2, [r7, #12]
 8006372:	4313      	orrs	r3, r2
 8006374:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	f023 0302 	bic.w	r3, r3, #2
 800637c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	697a      	ldr	r2, [r7, #20]
 8006384:	4313      	orrs	r3, r2
 8006386:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	4a20      	ldr	r2, [pc, #128]	@ (800640c <TIM_OC1_SetConfig+0xd8>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d003      	beq.n	8006398 <TIM_OC1_SetConfig+0x64>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	4a1f      	ldr	r2, [pc, #124]	@ (8006410 <TIM_OC1_SetConfig+0xdc>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d10c      	bne.n	80063b2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	f023 0308 	bic.w	r3, r3, #8
 800639e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	68db      	ldr	r3, [r3, #12]
 80063a4:	697a      	ldr	r2, [r7, #20]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	f023 0304 	bic.w	r3, r3, #4
 80063b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	4a15      	ldr	r2, [pc, #84]	@ (800640c <TIM_OC1_SetConfig+0xd8>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d003      	beq.n	80063c2 <TIM_OC1_SetConfig+0x8e>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	4a14      	ldr	r2, [pc, #80]	@ (8006410 <TIM_OC1_SetConfig+0xdc>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d111      	bne.n	80063e6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80063c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80063d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	695b      	ldr	r3, [r3, #20]
 80063d6:	693a      	ldr	r2, [r7, #16]
 80063d8:	4313      	orrs	r3, r2
 80063da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	699b      	ldr	r3, [r3, #24]
 80063e0:	693a      	ldr	r2, [r7, #16]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	693a      	ldr	r2, [r7, #16]
 80063ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	68fa      	ldr	r2, [r7, #12]
 80063f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	685a      	ldr	r2, [r3, #4]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	697a      	ldr	r2, [r7, #20]
 80063fe:	621a      	str	r2, [r3, #32]
}
 8006400:	bf00      	nop
 8006402:	371c      	adds	r7, #28
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr
 800640c:	40010000 	.word	0x40010000
 8006410:	40010400 	.word	0x40010400

08006414 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006414:	b480      	push	{r7}
 8006416:	b087      	sub	sp, #28
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6a1b      	ldr	r3, [r3, #32]
 8006422:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6a1b      	ldr	r3, [r3, #32]
 8006428:	f023 0210 	bic.w	r2, r3, #16
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	699b      	ldr	r3, [r3, #24]
 800643a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006442:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800644a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	021b      	lsls	r3, r3, #8
 8006452:	68fa      	ldr	r2, [r7, #12]
 8006454:	4313      	orrs	r3, r2
 8006456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	f023 0320 	bic.w	r3, r3, #32
 800645e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	011b      	lsls	r3, r3, #4
 8006466:	697a      	ldr	r2, [r7, #20]
 8006468:	4313      	orrs	r3, r2
 800646a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	4a22      	ldr	r2, [pc, #136]	@ (80064f8 <TIM_OC2_SetConfig+0xe4>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d003      	beq.n	800647c <TIM_OC2_SetConfig+0x68>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	4a21      	ldr	r2, [pc, #132]	@ (80064fc <TIM_OC2_SetConfig+0xe8>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d10d      	bne.n	8006498 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006482:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	011b      	lsls	r3, r3, #4
 800648a:	697a      	ldr	r2, [r7, #20]
 800648c:	4313      	orrs	r3, r2
 800648e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006496:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	4a17      	ldr	r2, [pc, #92]	@ (80064f8 <TIM_OC2_SetConfig+0xe4>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d003      	beq.n	80064a8 <TIM_OC2_SetConfig+0x94>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	4a16      	ldr	r2, [pc, #88]	@ (80064fc <TIM_OC2_SetConfig+0xe8>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d113      	bne.n	80064d0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80064ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80064b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	695b      	ldr	r3, [r3, #20]
 80064bc:	009b      	lsls	r3, r3, #2
 80064be:	693a      	ldr	r2, [r7, #16]
 80064c0:	4313      	orrs	r3, r2
 80064c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	699b      	ldr	r3, [r3, #24]
 80064c8:	009b      	lsls	r3, r3, #2
 80064ca:	693a      	ldr	r2, [r7, #16]
 80064cc:	4313      	orrs	r3, r2
 80064ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	693a      	ldr	r2, [r7, #16]
 80064d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	68fa      	ldr	r2, [r7, #12]
 80064da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	685a      	ldr	r2, [r3, #4]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	697a      	ldr	r2, [r7, #20]
 80064e8:	621a      	str	r2, [r3, #32]
}
 80064ea:	bf00      	nop
 80064ec:	371c      	adds	r7, #28
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr
 80064f6:	bf00      	nop
 80064f8:	40010000 	.word	0x40010000
 80064fc:	40010400 	.word	0x40010400

08006500 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006500:	b480      	push	{r7}
 8006502:	b087      	sub	sp, #28
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6a1b      	ldr	r3, [r3, #32]
 800650e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6a1b      	ldr	r3, [r3, #32]
 8006514:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	69db      	ldr	r3, [r3, #28]
 8006526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800652e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f023 0303 	bic.w	r3, r3, #3
 8006536:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	68fa      	ldr	r2, [r7, #12]
 800653e:	4313      	orrs	r3, r2
 8006540:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006548:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	021b      	lsls	r3, r3, #8
 8006550:	697a      	ldr	r2, [r7, #20]
 8006552:	4313      	orrs	r3, r2
 8006554:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4a21      	ldr	r2, [pc, #132]	@ (80065e0 <TIM_OC3_SetConfig+0xe0>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d003      	beq.n	8006566 <TIM_OC3_SetConfig+0x66>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	4a20      	ldr	r2, [pc, #128]	@ (80065e4 <TIM_OC3_SetConfig+0xe4>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d10d      	bne.n	8006582 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800656c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	68db      	ldr	r3, [r3, #12]
 8006572:	021b      	lsls	r3, r3, #8
 8006574:	697a      	ldr	r2, [r7, #20]
 8006576:	4313      	orrs	r3, r2
 8006578:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006580:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	4a16      	ldr	r2, [pc, #88]	@ (80065e0 <TIM_OC3_SetConfig+0xe0>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d003      	beq.n	8006592 <TIM_OC3_SetConfig+0x92>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	4a15      	ldr	r2, [pc, #84]	@ (80065e4 <TIM_OC3_SetConfig+0xe4>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d113      	bne.n	80065ba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006598:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80065a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	695b      	ldr	r3, [r3, #20]
 80065a6:	011b      	lsls	r3, r3, #4
 80065a8:	693a      	ldr	r2, [r7, #16]
 80065aa:	4313      	orrs	r3, r2
 80065ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	699b      	ldr	r3, [r3, #24]
 80065b2:	011b      	lsls	r3, r3, #4
 80065b4:	693a      	ldr	r2, [r7, #16]
 80065b6:	4313      	orrs	r3, r2
 80065b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	693a      	ldr	r2, [r7, #16]
 80065be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	68fa      	ldr	r2, [r7, #12]
 80065c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	685a      	ldr	r2, [r3, #4]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	697a      	ldr	r2, [r7, #20]
 80065d2:	621a      	str	r2, [r3, #32]
}
 80065d4:	bf00      	nop
 80065d6:	371c      	adds	r7, #28
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr
 80065e0:	40010000 	.word	0x40010000
 80065e4:	40010400 	.word	0x40010400

080065e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b087      	sub	sp, #28
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
 80065f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6a1b      	ldr	r3, [r3, #32]
 80065f6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6a1b      	ldr	r3, [r3, #32]
 80065fc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	69db      	ldr	r3, [r3, #28]
 800660e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006616:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800661e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	021b      	lsls	r3, r3, #8
 8006626:	68fa      	ldr	r2, [r7, #12]
 8006628:	4313      	orrs	r3, r2
 800662a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006632:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	031b      	lsls	r3, r3, #12
 800663a:	693a      	ldr	r2, [r7, #16]
 800663c:	4313      	orrs	r3, r2
 800663e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	4a12      	ldr	r2, [pc, #72]	@ (800668c <TIM_OC4_SetConfig+0xa4>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d003      	beq.n	8006650 <TIM_OC4_SetConfig+0x68>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	4a11      	ldr	r2, [pc, #68]	@ (8006690 <TIM_OC4_SetConfig+0xa8>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d109      	bne.n	8006664 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006656:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	695b      	ldr	r3, [r3, #20]
 800665c:	019b      	lsls	r3, r3, #6
 800665e:	697a      	ldr	r2, [r7, #20]
 8006660:	4313      	orrs	r3, r2
 8006662:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	697a      	ldr	r2, [r7, #20]
 8006668:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	68fa      	ldr	r2, [r7, #12]
 800666e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	685a      	ldr	r2, [r3, #4]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	693a      	ldr	r2, [r7, #16]
 800667c:	621a      	str	r2, [r3, #32]
}
 800667e:	bf00      	nop
 8006680:	371c      	adds	r7, #28
 8006682:	46bd      	mov	sp, r7
 8006684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006688:	4770      	bx	lr
 800668a:	bf00      	nop
 800668c:	40010000 	.word	0x40010000
 8006690:	40010400 	.word	0x40010400

08006694 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006694:	b480      	push	{r7}
 8006696:	b087      	sub	sp, #28
 8006698:	af00      	add	r7, sp, #0
 800669a:	60f8      	str	r0, [r7, #12]
 800669c:	60b9      	str	r1, [r7, #8]
 800669e:	607a      	str	r2, [r7, #4]
 80066a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	6a1b      	ldr	r3, [r3, #32]
 80066a6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	6a1b      	ldr	r3, [r3, #32]
 80066ac:	f023 0201 	bic.w	r2, r3, #1
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	699b      	ldr	r3, [r3, #24]
 80066b8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	4a28      	ldr	r2, [pc, #160]	@ (8006760 <TIM_TI1_SetConfig+0xcc>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d01b      	beq.n	80066fa <TIM_TI1_SetConfig+0x66>
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066c8:	d017      	beq.n	80066fa <TIM_TI1_SetConfig+0x66>
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	4a25      	ldr	r2, [pc, #148]	@ (8006764 <TIM_TI1_SetConfig+0xd0>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d013      	beq.n	80066fa <TIM_TI1_SetConfig+0x66>
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	4a24      	ldr	r2, [pc, #144]	@ (8006768 <TIM_TI1_SetConfig+0xd4>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d00f      	beq.n	80066fa <TIM_TI1_SetConfig+0x66>
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	4a23      	ldr	r2, [pc, #140]	@ (800676c <TIM_TI1_SetConfig+0xd8>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d00b      	beq.n	80066fa <TIM_TI1_SetConfig+0x66>
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	4a22      	ldr	r2, [pc, #136]	@ (8006770 <TIM_TI1_SetConfig+0xdc>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d007      	beq.n	80066fa <TIM_TI1_SetConfig+0x66>
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	4a21      	ldr	r2, [pc, #132]	@ (8006774 <TIM_TI1_SetConfig+0xe0>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d003      	beq.n	80066fa <TIM_TI1_SetConfig+0x66>
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	4a20      	ldr	r2, [pc, #128]	@ (8006778 <TIM_TI1_SetConfig+0xe4>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d101      	bne.n	80066fe <TIM_TI1_SetConfig+0x6a>
 80066fa:	2301      	movs	r3, #1
 80066fc:	e000      	b.n	8006700 <TIM_TI1_SetConfig+0x6c>
 80066fe:	2300      	movs	r3, #0
 8006700:	2b00      	cmp	r3, #0
 8006702:	d008      	beq.n	8006716 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	f023 0303 	bic.w	r3, r3, #3
 800670a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800670c:	697a      	ldr	r2, [r7, #20]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	4313      	orrs	r3, r2
 8006712:	617b      	str	r3, [r7, #20]
 8006714:	e003      	b.n	800671e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	f043 0301 	orr.w	r3, r3, #1
 800671c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006724:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	011b      	lsls	r3, r3, #4
 800672a:	b2db      	uxtb	r3, r3
 800672c:	697a      	ldr	r2, [r7, #20]
 800672e:	4313      	orrs	r3, r2
 8006730:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	f023 030a 	bic.w	r3, r3, #10
 8006738:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	f003 030a 	and.w	r3, r3, #10
 8006740:	693a      	ldr	r2, [r7, #16]
 8006742:	4313      	orrs	r3, r2
 8006744:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	697a      	ldr	r2, [r7, #20]
 800674a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	693a      	ldr	r2, [r7, #16]
 8006750:	621a      	str	r2, [r3, #32]
}
 8006752:	bf00      	nop
 8006754:	371c      	adds	r7, #28
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr
 800675e:	bf00      	nop
 8006760:	40010000 	.word	0x40010000
 8006764:	40000400 	.word	0x40000400
 8006768:	40000800 	.word	0x40000800
 800676c:	40000c00 	.word	0x40000c00
 8006770:	40010400 	.word	0x40010400
 8006774:	40014000 	.word	0x40014000
 8006778:	40001800 	.word	0x40001800

0800677c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800677c:	b480      	push	{r7}
 800677e:	b087      	sub	sp, #28
 8006780:	af00      	add	r7, sp, #0
 8006782:	60f8      	str	r0, [r7, #12]
 8006784:	60b9      	str	r1, [r7, #8]
 8006786:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	6a1b      	ldr	r3, [r3, #32]
 800678c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	6a1b      	ldr	r3, [r3, #32]
 8006792:	f023 0201 	bic.w	r2, r3, #1
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	699b      	ldr	r3, [r3, #24]
 800679e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80067a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	011b      	lsls	r3, r3, #4
 80067ac:	693a      	ldr	r2, [r7, #16]
 80067ae:	4313      	orrs	r3, r2
 80067b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	f023 030a 	bic.w	r3, r3, #10
 80067b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80067ba:	697a      	ldr	r2, [r7, #20]
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	4313      	orrs	r3, r2
 80067c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	693a      	ldr	r2, [r7, #16]
 80067c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	697a      	ldr	r2, [r7, #20]
 80067cc:	621a      	str	r2, [r3, #32]
}
 80067ce:	bf00      	nop
 80067d0:	371c      	adds	r7, #28
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr

080067da <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80067da:	b480      	push	{r7}
 80067dc:	b087      	sub	sp, #28
 80067de:	af00      	add	r7, sp, #0
 80067e0:	60f8      	str	r0, [r7, #12]
 80067e2:	60b9      	str	r1, [r7, #8]
 80067e4:	607a      	str	r2, [r7, #4]
 80067e6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	6a1b      	ldr	r3, [r3, #32]
 80067ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	6a1b      	ldr	r3, [r3, #32]
 80067f2:	f023 0210 	bic.w	r2, r3, #16
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	699b      	ldr	r3, [r3, #24]
 80067fe:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006806:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	021b      	lsls	r3, r3, #8
 800680c:	693a      	ldr	r2, [r7, #16]
 800680e:	4313      	orrs	r3, r2
 8006810:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006818:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	031b      	lsls	r3, r3, #12
 800681e:	b29b      	uxth	r3, r3
 8006820:	693a      	ldr	r2, [r7, #16]
 8006822:	4313      	orrs	r3, r2
 8006824:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800682c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	011b      	lsls	r3, r3, #4
 8006832:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006836:	697a      	ldr	r2, [r7, #20]
 8006838:	4313      	orrs	r3, r2
 800683a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	693a      	ldr	r2, [r7, #16]
 8006840:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	697a      	ldr	r2, [r7, #20]
 8006846:	621a      	str	r2, [r3, #32]
}
 8006848:	bf00      	nop
 800684a:	371c      	adds	r7, #28
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr

08006854 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006854:	b480      	push	{r7}
 8006856:	b087      	sub	sp, #28
 8006858:	af00      	add	r7, sp, #0
 800685a:	60f8      	str	r0, [r7, #12]
 800685c:	60b9      	str	r1, [r7, #8]
 800685e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6a1b      	ldr	r3, [r3, #32]
 8006864:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	6a1b      	ldr	r3, [r3, #32]
 800686a:	f023 0210 	bic.w	r2, r3, #16
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	699b      	ldr	r3, [r3, #24]
 8006876:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800687e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	031b      	lsls	r3, r3, #12
 8006884:	693a      	ldr	r2, [r7, #16]
 8006886:	4313      	orrs	r3, r2
 8006888:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006890:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	011b      	lsls	r3, r3, #4
 8006896:	697a      	ldr	r2, [r7, #20]
 8006898:	4313      	orrs	r3, r2
 800689a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	693a      	ldr	r2, [r7, #16]
 80068a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	697a      	ldr	r2, [r7, #20]
 80068a6:	621a      	str	r2, [r3, #32]
}
 80068a8:	bf00      	nop
 80068aa:	371c      	adds	r7, #28
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr

080068b4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b087      	sub	sp, #28
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	60f8      	str	r0, [r7, #12]
 80068bc:	60b9      	str	r1, [r7, #8]
 80068be:	607a      	str	r2, [r7, #4]
 80068c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	6a1b      	ldr	r3, [r3, #32]
 80068c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6a1b      	ldr	r3, [r3, #32]
 80068cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	69db      	ldr	r3, [r3, #28]
 80068d8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	f023 0303 	bic.w	r3, r3, #3
 80068e0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80068e2:	693a      	ldr	r2, [r7, #16]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	4313      	orrs	r3, r2
 80068e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80068f0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	011b      	lsls	r3, r3, #4
 80068f6:	b2db      	uxtb	r3, r3
 80068f8:	693a      	ldr	r2, [r7, #16]
 80068fa:	4313      	orrs	r3, r2
 80068fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8006904:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	021b      	lsls	r3, r3, #8
 800690a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800690e:	697a      	ldr	r2, [r7, #20]
 8006910:	4313      	orrs	r3, r2
 8006912:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	693a      	ldr	r2, [r7, #16]
 8006918:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	697a      	ldr	r2, [r7, #20]
 800691e:	621a      	str	r2, [r3, #32]
}
 8006920:	bf00      	nop
 8006922:	371c      	adds	r7, #28
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr

0800692c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800692c:	b480      	push	{r7}
 800692e:	b087      	sub	sp, #28
 8006930:	af00      	add	r7, sp, #0
 8006932:	60f8      	str	r0, [r7, #12]
 8006934:	60b9      	str	r1, [r7, #8]
 8006936:	607a      	str	r2, [r7, #4]
 8006938:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	6a1b      	ldr	r3, [r3, #32]
 800693e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	6a1b      	ldr	r3, [r3, #32]
 8006944:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	69db      	ldr	r3, [r3, #28]
 8006950:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006958:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	021b      	lsls	r3, r3, #8
 800695e:	693a      	ldr	r2, [r7, #16]
 8006960:	4313      	orrs	r3, r2
 8006962:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800696a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	031b      	lsls	r3, r3, #12
 8006970:	b29b      	uxth	r3, r3
 8006972:	693a      	ldr	r2, [r7, #16]
 8006974:	4313      	orrs	r3, r2
 8006976:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800697e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	031b      	lsls	r3, r3, #12
 8006984:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8006988:	697a      	ldr	r2, [r7, #20]
 800698a:	4313      	orrs	r3, r2
 800698c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	693a      	ldr	r2, [r7, #16]
 8006992:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	697a      	ldr	r2, [r7, #20]
 8006998:	621a      	str	r2, [r3, #32]
}
 800699a:	bf00      	nop
 800699c:	371c      	adds	r7, #28
 800699e:	46bd      	mov	sp, r7
 80069a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a4:	4770      	bx	lr

080069a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80069a6:	b480      	push	{r7}
 80069a8:	b085      	sub	sp, #20
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	6078      	str	r0, [r7, #4]
 80069ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80069be:	683a      	ldr	r2, [r7, #0]
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	4313      	orrs	r3, r2
 80069c4:	f043 0307 	orr.w	r3, r3, #7
 80069c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	68fa      	ldr	r2, [r7, #12]
 80069ce:	609a      	str	r2, [r3, #8]
}
 80069d0:	bf00      	nop
 80069d2:	3714      	adds	r7, #20
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr

080069dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80069dc:	b480      	push	{r7}
 80069de:	b087      	sub	sp, #28
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	60f8      	str	r0, [r7, #12]
 80069e4:	60b9      	str	r1, [r7, #8]
 80069e6:	607a      	str	r2, [r7, #4]
 80069e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80069f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	021a      	lsls	r2, r3, #8
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	431a      	orrs	r2, r3
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	4313      	orrs	r3, r2
 8006a04:	697a      	ldr	r2, [r7, #20]
 8006a06:	4313      	orrs	r3, r2
 8006a08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	697a      	ldr	r2, [r7, #20]
 8006a0e:	609a      	str	r2, [r3, #8]
}
 8006a10:	bf00      	nop
 8006a12:	371c      	adds	r7, #28
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr

08006a1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b087      	sub	sp, #28
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	60f8      	str	r0, [r7, #12]
 8006a24:	60b9      	str	r1, [r7, #8]
 8006a26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	f003 031f 	and.w	r3, r3, #31
 8006a2e:	2201      	movs	r2, #1
 8006a30:	fa02 f303 	lsl.w	r3, r2, r3
 8006a34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	6a1a      	ldr	r2, [r3, #32]
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	43db      	mvns	r3, r3
 8006a3e:	401a      	ands	r2, r3
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	6a1a      	ldr	r2, [r3, #32]
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	f003 031f 	and.w	r3, r3, #31
 8006a4e:	6879      	ldr	r1, [r7, #4]
 8006a50:	fa01 f303 	lsl.w	r3, r1, r3
 8006a54:	431a      	orrs	r2, r3
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	621a      	str	r2, [r3, #32]
}
 8006a5a:	bf00      	nop
 8006a5c:	371c      	adds	r7, #28
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a64:	4770      	bx	lr
	...

08006a68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b085      	sub	sp, #20
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d101      	bne.n	8006a80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a7c:	2302      	movs	r3, #2
 8006a7e:	e05a      	b.n	8006b36 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2201      	movs	r2, #1
 8006a84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2202      	movs	r2, #2
 8006a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	689b      	ldr	r3, [r3, #8]
 8006a9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006aa6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	68fa      	ldr	r2, [r7, #12]
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	68fa      	ldr	r2, [r7, #12]
 8006ab8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a21      	ldr	r2, [pc, #132]	@ (8006b44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d022      	beq.n	8006b0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006acc:	d01d      	beq.n	8006b0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a1d      	ldr	r2, [pc, #116]	@ (8006b48 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d018      	beq.n	8006b0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a1b      	ldr	r2, [pc, #108]	@ (8006b4c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d013      	beq.n	8006b0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a1a      	ldr	r2, [pc, #104]	@ (8006b50 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d00e      	beq.n	8006b0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a18      	ldr	r2, [pc, #96]	@ (8006b54 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d009      	beq.n	8006b0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a17      	ldr	r2, [pc, #92]	@ (8006b58 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d004      	beq.n	8006b0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a15      	ldr	r2, [pc, #84]	@ (8006b5c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d10c      	bne.n	8006b24 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	68ba      	ldr	r2, [r7, #8]
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	68ba      	ldr	r2, [r7, #8]
 8006b22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2201      	movs	r2, #1
 8006b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006b34:	2300      	movs	r3, #0
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3714      	adds	r7, #20
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b40:	4770      	bx	lr
 8006b42:	bf00      	nop
 8006b44:	40010000 	.word	0x40010000
 8006b48:	40000400 	.word	0x40000400
 8006b4c:	40000800 	.word	0x40000800
 8006b50:	40000c00 	.word	0x40000c00
 8006b54:	40010400 	.word	0x40010400
 8006b58:	40014000 	.word	0x40014000
 8006b5c:	40001800 	.word	0x40001800

08006b60 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b083      	sub	sp, #12
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b68:	bf00      	nop
 8006b6a:	370c      	adds	r7, #12
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b72:	4770      	bx	lr

08006b74 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b083      	sub	sp, #12
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b7c:	bf00      	nop
 8006b7e:	370c      	adds	r7, #12
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr

08006b88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b082      	sub	sp, #8
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d101      	bne.n	8006b9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	e042      	b.n	8006c20 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d106      	bne.n	8006bb4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f7fb fc10 	bl	80023d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2224      	movs	r2, #36	@ 0x24
 8006bb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	68da      	ldr	r2, [r3, #12]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006bca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f000 ff95 	bl	8007afc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	691a      	ldr	r2, [r3, #16]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006be0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	695a      	ldr	r2, [r3, #20]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006bf0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	68da      	ldr	r2, [r3, #12]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006c00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2200      	movs	r2, #0
 8006c06:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2220      	movs	r2, #32
 8006c0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2220      	movs	r2, #32
 8006c14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006c1e:	2300      	movs	r3, #0
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3708      	adds	r7, #8
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}

08006c28 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b08c      	sub	sp, #48	@ 0x30
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	60f8      	str	r0, [r7, #12]
 8006c30:	60b9      	str	r1, [r7, #8]
 8006c32:	4613      	mov	r3, r2
 8006c34:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	2b20      	cmp	r3, #32
 8006c40:	d162      	bne.n	8006d08 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d002      	beq.n	8006c4e <HAL_UART_Transmit_DMA+0x26>
 8006c48:	88fb      	ldrh	r3, [r7, #6]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d101      	bne.n	8006c52 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	e05b      	b.n	8006d0a <HAL_UART_Transmit_DMA+0xe2>
    }

    huart->pTxBuffPtr = pData;
 8006c52:	68ba      	ldr	r2, [r7, #8]
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	88fa      	ldrh	r2, [r7, #6]
 8006c5c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	88fa      	ldrh	r2, [r7, #6]
 8006c62:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2200      	movs	r2, #0
 8006c68:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2221      	movs	r2, #33	@ 0x21
 8006c6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c76:	4a27      	ldr	r2, [pc, #156]	@ (8006d14 <HAL_UART_Transmit_DMA+0xec>)
 8006c78:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c7e:	4a26      	ldr	r2, [pc, #152]	@ (8006d18 <HAL_UART_Transmit_DMA+0xf0>)
 8006c80:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c86:	4a25      	ldr	r2, [pc, #148]	@ (8006d1c <HAL_UART_Transmit_DMA+0xf4>)
 8006c88:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c8e:	2200      	movs	r2, #0
 8006c90:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8006c92:	f107 0308 	add.w	r3, r7, #8
 8006c96:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size) != HAL_OK)
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006c9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c9e:	6819      	ldr	r1, [r3, #0]
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	3304      	adds	r3, #4
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	88fb      	ldrh	r3, [r7, #6]
 8006caa:	f7fc fdef 	bl	800388c <HAL_DMA_Start_IT>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d008      	beq.n	8006cc6 <HAL_UART_Transmit_DMA+0x9e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2210      	movs	r2, #16
 8006cb8:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2220      	movs	r2, #32
 8006cbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	e021      	b.n	8006d0a <HAL_UART_Transmit_DMA+0xe2>
    }
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006cce:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	3314      	adds	r3, #20
 8006cd6:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd8:	69bb      	ldr	r3, [r7, #24]
 8006cda:	e853 3f00 	ldrex	r3, [r3]
 8006cde:	617b      	str	r3, [r7, #20]
   return(result);
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ce6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	3314      	adds	r3, #20
 8006cee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006cf0:	627a      	str	r2, [r7, #36]	@ 0x24
 8006cf2:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cf4:	6a39      	ldr	r1, [r7, #32]
 8006cf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006cf8:	e841 2300 	strex	r3, r2, [r1]
 8006cfc:	61fb      	str	r3, [r7, #28]
   return(result);
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d1e5      	bne.n	8006cd0 <HAL_UART_Transmit_DMA+0xa8>

    return HAL_OK;
 8006d04:	2300      	movs	r3, #0
 8006d06:	e000      	b.n	8006d0a <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8006d08:	2302      	movs	r3, #2
  }
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3730      	adds	r7, #48	@ 0x30
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
 8006d12:	bf00      	nop
 8006d14:	08007379 	.word	0x08007379
 8006d18:	08007413 	.word	0x08007413
 8006d1c:	08007597 	.word	0x08007597

08006d20 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b08c      	sub	sp, #48	@ 0x30
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	60f8      	str	r0, [r7, #12]
 8006d28:	60b9      	str	r1, [r7, #8]
 8006d2a:	4613      	mov	r3, r2
 8006d2c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006d34:	b2db      	uxtb	r3, r3
 8006d36:	2b20      	cmp	r3, #32
 8006d38:	d146      	bne.n	8006dc8 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d002      	beq.n	8006d46 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8006d40:	88fb      	ldrh	r3, [r7, #6]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d101      	bne.n	8006d4a <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8006d46:	2301      	movs	r3, #1
 8006d48:	e03f      	b.n	8006dca <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2200      	movs	r2, #0
 8006d54:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8006d56:	88fb      	ldrh	r3, [r7, #6]
 8006d58:	461a      	mov	r2, r3
 8006d5a:	68b9      	ldr	r1, [r7, #8]
 8006d5c:	68f8      	ldr	r0, [r7, #12]
 8006d5e:	f000 fc65 	bl	800762c <UART_Start_Receive_DMA>
 8006d62:	4603      	mov	r3, r0
 8006d64:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d125      	bne.n	8006dbc <HAL_UARTEx_ReceiveToIdle_DMA+0x9c>
    {
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006d70:	2300      	movs	r3, #0
 8006d72:	613b      	str	r3, [r7, #16]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	613b      	str	r3, [r7, #16]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	613b      	str	r3, [r7, #16]
 8006d84:	693b      	ldr	r3, [r7, #16]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	330c      	adds	r3, #12
 8006d8c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d8e:	69bb      	ldr	r3, [r7, #24]
 8006d90:	e853 3f00 	ldrex	r3, [r3]
 8006d94:	617b      	str	r3, [r7, #20]
   return(result);
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	f043 0310 	orr.w	r3, r3, #16
 8006d9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	330c      	adds	r3, #12
 8006da4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006da6:	627a      	str	r2, [r7, #36]	@ 0x24
 8006da8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006daa:	6a39      	ldr	r1, [r7, #32]
 8006dac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006dae:	e841 2300 	strex	r3, r2, [r1]
 8006db2:	61fb      	str	r3, [r7, #28]
   return(result);
 8006db4:	69fb      	ldr	r3, [r7, #28]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d1e5      	bne.n	8006d86 <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
 8006dba:	e002      	b.n	8006dc2 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 8006dc2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006dc6:	e000      	b.n	8006dca <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
  }
  else
  {
    return HAL_BUSY;
 8006dc8:	2302      	movs	r3, #2
  }
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3730      	adds	r7, #48	@ 0x30
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}
	...

08006dd4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b0ba      	sub	sp, #232	@ 0xe8
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	68db      	ldr	r3, [r3, #12]
 8006dec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	695b      	ldr	r3, [r3, #20]
 8006df6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006e00:	2300      	movs	r3, #0
 8006e02:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006e06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e0a:	f003 030f 	and.w	r3, r3, #15
 8006e0e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006e12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d10f      	bne.n	8006e3a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006e1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e1e:	f003 0320 	and.w	r3, r3, #32
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d009      	beq.n	8006e3a <HAL_UART_IRQHandler+0x66>
 8006e26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e2a:	f003 0320 	and.w	r3, r3, #32
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d003      	beq.n	8006e3a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f000 fda4 	bl	8007980 <UART_Receive_IT>
      return;
 8006e38:	e273      	b.n	8007322 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006e3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	f000 80de 	beq.w	8007000 <HAL_UART_IRQHandler+0x22c>
 8006e44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e48:	f003 0301 	and.w	r3, r3, #1
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d106      	bne.n	8006e5e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006e50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e54:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	f000 80d1 	beq.w	8007000 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006e5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e62:	f003 0301 	and.w	r3, r3, #1
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d00b      	beq.n	8006e82 <HAL_UART_IRQHandler+0xae>
 8006e6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d005      	beq.n	8006e82 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e7a:	f043 0201 	orr.w	r2, r3, #1
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e86:	f003 0304 	and.w	r3, r3, #4
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d00b      	beq.n	8006ea6 <HAL_UART_IRQHandler+0xd2>
 8006e8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e92:	f003 0301 	and.w	r3, r3, #1
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d005      	beq.n	8006ea6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e9e:	f043 0202 	orr.w	r2, r3, #2
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006ea6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006eaa:	f003 0302 	and.w	r3, r3, #2
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d00b      	beq.n	8006eca <HAL_UART_IRQHandler+0xf6>
 8006eb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006eb6:	f003 0301 	and.w	r3, r3, #1
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d005      	beq.n	8006eca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ec2:	f043 0204 	orr.w	r2, r3, #4
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006eca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ece:	f003 0308 	and.w	r3, r3, #8
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d011      	beq.n	8006efa <HAL_UART_IRQHandler+0x126>
 8006ed6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006eda:	f003 0320 	and.w	r3, r3, #32
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d105      	bne.n	8006eee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006ee2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ee6:	f003 0301 	and.w	r3, r3, #1
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d005      	beq.n	8006efa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ef2:	f043 0208 	orr.w	r2, r3, #8
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	f000 820a 	beq.w	8007318 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006f04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f08:	f003 0320 	and.w	r3, r3, #32
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d008      	beq.n	8006f22 <HAL_UART_IRQHandler+0x14e>
 8006f10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f14:	f003 0320 	and.w	r3, r3, #32
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d002      	beq.n	8006f22 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f000 fd2f 	bl	8007980 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	695b      	ldr	r3, [r3, #20]
 8006f28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f2c:	2b40      	cmp	r3, #64	@ 0x40
 8006f2e:	bf0c      	ite	eq
 8006f30:	2301      	moveq	r3, #1
 8006f32:	2300      	movne	r3, #0
 8006f34:	b2db      	uxtb	r3, r3
 8006f36:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f3e:	f003 0308 	and.w	r3, r3, #8
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d103      	bne.n	8006f4e <HAL_UART_IRQHandler+0x17a>
 8006f46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d04f      	beq.n	8006fee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f000 fc3a 	bl	80077c8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	695b      	ldr	r3, [r3, #20]
 8006f5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f5e:	2b40      	cmp	r3, #64	@ 0x40
 8006f60:	d141      	bne.n	8006fe6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	3314      	adds	r3, #20
 8006f68:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006f70:	e853 3f00 	ldrex	r3, [r3]
 8006f74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006f78:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006f7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f80:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	3314      	adds	r3, #20
 8006f8a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006f8e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006f92:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f96:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006f9a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006f9e:	e841 2300 	strex	r3, r2, [r1]
 8006fa2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006fa6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d1d9      	bne.n	8006f62 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d013      	beq.n	8006fde <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fba:	4a8a      	ldr	r2, [pc, #552]	@ (80071e4 <HAL_UART_IRQHandler+0x410>)
 8006fbc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f7fc fd2a 	bl	8003a1c <HAL_DMA_Abort_IT>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d016      	beq.n	8006ffc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fd4:	687a      	ldr	r2, [r7, #4]
 8006fd6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006fd8:	4610      	mov	r0, r2
 8006fda:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fdc:	e00e      	b.n	8006ffc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f000 f9c0 	bl	8007364 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fe4:	e00a      	b.n	8006ffc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 f9bc 	bl	8007364 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fec:	e006      	b.n	8006ffc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f000 f9b8 	bl	8007364 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006ffa:	e18d      	b.n	8007318 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ffc:	bf00      	nop
    return;
 8006ffe:	e18b      	b.n	8007318 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007004:	2b01      	cmp	r3, #1
 8007006:	f040 8167 	bne.w	80072d8 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800700a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800700e:	f003 0310 	and.w	r3, r3, #16
 8007012:	2b00      	cmp	r3, #0
 8007014:	f000 8160 	beq.w	80072d8 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8007018:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800701c:	f003 0310 	and.w	r3, r3, #16
 8007020:	2b00      	cmp	r3, #0
 8007022:	f000 8159 	beq.w	80072d8 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007026:	2300      	movs	r3, #0
 8007028:	60bb      	str	r3, [r7, #8]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	60bb      	str	r3, [r7, #8]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	60bb      	str	r3, [r7, #8]
 800703a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	695b      	ldr	r3, [r3, #20]
 8007042:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007046:	2b40      	cmp	r3, #64	@ 0x40
 8007048:	f040 80ce 	bne.w	80071e8 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007058:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800705c:	2b00      	cmp	r3, #0
 800705e:	f000 80a9 	beq.w	80071b4 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007066:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800706a:	429a      	cmp	r2, r3
 800706c:	f080 80a2 	bcs.w	80071b4 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007076:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800707c:	69db      	ldr	r3, [r3, #28]
 800707e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007082:	f000 8088 	beq.w	8007196 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	330c      	adds	r3, #12
 800708c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007090:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007094:	e853 3f00 	ldrex	r3, [r3]
 8007098:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800709c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80070a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80070a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	330c      	adds	r3, #12
 80070ae:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80070b2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80070b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80070be:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80070c2:	e841 2300 	strex	r3, r2, [r1]
 80070c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80070ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d1d9      	bne.n	8007086 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	3314      	adds	r3, #20
 80070d8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80070dc:	e853 3f00 	ldrex	r3, [r3]
 80070e0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80070e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80070e4:	f023 0301 	bic.w	r3, r3, #1
 80070e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	3314      	adds	r3, #20
 80070f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80070f6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80070fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070fc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80070fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007102:	e841 2300 	strex	r3, r2, [r1]
 8007106:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007108:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800710a:	2b00      	cmp	r3, #0
 800710c:	d1e1      	bne.n	80070d2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	3314      	adds	r3, #20
 8007114:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007116:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007118:	e853 3f00 	ldrex	r3, [r3]
 800711c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800711e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007120:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007124:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	3314      	adds	r3, #20
 800712e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007132:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007134:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007136:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007138:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800713a:	e841 2300 	strex	r3, r2, [r1]
 800713e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007140:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007142:	2b00      	cmp	r3, #0
 8007144:	d1e3      	bne.n	800710e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2220      	movs	r2, #32
 800714a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2200      	movs	r2, #0
 8007152:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	330c      	adds	r3, #12
 800715a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800715c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800715e:	e853 3f00 	ldrex	r3, [r3]
 8007162:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007164:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007166:	f023 0310 	bic.w	r3, r3, #16
 800716a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	330c      	adds	r3, #12
 8007174:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007178:	65ba      	str	r2, [r7, #88]	@ 0x58
 800717a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800717c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800717e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007180:	e841 2300 	strex	r3, r2, [r1]
 8007184:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007186:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007188:	2b00      	cmp	r3, #0
 800718a:	d1e3      	bne.n	8007154 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007190:	4618      	mov	r0, r3
 8007192:	f7fc fbd3 	bl	800393c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2202      	movs	r2, #2
 800719a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80071a4:	b29b      	uxth	r3, r3
 80071a6:	1ad3      	subs	r3, r2, r3
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	4619      	mov	r1, r3
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f7fa fa2d 	bl	800160c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80071b2:	e0b3      	b.n	800731c <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80071b8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80071bc:	429a      	cmp	r2, r3
 80071be:	f040 80ad 	bne.w	800731c <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071c6:	69db      	ldr	r3, [r3, #28]
 80071c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071cc:	f040 80a6 	bne.w	800731c <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2202      	movs	r2, #2
 80071d4:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80071da:	4619      	mov	r1, r3
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f7fa fa15 	bl	800160c <HAL_UARTEx_RxEventCallback>
      return;
 80071e2:	e09b      	b.n	800731c <HAL_UART_IRQHandler+0x548>
 80071e4:	0800788f 	.word	0x0800788f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	1ad3      	subs	r3, r2, r3
 80071f4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	2b00      	cmp	r3, #0
 8007200:	f000 808e 	beq.w	8007320 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8007204:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007208:	2b00      	cmp	r3, #0
 800720a:	f000 8089 	beq.w	8007320 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	330c      	adds	r3, #12
 8007214:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007218:	e853 3f00 	ldrex	r3, [r3]
 800721c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800721e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007220:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007224:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	330c      	adds	r3, #12
 800722e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007232:	647a      	str	r2, [r7, #68]	@ 0x44
 8007234:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007236:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007238:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800723a:	e841 2300 	strex	r3, r2, [r1]
 800723e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007240:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007242:	2b00      	cmp	r3, #0
 8007244:	d1e3      	bne.n	800720e <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	3314      	adds	r3, #20
 800724c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800724e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007250:	e853 3f00 	ldrex	r3, [r3]
 8007254:	623b      	str	r3, [r7, #32]
   return(result);
 8007256:	6a3b      	ldr	r3, [r7, #32]
 8007258:	f023 0301 	bic.w	r3, r3, #1
 800725c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	3314      	adds	r3, #20
 8007266:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800726a:	633a      	str	r2, [r7, #48]	@ 0x30
 800726c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800726e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007270:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007272:	e841 2300 	strex	r3, r2, [r1]
 8007276:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800727a:	2b00      	cmp	r3, #0
 800727c:	d1e3      	bne.n	8007246 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2220      	movs	r2, #32
 8007282:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2200      	movs	r2, #0
 800728a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	330c      	adds	r3, #12
 8007292:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	e853 3f00 	ldrex	r3, [r3]
 800729a:	60fb      	str	r3, [r7, #12]
   return(result);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f023 0310 	bic.w	r3, r3, #16
 80072a2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	330c      	adds	r3, #12
 80072ac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80072b0:	61fa      	str	r2, [r7, #28]
 80072b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b4:	69b9      	ldr	r1, [r7, #24]
 80072b6:	69fa      	ldr	r2, [r7, #28]
 80072b8:	e841 2300 	strex	r3, r2, [r1]
 80072bc:	617b      	str	r3, [r7, #20]
   return(result);
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d1e3      	bne.n	800728c <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2202      	movs	r2, #2
 80072c8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80072ca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80072ce:	4619      	mov	r1, r3
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f7fa f99b 	bl	800160c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80072d6:	e023      	b.n	8007320 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80072d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d009      	beq.n	80072f8 <HAL_UART_IRQHandler+0x524>
 80072e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80072e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d003      	beq.n	80072f8 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f000 fadd 	bl	80078b0 <UART_Transmit_IT>
    return;
 80072f6:	e014      	b.n	8007322 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80072f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007300:	2b00      	cmp	r3, #0
 8007302:	d00e      	beq.n	8007322 <HAL_UART_IRQHandler+0x54e>
 8007304:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007308:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800730c:	2b00      	cmp	r3, #0
 800730e:	d008      	beq.n	8007322 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f000 fb1d 	bl	8007950 <UART_EndTransmit_IT>
    return;
 8007316:	e004      	b.n	8007322 <HAL_UART_IRQHandler+0x54e>
    return;
 8007318:	bf00      	nop
 800731a:	e002      	b.n	8007322 <HAL_UART_IRQHandler+0x54e>
      return;
 800731c:	bf00      	nop
 800731e:	e000      	b.n	8007322 <HAL_UART_IRQHandler+0x54e>
      return;
 8007320:	bf00      	nop
  }
}
 8007322:	37e8      	adds	r7, #232	@ 0xe8
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}

08007328 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007328:	b480      	push	{r7}
 800732a:	b083      	sub	sp, #12
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007330:	bf00      	nop
 8007332:	370c      	adds	r7, #12
 8007334:	46bd      	mov	sp, r7
 8007336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733a:	4770      	bx	lr

0800733c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800733c:	b480      	push	{r7}
 800733e:	b083      	sub	sp, #12
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007344:	bf00      	nop
 8007346:	370c      	adds	r7, #12
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr

08007350 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007350:	b480      	push	{r7}
 8007352:	b083      	sub	sp, #12
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007358:	bf00      	nop
 800735a:	370c      	adds	r7, #12
 800735c:	46bd      	mov	sp, r7
 800735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007362:	4770      	bx	lr

08007364 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007364:	b480      	push	{r7}
 8007366:	b083      	sub	sp, #12
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800736c:	bf00      	nop
 800736e:	370c      	adds	r7, #12
 8007370:	46bd      	mov	sp, r7
 8007372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007376:	4770      	bx	lr

08007378 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b090      	sub	sp, #64	@ 0x40
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007384:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007390:	2b00      	cmp	r3, #0
 8007392:	d137      	bne.n	8007404 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007394:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007396:	2200      	movs	r2, #0
 8007398:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800739a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	3314      	adds	r3, #20
 80073a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073a4:	e853 3f00 	ldrex	r3, [r3]
 80073a8:	623b      	str	r3, [r7, #32]
   return(result);
 80073aa:	6a3b      	ldr	r3, [r7, #32]
 80073ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80073b0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80073b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	3314      	adds	r3, #20
 80073b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80073ba:	633a      	str	r2, [r7, #48]	@ 0x30
 80073bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80073c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073c2:	e841 2300 	strex	r3, r2, [r1]
 80073c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80073c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d1e5      	bne.n	800739a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80073ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	330c      	adds	r3, #12
 80073d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	e853 3f00 	ldrex	r3, [r3]
 80073dc:	60fb      	str	r3, [r7, #12]
   return(result);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80073e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	330c      	adds	r3, #12
 80073ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80073ee:	61fa      	str	r2, [r7, #28]
 80073f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073f2:	69b9      	ldr	r1, [r7, #24]
 80073f4:	69fa      	ldr	r2, [r7, #28]
 80073f6:	e841 2300 	strex	r3, r2, [r1]
 80073fa:	617b      	str	r3, [r7, #20]
   return(result);
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d1e5      	bne.n	80073ce <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007402:	e002      	b.n	800740a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007404:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8007406:	f7fa fa77 	bl	80018f8 <HAL_UART_TxCpltCallback>
}
 800740a:	bf00      	nop
 800740c:	3740      	adds	r7, #64	@ 0x40
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}

08007412 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007412:	b580      	push	{r7, lr}
 8007414:	b084      	sub	sp, #16
 8007416:	af00      	add	r7, sp, #0
 8007418:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800741e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007420:	68f8      	ldr	r0, [r7, #12]
 8007422:	f7ff ff81 	bl	8007328 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007426:	bf00      	nop
 8007428:	3710      	adds	r7, #16
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}

0800742e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800742e:	b580      	push	{r7, lr}
 8007430:	b09c      	sub	sp, #112	@ 0x70
 8007432:	af00      	add	r7, sp, #0
 8007434:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800743a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007446:	2b00      	cmp	r3, #0
 8007448:	d172      	bne.n	8007530 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800744a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800744c:	2200      	movs	r2, #0
 800744e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007450:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	330c      	adds	r3, #12
 8007456:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007458:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800745a:	e853 3f00 	ldrex	r3, [r3]
 800745e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007460:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007462:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007466:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007468:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	330c      	adds	r3, #12
 800746e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007470:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007472:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007474:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007476:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007478:	e841 2300 	strex	r3, r2, [r1]
 800747c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800747e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007480:	2b00      	cmp	r3, #0
 8007482:	d1e5      	bne.n	8007450 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007484:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	3314      	adds	r3, #20
 800748a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800748c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800748e:	e853 3f00 	ldrex	r3, [r3]
 8007492:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007494:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007496:	f023 0301 	bic.w	r3, r3, #1
 800749a:	667b      	str	r3, [r7, #100]	@ 0x64
 800749c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	3314      	adds	r3, #20
 80074a2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80074a4:	647a      	str	r2, [r7, #68]	@ 0x44
 80074a6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80074aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80074ac:	e841 2300 	strex	r3, r2, [r1]
 80074b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80074b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d1e5      	bne.n	8007484 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	3314      	adds	r3, #20
 80074be:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074c2:	e853 3f00 	ldrex	r3, [r3]
 80074c6:	623b      	str	r3, [r7, #32]
   return(result);
 80074c8:	6a3b      	ldr	r3, [r7, #32]
 80074ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80074ce:	663b      	str	r3, [r7, #96]	@ 0x60
 80074d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	3314      	adds	r3, #20
 80074d6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80074d8:	633a      	str	r2, [r7, #48]	@ 0x30
 80074da:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80074de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074e0:	e841 2300 	strex	r3, r2, [r1]
 80074e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80074e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d1e5      	bne.n	80074b8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80074ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80074ee:	2220      	movs	r2, #32
 80074f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80074f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074f8:	2b01      	cmp	r3, #1
 80074fa:	d119      	bne.n	8007530 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	330c      	adds	r3, #12
 8007502:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	e853 3f00 	ldrex	r3, [r3]
 800750a:	60fb      	str	r3, [r7, #12]
   return(result);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f023 0310 	bic.w	r3, r3, #16
 8007512:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007514:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	330c      	adds	r3, #12
 800751a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800751c:	61fa      	str	r2, [r7, #28]
 800751e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007520:	69b9      	ldr	r1, [r7, #24]
 8007522:	69fa      	ldr	r2, [r7, #28]
 8007524:	e841 2300 	strex	r3, r2, [r1]
 8007528:	617b      	str	r3, [r7, #20]
   return(result);
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d1e5      	bne.n	80074fc <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007530:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007532:	2200      	movs	r2, #0
 8007534:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007536:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800753a:	2b01      	cmp	r3, #1
 800753c:	d106      	bne.n	800754c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800753e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007540:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007542:	4619      	mov	r1, r3
 8007544:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007546:	f7fa f861 	bl	800160c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800754a:	e002      	b.n	8007552 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800754c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800754e:	f7ff fef5 	bl	800733c <HAL_UART_RxCpltCallback>
}
 8007552:	bf00      	nop
 8007554:	3770      	adds	r7, #112	@ 0x70
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}

0800755a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800755a:	b580      	push	{r7, lr}
 800755c:	b084      	sub	sp, #16
 800755e:	af00      	add	r7, sp, #0
 8007560:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007566:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2201      	movs	r2, #1
 800756c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007572:	2b01      	cmp	r3, #1
 8007574:	d108      	bne.n	8007588 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800757a:	085b      	lsrs	r3, r3, #1
 800757c:	b29b      	uxth	r3, r3
 800757e:	4619      	mov	r1, r3
 8007580:	68f8      	ldr	r0, [r7, #12]
 8007582:	f7fa f843 	bl	800160c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007586:	e002      	b.n	800758e <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8007588:	68f8      	ldr	r0, [r7, #12]
 800758a:	f7ff fee1 	bl	8007350 <HAL_UART_RxHalfCpltCallback>
}
 800758e:	bf00      	nop
 8007590:	3710      	adds	r7, #16
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}

08007596 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007596:	b580      	push	{r7, lr}
 8007598:	b084      	sub	sp, #16
 800759a:	af00      	add	r7, sp, #0
 800759c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800759e:	2300      	movs	r3, #0
 80075a0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075a6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	695b      	ldr	r3, [r3, #20]
 80075ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075b2:	2b80      	cmp	r3, #128	@ 0x80
 80075b4:	bf0c      	ite	eq
 80075b6:	2301      	moveq	r3, #1
 80075b8:	2300      	movne	r3, #0
 80075ba:	b2db      	uxtb	r3, r3
 80075bc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075c4:	b2db      	uxtb	r3, r3
 80075c6:	2b21      	cmp	r3, #33	@ 0x21
 80075c8:	d108      	bne.n	80075dc <UART_DMAError+0x46>
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d005      	beq.n	80075dc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	2200      	movs	r2, #0
 80075d4:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80075d6:	68b8      	ldr	r0, [r7, #8]
 80075d8:	f000 f8ce 	bl	8007778 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	695b      	ldr	r3, [r3, #20]
 80075e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075e6:	2b40      	cmp	r3, #64	@ 0x40
 80075e8:	bf0c      	ite	eq
 80075ea:	2301      	moveq	r3, #1
 80075ec:	2300      	movne	r3, #0
 80075ee:	b2db      	uxtb	r3, r3
 80075f0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80075f8:	b2db      	uxtb	r3, r3
 80075fa:	2b22      	cmp	r3, #34	@ 0x22
 80075fc:	d108      	bne.n	8007610 <UART_DMAError+0x7a>
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d005      	beq.n	8007610 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	2200      	movs	r2, #0
 8007608:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800760a:	68b8      	ldr	r0, [r7, #8]
 800760c:	f000 f8dc 	bl	80077c8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007614:	f043 0210 	orr.w	r2, r3, #16
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800761c:	68b8      	ldr	r0, [r7, #8]
 800761e:	f7ff fea1 	bl	8007364 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007622:	bf00      	nop
 8007624:	3710      	adds	r7, #16
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}
	...

0800762c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b098      	sub	sp, #96	@ 0x60
 8007630:	af00      	add	r7, sp, #0
 8007632:	60f8      	str	r0, [r7, #12]
 8007634:	60b9      	str	r1, [r7, #8]
 8007636:	4613      	mov	r3, r2
 8007638:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800763a:	68ba      	ldr	r2, [r7, #8]
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	88fa      	ldrh	r2, [r7, #6]
 8007644:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2200      	movs	r2, #0
 800764a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2222      	movs	r2, #34	@ 0x22
 8007650:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007658:	4a44      	ldr	r2, [pc, #272]	@ (800776c <UART_Start_Receive_DMA+0x140>)
 800765a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007660:	4a43      	ldr	r2, [pc, #268]	@ (8007770 <UART_Start_Receive_DMA+0x144>)
 8007662:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007668:	4a42      	ldr	r2, [pc, #264]	@ (8007774 <UART_Start_Receive_DMA+0x148>)
 800766a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007670:	2200      	movs	r2, #0
 8007672:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007674:	f107 0308 	add.w	r3, r7, #8
 8007678:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	3304      	adds	r3, #4
 8007684:	4619      	mov	r1, r3
 8007686:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007688:	681a      	ldr	r2, [r3, #0]
 800768a:	88fb      	ldrh	r3, [r7, #6]
 800768c:	f7fc f8fe 	bl	800388c <HAL_DMA_Start_IT>
 8007690:	4603      	mov	r3, r0
 8007692:	2b00      	cmp	r3, #0
 8007694:	d008      	beq.n	80076a8 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2210      	movs	r2, #16
 800769a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2220      	movs	r2, #32
 80076a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 80076a4:	2301      	movs	r3, #1
 80076a6:	e05d      	b.n	8007764 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80076a8:	2300      	movs	r3, #0
 80076aa:	613b      	str	r3, [r7, #16]
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	613b      	str	r3, [r7, #16]
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	613b      	str	r3, [r7, #16]
 80076bc:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	691b      	ldr	r3, [r3, #16]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d019      	beq.n	80076fa <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	330c      	adds	r3, #12
 80076cc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80076d0:	e853 3f00 	ldrex	r3, [r3]
 80076d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80076d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80076dc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	330c      	adds	r3, #12
 80076e4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80076e6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80076e8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ea:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80076ec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80076ee:	e841 2300 	strex	r3, r2, [r1]
 80076f2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80076f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d1e5      	bne.n	80076c6 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	3314      	adds	r3, #20
 8007700:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007704:	e853 3f00 	ldrex	r3, [r3]
 8007708:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800770a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800770c:	f043 0301 	orr.w	r3, r3, #1
 8007710:	657b      	str	r3, [r7, #84]	@ 0x54
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	3314      	adds	r3, #20
 8007718:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800771a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800771c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800771e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007720:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007722:	e841 2300 	strex	r3, r2, [r1]
 8007726:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800772a:	2b00      	cmp	r3, #0
 800772c:	d1e5      	bne.n	80076fa <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	3314      	adds	r3, #20
 8007734:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007736:	69bb      	ldr	r3, [r7, #24]
 8007738:	e853 3f00 	ldrex	r3, [r3]
 800773c:	617b      	str	r3, [r7, #20]
   return(result);
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007744:	653b      	str	r3, [r7, #80]	@ 0x50
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	3314      	adds	r3, #20
 800774c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800774e:	627a      	str	r2, [r7, #36]	@ 0x24
 8007750:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007752:	6a39      	ldr	r1, [r7, #32]
 8007754:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007756:	e841 2300 	strex	r3, r2, [r1]
 800775a:	61fb      	str	r3, [r7, #28]
   return(result);
 800775c:	69fb      	ldr	r3, [r7, #28]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d1e5      	bne.n	800772e <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 8007762:	2300      	movs	r3, #0
}
 8007764:	4618      	mov	r0, r3
 8007766:	3760      	adds	r7, #96	@ 0x60
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}
 800776c:	0800742f 	.word	0x0800742f
 8007770:	0800755b 	.word	0x0800755b
 8007774:	08007597 	.word	0x08007597

08007778 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007778:	b480      	push	{r7}
 800777a:	b089      	sub	sp, #36	@ 0x24
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	330c      	adds	r3, #12
 8007786:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	e853 3f00 	ldrex	r3, [r3]
 800778e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007796:	61fb      	str	r3, [r7, #28]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	330c      	adds	r3, #12
 800779e:	69fa      	ldr	r2, [r7, #28]
 80077a0:	61ba      	str	r2, [r7, #24]
 80077a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077a4:	6979      	ldr	r1, [r7, #20]
 80077a6:	69ba      	ldr	r2, [r7, #24]
 80077a8:	e841 2300 	strex	r3, r2, [r1]
 80077ac:	613b      	str	r3, [r7, #16]
   return(result);
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d1e5      	bne.n	8007780 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2220      	movs	r2, #32
 80077b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80077bc:	bf00      	nop
 80077be:	3724      	adds	r7, #36	@ 0x24
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr

080077c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b095      	sub	sp, #84	@ 0x54
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	330c      	adds	r3, #12
 80077d6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077da:	e853 3f00 	ldrex	r3, [r3]
 80077de:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80077e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80077e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	330c      	adds	r3, #12
 80077ee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80077f0:	643a      	str	r2, [r7, #64]	@ 0x40
 80077f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077f4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80077f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80077f8:	e841 2300 	strex	r3, r2, [r1]
 80077fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80077fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007800:	2b00      	cmp	r3, #0
 8007802:	d1e5      	bne.n	80077d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	3314      	adds	r3, #20
 800780a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800780c:	6a3b      	ldr	r3, [r7, #32]
 800780e:	e853 3f00 	ldrex	r3, [r3]
 8007812:	61fb      	str	r3, [r7, #28]
   return(result);
 8007814:	69fb      	ldr	r3, [r7, #28]
 8007816:	f023 0301 	bic.w	r3, r3, #1
 800781a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	3314      	adds	r3, #20
 8007822:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007824:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007826:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007828:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800782a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800782c:	e841 2300 	strex	r3, r2, [r1]
 8007830:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007834:	2b00      	cmp	r3, #0
 8007836:	d1e5      	bne.n	8007804 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800783c:	2b01      	cmp	r3, #1
 800783e:	d119      	bne.n	8007874 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	330c      	adds	r3, #12
 8007846:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	e853 3f00 	ldrex	r3, [r3]
 800784e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	f023 0310 	bic.w	r3, r3, #16
 8007856:	647b      	str	r3, [r7, #68]	@ 0x44
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	330c      	adds	r3, #12
 800785e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007860:	61ba      	str	r2, [r7, #24]
 8007862:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007864:	6979      	ldr	r1, [r7, #20]
 8007866:	69ba      	ldr	r2, [r7, #24]
 8007868:	e841 2300 	strex	r3, r2, [r1]
 800786c:	613b      	str	r3, [r7, #16]
   return(result);
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d1e5      	bne.n	8007840 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2220      	movs	r2, #32
 8007878:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2200      	movs	r2, #0
 8007880:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007882:	bf00      	nop
 8007884:	3754      	adds	r7, #84	@ 0x54
 8007886:	46bd      	mov	sp, r7
 8007888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788c:	4770      	bx	lr

0800788e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800788e:	b580      	push	{r7, lr}
 8007890:	b084      	sub	sp, #16
 8007892:	af00      	add	r7, sp, #0
 8007894:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800789a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2200      	movs	r2, #0
 80078a0:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80078a2:	68f8      	ldr	r0, [r7, #12]
 80078a4:	f7ff fd5e 	bl	8007364 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078a8:	bf00      	nop
 80078aa:	3710      	adds	r7, #16
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}

080078b0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b085      	sub	sp, #20
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80078be:	b2db      	uxtb	r3, r3
 80078c0:	2b21      	cmp	r3, #33	@ 0x21
 80078c2:	d13e      	bne.n	8007942 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	689b      	ldr	r3, [r3, #8]
 80078c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078cc:	d114      	bne.n	80078f8 <UART_Transmit_IT+0x48>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	691b      	ldr	r3, [r3, #16]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d110      	bne.n	80078f8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6a1b      	ldr	r3, [r3, #32]
 80078da:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	881b      	ldrh	r3, [r3, #0]
 80078e0:	461a      	mov	r2, r3
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80078ea:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6a1b      	ldr	r3, [r3, #32]
 80078f0:	1c9a      	adds	r2, r3, #2
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	621a      	str	r2, [r3, #32]
 80078f6:	e008      	b.n	800790a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6a1b      	ldr	r3, [r3, #32]
 80078fc:	1c59      	adds	r1, r3, #1
 80078fe:	687a      	ldr	r2, [r7, #4]
 8007900:	6211      	str	r1, [r2, #32]
 8007902:	781a      	ldrb	r2, [r3, #0]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800790e:	b29b      	uxth	r3, r3
 8007910:	3b01      	subs	r3, #1
 8007912:	b29b      	uxth	r3, r3
 8007914:	687a      	ldr	r2, [r7, #4]
 8007916:	4619      	mov	r1, r3
 8007918:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800791a:	2b00      	cmp	r3, #0
 800791c:	d10f      	bne.n	800793e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	68da      	ldr	r2, [r3, #12]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800792c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	68da      	ldr	r2, [r3, #12]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800793c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800793e:	2300      	movs	r3, #0
 8007940:	e000      	b.n	8007944 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007942:	2302      	movs	r3, #2
  }
}
 8007944:	4618      	mov	r0, r3
 8007946:	3714      	adds	r7, #20
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr

08007950 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b082      	sub	sp, #8
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	68da      	ldr	r2, [r3, #12]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007966:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2220      	movs	r2, #32
 800796c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f7f9 ffc1 	bl	80018f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007976:	2300      	movs	r3, #0
}
 8007978:	4618      	mov	r0, r3
 800797a:	3708      	adds	r7, #8
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b08c      	sub	sp, #48	@ 0x30
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8007988:	2300      	movs	r3, #0
 800798a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800798c:	2300      	movs	r3, #0
 800798e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007996:	b2db      	uxtb	r3, r3
 8007998:	2b22      	cmp	r3, #34	@ 0x22
 800799a:	f040 80aa 	bne.w	8007af2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	689b      	ldr	r3, [r3, #8]
 80079a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079a6:	d115      	bne.n	80079d4 <UART_Receive_IT+0x54>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	691b      	ldr	r3, [r3, #16]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d111      	bne.n	80079d4 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079b4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	b29b      	uxth	r3, r3
 80079be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079c2:	b29a      	uxth	r2, r3
 80079c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079c6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079cc:	1c9a      	adds	r2, r3, #2
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	629a      	str	r2, [r3, #40]	@ 0x28
 80079d2:	e024      	b.n	8007a1e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	689b      	ldr	r3, [r3, #8]
 80079de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079e2:	d007      	beq.n	80079f4 <UART_Receive_IT+0x74>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	689b      	ldr	r3, [r3, #8]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d10a      	bne.n	8007a02 <UART_Receive_IT+0x82>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	691b      	ldr	r3, [r3, #16]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d106      	bne.n	8007a02 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	b2da      	uxtb	r2, r3
 80079fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079fe:	701a      	strb	r2, [r3, #0]
 8007a00:	e008      	b.n	8007a14 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	685b      	ldr	r3, [r3, #4]
 8007a08:	b2db      	uxtb	r3, r3
 8007a0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a0e:	b2da      	uxtb	r2, r3
 8007a10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a12:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a18:	1c5a      	adds	r2, r3, #1
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007a22:	b29b      	uxth	r3, r3
 8007a24:	3b01      	subs	r3, #1
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	687a      	ldr	r2, [r7, #4]
 8007a2a:	4619      	mov	r1, r3
 8007a2c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d15d      	bne.n	8007aee <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	68da      	ldr	r2, [r3, #12]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f022 0220 	bic.w	r2, r2, #32
 8007a40:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	68da      	ldr	r2, [r3, #12]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007a50:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	695a      	ldr	r2, [r3, #20]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f022 0201 	bic.w	r2, r2, #1
 8007a60:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2220      	movs	r2, #32
 8007a66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d135      	bne.n	8007ae4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	330c      	adds	r3, #12
 8007a84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	e853 3f00 	ldrex	r3, [r3]
 8007a8c:	613b      	str	r3, [r7, #16]
   return(result);
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	f023 0310 	bic.w	r3, r3, #16
 8007a94:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	330c      	adds	r3, #12
 8007a9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a9e:	623a      	str	r2, [r7, #32]
 8007aa0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa2:	69f9      	ldr	r1, [r7, #28]
 8007aa4:	6a3a      	ldr	r2, [r7, #32]
 8007aa6:	e841 2300 	strex	r3, r2, [r1]
 8007aaa:	61bb      	str	r3, [r7, #24]
   return(result);
 8007aac:	69bb      	ldr	r3, [r7, #24]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d1e5      	bne.n	8007a7e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f003 0310 	and.w	r3, r3, #16
 8007abc:	2b10      	cmp	r3, #16
 8007abe:	d10a      	bne.n	8007ad6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	60fb      	str	r3, [r7, #12]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	60fb      	str	r3, [r7, #12]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	60fb      	str	r3, [r7, #12]
 8007ad4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007ada:	4619      	mov	r1, r3
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f7f9 fd95 	bl	800160c <HAL_UARTEx_RxEventCallback>
 8007ae2:	e002      	b.n	8007aea <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f7ff fc29 	bl	800733c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007aea:	2300      	movs	r3, #0
 8007aec:	e002      	b.n	8007af4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007aee:	2300      	movs	r3, #0
 8007af0:	e000      	b.n	8007af4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007af2:	2302      	movs	r3, #2
  }
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	3730      	adds	r7, #48	@ 0x30
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}

08007afc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007afc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b00:	b0c0      	sub	sp, #256	@ 0x100
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	691b      	ldr	r3, [r3, #16]
 8007b10:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b18:	68d9      	ldr	r1, [r3, #12]
 8007b1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b1e:	681a      	ldr	r2, [r3, #0]
 8007b20:	ea40 0301 	orr.w	r3, r0, r1
 8007b24:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b2a:	689a      	ldr	r2, [r3, #8]
 8007b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b30:	691b      	ldr	r3, [r3, #16]
 8007b32:	431a      	orrs	r2, r3
 8007b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b38:	695b      	ldr	r3, [r3, #20]
 8007b3a:	431a      	orrs	r2, r3
 8007b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b40:	69db      	ldr	r3, [r3, #28]
 8007b42:	4313      	orrs	r3, r2
 8007b44:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	68db      	ldr	r3, [r3, #12]
 8007b50:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007b54:	f021 010c 	bic.w	r1, r1, #12
 8007b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b5c:	681a      	ldr	r2, [r3, #0]
 8007b5e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007b62:	430b      	orrs	r3, r1
 8007b64:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	695b      	ldr	r3, [r3, #20]
 8007b6e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b76:	6999      	ldr	r1, [r3, #24]
 8007b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b7c:	681a      	ldr	r2, [r3, #0]
 8007b7e:	ea40 0301 	orr.w	r3, r0, r1
 8007b82:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b88:	681a      	ldr	r2, [r3, #0]
 8007b8a:	4b8f      	ldr	r3, [pc, #572]	@ (8007dc8 <UART_SetConfig+0x2cc>)
 8007b8c:	429a      	cmp	r2, r3
 8007b8e:	d005      	beq.n	8007b9c <UART_SetConfig+0xa0>
 8007b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b94:	681a      	ldr	r2, [r3, #0]
 8007b96:	4b8d      	ldr	r3, [pc, #564]	@ (8007dcc <UART_SetConfig+0x2d0>)
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d104      	bne.n	8007ba6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007b9c:	f7fd fc62 	bl	8005464 <HAL_RCC_GetPCLK2Freq>
 8007ba0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007ba4:	e003      	b.n	8007bae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007ba6:	f7fd fc49 	bl	800543c <HAL_RCC_GetPCLK1Freq>
 8007baa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bb2:	69db      	ldr	r3, [r3, #28]
 8007bb4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007bb8:	f040 810c 	bne.w	8007dd4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007bbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007bc6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007bca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007bce:	4622      	mov	r2, r4
 8007bd0:	462b      	mov	r3, r5
 8007bd2:	1891      	adds	r1, r2, r2
 8007bd4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007bd6:	415b      	adcs	r3, r3
 8007bd8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007bda:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007bde:	4621      	mov	r1, r4
 8007be0:	eb12 0801 	adds.w	r8, r2, r1
 8007be4:	4629      	mov	r1, r5
 8007be6:	eb43 0901 	adc.w	r9, r3, r1
 8007bea:	f04f 0200 	mov.w	r2, #0
 8007bee:	f04f 0300 	mov.w	r3, #0
 8007bf2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007bf6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007bfa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007bfe:	4690      	mov	r8, r2
 8007c00:	4699      	mov	r9, r3
 8007c02:	4623      	mov	r3, r4
 8007c04:	eb18 0303 	adds.w	r3, r8, r3
 8007c08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007c0c:	462b      	mov	r3, r5
 8007c0e:	eb49 0303 	adc.w	r3, r9, r3
 8007c12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007c16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007c22:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007c26:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007c2a:	460b      	mov	r3, r1
 8007c2c:	18db      	adds	r3, r3, r3
 8007c2e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007c30:	4613      	mov	r3, r2
 8007c32:	eb42 0303 	adc.w	r3, r2, r3
 8007c36:	657b      	str	r3, [r7, #84]	@ 0x54
 8007c38:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007c3c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007c40:	f7f9 f822 	bl	8000c88 <__aeabi_uldivmod>
 8007c44:	4602      	mov	r2, r0
 8007c46:	460b      	mov	r3, r1
 8007c48:	4b61      	ldr	r3, [pc, #388]	@ (8007dd0 <UART_SetConfig+0x2d4>)
 8007c4a:	fba3 2302 	umull	r2, r3, r3, r2
 8007c4e:	095b      	lsrs	r3, r3, #5
 8007c50:	011c      	lsls	r4, r3, #4
 8007c52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c56:	2200      	movs	r2, #0
 8007c58:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007c5c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007c60:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007c64:	4642      	mov	r2, r8
 8007c66:	464b      	mov	r3, r9
 8007c68:	1891      	adds	r1, r2, r2
 8007c6a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007c6c:	415b      	adcs	r3, r3
 8007c6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007c70:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007c74:	4641      	mov	r1, r8
 8007c76:	eb12 0a01 	adds.w	sl, r2, r1
 8007c7a:	4649      	mov	r1, r9
 8007c7c:	eb43 0b01 	adc.w	fp, r3, r1
 8007c80:	f04f 0200 	mov.w	r2, #0
 8007c84:	f04f 0300 	mov.w	r3, #0
 8007c88:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007c8c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007c90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007c94:	4692      	mov	sl, r2
 8007c96:	469b      	mov	fp, r3
 8007c98:	4643      	mov	r3, r8
 8007c9a:	eb1a 0303 	adds.w	r3, sl, r3
 8007c9e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007ca2:	464b      	mov	r3, r9
 8007ca4:	eb4b 0303 	adc.w	r3, fp, r3
 8007ca8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cb0:	685b      	ldr	r3, [r3, #4]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007cb8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007cbc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007cc0:	460b      	mov	r3, r1
 8007cc2:	18db      	adds	r3, r3, r3
 8007cc4:	643b      	str	r3, [r7, #64]	@ 0x40
 8007cc6:	4613      	mov	r3, r2
 8007cc8:	eb42 0303 	adc.w	r3, r2, r3
 8007ccc:	647b      	str	r3, [r7, #68]	@ 0x44
 8007cce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007cd2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007cd6:	f7f8 ffd7 	bl	8000c88 <__aeabi_uldivmod>
 8007cda:	4602      	mov	r2, r0
 8007cdc:	460b      	mov	r3, r1
 8007cde:	4611      	mov	r1, r2
 8007ce0:	4b3b      	ldr	r3, [pc, #236]	@ (8007dd0 <UART_SetConfig+0x2d4>)
 8007ce2:	fba3 2301 	umull	r2, r3, r3, r1
 8007ce6:	095b      	lsrs	r3, r3, #5
 8007ce8:	2264      	movs	r2, #100	@ 0x64
 8007cea:	fb02 f303 	mul.w	r3, r2, r3
 8007cee:	1acb      	subs	r3, r1, r3
 8007cf0:	00db      	lsls	r3, r3, #3
 8007cf2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007cf6:	4b36      	ldr	r3, [pc, #216]	@ (8007dd0 <UART_SetConfig+0x2d4>)
 8007cf8:	fba3 2302 	umull	r2, r3, r3, r2
 8007cfc:	095b      	lsrs	r3, r3, #5
 8007cfe:	005b      	lsls	r3, r3, #1
 8007d00:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007d04:	441c      	add	r4, r3
 8007d06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007d10:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007d14:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007d18:	4642      	mov	r2, r8
 8007d1a:	464b      	mov	r3, r9
 8007d1c:	1891      	adds	r1, r2, r2
 8007d1e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007d20:	415b      	adcs	r3, r3
 8007d22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007d28:	4641      	mov	r1, r8
 8007d2a:	1851      	adds	r1, r2, r1
 8007d2c:	6339      	str	r1, [r7, #48]	@ 0x30
 8007d2e:	4649      	mov	r1, r9
 8007d30:	414b      	adcs	r3, r1
 8007d32:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d34:	f04f 0200 	mov.w	r2, #0
 8007d38:	f04f 0300 	mov.w	r3, #0
 8007d3c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007d40:	4659      	mov	r1, fp
 8007d42:	00cb      	lsls	r3, r1, #3
 8007d44:	4651      	mov	r1, sl
 8007d46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007d4a:	4651      	mov	r1, sl
 8007d4c:	00ca      	lsls	r2, r1, #3
 8007d4e:	4610      	mov	r0, r2
 8007d50:	4619      	mov	r1, r3
 8007d52:	4603      	mov	r3, r0
 8007d54:	4642      	mov	r2, r8
 8007d56:	189b      	adds	r3, r3, r2
 8007d58:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007d5c:	464b      	mov	r3, r9
 8007d5e:	460a      	mov	r2, r1
 8007d60:	eb42 0303 	adc.w	r3, r2, r3
 8007d64:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007d74:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007d78:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007d7c:	460b      	mov	r3, r1
 8007d7e:	18db      	adds	r3, r3, r3
 8007d80:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007d82:	4613      	mov	r3, r2
 8007d84:	eb42 0303 	adc.w	r3, r2, r3
 8007d88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007d8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007d8e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007d92:	f7f8 ff79 	bl	8000c88 <__aeabi_uldivmod>
 8007d96:	4602      	mov	r2, r0
 8007d98:	460b      	mov	r3, r1
 8007d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8007dd0 <UART_SetConfig+0x2d4>)
 8007d9c:	fba3 1302 	umull	r1, r3, r3, r2
 8007da0:	095b      	lsrs	r3, r3, #5
 8007da2:	2164      	movs	r1, #100	@ 0x64
 8007da4:	fb01 f303 	mul.w	r3, r1, r3
 8007da8:	1ad3      	subs	r3, r2, r3
 8007daa:	00db      	lsls	r3, r3, #3
 8007dac:	3332      	adds	r3, #50	@ 0x32
 8007dae:	4a08      	ldr	r2, [pc, #32]	@ (8007dd0 <UART_SetConfig+0x2d4>)
 8007db0:	fba2 2303 	umull	r2, r3, r2, r3
 8007db4:	095b      	lsrs	r3, r3, #5
 8007db6:	f003 0207 	and.w	r2, r3, #7
 8007dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4422      	add	r2, r4
 8007dc2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007dc4:	e106      	b.n	8007fd4 <UART_SetConfig+0x4d8>
 8007dc6:	bf00      	nop
 8007dc8:	40011000 	.word	0x40011000
 8007dcc:	40011400 	.word	0x40011400
 8007dd0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007dd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007dd8:	2200      	movs	r2, #0
 8007dda:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007dde:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007de2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007de6:	4642      	mov	r2, r8
 8007de8:	464b      	mov	r3, r9
 8007dea:	1891      	adds	r1, r2, r2
 8007dec:	6239      	str	r1, [r7, #32]
 8007dee:	415b      	adcs	r3, r3
 8007df0:	627b      	str	r3, [r7, #36]	@ 0x24
 8007df2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007df6:	4641      	mov	r1, r8
 8007df8:	1854      	adds	r4, r2, r1
 8007dfa:	4649      	mov	r1, r9
 8007dfc:	eb43 0501 	adc.w	r5, r3, r1
 8007e00:	f04f 0200 	mov.w	r2, #0
 8007e04:	f04f 0300 	mov.w	r3, #0
 8007e08:	00eb      	lsls	r3, r5, #3
 8007e0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007e0e:	00e2      	lsls	r2, r4, #3
 8007e10:	4614      	mov	r4, r2
 8007e12:	461d      	mov	r5, r3
 8007e14:	4643      	mov	r3, r8
 8007e16:	18e3      	adds	r3, r4, r3
 8007e18:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007e1c:	464b      	mov	r3, r9
 8007e1e:	eb45 0303 	adc.w	r3, r5, r3
 8007e22:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007e26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e2a:	685b      	ldr	r3, [r3, #4]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007e32:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007e36:	f04f 0200 	mov.w	r2, #0
 8007e3a:	f04f 0300 	mov.w	r3, #0
 8007e3e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007e42:	4629      	mov	r1, r5
 8007e44:	008b      	lsls	r3, r1, #2
 8007e46:	4621      	mov	r1, r4
 8007e48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007e4c:	4621      	mov	r1, r4
 8007e4e:	008a      	lsls	r2, r1, #2
 8007e50:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007e54:	f7f8 ff18 	bl	8000c88 <__aeabi_uldivmod>
 8007e58:	4602      	mov	r2, r0
 8007e5a:	460b      	mov	r3, r1
 8007e5c:	4b60      	ldr	r3, [pc, #384]	@ (8007fe0 <UART_SetConfig+0x4e4>)
 8007e5e:	fba3 2302 	umull	r2, r3, r3, r2
 8007e62:	095b      	lsrs	r3, r3, #5
 8007e64:	011c      	lsls	r4, r3, #4
 8007e66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007e70:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007e74:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007e78:	4642      	mov	r2, r8
 8007e7a:	464b      	mov	r3, r9
 8007e7c:	1891      	adds	r1, r2, r2
 8007e7e:	61b9      	str	r1, [r7, #24]
 8007e80:	415b      	adcs	r3, r3
 8007e82:	61fb      	str	r3, [r7, #28]
 8007e84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007e88:	4641      	mov	r1, r8
 8007e8a:	1851      	adds	r1, r2, r1
 8007e8c:	6139      	str	r1, [r7, #16]
 8007e8e:	4649      	mov	r1, r9
 8007e90:	414b      	adcs	r3, r1
 8007e92:	617b      	str	r3, [r7, #20]
 8007e94:	f04f 0200 	mov.w	r2, #0
 8007e98:	f04f 0300 	mov.w	r3, #0
 8007e9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007ea0:	4659      	mov	r1, fp
 8007ea2:	00cb      	lsls	r3, r1, #3
 8007ea4:	4651      	mov	r1, sl
 8007ea6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007eaa:	4651      	mov	r1, sl
 8007eac:	00ca      	lsls	r2, r1, #3
 8007eae:	4610      	mov	r0, r2
 8007eb0:	4619      	mov	r1, r3
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	4642      	mov	r2, r8
 8007eb6:	189b      	adds	r3, r3, r2
 8007eb8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007ebc:	464b      	mov	r3, r9
 8007ebe:	460a      	mov	r2, r1
 8007ec0:	eb42 0303 	adc.w	r3, r2, r3
 8007ec4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007ed2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007ed4:	f04f 0200 	mov.w	r2, #0
 8007ed8:	f04f 0300 	mov.w	r3, #0
 8007edc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007ee0:	4649      	mov	r1, r9
 8007ee2:	008b      	lsls	r3, r1, #2
 8007ee4:	4641      	mov	r1, r8
 8007ee6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007eea:	4641      	mov	r1, r8
 8007eec:	008a      	lsls	r2, r1, #2
 8007eee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007ef2:	f7f8 fec9 	bl	8000c88 <__aeabi_uldivmod>
 8007ef6:	4602      	mov	r2, r0
 8007ef8:	460b      	mov	r3, r1
 8007efa:	4611      	mov	r1, r2
 8007efc:	4b38      	ldr	r3, [pc, #224]	@ (8007fe0 <UART_SetConfig+0x4e4>)
 8007efe:	fba3 2301 	umull	r2, r3, r3, r1
 8007f02:	095b      	lsrs	r3, r3, #5
 8007f04:	2264      	movs	r2, #100	@ 0x64
 8007f06:	fb02 f303 	mul.w	r3, r2, r3
 8007f0a:	1acb      	subs	r3, r1, r3
 8007f0c:	011b      	lsls	r3, r3, #4
 8007f0e:	3332      	adds	r3, #50	@ 0x32
 8007f10:	4a33      	ldr	r2, [pc, #204]	@ (8007fe0 <UART_SetConfig+0x4e4>)
 8007f12:	fba2 2303 	umull	r2, r3, r2, r3
 8007f16:	095b      	lsrs	r3, r3, #5
 8007f18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007f1c:	441c      	add	r4, r3
 8007f1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f22:	2200      	movs	r2, #0
 8007f24:	673b      	str	r3, [r7, #112]	@ 0x70
 8007f26:	677a      	str	r2, [r7, #116]	@ 0x74
 8007f28:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007f2c:	4642      	mov	r2, r8
 8007f2e:	464b      	mov	r3, r9
 8007f30:	1891      	adds	r1, r2, r2
 8007f32:	60b9      	str	r1, [r7, #8]
 8007f34:	415b      	adcs	r3, r3
 8007f36:	60fb      	str	r3, [r7, #12]
 8007f38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007f3c:	4641      	mov	r1, r8
 8007f3e:	1851      	adds	r1, r2, r1
 8007f40:	6039      	str	r1, [r7, #0]
 8007f42:	4649      	mov	r1, r9
 8007f44:	414b      	adcs	r3, r1
 8007f46:	607b      	str	r3, [r7, #4]
 8007f48:	f04f 0200 	mov.w	r2, #0
 8007f4c:	f04f 0300 	mov.w	r3, #0
 8007f50:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007f54:	4659      	mov	r1, fp
 8007f56:	00cb      	lsls	r3, r1, #3
 8007f58:	4651      	mov	r1, sl
 8007f5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f5e:	4651      	mov	r1, sl
 8007f60:	00ca      	lsls	r2, r1, #3
 8007f62:	4610      	mov	r0, r2
 8007f64:	4619      	mov	r1, r3
 8007f66:	4603      	mov	r3, r0
 8007f68:	4642      	mov	r2, r8
 8007f6a:	189b      	adds	r3, r3, r2
 8007f6c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007f6e:	464b      	mov	r3, r9
 8007f70:	460a      	mov	r2, r1
 8007f72:	eb42 0303 	adc.w	r3, r2, r3
 8007f76:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	663b      	str	r3, [r7, #96]	@ 0x60
 8007f82:	667a      	str	r2, [r7, #100]	@ 0x64
 8007f84:	f04f 0200 	mov.w	r2, #0
 8007f88:	f04f 0300 	mov.w	r3, #0
 8007f8c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007f90:	4649      	mov	r1, r9
 8007f92:	008b      	lsls	r3, r1, #2
 8007f94:	4641      	mov	r1, r8
 8007f96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f9a:	4641      	mov	r1, r8
 8007f9c:	008a      	lsls	r2, r1, #2
 8007f9e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007fa2:	f7f8 fe71 	bl	8000c88 <__aeabi_uldivmod>
 8007fa6:	4602      	mov	r2, r0
 8007fa8:	460b      	mov	r3, r1
 8007faa:	4b0d      	ldr	r3, [pc, #52]	@ (8007fe0 <UART_SetConfig+0x4e4>)
 8007fac:	fba3 1302 	umull	r1, r3, r3, r2
 8007fb0:	095b      	lsrs	r3, r3, #5
 8007fb2:	2164      	movs	r1, #100	@ 0x64
 8007fb4:	fb01 f303 	mul.w	r3, r1, r3
 8007fb8:	1ad3      	subs	r3, r2, r3
 8007fba:	011b      	lsls	r3, r3, #4
 8007fbc:	3332      	adds	r3, #50	@ 0x32
 8007fbe:	4a08      	ldr	r2, [pc, #32]	@ (8007fe0 <UART_SetConfig+0x4e4>)
 8007fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8007fc4:	095b      	lsrs	r3, r3, #5
 8007fc6:	f003 020f 	and.w	r2, r3, #15
 8007fca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4422      	add	r2, r4
 8007fd2:	609a      	str	r2, [r3, #8]
}
 8007fd4:	bf00      	nop
 8007fd6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007fe0:	51eb851f 	.word	0x51eb851f

08007fe4 <__cvt>:
 8007fe4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007fe8:	ec57 6b10 	vmov	r6, r7, d0
 8007fec:	2f00      	cmp	r7, #0
 8007fee:	460c      	mov	r4, r1
 8007ff0:	4619      	mov	r1, r3
 8007ff2:	463b      	mov	r3, r7
 8007ff4:	bfbb      	ittet	lt
 8007ff6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007ffa:	461f      	movlt	r7, r3
 8007ffc:	2300      	movge	r3, #0
 8007ffe:	232d      	movlt	r3, #45	@ 0x2d
 8008000:	700b      	strb	r3, [r1, #0]
 8008002:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008004:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008008:	4691      	mov	r9, r2
 800800a:	f023 0820 	bic.w	r8, r3, #32
 800800e:	bfbc      	itt	lt
 8008010:	4632      	movlt	r2, r6
 8008012:	4616      	movlt	r6, r2
 8008014:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008018:	d005      	beq.n	8008026 <__cvt+0x42>
 800801a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800801e:	d100      	bne.n	8008022 <__cvt+0x3e>
 8008020:	3401      	adds	r4, #1
 8008022:	2102      	movs	r1, #2
 8008024:	e000      	b.n	8008028 <__cvt+0x44>
 8008026:	2103      	movs	r1, #3
 8008028:	ab03      	add	r3, sp, #12
 800802a:	9301      	str	r3, [sp, #4]
 800802c:	ab02      	add	r3, sp, #8
 800802e:	9300      	str	r3, [sp, #0]
 8008030:	ec47 6b10 	vmov	d0, r6, r7
 8008034:	4653      	mov	r3, sl
 8008036:	4622      	mov	r2, r4
 8008038:	f001 f8ba 	bl	80091b0 <_dtoa_r>
 800803c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008040:	4605      	mov	r5, r0
 8008042:	d119      	bne.n	8008078 <__cvt+0x94>
 8008044:	f019 0f01 	tst.w	r9, #1
 8008048:	d00e      	beq.n	8008068 <__cvt+0x84>
 800804a:	eb00 0904 	add.w	r9, r0, r4
 800804e:	2200      	movs	r2, #0
 8008050:	2300      	movs	r3, #0
 8008052:	4630      	mov	r0, r6
 8008054:	4639      	mov	r1, r7
 8008056:	f7f8 fd37 	bl	8000ac8 <__aeabi_dcmpeq>
 800805a:	b108      	cbz	r0, 8008060 <__cvt+0x7c>
 800805c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008060:	2230      	movs	r2, #48	@ 0x30
 8008062:	9b03      	ldr	r3, [sp, #12]
 8008064:	454b      	cmp	r3, r9
 8008066:	d31e      	bcc.n	80080a6 <__cvt+0xc2>
 8008068:	9b03      	ldr	r3, [sp, #12]
 800806a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800806c:	1b5b      	subs	r3, r3, r5
 800806e:	4628      	mov	r0, r5
 8008070:	6013      	str	r3, [r2, #0]
 8008072:	b004      	add	sp, #16
 8008074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008078:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800807c:	eb00 0904 	add.w	r9, r0, r4
 8008080:	d1e5      	bne.n	800804e <__cvt+0x6a>
 8008082:	7803      	ldrb	r3, [r0, #0]
 8008084:	2b30      	cmp	r3, #48	@ 0x30
 8008086:	d10a      	bne.n	800809e <__cvt+0xba>
 8008088:	2200      	movs	r2, #0
 800808a:	2300      	movs	r3, #0
 800808c:	4630      	mov	r0, r6
 800808e:	4639      	mov	r1, r7
 8008090:	f7f8 fd1a 	bl	8000ac8 <__aeabi_dcmpeq>
 8008094:	b918      	cbnz	r0, 800809e <__cvt+0xba>
 8008096:	f1c4 0401 	rsb	r4, r4, #1
 800809a:	f8ca 4000 	str.w	r4, [sl]
 800809e:	f8da 3000 	ldr.w	r3, [sl]
 80080a2:	4499      	add	r9, r3
 80080a4:	e7d3      	b.n	800804e <__cvt+0x6a>
 80080a6:	1c59      	adds	r1, r3, #1
 80080a8:	9103      	str	r1, [sp, #12]
 80080aa:	701a      	strb	r2, [r3, #0]
 80080ac:	e7d9      	b.n	8008062 <__cvt+0x7e>

080080ae <__exponent>:
 80080ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80080b0:	2900      	cmp	r1, #0
 80080b2:	bfba      	itte	lt
 80080b4:	4249      	neglt	r1, r1
 80080b6:	232d      	movlt	r3, #45	@ 0x2d
 80080b8:	232b      	movge	r3, #43	@ 0x2b
 80080ba:	2909      	cmp	r1, #9
 80080bc:	7002      	strb	r2, [r0, #0]
 80080be:	7043      	strb	r3, [r0, #1]
 80080c0:	dd29      	ble.n	8008116 <__exponent+0x68>
 80080c2:	f10d 0307 	add.w	r3, sp, #7
 80080c6:	461d      	mov	r5, r3
 80080c8:	270a      	movs	r7, #10
 80080ca:	461a      	mov	r2, r3
 80080cc:	fbb1 f6f7 	udiv	r6, r1, r7
 80080d0:	fb07 1416 	mls	r4, r7, r6, r1
 80080d4:	3430      	adds	r4, #48	@ 0x30
 80080d6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80080da:	460c      	mov	r4, r1
 80080dc:	2c63      	cmp	r4, #99	@ 0x63
 80080de:	f103 33ff 	add.w	r3, r3, #4294967295
 80080e2:	4631      	mov	r1, r6
 80080e4:	dcf1      	bgt.n	80080ca <__exponent+0x1c>
 80080e6:	3130      	adds	r1, #48	@ 0x30
 80080e8:	1e94      	subs	r4, r2, #2
 80080ea:	f803 1c01 	strb.w	r1, [r3, #-1]
 80080ee:	1c41      	adds	r1, r0, #1
 80080f0:	4623      	mov	r3, r4
 80080f2:	42ab      	cmp	r3, r5
 80080f4:	d30a      	bcc.n	800810c <__exponent+0x5e>
 80080f6:	f10d 0309 	add.w	r3, sp, #9
 80080fa:	1a9b      	subs	r3, r3, r2
 80080fc:	42ac      	cmp	r4, r5
 80080fe:	bf88      	it	hi
 8008100:	2300      	movhi	r3, #0
 8008102:	3302      	adds	r3, #2
 8008104:	4403      	add	r3, r0
 8008106:	1a18      	subs	r0, r3, r0
 8008108:	b003      	add	sp, #12
 800810a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800810c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008110:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008114:	e7ed      	b.n	80080f2 <__exponent+0x44>
 8008116:	2330      	movs	r3, #48	@ 0x30
 8008118:	3130      	adds	r1, #48	@ 0x30
 800811a:	7083      	strb	r3, [r0, #2]
 800811c:	70c1      	strb	r1, [r0, #3]
 800811e:	1d03      	adds	r3, r0, #4
 8008120:	e7f1      	b.n	8008106 <__exponent+0x58>
	...

08008124 <_printf_float>:
 8008124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008128:	b08d      	sub	sp, #52	@ 0x34
 800812a:	460c      	mov	r4, r1
 800812c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008130:	4616      	mov	r6, r2
 8008132:	461f      	mov	r7, r3
 8008134:	4605      	mov	r5, r0
 8008136:	f000 ff27 	bl	8008f88 <_localeconv_r>
 800813a:	6803      	ldr	r3, [r0, #0]
 800813c:	9304      	str	r3, [sp, #16]
 800813e:	4618      	mov	r0, r3
 8008140:	f7f8 f896 	bl	8000270 <strlen>
 8008144:	2300      	movs	r3, #0
 8008146:	930a      	str	r3, [sp, #40]	@ 0x28
 8008148:	f8d8 3000 	ldr.w	r3, [r8]
 800814c:	9005      	str	r0, [sp, #20]
 800814e:	3307      	adds	r3, #7
 8008150:	f023 0307 	bic.w	r3, r3, #7
 8008154:	f103 0208 	add.w	r2, r3, #8
 8008158:	f894 a018 	ldrb.w	sl, [r4, #24]
 800815c:	f8d4 b000 	ldr.w	fp, [r4]
 8008160:	f8c8 2000 	str.w	r2, [r8]
 8008164:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008168:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800816c:	9307      	str	r3, [sp, #28]
 800816e:	f8cd 8018 	str.w	r8, [sp, #24]
 8008172:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008176:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800817a:	4b9c      	ldr	r3, [pc, #624]	@ (80083ec <_printf_float+0x2c8>)
 800817c:	f04f 32ff 	mov.w	r2, #4294967295
 8008180:	f7f8 fcd4 	bl	8000b2c <__aeabi_dcmpun>
 8008184:	bb70      	cbnz	r0, 80081e4 <_printf_float+0xc0>
 8008186:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800818a:	4b98      	ldr	r3, [pc, #608]	@ (80083ec <_printf_float+0x2c8>)
 800818c:	f04f 32ff 	mov.w	r2, #4294967295
 8008190:	f7f8 fcae 	bl	8000af0 <__aeabi_dcmple>
 8008194:	bb30      	cbnz	r0, 80081e4 <_printf_float+0xc0>
 8008196:	2200      	movs	r2, #0
 8008198:	2300      	movs	r3, #0
 800819a:	4640      	mov	r0, r8
 800819c:	4649      	mov	r1, r9
 800819e:	f7f8 fc9d 	bl	8000adc <__aeabi_dcmplt>
 80081a2:	b110      	cbz	r0, 80081aa <_printf_float+0x86>
 80081a4:	232d      	movs	r3, #45	@ 0x2d
 80081a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80081aa:	4a91      	ldr	r2, [pc, #580]	@ (80083f0 <_printf_float+0x2cc>)
 80081ac:	4b91      	ldr	r3, [pc, #580]	@ (80083f4 <_printf_float+0x2d0>)
 80081ae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80081b2:	bf8c      	ite	hi
 80081b4:	4690      	movhi	r8, r2
 80081b6:	4698      	movls	r8, r3
 80081b8:	2303      	movs	r3, #3
 80081ba:	6123      	str	r3, [r4, #16]
 80081bc:	f02b 0304 	bic.w	r3, fp, #4
 80081c0:	6023      	str	r3, [r4, #0]
 80081c2:	f04f 0900 	mov.w	r9, #0
 80081c6:	9700      	str	r7, [sp, #0]
 80081c8:	4633      	mov	r3, r6
 80081ca:	aa0b      	add	r2, sp, #44	@ 0x2c
 80081cc:	4621      	mov	r1, r4
 80081ce:	4628      	mov	r0, r5
 80081d0:	f000 f9d2 	bl	8008578 <_printf_common>
 80081d4:	3001      	adds	r0, #1
 80081d6:	f040 808d 	bne.w	80082f4 <_printf_float+0x1d0>
 80081da:	f04f 30ff 	mov.w	r0, #4294967295
 80081de:	b00d      	add	sp, #52	@ 0x34
 80081e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081e4:	4642      	mov	r2, r8
 80081e6:	464b      	mov	r3, r9
 80081e8:	4640      	mov	r0, r8
 80081ea:	4649      	mov	r1, r9
 80081ec:	f7f8 fc9e 	bl	8000b2c <__aeabi_dcmpun>
 80081f0:	b140      	cbz	r0, 8008204 <_printf_float+0xe0>
 80081f2:	464b      	mov	r3, r9
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	bfbc      	itt	lt
 80081f8:	232d      	movlt	r3, #45	@ 0x2d
 80081fa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80081fe:	4a7e      	ldr	r2, [pc, #504]	@ (80083f8 <_printf_float+0x2d4>)
 8008200:	4b7e      	ldr	r3, [pc, #504]	@ (80083fc <_printf_float+0x2d8>)
 8008202:	e7d4      	b.n	80081ae <_printf_float+0x8a>
 8008204:	6863      	ldr	r3, [r4, #4]
 8008206:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800820a:	9206      	str	r2, [sp, #24]
 800820c:	1c5a      	adds	r2, r3, #1
 800820e:	d13b      	bne.n	8008288 <_printf_float+0x164>
 8008210:	2306      	movs	r3, #6
 8008212:	6063      	str	r3, [r4, #4]
 8008214:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008218:	2300      	movs	r3, #0
 800821a:	6022      	str	r2, [r4, #0]
 800821c:	9303      	str	r3, [sp, #12]
 800821e:	ab0a      	add	r3, sp, #40	@ 0x28
 8008220:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008224:	ab09      	add	r3, sp, #36	@ 0x24
 8008226:	9300      	str	r3, [sp, #0]
 8008228:	6861      	ldr	r1, [r4, #4]
 800822a:	ec49 8b10 	vmov	d0, r8, r9
 800822e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008232:	4628      	mov	r0, r5
 8008234:	f7ff fed6 	bl	8007fe4 <__cvt>
 8008238:	9b06      	ldr	r3, [sp, #24]
 800823a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800823c:	2b47      	cmp	r3, #71	@ 0x47
 800823e:	4680      	mov	r8, r0
 8008240:	d129      	bne.n	8008296 <_printf_float+0x172>
 8008242:	1cc8      	adds	r0, r1, #3
 8008244:	db02      	blt.n	800824c <_printf_float+0x128>
 8008246:	6863      	ldr	r3, [r4, #4]
 8008248:	4299      	cmp	r1, r3
 800824a:	dd41      	ble.n	80082d0 <_printf_float+0x1ac>
 800824c:	f1aa 0a02 	sub.w	sl, sl, #2
 8008250:	fa5f fa8a 	uxtb.w	sl, sl
 8008254:	3901      	subs	r1, #1
 8008256:	4652      	mov	r2, sl
 8008258:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800825c:	9109      	str	r1, [sp, #36]	@ 0x24
 800825e:	f7ff ff26 	bl	80080ae <__exponent>
 8008262:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008264:	1813      	adds	r3, r2, r0
 8008266:	2a01      	cmp	r2, #1
 8008268:	4681      	mov	r9, r0
 800826a:	6123      	str	r3, [r4, #16]
 800826c:	dc02      	bgt.n	8008274 <_printf_float+0x150>
 800826e:	6822      	ldr	r2, [r4, #0]
 8008270:	07d2      	lsls	r2, r2, #31
 8008272:	d501      	bpl.n	8008278 <_printf_float+0x154>
 8008274:	3301      	adds	r3, #1
 8008276:	6123      	str	r3, [r4, #16]
 8008278:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800827c:	2b00      	cmp	r3, #0
 800827e:	d0a2      	beq.n	80081c6 <_printf_float+0xa2>
 8008280:	232d      	movs	r3, #45	@ 0x2d
 8008282:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008286:	e79e      	b.n	80081c6 <_printf_float+0xa2>
 8008288:	9a06      	ldr	r2, [sp, #24]
 800828a:	2a47      	cmp	r2, #71	@ 0x47
 800828c:	d1c2      	bne.n	8008214 <_printf_float+0xf0>
 800828e:	2b00      	cmp	r3, #0
 8008290:	d1c0      	bne.n	8008214 <_printf_float+0xf0>
 8008292:	2301      	movs	r3, #1
 8008294:	e7bd      	b.n	8008212 <_printf_float+0xee>
 8008296:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800829a:	d9db      	bls.n	8008254 <_printf_float+0x130>
 800829c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80082a0:	d118      	bne.n	80082d4 <_printf_float+0x1b0>
 80082a2:	2900      	cmp	r1, #0
 80082a4:	6863      	ldr	r3, [r4, #4]
 80082a6:	dd0b      	ble.n	80082c0 <_printf_float+0x19c>
 80082a8:	6121      	str	r1, [r4, #16]
 80082aa:	b913      	cbnz	r3, 80082b2 <_printf_float+0x18e>
 80082ac:	6822      	ldr	r2, [r4, #0]
 80082ae:	07d0      	lsls	r0, r2, #31
 80082b0:	d502      	bpl.n	80082b8 <_printf_float+0x194>
 80082b2:	3301      	adds	r3, #1
 80082b4:	440b      	add	r3, r1
 80082b6:	6123      	str	r3, [r4, #16]
 80082b8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80082ba:	f04f 0900 	mov.w	r9, #0
 80082be:	e7db      	b.n	8008278 <_printf_float+0x154>
 80082c0:	b913      	cbnz	r3, 80082c8 <_printf_float+0x1a4>
 80082c2:	6822      	ldr	r2, [r4, #0]
 80082c4:	07d2      	lsls	r2, r2, #31
 80082c6:	d501      	bpl.n	80082cc <_printf_float+0x1a8>
 80082c8:	3302      	adds	r3, #2
 80082ca:	e7f4      	b.n	80082b6 <_printf_float+0x192>
 80082cc:	2301      	movs	r3, #1
 80082ce:	e7f2      	b.n	80082b6 <_printf_float+0x192>
 80082d0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80082d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80082d6:	4299      	cmp	r1, r3
 80082d8:	db05      	blt.n	80082e6 <_printf_float+0x1c2>
 80082da:	6823      	ldr	r3, [r4, #0]
 80082dc:	6121      	str	r1, [r4, #16]
 80082de:	07d8      	lsls	r0, r3, #31
 80082e0:	d5ea      	bpl.n	80082b8 <_printf_float+0x194>
 80082e2:	1c4b      	adds	r3, r1, #1
 80082e4:	e7e7      	b.n	80082b6 <_printf_float+0x192>
 80082e6:	2900      	cmp	r1, #0
 80082e8:	bfd4      	ite	le
 80082ea:	f1c1 0202 	rsble	r2, r1, #2
 80082ee:	2201      	movgt	r2, #1
 80082f0:	4413      	add	r3, r2
 80082f2:	e7e0      	b.n	80082b6 <_printf_float+0x192>
 80082f4:	6823      	ldr	r3, [r4, #0]
 80082f6:	055a      	lsls	r2, r3, #21
 80082f8:	d407      	bmi.n	800830a <_printf_float+0x1e6>
 80082fa:	6923      	ldr	r3, [r4, #16]
 80082fc:	4642      	mov	r2, r8
 80082fe:	4631      	mov	r1, r6
 8008300:	4628      	mov	r0, r5
 8008302:	47b8      	blx	r7
 8008304:	3001      	adds	r0, #1
 8008306:	d12b      	bne.n	8008360 <_printf_float+0x23c>
 8008308:	e767      	b.n	80081da <_printf_float+0xb6>
 800830a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800830e:	f240 80dd 	bls.w	80084cc <_printf_float+0x3a8>
 8008312:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008316:	2200      	movs	r2, #0
 8008318:	2300      	movs	r3, #0
 800831a:	f7f8 fbd5 	bl	8000ac8 <__aeabi_dcmpeq>
 800831e:	2800      	cmp	r0, #0
 8008320:	d033      	beq.n	800838a <_printf_float+0x266>
 8008322:	4a37      	ldr	r2, [pc, #220]	@ (8008400 <_printf_float+0x2dc>)
 8008324:	2301      	movs	r3, #1
 8008326:	4631      	mov	r1, r6
 8008328:	4628      	mov	r0, r5
 800832a:	47b8      	blx	r7
 800832c:	3001      	adds	r0, #1
 800832e:	f43f af54 	beq.w	80081da <_printf_float+0xb6>
 8008332:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008336:	4543      	cmp	r3, r8
 8008338:	db02      	blt.n	8008340 <_printf_float+0x21c>
 800833a:	6823      	ldr	r3, [r4, #0]
 800833c:	07d8      	lsls	r0, r3, #31
 800833e:	d50f      	bpl.n	8008360 <_printf_float+0x23c>
 8008340:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008344:	4631      	mov	r1, r6
 8008346:	4628      	mov	r0, r5
 8008348:	47b8      	blx	r7
 800834a:	3001      	adds	r0, #1
 800834c:	f43f af45 	beq.w	80081da <_printf_float+0xb6>
 8008350:	f04f 0900 	mov.w	r9, #0
 8008354:	f108 38ff 	add.w	r8, r8, #4294967295
 8008358:	f104 0a1a 	add.w	sl, r4, #26
 800835c:	45c8      	cmp	r8, r9
 800835e:	dc09      	bgt.n	8008374 <_printf_float+0x250>
 8008360:	6823      	ldr	r3, [r4, #0]
 8008362:	079b      	lsls	r3, r3, #30
 8008364:	f100 8103 	bmi.w	800856e <_printf_float+0x44a>
 8008368:	68e0      	ldr	r0, [r4, #12]
 800836a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800836c:	4298      	cmp	r0, r3
 800836e:	bfb8      	it	lt
 8008370:	4618      	movlt	r0, r3
 8008372:	e734      	b.n	80081de <_printf_float+0xba>
 8008374:	2301      	movs	r3, #1
 8008376:	4652      	mov	r2, sl
 8008378:	4631      	mov	r1, r6
 800837a:	4628      	mov	r0, r5
 800837c:	47b8      	blx	r7
 800837e:	3001      	adds	r0, #1
 8008380:	f43f af2b 	beq.w	80081da <_printf_float+0xb6>
 8008384:	f109 0901 	add.w	r9, r9, #1
 8008388:	e7e8      	b.n	800835c <_printf_float+0x238>
 800838a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800838c:	2b00      	cmp	r3, #0
 800838e:	dc39      	bgt.n	8008404 <_printf_float+0x2e0>
 8008390:	4a1b      	ldr	r2, [pc, #108]	@ (8008400 <_printf_float+0x2dc>)
 8008392:	2301      	movs	r3, #1
 8008394:	4631      	mov	r1, r6
 8008396:	4628      	mov	r0, r5
 8008398:	47b8      	blx	r7
 800839a:	3001      	adds	r0, #1
 800839c:	f43f af1d 	beq.w	80081da <_printf_float+0xb6>
 80083a0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80083a4:	ea59 0303 	orrs.w	r3, r9, r3
 80083a8:	d102      	bne.n	80083b0 <_printf_float+0x28c>
 80083aa:	6823      	ldr	r3, [r4, #0]
 80083ac:	07d9      	lsls	r1, r3, #31
 80083ae:	d5d7      	bpl.n	8008360 <_printf_float+0x23c>
 80083b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80083b4:	4631      	mov	r1, r6
 80083b6:	4628      	mov	r0, r5
 80083b8:	47b8      	blx	r7
 80083ba:	3001      	adds	r0, #1
 80083bc:	f43f af0d 	beq.w	80081da <_printf_float+0xb6>
 80083c0:	f04f 0a00 	mov.w	sl, #0
 80083c4:	f104 0b1a 	add.w	fp, r4, #26
 80083c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083ca:	425b      	negs	r3, r3
 80083cc:	4553      	cmp	r3, sl
 80083ce:	dc01      	bgt.n	80083d4 <_printf_float+0x2b0>
 80083d0:	464b      	mov	r3, r9
 80083d2:	e793      	b.n	80082fc <_printf_float+0x1d8>
 80083d4:	2301      	movs	r3, #1
 80083d6:	465a      	mov	r2, fp
 80083d8:	4631      	mov	r1, r6
 80083da:	4628      	mov	r0, r5
 80083dc:	47b8      	blx	r7
 80083de:	3001      	adds	r0, #1
 80083e0:	f43f aefb 	beq.w	80081da <_printf_float+0xb6>
 80083e4:	f10a 0a01 	add.w	sl, sl, #1
 80083e8:	e7ee      	b.n	80083c8 <_printf_float+0x2a4>
 80083ea:	bf00      	nop
 80083ec:	7fefffff 	.word	0x7fefffff
 80083f0:	0800d6ac 	.word	0x0800d6ac
 80083f4:	0800d6a8 	.word	0x0800d6a8
 80083f8:	0800d6b4 	.word	0x0800d6b4
 80083fc:	0800d6b0 	.word	0x0800d6b0
 8008400:	0800d7ee 	.word	0x0800d7ee
 8008404:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008406:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800840a:	4553      	cmp	r3, sl
 800840c:	bfa8      	it	ge
 800840e:	4653      	movge	r3, sl
 8008410:	2b00      	cmp	r3, #0
 8008412:	4699      	mov	r9, r3
 8008414:	dc36      	bgt.n	8008484 <_printf_float+0x360>
 8008416:	f04f 0b00 	mov.w	fp, #0
 800841a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800841e:	f104 021a 	add.w	r2, r4, #26
 8008422:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008424:	9306      	str	r3, [sp, #24]
 8008426:	eba3 0309 	sub.w	r3, r3, r9
 800842a:	455b      	cmp	r3, fp
 800842c:	dc31      	bgt.n	8008492 <_printf_float+0x36e>
 800842e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008430:	459a      	cmp	sl, r3
 8008432:	dc3a      	bgt.n	80084aa <_printf_float+0x386>
 8008434:	6823      	ldr	r3, [r4, #0]
 8008436:	07da      	lsls	r2, r3, #31
 8008438:	d437      	bmi.n	80084aa <_printf_float+0x386>
 800843a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800843c:	ebaa 0903 	sub.w	r9, sl, r3
 8008440:	9b06      	ldr	r3, [sp, #24]
 8008442:	ebaa 0303 	sub.w	r3, sl, r3
 8008446:	4599      	cmp	r9, r3
 8008448:	bfa8      	it	ge
 800844a:	4699      	movge	r9, r3
 800844c:	f1b9 0f00 	cmp.w	r9, #0
 8008450:	dc33      	bgt.n	80084ba <_printf_float+0x396>
 8008452:	f04f 0800 	mov.w	r8, #0
 8008456:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800845a:	f104 0b1a 	add.w	fp, r4, #26
 800845e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008460:	ebaa 0303 	sub.w	r3, sl, r3
 8008464:	eba3 0309 	sub.w	r3, r3, r9
 8008468:	4543      	cmp	r3, r8
 800846a:	f77f af79 	ble.w	8008360 <_printf_float+0x23c>
 800846e:	2301      	movs	r3, #1
 8008470:	465a      	mov	r2, fp
 8008472:	4631      	mov	r1, r6
 8008474:	4628      	mov	r0, r5
 8008476:	47b8      	blx	r7
 8008478:	3001      	adds	r0, #1
 800847a:	f43f aeae 	beq.w	80081da <_printf_float+0xb6>
 800847e:	f108 0801 	add.w	r8, r8, #1
 8008482:	e7ec      	b.n	800845e <_printf_float+0x33a>
 8008484:	4642      	mov	r2, r8
 8008486:	4631      	mov	r1, r6
 8008488:	4628      	mov	r0, r5
 800848a:	47b8      	blx	r7
 800848c:	3001      	adds	r0, #1
 800848e:	d1c2      	bne.n	8008416 <_printf_float+0x2f2>
 8008490:	e6a3      	b.n	80081da <_printf_float+0xb6>
 8008492:	2301      	movs	r3, #1
 8008494:	4631      	mov	r1, r6
 8008496:	4628      	mov	r0, r5
 8008498:	9206      	str	r2, [sp, #24]
 800849a:	47b8      	blx	r7
 800849c:	3001      	adds	r0, #1
 800849e:	f43f ae9c 	beq.w	80081da <_printf_float+0xb6>
 80084a2:	9a06      	ldr	r2, [sp, #24]
 80084a4:	f10b 0b01 	add.w	fp, fp, #1
 80084a8:	e7bb      	b.n	8008422 <_printf_float+0x2fe>
 80084aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80084ae:	4631      	mov	r1, r6
 80084b0:	4628      	mov	r0, r5
 80084b2:	47b8      	blx	r7
 80084b4:	3001      	adds	r0, #1
 80084b6:	d1c0      	bne.n	800843a <_printf_float+0x316>
 80084b8:	e68f      	b.n	80081da <_printf_float+0xb6>
 80084ba:	9a06      	ldr	r2, [sp, #24]
 80084bc:	464b      	mov	r3, r9
 80084be:	4442      	add	r2, r8
 80084c0:	4631      	mov	r1, r6
 80084c2:	4628      	mov	r0, r5
 80084c4:	47b8      	blx	r7
 80084c6:	3001      	adds	r0, #1
 80084c8:	d1c3      	bne.n	8008452 <_printf_float+0x32e>
 80084ca:	e686      	b.n	80081da <_printf_float+0xb6>
 80084cc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80084d0:	f1ba 0f01 	cmp.w	sl, #1
 80084d4:	dc01      	bgt.n	80084da <_printf_float+0x3b6>
 80084d6:	07db      	lsls	r3, r3, #31
 80084d8:	d536      	bpl.n	8008548 <_printf_float+0x424>
 80084da:	2301      	movs	r3, #1
 80084dc:	4642      	mov	r2, r8
 80084de:	4631      	mov	r1, r6
 80084e0:	4628      	mov	r0, r5
 80084e2:	47b8      	blx	r7
 80084e4:	3001      	adds	r0, #1
 80084e6:	f43f ae78 	beq.w	80081da <_printf_float+0xb6>
 80084ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80084ee:	4631      	mov	r1, r6
 80084f0:	4628      	mov	r0, r5
 80084f2:	47b8      	blx	r7
 80084f4:	3001      	adds	r0, #1
 80084f6:	f43f ae70 	beq.w	80081da <_printf_float+0xb6>
 80084fa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80084fe:	2200      	movs	r2, #0
 8008500:	2300      	movs	r3, #0
 8008502:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008506:	f7f8 fadf 	bl	8000ac8 <__aeabi_dcmpeq>
 800850a:	b9c0      	cbnz	r0, 800853e <_printf_float+0x41a>
 800850c:	4653      	mov	r3, sl
 800850e:	f108 0201 	add.w	r2, r8, #1
 8008512:	4631      	mov	r1, r6
 8008514:	4628      	mov	r0, r5
 8008516:	47b8      	blx	r7
 8008518:	3001      	adds	r0, #1
 800851a:	d10c      	bne.n	8008536 <_printf_float+0x412>
 800851c:	e65d      	b.n	80081da <_printf_float+0xb6>
 800851e:	2301      	movs	r3, #1
 8008520:	465a      	mov	r2, fp
 8008522:	4631      	mov	r1, r6
 8008524:	4628      	mov	r0, r5
 8008526:	47b8      	blx	r7
 8008528:	3001      	adds	r0, #1
 800852a:	f43f ae56 	beq.w	80081da <_printf_float+0xb6>
 800852e:	f108 0801 	add.w	r8, r8, #1
 8008532:	45d0      	cmp	r8, sl
 8008534:	dbf3      	blt.n	800851e <_printf_float+0x3fa>
 8008536:	464b      	mov	r3, r9
 8008538:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800853c:	e6df      	b.n	80082fe <_printf_float+0x1da>
 800853e:	f04f 0800 	mov.w	r8, #0
 8008542:	f104 0b1a 	add.w	fp, r4, #26
 8008546:	e7f4      	b.n	8008532 <_printf_float+0x40e>
 8008548:	2301      	movs	r3, #1
 800854a:	4642      	mov	r2, r8
 800854c:	e7e1      	b.n	8008512 <_printf_float+0x3ee>
 800854e:	2301      	movs	r3, #1
 8008550:	464a      	mov	r2, r9
 8008552:	4631      	mov	r1, r6
 8008554:	4628      	mov	r0, r5
 8008556:	47b8      	blx	r7
 8008558:	3001      	adds	r0, #1
 800855a:	f43f ae3e 	beq.w	80081da <_printf_float+0xb6>
 800855e:	f108 0801 	add.w	r8, r8, #1
 8008562:	68e3      	ldr	r3, [r4, #12]
 8008564:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008566:	1a5b      	subs	r3, r3, r1
 8008568:	4543      	cmp	r3, r8
 800856a:	dcf0      	bgt.n	800854e <_printf_float+0x42a>
 800856c:	e6fc      	b.n	8008368 <_printf_float+0x244>
 800856e:	f04f 0800 	mov.w	r8, #0
 8008572:	f104 0919 	add.w	r9, r4, #25
 8008576:	e7f4      	b.n	8008562 <_printf_float+0x43e>

08008578 <_printf_common>:
 8008578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800857c:	4616      	mov	r6, r2
 800857e:	4698      	mov	r8, r3
 8008580:	688a      	ldr	r2, [r1, #8]
 8008582:	690b      	ldr	r3, [r1, #16]
 8008584:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008588:	4293      	cmp	r3, r2
 800858a:	bfb8      	it	lt
 800858c:	4613      	movlt	r3, r2
 800858e:	6033      	str	r3, [r6, #0]
 8008590:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008594:	4607      	mov	r7, r0
 8008596:	460c      	mov	r4, r1
 8008598:	b10a      	cbz	r2, 800859e <_printf_common+0x26>
 800859a:	3301      	adds	r3, #1
 800859c:	6033      	str	r3, [r6, #0]
 800859e:	6823      	ldr	r3, [r4, #0]
 80085a0:	0699      	lsls	r1, r3, #26
 80085a2:	bf42      	ittt	mi
 80085a4:	6833      	ldrmi	r3, [r6, #0]
 80085a6:	3302      	addmi	r3, #2
 80085a8:	6033      	strmi	r3, [r6, #0]
 80085aa:	6825      	ldr	r5, [r4, #0]
 80085ac:	f015 0506 	ands.w	r5, r5, #6
 80085b0:	d106      	bne.n	80085c0 <_printf_common+0x48>
 80085b2:	f104 0a19 	add.w	sl, r4, #25
 80085b6:	68e3      	ldr	r3, [r4, #12]
 80085b8:	6832      	ldr	r2, [r6, #0]
 80085ba:	1a9b      	subs	r3, r3, r2
 80085bc:	42ab      	cmp	r3, r5
 80085be:	dc26      	bgt.n	800860e <_printf_common+0x96>
 80085c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80085c4:	6822      	ldr	r2, [r4, #0]
 80085c6:	3b00      	subs	r3, #0
 80085c8:	bf18      	it	ne
 80085ca:	2301      	movne	r3, #1
 80085cc:	0692      	lsls	r2, r2, #26
 80085ce:	d42b      	bmi.n	8008628 <_printf_common+0xb0>
 80085d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80085d4:	4641      	mov	r1, r8
 80085d6:	4638      	mov	r0, r7
 80085d8:	47c8      	blx	r9
 80085da:	3001      	adds	r0, #1
 80085dc:	d01e      	beq.n	800861c <_printf_common+0xa4>
 80085de:	6823      	ldr	r3, [r4, #0]
 80085e0:	6922      	ldr	r2, [r4, #16]
 80085e2:	f003 0306 	and.w	r3, r3, #6
 80085e6:	2b04      	cmp	r3, #4
 80085e8:	bf02      	ittt	eq
 80085ea:	68e5      	ldreq	r5, [r4, #12]
 80085ec:	6833      	ldreq	r3, [r6, #0]
 80085ee:	1aed      	subeq	r5, r5, r3
 80085f0:	68a3      	ldr	r3, [r4, #8]
 80085f2:	bf0c      	ite	eq
 80085f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80085f8:	2500      	movne	r5, #0
 80085fa:	4293      	cmp	r3, r2
 80085fc:	bfc4      	itt	gt
 80085fe:	1a9b      	subgt	r3, r3, r2
 8008600:	18ed      	addgt	r5, r5, r3
 8008602:	2600      	movs	r6, #0
 8008604:	341a      	adds	r4, #26
 8008606:	42b5      	cmp	r5, r6
 8008608:	d11a      	bne.n	8008640 <_printf_common+0xc8>
 800860a:	2000      	movs	r0, #0
 800860c:	e008      	b.n	8008620 <_printf_common+0xa8>
 800860e:	2301      	movs	r3, #1
 8008610:	4652      	mov	r2, sl
 8008612:	4641      	mov	r1, r8
 8008614:	4638      	mov	r0, r7
 8008616:	47c8      	blx	r9
 8008618:	3001      	adds	r0, #1
 800861a:	d103      	bne.n	8008624 <_printf_common+0xac>
 800861c:	f04f 30ff 	mov.w	r0, #4294967295
 8008620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008624:	3501      	adds	r5, #1
 8008626:	e7c6      	b.n	80085b6 <_printf_common+0x3e>
 8008628:	18e1      	adds	r1, r4, r3
 800862a:	1c5a      	adds	r2, r3, #1
 800862c:	2030      	movs	r0, #48	@ 0x30
 800862e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008632:	4422      	add	r2, r4
 8008634:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008638:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800863c:	3302      	adds	r3, #2
 800863e:	e7c7      	b.n	80085d0 <_printf_common+0x58>
 8008640:	2301      	movs	r3, #1
 8008642:	4622      	mov	r2, r4
 8008644:	4641      	mov	r1, r8
 8008646:	4638      	mov	r0, r7
 8008648:	47c8      	blx	r9
 800864a:	3001      	adds	r0, #1
 800864c:	d0e6      	beq.n	800861c <_printf_common+0xa4>
 800864e:	3601      	adds	r6, #1
 8008650:	e7d9      	b.n	8008606 <_printf_common+0x8e>
	...

08008654 <_printf_i>:
 8008654:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008658:	7e0f      	ldrb	r7, [r1, #24]
 800865a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800865c:	2f78      	cmp	r7, #120	@ 0x78
 800865e:	4691      	mov	r9, r2
 8008660:	4680      	mov	r8, r0
 8008662:	460c      	mov	r4, r1
 8008664:	469a      	mov	sl, r3
 8008666:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800866a:	d807      	bhi.n	800867c <_printf_i+0x28>
 800866c:	2f62      	cmp	r7, #98	@ 0x62
 800866e:	d80a      	bhi.n	8008686 <_printf_i+0x32>
 8008670:	2f00      	cmp	r7, #0
 8008672:	f000 80d1 	beq.w	8008818 <_printf_i+0x1c4>
 8008676:	2f58      	cmp	r7, #88	@ 0x58
 8008678:	f000 80b8 	beq.w	80087ec <_printf_i+0x198>
 800867c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008680:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008684:	e03a      	b.n	80086fc <_printf_i+0xa8>
 8008686:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800868a:	2b15      	cmp	r3, #21
 800868c:	d8f6      	bhi.n	800867c <_printf_i+0x28>
 800868e:	a101      	add	r1, pc, #4	@ (adr r1, 8008694 <_printf_i+0x40>)
 8008690:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008694:	080086ed 	.word	0x080086ed
 8008698:	08008701 	.word	0x08008701
 800869c:	0800867d 	.word	0x0800867d
 80086a0:	0800867d 	.word	0x0800867d
 80086a4:	0800867d 	.word	0x0800867d
 80086a8:	0800867d 	.word	0x0800867d
 80086ac:	08008701 	.word	0x08008701
 80086b0:	0800867d 	.word	0x0800867d
 80086b4:	0800867d 	.word	0x0800867d
 80086b8:	0800867d 	.word	0x0800867d
 80086bc:	0800867d 	.word	0x0800867d
 80086c0:	080087ff 	.word	0x080087ff
 80086c4:	0800872b 	.word	0x0800872b
 80086c8:	080087b9 	.word	0x080087b9
 80086cc:	0800867d 	.word	0x0800867d
 80086d0:	0800867d 	.word	0x0800867d
 80086d4:	08008821 	.word	0x08008821
 80086d8:	0800867d 	.word	0x0800867d
 80086dc:	0800872b 	.word	0x0800872b
 80086e0:	0800867d 	.word	0x0800867d
 80086e4:	0800867d 	.word	0x0800867d
 80086e8:	080087c1 	.word	0x080087c1
 80086ec:	6833      	ldr	r3, [r6, #0]
 80086ee:	1d1a      	adds	r2, r3, #4
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	6032      	str	r2, [r6, #0]
 80086f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80086f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80086fc:	2301      	movs	r3, #1
 80086fe:	e09c      	b.n	800883a <_printf_i+0x1e6>
 8008700:	6833      	ldr	r3, [r6, #0]
 8008702:	6820      	ldr	r0, [r4, #0]
 8008704:	1d19      	adds	r1, r3, #4
 8008706:	6031      	str	r1, [r6, #0]
 8008708:	0606      	lsls	r6, r0, #24
 800870a:	d501      	bpl.n	8008710 <_printf_i+0xbc>
 800870c:	681d      	ldr	r5, [r3, #0]
 800870e:	e003      	b.n	8008718 <_printf_i+0xc4>
 8008710:	0645      	lsls	r5, r0, #25
 8008712:	d5fb      	bpl.n	800870c <_printf_i+0xb8>
 8008714:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008718:	2d00      	cmp	r5, #0
 800871a:	da03      	bge.n	8008724 <_printf_i+0xd0>
 800871c:	232d      	movs	r3, #45	@ 0x2d
 800871e:	426d      	negs	r5, r5
 8008720:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008724:	4858      	ldr	r0, [pc, #352]	@ (8008888 <_printf_i+0x234>)
 8008726:	230a      	movs	r3, #10
 8008728:	e011      	b.n	800874e <_printf_i+0xfa>
 800872a:	6821      	ldr	r1, [r4, #0]
 800872c:	6833      	ldr	r3, [r6, #0]
 800872e:	0608      	lsls	r0, r1, #24
 8008730:	f853 5b04 	ldr.w	r5, [r3], #4
 8008734:	d402      	bmi.n	800873c <_printf_i+0xe8>
 8008736:	0649      	lsls	r1, r1, #25
 8008738:	bf48      	it	mi
 800873a:	b2ad      	uxthmi	r5, r5
 800873c:	2f6f      	cmp	r7, #111	@ 0x6f
 800873e:	4852      	ldr	r0, [pc, #328]	@ (8008888 <_printf_i+0x234>)
 8008740:	6033      	str	r3, [r6, #0]
 8008742:	bf14      	ite	ne
 8008744:	230a      	movne	r3, #10
 8008746:	2308      	moveq	r3, #8
 8008748:	2100      	movs	r1, #0
 800874a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800874e:	6866      	ldr	r6, [r4, #4]
 8008750:	60a6      	str	r6, [r4, #8]
 8008752:	2e00      	cmp	r6, #0
 8008754:	db05      	blt.n	8008762 <_printf_i+0x10e>
 8008756:	6821      	ldr	r1, [r4, #0]
 8008758:	432e      	orrs	r6, r5
 800875a:	f021 0104 	bic.w	r1, r1, #4
 800875e:	6021      	str	r1, [r4, #0]
 8008760:	d04b      	beq.n	80087fa <_printf_i+0x1a6>
 8008762:	4616      	mov	r6, r2
 8008764:	fbb5 f1f3 	udiv	r1, r5, r3
 8008768:	fb03 5711 	mls	r7, r3, r1, r5
 800876c:	5dc7      	ldrb	r7, [r0, r7]
 800876e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008772:	462f      	mov	r7, r5
 8008774:	42bb      	cmp	r3, r7
 8008776:	460d      	mov	r5, r1
 8008778:	d9f4      	bls.n	8008764 <_printf_i+0x110>
 800877a:	2b08      	cmp	r3, #8
 800877c:	d10b      	bne.n	8008796 <_printf_i+0x142>
 800877e:	6823      	ldr	r3, [r4, #0]
 8008780:	07df      	lsls	r7, r3, #31
 8008782:	d508      	bpl.n	8008796 <_printf_i+0x142>
 8008784:	6923      	ldr	r3, [r4, #16]
 8008786:	6861      	ldr	r1, [r4, #4]
 8008788:	4299      	cmp	r1, r3
 800878a:	bfde      	ittt	le
 800878c:	2330      	movle	r3, #48	@ 0x30
 800878e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008792:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008796:	1b92      	subs	r2, r2, r6
 8008798:	6122      	str	r2, [r4, #16]
 800879a:	f8cd a000 	str.w	sl, [sp]
 800879e:	464b      	mov	r3, r9
 80087a0:	aa03      	add	r2, sp, #12
 80087a2:	4621      	mov	r1, r4
 80087a4:	4640      	mov	r0, r8
 80087a6:	f7ff fee7 	bl	8008578 <_printf_common>
 80087aa:	3001      	adds	r0, #1
 80087ac:	d14a      	bne.n	8008844 <_printf_i+0x1f0>
 80087ae:	f04f 30ff 	mov.w	r0, #4294967295
 80087b2:	b004      	add	sp, #16
 80087b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087b8:	6823      	ldr	r3, [r4, #0]
 80087ba:	f043 0320 	orr.w	r3, r3, #32
 80087be:	6023      	str	r3, [r4, #0]
 80087c0:	4832      	ldr	r0, [pc, #200]	@ (800888c <_printf_i+0x238>)
 80087c2:	2778      	movs	r7, #120	@ 0x78
 80087c4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80087c8:	6823      	ldr	r3, [r4, #0]
 80087ca:	6831      	ldr	r1, [r6, #0]
 80087cc:	061f      	lsls	r7, r3, #24
 80087ce:	f851 5b04 	ldr.w	r5, [r1], #4
 80087d2:	d402      	bmi.n	80087da <_printf_i+0x186>
 80087d4:	065f      	lsls	r7, r3, #25
 80087d6:	bf48      	it	mi
 80087d8:	b2ad      	uxthmi	r5, r5
 80087da:	6031      	str	r1, [r6, #0]
 80087dc:	07d9      	lsls	r1, r3, #31
 80087de:	bf44      	itt	mi
 80087e0:	f043 0320 	orrmi.w	r3, r3, #32
 80087e4:	6023      	strmi	r3, [r4, #0]
 80087e6:	b11d      	cbz	r5, 80087f0 <_printf_i+0x19c>
 80087e8:	2310      	movs	r3, #16
 80087ea:	e7ad      	b.n	8008748 <_printf_i+0xf4>
 80087ec:	4826      	ldr	r0, [pc, #152]	@ (8008888 <_printf_i+0x234>)
 80087ee:	e7e9      	b.n	80087c4 <_printf_i+0x170>
 80087f0:	6823      	ldr	r3, [r4, #0]
 80087f2:	f023 0320 	bic.w	r3, r3, #32
 80087f6:	6023      	str	r3, [r4, #0]
 80087f8:	e7f6      	b.n	80087e8 <_printf_i+0x194>
 80087fa:	4616      	mov	r6, r2
 80087fc:	e7bd      	b.n	800877a <_printf_i+0x126>
 80087fe:	6833      	ldr	r3, [r6, #0]
 8008800:	6825      	ldr	r5, [r4, #0]
 8008802:	6961      	ldr	r1, [r4, #20]
 8008804:	1d18      	adds	r0, r3, #4
 8008806:	6030      	str	r0, [r6, #0]
 8008808:	062e      	lsls	r6, r5, #24
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	d501      	bpl.n	8008812 <_printf_i+0x1be>
 800880e:	6019      	str	r1, [r3, #0]
 8008810:	e002      	b.n	8008818 <_printf_i+0x1c4>
 8008812:	0668      	lsls	r0, r5, #25
 8008814:	d5fb      	bpl.n	800880e <_printf_i+0x1ba>
 8008816:	8019      	strh	r1, [r3, #0]
 8008818:	2300      	movs	r3, #0
 800881a:	6123      	str	r3, [r4, #16]
 800881c:	4616      	mov	r6, r2
 800881e:	e7bc      	b.n	800879a <_printf_i+0x146>
 8008820:	6833      	ldr	r3, [r6, #0]
 8008822:	1d1a      	adds	r2, r3, #4
 8008824:	6032      	str	r2, [r6, #0]
 8008826:	681e      	ldr	r6, [r3, #0]
 8008828:	6862      	ldr	r2, [r4, #4]
 800882a:	2100      	movs	r1, #0
 800882c:	4630      	mov	r0, r6
 800882e:	f7f7 fccf 	bl	80001d0 <memchr>
 8008832:	b108      	cbz	r0, 8008838 <_printf_i+0x1e4>
 8008834:	1b80      	subs	r0, r0, r6
 8008836:	6060      	str	r0, [r4, #4]
 8008838:	6863      	ldr	r3, [r4, #4]
 800883a:	6123      	str	r3, [r4, #16]
 800883c:	2300      	movs	r3, #0
 800883e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008842:	e7aa      	b.n	800879a <_printf_i+0x146>
 8008844:	6923      	ldr	r3, [r4, #16]
 8008846:	4632      	mov	r2, r6
 8008848:	4649      	mov	r1, r9
 800884a:	4640      	mov	r0, r8
 800884c:	47d0      	blx	sl
 800884e:	3001      	adds	r0, #1
 8008850:	d0ad      	beq.n	80087ae <_printf_i+0x15a>
 8008852:	6823      	ldr	r3, [r4, #0]
 8008854:	079b      	lsls	r3, r3, #30
 8008856:	d413      	bmi.n	8008880 <_printf_i+0x22c>
 8008858:	68e0      	ldr	r0, [r4, #12]
 800885a:	9b03      	ldr	r3, [sp, #12]
 800885c:	4298      	cmp	r0, r3
 800885e:	bfb8      	it	lt
 8008860:	4618      	movlt	r0, r3
 8008862:	e7a6      	b.n	80087b2 <_printf_i+0x15e>
 8008864:	2301      	movs	r3, #1
 8008866:	4632      	mov	r2, r6
 8008868:	4649      	mov	r1, r9
 800886a:	4640      	mov	r0, r8
 800886c:	47d0      	blx	sl
 800886e:	3001      	adds	r0, #1
 8008870:	d09d      	beq.n	80087ae <_printf_i+0x15a>
 8008872:	3501      	adds	r5, #1
 8008874:	68e3      	ldr	r3, [r4, #12]
 8008876:	9903      	ldr	r1, [sp, #12]
 8008878:	1a5b      	subs	r3, r3, r1
 800887a:	42ab      	cmp	r3, r5
 800887c:	dcf2      	bgt.n	8008864 <_printf_i+0x210>
 800887e:	e7eb      	b.n	8008858 <_printf_i+0x204>
 8008880:	2500      	movs	r5, #0
 8008882:	f104 0619 	add.w	r6, r4, #25
 8008886:	e7f5      	b.n	8008874 <_printf_i+0x220>
 8008888:	0800d6b8 	.word	0x0800d6b8
 800888c:	0800d6c9 	.word	0x0800d6c9

08008890 <_scanf_float>:
 8008890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008894:	b087      	sub	sp, #28
 8008896:	4691      	mov	r9, r2
 8008898:	9303      	str	r3, [sp, #12]
 800889a:	688b      	ldr	r3, [r1, #8]
 800889c:	1e5a      	subs	r2, r3, #1
 800889e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80088a2:	bf81      	itttt	hi
 80088a4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80088a8:	eb03 0b05 	addhi.w	fp, r3, r5
 80088ac:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80088b0:	608b      	strhi	r3, [r1, #8]
 80088b2:	680b      	ldr	r3, [r1, #0]
 80088b4:	460a      	mov	r2, r1
 80088b6:	f04f 0500 	mov.w	r5, #0
 80088ba:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80088be:	f842 3b1c 	str.w	r3, [r2], #28
 80088c2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80088c6:	4680      	mov	r8, r0
 80088c8:	460c      	mov	r4, r1
 80088ca:	bf98      	it	ls
 80088cc:	f04f 0b00 	movls.w	fp, #0
 80088d0:	9201      	str	r2, [sp, #4]
 80088d2:	4616      	mov	r6, r2
 80088d4:	46aa      	mov	sl, r5
 80088d6:	462f      	mov	r7, r5
 80088d8:	9502      	str	r5, [sp, #8]
 80088da:	68a2      	ldr	r2, [r4, #8]
 80088dc:	b15a      	cbz	r2, 80088f6 <_scanf_float+0x66>
 80088de:	f8d9 3000 	ldr.w	r3, [r9]
 80088e2:	781b      	ldrb	r3, [r3, #0]
 80088e4:	2b4e      	cmp	r3, #78	@ 0x4e
 80088e6:	d863      	bhi.n	80089b0 <_scanf_float+0x120>
 80088e8:	2b40      	cmp	r3, #64	@ 0x40
 80088ea:	d83b      	bhi.n	8008964 <_scanf_float+0xd4>
 80088ec:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80088f0:	b2c8      	uxtb	r0, r1
 80088f2:	280e      	cmp	r0, #14
 80088f4:	d939      	bls.n	800896a <_scanf_float+0xda>
 80088f6:	b11f      	cbz	r7, 8008900 <_scanf_float+0x70>
 80088f8:	6823      	ldr	r3, [r4, #0]
 80088fa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80088fe:	6023      	str	r3, [r4, #0]
 8008900:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008904:	f1ba 0f01 	cmp.w	sl, #1
 8008908:	f200 8114 	bhi.w	8008b34 <_scanf_float+0x2a4>
 800890c:	9b01      	ldr	r3, [sp, #4]
 800890e:	429e      	cmp	r6, r3
 8008910:	f200 8105 	bhi.w	8008b1e <_scanf_float+0x28e>
 8008914:	2001      	movs	r0, #1
 8008916:	b007      	add	sp, #28
 8008918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800891c:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008920:	2a0d      	cmp	r2, #13
 8008922:	d8e8      	bhi.n	80088f6 <_scanf_float+0x66>
 8008924:	a101      	add	r1, pc, #4	@ (adr r1, 800892c <_scanf_float+0x9c>)
 8008926:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800892a:	bf00      	nop
 800892c:	08008a75 	.word	0x08008a75
 8008930:	080088f7 	.word	0x080088f7
 8008934:	080088f7 	.word	0x080088f7
 8008938:	080088f7 	.word	0x080088f7
 800893c:	08008ad1 	.word	0x08008ad1
 8008940:	08008aab 	.word	0x08008aab
 8008944:	080088f7 	.word	0x080088f7
 8008948:	080088f7 	.word	0x080088f7
 800894c:	08008a83 	.word	0x08008a83
 8008950:	080088f7 	.word	0x080088f7
 8008954:	080088f7 	.word	0x080088f7
 8008958:	080088f7 	.word	0x080088f7
 800895c:	080088f7 	.word	0x080088f7
 8008960:	08008a3f 	.word	0x08008a3f
 8008964:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008968:	e7da      	b.n	8008920 <_scanf_float+0x90>
 800896a:	290e      	cmp	r1, #14
 800896c:	d8c3      	bhi.n	80088f6 <_scanf_float+0x66>
 800896e:	a001      	add	r0, pc, #4	@ (adr r0, 8008974 <_scanf_float+0xe4>)
 8008970:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008974:	08008a2f 	.word	0x08008a2f
 8008978:	080088f7 	.word	0x080088f7
 800897c:	08008a2f 	.word	0x08008a2f
 8008980:	08008abf 	.word	0x08008abf
 8008984:	080088f7 	.word	0x080088f7
 8008988:	080089d1 	.word	0x080089d1
 800898c:	08008a15 	.word	0x08008a15
 8008990:	08008a15 	.word	0x08008a15
 8008994:	08008a15 	.word	0x08008a15
 8008998:	08008a15 	.word	0x08008a15
 800899c:	08008a15 	.word	0x08008a15
 80089a0:	08008a15 	.word	0x08008a15
 80089a4:	08008a15 	.word	0x08008a15
 80089a8:	08008a15 	.word	0x08008a15
 80089ac:	08008a15 	.word	0x08008a15
 80089b0:	2b6e      	cmp	r3, #110	@ 0x6e
 80089b2:	d809      	bhi.n	80089c8 <_scanf_float+0x138>
 80089b4:	2b60      	cmp	r3, #96	@ 0x60
 80089b6:	d8b1      	bhi.n	800891c <_scanf_float+0x8c>
 80089b8:	2b54      	cmp	r3, #84	@ 0x54
 80089ba:	d07b      	beq.n	8008ab4 <_scanf_float+0x224>
 80089bc:	2b59      	cmp	r3, #89	@ 0x59
 80089be:	d19a      	bne.n	80088f6 <_scanf_float+0x66>
 80089c0:	2d07      	cmp	r5, #7
 80089c2:	d198      	bne.n	80088f6 <_scanf_float+0x66>
 80089c4:	2508      	movs	r5, #8
 80089c6:	e02f      	b.n	8008a28 <_scanf_float+0x198>
 80089c8:	2b74      	cmp	r3, #116	@ 0x74
 80089ca:	d073      	beq.n	8008ab4 <_scanf_float+0x224>
 80089cc:	2b79      	cmp	r3, #121	@ 0x79
 80089ce:	e7f6      	b.n	80089be <_scanf_float+0x12e>
 80089d0:	6821      	ldr	r1, [r4, #0]
 80089d2:	05c8      	lsls	r0, r1, #23
 80089d4:	d51e      	bpl.n	8008a14 <_scanf_float+0x184>
 80089d6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80089da:	6021      	str	r1, [r4, #0]
 80089dc:	3701      	adds	r7, #1
 80089de:	f1bb 0f00 	cmp.w	fp, #0
 80089e2:	d003      	beq.n	80089ec <_scanf_float+0x15c>
 80089e4:	3201      	adds	r2, #1
 80089e6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80089ea:	60a2      	str	r2, [r4, #8]
 80089ec:	68a3      	ldr	r3, [r4, #8]
 80089ee:	3b01      	subs	r3, #1
 80089f0:	60a3      	str	r3, [r4, #8]
 80089f2:	6923      	ldr	r3, [r4, #16]
 80089f4:	3301      	adds	r3, #1
 80089f6:	6123      	str	r3, [r4, #16]
 80089f8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80089fc:	3b01      	subs	r3, #1
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	f8c9 3004 	str.w	r3, [r9, #4]
 8008a04:	f340 8082 	ble.w	8008b0c <_scanf_float+0x27c>
 8008a08:	f8d9 3000 	ldr.w	r3, [r9]
 8008a0c:	3301      	adds	r3, #1
 8008a0e:	f8c9 3000 	str.w	r3, [r9]
 8008a12:	e762      	b.n	80088da <_scanf_float+0x4a>
 8008a14:	eb1a 0105 	adds.w	r1, sl, r5
 8008a18:	f47f af6d 	bne.w	80088f6 <_scanf_float+0x66>
 8008a1c:	6822      	ldr	r2, [r4, #0]
 8008a1e:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008a22:	6022      	str	r2, [r4, #0]
 8008a24:	460d      	mov	r5, r1
 8008a26:	468a      	mov	sl, r1
 8008a28:	f806 3b01 	strb.w	r3, [r6], #1
 8008a2c:	e7de      	b.n	80089ec <_scanf_float+0x15c>
 8008a2e:	6822      	ldr	r2, [r4, #0]
 8008a30:	0610      	lsls	r0, r2, #24
 8008a32:	f57f af60 	bpl.w	80088f6 <_scanf_float+0x66>
 8008a36:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008a3a:	6022      	str	r2, [r4, #0]
 8008a3c:	e7f4      	b.n	8008a28 <_scanf_float+0x198>
 8008a3e:	f1ba 0f00 	cmp.w	sl, #0
 8008a42:	d10c      	bne.n	8008a5e <_scanf_float+0x1ce>
 8008a44:	b977      	cbnz	r7, 8008a64 <_scanf_float+0x1d4>
 8008a46:	6822      	ldr	r2, [r4, #0]
 8008a48:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008a4c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008a50:	d108      	bne.n	8008a64 <_scanf_float+0x1d4>
 8008a52:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008a56:	6022      	str	r2, [r4, #0]
 8008a58:	f04f 0a01 	mov.w	sl, #1
 8008a5c:	e7e4      	b.n	8008a28 <_scanf_float+0x198>
 8008a5e:	f1ba 0f02 	cmp.w	sl, #2
 8008a62:	d050      	beq.n	8008b06 <_scanf_float+0x276>
 8008a64:	2d01      	cmp	r5, #1
 8008a66:	d002      	beq.n	8008a6e <_scanf_float+0x1de>
 8008a68:	2d04      	cmp	r5, #4
 8008a6a:	f47f af44 	bne.w	80088f6 <_scanf_float+0x66>
 8008a6e:	3501      	adds	r5, #1
 8008a70:	b2ed      	uxtb	r5, r5
 8008a72:	e7d9      	b.n	8008a28 <_scanf_float+0x198>
 8008a74:	f1ba 0f01 	cmp.w	sl, #1
 8008a78:	f47f af3d 	bne.w	80088f6 <_scanf_float+0x66>
 8008a7c:	f04f 0a02 	mov.w	sl, #2
 8008a80:	e7d2      	b.n	8008a28 <_scanf_float+0x198>
 8008a82:	b975      	cbnz	r5, 8008aa2 <_scanf_float+0x212>
 8008a84:	2f00      	cmp	r7, #0
 8008a86:	f47f af37 	bne.w	80088f8 <_scanf_float+0x68>
 8008a8a:	6822      	ldr	r2, [r4, #0]
 8008a8c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008a90:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008a94:	f040 8103 	bne.w	8008c9e <_scanf_float+0x40e>
 8008a98:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008a9c:	6022      	str	r2, [r4, #0]
 8008a9e:	2501      	movs	r5, #1
 8008aa0:	e7c2      	b.n	8008a28 <_scanf_float+0x198>
 8008aa2:	2d03      	cmp	r5, #3
 8008aa4:	d0e3      	beq.n	8008a6e <_scanf_float+0x1de>
 8008aa6:	2d05      	cmp	r5, #5
 8008aa8:	e7df      	b.n	8008a6a <_scanf_float+0x1da>
 8008aaa:	2d02      	cmp	r5, #2
 8008aac:	f47f af23 	bne.w	80088f6 <_scanf_float+0x66>
 8008ab0:	2503      	movs	r5, #3
 8008ab2:	e7b9      	b.n	8008a28 <_scanf_float+0x198>
 8008ab4:	2d06      	cmp	r5, #6
 8008ab6:	f47f af1e 	bne.w	80088f6 <_scanf_float+0x66>
 8008aba:	2507      	movs	r5, #7
 8008abc:	e7b4      	b.n	8008a28 <_scanf_float+0x198>
 8008abe:	6822      	ldr	r2, [r4, #0]
 8008ac0:	0591      	lsls	r1, r2, #22
 8008ac2:	f57f af18 	bpl.w	80088f6 <_scanf_float+0x66>
 8008ac6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8008aca:	6022      	str	r2, [r4, #0]
 8008acc:	9702      	str	r7, [sp, #8]
 8008ace:	e7ab      	b.n	8008a28 <_scanf_float+0x198>
 8008ad0:	6822      	ldr	r2, [r4, #0]
 8008ad2:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8008ad6:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008ada:	d005      	beq.n	8008ae8 <_scanf_float+0x258>
 8008adc:	0550      	lsls	r0, r2, #21
 8008ade:	f57f af0a 	bpl.w	80088f6 <_scanf_float+0x66>
 8008ae2:	2f00      	cmp	r7, #0
 8008ae4:	f000 80db 	beq.w	8008c9e <_scanf_float+0x40e>
 8008ae8:	0591      	lsls	r1, r2, #22
 8008aea:	bf58      	it	pl
 8008aec:	9902      	ldrpl	r1, [sp, #8]
 8008aee:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008af2:	bf58      	it	pl
 8008af4:	1a79      	subpl	r1, r7, r1
 8008af6:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8008afa:	bf58      	it	pl
 8008afc:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008b00:	6022      	str	r2, [r4, #0]
 8008b02:	2700      	movs	r7, #0
 8008b04:	e790      	b.n	8008a28 <_scanf_float+0x198>
 8008b06:	f04f 0a03 	mov.w	sl, #3
 8008b0a:	e78d      	b.n	8008a28 <_scanf_float+0x198>
 8008b0c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008b10:	4649      	mov	r1, r9
 8008b12:	4640      	mov	r0, r8
 8008b14:	4798      	blx	r3
 8008b16:	2800      	cmp	r0, #0
 8008b18:	f43f aedf 	beq.w	80088da <_scanf_float+0x4a>
 8008b1c:	e6eb      	b.n	80088f6 <_scanf_float+0x66>
 8008b1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008b22:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008b26:	464a      	mov	r2, r9
 8008b28:	4640      	mov	r0, r8
 8008b2a:	4798      	blx	r3
 8008b2c:	6923      	ldr	r3, [r4, #16]
 8008b2e:	3b01      	subs	r3, #1
 8008b30:	6123      	str	r3, [r4, #16]
 8008b32:	e6eb      	b.n	800890c <_scanf_float+0x7c>
 8008b34:	1e6b      	subs	r3, r5, #1
 8008b36:	2b06      	cmp	r3, #6
 8008b38:	d824      	bhi.n	8008b84 <_scanf_float+0x2f4>
 8008b3a:	2d02      	cmp	r5, #2
 8008b3c:	d836      	bhi.n	8008bac <_scanf_float+0x31c>
 8008b3e:	9b01      	ldr	r3, [sp, #4]
 8008b40:	429e      	cmp	r6, r3
 8008b42:	f67f aee7 	bls.w	8008914 <_scanf_float+0x84>
 8008b46:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008b4a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008b4e:	464a      	mov	r2, r9
 8008b50:	4640      	mov	r0, r8
 8008b52:	4798      	blx	r3
 8008b54:	6923      	ldr	r3, [r4, #16]
 8008b56:	3b01      	subs	r3, #1
 8008b58:	6123      	str	r3, [r4, #16]
 8008b5a:	e7f0      	b.n	8008b3e <_scanf_float+0x2ae>
 8008b5c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008b60:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008b64:	464a      	mov	r2, r9
 8008b66:	4640      	mov	r0, r8
 8008b68:	4798      	blx	r3
 8008b6a:	6923      	ldr	r3, [r4, #16]
 8008b6c:	3b01      	subs	r3, #1
 8008b6e:	6123      	str	r3, [r4, #16]
 8008b70:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008b74:	fa5f fa8a 	uxtb.w	sl, sl
 8008b78:	f1ba 0f02 	cmp.w	sl, #2
 8008b7c:	d1ee      	bne.n	8008b5c <_scanf_float+0x2cc>
 8008b7e:	3d03      	subs	r5, #3
 8008b80:	b2ed      	uxtb	r5, r5
 8008b82:	1b76      	subs	r6, r6, r5
 8008b84:	6823      	ldr	r3, [r4, #0]
 8008b86:	05da      	lsls	r2, r3, #23
 8008b88:	d530      	bpl.n	8008bec <_scanf_float+0x35c>
 8008b8a:	055b      	lsls	r3, r3, #21
 8008b8c:	d511      	bpl.n	8008bb2 <_scanf_float+0x322>
 8008b8e:	9b01      	ldr	r3, [sp, #4]
 8008b90:	429e      	cmp	r6, r3
 8008b92:	f67f aebf 	bls.w	8008914 <_scanf_float+0x84>
 8008b96:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008b9a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008b9e:	464a      	mov	r2, r9
 8008ba0:	4640      	mov	r0, r8
 8008ba2:	4798      	blx	r3
 8008ba4:	6923      	ldr	r3, [r4, #16]
 8008ba6:	3b01      	subs	r3, #1
 8008ba8:	6123      	str	r3, [r4, #16]
 8008baa:	e7f0      	b.n	8008b8e <_scanf_float+0x2fe>
 8008bac:	46aa      	mov	sl, r5
 8008bae:	46b3      	mov	fp, r6
 8008bb0:	e7de      	b.n	8008b70 <_scanf_float+0x2e0>
 8008bb2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008bb6:	6923      	ldr	r3, [r4, #16]
 8008bb8:	2965      	cmp	r1, #101	@ 0x65
 8008bba:	f103 33ff 	add.w	r3, r3, #4294967295
 8008bbe:	f106 35ff 	add.w	r5, r6, #4294967295
 8008bc2:	6123      	str	r3, [r4, #16]
 8008bc4:	d00c      	beq.n	8008be0 <_scanf_float+0x350>
 8008bc6:	2945      	cmp	r1, #69	@ 0x45
 8008bc8:	d00a      	beq.n	8008be0 <_scanf_float+0x350>
 8008bca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008bce:	464a      	mov	r2, r9
 8008bd0:	4640      	mov	r0, r8
 8008bd2:	4798      	blx	r3
 8008bd4:	6923      	ldr	r3, [r4, #16]
 8008bd6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008bda:	3b01      	subs	r3, #1
 8008bdc:	1eb5      	subs	r5, r6, #2
 8008bde:	6123      	str	r3, [r4, #16]
 8008be0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008be4:	464a      	mov	r2, r9
 8008be6:	4640      	mov	r0, r8
 8008be8:	4798      	blx	r3
 8008bea:	462e      	mov	r6, r5
 8008bec:	6822      	ldr	r2, [r4, #0]
 8008bee:	f012 0210 	ands.w	r2, r2, #16
 8008bf2:	d001      	beq.n	8008bf8 <_scanf_float+0x368>
 8008bf4:	2000      	movs	r0, #0
 8008bf6:	e68e      	b.n	8008916 <_scanf_float+0x86>
 8008bf8:	7032      	strb	r2, [r6, #0]
 8008bfa:	6823      	ldr	r3, [r4, #0]
 8008bfc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008c00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008c04:	d125      	bne.n	8008c52 <_scanf_float+0x3c2>
 8008c06:	9b02      	ldr	r3, [sp, #8]
 8008c08:	429f      	cmp	r7, r3
 8008c0a:	d00a      	beq.n	8008c22 <_scanf_float+0x392>
 8008c0c:	1bda      	subs	r2, r3, r7
 8008c0e:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008c12:	429e      	cmp	r6, r3
 8008c14:	bf28      	it	cs
 8008c16:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008c1a:	4922      	ldr	r1, [pc, #136]	@ (8008ca4 <_scanf_float+0x414>)
 8008c1c:	4630      	mov	r0, r6
 8008c1e:	f000 f907 	bl	8008e30 <siprintf>
 8008c22:	9901      	ldr	r1, [sp, #4]
 8008c24:	2200      	movs	r2, #0
 8008c26:	4640      	mov	r0, r8
 8008c28:	f002 fc3e 	bl	800b4a8 <_strtod_r>
 8008c2c:	9b03      	ldr	r3, [sp, #12]
 8008c2e:	6821      	ldr	r1, [r4, #0]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f011 0f02 	tst.w	r1, #2
 8008c36:	ec57 6b10 	vmov	r6, r7, d0
 8008c3a:	f103 0204 	add.w	r2, r3, #4
 8008c3e:	d015      	beq.n	8008c6c <_scanf_float+0x3dc>
 8008c40:	9903      	ldr	r1, [sp, #12]
 8008c42:	600a      	str	r2, [r1, #0]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	e9c3 6700 	strd	r6, r7, [r3]
 8008c4a:	68e3      	ldr	r3, [r4, #12]
 8008c4c:	3301      	adds	r3, #1
 8008c4e:	60e3      	str	r3, [r4, #12]
 8008c50:	e7d0      	b.n	8008bf4 <_scanf_float+0x364>
 8008c52:	9b04      	ldr	r3, [sp, #16]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d0e4      	beq.n	8008c22 <_scanf_float+0x392>
 8008c58:	9905      	ldr	r1, [sp, #20]
 8008c5a:	230a      	movs	r3, #10
 8008c5c:	3101      	adds	r1, #1
 8008c5e:	4640      	mov	r0, r8
 8008c60:	f002 fca2 	bl	800b5a8 <_strtol_r>
 8008c64:	9b04      	ldr	r3, [sp, #16]
 8008c66:	9e05      	ldr	r6, [sp, #20]
 8008c68:	1ac2      	subs	r2, r0, r3
 8008c6a:	e7d0      	b.n	8008c0e <_scanf_float+0x37e>
 8008c6c:	f011 0f04 	tst.w	r1, #4
 8008c70:	9903      	ldr	r1, [sp, #12]
 8008c72:	600a      	str	r2, [r1, #0]
 8008c74:	d1e6      	bne.n	8008c44 <_scanf_float+0x3b4>
 8008c76:	681d      	ldr	r5, [r3, #0]
 8008c78:	4632      	mov	r2, r6
 8008c7a:	463b      	mov	r3, r7
 8008c7c:	4630      	mov	r0, r6
 8008c7e:	4639      	mov	r1, r7
 8008c80:	f7f7 ff54 	bl	8000b2c <__aeabi_dcmpun>
 8008c84:	b128      	cbz	r0, 8008c92 <_scanf_float+0x402>
 8008c86:	4808      	ldr	r0, [pc, #32]	@ (8008ca8 <_scanf_float+0x418>)
 8008c88:	f000 fa04 	bl	8009094 <nanf>
 8008c8c:	ed85 0a00 	vstr	s0, [r5]
 8008c90:	e7db      	b.n	8008c4a <_scanf_float+0x3ba>
 8008c92:	4630      	mov	r0, r6
 8008c94:	4639      	mov	r1, r7
 8008c96:	f7f7 ffa7 	bl	8000be8 <__aeabi_d2f>
 8008c9a:	6028      	str	r0, [r5, #0]
 8008c9c:	e7d5      	b.n	8008c4a <_scanf_float+0x3ba>
 8008c9e:	2700      	movs	r7, #0
 8008ca0:	e62e      	b.n	8008900 <_scanf_float+0x70>
 8008ca2:	bf00      	nop
 8008ca4:	0800d6da 	.word	0x0800d6da
 8008ca8:	0800d836 	.word	0x0800d836

08008cac <std>:
 8008cac:	2300      	movs	r3, #0
 8008cae:	b510      	push	{r4, lr}
 8008cb0:	4604      	mov	r4, r0
 8008cb2:	e9c0 3300 	strd	r3, r3, [r0]
 8008cb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008cba:	6083      	str	r3, [r0, #8]
 8008cbc:	8181      	strh	r1, [r0, #12]
 8008cbe:	6643      	str	r3, [r0, #100]	@ 0x64
 8008cc0:	81c2      	strh	r2, [r0, #14]
 8008cc2:	6183      	str	r3, [r0, #24]
 8008cc4:	4619      	mov	r1, r3
 8008cc6:	2208      	movs	r2, #8
 8008cc8:	305c      	adds	r0, #92	@ 0x5c
 8008cca:	f000 f954 	bl	8008f76 <memset>
 8008cce:	4b0d      	ldr	r3, [pc, #52]	@ (8008d04 <std+0x58>)
 8008cd0:	6263      	str	r3, [r4, #36]	@ 0x24
 8008cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8008d08 <std+0x5c>)
 8008cd4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8008d0c <std+0x60>)
 8008cd8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008cda:	4b0d      	ldr	r3, [pc, #52]	@ (8008d10 <std+0x64>)
 8008cdc:	6323      	str	r3, [r4, #48]	@ 0x30
 8008cde:	4b0d      	ldr	r3, [pc, #52]	@ (8008d14 <std+0x68>)
 8008ce0:	6224      	str	r4, [r4, #32]
 8008ce2:	429c      	cmp	r4, r3
 8008ce4:	d006      	beq.n	8008cf4 <std+0x48>
 8008ce6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008cea:	4294      	cmp	r4, r2
 8008cec:	d002      	beq.n	8008cf4 <std+0x48>
 8008cee:	33d0      	adds	r3, #208	@ 0xd0
 8008cf0:	429c      	cmp	r4, r3
 8008cf2:	d105      	bne.n	8008d00 <std+0x54>
 8008cf4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008cf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008cfc:	f000 b9b8 	b.w	8009070 <__retarget_lock_init_recursive>
 8008d00:	bd10      	pop	{r4, pc}
 8008d02:	bf00      	nop
 8008d04:	08008ecd 	.word	0x08008ecd
 8008d08:	08008ef3 	.word	0x08008ef3
 8008d0c:	08008f2b 	.word	0x08008f2b
 8008d10:	08008f4f 	.word	0x08008f4f
 8008d14:	20000f28 	.word	0x20000f28

08008d18 <stdio_exit_handler>:
 8008d18:	4a02      	ldr	r2, [pc, #8]	@ (8008d24 <stdio_exit_handler+0xc>)
 8008d1a:	4903      	ldr	r1, [pc, #12]	@ (8008d28 <stdio_exit_handler+0x10>)
 8008d1c:	4803      	ldr	r0, [pc, #12]	@ (8008d2c <stdio_exit_handler+0x14>)
 8008d1e:	f000 b869 	b.w	8008df4 <_fwalk_sglue>
 8008d22:	bf00      	nop
 8008d24:	20000028 	.word	0x20000028
 8008d28:	0800bfa1 	.word	0x0800bfa1
 8008d2c:	20000038 	.word	0x20000038

08008d30 <cleanup_stdio>:
 8008d30:	6841      	ldr	r1, [r0, #4]
 8008d32:	4b0c      	ldr	r3, [pc, #48]	@ (8008d64 <cleanup_stdio+0x34>)
 8008d34:	4299      	cmp	r1, r3
 8008d36:	b510      	push	{r4, lr}
 8008d38:	4604      	mov	r4, r0
 8008d3a:	d001      	beq.n	8008d40 <cleanup_stdio+0x10>
 8008d3c:	f003 f930 	bl	800bfa0 <_fflush_r>
 8008d40:	68a1      	ldr	r1, [r4, #8]
 8008d42:	4b09      	ldr	r3, [pc, #36]	@ (8008d68 <cleanup_stdio+0x38>)
 8008d44:	4299      	cmp	r1, r3
 8008d46:	d002      	beq.n	8008d4e <cleanup_stdio+0x1e>
 8008d48:	4620      	mov	r0, r4
 8008d4a:	f003 f929 	bl	800bfa0 <_fflush_r>
 8008d4e:	68e1      	ldr	r1, [r4, #12]
 8008d50:	4b06      	ldr	r3, [pc, #24]	@ (8008d6c <cleanup_stdio+0x3c>)
 8008d52:	4299      	cmp	r1, r3
 8008d54:	d004      	beq.n	8008d60 <cleanup_stdio+0x30>
 8008d56:	4620      	mov	r0, r4
 8008d58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d5c:	f003 b920 	b.w	800bfa0 <_fflush_r>
 8008d60:	bd10      	pop	{r4, pc}
 8008d62:	bf00      	nop
 8008d64:	20000f28 	.word	0x20000f28
 8008d68:	20000f90 	.word	0x20000f90
 8008d6c:	20000ff8 	.word	0x20000ff8

08008d70 <global_stdio_init.part.0>:
 8008d70:	b510      	push	{r4, lr}
 8008d72:	4b0b      	ldr	r3, [pc, #44]	@ (8008da0 <global_stdio_init.part.0+0x30>)
 8008d74:	4c0b      	ldr	r4, [pc, #44]	@ (8008da4 <global_stdio_init.part.0+0x34>)
 8008d76:	4a0c      	ldr	r2, [pc, #48]	@ (8008da8 <global_stdio_init.part.0+0x38>)
 8008d78:	601a      	str	r2, [r3, #0]
 8008d7a:	4620      	mov	r0, r4
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	2104      	movs	r1, #4
 8008d80:	f7ff ff94 	bl	8008cac <std>
 8008d84:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008d88:	2201      	movs	r2, #1
 8008d8a:	2109      	movs	r1, #9
 8008d8c:	f7ff ff8e 	bl	8008cac <std>
 8008d90:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008d94:	2202      	movs	r2, #2
 8008d96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d9a:	2112      	movs	r1, #18
 8008d9c:	f7ff bf86 	b.w	8008cac <std>
 8008da0:	20001060 	.word	0x20001060
 8008da4:	20000f28 	.word	0x20000f28
 8008da8:	08008d19 	.word	0x08008d19

08008dac <__sfp_lock_acquire>:
 8008dac:	4801      	ldr	r0, [pc, #4]	@ (8008db4 <__sfp_lock_acquire+0x8>)
 8008dae:	f000 b960 	b.w	8009072 <__retarget_lock_acquire_recursive>
 8008db2:	bf00      	nop
 8008db4:	20001069 	.word	0x20001069

08008db8 <__sfp_lock_release>:
 8008db8:	4801      	ldr	r0, [pc, #4]	@ (8008dc0 <__sfp_lock_release+0x8>)
 8008dba:	f000 b95b 	b.w	8009074 <__retarget_lock_release_recursive>
 8008dbe:	bf00      	nop
 8008dc0:	20001069 	.word	0x20001069

08008dc4 <__sinit>:
 8008dc4:	b510      	push	{r4, lr}
 8008dc6:	4604      	mov	r4, r0
 8008dc8:	f7ff fff0 	bl	8008dac <__sfp_lock_acquire>
 8008dcc:	6a23      	ldr	r3, [r4, #32]
 8008dce:	b11b      	cbz	r3, 8008dd8 <__sinit+0x14>
 8008dd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008dd4:	f7ff bff0 	b.w	8008db8 <__sfp_lock_release>
 8008dd8:	4b04      	ldr	r3, [pc, #16]	@ (8008dec <__sinit+0x28>)
 8008dda:	6223      	str	r3, [r4, #32]
 8008ddc:	4b04      	ldr	r3, [pc, #16]	@ (8008df0 <__sinit+0x2c>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d1f5      	bne.n	8008dd0 <__sinit+0xc>
 8008de4:	f7ff ffc4 	bl	8008d70 <global_stdio_init.part.0>
 8008de8:	e7f2      	b.n	8008dd0 <__sinit+0xc>
 8008dea:	bf00      	nop
 8008dec:	08008d31 	.word	0x08008d31
 8008df0:	20001060 	.word	0x20001060

08008df4 <_fwalk_sglue>:
 8008df4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008df8:	4607      	mov	r7, r0
 8008dfa:	4688      	mov	r8, r1
 8008dfc:	4614      	mov	r4, r2
 8008dfe:	2600      	movs	r6, #0
 8008e00:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008e04:	f1b9 0901 	subs.w	r9, r9, #1
 8008e08:	d505      	bpl.n	8008e16 <_fwalk_sglue+0x22>
 8008e0a:	6824      	ldr	r4, [r4, #0]
 8008e0c:	2c00      	cmp	r4, #0
 8008e0e:	d1f7      	bne.n	8008e00 <_fwalk_sglue+0xc>
 8008e10:	4630      	mov	r0, r6
 8008e12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e16:	89ab      	ldrh	r3, [r5, #12]
 8008e18:	2b01      	cmp	r3, #1
 8008e1a:	d907      	bls.n	8008e2c <_fwalk_sglue+0x38>
 8008e1c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008e20:	3301      	adds	r3, #1
 8008e22:	d003      	beq.n	8008e2c <_fwalk_sglue+0x38>
 8008e24:	4629      	mov	r1, r5
 8008e26:	4638      	mov	r0, r7
 8008e28:	47c0      	blx	r8
 8008e2a:	4306      	orrs	r6, r0
 8008e2c:	3568      	adds	r5, #104	@ 0x68
 8008e2e:	e7e9      	b.n	8008e04 <_fwalk_sglue+0x10>

08008e30 <siprintf>:
 8008e30:	b40e      	push	{r1, r2, r3}
 8008e32:	b510      	push	{r4, lr}
 8008e34:	b09d      	sub	sp, #116	@ 0x74
 8008e36:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008e38:	9002      	str	r0, [sp, #8]
 8008e3a:	9006      	str	r0, [sp, #24]
 8008e3c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008e40:	480a      	ldr	r0, [pc, #40]	@ (8008e6c <siprintf+0x3c>)
 8008e42:	9107      	str	r1, [sp, #28]
 8008e44:	9104      	str	r1, [sp, #16]
 8008e46:	490a      	ldr	r1, [pc, #40]	@ (8008e70 <siprintf+0x40>)
 8008e48:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e4c:	9105      	str	r1, [sp, #20]
 8008e4e:	2400      	movs	r4, #0
 8008e50:	a902      	add	r1, sp, #8
 8008e52:	6800      	ldr	r0, [r0, #0]
 8008e54:	9301      	str	r3, [sp, #4]
 8008e56:	941b      	str	r4, [sp, #108]	@ 0x6c
 8008e58:	f002 fc04 	bl	800b664 <_svfiprintf_r>
 8008e5c:	9b02      	ldr	r3, [sp, #8]
 8008e5e:	701c      	strb	r4, [r3, #0]
 8008e60:	b01d      	add	sp, #116	@ 0x74
 8008e62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e66:	b003      	add	sp, #12
 8008e68:	4770      	bx	lr
 8008e6a:	bf00      	nop
 8008e6c:	20000034 	.word	0x20000034
 8008e70:	ffff0208 	.word	0xffff0208

08008e74 <siscanf>:
 8008e74:	b40e      	push	{r1, r2, r3}
 8008e76:	b570      	push	{r4, r5, r6, lr}
 8008e78:	b09d      	sub	sp, #116	@ 0x74
 8008e7a:	ac21      	add	r4, sp, #132	@ 0x84
 8008e7c:	2500      	movs	r5, #0
 8008e7e:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8008e82:	f854 6b04 	ldr.w	r6, [r4], #4
 8008e86:	f8ad 2014 	strh.w	r2, [sp, #20]
 8008e8a:	951b      	str	r5, [sp, #108]	@ 0x6c
 8008e8c:	9002      	str	r0, [sp, #8]
 8008e8e:	9006      	str	r0, [sp, #24]
 8008e90:	f7f7 f9ee 	bl	8000270 <strlen>
 8008e94:	4b0b      	ldr	r3, [pc, #44]	@ (8008ec4 <siscanf+0x50>)
 8008e96:	9003      	str	r0, [sp, #12]
 8008e98:	9007      	str	r0, [sp, #28]
 8008e9a:	480b      	ldr	r0, [pc, #44]	@ (8008ec8 <siscanf+0x54>)
 8008e9c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008e9e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008ea2:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008ea6:	4632      	mov	r2, r6
 8008ea8:	4623      	mov	r3, r4
 8008eaa:	a902      	add	r1, sp, #8
 8008eac:	6800      	ldr	r0, [r0, #0]
 8008eae:	950f      	str	r5, [sp, #60]	@ 0x3c
 8008eb0:	9514      	str	r5, [sp, #80]	@ 0x50
 8008eb2:	9401      	str	r4, [sp, #4]
 8008eb4:	f002 fd2c 	bl	800b910 <__ssvfiscanf_r>
 8008eb8:	b01d      	add	sp, #116	@ 0x74
 8008eba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008ebe:	b003      	add	sp, #12
 8008ec0:	4770      	bx	lr
 8008ec2:	bf00      	nop
 8008ec4:	08008eef 	.word	0x08008eef
 8008ec8:	20000034 	.word	0x20000034

08008ecc <__sread>:
 8008ecc:	b510      	push	{r4, lr}
 8008ece:	460c      	mov	r4, r1
 8008ed0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ed4:	f000 f87e 	bl	8008fd4 <_read_r>
 8008ed8:	2800      	cmp	r0, #0
 8008eda:	bfab      	itete	ge
 8008edc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008ede:	89a3      	ldrhlt	r3, [r4, #12]
 8008ee0:	181b      	addge	r3, r3, r0
 8008ee2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008ee6:	bfac      	ite	ge
 8008ee8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008eea:	81a3      	strhlt	r3, [r4, #12]
 8008eec:	bd10      	pop	{r4, pc}

08008eee <__seofread>:
 8008eee:	2000      	movs	r0, #0
 8008ef0:	4770      	bx	lr

08008ef2 <__swrite>:
 8008ef2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ef6:	461f      	mov	r7, r3
 8008ef8:	898b      	ldrh	r3, [r1, #12]
 8008efa:	05db      	lsls	r3, r3, #23
 8008efc:	4605      	mov	r5, r0
 8008efe:	460c      	mov	r4, r1
 8008f00:	4616      	mov	r6, r2
 8008f02:	d505      	bpl.n	8008f10 <__swrite+0x1e>
 8008f04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f08:	2302      	movs	r3, #2
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	f000 f850 	bl	8008fb0 <_lseek_r>
 8008f10:	89a3      	ldrh	r3, [r4, #12]
 8008f12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f16:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008f1a:	81a3      	strh	r3, [r4, #12]
 8008f1c:	4632      	mov	r2, r6
 8008f1e:	463b      	mov	r3, r7
 8008f20:	4628      	mov	r0, r5
 8008f22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f26:	f000 b867 	b.w	8008ff8 <_write_r>

08008f2a <__sseek>:
 8008f2a:	b510      	push	{r4, lr}
 8008f2c:	460c      	mov	r4, r1
 8008f2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f32:	f000 f83d 	bl	8008fb0 <_lseek_r>
 8008f36:	1c43      	adds	r3, r0, #1
 8008f38:	89a3      	ldrh	r3, [r4, #12]
 8008f3a:	bf15      	itete	ne
 8008f3c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008f3e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008f42:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008f46:	81a3      	strheq	r3, [r4, #12]
 8008f48:	bf18      	it	ne
 8008f4a:	81a3      	strhne	r3, [r4, #12]
 8008f4c:	bd10      	pop	{r4, pc}

08008f4e <__sclose>:
 8008f4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f52:	f000 b81d 	b.w	8008f90 <_close_r>

08008f56 <memcmp>:
 8008f56:	b510      	push	{r4, lr}
 8008f58:	3901      	subs	r1, #1
 8008f5a:	4402      	add	r2, r0
 8008f5c:	4290      	cmp	r0, r2
 8008f5e:	d101      	bne.n	8008f64 <memcmp+0xe>
 8008f60:	2000      	movs	r0, #0
 8008f62:	e005      	b.n	8008f70 <memcmp+0x1a>
 8008f64:	7803      	ldrb	r3, [r0, #0]
 8008f66:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008f6a:	42a3      	cmp	r3, r4
 8008f6c:	d001      	beq.n	8008f72 <memcmp+0x1c>
 8008f6e:	1b18      	subs	r0, r3, r4
 8008f70:	bd10      	pop	{r4, pc}
 8008f72:	3001      	adds	r0, #1
 8008f74:	e7f2      	b.n	8008f5c <memcmp+0x6>

08008f76 <memset>:
 8008f76:	4402      	add	r2, r0
 8008f78:	4603      	mov	r3, r0
 8008f7a:	4293      	cmp	r3, r2
 8008f7c:	d100      	bne.n	8008f80 <memset+0xa>
 8008f7e:	4770      	bx	lr
 8008f80:	f803 1b01 	strb.w	r1, [r3], #1
 8008f84:	e7f9      	b.n	8008f7a <memset+0x4>
	...

08008f88 <_localeconv_r>:
 8008f88:	4800      	ldr	r0, [pc, #0]	@ (8008f8c <_localeconv_r+0x4>)
 8008f8a:	4770      	bx	lr
 8008f8c:	20000174 	.word	0x20000174

08008f90 <_close_r>:
 8008f90:	b538      	push	{r3, r4, r5, lr}
 8008f92:	4d06      	ldr	r5, [pc, #24]	@ (8008fac <_close_r+0x1c>)
 8008f94:	2300      	movs	r3, #0
 8008f96:	4604      	mov	r4, r0
 8008f98:	4608      	mov	r0, r1
 8008f9a:	602b      	str	r3, [r5, #0]
 8008f9c:	f7f8 fe62 	bl	8001c64 <_close>
 8008fa0:	1c43      	adds	r3, r0, #1
 8008fa2:	d102      	bne.n	8008faa <_close_r+0x1a>
 8008fa4:	682b      	ldr	r3, [r5, #0]
 8008fa6:	b103      	cbz	r3, 8008faa <_close_r+0x1a>
 8008fa8:	6023      	str	r3, [r4, #0]
 8008faa:	bd38      	pop	{r3, r4, r5, pc}
 8008fac:	20001064 	.word	0x20001064

08008fb0 <_lseek_r>:
 8008fb0:	b538      	push	{r3, r4, r5, lr}
 8008fb2:	4d07      	ldr	r5, [pc, #28]	@ (8008fd0 <_lseek_r+0x20>)
 8008fb4:	4604      	mov	r4, r0
 8008fb6:	4608      	mov	r0, r1
 8008fb8:	4611      	mov	r1, r2
 8008fba:	2200      	movs	r2, #0
 8008fbc:	602a      	str	r2, [r5, #0]
 8008fbe:	461a      	mov	r2, r3
 8008fc0:	f7f8 fe77 	bl	8001cb2 <_lseek>
 8008fc4:	1c43      	adds	r3, r0, #1
 8008fc6:	d102      	bne.n	8008fce <_lseek_r+0x1e>
 8008fc8:	682b      	ldr	r3, [r5, #0]
 8008fca:	b103      	cbz	r3, 8008fce <_lseek_r+0x1e>
 8008fcc:	6023      	str	r3, [r4, #0]
 8008fce:	bd38      	pop	{r3, r4, r5, pc}
 8008fd0:	20001064 	.word	0x20001064

08008fd4 <_read_r>:
 8008fd4:	b538      	push	{r3, r4, r5, lr}
 8008fd6:	4d07      	ldr	r5, [pc, #28]	@ (8008ff4 <_read_r+0x20>)
 8008fd8:	4604      	mov	r4, r0
 8008fda:	4608      	mov	r0, r1
 8008fdc:	4611      	mov	r1, r2
 8008fde:	2200      	movs	r2, #0
 8008fe0:	602a      	str	r2, [r5, #0]
 8008fe2:	461a      	mov	r2, r3
 8008fe4:	f7f8 fe05 	bl	8001bf2 <_read>
 8008fe8:	1c43      	adds	r3, r0, #1
 8008fea:	d102      	bne.n	8008ff2 <_read_r+0x1e>
 8008fec:	682b      	ldr	r3, [r5, #0]
 8008fee:	b103      	cbz	r3, 8008ff2 <_read_r+0x1e>
 8008ff0:	6023      	str	r3, [r4, #0]
 8008ff2:	bd38      	pop	{r3, r4, r5, pc}
 8008ff4:	20001064 	.word	0x20001064

08008ff8 <_write_r>:
 8008ff8:	b538      	push	{r3, r4, r5, lr}
 8008ffa:	4d07      	ldr	r5, [pc, #28]	@ (8009018 <_write_r+0x20>)
 8008ffc:	4604      	mov	r4, r0
 8008ffe:	4608      	mov	r0, r1
 8009000:	4611      	mov	r1, r2
 8009002:	2200      	movs	r2, #0
 8009004:	602a      	str	r2, [r5, #0]
 8009006:	461a      	mov	r2, r3
 8009008:	f7f8 fe10 	bl	8001c2c <_write>
 800900c:	1c43      	adds	r3, r0, #1
 800900e:	d102      	bne.n	8009016 <_write_r+0x1e>
 8009010:	682b      	ldr	r3, [r5, #0]
 8009012:	b103      	cbz	r3, 8009016 <_write_r+0x1e>
 8009014:	6023      	str	r3, [r4, #0]
 8009016:	bd38      	pop	{r3, r4, r5, pc}
 8009018:	20001064 	.word	0x20001064

0800901c <__errno>:
 800901c:	4b01      	ldr	r3, [pc, #4]	@ (8009024 <__errno+0x8>)
 800901e:	6818      	ldr	r0, [r3, #0]
 8009020:	4770      	bx	lr
 8009022:	bf00      	nop
 8009024:	20000034 	.word	0x20000034

08009028 <__libc_init_array>:
 8009028:	b570      	push	{r4, r5, r6, lr}
 800902a:	4d0d      	ldr	r5, [pc, #52]	@ (8009060 <__libc_init_array+0x38>)
 800902c:	4c0d      	ldr	r4, [pc, #52]	@ (8009064 <__libc_init_array+0x3c>)
 800902e:	1b64      	subs	r4, r4, r5
 8009030:	10a4      	asrs	r4, r4, #2
 8009032:	2600      	movs	r6, #0
 8009034:	42a6      	cmp	r6, r4
 8009036:	d109      	bne.n	800904c <__libc_init_array+0x24>
 8009038:	4d0b      	ldr	r5, [pc, #44]	@ (8009068 <__libc_init_array+0x40>)
 800903a:	4c0c      	ldr	r4, [pc, #48]	@ (800906c <__libc_init_array+0x44>)
 800903c:	f003 ff78 	bl	800cf30 <_init>
 8009040:	1b64      	subs	r4, r4, r5
 8009042:	10a4      	asrs	r4, r4, #2
 8009044:	2600      	movs	r6, #0
 8009046:	42a6      	cmp	r6, r4
 8009048:	d105      	bne.n	8009056 <__libc_init_array+0x2e>
 800904a:	bd70      	pop	{r4, r5, r6, pc}
 800904c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009050:	4798      	blx	r3
 8009052:	3601      	adds	r6, #1
 8009054:	e7ee      	b.n	8009034 <__libc_init_array+0xc>
 8009056:	f855 3b04 	ldr.w	r3, [r5], #4
 800905a:	4798      	blx	r3
 800905c:	3601      	adds	r6, #1
 800905e:	e7f2      	b.n	8009046 <__libc_init_array+0x1e>
 8009060:	0800daf4 	.word	0x0800daf4
 8009064:	0800daf4 	.word	0x0800daf4
 8009068:	0800daf4 	.word	0x0800daf4
 800906c:	0800daf8 	.word	0x0800daf8

08009070 <__retarget_lock_init_recursive>:
 8009070:	4770      	bx	lr

08009072 <__retarget_lock_acquire_recursive>:
 8009072:	4770      	bx	lr

08009074 <__retarget_lock_release_recursive>:
 8009074:	4770      	bx	lr

08009076 <memcpy>:
 8009076:	440a      	add	r2, r1
 8009078:	4291      	cmp	r1, r2
 800907a:	f100 33ff 	add.w	r3, r0, #4294967295
 800907e:	d100      	bne.n	8009082 <memcpy+0xc>
 8009080:	4770      	bx	lr
 8009082:	b510      	push	{r4, lr}
 8009084:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009088:	f803 4f01 	strb.w	r4, [r3, #1]!
 800908c:	4291      	cmp	r1, r2
 800908e:	d1f9      	bne.n	8009084 <memcpy+0xe>
 8009090:	bd10      	pop	{r4, pc}
	...

08009094 <nanf>:
 8009094:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800909c <nanf+0x8>
 8009098:	4770      	bx	lr
 800909a:	bf00      	nop
 800909c:	7fc00000 	.word	0x7fc00000

080090a0 <quorem>:
 80090a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090a4:	6903      	ldr	r3, [r0, #16]
 80090a6:	690c      	ldr	r4, [r1, #16]
 80090a8:	42a3      	cmp	r3, r4
 80090aa:	4607      	mov	r7, r0
 80090ac:	db7e      	blt.n	80091ac <quorem+0x10c>
 80090ae:	3c01      	subs	r4, #1
 80090b0:	f101 0814 	add.w	r8, r1, #20
 80090b4:	00a3      	lsls	r3, r4, #2
 80090b6:	f100 0514 	add.w	r5, r0, #20
 80090ba:	9300      	str	r3, [sp, #0]
 80090bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80090c0:	9301      	str	r3, [sp, #4]
 80090c2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80090c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80090ca:	3301      	adds	r3, #1
 80090cc:	429a      	cmp	r2, r3
 80090ce:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80090d2:	fbb2 f6f3 	udiv	r6, r2, r3
 80090d6:	d32e      	bcc.n	8009136 <quorem+0x96>
 80090d8:	f04f 0a00 	mov.w	sl, #0
 80090dc:	46c4      	mov	ip, r8
 80090de:	46ae      	mov	lr, r5
 80090e0:	46d3      	mov	fp, sl
 80090e2:	f85c 3b04 	ldr.w	r3, [ip], #4
 80090e6:	b298      	uxth	r0, r3
 80090e8:	fb06 a000 	mla	r0, r6, r0, sl
 80090ec:	0c02      	lsrs	r2, r0, #16
 80090ee:	0c1b      	lsrs	r3, r3, #16
 80090f0:	fb06 2303 	mla	r3, r6, r3, r2
 80090f4:	f8de 2000 	ldr.w	r2, [lr]
 80090f8:	b280      	uxth	r0, r0
 80090fa:	b292      	uxth	r2, r2
 80090fc:	1a12      	subs	r2, r2, r0
 80090fe:	445a      	add	r2, fp
 8009100:	f8de 0000 	ldr.w	r0, [lr]
 8009104:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009108:	b29b      	uxth	r3, r3
 800910a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800910e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009112:	b292      	uxth	r2, r2
 8009114:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009118:	45e1      	cmp	r9, ip
 800911a:	f84e 2b04 	str.w	r2, [lr], #4
 800911e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009122:	d2de      	bcs.n	80090e2 <quorem+0x42>
 8009124:	9b00      	ldr	r3, [sp, #0]
 8009126:	58eb      	ldr	r3, [r5, r3]
 8009128:	b92b      	cbnz	r3, 8009136 <quorem+0x96>
 800912a:	9b01      	ldr	r3, [sp, #4]
 800912c:	3b04      	subs	r3, #4
 800912e:	429d      	cmp	r5, r3
 8009130:	461a      	mov	r2, r3
 8009132:	d32f      	bcc.n	8009194 <quorem+0xf4>
 8009134:	613c      	str	r4, [r7, #16]
 8009136:	4638      	mov	r0, r7
 8009138:	f001 f9c6 	bl	800a4c8 <__mcmp>
 800913c:	2800      	cmp	r0, #0
 800913e:	db25      	blt.n	800918c <quorem+0xec>
 8009140:	4629      	mov	r1, r5
 8009142:	2000      	movs	r0, #0
 8009144:	f858 2b04 	ldr.w	r2, [r8], #4
 8009148:	f8d1 c000 	ldr.w	ip, [r1]
 800914c:	fa1f fe82 	uxth.w	lr, r2
 8009150:	fa1f f38c 	uxth.w	r3, ip
 8009154:	eba3 030e 	sub.w	r3, r3, lr
 8009158:	4403      	add	r3, r0
 800915a:	0c12      	lsrs	r2, r2, #16
 800915c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009160:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009164:	b29b      	uxth	r3, r3
 8009166:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800916a:	45c1      	cmp	r9, r8
 800916c:	f841 3b04 	str.w	r3, [r1], #4
 8009170:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009174:	d2e6      	bcs.n	8009144 <quorem+0xa4>
 8009176:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800917a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800917e:	b922      	cbnz	r2, 800918a <quorem+0xea>
 8009180:	3b04      	subs	r3, #4
 8009182:	429d      	cmp	r5, r3
 8009184:	461a      	mov	r2, r3
 8009186:	d30b      	bcc.n	80091a0 <quorem+0x100>
 8009188:	613c      	str	r4, [r7, #16]
 800918a:	3601      	adds	r6, #1
 800918c:	4630      	mov	r0, r6
 800918e:	b003      	add	sp, #12
 8009190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009194:	6812      	ldr	r2, [r2, #0]
 8009196:	3b04      	subs	r3, #4
 8009198:	2a00      	cmp	r2, #0
 800919a:	d1cb      	bne.n	8009134 <quorem+0x94>
 800919c:	3c01      	subs	r4, #1
 800919e:	e7c6      	b.n	800912e <quorem+0x8e>
 80091a0:	6812      	ldr	r2, [r2, #0]
 80091a2:	3b04      	subs	r3, #4
 80091a4:	2a00      	cmp	r2, #0
 80091a6:	d1ef      	bne.n	8009188 <quorem+0xe8>
 80091a8:	3c01      	subs	r4, #1
 80091aa:	e7ea      	b.n	8009182 <quorem+0xe2>
 80091ac:	2000      	movs	r0, #0
 80091ae:	e7ee      	b.n	800918e <quorem+0xee>

080091b0 <_dtoa_r>:
 80091b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091b4:	69c7      	ldr	r7, [r0, #28]
 80091b6:	b097      	sub	sp, #92	@ 0x5c
 80091b8:	ed8d 0b04 	vstr	d0, [sp, #16]
 80091bc:	ec55 4b10 	vmov	r4, r5, d0
 80091c0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80091c2:	9107      	str	r1, [sp, #28]
 80091c4:	4681      	mov	r9, r0
 80091c6:	920c      	str	r2, [sp, #48]	@ 0x30
 80091c8:	9311      	str	r3, [sp, #68]	@ 0x44
 80091ca:	b97f      	cbnz	r7, 80091ec <_dtoa_r+0x3c>
 80091cc:	2010      	movs	r0, #16
 80091ce:	f000 fe09 	bl	8009de4 <malloc>
 80091d2:	4602      	mov	r2, r0
 80091d4:	f8c9 001c 	str.w	r0, [r9, #28]
 80091d8:	b920      	cbnz	r0, 80091e4 <_dtoa_r+0x34>
 80091da:	4ba9      	ldr	r3, [pc, #676]	@ (8009480 <_dtoa_r+0x2d0>)
 80091dc:	21ef      	movs	r1, #239	@ 0xef
 80091de:	48a9      	ldr	r0, [pc, #676]	@ (8009484 <_dtoa_r+0x2d4>)
 80091e0:	f002 ffbe 	bl	800c160 <__assert_func>
 80091e4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80091e8:	6007      	str	r7, [r0, #0]
 80091ea:	60c7      	str	r7, [r0, #12]
 80091ec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80091f0:	6819      	ldr	r1, [r3, #0]
 80091f2:	b159      	cbz	r1, 800920c <_dtoa_r+0x5c>
 80091f4:	685a      	ldr	r2, [r3, #4]
 80091f6:	604a      	str	r2, [r1, #4]
 80091f8:	2301      	movs	r3, #1
 80091fa:	4093      	lsls	r3, r2
 80091fc:	608b      	str	r3, [r1, #8]
 80091fe:	4648      	mov	r0, r9
 8009200:	f000 fee6 	bl	8009fd0 <_Bfree>
 8009204:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009208:	2200      	movs	r2, #0
 800920a:	601a      	str	r2, [r3, #0]
 800920c:	1e2b      	subs	r3, r5, #0
 800920e:	bfb9      	ittee	lt
 8009210:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009214:	9305      	strlt	r3, [sp, #20]
 8009216:	2300      	movge	r3, #0
 8009218:	6033      	strge	r3, [r6, #0]
 800921a:	9f05      	ldr	r7, [sp, #20]
 800921c:	4b9a      	ldr	r3, [pc, #616]	@ (8009488 <_dtoa_r+0x2d8>)
 800921e:	bfbc      	itt	lt
 8009220:	2201      	movlt	r2, #1
 8009222:	6032      	strlt	r2, [r6, #0]
 8009224:	43bb      	bics	r3, r7
 8009226:	d112      	bne.n	800924e <_dtoa_r+0x9e>
 8009228:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800922a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800922e:	6013      	str	r3, [r2, #0]
 8009230:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009234:	4323      	orrs	r3, r4
 8009236:	f000 855a 	beq.w	8009cee <_dtoa_r+0xb3e>
 800923a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800923c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800949c <_dtoa_r+0x2ec>
 8009240:	2b00      	cmp	r3, #0
 8009242:	f000 855c 	beq.w	8009cfe <_dtoa_r+0xb4e>
 8009246:	f10a 0303 	add.w	r3, sl, #3
 800924a:	f000 bd56 	b.w	8009cfa <_dtoa_r+0xb4a>
 800924e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009252:	2200      	movs	r2, #0
 8009254:	ec51 0b17 	vmov	r0, r1, d7
 8009258:	2300      	movs	r3, #0
 800925a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800925e:	f7f7 fc33 	bl	8000ac8 <__aeabi_dcmpeq>
 8009262:	4680      	mov	r8, r0
 8009264:	b158      	cbz	r0, 800927e <_dtoa_r+0xce>
 8009266:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009268:	2301      	movs	r3, #1
 800926a:	6013      	str	r3, [r2, #0]
 800926c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800926e:	b113      	cbz	r3, 8009276 <_dtoa_r+0xc6>
 8009270:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009272:	4b86      	ldr	r3, [pc, #536]	@ (800948c <_dtoa_r+0x2dc>)
 8009274:	6013      	str	r3, [r2, #0]
 8009276:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80094a0 <_dtoa_r+0x2f0>
 800927a:	f000 bd40 	b.w	8009cfe <_dtoa_r+0xb4e>
 800927e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8009282:	aa14      	add	r2, sp, #80	@ 0x50
 8009284:	a915      	add	r1, sp, #84	@ 0x54
 8009286:	4648      	mov	r0, r9
 8009288:	f001 fa3e 	bl	800a708 <__d2b>
 800928c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009290:	9002      	str	r0, [sp, #8]
 8009292:	2e00      	cmp	r6, #0
 8009294:	d078      	beq.n	8009388 <_dtoa_r+0x1d8>
 8009296:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009298:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800929c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80092a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80092a4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80092a8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80092ac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80092b0:	4619      	mov	r1, r3
 80092b2:	2200      	movs	r2, #0
 80092b4:	4b76      	ldr	r3, [pc, #472]	@ (8009490 <_dtoa_r+0x2e0>)
 80092b6:	f7f6 ffe7 	bl	8000288 <__aeabi_dsub>
 80092ba:	a36b      	add	r3, pc, #428	@ (adr r3, 8009468 <_dtoa_r+0x2b8>)
 80092bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092c0:	f7f7 f99a 	bl	80005f8 <__aeabi_dmul>
 80092c4:	a36a      	add	r3, pc, #424	@ (adr r3, 8009470 <_dtoa_r+0x2c0>)
 80092c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ca:	f7f6 ffdf 	bl	800028c <__adddf3>
 80092ce:	4604      	mov	r4, r0
 80092d0:	4630      	mov	r0, r6
 80092d2:	460d      	mov	r5, r1
 80092d4:	f7f7 f926 	bl	8000524 <__aeabi_i2d>
 80092d8:	a367      	add	r3, pc, #412	@ (adr r3, 8009478 <_dtoa_r+0x2c8>)
 80092da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092de:	f7f7 f98b 	bl	80005f8 <__aeabi_dmul>
 80092e2:	4602      	mov	r2, r0
 80092e4:	460b      	mov	r3, r1
 80092e6:	4620      	mov	r0, r4
 80092e8:	4629      	mov	r1, r5
 80092ea:	f7f6 ffcf 	bl	800028c <__adddf3>
 80092ee:	4604      	mov	r4, r0
 80092f0:	460d      	mov	r5, r1
 80092f2:	f7f7 fc31 	bl	8000b58 <__aeabi_d2iz>
 80092f6:	2200      	movs	r2, #0
 80092f8:	4607      	mov	r7, r0
 80092fa:	2300      	movs	r3, #0
 80092fc:	4620      	mov	r0, r4
 80092fe:	4629      	mov	r1, r5
 8009300:	f7f7 fbec 	bl	8000adc <__aeabi_dcmplt>
 8009304:	b140      	cbz	r0, 8009318 <_dtoa_r+0x168>
 8009306:	4638      	mov	r0, r7
 8009308:	f7f7 f90c 	bl	8000524 <__aeabi_i2d>
 800930c:	4622      	mov	r2, r4
 800930e:	462b      	mov	r3, r5
 8009310:	f7f7 fbda 	bl	8000ac8 <__aeabi_dcmpeq>
 8009314:	b900      	cbnz	r0, 8009318 <_dtoa_r+0x168>
 8009316:	3f01      	subs	r7, #1
 8009318:	2f16      	cmp	r7, #22
 800931a:	d852      	bhi.n	80093c2 <_dtoa_r+0x212>
 800931c:	4b5d      	ldr	r3, [pc, #372]	@ (8009494 <_dtoa_r+0x2e4>)
 800931e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009326:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800932a:	f7f7 fbd7 	bl	8000adc <__aeabi_dcmplt>
 800932e:	2800      	cmp	r0, #0
 8009330:	d049      	beq.n	80093c6 <_dtoa_r+0x216>
 8009332:	3f01      	subs	r7, #1
 8009334:	2300      	movs	r3, #0
 8009336:	9310      	str	r3, [sp, #64]	@ 0x40
 8009338:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800933a:	1b9b      	subs	r3, r3, r6
 800933c:	1e5a      	subs	r2, r3, #1
 800933e:	bf45      	ittet	mi
 8009340:	f1c3 0301 	rsbmi	r3, r3, #1
 8009344:	9300      	strmi	r3, [sp, #0]
 8009346:	2300      	movpl	r3, #0
 8009348:	2300      	movmi	r3, #0
 800934a:	9206      	str	r2, [sp, #24]
 800934c:	bf54      	ite	pl
 800934e:	9300      	strpl	r3, [sp, #0]
 8009350:	9306      	strmi	r3, [sp, #24]
 8009352:	2f00      	cmp	r7, #0
 8009354:	db39      	blt.n	80093ca <_dtoa_r+0x21a>
 8009356:	9b06      	ldr	r3, [sp, #24]
 8009358:	970d      	str	r7, [sp, #52]	@ 0x34
 800935a:	443b      	add	r3, r7
 800935c:	9306      	str	r3, [sp, #24]
 800935e:	2300      	movs	r3, #0
 8009360:	9308      	str	r3, [sp, #32]
 8009362:	9b07      	ldr	r3, [sp, #28]
 8009364:	2b09      	cmp	r3, #9
 8009366:	d863      	bhi.n	8009430 <_dtoa_r+0x280>
 8009368:	2b05      	cmp	r3, #5
 800936a:	bfc4      	itt	gt
 800936c:	3b04      	subgt	r3, #4
 800936e:	9307      	strgt	r3, [sp, #28]
 8009370:	9b07      	ldr	r3, [sp, #28]
 8009372:	f1a3 0302 	sub.w	r3, r3, #2
 8009376:	bfcc      	ite	gt
 8009378:	2400      	movgt	r4, #0
 800937a:	2401      	movle	r4, #1
 800937c:	2b03      	cmp	r3, #3
 800937e:	d863      	bhi.n	8009448 <_dtoa_r+0x298>
 8009380:	e8df f003 	tbb	[pc, r3]
 8009384:	2b375452 	.word	0x2b375452
 8009388:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800938c:	441e      	add	r6, r3
 800938e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009392:	2b20      	cmp	r3, #32
 8009394:	bfc1      	itttt	gt
 8009396:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800939a:	409f      	lslgt	r7, r3
 800939c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80093a0:	fa24 f303 	lsrgt.w	r3, r4, r3
 80093a4:	bfd6      	itet	le
 80093a6:	f1c3 0320 	rsble	r3, r3, #32
 80093aa:	ea47 0003 	orrgt.w	r0, r7, r3
 80093ae:	fa04 f003 	lslle.w	r0, r4, r3
 80093b2:	f7f7 f8a7 	bl	8000504 <__aeabi_ui2d>
 80093b6:	2201      	movs	r2, #1
 80093b8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80093bc:	3e01      	subs	r6, #1
 80093be:	9212      	str	r2, [sp, #72]	@ 0x48
 80093c0:	e776      	b.n	80092b0 <_dtoa_r+0x100>
 80093c2:	2301      	movs	r3, #1
 80093c4:	e7b7      	b.n	8009336 <_dtoa_r+0x186>
 80093c6:	9010      	str	r0, [sp, #64]	@ 0x40
 80093c8:	e7b6      	b.n	8009338 <_dtoa_r+0x188>
 80093ca:	9b00      	ldr	r3, [sp, #0]
 80093cc:	1bdb      	subs	r3, r3, r7
 80093ce:	9300      	str	r3, [sp, #0]
 80093d0:	427b      	negs	r3, r7
 80093d2:	9308      	str	r3, [sp, #32]
 80093d4:	2300      	movs	r3, #0
 80093d6:	930d      	str	r3, [sp, #52]	@ 0x34
 80093d8:	e7c3      	b.n	8009362 <_dtoa_r+0x1b2>
 80093da:	2301      	movs	r3, #1
 80093dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80093de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80093e0:	eb07 0b03 	add.w	fp, r7, r3
 80093e4:	f10b 0301 	add.w	r3, fp, #1
 80093e8:	2b01      	cmp	r3, #1
 80093ea:	9303      	str	r3, [sp, #12]
 80093ec:	bfb8      	it	lt
 80093ee:	2301      	movlt	r3, #1
 80093f0:	e006      	b.n	8009400 <_dtoa_r+0x250>
 80093f2:	2301      	movs	r3, #1
 80093f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80093f6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	dd28      	ble.n	800944e <_dtoa_r+0x29e>
 80093fc:	469b      	mov	fp, r3
 80093fe:	9303      	str	r3, [sp, #12]
 8009400:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8009404:	2100      	movs	r1, #0
 8009406:	2204      	movs	r2, #4
 8009408:	f102 0514 	add.w	r5, r2, #20
 800940c:	429d      	cmp	r5, r3
 800940e:	d926      	bls.n	800945e <_dtoa_r+0x2ae>
 8009410:	6041      	str	r1, [r0, #4]
 8009412:	4648      	mov	r0, r9
 8009414:	f000 fd9c 	bl	8009f50 <_Balloc>
 8009418:	4682      	mov	sl, r0
 800941a:	2800      	cmp	r0, #0
 800941c:	d142      	bne.n	80094a4 <_dtoa_r+0x2f4>
 800941e:	4b1e      	ldr	r3, [pc, #120]	@ (8009498 <_dtoa_r+0x2e8>)
 8009420:	4602      	mov	r2, r0
 8009422:	f240 11af 	movw	r1, #431	@ 0x1af
 8009426:	e6da      	b.n	80091de <_dtoa_r+0x2e>
 8009428:	2300      	movs	r3, #0
 800942a:	e7e3      	b.n	80093f4 <_dtoa_r+0x244>
 800942c:	2300      	movs	r3, #0
 800942e:	e7d5      	b.n	80093dc <_dtoa_r+0x22c>
 8009430:	2401      	movs	r4, #1
 8009432:	2300      	movs	r3, #0
 8009434:	9307      	str	r3, [sp, #28]
 8009436:	9409      	str	r4, [sp, #36]	@ 0x24
 8009438:	f04f 3bff 	mov.w	fp, #4294967295
 800943c:	2200      	movs	r2, #0
 800943e:	f8cd b00c 	str.w	fp, [sp, #12]
 8009442:	2312      	movs	r3, #18
 8009444:	920c      	str	r2, [sp, #48]	@ 0x30
 8009446:	e7db      	b.n	8009400 <_dtoa_r+0x250>
 8009448:	2301      	movs	r3, #1
 800944a:	9309      	str	r3, [sp, #36]	@ 0x24
 800944c:	e7f4      	b.n	8009438 <_dtoa_r+0x288>
 800944e:	f04f 0b01 	mov.w	fp, #1
 8009452:	f8cd b00c 	str.w	fp, [sp, #12]
 8009456:	465b      	mov	r3, fp
 8009458:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800945c:	e7d0      	b.n	8009400 <_dtoa_r+0x250>
 800945e:	3101      	adds	r1, #1
 8009460:	0052      	lsls	r2, r2, #1
 8009462:	e7d1      	b.n	8009408 <_dtoa_r+0x258>
 8009464:	f3af 8000 	nop.w
 8009468:	636f4361 	.word	0x636f4361
 800946c:	3fd287a7 	.word	0x3fd287a7
 8009470:	8b60c8b3 	.word	0x8b60c8b3
 8009474:	3fc68a28 	.word	0x3fc68a28
 8009478:	509f79fb 	.word	0x509f79fb
 800947c:	3fd34413 	.word	0x3fd34413
 8009480:	0800d6ec 	.word	0x0800d6ec
 8009484:	0800d703 	.word	0x0800d703
 8009488:	7ff00000 	.word	0x7ff00000
 800948c:	0800d7ef 	.word	0x0800d7ef
 8009490:	3ff80000 	.word	0x3ff80000
 8009494:	0800d8d0 	.word	0x0800d8d0
 8009498:	0800d75b 	.word	0x0800d75b
 800949c:	0800d6e8 	.word	0x0800d6e8
 80094a0:	0800d7ee 	.word	0x0800d7ee
 80094a4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80094a8:	6018      	str	r0, [r3, #0]
 80094aa:	9b03      	ldr	r3, [sp, #12]
 80094ac:	2b0e      	cmp	r3, #14
 80094ae:	f200 80a1 	bhi.w	80095f4 <_dtoa_r+0x444>
 80094b2:	2c00      	cmp	r4, #0
 80094b4:	f000 809e 	beq.w	80095f4 <_dtoa_r+0x444>
 80094b8:	2f00      	cmp	r7, #0
 80094ba:	dd33      	ble.n	8009524 <_dtoa_r+0x374>
 80094bc:	4b9c      	ldr	r3, [pc, #624]	@ (8009730 <_dtoa_r+0x580>)
 80094be:	f007 020f 	and.w	r2, r7, #15
 80094c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80094c6:	ed93 7b00 	vldr	d7, [r3]
 80094ca:	05f8      	lsls	r0, r7, #23
 80094cc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80094d0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80094d4:	d516      	bpl.n	8009504 <_dtoa_r+0x354>
 80094d6:	4b97      	ldr	r3, [pc, #604]	@ (8009734 <_dtoa_r+0x584>)
 80094d8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80094dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80094e0:	f7f7 f9b4 	bl	800084c <__aeabi_ddiv>
 80094e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80094e8:	f004 040f 	and.w	r4, r4, #15
 80094ec:	2603      	movs	r6, #3
 80094ee:	4d91      	ldr	r5, [pc, #580]	@ (8009734 <_dtoa_r+0x584>)
 80094f0:	b954      	cbnz	r4, 8009508 <_dtoa_r+0x358>
 80094f2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80094f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80094fa:	f7f7 f9a7 	bl	800084c <__aeabi_ddiv>
 80094fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009502:	e028      	b.n	8009556 <_dtoa_r+0x3a6>
 8009504:	2602      	movs	r6, #2
 8009506:	e7f2      	b.n	80094ee <_dtoa_r+0x33e>
 8009508:	07e1      	lsls	r1, r4, #31
 800950a:	d508      	bpl.n	800951e <_dtoa_r+0x36e>
 800950c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009510:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009514:	f7f7 f870 	bl	80005f8 <__aeabi_dmul>
 8009518:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800951c:	3601      	adds	r6, #1
 800951e:	1064      	asrs	r4, r4, #1
 8009520:	3508      	adds	r5, #8
 8009522:	e7e5      	b.n	80094f0 <_dtoa_r+0x340>
 8009524:	f000 80af 	beq.w	8009686 <_dtoa_r+0x4d6>
 8009528:	427c      	negs	r4, r7
 800952a:	4b81      	ldr	r3, [pc, #516]	@ (8009730 <_dtoa_r+0x580>)
 800952c:	4d81      	ldr	r5, [pc, #516]	@ (8009734 <_dtoa_r+0x584>)
 800952e:	f004 020f 	and.w	r2, r4, #15
 8009532:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800953a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800953e:	f7f7 f85b 	bl	80005f8 <__aeabi_dmul>
 8009542:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009546:	1124      	asrs	r4, r4, #4
 8009548:	2300      	movs	r3, #0
 800954a:	2602      	movs	r6, #2
 800954c:	2c00      	cmp	r4, #0
 800954e:	f040 808f 	bne.w	8009670 <_dtoa_r+0x4c0>
 8009552:	2b00      	cmp	r3, #0
 8009554:	d1d3      	bne.n	80094fe <_dtoa_r+0x34e>
 8009556:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009558:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800955c:	2b00      	cmp	r3, #0
 800955e:	f000 8094 	beq.w	800968a <_dtoa_r+0x4da>
 8009562:	4b75      	ldr	r3, [pc, #468]	@ (8009738 <_dtoa_r+0x588>)
 8009564:	2200      	movs	r2, #0
 8009566:	4620      	mov	r0, r4
 8009568:	4629      	mov	r1, r5
 800956a:	f7f7 fab7 	bl	8000adc <__aeabi_dcmplt>
 800956e:	2800      	cmp	r0, #0
 8009570:	f000 808b 	beq.w	800968a <_dtoa_r+0x4da>
 8009574:	9b03      	ldr	r3, [sp, #12]
 8009576:	2b00      	cmp	r3, #0
 8009578:	f000 8087 	beq.w	800968a <_dtoa_r+0x4da>
 800957c:	f1bb 0f00 	cmp.w	fp, #0
 8009580:	dd34      	ble.n	80095ec <_dtoa_r+0x43c>
 8009582:	4620      	mov	r0, r4
 8009584:	4b6d      	ldr	r3, [pc, #436]	@ (800973c <_dtoa_r+0x58c>)
 8009586:	2200      	movs	r2, #0
 8009588:	4629      	mov	r1, r5
 800958a:	f7f7 f835 	bl	80005f8 <__aeabi_dmul>
 800958e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009592:	f107 38ff 	add.w	r8, r7, #4294967295
 8009596:	3601      	adds	r6, #1
 8009598:	465c      	mov	r4, fp
 800959a:	4630      	mov	r0, r6
 800959c:	f7f6 ffc2 	bl	8000524 <__aeabi_i2d>
 80095a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80095a4:	f7f7 f828 	bl	80005f8 <__aeabi_dmul>
 80095a8:	4b65      	ldr	r3, [pc, #404]	@ (8009740 <_dtoa_r+0x590>)
 80095aa:	2200      	movs	r2, #0
 80095ac:	f7f6 fe6e 	bl	800028c <__adddf3>
 80095b0:	4605      	mov	r5, r0
 80095b2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80095b6:	2c00      	cmp	r4, #0
 80095b8:	d16a      	bne.n	8009690 <_dtoa_r+0x4e0>
 80095ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80095be:	4b61      	ldr	r3, [pc, #388]	@ (8009744 <_dtoa_r+0x594>)
 80095c0:	2200      	movs	r2, #0
 80095c2:	f7f6 fe61 	bl	8000288 <__aeabi_dsub>
 80095c6:	4602      	mov	r2, r0
 80095c8:	460b      	mov	r3, r1
 80095ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80095ce:	462a      	mov	r2, r5
 80095d0:	4633      	mov	r3, r6
 80095d2:	f7f7 faa1 	bl	8000b18 <__aeabi_dcmpgt>
 80095d6:	2800      	cmp	r0, #0
 80095d8:	f040 8298 	bne.w	8009b0c <_dtoa_r+0x95c>
 80095dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80095e0:	462a      	mov	r2, r5
 80095e2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80095e6:	f7f7 fa79 	bl	8000adc <__aeabi_dcmplt>
 80095ea:	bb38      	cbnz	r0, 800963c <_dtoa_r+0x48c>
 80095ec:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80095f0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80095f4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	f2c0 8157 	blt.w	80098aa <_dtoa_r+0x6fa>
 80095fc:	2f0e      	cmp	r7, #14
 80095fe:	f300 8154 	bgt.w	80098aa <_dtoa_r+0x6fa>
 8009602:	4b4b      	ldr	r3, [pc, #300]	@ (8009730 <_dtoa_r+0x580>)
 8009604:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009608:	ed93 7b00 	vldr	d7, [r3]
 800960c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800960e:	2b00      	cmp	r3, #0
 8009610:	ed8d 7b00 	vstr	d7, [sp]
 8009614:	f280 80e5 	bge.w	80097e2 <_dtoa_r+0x632>
 8009618:	9b03      	ldr	r3, [sp, #12]
 800961a:	2b00      	cmp	r3, #0
 800961c:	f300 80e1 	bgt.w	80097e2 <_dtoa_r+0x632>
 8009620:	d10c      	bne.n	800963c <_dtoa_r+0x48c>
 8009622:	4b48      	ldr	r3, [pc, #288]	@ (8009744 <_dtoa_r+0x594>)
 8009624:	2200      	movs	r2, #0
 8009626:	ec51 0b17 	vmov	r0, r1, d7
 800962a:	f7f6 ffe5 	bl	80005f8 <__aeabi_dmul>
 800962e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009632:	f7f7 fa67 	bl	8000b04 <__aeabi_dcmpge>
 8009636:	2800      	cmp	r0, #0
 8009638:	f000 8266 	beq.w	8009b08 <_dtoa_r+0x958>
 800963c:	2400      	movs	r4, #0
 800963e:	4625      	mov	r5, r4
 8009640:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009642:	4656      	mov	r6, sl
 8009644:	ea6f 0803 	mvn.w	r8, r3
 8009648:	2700      	movs	r7, #0
 800964a:	4621      	mov	r1, r4
 800964c:	4648      	mov	r0, r9
 800964e:	f000 fcbf 	bl	8009fd0 <_Bfree>
 8009652:	2d00      	cmp	r5, #0
 8009654:	f000 80bd 	beq.w	80097d2 <_dtoa_r+0x622>
 8009658:	b12f      	cbz	r7, 8009666 <_dtoa_r+0x4b6>
 800965a:	42af      	cmp	r7, r5
 800965c:	d003      	beq.n	8009666 <_dtoa_r+0x4b6>
 800965e:	4639      	mov	r1, r7
 8009660:	4648      	mov	r0, r9
 8009662:	f000 fcb5 	bl	8009fd0 <_Bfree>
 8009666:	4629      	mov	r1, r5
 8009668:	4648      	mov	r0, r9
 800966a:	f000 fcb1 	bl	8009fd0 <_Bfree>
 800966e:	e0b0      	b.n	80097d2 <_dtoa_r+0x622>
 8009670:	07e2      	lsls	r2, r4, #31
 8009672:	d505      	bpl.n	8009680 <_dtoa_r+0x4d0>
 8009674:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009678:	f7f6 ffbe 	bl	80005f8 <__aeabi_dmul>
 800967c:	3601      	adds	r6, #1
 800967e:	2301      	movs	r3, #1
 8009680:	1064      	asrs	r4, r4, #1
 8009682:	3508      	adds	r5, #8
 8009684:	e762      	b.n	800954c <_dtoa_r+0x39c>
 8009686:	2602      	movs	r6, #2
 8009688:	e765      	b.n	8009556 <_dtoa_r+0x3a6>
 800968a:	9c03      	ldr	r4, [sp, #12]
 800968c:	46b8      	mov	r8, r7
 800968e:	e784      	b.n	800959a <_dtoa_r+0x3ea>
 8009690:	4b27      	ldr	r3, [pc, #156]	@ (8009730 <_dtoa_r+0x580>)
 8009692:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009694:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009698:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800969c:	4454      	add	r4, sl
 800969e:	2900      	cmp	r1, #0
 80096a0:	d054      	beq.n	800974c <_dtoa_r+0x59c>
 80096a2:	4929      	ldr	r1, [pc, #164]	@ (8009748 <_dtoa_r+0x598>)
 80096a4:	2000      	movs	r0, #0
 80096a6:	f7f7 f8d1 	bl	800084c <__aeabi_ddiv>
 80096aa:	4633      	mov	r3, r6
 80096ac:	462a      	mov	r2, r5
 80096ae:	f7f6 fdeb 	bl	8000288 <__aeabi_dsub>
 80096b2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80096b6:	4656      	mov	r6, sl
 80096b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80096bc:	f7f7 fa4c 	bl	8000b58 <__aeabi_d2iz>
 80096c0:	4605      	mov	r5, r0
 80096c2:	f7f6 ff2f 	bl	8000524 <__aeabi_i2d>
 80096c6:	4602      	mov	r2, r0
 80096c8:	460b      	mov	r3, r1
 80096ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80096ce:	f7f6 fddb 	bl	8000288 <__aeabi_dsub>
 80096d2:	3530      	adds	r5, #48	@ 0x30
 80096d4:	4602      	mov	r2, r0
 80096d6:	460b      	mov	r3, r1
 80096d8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80096dc:	f806 5b01 	strb.w	r5, [r6], #1
 80096e0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80096e4:	f7f7 f9fa 	bl	8000adc <__aeabi_dcmplt>
 80096e8:	2800      	cmp	r0, #0
 80096ea:	d172      	bne.n	80097d2 <_dtoa_r+0x622>
 80096ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80096f0:	4911      	ldr	r1, [pc, #68]	@ (8009738 <_dtoa_r+0x588>)
 80096f2:	2000      	movs	r0, #0
 80096f4:	f7f6 fdc8 	bl	8000288 <__aeabi_dsub>
 80096f8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80096fc:	f7f7 f9ee 	bl	8000adc <__aeabi_dcmplt>
 8009700:	2800      	cmp	r0, #0
 8009702:	f040 80b4 	bne.w	800986e <_dtoa_r+0x6be>
 8009706:	42a6      	cmp	r6, r4
 8009708:	f43f af70 	beq.w	80095ec <_dtoa_r+0x43c>
 800970c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009710:	4b0a      	ldr	r3, [pc, #40]	@ (800973c <_dtoa_r+0x58c>)
 8009712:	2200      	movs	r2, #0
 8009714:	f7f6 ff70 	bl	80005f8 <__aeabi_dmul>
 8009718:	4b08      	ldr	r3, [pc, #32]	@ (800973c <_dtoa_r+0x58c>)
 800971a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800971e:	2200      	movs	r2, #0
 8009720:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009724:	f7f6 ff68 	bl	80005f8 <__aeabi_dmul>
 8009728:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800972c:	e7c4      	b.n	80096b8 <_dtoa_r+0x508>
 800972e:	bf00      	nop
 8009730:	0800d8d0 	.word	0x0800d8d0
 8009734:	0800d8a8 	.word	0x0800d8a8
 8009738:	3ff00000 	.word	0x3ff00000
 800973c:	40240000 	.word	0x40240000
 8009740:	401c0000 	.word	0x401c0000
 8009744:	40140000 	.word	0x40140000
 8009748:	3fe00000 	.word	0x3fe00000
 800974c:	4631      	mov	r1, r6
 800974e:	4628      	mov	r0, r5
 8009750:	f7f6 ff52 	bl	80005f8 <__aeabi_dmul>
 8009754:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009758:	9413      	str	r4, [sp, #76]	@ 0x4c
 800975a:	4656      	mov	r6, sl
 800975c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009760:	f7f7 f9fa 	bl	8000b58 <__aeabi_d2iz>
 8009764:	4605      	mov	r5, r0
 8009766:	f7f6 fedd 	bl	8000524 <__aeabi_i2d>
 800976a:	4602      	mov	r2, r0
 800976c:	460b      	mov	r3, r1
 800976e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009772:	f7f6 fd89 	bl	8000288 <__aeabi_dsub>
 8009776:	3530      	adds	r5, #48	@ 0x30
 8009778:	f806 5b01 	strb.w	r5, [r6], #1
 800977c:	4602      	mov	r2, r0
 800977e:	460b      	mov	r3, r1
 8009780:	42a6      	cmp	r6, r4
 8009782:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009786:	f04f 0200 	mov.w	r2, #0
 800978a:	d124      	bne.n	80097d6 <_dtoa_r+0x626>
 800978c:	4baf      	ldr	r3, [pc, #700]	@ (8009a4c <_dtoa_r+0x89c>)
 800978e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009792:	f7f6 fd7b 	bl	800028c <__adddf3>
 8009796:	4602      	mov	r2, r0
 8009798:	460b      	mov	r3, r1
 800979a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800979e:	f7f7 f9bb 	bl	8000b18 <__aeabi_dcmpgt>
 80097a2:	2800      	cmp	r0, #0
 80097a4:	d163      	bne.n	800986e <_dtoa_r+0x6be>
 80097a6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80097aa:	49a8      	ldr	r1, [pc, #672]	@ (8009a4c <_dtoa_r+0x89c>)
 80097ac:	2000      	movs	r0, #0
 80097ae:	f7f6 fd6b 	bl	8000288 <__aeabi_dsub>
 80097b2:	4602      	mov	r2, r0
 80097b4:	460b      	mov	r3, r1
 80097b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80097ba:	f7f7 f98f 	bl	8000adc <__aeabi_dcmplt>
 80097be:	2800      	cmp	r0, #0
 80097c0:	f43f af14 	beq.w	80095ec <_dtoa_r+0x43c>
 80097c4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80097c6:	1e73      	subs	r3, r6, #1
 80097c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80097ca:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80097ce:	2b30      	cmp	r3, #48	@ 0x30
 80097d0:	d0f8      	beq.n	80097c4 <_dtoa_r+0x614>
 80097d2:	4647      	mov	r7, r8
 80097d4:	e03b      	b.n	800984e <_dtoa_r+0x69e>
 80097d6:	4b9e      	ldr	r3, [pc, #632]	@ (8009a50 <_dtoa_r+0x8a0>)
 80097d8:	f7f6 ff0e 	bl	80005f8 <__aeabi_dmul>
 80097dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80097e0:	e7bc      	b.n	800975c <_dtoa_r+0x5ac>
 80097e2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80097e6:	4656      	mov	r6, sl
 80097e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80097ec:	4620      	mov	r0, r4
 80097ee:	4629      	mov	r1, r5
 80097f0:	f7f7 f82c 	bl	800084c <__aeabi_ddiv>
 80097f4:	f7f7 f9b0 	bl	8000b58 <__aeabi_d2iz>
 80097f8:	4680      	mov	r8, r0
 80097fa:	f7f6 fe93 	bl	8000524 <__aeabi_i2d>
 80097fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009802:	f7f6 fef9 	bl	80005f8 <__aeabi_dmul>
 8009806:	4602      	mov	r2, r0
 8009808:	460b      	mov	r3, r1
 800980a:	4620      	mov	r0, r4
 800980c:	4629      	mov	r1, r5
 800980e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009812:	f7f6 fd39 	bl	8000288 <__aeabi_dsub>
 8009816:	f806 4b01 	strb.w	r4, [r6], #1
 800981a:	9d03      	ldr	r5, [sp, #12]
 800981c:	eba6 040a 	sub.w	r4, r6, sl
 8009820:	42a5      	cmp	r5, r4
 8009822:	4602      	mov	r2, r0
 8009824:	460b      	mov	r3, r1
 8009826:	d133      	bne.n	8009890 <_dtoa_r+0x6e0>
 8009828:	f7f6 fd30 	bl	800028c <__adddf3>
 800982c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009830:	4604      	mov	r4, r0
 8009832:	460d      	mov	r5, r1
 8009834:	f7f7 f970 	bl	8000b18 <__aeabi_dcmpgt>
 8009838:	b9c0      	cbnz	r0, 800986c <_dtoa_r+0x6bc>
 800983a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800983e:	4620      	mov	r0, r4
 8009840:	4629      	mov	r1, r5
 8009842:	f7f7 f941 	bl	8000ac8 <__aeabi_dcmpeq>
 8009846:	b110      	cbz	r0, 800984e <_dtoa_r+0x69e>
 8009848:	f018 0f01 	tst.w	r8, #1
 800984c:	d10e      	bne.n	800986c <_dtoa_r+0x6bc>
 800984e:	9902      	ldr	r1, [sp, #8]
 8009850:	4648      	mov	r0, r9
 8009852:	f000 fbbd 	bl	8009fd0 <_Bfree>
 8009856:	2300      	movs	r3, #0
 8009858:	7033      	strb	r3, [r6, #0]
 800985a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800985c:	3701      	adds	r7, #1
 800985e:	601f      	str	r7, [r3, #0]
 8009860:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009862:	2b00      	cmp	r3, #0
 8009864:	f000 824b 	beq.w	8009cfe <_dtoa_r+0xb4e>
 8009868:	601e      	str	r6, [r3, #0]
 800986a:	e248      	b.n	8009cfe <_dtoa_r+0xb4e>
 800986c:	46b8      	mov	r8, r7
 800986e:	4633      	mov	r3, r6
 8009870:	461e      	mov	r6, r3
 8009872:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009876:	2a39      	cmp	r2, #57	@ 0x39
 8009878:	d106      	bne.n	8009888 <_dtoa_r+0x6d8>
 800987a:	459a      	cmp	sl, r3
 800987c:	d1f8      	bne.n	8009870 <_dtoa_r+0x6c0>
 800987e:	2230      	movs	r2, #48	@ 0x30
 8009880:	f108 0801 	add.w	r8, r8, #1
 8009884:	f88a 2000 	strb.w	r2, [sl]
 8009888:	781a      	ldrb	r2, [r3, #0]
 800988a:	3201      	adds	r2, #1
 800988c:	701a      	strb	r2, [r3, #0]
 800988e:	e7a0      	b.n	80097d2 <_dtoa_r+0x622>
 8009890:	4b6f      	ldr	r3, [pc, #444]	@ (8009a50 <_dtoa_r+0x8a0>)
 8009892:	2200      	movs	r2, #0
 8009894:	f7f6 feb0 	bl	80005f8 <__aeabi_dmul>
 8009898:	2200      	movs	r2, #0
 800989a:	2300      	movs	r3, #0
 800989c:	4604      	mov	r4, r0
 800989e:	460d      	mov	r5, r1
 80098a0:	f7f7 f912 	bl	8000ac8 <__aeabi_dcmpeq>
 80098a4:	2800      	cmp	r0, #0
 80098a6:	d09f      	beq.n	80097e8 <_dtoa_r+0x638>
 80098a8:	e7d1      	b.n	800984e <_dtoa_r+0x69e>
 80098aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80098ac:	2a00      	cmp	r2, #0
 80098ae:	f000 80ea 	beq.w	8009a86 <_dtoa_r+0x8d6>
 80098b2:	9a07      	ldr	r2, [sp, #28]
 80098b4:	2a01      	cmp	r2, #1
 80098b6:	f300 80cd 	bgt.w	8009a54 <_dtoa_r+0x8a4>
 80098ba:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80098bc:	2a00      	cmp	r2, #0
 80098be:	f000 80c1 	beq.w	8009a44 <_dtoa_r+0x894>
 80098c2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80098c6:	9c08      	ldr	r4, [sp, #32]
 80098c8:	9e00      	ldr	r6, [sp, #0]
 80098ca:	9a00      	ldr	r2, [sp, #0]
 80098cc:	441a      	add	r2, r3
 80098ce:	9200      	str	r2, [sp, #0]
 80098d0:	9a06      	ldr	r2, [sp, #24]
 80098d2:	2101      	movs	r1, #1
 80098d4:	441a      	add	r2, r3
 80098d6:	4648      	mov	r0, r9
 80098d8:	9206      	str	r2, [sp, #24]
 80098da:	f000 fc77 	bl	800a1cc <__i2b>
 80098de:	4605      	mov	r5, r0
 80098e0:	b166      	cbz	r6, 80098fc <_dtoa_r+0x74c>
 80098e2:	9b06      	ldr	r3, [sp, #24]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	dd09      	ble.n	80098fc <_dtoa_r+0x74c>
 80098e8:	42b3      	cmp	r3, r6
 80098ea:	9a00      	ldr	r2, [sp, #0]
 80098ec:	bfa8      	it	ge
 80098ee:	4633      	movge	r3, r6
 80098f0:	1ad2      	subs	r2, r2, r3
 80098f2:	9200      	str	r2, [sp, #0]
 80098f4:	9a06      	ldr	r2, [sp, #24]
 80098f6:	1af6      	subs	r6, r6, r3
 80098f8:	1ad3      	subs	r3, r2, r3
 80098fa:	9306      	str	r3, [sp, #24]
 80098fc:	9b08      	ldr	r3, [sp, #32]
 80098fe:	b30b      	cbz	r3, 8009944 <_dtoa_r+0x794>
 8009900:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009902:	2b00      	cmp	r3, #0
 8009904:	f000 80c6 	beq.w	8009a94 <_dtoa_r+0x8e4>
 8009908:	2c00      	cmp	r4, #0
 800990a:	f000 80c0 	beq.w	8009a8e <_dtoa_r+0x8de>
 800990e:	4629      	mov	r1, r5
 8009910:	4622      	mov	r2, r4
 8009912:	4648      	mov	r0, r9
 8009914:	f000 fd12 	bl	800a33c <__pow5mult>
 8009918:	9a02      	ldr	r2, [sp, #8]
 800991a:	4601      	mov	r1, r0
 800991c:	4605      	mov	r5, r0
 800991e:	4648      	mov	r0, r9
 8009920:	f000 fc6a 	bl	800a1f8 <__multiply>
 8009924:	9902      	ldr	r1, [sp, #8]
 8009926:	4680      	mov	r8, r0
 8009928:	4648      	mov	r0, r9
 800992a:	f000 fb51 	bl	8009fd0 <_Bfree>
 800992e:	9b08      	ldr	r3, [sp, #32]
 8009930:	1b1b      	subs	r3, r3, r4
 8009932:	9308      	str	r3, [sp, #32]
 8009934:	f000 80b1 	beq.w	8009a9a <_dtoa_r+0x8ea>
 8009938:	9a08      	ldr	r2, [sp, #32]
 800993a:	4641      	mov	r1, r8
 800993c:	4648      	mov	r0, r9
 800993e:	f000 fcfd 	bl	800a33c <__pow5mult>
 8009942:	9002      	str	r0, [sp, #8]
 8009944:	2101      	movs	r1, #1
 8009946:	4648      	mov	r0, r9
 8009948:	f000 fc40 	bl	800a1cc <__i2b>
 800994c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800994e:	4604      	mov	r4, r0
 8009950:	2b00      	cmp	r3, #0
 8009952:	f000 81d8 	beq.w	8009d06 <_dtoa_r+0xb56>
 8009956:	461a      	mov	r2, r3
 8009958:	4601      	mov	r1, r0
 800995a:	4648      	mov	r0, r9
 800995c:	f000 fcee 	bl	800a33c <__pow5mult>
 8009960:	9b07      	ldr	r3, [sp, #28]
 8009962:	2b01      	cmp	r3, #1
 8009964:	4604      	mov	r4, r0
 8009966:	f300 809f 	bgt.w	8009aa8 <_dtoa_r+0x8f8>
 800996a:	9b04      	ldr	r3, [sp, #16]
 800996c:	2b00      	cmp	r3, #0
 800996e:	f040 8097 	bne.w	8009aa0 <_dtoa_r+0x8f0>
 8009972:	9b05      	ldr	r3, [sp, #20]
 8009974:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009978:	2b00      	cmp	r3, #0
 800997a:	f040 8093 	bne.w	8009aa4 <_dtoa_r+0x8f4>
 800997e:	9b05      	ldr	r3, [sp, #20]
 8009980:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009984:	0d1b      	lsrs	r3, r3, #20
 8009986:	051b      	lsls	r3, r3, #20
 8009988:	b133      	cbz	r3, 8009998 <_dtoa_r+0x7e8>
 800998a:	9b00      	ldr	r3, [sp, #0]
 800998c:	3301      	adds	r3, #1
 800998e:	9300      	str	r3, [sp, #0]
 8009990:	9b06      	ldr	r3, [sp, #24]
 8009992:	3301      	adds	r3, #1
 8009994:	9306      	str	r3, [sp, #24]
 8009996:	2301      	movs	r3, #1
 8009998:	9308      	str	r3, [sp, #32]
 800999a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800999c:	2b00      	cmp	r3, #0
 800999e:	f000 81b8 	beq.w	8009d12 <_dtoa_r+0xb62>
 80099a2:	6923      	ldr	r3, [r4, #16]
 80099a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80099a8:	6918      	ldr	r0, [r3, #16]
 80099aa:	f000 fbc3 	bl	800a134 <__hi0bits>
 80099ae:	f1c0 0020 	rsb	r0, r0, #32
 80099b2:	9b06      	ldr	r3, [sp, #24]
 80099b4:	4418      	add	r0, r3
 80099b6:	f010 001f 	ands.w	r0, r0, #31
 80099ba:	f000 8082 	beq.w	8009ac2 <_dtoa_r+0x912>
 80099be:	f1c0 0320 	rsb	r3, r0, #32
 80099c2:	2b04      	cmp	r3, #4
 80099c4:	dd73      	ble.n	8009aae <_dtoa_r+0x8fe>
 80099c6:	9b00      	ldr	r3, [sp, #0]
 80099c8:	f1c0 001c 	rsb	r0, r0, #28
 80099cc:	4403      	add	r3, r0
 80099ce:	9300      	str	r3, [sp, #0]
 80099d0:	9b06      	ldr	r3, [sp, #24]
 80099d2:	4403      	add	r3, r0
 80099d4:	4406      	add	r6, r0
 80099d6:	9306      	str	r3, [sp, #24]
 80099d8:	9b00      	ldr	r3, [sp, #0]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	dd05      	ble.n	80099ea <_dtoa_r+0x83a>
 80099de:	9902      	ldr	r1, [sp, #8]
 80099e0:	461a      	mov	r2, r3
 80099e2:	4648      	mov	r0, r9
 80099e4:	f000 fd04 	bl	800a3f0 <__lshift>
 80099e8:	9002      	str	r0, [sp, #8]
 80099ea:	9b06      	ldr	r3, [sp, #24]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	dd05      	ble.n	80099fc <_dtoa_r+0x84c>
 80099f0:	4621      	mov	r1, r4
 80099f2:	461a      	mov	r2, r3
 80099f4:	4648      	mov	r0, r9
 80099f6:	f000 fcfb 	bl	800a3f0 <__lshift>
 80099fa:	4604      	mov	r4, r0
 80099fc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d061      	beq.n	8009ac6 <_dtoa_r+0x916>
 8009a02:	9802      	ldr	r0, [sp, #8]
 8009a04:	4621      	mov	r1, r4
 8009a06:	f000 fd5f 	bl	800a4c8 <__mcmp>
 8009a0a:	2800      	cmp	r0, #0
 8009a0c:	da5b      	bge.n	8009ac6 <_dtoa_r+0x916>
 8009a0e:	2300      	movs	r3, #0
 8009a10:	9902      	ldr	r1, [sp, #8]
 8009a12:	220a      	movs	r2, #10
 8009a14:	4648      	mov	r0, r9
 8009a16:	f000 fafd 	bl	800a014 <__multadd>
 8009a1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a1c:	9002      	str	r0, [sp, #8]
 8009a1e:	f107 38ff 	add.w	r8, r7, #4294967295
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	f000 8177 	beq.w	8009d16 <_dtoa_r+0xb66>
 8009a28:	4629      	mov	r1, r5
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	220a      	movs	r2, #10
 8009a2e:	4648      	mov	r0, r9
 8009a30:	f000 faf0 	bl	800a014 <__multadd>
 8009a34:	f1bb 0f00 	cmp.w	fp, #0
 8009a38:	4605      	mov	r5, r0
 8009a3a:	dc6f      	bgt.n	8009b1c <_dtoa_r+0x96c>
 8009a3c:	9b07      	ldr	r3, [sp, #28]
 8009a3e:	2b02      	cmp	r3, #2
 8009a40:	dc49      	bgt.n	8009ad6 <_dtoa_r+0x926>
 8009a42:	e06b      	b.n	8009b1c <_dtoa_r+0x96c>
 8009a44:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009a46:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009a4a:	e73c      	b.n	80098c6 <_dtoa_r+0x716>
 8009a4c:	3fe00000 	.word	0x3fe00000
 8009a50:	40240000 	.word	0x40240000
 8009a54:	9b03      	ldr	r3, [sp, #12]
 8009a56:	1e5c      	subs	r4, r3, #1
 8009a58:	9b08      	ldr	r3, [sp, #32]
 8009a5a:	42a3      	cmp	r3, r4
 8009a5c:	db09      	blt.n	8009a72 <_dtoa_r+0x8c2>
 8009a5e:	1b1c      	subs	r4, r3, r4
 8009a60:	9b03      	ldr	r3, [sp, #12]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	f6bf af30 	bge.w	80098c8 <_dtoa_r+0x718>
 8009a68:	9b00      	ldr	r3, [sp, #0]
 8009a6a:	9a03      	ldr	r2, [sp, #12]
 8009a6c:	1a9e      	subs	r6, r3, r2
 8009a6e:	2300      	movs	r3, #0
 8009a70:	e72b      	b.n	80098ca <_dtoa_r+0x71a>
 8009a72:	9b08      	ldr	r3, [sp, #32]
 8009a74:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009a76:	9408      	str	r4, [sp, #32]
 8009a78:	1ae3      	subs	r3, r4, r3
 8009a7a:	441a      	add	r2, r3
 8009a7c:	9e00      	ldr	r6, [sp, #0]
 8009a7e:	9b03      	ldr	r3, [sp, #12]
 8009a80:	920d      	str	r2, [sp, #52]	@ 0x34
 8009a82:	2400      	movs	r4, #0
 8009a84:	e721      	b.n	80098ca <_dtoa_r+0x71a>
 8009a86:	9c08      	ldr	r4, [sp, #32]
 8009a88:	9e00      	ldr	r6, [sp, #0]
 8009a8a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8009a8c:	e728      	b.n	80098e0 <_dtoa_r+0x730>
 8009a8e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8009a92:	e751      	b.n	8009938 <_dtoa_r+0x788>
 8009a94:	9a08      	ldr	r2, [sp, #32]
 8009a96:	9902      	ldr	r1, [sp, #8]
 8009a98:	e750      	b.n	800993c <_dtoa_r+0x78c>
 8009a9a:	f8cd 8008 	str.w	r8, [sp, #8]
 8009a9e:	e751      	b.n	8009944 <_dtoa_r+0x794>
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	e779      	b.n	8009998 <_dtoa_r+0x7e8>
 8009aa4:	9b04      	ldr	r3, [sp, #16]
 8009aa6:	e777      	b.n	8009998 <_dtoa_r+0x7e8>
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	9308      	str	r3, [sp, #32]
 8009aac:	e779      	b.n	80099a2 <_dtoa_r+0x7f2>
 8009aae:	d093      	beq.n	80099d8 <_dtoa_r+0x828>
 8009ab0:	9a00      	ldr	r2, [sp, #0]
 8009ab2:	331c      	adds	r3, #28
 8009ab4:	441a      	add	r2, r3
 8009ab6:	9200      	str	r2, [sp, #0]
 8009ab8:	9a06      	ldr	r2, [sp, #24]
 8009aba:	441a      	add	r2, r3
 8009abc:	441e      	add	r6, r3
 8009abe:	9206      	str	r2, [sp, #24]
 8009ac0:	e78a      	b.n	80099d8 <_dtoa_r+0x828>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	e7f4      	b.n	8009ab0 <_dtoa_r+0x900>
 8009ac6:	9b03      	ldr	r3, [sp, #12]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	46b8      	mov	r8, r7
 8009acc:	dc20      	bgt.n	8009b10 <_dtoa_r+0x960>
 8009ace:	469b      	mov	fp, r3
 8009ad0:	9b07      	ldr	r3, [sp, #28]
 8009ad2:	2b02      	cmp	r3, #2
 8009ad4:	dd1e      	ble.n	8009b14 <_dtoa_r+0x964>
 8009ad6:	f1bb 0f00 	cmp.w	fp, #0
 8009ada:	f47f adb1 	bne.w	8009640 <_dtoa_r+0x490>
 8009ade:	4621      	mov	r1, r4
 8009ae0:	465b      	mov	r3, fp
 8009ae2:	2205      	movs	r2, #5
 8009ae4:	4648      	mov	r0, r9
 8009ae6:	f000 fa95 	bl	800a014 <__multadd>
 8009aea:	4601      	mov	r1, r0
 8009aec:	4604      	mov	r4, r0
 8009aee:	9802      	ldr	r0, [sp, #8]
 8009af0:	f000 fcea 	bl	800a4c8 <__mcmp>
 8009af4:	2800      	cmp	r0, #0
 8009af6:	f77f ada3 	ble.w	8009640 <_dtoa_r+0x490>
 8009afa:	4656      	mov	r6, sl
 8009afc:	2331      	movs	r3, #49	@ 0x31
 8009afe:	f806 3b01 	strb.w	r3, [r6], #1
 8009b02:	f108 0801 	add.w	r8, r8, #1
 8009b06:	e59f      	b.n	8009648 <_dtoa_r+0x498>
 8009b08:	9c03      	ldr	r4, [sp, #12]
 8009b0a:	46b8      	mov	r8, r7
 8009b0c:	4625      	mov	r5, r4
 8009b0e:	e7f4      	b.n	8009afa <_dtoa_r+0x94a>
 8009b10:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8009b14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	f000 8101 	beq.w	8009d1e <_dtoa_r+0xb6e>
 8009b1c:	2e00      	cmp	r6, #0
 8009b1e:	dd05      	ble.n	8009b2c <_dtoa_r+0x97c>
 8009b20:	4629      	mov	r1, r5
 8009b22:	4632      	mov	r2, r6
 8009b24:	4648      	mov	r0, r9
 8009b26:	f000 fc63 	bl	800a3f0 <__lshift>
 8009b2a:	4605      	mov	r5, r0
 8009b2c:	9b08      	ldr	r3, [sp, #32]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d05c      	beq.n	8009bec <_dtoa_r+0xa3c>
 8009b32:	6869      	ldr	r1, [r5, #4]
 8009b34:	4648      	mov	r0, r9
 8009b36:	f000 fa0b 	bl	8009f50 <_Balloc>
 8009b3a:	4606      	mov	r6, r0
 8009b3c:	b928      	cbnz	r0, 8009b4a <_dtoa_r+0x99a>
 8009b3e:	4b82      	ldr	r3, [pc, #520]	@ (8009d48 <_dtoa_r+0xb98>)
 8009b40:	4602      	mov	r2, r0
 8009b42:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009b46:	f7ff bb4a 	b.w	80091de <_dtoa_r+0x2e>
 8009b4a:	692a      	ldr	r2, [r5, #16]
 8009b4c:	3202      	adds	r2, #2
 8009b4e:	0092      	lsls	r2, r2, #2
 8009b50:	f105 010c 	add.w	r1, r5, #12
 8009b54:	300c      	adds	r0, #12
 8009b56:	f7ff fa8e 	bl	8009076 <memcpy>
 8009b5a:	2201      	movs	r2, #1
 8009b5c:	4631      	mov	r1, r6
 8009b5e:	4648      	mov	r0, r9
 8009b60:	f000 fc46 	bl	800a3f0 <__lshift>
 8009b64:	f10a 0301 	add.w	r3, sl, #1
 8009b68:	9300      	str	r3, [sp, #0]
 8009b6a:	eb0a 030b 	add.w	r3, sl, fp
 8009b6e:	9308      	str	r3, [sp, #32]
 8009b70:	9b04      	ldr	r3, [sp, #16]
 8009b72:	f003 0301 	and.w	r3, r3, #1
 8009b76:	462f      	mov	r7, r5
 8009b78:	9306      	str	r3, [sp, #24]
 8009b7a:	4605      	mov	r5, r0
 8009b7c:	9b00      	ldr	r3, [sp, #0]
 8009b7e:	9802      	ldr	r0, [sp, #8]
 8009b80:	4621      	mov	r1, r4
 8009b82:	f103 3bff 	add.w	fp, r3, #4294967295
 8009b86:	f7ff fa8b 	bl	80090a0 <quorem>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	3330      	adds	r3, #48	@ 0x30
 8009b8e:	9003      	str	r0, [sp, #12]
 8009b90:	4639      	mov	r1, r7
 8009b92:	9802      	ldr	r0, [sp, #8]
 8009b94:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b96:	f000 fc97 	bl	800a4c8 <__mcmp>
 8009b9a:	462a      	mov	r2, r5
 8009b9c:	9004      	str	r0, [sp, #16]
 8009b9e:	4621      	mov	r1, r4
 8009ba0:	4648      	mov	r0, r9
 8009ba2:	f000 fcad 	bl	800a500 <__mdiff>
 8009ba6:	68c2      	ldr	r2, [r0, #12]
 8009ba8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009baa:	4606      	mov	r6, r0
 8009bac:	bb02      	cbnz	r2, 8009bf0 <_dtoa_r+0xa40>
 8009bae:	4601      	mov	r1, r0
 8009bb0:	9802      	ldr	r0, [sp, #8]
 8009bb2:	f000 fc89 	bl	800a4c8 <__mcmp>
 8009bb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bb8:	4602      	mov	r2, r0
 8009bba:	4631      	mov	r1, r6
 8009bbc:	4648      	mov	r0, r9
 8009bbe:	920c      	str	r2, [sp, #48]	@ 0x30
 8009bc0:	9309      	str	r3, [sp, #36]	@ 0x24
 8009bc2:	f000 fa05 	bl	8009fd0 <_Bfree>
 8009bc6:	9b07      	ldr	r3, [sp, #28]
 8009bc8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009bca:	9e00      	ldr	r6, [sp, #0]
 8009bcc:	ea42 0103 	orr.w	r1, r2, r3
 8009bd0:	9b06      	ldr	r3, [sp, #24]
 8009bd2:	4319      	orrs	r1, r3
 8009bd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bd6:	d10d      	bne.n	8009bf4 <_dtoa_r+0xa44>
 8009bd8:	2b39      	cmp	r3, #57	@ 0x39
 8009bda:	d027      	beq.n	8009c2c <_dtoa_r+0xa7c>
 8009bdc:	9a04      	ldr	r2, [sp, #16]
 8009bde:	2a00      	cmp	r2, #0
 8009be0:	dd01      	ble.n	8009be6 <_dtoa_r+0xa36>
 8009be2:	9b03      	ldr	r3, [sp, #12]
 8009be4:	3331      	adds	r3, #49	@ 0x31
 8009be6:	f88b 3000 	strb.w	r3, [fp]
 8009bea:	e52e      	b.n	800964a <_dtoa_r+0x49a>
 8009bec:	4628      	mov	r0, r5
 8009bee:	e7b9      	b.n	8009b64 <_dtoa_r+0x9b4>
 8009bf0:	2201      	movs	r2, #1
 8009bf2:	e7e2      	b.n	8009bba <_dtoa_r+0xa0a>
 8009bf4:	9904      	ldr	r1, [sp, #16]
 8009bf6:	2900      	cmp	r1, #0
 8009bf8:	db04      	blt.n	8009c04 <_dtoa_r+0xa54>
 8009bfa:	9807      	ldr	r0, [sp, #28]
 8009bfc:	4301      	orrs	r1, r0
 8009bfe:	9806      	ldr	r0, [sp, #24]
 8009c00:	4301      	orrs	r1, r0
 8009c02:	d120      	bne.n	8009c46 <_dtoa_r+0xa96>
 8009c04:	2a00      	cmp	r2, #0
 8009c06:	ddee      	ble.n	8009be6 <_dtoa_r+0xa36>
 8009c08:	9902      	ldr	r1, [sp, #8]
 8009c0a:	9300      	str	r3, [sp, #0]
 8009c0c:	2201      	movs	r2, #1
 8009c0e:	4648      	mov	r0, r9
 8009c10:	f000 fbee 	bl	800a3f0 <__lshift>
 8009c14:	4621      	mov	r1, r4
 8009c16:	9002      	str	r0, [sp, #8]
 8009c18:	f000 fc56 	bl	800a4c8 <__mcmp>
 8009c1c:	2800      	cmp	r0, #0
 8009c1e:	9b00      	ldr	r3, [sp, #0]
 8009c20:	dc02      	bgt.n	8009c28 <_dtoa_r+0xa78>
 8009c22:	d1e0      	bne.n	8009be6 <_dtoa_r+0xa36>
 8009c24:	07da      	lsls	r2, r3, #31
 8009c26:	d5de      	bpl.n	8009be6 <_dtoa_r+0xa36>
 8009c28:	2b39      	cmp	r3, #57	@ 0x39
 8009c2a:	d1da      	bne.n	8009be2 <_dtoa_r+0xa32>
 8009c2c:	2339      	movs	r3, #57	@ 0x39
 8009c2e:	f88b 3000 	strb.w	r3, [fp]
 8009c32:	4633      	mov	r3, r6
 8009c34:	461e      	mov	r6, r3
 8009c36:	3b01      	subs	r3, #1
 8009c38:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009c3c:	2a39      	cmp	r2, #57	@ 0x39
 8009c3e:	d04e      	beq.n	8009cde <_dtoa_r+0xb2e>
 8009c40:	3201      	adds	r2, #1
 8009c42:	701a      	strb	r2, [r3, #0]
 8009c44:	e501      	b.n	800964a <_dtoa_r+0x49a>
 8009c46:	2a00      	cmp	r2, #0
 8009c48:	dd03      	ble.n	8009c52 <_dtoa_r+0xaa2>
 8009c4a:	2b39      	cmp	r3, #57	@ 0x39
 8009c4c:	d0ee      	beq.n	8009c2c <_dtoa_r+0xa7c>
 8009c4e:	3301      	adds	r3, #1
 8009c50:	e7c9      	b.n	8009be6 <_dtoa_r+0xa36>
 8009c52:	9a00      	ldr	r2, [sp, #0]
 8009c54:	9908      	ldr	r1, [sp, #32]
 8009c56:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009c5a:	428a      	cmp	r2, r1
 8009c5c:	d028      	beq.n	8009cb0 <_dtoa_r+0xb00>
 8009c5e:	9902      	ldr	r1, [sp, #8]
 8009c60:	2300      	movs	r3, #0
 8009c62:	220a      	movs	r2, #10
 8009c64:	4648      	mov	r0, r9
 8009c66:	f000 f9d5 	bl	800a014 <__multadd>
 8009c6a:	42af      	cmp	r7, r5
 8009c6c:	9002      	str	r0, [sp, #8]
 8009c6e:	f04f 0300 	mov.w	r3, #0
 8009c72:	f04f 020a 	mov.w	r2, #10
 8009c76:	4639      	mov	r1, r7
 8009c78:	4648      	mov	r0, r9
 8009c7a:	d107      	bne.n	8009c8c <_dtoa_r+0xadc>
 8009c7c:	f000 f9ca 	bl	800a014 <__multadd>
 8009c80:	4607      	mov	r7, r0
 8009c82:	4605      	mov	r5, r0
 8009c84:	9b00      	ldr	r3, [sp, #0]
 8009c86:	3301      	adds	r3, #1
 8009c88:	9300      	str	r3, [sp, #0]
 8009c8a:	e777      	b.n	8009b7c <_dtoa_r+0x9cc>
 8009c8c:	f000 f9c2 	bl	800a014 <__multadd>
 8009c90:	4629      	mov	r1, r5
 8009c92:	4607      	mov	r7, r0
 8009c94:	2300      	movs	r3, #0
 8009c96:	220a      	movs	r2, #10
 8009c98:	4648      	mov	r0, r9
 8009c9a:	f000 f9bb 	bl	800a014 <__multadd>
 8009c9e:	4605      	mov	r5, r0
 8009ca0:	e7f0      	b.n	8009c84 <_dtoa_r+0xad4>
 8009ca2:	f1bb 0f00 	cmp.w	fp, #0
 8009ca6:	bfcc      	ite	gt
 8009ca8:	465e      	movgt	r6, fp
 8009caa:	2601      	movle	r6, #1
 8009cac:	4456      	add	r6, sl
 8009cae:	2700      	movs	r7, #0
 8009cb0:	9902      	ldr	r1, [sp, #8]
 8009cb2:	9300      	str	r3, [sp, #0]
 8009cb4:	2201      	movs	r2, #1
 8009cb6:	4648      	mov	r0, r9
 8009cb8:	f000 fb9a 	bl	800a3f0 <__lshift>
 8009cbc:	4621      	mov	r1, r4
 8009cbe:	9002      	str	r0, [sp, #8]
 8009cc0:	f000 fc02 	bl	800a4c8 <__mcmp>
 8009cc4:	2800      	cmp	r0, #0
 8009cc6:	dcb4      	bgt.n	8009c32 <_dtoa_r+0xa82>
 8009cc8:	d102      	bne.n	8009cd0 <_dtoa_r+0xb20>
 8009cca:	9b00      	ldr	r3, [sp, #0]
 8009ccc:	07db      	lsls	r3, r3, #31
 8009cce:	d4b0      	bmi.n	8009c32 <_dtoa_r+0xa82>
 8009cd0:	4633      	mov	r3, r6
 8009cd2:	461e      	mov	r6, r3
 8009cd4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009cd8:	2a30      	cmp	r2, #48	@ 0x30
 8009cda:	d0fa      	beq.n	8009cd2 <_dtoa_r+0xb22>
 8009cdc:	e4b5      	b.n	800964a <_dtoa_r+0x49a>
 8009cde:	459a      	cmp	sl, r3
 8009ce0:	d1a8      	bne.n	8009c34 <_dtoa_r+0xa84>
 8009ce2:	2331      	movs	r3, #49	@ 0x31
 8009ce4:	f108 0801 	add.w	r8, r8, #1
 8009ce8:	f88a 3000 	strb.w	r3, [sl]
 8009cec:	e4ad      	b.n	800964a <_dtoa_r+0x49a>
 8009cee:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009cf0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8009d4c <_dtoa_r+0xb9c>
 8009cf4:	b11b      	cbz	r3, 8009cfe <_dtoa_r+0xb4e>
 8009cf6:	f10a 0308 	add.w	r3, sl, #8
 8009cfa:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009cfc:	6013      	str	r3, [r2, #0]
 8009cfe:	4650      	mov	r0, sl
 8009d00:	b017      	add	sp, #92	@ 0x5c
 8009d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d06:	9b07      	ldr	r3, [sp, #28]
 8009d08:	2b01      	cmp	r3, #1
 8009d0a:	f77f ae2e 	ble.w	800996a <_dtoa_r+0x7ba>
 8009d0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009d10:	9308      	str	r3, [sp, #32]
 8009d12:	2001      	movs	r0, #1
 8009d14:	e64d      	b.n	80099b2 <_dtoa_r+0x802>
 8009d16:	f1bb 0f00 	cmp.w	fp, #0
 8009d1a:	f77f aed9 	ble.w	8009ad0 <_dtoa_r+0x920>
 8009d1e:	4656      	mov	r6, sl
 8009d20:	9802      	ldr	r0, [sp, #8]
 8009d22:	4621      	mov	r1, r4
 8009d24:	f7ff f9bc 	bl	80090a0 <quorem>
 8009d28:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8009d2c:	f806 3b01 	strb.w	r3, [r6], #1
 8009d30:	eba6 020a 	sub.w	r2, r6, sl
 8009d34:	4593      	cmp	fp, r2
 8009d36:	ddb4      	ble.n	8009ca2 <_dtoa_r+0xaf2>
 8009d38:	9902      	ldr	r1, [sp, #8]
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	220a      	movs	r2, #10
 8009d3e:	4648      	mov	r0, r9
 8009d40:	f000 f968 	bl	800a014 <__multadd>
 8009d44:	9002      	str	r0, [sp, #8]
 8009d46:	e7eb      	b.n	8009d20 <_dtoa_r+0xb70>
 8009d48:	0800d75b 	.word	0x0800d75b
 8009d4c:	0800d6df 	.word	0x0800d6df

08009d50 <_free_r>:
 8009d50:	b538      	push	{r3, r4, r5, lr}
 8009d52:	4605      	mov	r5, r0
 8009d54:	2900      	cmp	r1, #0
 8009d56:	d041      	beq.n	8009ddc <_free_r+0x8c>
 8009d58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d5c:	1f0c      	subs	r4, r1, #4
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	bfb8      	it	lt
 8009d62:	18e4      	addlt	r4, r4, r3
 8009d64:	f000 f8e8 	bl	8009f38 <__malloc_lock>
 8009d68:	4a1d      	ldr	r2, [pc, #116]	@ (8009de0 <_free_r+0x90>)
 8009d6a:	6813      	ldr	r3, [r2, #0]
 8009d6c:	b933      	cbnz	r3, 8009d7c <_free_r+0x2c>
 8009d6e:	6063      	str	r3, [r4, #4]
 8009d70:	6014      	str	r4, [r2, #0]
 8009d72:	4628      	mov	r0, r5
 8009d74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d78:	f000 b8e4 	b.w	8009f44 <__malloc_unlock>
 8009d7c:	42a3      	cmp	r3, r4
 8009d7e:	d908      	bls.n	8009d92 <_free_r+0x42>
 8009d80:	6820      	ldr	r0, [r4, #0]
 8009d82:	1821      	adds	r1, r4, r0
 8009d84:	428b      	cmp	r3, r1
 8009d86:	bf01      	itttt	eq
 8009d88:	6819      	ldreq	r1, [r3, #0]
 8009d8a:	685b      	ldreq	r3, [r3, #4]
 8009d8c:	1809      	addeq	r1, r1, r0
 8009d8e:	6021      	streq	r1, [r4, #0]
 8009d90:	e7ed      	b.n	8009d6e <_free_r+0x1e>
 8009d92:	461a      	mov	r2, r3
 8009d94:	685b      	ldr	r3, [r3, #4]
 8009d96:	b10b      	cbz	r3, 8009d9c <_free_r+0x4c>
 8009d98:	42a3      	cmp	r3, r4
 8009d9a:	d9fa      	bls.n	8009d92 <_free_r+0x42>
 8009d9c:	6811      	ldr	r1, [r2, #0]
 8009d9e:	1850      	adds	r0, r2, r1
 8009da0:	42a0      	cmp	r0, r4
 8009da2:	d10b      	bne.n	8009dbc <_free_r+0x6c>
 8009da4:	6820      	ldr	r0, [r4, #0]
 8009da6:	4401      	add	r1, r0
 8009da8:	1850      	adds	r0, r2, r1
 8009daa:	4283      	cmp	r3, r0
 8009dac:	6011      	str	r1, [r2, #0]
 8009dae:	d1e0      	bne.n	8009d72 <_free_r+0x22>
 8009db0:	6818      	ldr	r0, [r3, #0]
 8009db2:	685b      	ldr	r3, [r3, #4]
 8009db4:	6053      	str	r3, [r2, #4]
 8009db6:	4408      	add	r0, r1
 8009db8:	6010      	str	r0, [r2, #0]
 8009dba:	e7da      	b.n	8009d72 <_free_r+0x22>
 8009dbc:	d902      	bls.n	8009dc4 <_free_r+0x74>
 8009dbe:	230c      	movs	r3, #12
 8009dc0:	602b      	str	r3, [r5, #0]
 8009dc2:	e7d6      	b.n	8009d72 <_free_r+0x22>
 8009dc4:	6820      	ldr	r0, [r4, #0]
 8009dc6:	1821      	adds	r1, r4, r0
 8009dc8:	428b      	cmp	r3, r1
 8009dca:	bf04      	itt	eq
 8009dcc:	6819      	ldreq	r1, [r3, #0]
 8009dce:	685b      	ldreq	r3, [r3, #4]
 8009dd0:	6063      	str	r3, [r4, #4]
 8009dd2:	bf04      	itt	eq
 8009dd4:	1809      	addeq	r1, r1, r0
 8009dd6:	6021      	streq	r1, [r4, #0]
 8009dd8:	6054      	str	r4, [r2, #4]
 8009dda:	e7ca      	b.n	8009d72 <_free_r+0x22>
 8009ddc:	bd38      	pop	{r3, r4, r5, pc}
 8009dde:	bf00      	nop
 8009de0:	20001070 	.word	0x20001070

08009de4 <malloc>:
 8009de4:	4b02      	ldr	r3, [pc, #8]	@ (8009df0 <malloc+0xc>)
 8009de6:	4601      	mov	r1, r0
 8009de8:	6818      	ldr	r0, [r3, #0]
 8009dea:	f000 b825 	b.w	8009e38 <_malloc_r>
 8009dee:	bf00      	nop
 8009df0:	20000034 	.word	0x20000034

08009df4 <sbrk_aligned>:
 8009df4:	b570      	push	{r4, r5, r6, lr}
 8009df6:	4e0f      	ldr	r6, [pc, #60]	@ (8009e34 <sbrk_aligned+0x40>)
 8009df8:	460c      	mov	r4, r1
 8009dfa:	6831      	ldr	r1, [r6, #0]
 8009dfc:	4605      	mov	r5, r0
 8009dfe:	b911      	cbnz	r1, 8009e06 <sbrk_aligned+0x12>
 8009e00:	f002 f996 	bl	800c130 <_sbrk_r>
 8009e04:	6030      	str	r0, [r6, #0]
 8009e06:	4621      	mov	r1, r4
 8009e08:	4628      	mov	r0, r5
 8009e0a:	f002 f991 	bl	800c130 <_sbrk_r>
 8009e0e:	1c43      	adds	r3, r0, #1
 8009e10:	d103      	bne.n	8009e1a <sbrk_aligned+0x26>
 8009e12:	f04f 34ff 	mov.w	r4, #4294967295
 8009e16:	4620      	mov	r0, r4
 8009e18:	bd70      	pop	{r4, r5, r6, pc}
 8009e1a:	1cc4      	adds	r4, r0, #3
 8009e1c:	f024 0403 	bic.w	r4, r4, #3
 8009e20:	42a0      	cmp	r0, r4
 8009e22:	d0f8      	beq.n	8009e16 <sbrk_aligned+0x22>
 8009e24:	1a21      	subs	r1, r4, r0
 8009e26:	4628      	mov	r0, r5
 8009e28:	f002 f982 	bl	800c130 <_sbrk_r>
 8009e2c:	3001      	adds	r0, #1
 8009e2e:	d1f2      	bne.n	8009e16 <sbrk_aligned+0x22>
 8009e30:	e7ef      	b.n	8009e12 <sbrk_aligned+0x1e>
 8009e32:	bf00      	nop
 8009e34:	2000106c 	.word	0x2000106c

08009e38 <_malloc_r>:
 8009e38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e3c:	1ccd      	adds	r5, r1, #3
 8009e3e:	f025 0503 	bic.w	r5, r5, #3
 8009e42:	3508      	adds	r5, #8
 8009e44:	2d0c      	cmp	r5, #12
 8009e46:	bf38      	it	cc
 8009e48:	250c      	movcc	r5, #12
 8009e4a:	2d00      	cmp	r5, #0
 8009e4c:	4606      	mov	r6, r0
 8009e4e:	db01      	blt.n	8009e54 <_malloc_r+0x1c>
 8009e50:	42a9      	cmp	r1, r5
 8009e52:	d904      	bls.n	8009e5e <_malloc_r+0x26>
 8009e54:	230c      	movs	r3, #12
 8009e56:	6033      	str	r3, [r6, #0]
 8009e58:	2000      	movs	r0, #0
 8009e5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e5e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009f34 <_malloc_r+0xfc>
 8009e62:	f000 f869 	bl	8009f38 <__malloc_lock>
 8009e66:	f8d8 3000 	ldr.w	r3, [r8]
 8009e6a:	461c      	mov	r4, r3
 8009e6c:	bb44      	cbnz	r4, 8009ec0 <_malloc_r+0x88>
 8009e6e:	4629      	mov	r1, r5
 8009e70:	4630      	mov	r0, r6
 8009e72:	f7ff ffbf 	bl	8009df4 <sbrk_aligned>
 8009e76:	1c43      	adds	r3, r0, #1
 8009e78:	4604      	mov	r4, r0
 8009e7a:	d158      	bne.n	8009f2e <_malloc_r+0xf6>
 8009e7c:	f8d8 4000 	ldr.w	r4, [r8]
 8009e80:	4627      	mov	r7, r4
 8009e82:	2f00      	cmp	r7, #0
 8009e84:	d143      	bne.n	8009f0e <_malloc_r+0xd6>
 8009e86:	2c00      	cmp	r4, #0
 8009e88:	d04b      	beq.n	8009f22 <_malloc_r+0xea>
 8009e8a:	6823      	ldr	r3, [r4, #0]
 8009e8c:	4639      	mov	r1, r7
 8009e8e:	4630      	mov	r0, r6
 8009e90:	eb04 0903 	add.w	r9, r4, r3
 8009e94:	f002 f94c 	bl	800c130 <_sbrk_r>
 8009e98:	4581      	cmp	r9, r0
 8009e9a:	d142      	bne.n	8009f22 <_malloc_r+0xea>
 8009e9c:	6821      	ldr	r1, [r4, #0]
 8009e9e:	1a6d      	subs	r5, r5, r1
 8009ea0:	4629      	mov	r1, r5
 8009ea2:	4630      	mov	r0, r6
 8009ea4:	f7ff ffa6 	bl	8009df4 <sbrk_aligned>
 8009ea8:	3001      	adds	r0, #1
 8009eaa:	d03a      	beq.n	8009f22 <_malloc_r+0xea>
 8009eac:	6823      	ldr	r3, [r4, #0]
 8009eae:	442b      	add	r3, r5
 8009eb0:	6023      	str	r3, [r4, #0]
 8009eb2:	f8d8 3000 	ldr.w	r3, [r8]
 8009eb6:	685a      	ldr	r2, [r3, #4]
 8009eb8:	bb62      	cbnz	r2, 8009f14 <_malloc_r+0xdc>
 8009eba:	f8c8 7000 	str.w	r7, [r8]
 8009ebe:	e00f      	b.n	8009ee0 <_malloc_r+0xa8>
 8009ec0:	6822      	ldr	r2, [r4, #0]
 8009ec2:	1b52      	subs	r2, r2, r5
 8009ec4:	d420      	bmi.n	8009f08 <_malloc_r+0xd0>
 8009ec6:	2a0b      	cmp	r2, #11
 8009ec8:	d917      	bls.n	8009efa <_malloc_r+0xc2>
 8009eca:	1961      	adds	r1, r4, r5
 8009ecc:	42a3      	cmp	r3, r4
 8009ece:	6025      	str	r5, [r4, #0]
 8009ed0:	bf18      	it	ne
 8009ed2:	6059      	strne	r1, [r3, #4]
 8009ed4:	6863      	ldr	r3, [r4, #4]
 8009ed6:	bf08      	it	eq
 8009ed8:	f8c8 1000 	streq.w	r1, [r8]
 8009edc:	5162      	str	r2, [r4, r5]
 8009ede:	604b      	str	r3, [r1, #4]
 8009ee0:	4630      	mov	r0, r6
 8009ee2:	f000 f82f 	bl	8009f44 <__malloc_unlock>
 8009ee6:	f104 000b 	add.w	r0, r4, #11
 8009eea:	1d23      	adds	r3, r4, #4
 8009eec:	f020 0007 	bic.w	r0, r0, #7
 8009ef0:	1ac2      	subs	r2, r0, r3
 8009ef2:	bf1c      	itt	ne
 8009ef4:	1a1b      	subne	r3, r3, r0
 8009ef6:	50a3      	strne	r3, [r4, r2]
 8009ef8:	e7af      	b.n	8009e5a <_malloc_r+0x22>
 8009efa:	6862      	ldr	r2, [r4, #4]
 8009efc:	42a3      	cmp	r3, r4
 8009efe:	bf0c      	ite	eq
 8009f00:	f8c8 2000 	streq.w	r2, [r8]
 8009f04:	605a      	strne	r2, [r3, #4]
 8009f06:	e7eb      	b.n	8009ee0 <_malloc_r+0xa8>
 8009f08:	4623      	mov	r3, r4
 8009f0a:	6864      	ldr	r4, [r4, #4]
 8009f0c:	e7ae      	b.n	8009e6c <_malloc_r+0x34>
 8009f0e:	463c      	mov	r4, r7
 8009f10:	687f      	ldr	r7, [r7, #4]
 8009f12:	e7b6      	b.n	8009e82 <_malloc_r+0x4a>
 8009f14:	461a      	mov	r2, r3
 8009f16:	685b      	ldr	r3, [r3, #4]
 8009f18:	42a3      	cmp	r3, r4
 8009f1a:	d1fb      	bne.n	8009f14 <_malloc_r+0xdc>
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	6053      	str	r3, [r2, #4]
 8009f20:	e7de      	b.n	8009ee0 <_malloc_r+0xa8>
 8009f22:	230c      	movs	r3, #12
 8009f24:	6033      	str	r3, [r6, #0]
 8009f26:	4630      	mov	r0, r6
 8009f28:	f000 f80c 	bl	8009f44 <__malloc_unlock>
 8009f2c:	e794      	b.n	8009e58 <_malloc_r+0x20>
 8009f2e:	6005      	str	r5, [r0, #0]
 8009f30:	e7d6      	b.n	8009ee0 <_malloc_r+0xa8>
 8009f32:	bf00      	nop
 8009f34:	20001070 	.word	0x20001070

08009f38 <__malloc_lock>:
 8009f38:	4801      	ldr	r0, [pc, #4]	@ (8009f40 <__malloc_lock+0x8>)
 8009f3a:	f7ff b89a 	b.w	8009072 <__retarget_lock_acquire_recursive>
 8009f3e:	bf00      	nop
 8009f40:	20001068 	.word	0x20001068

08009f44 <__malloc_unlock>:
 8009f44:	4801      	ldr	r0, [pc, #4]	@ (8009f4c <__malloc_unlock+0x8>)
 8009f46:	f7ff b895 	b.w	8009074 <__retarget_lock_release_recursive>
 8009f4a:	bf00      	nop
 8009f4c:	20001068 	.word	0x20001068

08009f50 <_Balloc>:
 8009f50:	b570      	push	{r4, r5, r6, lr}
 8009f52:	69c6      	ldr	r6, [r0, #28]
 8009f54:	4604      	mov	r4, r0
 8009f56:	460d      	mov	r5, r1
 8009f58:	b976      	cbnz	r6, 8009f78 <_Balloc+0x28>
 8009f5a:	2010      	movs	r0, #16
 8009f5c:	f7ff ff42 	bl	8009de4 <malloc>
 8009f60:	4602      	mov	r2, r0
 8009f62:	61e0      	str	r0, [r4, #28]
 8009f64:	b920      	cbnz	r0, 8009f70 <_Balloc+0x20>
 8009f66:	4b18      	ldr	r3, [pc, #96]	@ (8009fc8 <_Balloc+0x78>)
 8009f68:	4818      	ldr	r0, [pc, #96]	@ (8009fcc <_Balloc+0x7c>)
 8009f6a:	216b      	movs	r1, #107	@ 0x6b
 8009f6c:	f002 f8f8 	bl	800c160 <__assert_func>
 8009f70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009f74:	6006      	str	r6, [r0, #0]
 8009f76:	60c6      	str	r6, [r0, #12]
 8009f78:	69e6      	ldr	r6, [r4, #28]
 8009f7a:	68f3      	ldr	r3, [r6, #12]
 8009f7c:	b183      	cbz	r3, 8009fa0 <_Balloc+0x50>
 8009f7e:	69e3      	ldr	r3, [r4, #28]
 8009f80:	68db      	ldr	r3, [r3, #12]
 8009f82:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009f86:	b9b8      	cbnz	r0, 8009fb8 <_Balloc+0x68>
 8009f88:	2101      	movs	r1, #1
 8009f8a:	fa01 f605 	lsl.w	r6, r1, r5
 8009f8e:	1d72      	adds	r2, r6, #5
 8009f90:	0092      	lsls	r2, r2, #2
 8009f92:	4620      	mov	r0, r4
 8009f94:	f002 f902 	bl	800c19c <_calloc_r>
 8009f98:	b160      	cbz	r0, 8009fb4 <_Balloc+0x64>
 8009f9a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009f9e:	e00e      	b.n	8009fbe <_Balloc+0x6e>
 8009fa0:	2221      	movs	r2, #33	@ 0x21
 8009fa2:	2104      	movs	r1, #4
 8009fa4:	4620      	mov	r0, r4
 8009fa6:	f002 f8f9 	bl	800c19c <_calloc_r>
 8009faa:	69e3      	ldr	r3, [r4, #28]
 8009fac:	60f0      	str	r0, [r6, #12]
 8009fae:	68db      	ldr	r3, [r3, #12]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d1e4      	bne.n	8009f7e <_Balloc+0x2e>
 8009fb4:	2000      	movs	r0, #0
 8009fb6:	bd70      	pop	{r4, r5, r6, pc}
 8009fb8:	6802      	ldr	r2, [r0, #0]
 8009fba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009fc4:	e7f7      	b.n	8009fb6 <_Balloc+0x66>
 8009fc6:	bf00      	nop
 8009fc8:	0800d6ec 	.word	0x0800d6ec
 8009fcc:	0800d76c 	.word	0x0800d76c

08009fd0 <_Bfree>:
 8009fd0:	b570      	push	{r4, r5, r6, lr}
 8009fd2:	69c6      	ldr	r6, [r0, #28]
 8009fd4:	4605      	mov	r5, r0
 8009fd6:	460c      	mov	r4, r1
 8009fd8:	b976      	cbnz	r6, 8009ff8 <_Bfree+0x28>
 8009fda:	2010      	movs	r0, #16
 8009fdc:	f7ff ff02 	bl	8009de4 <malloc>
 8009fe0:	4602      	mov	r2, r0
 8009fe2:	61e8      	str	r0, [r5, #28]
 8009fe4:	b920      	cbnz	r0, 8009ff0 <_Bfree+0x20>
 8009fe6:	4b09      	ldr	r3, [pc, #36]	@ (800a00c <_Bfree+0x3c>)
 8009fe8:	4809      	ldr	r0, [pc, #36]	@ (800a010 <_Bfree+0x40>)
 8009fea:	218f      	movs	r1, #143	@ 0x8f
 8009fec:	f002 f8b8 	bl	800c160 <__assert_func>
 8009ff0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009ff4:	6006      	str	r6, [r0, #0]
 8009ff6:	60c6      	str	r6, [r0, #12]
 8009ff8:	b13c      	cbz	r4, 800a00a <_Bfree+0x3a>
 8009ffa:	69eb      	ldr	r3, [r5, #28]
 8009ffc:	6862      	ldr	r2, [r4, #4]
 8009ffe:	68db      	ldr	r3, [r3, #12]
 800a000:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a004:	6021      	str	r1, [r4, #0]
 800a006:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a00a:	bd70      	pop	{r4, r5, r6, pc}
 800a00c:	0800d6ec 	.word	0x0800d6ec
 800a010:	0800d76c 	.word	0x0800d76c

0800a014 <__multadd>:
 800a014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a018:	690d      	ldr	r5, [r1, #16]
 800a01a:	4607      	mov	r7, r0
 800a01c:	460c      	mov	r4, r1
 800a01e:	461e      	mov	r6, r3
 800a020:	f101 0c14 	add.w	ip, r1, #20
 800a024:	2000      	movs	r0, #0
 800a026:	f8dc 3000 	ldr.w	r3, [ip]
 800a02a:	b299      	uxth	r1, r3
 800a02c:	fb02 6101 	mla	r1, r2, r1, r6
 800a030:	0c1e      	lsrs	r6, r3, #16
 800a032:	0c0b      	lsrs	r3, r1, #16
 800a034:	fb02 3306 	mla	r3, r2, r6, r3
 800a038:	b289      	uxth	r1, r1
 800a03a:	3001      	adds	r0, #1
 800a03c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a040:	4285      	cmp	r5, r0
 800a042:	f84c 1b04 	str.w	r1, [ip], #4
 800a046:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a04a:	dcec      	bgt.n	800a026 <__multadd+0x12>
 800a04c:	b30e      	cbz	r6, 800a092 <__multadd+0x7e>
 800a04e:	68a3      	ldr	r3, [r4, #8]
 800a050:	42ab      	cmp	r3, r5
 800a052:	dc19      	bgt.n	800a088 <__multadd+0x74>
 800a054:	6861      	ldr	r1, [r4, #4]
 800a056:	4638      	mov	r0, r7
 800a058:	3101      	adds	r1, #1
 800a05a:	f7ff ff79 	bl	8009f50 <_Balloc>
 800a05e:	4680      	mov	r8, r0
 800a060:	b928      	cbnz	r0, 800a06e <__multadd+0x5a>
 800a062:	4602      	mov	r2, r0
 800a064:	4b0c      	ldr	r3, [pc, #48]	@ (800a098 <__multadd+0x84>)
 800a066:	480d      	ldr	r0, [pc, #52]	@ (800a09c <__multadd+0x88>)
 800a068:	21ba      	movs	r1, #186	@ 0xba
 800a06a:	f002 f879 	bl	800c160 <__assert_func>
 800a06e:	6922      	ldr	r2, [r4, #16]
 800a070:	3202      	adds	r2, #2
 800a072:	f104 010c 	add.w	r1, r4, #12
 800a076:	0092      	lsls	r2, r2, #2
 800a078:	300c      	adds	r0, #12
 800a07a:	f7fe fffc 	bl	8009076 <memcpy>
 800a07e:	4621      	mov	r1, r4
 800a080:	4638      	mov	r0, r7
 800a082:	f7ff ffa5 	bl	8009fd0 <_Bfree>
 800a086:	4644      	mov	r4, r8
 800a088:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a08c:	3501      	adds	r5, #1
 800a08e:	615e      	str	r6, [r3, #20]
 800a090:	6125      	str	r5, [r4, #16]
 800a092:	4620      	mov	r0, r4
 800a094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a098:	0800d75b 	.word	0x0800d75b
 800a09c:	0800d76c 	.word	0x0800d76c

0800a0a0 <__s2b>:
 800a0a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0a4:	460c      	mov	r4, r1
 800a0a6:	4615      	mov	r5, r2
 800a0a8:	461f      	mov	r7, r3
 800a0aa:	2209      	movs	r2, #9
 800a0ac:	3308      	adds	r3, #8
 800a0ae:	4606      	mov	r6, r0
 800a0b0:	fb93 f3f2 	sdiv	r3, r3, r2
 800a0b4:	2100      	movs	r1, #0
 800a0b6:	2201      	movs	r2, #1
 800a0b8:	429a      	cmp	r2, r3
 800a0ba:	db09      	blt.n	800a0d0 <__s2b+0x30>
 800a0bc:	4630      	mov	r0, r6
 800a0be:	f7ff ff47 	bl	8009f50 <_Balloc>
 800a0c2:	b940      	cbnz	r0, 800a0d6 <__s2b+0x36>
 800a0c4:	4602      	mov	r2, r0
 800a0c6:	4b19      	ldr	r3, [pc, #100]	@ (800a12c <__s2b+0x8c>)
 800a0c8:	4819      	ldr	r0, [pc, #100]	@ (800a130 <__s2b+0x90>)
 800a0ca:	21d3      	movs	r1, #211	@ 0xd3
 800a0cc:	f002 f848 	bl	800c160 <__assert_func>
 800a0d0:	0052      	lsls	r2, r2, #1
 800a0d2:	3101      	adds	r1, #1
 800a0d4:	e7f0      	b.n	800a0b8 <__s2b+0x18>
 800a0d6:	9b08      	ldr	r3, [sp, #32]
 800a0d8:	6143      	str	r3, [r0, #20]
 800a0da:	2d09      	cmp	r5, #9
 800a0dc:	f04f 0301 	mov.w	r3, #1
 800a0e0:	6103      	str	r3, [r0, #16]
 800a0e2:	dd16      	ble.n	800a112 <__s2b+0x72>
 800a0e4:	f104 0909 	add.w	r9, r4, #9
 800a0e8:	46c8      	mov	r8, r9
 800a0ea:	442c      	add	r4, r5
 800a0ec:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a0f0:	4601      	mov	r1, r0
 800a0f2:	3b30      	subs	r3, #48	@ 0x30
 800a0f4:	220a      	movs	r2, #10
 800a0f6:	4630      	mov	r0, r6
 800a0f8:	f7ff ff8c 	bl	800a014 <__multadd>
 800a0fc:	45a0      	cmp	r8, r4
 800a0fe:	d1f5      	bne.n	800a0ec <__s2b+0x4c>
 800a100:	f1a5 0408 	sub.w	r4, r5, #8
 800a104:	444c      	add	r4, r9
 800a106:	1b2d      	subs	r5, r5, r4
 800a108:	1963      	adds	r3, r4, r5
 800a10a:	42bb      	cmp	r3, r7
 800a10c:	db04      	blt.n	800a118 <__s2b+0x78>
 800a10e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a112:	340a      	adds	r4, #10
 800a114:	2509      	movs	r5, #9
 800a116:	e7f6      	b.n	800a106 <__s2b+0x66>
 800a118:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a11c:	4601      	mov	r1, r0
 800a11e:	3b30      	subs	r3, #48	@ 0x30
 800a120:	220a      	movs	r2, #10
 800a122:	4630      	mov	r0, r6
 800a124:	f7ff ff76 	bl	800a014 <__multadd>
 800a128:	e7ee      	b.n	800a108 <__s2b+0x68>
 800a12a:	bf00      	nop
 800a12c:	0800d75b 	.word	0x0800d75b
 800a130:	0800d76c 	.word	0x0800d76c

0800a134 <__hi0bits>:
 800a134:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a138:	4603      	mov	r3, r0
 800a13a:	bf36      	itet	cc
 800a13c:	0403      	lslcc	r3, r0, #16
 800a13e:	2000      	movcs	r0, #0
 800a140:	2010      	movcc	r0, #16
 800a142:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a146:	bf3c      	itt	cc
 800a148:	021b      	lslcc	r3, r3, #8
 800a14a:	3008      	addcc	r0, #8
 800a14c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a150:	bf3c      	itt	cc
 800a152:	011b      	lslcc	r3, r3, #4
 800a154:	3004      	addcc	r0, #4
 800a156:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a15a:	bf3c      	itt	cc
 800a15c:	009b      	lslcc	r3, r3, #2
 800a15e:	3002      	addcc	r0, #2
 800a160:	2b00      	cmp	r3, #0
 800a162:	db05      	blt.n	800a170 <__hi0bits+0x3c>
 800a164:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a168:	f100 0001 	add.w	r0, r0, #1
 800a16c:	bf08      	it	eq
 800a16e:	2020      	moveq	r0, #32
 800a170:	4770      	bx	lr

0800a172 <__lo0bits>:
 800a172:	6803      	ldr	r3, [r0, #0]
 800a174:	4602      	mov	r2, r0
 800a176:	f013 0007 	ands.w	r0, r3, #7
 800a17a:	d00b      	beq.n	800a194 <__lo0bits+0x22>
 800a17c:	07d9      	lsls	r1, r3, #31
 800a17e:	d421      	bmi.n	800a1c4 <__lo0bits+0x52>
 800a180:	0798      	lsls	r0, r3, #30
 800a182:	bf49      	itett	mi
 800a184:	085b      	lsrmi	r3, r3, #1
 800a186:	089b      	lsrpl	r3, r3, #2
 800a188:	2001      	movmi	r0, #1
 800a18a:	6013      	strmi	r3, [r2, #0]
 800a18c:	bf5c      	itt	pl
 800a18e:	6013      	strpl	r3, [r2, #0]
 800a190:	2002      	movpl	r0, #2
 800a192:	4770      	bx	lr
 800a194:	b299      	uxth	r1, r3
 800a196:	b909      	cbnz	r1, 800a19c <__lo0bits+0x2a>
 800a198:	0c1b      	lsrs	r3, r3, #16
 800a19a:	2010      	movs	r0, #16
 800a19c:	b2d9      	uxtb	r1, r3
 800a19e:	b909      	cbnz	r1, 800a1a4 <__lo0bits+0x32>
 800a1a0:	3008      	adds	r0, #8
 800a1a2:	0a1b      	lsrs	r3, r3, #8
 800a1a4:	0719      	lsls	r1, r3, #28
 800a1a6:	bf04      	itt	eq
 800a1a8:	091b      	lsreq	r3, r3, #4
 800a1aa:	3004      	addeq	r0, #4
 800a1ac:	0799      	lsls	r1, r3, #30
 800a1ae:	bf04      	itt	eq
 800a1b0:	089b      	lsreq	r3, r3, #2
 800a1b2:	3002      	addeq	r0, #2
 800a1b4:	07d9      	lsls	r1, r3, #31
 800a1b6:	d403      	bmi.n	800a1c0 <__lo0bits+0x4e>
 800a1b8:	085b      	lsrs	r3, r3, #1
 800a1ba:	f100 0001 	add.w	r0, r0, #1
 800a1be:	d003      	beq.n	800a1c8 <__lo0bits+0x56>
 800a1c0:	6013      	str	r3, [r2, #0]
 800a1c2:	4770      	bx	lr
 800a1c4:	2000      	movs	r0, #0
 800a1c6:	4770      	bx	lr
 800a1c8:	2020      	movs	r0, #32
 800a1ca:	4770      	bx	lr

0800a1cc <__i2b>:
 800a1cc:	b510      	push	{r4, lr}
 800a1ce:	460c      	mov	r4, r1
 800a1d0:	2101      	movs	r1, #1
 800a1d2:	f7ff febd 	bl	8009f50 <_Balloc>
 800a1d6:	4602      	mov	r2, r0
 800a1d8:	b928      	cbnz	r0, 800a1e6 <__i2b+0x1a>
 800a1da:	4b05      	ldr	r3, [pc, #20]	@ (800a1f0 <__i2b+0x24>)
 800a1dc:	4805      	ldr	r0, [pc, #20]	@ (800a1f4 <__i2b+0x28>)
 800a1de:	f240 1145 	movw	r1, #325	@ 0x145
 800a1e2:	f001 ffbd 	bl	800c160 <__assert_func>
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	6144      	str	r4, [r0, #20]
 800a1ea:	6103      	str	r3, [r0, #16]
 800a1ec:	bd10      	pop	{r4, pc}
 800a1ee:	bf00      	nop
 800a1f0:	0800d75b 	.word	0x0800d75b
 800a1f4:	0800d76c 	.word	0x0800d76c

0800a1f8 <__multiply>:
 800a1f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1fc:	4617      	mov	r7, r2
 800a1fe:	690a      	ldr	r2, [r1, #16]
 800a200:	693b      	ldr	r3, [r7, #16]
 800a202:	429a      	cmp	r2, r3
 800a204:	bfa8      	it	ge
 800a206:	463b      	movge	r3, r7
 800a208:	4689      	mov	r9, r1
 800a20a:	bfa4      	itt	ge
 800a20c:	460f      	movge	r7, r1
 800a20e:	4699      	movge	r9, r3
 800a210:	693d      	ldr	r5, [r7, #16]
 800a212:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	6879      	ldr	r1, [r7, #4]
 800a21a:	eb05 060a 	add.w	r6, r5, sl
 800a21e:	42b3      	cmp	r3, r6
 800a220:	b085      	sub	sp, #20
 800a222:	bfb8      	it	lt
 800a224:	3101      	addlt	r1, #1
 800a226:	f7ff fe93 	bl	8009f50 <_Balloc>
 800a22a:	b930      	cbnz	r0, 800a23a <__multiply+0x42>
 800a22c:	4602      	mov	r2, r0
 800a22e:	4b41      	ldr	r3, [pc, #260]	@ (800a334 <__multiply+0x13c>)
 800a230:	4841      	ldr	r0, [pc, #260]	@ (800a338 <__multiply+0x140>)
 800a232:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a236:	f001 ff93 	bl	800c160 <__assert_func>
 800a23a:	f100 0414 	add.w	r4, r0, #20
 800a23e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a242:	4623      	mov	r3, r4
 800a244:	2200      	movs	r2, #0
 800a246:	4573      	cmp	r3, lr
 800a248:	d320      	bcc.n	800a28c <__multiply+0x94>
 800a24a:	f107 0814 	add.w	r8, r7, #20
 800a24e:	f109 0114 	add.w	r1, r9, #20
 800a252:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a256:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a25a:	9302      	str	r3, [sp, #8]
 800a25c:	1beb      	subs	r3, r5, r7
 800a25e:	3b15      	subs	r3, #21
 800a260:	f023 0303 	bic.w	r3, r3, #3
 800a264:	3304      	adds	r3, #4
 800a266:	3715      	adds	r7, #21
 800a268:	42bd      	cmp	r5, r7
 800a26a:	bf38      	it	cc
 800a26c:	2304      	movcc	r3, #4
 800a26e:	9301      	str	r3, [sp, #4]
 800a270:	9b02      	ldr	r3, [sp, #8]
 800a272:	9103      	str	r1, [sp, #12]
 800a274:	428b      	cmp	r3, r1
 800a276:	d80c      	bhi.n	800a292 <__multiply+0x9a>
 800a278:	2e00      	cmp	r6, #0
 800a27a:	dd03      	ble.n	800a284 <__multiply+0x8c>
 800a27c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a280:	2b00      	cmp	r3, #0
 800a282:	d055      	beq.n	800a330 <__multiply+0x138>
 800a284:	6106      	str	r6, [r0, #16]
 800a286:	b005      	add	sp, #20
 800a288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a28c:	f843 2b04 	str.w	r2, [r3], #4
 800a290:	e7d9      	b.n	800a246 <__multiply+0x4e>
 800a292:	f8b1 a000 	ldrh.w	sl, [r1]
 800a296:	f1ba 0f00 	cmp.w	sl, #0
 800a29a:	d01f      	beq.n	800a2dc <__multiply+0xe4>
 800a29c:	46c4      	mov	ip, r8
 800a29e:	46a1      	mov	r9, r4
 800a2a0:	2700      	movs	r7, #0
 800a2a2:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a2a6:	f8d9 3000 	ldr.w	r3, [r9]
 800a2aa:	fa1f fb82 	uxth.w	fp, r2
 800a2ae:	b29b      	uxth	r3, r3
 800a2b0:	fb0a 330b 	mla	r3, sl, fp, r3
 800a2b4:	443b      	add	r3, r7
 800a2b6:	f8d9 7000 	ldr.w	r7, [r9]
 800a2ba:	0c12      	lsrs	r2, r2, #16
 800a2bc:	0c3f      	lsrs	r7, r7, #16
 800a2be:	fb0a 7202 	mla	r2, sl, r2, r7
 800a2c2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a2c6:	b29b      	uxth	r3, r3
 800a2c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a2cc:	4565      	cmp	r5, ip
 800a2ce:	f849 3b04 	str.w	r3, [r9], #4
 800a2d2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a2d6:	d8e4      	bhi.n	800a2a2 <__multiply+0xaa>
 800a2d8:	9b01      	ldr	r3, [sp, #4]
 800a2da:	50e7      	str	r7, [r4, r3]
 800a2dc:	9b03      	ldr	r3, [sp, #12]
 800a2de:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a2e2:	3104      	adds	r1, #4
 800a2e4:	f1b9 0f00 	cmp.w	r9, #0
 800a2e8:	d020      	beq.n	800a32c <__multiply+0x134>
 800a2ea:	6823      	ldr	r3, [r4, #0]
 800a2ec:	4647      	mov	r7, r8
 800a2ee:	46a4      	mov	ip, r4
 800a2f0:	f04f 0a00 	mov.w	sl, #0
 800a2f4:	f8b7 b000 	ldrh.w	fp, [r7]
 800a2f8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a2fc:	fb09 220b 	mla	r2, r9, fp, r2
 800a300:	4452      	add	r2, sl
 800a302:	b29b      	uxth	r3, r3
 800a304:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a308:	f84c 3b04 	str.w	r3, [ip], #4
 800a30c:	f857 3b04 	ldr.w	r3, [r7], #4
 800a310:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a314:	f8bc 3000 	ldrh.w	r3, [ip]
 800a318:	fb09 330a 	mla	r3, r9, sl, r3
 800a31c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a320:	42bd      	cmp	r5, r7
 800a322:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a326:	d8e5      	bhi.n	800a2f4 <__multiply+0xfc>
 800a328:	9a01      	ldr	r2, [sp, #4]
 800a32a:	50a3      	str	r3, [r4, r2]
 800a32c:	3404      	adds	r4, #4
 800a32e:	e79f      	b.n	800a270 <__multiply+0x78>
 800a330:	3e01      	subs	r6, #1
 800a332:	e7a1      	b.n	800a278 <__multiply+0x80>
 800a334:	0800d75b 	.word	0x0800d75b
 800a338:	0800d76c 	.word	0x0800d76c

0800a33c <__pow5mult>:
 800a33c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a340:	4615      	mov	r5, r2
 800a342:	f012 0203 	ands.w	r2, r2, #3
 800a346:	4607      	mov	r7, r0
 800a348:	460e      	mov	r6, r1
 800a34a:	d007      	beq.n	800a35c <__pow5mult+0x20>
 800a34c:	4c25      	ldr	r4, [pc, #148]	@ (800a3e4 <__pow5mult+0xa8>)
 800a34e:	3a01      	subs	r2, #1
 800a350:	2300      	movs	r3, #0
 800a352:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a356:	f7ff fe5d 	bl	800a014 <__multadd>
 800a35a:	4606      	mov	r6, r0
 800a35c:	10ad      	asrs	r5, r5, #2
 800a35e:	d03d      	beq.n	800a3dc <__pow5mult+0xa0>
 800a360:	69fc      	ldr	r4, [r7, #28]
 800a362:	b97c      	cbnz	r4, 800a384 <__pow5mult+0x48>
 800a364:	2010      	movs	r0, #16
 800a366:	f7ff fd3d 	bl	8009de4 <malloc>
 800a36a:	4602      	mov	r2, r0
 800a36c:	61f8      	str	r0, [r7, #28]
 800a36e:	b928      	cbnz	r0, 800a37c <__pow5mult+0x40>
 800a370:	4b1d      	ldr	r3, [pc, #116]	@ (800a3e8 <__pow5mult+0xac>)
 800a372:	481e      	ldr	r0, [pc, #120]	@ (800a3ec <__pow5mult+0xb0>)
 800a374:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a378:	f001 fef2 	bl	800c160 <__assert_func>
 800a37c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a380:	6004      	str	r4, [r0, #0]
 800a382:	60c4      	str	r4, [r0, #12]
 800a384:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a388:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a38c:	b94c      	cbnz	r4, 800a3a2 <__pow5mult+0x66>
 800a38e:	f240 2171 	movw	r1, #625	@ 0x271
 800a392:	4638      	mov	r0, r7
 800a394:	f7ff ff1a 	bl	800a1cc <__i2b>
 800a398:	2300      	movs	r3, #0
 800a39a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a39e:	4604      	mov	r4, r0
 800a3a0:	6003      	str	r3, [r0, #0]
 800a3a2:	f04f 0900 	mov.w	r9, #0
 800a3a6:	07eb      	lsls	r3, r5, #31
 800a3a8:	d50a      	bpl.n	800a3c0 <__pow5mult+0x84>
 800a3aa:	4631      	mov	r1, r6
 800a3ac:	4622      	mov	r2, r4
 800a3ae:	4638      	mov	r0, r7
 800a3b0:	f7ff ff22 	bl	800a1f8 <__multiply>
 800a3b4:	4631      	mov	r1, r6
 800a3b6:	4680      	mov	r8, r0
 800a3b8:	4638      	mov	r0, r7
 800a3ba:	f7ff fe09 	bl	8009fd0 <_Bfree>
 800a3be:	4646      	mov	r6, r8
 800a3c0:	106d      	asrs	r5, r5, #1
 800a3c2:	d00b      	beq.n	800a3dc <__pow5mult+0xa0>
 800a3c4:	6820      	ldr	r0, [r4, #0]
 800a3c6:	b938      	cbnz	r0, 800a3d8 <__pow5mult+0x9c>
 800a3c8:	4622      	mov	r2, r4
 800a3ca:	4621      	mov	r1, r4
 800a3cc:	4638      	mov	r0, r7
 800a3ce:	f7ff ff13 	bl	800a1f8 <__multiply>
 800a3d2:	6020      	str	r0, [r4, #0]
 800a3d4:	f8c0 9000 	str.w	r9, [r0]
 800a3d8:	4604      	mov	r4, r0
 800a3da:	e7e4      	b.n	800a3a6 <__pow5mult+0x6a>
 800a3dc:	4630      	mov	r0, r6
 800a3de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3e2:	bf00      	nop
 800a3e4:	0800d898 	.word	0x0800d898
 800a3e8:	0800d6ec 	.word	0x0800d6ec
 800a3ec:	0800d76c 	.word	0x0800d76c

0800a3f0 <__lshift>:
 800a3f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3f4:	460c      	mov	r4, r1
 800a3f6:	6849      	ldr	r1, [r1, #4]
 800a3f8:	6923      	ldr	r3, [r4, #16]
 800a3fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a3fe:	68a3      	ldr	r3, [r4, #8]
 800a400:	4607      	mov	r7, r0
 800a402:	4691      	mov	r9, r2
 800a404:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a408:	f108 0601 	add.w	r6, r8, #1
 800a40c:	42b3      	cmp	r3, r6
 800a40e:	db0b      	blt.n	800a428 <__lshift+0x38>
 800a410:	4638      	mov	r0, r7
 800a412:	f7ff fd9d 	bl	8009f50 <_Balloc>
 800a416:	4605      	mov	r5, r0
 800a418:	b948      	cbnz	r0, 800a42e <__lshift+0x3e>
 800a41a:	4602      	mov	r2, r0
 800a41c:	4b28      	ldr	r3, [pc, #160]	@ (800a4c0 <__lshift+0xd0>)
 800a41e:	4829      	ldr	r0, [pc, #164]	@ (800a4c4 <__lshift+0xd4>)
 800a420:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a424:	f001 fe9c 	bl	800c160 <__assert_func>
 800a428:	3101      	adds	r1, #1
 800a42a:	005b      	lsls	r3, r3, #1
 800a42c:	e7ee      	b.n	800a40c <__lshift+0x1c>
 800a42e:	2300      	movs	r3, #0
 800a430:	f100 0114 	add.w	r1, r0, #20
 800a434:	f100 0210 	add.w	r2, r0, #16
 800a438:	4618      	mov	r0, r3
 800a43a:	4553      	cmp	r3, sl
 800a43c:	db33      	blt.n	800a4a6 <__lshift+0xb6>
 800a43e:	6920      	ldr	r0, [r4, #16]
 800a440:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a444:	f104 0314 	add.w	r3, r4, #20
 800a448:	f019 091f 	ands.w	r9, r9, #31
 800a44c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a450:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a454:	d02b      	beq.n	800a4ae <__lshift+0xbe>
 800a456:	f1c9 0e20 	rsb	lr, r9, #32
 800a45a:	468a      	mov	sl, r1
 800a45c:	2200      	movs	r2, #0
 800a45e:	6818      	ldr	r0, [r3, #0]
 800a460:	fa00 f009 	lsl.w	r0, r0, r9
 800a464:	4310      	orrs	r0, r2
 800a466:	f84a 0b04 	str.w	r0, [sl], #4
 800a46a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a46e:	459c      	cmp	ip, r3
 800a470:	fa22 f20e 	lsr.w	r2, r2, lr
 800a474:	d8f3      	bhi.n	800a45e <__lshift+0x6e>
 800a476:	ebac 0304 	sub.w	r3, ip, r4
 800a47a:	3b15      	subs	r3, #21
 800a47c:	f023 0303 	bic.w	r3, r3, #3
 800a480:	3304      	adds	r3, #4
 800a482:	f104 0015 	add.w	r0, r4, #21
 800a486:	4560      	cmp	r0, ip
 800a488:	bf88      	it	hi
 800a48a:	2304      	movhi	r3, #4
 800a48c:	50ca      	str	r2, [r1, r3]
 800a48e:	b10a      	cbz	r2, 800a494 <__lshift+0xa4>
 800a490:	f108 0602 	add.w	r6, r8, #2
 800a494:	3e01      	subs	r6, #1
 800a496:	4638      	mov	r0, r7
 800a498:	612e      	str	r6, [r5, #16]
 800a49a:	4621      	mov	r1, r4
 800a49c:	f7ff fd98 	bl	8009fd0 <_Bfree>
 800a4a0:	4628      	mov	r0, r5
 800a4a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4a6:	f842 0f04 	str.w	r0, [r2, #4]!
 800a4aa:	3301      	adds	r3, #1
 800a4ac:	e7c5      	b.n	800a43a <__lshift+0x4a>
 800a4ae:	3904      	subs	r1, #4
 800a4b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4b4:	f841 2f04 	str.w	r2, [r1, #4]!
 800a4b8:	459c      	cmp	ip, r3
 800a4ba:	d8f9      	bhi.n	800a4b0 <__lshift+0xc0>
 800a4bc:	e7ea      	b.n	800a494 <__lshift+0xa4>
 800a4be:	bf00      	nop
 800a4c0:	0800d75b 	.word	0x0800d75b
 800a4c4:	0800d76c 	.word	0x0800d76c

0800a4c8 <__mcmp>:
 800a4c8:	690a      	ldr	r2, [r1, #16]
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	6900      	ldr	r0, [r0, #16]
 800a4ce:	1a80      	subs	r0, r0, r2
 800a4d0:	b530      	push	{r4, r5, lr}
 800a4d2:	d10e      	bne.n	800a4f2 <__mcmp+0x2a>
 800a4d4:	3314      	adds	r3, #20
 800a4d6:	3114      	adds	r1, #20
 800a4d8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a4dc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a4e0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a4e4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a4e8:	4295      	cmp	r5, r2
 800a4ea:	d003      	beq.n	800a4f4 <__mcmp+0x2c>
 800a4ec:	d205      	bcs.n	800a4fa <__mcmp+0x32>
 800a4ee:	f04f 30ff 	mov.w	r0, #4294967295
 800a4f2:	bd30      	pop	{r4, r5, pc}
 800a4f4:	42a3      	cmp	r3, r4
 800a4f6:	d3f3      	bcc.n	800a4e0 <__mcmp+0x18>
 800a4f8:	e7fb      	b.n	800a4f2 <__mcmp+0x2a>
 800a4fa:	2001      	movs	r0, #1
 800a4fc:	e7f9      	b.n	800a4f2 <__mcmp+0x2a>
	...

0800a500 <__mdiff>:
 800a500:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a504:	4689      	mov	r9, r1
 800a506:	4606      	mov	r6, r0
 800a508:	4611      	mov	r1, r2
 800a50a:	4648      	mov	r0, r9
 800a50c:	4614      	mov	r4, r2
 800a50e:	f7ff ffdb 	bl	800a4c8 <__mcmp>
 800a512:	1e05      	subs	r5, r0, #0
 800a514:	d112      	bne.n	800a53c <__mdiff+0x3c>
 800a516:	4629      	mov	r1, r5
 800a518:	4630      	mov	r0, r6
 800a51a:	f7ff fd19 	bl	8009f50 <_Balloc>
 800a51e:	4602      	mov	r2, r0
 800a520:	b928      	cbnz	r0, 800a52e <__mdiff+0x2e>
 800a522:	4b3f      	ldr	r3, [pc, #252]	@ (800a620 <__mdiff+0x120>)
 800a524:	f240 2137 	movw	r1, #567	@ 0x237
 800a528:	483e      	ldr	r0, [pc, #248]	@ (800a624 <__mdiff+0x124>)
 800a52a:	f001 fe19 	bl	800c160 <__assert_func>
 800a52e:	2301      	movs	r3, #1
 800a530:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a534:	4610      	mov	r0, r2
 800a536:	b003      	add	sp, #12
 800a538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a53c:	bfbc      	itt	lt
 800a53e:	464b      	movlt	r3, r9
 800a540:	46a1      	movlt	r9, r4
 800a542:	4630      	mov	r0, r6
 800a544:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a548:	bfba      	itte	lt
 800a54a:	461c      	movlt	r4, r3
 800a54c:	2501      	movlt	r5, #1
 800a54e:	2500      	movge	r5, #0
 800a550:	f7ff fcfe 	bl	8009f50 <_Balloc>
 800a554:	4602      	mov	r2, r0
 800a556:	b918      	cbnz	r0, 800a560 <__mdiff+0x60>
 800a558:	4b31      	ldr	r3, [pc, #196]	@ (800a620 <__mdiff+0x120>)
 800a55a:	f240 2145 	movw	r1, #581	@ 0x245
 800a55e:	e7e3      	b.n	800a528 <__mdiff+0x28>
 800a560:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a564:	6926      	ldr	r6, [r4, #16]
 800a566:	60c5      	str	r5, [r0, #12]
 800a568:	f109 0310 	add.w	r3, r9, #16
 800a56c:	f109 0514 	add.w	r5, r9, #20
 800a570:	f104 0e14 	add.w	lr, r4, #20
 800a574:	f100 0b14 	add.w	fp, r0, #20
 800a578:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a57c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a580:	9301      	str	r3, [sp, #4]
 800a582:	46d9      	mov	r9, fp
 800a584:	f04f 0c00 	mov.w	ip, #0
 800a588:	9b01      	ldr	r3, [sp, #4]
 800a58a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a58e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a592:	9301      	str	r3, [sp, #4]
 800a594:	fa1f f38a 	uxth.w	r3, sl
 800a598:	4619      	mov	r1, r3
 800a59a:	b283      	uxth	r3, r0
 800a59c:	1acb      	subs	r3, r1, r3
 800a59e:	0c00      	lsrs	r0, r0, #16
 800a5a0:	4463      	add	r3, ip
 800a5a2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a5a6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a5aa:	b29b      	uxth	r3, r3
 800a5ac:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a5b0:	4576      	cmp	r6, lr
 800a5b2:	f849 3b04 	str.w	r3, [r9], #4
 800a5b6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a5ba:	d8e5      	bhi.n	800a588 <__mdiff+0x88>
 800a5bc:	1b33      	subs	r3, r6, r4
 800a5be:	3b15      	subs	r3, #21
 800a5c0:	f023 0303 	bic.w	r3, r3, #3
 800a5c4:	3415      	adds	r4, #21
 800a5c6:	3304      	adds	r3, #4
 800a5c8:	42a6      	cmp	r6, r4
 800a5ca:	bf38      	it	cc
 800a5cc:	2304      	movcc	r3, #4
 800a5ce:	441d      	add	r5, r3
 800a5d0:	445b      	add	r3, fp
 800a5d2:	461e      	mov	r6, r3
 800a5d4:	462c      	mov	r4, r5
 800a5d6:	4544      	cmp	r4, r8
 800a5d8:	d30e      	bcc.n	800a5f8 <__mdiff+0xf8>
 800a5da:	f108 0103 	add.w	r1, r8, #3
 800a5de:	1b49      	subs	r1, r1, r5
 800a5e0:	f021 0103 	bic.w	r1, r1, #3
 800a5e4:	3d03      	subs	r5, #3
 800a5e6:	45a8      	cmp	r8, r5
 800a5e8:	bf38      	it	cc
 800a5ea:	2100      	movcc	r1, #0
 800a5ec:	440b      	add	r3, r1
 800a5ee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a5f2:	b191      	cbz	r1, 800a61a <__mdiff+0x11a>
 800a5f4:	6117      	str	r7, [r2, #16]
 800a5f6:	e79d      	b.n	800a534 <__mdiff+0x34>
 800a5f8:	f854 1b04 	ldr.w	r1, [r4], #4
 800a5fc:	46e6      	mov	lr, ip
 800a5fe:	0c08      	lsrs	r0, r1, #16
 800a600:	fa1c fc81 	uxtah	ip, ip, r1
 800a604:	4471      	add	r1, lr
 800a606:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a60a:	b289      	uxth	r1, r1
 800a60c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a610:	f846 1b04 	str.w	r1, [r6], #4
 800a614:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a618:	e7dd      	b.n	800a5d6 <__mdiff+0xd6>
 800a61a:	3f01      	subs	r7, #1
 800a61c:	e7e7      	b.n	800a5ee <__mdiff+0xee>
 800a61e:	bf00      	nop
 800a620:	0800d75b 	.word	0x0800d75b
 800a624:	0800d76c 	.word	0x0800d76c

0800a628 <__ulp>:
 800a628:	b082      	sub	sp, #8
 800a62a:	ed8d 0b00 	vstr	d0, [sp]
 800a62e:	9a01      	ldr	r2, [sp, #4]
 800a630:	4b0f      	ldr	r3, [pc, #60]	@ (800a670 <__ulp+0x48>)
 800a632:	4013      	ands	r3, r2
 800a634:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a638:	2b00      	cmp	r3, #0
 800a63a:	dc08      	bgt.n	800a64e <__ulp+0x26>
 800a63c:	425b      	negs	r3, r3
 800a63e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a642:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a646:	da04      	bge.n	800a652 <__ulp+0x2a>
 800a648:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a64c:	4113      	asrs	r3, r2
 800a64e:	2200      	movs	r2, #0
 800a650:	e008      	b.n	800a664 <__ulp+0x3c>
 800a652:	f1a2 0314 	sub.w	r3, r2, #20
 800a656:	2b1e      	cmp	r3, #30
 800a658:	bfda      	itte	le
 800a65a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a65e:	40da      	lsrle	r2, r3
 800a660:	2201      	movgt	r2, #1
 800a662:	2300      	movs	r3, #0
 800a664:	4619      	mov	r1, r3
 800a666:	4610      	mov	r0, r2
 800a668:	ec41 0b10 	vmov	d0, r0, r1
 800a66c:	b002      	add	sp, #8
 800a66e:	4770      	bx	lr
 800a670:	7ff00000 	.word	0x7ff00000

0800a674 <__b2d>:
 800a674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a678:	6906      	ldr	r6, [r0, #16]
 800a67a:	f100 0814 	add.w	r8, r0, #20
 800a67e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a682:	1f37      	subs	r7, r6, #4
 800a684:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a688:	4610      	mov	r0, r2
 800a68a:	f7ff fd53 	bl	800a134 <__hi0bits>
 800a68e:	f1c0 0320 	rsb	r3, r0, #32
 800a692:	280a      	cmp	r0, #10
 800a694:	600b      	str	r3, [r1, #0]
 800a696:	491b      	ldr	r1, [pc, #108]	@ (800a704 <__b2d+0x90>)
 800a698:	dc15      	bgt.n	800a6c6 <__b2d+0x52>
 800a69a:	f1c0 0c0b 	rsb	ip, r0, #11
 800a69e:	fa22 f30c 	lsr.w	r3, r2, ip
 800a6a2:	45b8      	cmp	r8, r7
 800a6a4:	ea43 0501 	orr.w	r5, r3, r1
 800a6a8:	bf34      	ite	cc
 800a6aa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a6ae:	2300      	movcs	r3, #0
 800a6b0:	3015      	adds	r0, #21
 800a6b2:	fa02 f000 	lsl.w	r0, r2, r0
 800a6b6:	fa23 f30c 	lsr.w	r3, r3, ip
 800a6ba:	4303      	orrs	r3, r0
 800a6bc:	461c      	mov	r4, r3
 800a6be:	ec45 4b10 	vmov	d0, r4, r5
 800a6c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6c6:	45b8      	cmp	r8, r7
 800a6c8:	bf3a      	itte	cc
 800a6ca:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a6ce:	f1a6 0708 	subcc.w	r7, r6, #8
 800a6d2:	2300      	movcs	r3, #0
 800a6d4:	380b      	subs	r0, #11
 800a6d6:	d012      	beq.n	800a6fe <__b2d+0x8a>
 800a6d8:	f1c0 0120 	rsb	r1, r0, #32
 800a6dc:	fa23 f401 	lsr.w	r4, r3, r1
 800a6e0:	4082      	lsls	r2, r0
 800a6e2:	4322      	orrs	r2, r4
 800a6e4:	4547      	cmp	r7, r8
 800a6e6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a6ea:	bf8c      	ite	hi
 800a6ec:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a6f0:	2200      	movls	r2, #0
 800a6f2:	4083      	lsls	r3, r0
 800a6f4:	40ca      	lsrs	r2, r1
 800a6f6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a6fa:	4313      	orrs	r3, r2
 800a6fc:	e7de      	b.n	800a6bc <__b2d+0x48>
 800a6fe:	ea42 0501 	orr.w	r5, r2, r1
 800a702:	e7db      	b.n	800a6bc <__b2d+0x48>
 800a704:	3ff00000 	.word	0x3ff00000

0800a708 <__d2b>:
 800a708:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a70c:	460f      	mov	r7, r1
 800a70e:	2101      	movs	r1, #1
 800a710:	ec59 8b10 	vmov	r8, r9, d0
 800a714:	4616      	mov	r6, r2
 800a716:	f7ff fc1b 	bl	8009f50 <_Balloc>
 800a71a:	4604      	mov	r4, r0
 800a71c:	b930      	cbnz	r0, 800a72c <__d2b+0x24>
 800a71e:	4602      	mov	r2, r0
 800a720:	4b23      	ldr	r3, [pc, #140]	@ (800a7b0 <__d2b+0xa8>)
 800a722:	4824      	ldr	r0, [pc, #144]	@ (800a7b4 <__d2b+0xac>)
 800a724:	f240 310f 	movw	r1, #783	@ 0x30f
 800a728:	f001 fd1a 	bl	800c160 <__assert_func>
 800a72c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a730:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a734:	b10d      	cbz	r5, 800a73a <__d2b+0x32>
 800a736:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a73a:	9301      	str	r3, [sp, #4]
 800a73c:	f1b8 0300 	subs.w	r3, r8, #0
 800a740:	d023      	beq.n	800a78a <__d2b+0x82>
 800a742:	4668      	mov	r0, sp
 800a744:	9300      	str	r3, [sp, #0]
 800a746:	f7ff fd14 	bl	800a172 <__lo0bits>
 800a74a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a74e:	b1d0      	cbz	r0, 800a786 <__d2b+0x7e>
 800a750:	f1c0 0320 	rsb	r3, r0, #32
 800a754:	fa02 f303 	lsl.w	r3, r2, r3
 800a758:	430b      	orrs	r3, r1
 800a75a:	40c2      	lsrs	r2, r0
 800a75c:	6163      	str	r3, [r4, #20]
 800a75e:	9201      	str	r2, [sp, #4]
 800a760:	9b01      	ldr	r3, [sp, #4]
 800a762:	61a3      	str	r3, [r4, #24]
 800a764:	2b00      	cmp	r3, #0
 800a766:	bf0c      	ite	eq
 800a768:	2201      	moveq	r2, #1
 800a76a:	2202      	movne	r2, #2
 800a76c:	6122      	str	r2, [r4, #16]
 800a76e:	b1a5      	cbz	r5, 800a79a <__d2b+0x92>
 800a770:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a774:	4405      	add	r5, r0
 800a776:	603d      	str	r5, [r7, #0]
 800a778:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a77c:	6030      	str	r0, [r6, #0]
 800a77e:	4620      	mov	r0, r4
 800a780:	b003      	add	sp, #12
 800a782:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a786:	6161      	str	r1, [r4, #20]
 800a788:	e7ea      	b.n	800a760 <__d2b+0x58>
 800a78a:	a801      	add	r0, sp, #4
 800a78c:	f7ff fcf1 	bl	800a172 <__lo0bits>
 800a790:	9b01      	ldr	r3, [sp, #4]
 800a792:	6163      	str	r3, [r4, #20]
 800a794:	3020      	adds	r0, #32
 800a796:	2201      	movs	r2, #1
 800a798:	e7e8      	b.n	800a76c <__d2b+0x64>
 800a79a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a79e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a7a2:	6038      	str	r0, [r7, #0]
 800a7a4:	6918      	ldr	r0, [r3, #16]
 800a7a6:	f7ff fcc5 	bl	800a134 <__hi0bits>
 800a7aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a7ae:	e7e5      	b.n	800a77c <__d2b+0x74>
 800a7b0:	0800d75b 	.word	0x0800d75b
 800a7b4:	0800d76c 	.word	0x0800d76c

0800a7b8 <__ratio>:
 800a7b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7bc:	b085      	sub	sp, #20
 800a7be:	e9cd 1000 	strd	r1, r0, [sp]
 800a7c2:	a902      	add	r1, sp, #8
 800a7c4:	f7ff ff56 	bl	800a674 <__b2d>
 800a7c8:	9800      	ldr	r0, [sp, #0]
 800a7ca:	a903      	add	r1, sp, #12
 800a7cc:	ec55 4b10 	vmov	r4, r5, d0
 800a7d0:	f7ff ff50 	bl	800a674 <__b2d>
 800a7d4:	9b01      	ldr	r3, [sp, #4]
 800a7d6:	6919      	ldr	r1, [r3, #16]
 800a7d8:	9b00      	ldr	r3, [sp, #0]
 800a7da:	691b      	ldr	r3, [r3, #16]
 800a7dc:	1ac9      	subs	r1, r1, r3
 800a7de:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a7e2:	1a9b      	subs	r3, r3, r2
 800a7e4:	ec5b ab10 	vmov	sl, fp, d0
 800a7e8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	bfce      	itee	gt
 800a7f0:	462a      	movgt	r2, r5
 800a7f2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a7f6:	465a      	movle	r2, fp
 800a7f8:	462f      	mov	r7, r5
 800a7fa:	46d9      	mov	r9, fp
 800a7fc:	bfcc      	ite	gt
 800a7fe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a802:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a806:	464b      	mov	r3, r9
 800a808:	4652      	mov	r2, sl
 800a80a:	4620      	mov	r0, r4
 800a80c:	4639      	mov	r1, r7
 800a80e:	f7f6 f81d 	bl	800084c <__aeabi_ddiv>
 800a812:	ec41 0b10 	vmov	d0, r0, r1
 800a816:	b005      	add	sp, #20
 800a818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a81c <__copybits>:
 800a81c:	3901      	subs	r1, #1
 800a81e:	b570      	push	{r4, r5, r6, lr}
 800a820:	1149      	asrs	r1, r1, #5
 800a822:	6914      	ldr	r4, [r2, #16]
 800a824:	3101      	adds	r1, #1
 800a826:	f102 0314 	add.w	r3, r2, #20
 800a82a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a82e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a832:	1f05      	subs	r5, r0, #4
 800a834:	42a3      	cmp	r3, r4
 800a836:	d30c      	bcc.n	800a852 <__copybits+0x36>
 800a838:	1aa3      	subs	r3, r4, r2
 800a83a:	3b11      	subs	r3, #17
 800a83c:	f023 0303 	bic.w	r3, r3, #3
 800a840:	3211      	adds	r2, #17
 800a842:	42a2      	cmp	r2, r4
 800a844:	bf88      	it	hi
 800a846:	2300      	movhi	r3, #0
 800a848:	4418      	add	r0, r3
 800a84a:	2300      	movs	r3, #0
 800a84c:	4288      	cmp	r0, r1
 800a84e:	d305      	bcc.n	800a85c <__copybits+0x40>
 800a850:	bd70      	pop	{r4, r5, r6, pc}
 800a852:	f853 6b04 	ldr.w	r6, [r3], #4
 800a856:	f845 6f04 	str.w	r6, [r5, #4]!
 800a85a:	e7eb      	b.n	800a834 <__copybits+0x18>
 800a85c:	f840 3b04 	str.w	r3, [r0], #4
 800a860:	e7f4      	b.n	800a84c <__copybits+0x30>

0800a862 <__any_on>:
 800a862:	f100 0214 	add.w	r2, r0, #20
 800a866:	6900      	ldr	r0, [r0, #16]
 800a868:	114b      	asrs	r3, r1, #5
 800a86a:	4298      	cmp	r0, r3
 800a86c:	b510      	push	{r4, lr}
 800a86e:	db11      	blt.n	800a894 <__any_on+0x32>
 800a870:	dd0a      	ble.n	800a888 <__any_on+0x26>
 800a872:	f011 011f 	ands.w	r1, r1, #31
 800a876:	d007      	beq.n	800a888 <__any_on+0x26>
 800a878:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a87c:	fa24 f001 	lsr.w	r0, r4, r1
 800a880:	fa00 f101 	lsl.w	r1, r0, r1
 800a884:	428c      	cmp	r4, r1
 800a886:	d10b      	bne.n	800a8a0 <__any_on+0x3e>
 800a888:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a88c:	4293      	cmp	r3, r2
 800a88e:	d803      	bhi.n	800a898 <__any_on+0x36>
 800a890:	2000      	movs	r0, #0
 800a892:	bd10      	pop	{r4, pc}
 800a894:	4603      	mov	r3, r0
 800a896:	e7f7      	b.n	800a888 <__any_on+0x26>
 800a898:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a89c:	2900      	cmp	r1, #0
 800a89e:	d0f5      	beq.n	800a88c <__any_on+0x2a>
 800a8a0:	2001      	movs	r0, #1
 800a8a2:	e7f6      	b.n	800a892 <__any_on+0x30>

0800a8a4 <sulp>:
 800a8a4:	b570      	push	{r4, r5, r6, lr}
 800a8a6:	4604      	mov	r4, r0
 800a8a8:	460d      	mov	r5, r1
 800a8aa:	ec45 4b10 	vmov	d0, r4, r5
 800a8ae:	4616      	mov	r6, r2
 800a8b0:	f7ff feba 	bl	800a628 <__ulp>
 800a8b4:	ec51 0b10 	vmov	r0, r1, d0
 800a8b8:	b17e      	cbz	r6, 800a8da <sulp+0x36>
 800a8ba:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a8be:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	dd09      	ble.n	800a8da <sulp+0x36>
 800a8c6:	051b      	lsls	r3, r3, #20
 800a8c8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800a8cc:	2400      	movs	r4, #0
 800a8ce:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800a8d2:	4622      	mov	r2, r4
 800a8d4:	462b      	mov	r3, r5
 800a8d6:	f7f5 fe8f 	bl	80005f8 <__aeabi_dmul>
 800a8da:	ec41 0b10 	vmov	d0, r0, r1
 800a8de:	bd70      	pop	{r4, r5, r6, pc}

0800a8e0 <_strtod_l>:
 800a8e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8e4:	b09f      	sub	sp, #124	@ 0x7c
 800a8e6:	460c      	mov	r4, r1
 800a8e8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	921a      	str	r2, [sp, #104]	@ 0x68
 800a8ee:	9005      	str	r0, [sp, #20]
 800a8f0:	f04f 0a00 	mov.w	sl, #0
 800a8f4:	f04f 0b00 	mov.w	fp, #0
 800a8f8:	460a      	mov	r2, r1
 800a8fa:	9219      	str	r2, [sp, #100]	@ 0x64
 800a8fc:	7811      	ldrb	r1, [r2, #0]
 800a8fe:	292b      	cmp	r1, #43	@ 0x2b
 800a900:	d04a      	beq.n	800a998 <_strtod_l+0xb8>
 800a902:	d838      	bhi.n	800a976 <_strtod_l+0x96>
 800a904:	290d      	cmp	r1, #13
 800a906:	d832      	bhi.n	800a96e <_strtod_l+0x8e>
 800a908:	2908      	cmp	r1, #8
 800a90a:	d832      	bhi.n	800a972 <_strtod_l+0x92>
 800a90c:	2900      	cmp	r1, #0
 800a90e:	d03b      	beq.n	800a988 <_strtod_l+0xa8>
 800a910:	2200      	movs	r2, #0
 800a912:	920e      	str	r2, [sp, #56]	@ 0x38
 800a914:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800a916:	782a      	ldrb	r2, [r5, #0]
 800a918:	2a30      	cmp	r2, #48	@ 0x30
 800a91a:	f040 80b2 	bne.w	800aa82 <_strtod_l+0x1a2>
 800a91e:	786a      	ldrb	r2, [r5, #1]
 800a920:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a924:	2a58      	cmp	r2, #88	@ 0x58
 800a926:	d16e      	bne.n	800aa06 <_strtod_l+0x126>
 800a928:	9302      	str	r3, [sp, #8]
 800a92a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a92c:	9301      	str	r3, [sp, #4]
 800a92e:	ab1a      	add	r3, sp, #104	@ 0x68
 800a930:	9300      	str	r3, [sp, #0]
 800a932:	4a8f      	ldr	r2, [pc, #572]	@ (800ab70 <_strtod_l+0x290>)
 800a934:	9805      	ldr	r0, [sp, #20]
 800a936:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a938:	a919      	add	r1, sp, #100	@ 0x64
 800a93a:	f001 fcab 	bl	800c294 <__gethex>
 800a93e:	f010 060f 	ands.w	r6, r0, #15
 800a942:	4604      	mov	r4, r0
 800a944:	d005      	beq.n	800a952 <_strtod_l+0x72>
 800a946:	2e06      	cmp	r6, #6
 800a948:	d128      	bne.n	800a99c <_strtod_l+0xbc>
 800a94a:	3501      	adds	r5, #1
 800a94c:	2300      	movs	r3, #0
 800a94e:	9519      	str	r5, [sp, #100]	@ 0x64
 800a950:	930e      	str	r3, [sp, #56]	@ 0x38
 800a952:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a954:	2b00      	cmp	r3, #0
 800a956:	f040 858e 	bne.w	800b476 <_strtod_l+0xb96>
 800a95a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a95c:	b1cb      	cbz	r3, 800a992 <_strtod_l+0xb2>
 800a95e:	4652      	mov	r2, sl
 800a960:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800a964:	ec43 2b10 	vmov	d0, r2, r3
 800a968:	b01f      	add	sp, #124	@ 0x7c
 800a96a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a96e:	2920      	cmp	r1, #32
 800a970:	d1ce      	bne.n	800a910 <_strtod_l+0x30>
 800a972:	3201      	adds	r2, #1
 800a974:	e7c1      	b.n	800a8fa <_strtod_l+0x1a>
 800a976:	292d      	cmp	r1, #45	@ 0x2d
 800a978:	d1ca      	bne.n	800a910 <_strtod_l+0x30>
 800a97a:	2101      	movs	r1, #1
 800a97c:	910e      	str	r1, [sp, #56]	@ 0x38
 800a97e:	1c51      	adds	r1, r2, #1
 800a980:	9119      	str	r1, [sp, #100]	@ 0x64
 800a982:	7852      	ldrb	r2, [r2, #1]
 800a984:	2a00      	cmp	r2, #0
 800a986:	d1c5      	bne.n	800a914 <_strtod_l+0x34>
 800a988:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a98a:	9419      	str	r4, [sp, #100]	@ 0x64
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	f040 8570 	bne.w	800b472 <_strtod_l+0xb92>
 800a992:	4652      	mov	r2, sl
 800a994:	465b      	mov	r3, fp
 800a996:	e7e5      	b.n	800a964 <_strtod_l+0x84>
 800a998:	2100      	movs	r1, #0
 800a99a:	e7ef      	b.n	800a97c <_strtod_l+0x9c>
 800a99c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a99e:	b13a      	cbz	r2, 800a9b0 <_strtod_l+0xd0>
 800a9a0:	2135      	movs	r1, #53	@ 0x35
 800a9a2:	a81c      	add	r0, sp, #112	@ 0x70
 800a9a4:	f7ff ff3a 	bl	800a81c <__copybits>
 800a9a8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a9aa:	9805      	ldr	r0, [sp, #20]
 800a9ac:	f7ff fb10 	bl	8009fd0 <_Bfree>
 800a9b0:	3e01      	subs	r6, #1
 800a9b2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a9b4:	2e04      	cmp	r6, #4
 800a9b6:	d806      	bhi.n	800a9c6 <_strtod_l+0xe6>
 800a9b8:	e8df f006 	tbb	[pc, r6]
 800a9bc:	201d0314 	.word	0x201d0314
 800a9c0:	14          	.byte	0x14
 800a9c1:	00          	.byte	0x00
 800a9c2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800a9c6:	05e1      	lsls	r1, r4, #23
 800a9c8:	bf48      	it	mi
 800a9ca:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a9ce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a9d2:	0d1b      	lsrs	r3, r3, #20
 800a9d4:	051b      	lsls	r3, r3, #20
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d1bb      	bne.n	800a952 <_strtod_l+0x72>
 800a9da:	f7fe fb1f 	bl	800901c <__errno>
 800a9de:	2322      	movs	r3, #34	@ 0x22
 800a9e0:	6003      	str	r3, [r0, #0]
 800a9e2:	e7b6      	b.n	800a952 <_strtod_l+0x72>
 800a9e4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800a9e8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a9ec:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a9f0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a9f4:	e7e7      	b.n	800a9c6 <_strtod_l+0xe6>
 800a9f6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800ab78 <_strtod_l+0x298>
 800a9fa:	e7e4      	b.n	800a9c6 <_strtod_l+0xe6>
 800a9fc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800aa00:	f04f 3aff 	mov.w	sl, #4294967295
 800aa04:	e7df      	b.n	800a9c6 <_strtod_l+0xe6>
 800aa06:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aa08:	1c5a      	adds	r2, r3, #1
 800aa0a:	9219      	str	r2, [sp, #100]	@ 0x64
 800aa0c:	785b      	ldrb	r3, [r3, #1]
 800aa0e:	2b30      	cmp	r3, #48	@ 0x30
 800aa10:	d0f9      	beq.n	800aa06 <_strtod_l+0x126>
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d09d      	beq.n	800a952 <_strtod_l+0x72>
 800aa16:	2301      	movs	r3, #1
 800aa18:	2700      	movs	r7, #0
 800aa1a:	9308      	str	r3, [sp, #32]
 800aa1c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aa1e:	930c      	str	r3, [sp, #48]	@ 0x30
 800aa20:	970b      	str	r7, [sp, #44]	@ 0x2c
 800aa22:	46b9      	mov	r9, r7
 800aa24:	220a      	movs	r2, #10
 800aa26:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800aa28:	7805      	ldrb	r5, [r0, #0]
 800aa2a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800aa2e:	b2d9      	uxtb	r1, r3
 800aa30:	2909      	cmp	r1, #9
 800aa32:	d928      	bls.n	800aa86 <_strtod_l+0x1a6>
 800aa34:	494f      	ldr	r1, [pc, #316]	@ (800ab74 <_strtod_l+0x294>)
 800aa36:	2201      	movs	r2, #1
 800aa38:	f001 fb67 	bl	800c10a <strncmp>
 800aa3c:	2800      	cmp	r0, #0
 800aa3e:	d032      	beq.n	800aaa6 <_strtod_l+0x1c6>
 800aa40:	2000      	movs	r0, #0
 800aa42:	462a      	mov	r2, r5
 800aa44:	900a      	str	r0, [sp, #40]	@ 0x28
 800aa46:	464d      	mov	r5, r9
 800aa48:	4603      	mov	r3, r0
 800aa4a:	2a65      	cmp	r2, #101	@ 0x65
 800aa4c:	d001      	beq.n	800aa52 <_strtod_l+0x172>
 800aa4e:	2a45      	cmp	r2, #69	@ 0x45
 800aa50:	d114      	bne.n	800aa7c <_strtod_l+0x19c>
 800aa52:	b91d      	cbnz	r5, 800aa5c <_strtod_l+0x17c>
 800aa54:	9a08      	ldr	r2, [sp, #32]
 800aa56:	4302      	orrs	r2, r0
 800aa58:	d096      	beq.n	800a988 <_strtod_l+0xa8>
 800aa5a:	2500      	movs	r5, #0
 800aa5c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800aa5e:	1c62      	adds	r2, r4, #1
 800aa60:	9219      	str	r2, [sp, #100]	@ 0x64
 800aa62:	7862      	ldrb	r2, [r4, #1]
 800aa64:	2a2b      	cmp	r2, #43	@ 0x2b
 800aa66:	d07a      	beq.n	800ab5e <_strtod_l+0x27e>
 800aa68:	2a2d      	cmp	r2, #45	@ 0x2d
 800aa6a:	d07e      	beq.n	800ab6a <_strtod_l+0x28a>
 800aa6c:	f04f 0c00 	mov.w	ip, #0
 800aa70:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800aa74:	2909      	cmp	r1, #9
 800aa76:	f240 8085 	bls.w	800ab84 <_strtod_l+0x2a4>
 800aa7a:	9419      	str	r4, [sp, #100]	@ 0x64
 800aa7c:	f04f 0800 	mov.w	r8, #0
 800aa80:	e0a5      	b.n	800abce <_strtod_l+0x2ee>
 800aa82:	2300      	movs	r3, #0
 800aa84:	e7c8      	b.n	800aa18 <_strtod_l+0x138>
 800aa86:	f1b9 0f08 	cmp.w	r9, #8
 800aa8a:	bfd8      	it	le
 800aa8c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800aa8e:	f100 0001 	add.w	r0, r0, #1
 800aa92:	bfda      	itte	le
 800aa94:	fb02 3301 	mlale	r3, r2, r1, r3
 800aa98:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800aa9a:	fb02 3707 	mlagt	r7, r2, r7, r3
 800aa9e:	f109 0901 	add.w	r9, r9, #1
 800aaa2:	9019      	str	r0, [sp, #100]	@ 0x64
 800aaa4:	e7bf      	b.n	800aa26 <_strtod_l+0x146>
 800aaa6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aaa8:	1c5a      	adds	r2, r3, #1
 800aaaa:	9219      	str	r2, [sp, #100]	@ 0x64
 800aaac:	785a      	ldrb	r2, [r3, #1]
 800aaae:	f1b9 0f00 	cmp.w	r9, #0
 800aab2:	d03b      	beq.n	800ab2c <_strtod_l+0x24c>
 800aab4:	900a      	str	r0, [sp, #40]	@ 0x28
 800aab6:	464d      	mov	r5, r9
 800aab8:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800aabc:	2b09      	cmp	r3, #9
 800aabe:	d912      	bls.n	800aae6 <_strtod_l+0x206>
 800aac0:	2301      	movs	r3, #1
 800aac2:	e7c2      	b.n	800aa4a <_strtod_l+0x16a>
 800aac4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aac6:	1c5a      	adds	r2, r3, #1
 800aac8:	9219      	str	r2, [sp, #100]	@ 0x64
 800aaca:	785a      	ldrb	r2, [r3, #1]
 800aacc:	3001      	adds	r0, #1
 800aace:	2a30      	cmp	r2, #48	@ 0x30
 800aad0:	d0f8      	beq.n	800aac4 <_strtod_l+0x1e4>
 800aad2:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800aad6:	2b08      	cmp	r3, #8
 800aad8:	f200 84d2 	bhi.w	800b480 <_strtod_l+0xba0>
 800aadc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aade:	900a      	str	r0, [sp, #40]	@ 0x28
 800aae0:	2000      	movs	r0, #0
 800aae2:	930c      	str	r3, [sp, #48]	@ 0x30
 800aae4:	4605      	mov	r5, r0
 800aae6:	3a30      	subs	r2, #48	@ 0x30
 800aae8:	f100 0301 	add.w	r3, r0, #1
 800aaec:	d018      	beq.n	800ab20 <_strtod_l+0x240>
 800aaee:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800aaf0:	4419      	add	r1, r3
 800aaf2:	910a      	str	r1, [sp, #40]	@ 0x28
 800aaf4:	462e      	mov	r6, r5
 800aaf6:	f04f 0e0a 	mov.w	lr, #10
 800aafa:	1c71      	adds	r1, r6, #1
 800aafc:	eba1 0c05 	sub.w	ip, r1, r5
 800ab00:	4563      	cmp	r3, ip
 800ab02:	dc15      	bgt.n	800ab30 <_strtod_l+0x250>
 800ab04:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800ab08:	182b      	adds	r3, r5, r0
 800ab0a:	2b08      	cmp	r3, #8
 800ab0c:	f105 0501 	add.w	r5, r5, #1
 800ab10:	4405      	add	r5, r0
 800ab12:	dc1a      	bgt.n	800ab4a <_strtod_l+0x26a>
 800ab14:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ab16:	230a      	movs	r3, #10
 800ab18:	fb03 2301 	mla	r3, r3, r1, r2
 800ab1c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ab1e:	2300      	movs	r3, #0
 800ab20:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ab22:	1c51      	adds	r1, r2, #1
 800ab24:	9119      	str	r1, [sp, #100]	@ 0x64
 800ab26:	7852      	ldrb	r2, [r2, #1]
 800ab28:	4618      	mov	r0, r3
 800ab2a:	e7c5      	b.n	800aab8 <_strtod_l+0x1d8>
 800ab2c:	4648      	mov	r0, r9
 800ab2e:	e7ce      	b.n	800aace <_strtod_l+0x1ee>
 800ab30:	2e08      	cmp	r6, #8
 800ab32:	dc05      	bgt.n	800ab40 <_strtod_l+0x260>
 800ab34:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800ab36:	fb0e f606 	mul.w	r6, lr, r6
 800ab3a:	960b      	str	r6, [sp, #44]	@ 0x2c
 800ab3c:	460e      	mov	r6, r1
 800ab3e:	e7dc      	b.n	800aafa <_strtod_l+0x21a>
 800ab40:	2910      	cmp	r1, #16
 800ab42:	bfd8      	it	le
 800ab44:	fb0e f707 	mulle.w	r7, lr, r7
 800ab48:	e7f8      	b.n	800ab3c <_strtod_l+0x25c>
 800ab4a:	2b0f      	cmp	r3, #15
 800ab4c:	bfdc      	itt	le
 800ab4e:	230a      	movle	r3, #10
 800ab50:	fb03 2707 	mlale	r7, r3, r7, r2
 800ab54:	e7e3      	b.n	800ab1e <_strtod_l+0x23e>
 800ab56:	2300      	movs	r3, #0
 800ab58:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab5a:	2301      	movs	r3, #1
 800ab5c:	e77a      	b.n	800aa54 <_strtod_l+0x174>
 800ab5e:	f04f 0c00 	mov.w	ip, #0
 800ab62:	1ca2      	adds	r2, r4, #2
 800ab64:	9219      	str	r2, [sp, #100]	@ 0x64
 800ab66:	78a2      	ldrb	r2, [r4, #2]
 800ab68:	e782      	b.n	800aa70 <_strtod_l+0x190>
 800ab6a:	f04f 0c01 	mov.w	ip, #1
 800ab6e:	e7f8      	b.n	800ab62 <_strtod_l+0x282>
 800ab70:	0800d9ac 	.word	0x0800d9ac
 800ab74:	0800d7c5 	.word	0x0800d7c5
 800ab78:	7ff00000 	.word	0x7ff00000
 800ab7c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ab7e:	1c51      	adds	r1, r2, #1
 800ab80:	9119      	str	r1, [sp, #100]	@ 0x64
 800ab82:	7852      	ldrb	r2, [r2, #1]
 800ab84:	2a30      	cmp	r2, #48	@ 0x30
 800ab86:	d0f9      	beq.n	800ab7c <_strtod_l+0x29c>
 800ab88:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800ab8c:	2908      	cmp	r1, #8
 800ab8e:	f63f af75 	bhi.w	800aa7c <_strtod_l+0x19c>
 800ab92:	3a30      	subs	r2, #48	@ 0x30
 800ab94:	9209      	str	r2, [sp, #36]	@ 0x24
 800ab96:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ab98:	920f      	str	r2, [sp, #60]	@ 0x3c
 800ab9a:	f04f 080a 	mov.w	r8, #10
 800ab9e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800aba0:	1c56      	adds	r6, r2, #1
 800aba2:	9619      	str	r6, [sp, #100]	@ 0x64
 800aba4:	7852      	ldrb	r2, [r2, #1]
 800aba6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800abaa:	f1be 0f09 	cmp.w	lr, #9
 800abae:	d939      	bls.n	800ac24 <_strtod_l+0x344>
 800abb0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800abb2:	1a76      	subs	r6, r6, r1
 800abb4:	2e08      	cmp	r6, #8
 800abb6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800abba:	dc03      	bgt.n	800abc4 <_strtod_l+0x2e4>
 800abbc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800abbe:	4588      	cmp	r8, r1
 800abc0:	bfa8      	it	ge
 800abc2:	4688      	movge	r8, r1
 800abc4:	f1bc 0f00 	cmp.w	ip, #0
 800abc8:	d001      	beq.n	800abce <_strtod_l+0x2ee>
 800abca:	f1c8 0800 	rsb	r8, r8, #0
 800abce:	2d00      	cmp	r5, #0
 800abd0:	d14e      	bne.n	800ac70 <_strtod_l+0x390>
 800abd2:	9908      	ldr	r1, [sp, #32]
 800abd4:	4308      	orrs	r0, r1
 800abd6:	f47f aebc 	bne.w	800a952 <_strtod_l+0x72>
 800abda:	2b00      	cmp	r3, #0
 800abdc:	f47f aed4 	bne.w	800a988 <_strtod_l+0xa8>
 800abe0:	2a69      	cmp	r2, #105	@ 0x69
 800abe2:	d028      	beq.n	800ac36 <_strtod_l+0x356>
 800abe4:	dc25      	bgt.n	800ac32 <_strtod_l+0x352>
 800abe6:	2a49      	cmp	r2, #73	@ 0x49
 800abe8:	d025      	beq.n	800ac36 <_strtod_l+0x356>
 800abea:	2a4e      	cmp	r2, #78	@ 0x4e
 800abec:	f47f aecc 	bne.w	800a988 <_strtod_l+0xa8>
 800abf0:	499a      	ldr	r1, [pc, #616]	@ (800ae5c <_strtod_l+0x57c>)
 800abf2:	a819      	add	r0, sp, #100	@ 0x64
 800abf4:	f001 fd70 	bl	800c6d8 <__match>
 800abf8:	2800      	cmp	r0, #0
 800abfa:	f43f aec5 	beq.w	800a988 <_strtod_l+0xa8>
 800abfe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ac00:	781b      	ldrb	r3, [r3, #0]
 800ac02:	2b28      	cmp	r3, #40	@ 0x28
 800ac04:	d12e      	bne.n	800ac64 <_strtod_l+0x384>
 800ac06:	4996      	ldr	r1, [pc, #600]	@ (800ae60 <_strtod_l+0x580>)
 800ac08:	aa1c      	add	r2, sp, #112	@ 0x70
 800ac0a:	a819      	add	r0, sp, #100	@ 0x64
 800ac0c:	f001 fd78 	bl	800c700 <__hexnan>
 800ac10:	2805      	cmp	r0, #5
 800ac12:	d127      	bne.n	800ac64 <_strtod_l+0x384>
 800ac14:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ac16:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800ac1a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ac1e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800ac22:	e696      	b.n	800a952 <_strtod_l+0x72>
 800ac24:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ac26:	fb08 2101 	mla	r1, r8, r1, r2
 800ac2a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800ac2e:	9209      	str	r2, [sp, #36]	@ 0x24
 800ac30:	e7b5      	b.n	800ab9e <_strtod_l+0x2be>
 800ac32:	2a6e      	cmp	r2, #110	@ 0x6e
 800ac34:	e7da      	b.n	800abec <_strtod_l+0x30c>
 800ac36:	498b      	ldr	r1, [pc, #556]	@ (800ae64 <_strtod_l+0x584>)
 800ac38:	a819      	add	r0, sp, #100	@ 0x64
 800ac3a:	f001 fd4d 	bl	800c6d8 <__match>
 800ac3e:	2800      	cmp	r0, #0
 800ac40:	f43f aea2 	beq.w	800a988 <_strtod_l+0xa8>
 800ac44:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ac46:	4988      	ldr	r1, [pc, #544]	@ (800ae68 <_strtod_l+0x588>)
 800ac48:	3b01      	subs	r3, #1
 800ac4a:	a819      	add	r0, sp, #100	@ 0x64
 800ac4c:	9319      	str	r3, [sp, #100]	@ 0x64
 800ac4e:	f001 fd43 	bl	800c6d8 <__match>
 800ac52:	b910      	cbnz	r0, 800ac5a <_strtod_l+0x37a>
 800ac54:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ac56:	3301      	adds	r3, #1
 800ac58:	9319      	str	r3, [sp, #100]	@ 0x64
 800ac5a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800ae78 <_strtod_l+0x598>
 800ac5e:	f04f 0a00 	mov.w	sl, #0
 800ac62:	e676      	b.n	800a952 <_strtod_l+0x72>
 800ac64:	4881      	ldr	r0, [pc, #516]	@ (800ae6c <_strtod_l+0x58c>)
 800ac66:	f001 fa73 	bl	800c150 <nan>
 800ac6a:	ec5b ab10 	vmov	sl, fp, d0
 800ac6e:	e670      	b.n	800a952 <_strtod_l+0x72>
 800ac70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ac72:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800ac74:	eba8 0303 	sub.w	r3, r8, r3
 800ac78:	f1b9 0f00 	cmp.w	r9, #0
 800ac7c:	bf08      	it	eq
 800ac7e:	46a9      	moveq	r9, r5
 800ac80:	2d10      	cmp	r5, #16
 800ac82:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac84:	462c      	mov	r4, r5
 800ac86:	bfa8      	it	ge
 800ac88:	2410      	movge	r4, #16
 800ac8a:	f7f5 fc3b 	bl	8000504 <__aeabi_ui2d>
 800ac8e:	2d09      	cmp	r5, #9
 800ac90:	4682      	mov	sl, r0
 800ac92:	468b      	mov	fp, r1
 800ac94:	dc13      	bgt.n	800acbe <_strtod_l+0x3de>
 800ac96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	f43f ae5a 	beq.w	800a952 <_strtod_l+0x72>
 800ac9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aca0:	dd78      	ble.n	800ad94 <_strtod_l+0x4b4>
 800aca2:	2b16      	cmp	r3, #22
 800aca4:	dc5f      	bgt.n	800ad66 <_strtod_l+0x486>
 800aca6:	4972      	ldr	r1, [pc, #456]	@ (800ae70 <_strtod_l+0x590>)
 800aca8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800acac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800acb0:	4652      	mov	r2, sl
 800acb2:	465b      	mov	r3, fp
 800acb4:	f7f5 fca0 	bl	80005f8 <__aeabi_dmul>
 800acb8:	4682      	mov	sl, r0
 800acba:	468b      	mov	fp, r1
 800acbc:	e649      	b.n	800a952 <_strtod_l+0x72>
 800acbe:	4b6c      	ldr	r3, [pc, #432]	@ (800ae70 <_strtod_l+0x590>)
 800acc0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800acc4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800acc8:	f7f5 fc96 	bl	80005f8 <__aeabi_dmul>
 800accc:	4682      	mov	sl, r0
 800acce:	4638      	mov	r0, r7
 800acd0:	468b      	mov	fp, r1
 800acd2:	f7f5 fc17 	bl	8000504 <__aeabi_ui2d>
 800acd6:	4602      	mov	r2, r0
 800acd8:	460b      	mov	r3, r1
 800acda:	4650      	mov	r0, sl
 800acdc:	4659      	mov	r1, fp
 800acde:	f7f5 fad5 	bl	800028c <__adddf3>
 800ace2:	2d0f      	cmp	r5, #15
 800ace4:	4682      	mov	sl, r0
 800ace6:	468b      	mov	fp, r1
 800ace8:	ddd5      	ble.n	800ac96 <_strtod_l+0x3b6>
 800acea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acec:	1b2c      	subs	r4, r5, r4
 800acee:	441c      	add	r4, r3
 800acf0:	2c00      	cmp	r4, #0
 800acf2:	f340 8093 	ble.w	800ae1c <_strtod_l+0x53c>
 800acf6:	f014 030f 	ands.w	r3, r4, #15
 800acfa:	d00a      	beq.n	800ad12 <_strtod_l+0x432>
 800acfc:	495c      	ldr	r1, [pc, #368]	@ (800ae70 <_strtod_l+0x590>)
 800acfe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ad02:	4652      	mov	r2, sl
 800ad04:	465b      	mov	r3, fp
 800ad06:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad0a:	f7f5 fc75 	bl	80005f8 <__aeabi_dmul>
 800ad0e:	4682      	mov	sl, r0
 800ad10:	468b      	mov	fp, r1
 800ad12:	f034 040f 	bics.w	r4, r4, #15
 800ad16:	d073      	beq.n	800ae00 <_strtod_l+0x520>
 800ad18:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800ad1c:	dd49      	ble.n	800adb2 <_strtod_l+0x4d2>
 800ad1e:	2400      	movs	r4, #0
 800ad20:	46a0      	mov	r8, r4
 800ad22:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ad24:	46a1      	mov	r9, r4
 800ad26:	9a05      	ldr	r2, [sp, #20]
 800ad28:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800ae78 <_strtod_l+0x598>
 800ad2c:	2322      	movs	r3, #34	@ 0x22
 800ad2e:	6013      	str	r3, [r2, #0]
 800ad30:	f04f 0a00 	mov.w	sl, #0
 800ad34:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	f43f ae0b 	beq.w	800a952 <_strtod_l+0x72>
 800ad3c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ad3e:	9805      	ldr	r0, [sp, #20]
 800ad40:	f7ff f946 	bl	8009fd0 <_Bfree>
 800ad44:	9805      	ldr	r0, [sp, #20]
 800ad46:	4649      	mov	r1, r9
 800ad48:	f7ff f942 	bl	8009fd0 <_Bfree>
 800ad4c:	9805      	ldr	r0, [sp, #20]
 800ad4e:	4641      	mov	r1, r8
 800ad50:	f7ff f93e 	bl	8009fd0 <_Bfree>
 800ad54:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ad56:	9805      	ldr	r0, [sp, #20]
 800ad58:	f7ff f93a 	bl	8009fd0 <_Bfree>
 800ad5c:	9805      	ldr	r0, [sp, #20]
 800ad5e:	4621      	mov	r1, r4
 800ad60:	f7ff f936 	bl	8009fd0 <_Bfree>
 800ad64:	e5f5      	b.n	800a952 <_strtod_l+0x72>
 800ad66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ad68:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800ad6c:	4293      	cmp	r3, r2
 800ad6e:	dbbc      	blt.n	800acea <_strtod_l+0x40a>
 800ad70:	4c3f      	ldr	r4, [pc, #252]	@ (800ae70 <_strtod_l+0x590>)
 800ad72:	f1c5 050f 	rsb	r5, r5, #15
 800ad76:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ad7a:	4652      	mov	r2, sl
 800ad7c:	465b      	mov	r3, fp
 800ad7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad82:	f7f5 fc39 	bl	80005f8 <__aeabi_dmul>
 800ad86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad88:	1b5d      	subs	r5, r3, r5
 800ad8a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ad8e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ad92:	e78f      	b.n	800acb4 <_strtod_l+0x3d4>
 800ad94:	3316      	adds	r3, #22
 800ad96:	dba8      	blt.n	800acea <_strtod_l+0x40a>
 800ad98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ad9a:	eba3 0808 	sub.w	r8, r3, r8
 800ad9e:	4b34      	ldr	r3, [pc, #208]	@ (800ae70 <_strtod_l+0x590>)
 800ada0:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800ada4:	e9d8 2300 	ldrd	r2, r3, [r8]
 800ada8:	4650      	mov	r0, sl
 800adaa:	4659      	mov	r1, fp
 800adac:	f7f5 fd4e 	bl	800084c <__aeabi_ddiv>
 800adb0:	e782      	b.n	800acb8 <_strtod_l+0x3d8>
 800adb2:	2300      	movs	r3, #0
 800adb4:	4f2f      	ldr	r7, [pc, #188]	@ (800ae74 <_strtod_l+0x594>)
 800adb6:	1124      	asrs	r4, r4, #4
 800adb8:	4650      	mov	r0, sl
 800adba:	4659      	mov	r1, fp
 800adbc:	461e      	mov	r6, r3
 800adbe:	2c01      	cmp	r4, #1
 800adc0:	dc21      	bgt.n	800ae06 <_strtod_l+0x526>
 800adc2:	b10b      	cbz	r3, 800adc8 <_strtod_l+0x4e8>
 800adc4:	4682      	mov	sl, r0
 800adc6:	468b      	mov	fp, r1
 800adc8:	492a      	ldr	r1, [pc, #168]	@ (800ae74 <_strtod_l+0x594>)
 800adca:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800adce:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800add2:	4652      	mov	r2, sl
 800add4:	465b      	mov	r3, fp
 800add6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800adda:	f7f5 fc0d 	bl	80005f8 <__aeabi_dmul>
 800adde:	4b26      	ldr	r3, [pc, #152]	@ (800ae78 <_strtod_l+0x598>)
 800ade0:	460a      	mov	r2, r1
 800ade2:	400b      	ands	r3, r1
 800ade4:	4925      	ldr	r1, [pc, #148]	@ (800ae7c <_strtod_l+0x59c>)
 800ade6:	428b      	cmp	r3, r1
 800ade8:	4682      	mov	sl, r0
 800adea:	d898      	bhi.n	800ad1e <_strtod_l+0x43e>
 800adec:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800adf0:	428b      	cmp	r3, r1
 800adf2:	bf86      	itte	hi
 800adf4:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800ae80 <_strtod_l+0x5a0>
 800adf8:	f04f 3aff 	movhi.w	sl, #4294967295
 800adfc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800ae00:	2300      	movs	r3, #0
 800ae02:	9308      	str	r3, [sp, #32]
 800ae04:	e076      	b.n	800aef4 <_strtod_l+0x614>
 800ae06:	07e2      	lsls	r2, r4, #31
 800ae08:	d504      	bpl.n	800ae14 <_strtod_l+0x534>
 800ae0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae0e:	f7f5 fbf3 	bl	80005f8 <__aeabi_dmul>
 800ae12:	2301      	movs	r3, #1
 800ae14:	3601      	adds	r6, #1
 800ae16:	1064      	asrs	r4, r4, #1
 800ae18:	3708      	adds	r7, #8
 800ae1a:	e7d0      	b.n	800adbe <_strtod_l+0x4de>
 800ae1c:	d0f0      	beq.n	800ae00 <_strtod_l+0x520>
 800ae1e:	4264      	negs	r4, r4
 800ae20:	f014 020f 	ands.w	r2, r4, #15
 800ae24:	d00a      	beq.n	800ae3c <_strtod_l+0x55c>
 800ae26:	4b12      	ldr	r3, [pc, #72]	@ (800ae70 <_strtod_l+0x590>)
 800ae28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ae2c:	4650      	mov	r0, sl
 800ae2e:	4659      	mov	r1, fp
 800ae30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae34:	f7f5 fd0a 	bl	800084c <__aeabi_ddiv>
 800ae38:	4682      	mov	sl, r0
 800ae3a:	468b      	mov	fp, r1
 800ae3c:	1124      	asrs	r4, r4, #4
 800ae3e:	d0df      	beq.n	800ae00 <_strtod_l+0x520>
 800ae40:	2c1f      	cmp	r4, #31
 800ae42:	dd1f      	ble.n	800ae84 <_strtod_l+0x5a4>
 800ae44:	2400      	movs	r4, #0
 800ae46:	46a0      	mov	r8, r4
 800ae48:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ae4a:	46a1      	mov	r9, r4
 800ae4c:	9a05      	ldr	r2, [sp, #20]
 800ae4e:	2322      	movs	r3, #34	@ 0x22
 800ae50:	f04f 0a00 	mov.w	sl, #0
 800ae54:	f04f 0b00 	mov.w	fp, #0
 800ae58:	6013      	str	r3, [r2, #0]
 800ae5a:	e76b      	b.n	800ad34 <_strtod_l+0x454>
 800ae5c:	0800d6b5 	.word	0x0800d6b5
 800ae60:	0800d998 	.word	0x0800d998
 800ae64:	0800d6ad 	.word	0x0800d6ad
 800ae68:	0800d6e2 	.word	0x0800d6e2
 800ae6c:	0800d836 	.word	0x0800d836
 800ae70:	0800d8d0 	.word	0x0800d8d0
 800ae74:	0800d8a8 	.word	0x0800d8a8
 800ae78:	7ff00000 	.word	0x7ff00000
 800ae7c:	7ca00000 	.word	0x7ca00000
 800ae80:	7fefffff 	.word	0x7fefffff
 800ae84:	f014 0310 	ands.w	r3, r4, #16
 800ae88:	bf18      	it	ne
 800ae8a:	236a      	movne	r3, #106	@ 0x6a
 800ae8c:	4ea9      	ldr	r6, [pc, #676]	@ (800b134 <_strtod_l+0x854>)
 800ae8e:	9308      	str	r3, [sp, #32]
 800ae90:	4650      	mov	r0, sl
 800ae92:	4659      	mov	r1, fp
 800ae94:	2300      	movs	r3, #0
 800ae96:	07e7      	lsls	r7, r4, #31
 800ae98:	d504      	bpl.n	800aea4 <_strtod_l+0x5c4>
 800ae9a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ae9e:	f7f5 fbab 	bl	80005f8 <__aeabi_dmul>
 800aea2:	2301      	movs	r3, #1
 800aea4:	1064      	asrs	r4, r4, #1
 800aea6:	f106 0608 	add.w	r6, r6, #8
 800aeaa:	d1f4      	bne.n	800ae96 <_strtod_l+0x5b6>
 800aeac:	b10b      	cbz	r3, 800aeb2 <_strtod_l+0x5d2>
 800aeae:	4682      	mov	sl, r0
 800aeb0:	468b      	mov	fp, r1
 800aeb2:	9b08      	ldr	r3, [sp, #32]
 800aeb4:	b1b3      	cbz	r3, 800aee4 <_strtod_l+0x604>
 800aeb6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800aeba:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	4659      	mov	r1, fp
 800aec2:	dd0f      	ble.n	800aee4 <_strtod_l+0x604>
 800aec4:	2b1f      	cmp	r3, #31
 800aec6:	dd56      	ble.n	800af76 <_strtod_l+0x696>
 800aec8:	2b34      	cmp	r3, #52	@ 0x34
 800aeca:	bfde      	ittt	le
 800aecc:	f04f 33ff 	movle.w	r3, #4294967295
 800aed0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800aed4:	4093      	lslle	r3, r2
 800aed6:	f04f 0a00 	mov.w	sl, #0
 800aeda:	bfcc      	ite	gt
 800aedc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800aee0:	ea03 0b01 	andle.w	fp, r3, r1
 800aee4:	2200      	movs	r2, #0
 800aee6:	2300      	movs	r3, #0
 800aee8:	4650      	mov	r0, sl
 800aeea:	4659      	mov	r1, fp
 800aeec:	f7f5 fdec 	bl	8000ac8 <__aeabi_dcmpeq>
 800aef0:	2800      	cmp	r0, #0
 800aef2:	d1a7      	bne.n	800ae44 <_strtod_l+0x564>
 800aef4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aef6:	9300      	str	r3, [sp, #0]
 800aef8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800aefa:	9805      	ldr	r0, [sp, #20]
 800aefc:	462b      	mov	r3, r5
 800aefe:	464a      	mov	r2, r9
 800af00:	f7ff f8ce 	bl	800a0a0 <__s2b>
 800af04:	900b      	str	r0, [sp, #44]	@ 0x2c
 800af06:	2800      	cmp	r0, #0
 800af08:	f43f af09 	beq.w	800ad1e <_strtod_l+0x43e>
 800af0c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800af0e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af10:	2a00      	cmp	r2, #0
 800af12:	eba3 0308 	sub.w	r3, r3, r8
 800af16:	bfa8      	it	ge
 800af18:	2300      	movge	r3, #0
 800af1a:	9312      	str	r3, [sp, #72]	@ 0x48
 800af1c:	2400      	movs	r4, #0
 800af1e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800af22:	9316      	str	r3, [sp, #88]	@ 0x58
 800af24:	46a0      	mov	r8, r4
 800af26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800af28:	9805      	ldr	r0, [sp, #20]
 800af2a:	6859      	ldr	r1, [r3, #4]
 800af2c:	f7ff f810 	bl	8009f50 <_Balloc>
 800af30:	4681      	mov	r9, r0
 800af32:	2800      	cmp	r0, #0
 800af34:	f43f aef7 	beq.w	800ad26 <_strtod_l+0x446>
 800af38:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800af3a:	691a      	ldr	r2, [r3, #16]
 800af3c:	3202      	adds	r2, #2
 800af3e:	f103 010c 	add.w	r1, r3, #12
 800af42:	0092      	lsls	r2, r2, #2
 800af44:	300c      	adds	r0, #12
 800af46:	f7fe f896 	bl	8009076 <memcpy>
 800af4a:	ec4b ab10 	vmov	d0, sl, fp
 800af4e:	9805      	ldr	r0, [sp, #20]
 800af50:	aa1c      	add	r2, sp, #112	@ 0x70
 800af52:	a91b      	add	r1, sp, #108	@ 0x6c
 800af54:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800af58:	f7ff fbd6 	bl	800a708 <__d2b>
 800af5c:	901a      	str	r0, [sp, #104]	@ 0x68
 800af5e:	2800      	cmp	r0, #0
 800af60:	f43f aee1 	beq.w	800ad26 <_strtod_l+0x446>
 800af64:	9805      	ldr	r0, [sp, #20]
 800af66:	2101      	movs	r1, #1
 800af68:	f7ff f930 	bl	800a1cc <__i2b>
 800af6c:	4680      	mov	r8, r0
 800af6e:	b948      	cbnz	r0, 800af84 <_strtod_l+0x6a4>
 800af70:	f04f 0800 	mov.w	r8, #0
 800af74:	e6d7      	b.n	800ad26 <_strtod_l+0x446>
 800af76:	f04f 32ff 	mov.w	r2, #4294967295
 800af7a:	fa02 f303 	lsl.w	r3, r2, r3
 800af7e:	ea03 0a0a 	and.w	sl, r3, sl
 800af82:	e7af      	b.n	800aee4 <_strtod_l+0x604>
 800af84:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800af86:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800af88:	2d00      	cmp	r5, #0
 800af8a:	bfab      	itete	ge
 800af8c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800af8e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800af90:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800af92:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800af94:	bfac      	ite	ge
 800af96:	18ef      	addge	r7, r5, r3
 800af98:	1b5e      	sublt	r6, r3, r5
 800af9a:	9b08      	ldr	r3, [sp, #32]
 800af9c:	1aed      	subs	r5, r5, r3
 800af9e:	4415      	add	r5, r2
 800afa0:	4b65      	ldr	r3, [pc, #404]	@ (800b138 <_strtod_l+0x858>)
 800afa2:	3d01      	subs	r5, #1
 800afa4:	429d      	cmp	r5, r3
 800afa6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800afaa:	da50      	bge.n	800b04e <_strtod_l+0x76e>
 800afac:	1b5b      	subs	r3, r3, r5
 800afae:	2b1f      	cmp	r3, #31
 800afb0:	eba2 0203 	sub.w	r2, r2, r3
 800afb4:	f04f 0101 	mov.w	r1, #1
 800afb8:	dc3d      	bgt.n	800b036 <_strtod_l+0x756>
 800afba:	fa01 f303 	lsl.w	r3, r1, r3
 800afbe:	9313      	str	r3, [sp, #76]	@ 0x4c
 800afc0:	2300      	movs	r3, #0
 800afc2:	9310      	str	r3, [sp, #64]	@ 0x40
 800afc4:	18bd      	adds	r5, r7, r2
 800afc6:	9b08      	ldr	r3, [sp, #32]
 800afc8:	42af      	cmp	r7, r5
 800afca:	4416      	add	r6, r2
 800afcc:	441e      	add	r6, r3
 800afce:	463b      	mov	r3, r7
 800afd0:	bfa8      	it	ge
 800afd2:	462b      	movge	r3, r5
 800afd4:	42b3      	cmp	r3, r6
 800afd6:	bfa8      	it	ge
 800afd8:	4633      	movge	r3, r6
 800afda:	2b00      	cmp	r3, #0
 800afdc:	bfc2      	ittt	gt
 800afde:	1aed      	subgt	r5, r5, r3
 800afe0:	1af6      	subgt	r6, r6, r3
 800afe2:	1aff      	subgt	r7, r7, r3
 800afe4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	dd16      	ble.n	800b018 <_strtod_l+0x738>
 800afea:	4641      	mov	r1, r8
 800afec:	9805      	ldr	r0, [sp, #20]
 800afee:	461a      	mov	r2, r3
 800aff0:	f7ff f9a4 	bl	800a33c <__pow5mult>
 800aff4:	4680      	mov	r8, r0
 800aff6:	2800      	cmp	r0, #0
 800aff8:	d0ba      	beq.n	800af70 <_strtod_l+0x690>
 800affa:	4601      	mov	r1, r0
 800affc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800affe:	9805      	ldr	r0, [sp, #20]
 800b000:	f7ff f8fa 	bl	800a1f8 <__multiply>
 800b004:	900a      	str	r0, [sp, #40]	@ 0x28
 800b006:	2800      	cmp	r0, #0
 800b008:	f43f ae8d 	beq.w	800ad26 <_strtod_l+0x446>
 800b00c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b00e:	9805      	ldr	r0, [sp, #20]
 800b010:	f7fe ffde 	bl	8009fd0 <_Bfree>
 800b014:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b016:	931a      	str	r3, [sp, #104]	@ 0x68
 800b018:	2d00      	cmp	r5, #0
 800b01a:	dc1d      	bgt.n	800b058 <_strtod_l+0x778>
 800b01c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b01e:	2b00      	cmp	r3, #0
 800b020:	dd23      	ble.n	800b06a <_strtod_l+0x78a>
 800b022:	4649      	mov	r1, r9
 800b024:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b026:	9805      	ldr	r0, [sp, #20]
 800b028:	f7ff f988 	bl	800a33c <__pow5mult>
 800b02c:	4681      	mov	r9, r0
 800b02e:	b9e0      	cbnz	r0, 800b06a <_strtod_l+0x78a>
 800b030:	f04f 0900 	mov.w	r9, #0
 800b034:	e677      	b.n	800ad26 <_strtod_l+0x446>
 800b036:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800b03a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800b03e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800b042:	35e2      	adds	r5, #226	@ 0xe2
 800b044:	fa01 f305 	lsl.w	r3, r1, r5
 800b048:	9310      	str	r3, [sp, #64]	@ 0x40
 800b04a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b04c:	e7ba      	b.n	800afc4 <_strtod_l+0x6e4>
 800b04e:	2300      	movs	r3, #0
 800b050:	9310      	str	r3, [sp, #64]	@ 0x40
 800b052:	2301      	movs	r3, #1
 800b054:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b056:	e7b5      	b.n	800afc4 <_strtod_l+0x6e4>
 800b058:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b05a:	9805      	ldr	r0, [sp, #20]
 800b05c:	462a      	mov	r2, r5
 800b05e:	f7ff f9c7 	bl	800a3f0 <__lshift>
 800b062:	901a      	str	r0, [sp, #104]	@ 0x68
 800b064:	2800      	cmp	r0, #0
 800b066:	d1d9      	bne.n	800b01c <_strtod_l+0x73c>
 800b068:	e65d      	b.n	800ad26 <_strtod_l+0x446>
 800b06a:	2e00      	cmp	r6, #0
 800b06c:	dd07      	ble.n	800b07e <_strtod_l+0x79e>
 800b06e:	4649      	mov	r1, r9
 800b070:	9805      	ldr	r0, [sp, #20]
 800b072:	4632      	mov	r2, r6
 800b074:	f7ff f9bc 	bl	800a3f0 <__lshift>
 800b078:	4681      	mov	r9, r0
 800b07a:	2800      	cmp	r0, #0
 800b07c:	d0d8      	beq.n	800b030 <_strtod_l+0x750>
 800b07e:	2f00      	cmp	r7, #0
 800b080:	dd08      	ble.n	800b094 <_strtod_l+0x7b4>
 800b082:	4641      	mov	r1, r8
 800b084:	9805      	ldr	r0, [sp, #20]
 800b086:	463a      	mov	r2, r7
 800b088:	f7ff f9b2 	bl	800a3f0 <__lshift>
 800b08c:	4680      	mov	r8, r0
 800b08e:	2800      	cmp	r0, #0
 800b090:	f43f ae49 	beq.w	800ad26 <_strtod_l+0x446>
 800b094:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b096:	9805      	ldr	r0, [sp, #20]
 800b098:	464a      	mov	r2, r9
 800b09a:	f7ff fa31 	bl	800a500 <__mdiff>
 800b09e:	4604      	mov	r4, r0
 800b0a0:	2800      	cmp	r0, #0
 800b0a2:	f43f ae40 	beq.w	800ad26 <_strtod_l+0x446>
 800b0a6:	68c3      	ldr	r3, [r0, #12]
 800b0a8:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	60c3      	str	r3, [r0, #12]
 800b0ae:	4641      	mov	r1, r8
 800b0b0:	f7ff fa0a 	bl	800a4c8 <__mcmp>
 800b0b4:	2800      	cmp	r0, #0
 800b0b6:	da45      	bge.n	800b144 <_strtod_l+0x864>
 800b0b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b0ba:	ea53 030a 	orrs.w	r3, r3, sl
 800b0be:	d16b      	bne.n	800b198 <_strtod_l+0x8b8>
 800b0c0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d167      	bne.n	800b198 <_strtod_l+0x8b8>
 800b0c8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b0cc:	0d1b      	lsrs	r3, r3, #20
 800b0ce:	051b      	lsls	r3, r3, #20
 800b0d0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b0d4:	d960      	bls.n	800b198 <_strtod_l+0x8b8>
 800b0d6:	6963      	ldr	r3, [r4, #20]
 800b0d8:	b913      	cbnz	r3, 800b0e0 <_strtod_l+0x800>
 800b0da:	6923      	ldr	r3, [r4, #16]
 800b0dc:	2b01      	cmp	r3, #1
 800b0de:	dd5b      	ble.n	800b198 <_strtod_l+0x8b8>
 800b0e0:	4621      	mov	r1, r4
 800b0e2:	2201      	movs	r2, #1
 800b0e4:	9805      	ldr	r0, [sp, #20]
 800b0e6:	f7ff f983 	bl	800a3f0 <__lshift>
 800b0ea:	4641      	mov	r1, r8
 800b0ec:	4604      	mov	r4, r0
 800b0ee:	f7ff f9eb 	bl	800a4c8 <__mcmp>
 800b0f2:	2800      	cmp	r0, #0
 800b0f4:	dd50      	ble.n	800b198 <_strtod_l+0x8b8>
 800b0f6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b0fa:	9a08      	ldr	r2, [sp, #32]
 800b0fc:	0d1b      	lsrs	r3, r3, #20
 800b0fe:	051b      	lsls	r3, r3, #20
 800b100:	2a00      	cmp	r2, #0
 800b102:	d06a      	beq.n	800b1da <_strtod_l+0x8fa>
 800b104:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b108:	d867      	bhi.n	800b1da <_strtod_l+0x8fa>
 800b10a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b10e:	f67f ae9d 	bls.w	800ae4c <_strtod_l+0x56c>
 800b112:	4b0a      	ldr	r3, [pc, #40]	@ (800b13c <_strtod_l+0x85c>)
 800b114:	4650      	mov	r0, sl
 800b116:	4659      	mov	r1, fp
 800b118:	2200      	movs	r2, #0
 800b11a:	f7f5 fa6d 	bl	80005f8 <__aeabi_dmul>
 800b11e:	4b08      	ldr	r3, [pc, #32]	@ (800b140 <_strtod_l+0x860>)
 800b120:	400b      	ands	r3, r1
 800b122:	4682      	mov	sl, r0
 800b124:	468b      	mov	fp, r1
 800b126:	2b00      	cmp	r3, #0
 800b128:	f47f ae08 	bne.w	800ad3c <_strtod_l+0x45c>
 800b12c:	9a05      	ldr	r2, [sp, #20]
 800b12e:	2322      	movs	r3, #34	@ 0x22
 800b130:	6013      	str	r3, [r2, #0]
 800b132:	e603      	b.n	800ad3c <_strtod_l+0x45c>
 800b134:	0800d9c0 	.word	0x0800d9c0
 800b138:	fffffc02 	.word	0xfffffc02
 800b13c:	39500000 	.word	0x39500000
 800b140:	7ff00000 	.word	0x7ff00000
 800b144:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800b148:	d165      	bne.n	800b216 <_strtod_l+0x936>
 800b14a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b14c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b150:	b35a      	cbz	r2, 800b1aa <_strtod_l+0x8ca>
 800b152:	4a9f      	ldr	r2, [pc, #636]	@ (800b3d0 <_strtod_l+0xaf0>)
 800b154:	4293      	cmp	r3, r2
 800b156:	d12b      	bne.n	800b1b0 <_strtod_l+0x8d0>
 800b158:	9b08      	ldr	r3, [sp, #32]
 800b15a:	4651      	mov	r1, sl
 800b15c:	b303      	cbz	r3, 800b1a0 <_strtod_l+0x8c0>
 800b15e:	4b9d      	ldr	r3, [pc, #628]	@ (800b3d4 <_strtod_l+0xaf4>)
 800b160:	465a      	mov	r2, fp
 800b162:	4013      	ands	r3, r2
 800b164:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b168:	f04f 32ff 	mov.w	r2, #4294967295
 800b16c:	d81b      	bhi.n	800b1a6 <_strtod_l+0x8c6>
 800b16e:	0d1b      	lsrs	r3, r3, #20
 800b170:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b174:	fa02 f303 	lsl.w	r3, r2, r3
 800b178:	4299      	cmp	r1, r3
 800b17a:	d119      	bne.n	800b1b0 <_strtod_l+0x8d0>
 800b17c:	4b96      	ldr	r3, [pc, #600]	@ (800b3d8 <_strtod_l+0xaf8>)
 800b17e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b180:	429a      	cmp	r2, r3
 800b182:	d102      	bne.n	800b18a <_strtod_l+0x8aa>
 800b184:	3101      	adds	r1, #1
 800b186:	f43f adce 	beq.w	800ad26 <_strtod_l+0x446>
 800b18a:	4b92      	ldr	r3, [pc, #584]	@ (800b3d4 <_strtod_l+0xaf4>)
 800b18c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b18e:	401a      	ands	r2, r3
 800b190:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800b194:	f04f 0a00 	mov.w	sl, #0
 800b198:	9b08      	ldr	r3, [sp, #32]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d1b9      	bne.n	800b112 <_strtod_l+0x832>
 800b19e:	e5cd      	b.n	800ad3c <_strtod_l+0x45c>
 800b1a0:	f04f 33ff 	mov.w	r3, #4294967295
 800b1a4:	e7e8      	b.n	800b178 <_strtod_l+0x898>
 800b1a6:	4613      	mov	r3, r2
 800b1a8:	e7e6      	b.n	800b178 <_strtod_l+0x898>
 800b1aa:	ea53 030a 	orrs.w	r3, r3, sl
 800b1ae:	d0a2      	beq.n	800b0f6 <_strtod_l+0x816>
 800b1b0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b1b2:	b1db      	cbz	r3, 800b1ec <_strtod_l+0x90c>
 800b1b4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b1b6:	4213      	tst	r3, r2
 800b1b8:	d0ee      	beq.n	800b198 <_strtod_l+0x8b8>
 800b1ba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b1bc:	9a08      	ldr	r2, [sp, #32]
 800b1be:	4650      	mov	r0, sl
 800b1c0:	4659      	mov	r1, fp
 800b1c2:	b1bb      	cbz	r3, 800b1f4 <_strtod_l+0x914>
 800b1c4:	f7ff fb6e 	bl	800a8a4 <sulp>
 800b1c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b1cc:	ec53 2b10 	vmov	r2, r3, d0
 800b1d0:	f7f5 f85c 	bl	800028c <__adddf3>
 800b1d4:	4682      	mov	sl, r0
 800b1d6:	468b      	mov	fp, r1
 800b1d8:	e7de      	b.n	800b198 <_strtod_l+0x8b8>
 800b1da:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b1de:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b1e2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b1e6:	f04f 3aff 	mov.w	sl, #4294967295
 800b1ea:	e7d5      	b.n	800b198 <_strtod_l+0x8b8>
 800b1ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b1ee:	ea13 0f0a 	tst.w	r3, sl
 800b1f2:	e7e1      	b.n	800b1b8 <_strtod_l+0x8d8>
 800b1f4:	f7ff fb56 	bl	800a8a4 <sulp>
 800b1f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b1fc:	ec53 2b10 	vmov	r2, r3, d0
 800b200:	f7f5 f842 	bl	8000288 <__aeabi_dsub>
 800b204:	2200      	movs	r2, #0
 800b206:	2300      	movs	r3, #0
 800b208:	4682      	mov	sl, r0
 800b20a:	468b      	mov	fp, r1
 800b20c:	f7f5 fc5c 	bl	8000ac8 <__aeabi_dcmpeq>
 800b210:	2800      	cmp	r0, #0
 800b212:	d0c1      	beq.n	800b198 <_strtod_l+0x8b8>
 800b214:	e61a      	b.n	800ae4c <_strtod_l+0x56c>
 800b216:	4641      	mov	r1, r8
 800b218:	4620      	mov	r0, r4
 800b21a:	f7ff facd 	bl	800a7b8 <__ratio>
 800b21e:	ec57 6b10 	vmov	r6, r7, d0
 800b222:	2200      	movs	r2, #0
 800b224:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b228:	4630      	mov	r0, r6
 800b22a:	4639      	mov	r1, r7
 800b22c:	f7f5 fc60 	bl	8000af0 <__aeabi_dcmple>
 800b230:	2800      	cmp	r0, #0
 800b232:	d06f      	beq.n	800b314 <_strtod_l+0xa34>
 800b234:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b236:	2b00      	cmp	r3, #0
 800b238:	d17a      	bne.n	800b330 <_strtod_l+0xa50>
 800b23a:	f1ba 0f00 	cmp.w	sl, #0
 800b23e:	d158      	bne.n	800b2f2 <_strtod_l+0xa12>
 800b240:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b242:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b246:	2b00      	cmp	r3, #0
 800b248:	d15a      	bne.n	800b300 <_strtod_l+0xa20>
 800b24a:	4b64      	ldr	r3, [pc, #400]	@ (800b3dc <_strtod_l+0xafc>)
 800b24c:	2200      	movs	r2, #0
 800b24e:	4630      	mov	r0, r6
 800b250:	4639      	mov	r1, r7
 800b252:	f7f5 fc43 	bl	8000adc <__aeabi_dcmplt>
 800b256:	2800      	cmp	r0, #0
 800b258:	d159      	bne.n	800b30e <_strtod_l+0xa2e>
 800b25a:	4630      	mov	r0, r6
 800b25c:	4639      	mov	r1, r7
 800b25e:	4b60      	ldr	r3, [pc, #384]	@ (800b3e0 <_strtod_l+0xb00>)
 800b260:	2200      	movs	r2, #0
 800b262:	f7f5 f9c9 	bl	80005f8 <__aeabi_dmul>
 800b266:	4606      	mov	r6, r0
 800b268:	460f      	mov	r7, r1
 800b26a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b26e:	9606      	str	r6, [sp, #24]
 800b270:	9307      	str	r3, [sp, #28]
 800b272:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b276:	4d57      	ldr	r5, [pc, #348]	@ (800b3d4 <_strtod_l+0xaf4>)
 800b278:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b27c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b27e:	401d      	ands	r5, r3
 800b280:	4b58      	ldr	r3, [pc, #352]	@ (800b3e4 <_strtod_l+0xb04>)
 800b282:	429d      	cmp	r5, r3
 800b284:	f040 80b2 	bne.w	800b3ec <_strtod_l+0xb0c>
 800b288:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b28a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b28e:	ec4b ab10 	vmov	d0, sl, fp
 800b292:	f7ff f9c9 	bl	800a628 <__ulp>
 800b296:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b29a:	ec51 0b10 	vmov	r0, r1, d0
 800b29e:	f7f5 f9ab 	bl	80005f8 <__aeabi_dmul>
 800b2a2:	4652      	mov	r2, sl
 800b2a4:	465b      	mov	r3, fp
 800b2a6:	f7f4 fff1 	bl	800028c <__adddf3>
 800b2aa:	460b      	mov	r3, r1
 800b2ac:	4949      	ldr	r1, [pc, #292]	@ (800b3d4 <_strtod_l+0xaf4>)
 800b2ae:	4a4e      	ldr	r2, [pc, #312]	@ (800b3e8 <_strtod_l+0xb08>)
 800b2b0:	4019      	ands	r1, r3
 800b2b2:	4291      	cmp	r1, r2
 800b2b4:	4682      	mov	sl, r0
 800b2b6:	d942      	bls.n	800b33e <_strtod_l+0xa5e>
 800b2b8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b2ba:	4b47      	ldr	r3, [pc, #284]	@ (800b3d8 <_strtod_l+0xaf8>)
 800b2bc:	429a      	cmp	r2, r3
 800b2be:	d103      	bne.n	800b2c8 <_strtod_l+0x9e8>
 800b2c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b2c2:	3301      	adds	r3, #1
 800b2c4:	f43f ad2f 	beq.w	800ad26 <_strtod_l+0x446>
 800b2c8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800b3d8 <_strtod_l+0xaf8>
 800b2cc:	f04f 3aff 	mov.w	sl, #4294967295
 800b2d0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b2d2:	9805      	ldr	r0, [sp, #20]
 800b2d4:	f7fe fe7c 	bl	8009fd0 <_Bfree>
 800b2d8:	9805      	ldr	r0, [sp, #20]
 800b2da:	4649      	mov	r1, r9
 800b2dc:	f7fe fe78 	bl	8009fd0 <_Bfree>
 800b2e0:	9805      	ldr	r0, [sp, #20]
 800b2e2:	4641      	mov	r1, r8
 800b2e4:	f7fe fe74 	bl	8009fd0 <_Bfree>
 800b2e8:	9805      	ldr	r0, [sp, #20]
 800b2ea:	4621      	mov	r1, r4
 800b2ec:	f7fe fe70 	bl	8009fd0 <_Bfree>
 800b2f0:	e619      	b.n	800af26 <_strtod_l+0x646>
 800b2f2:	f1ba 0f01 	cmp.w	sl, #1
 800b2f6:	d103      	bne.n	800b300 <_strtod_l+0xa20>
 800b2f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	f43f ada6 	beq.w	800ae4c <_strtod_l+0x56c>
 800b300:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800b3b0 <_strtod_l+0xad0>
 800b304:	4f35      	ldr	r7, [pc, #212]	@ (800b3dc <_strtod_l+0xafc>)
 800b306:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b30a:	2600      	movs	r6, #0
 800b30c:	e7b1      	b.n	800b272 <_strtod_l+0x992>
 800b30e:	4f34      	ldr	r7, [pc, #208]	@ (800b3e0 <_strtod_l+0xb00>)
 800b310:	2600      	movs	r6, #0
 800b312:	e7aa      	b.n	800b26a <_strtod_l+0x98a>
 800b314:	4b32      	ldr	r3, [pc, #200]	@ (800b3e0 <_strtod_l+0xb00>)
 800b316:	4630      	mov	r0, r6
 800b318:	4639      	mov	r1, r7
 800b31a:	2200      	movs	r2, #0
 800b31c:	f7f5 f96c 	bl	80005f8 <__aeabi_dmul>
 800b320:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b322:	4606      	mov	r6, r0
 800b324:	460f      	mov	r7, r1
 800b326:	2b00      	cmp	r3, #0
 800b328:	d09f      	beq.n	800b26a <_strtod_l+0x98a>
 800b32a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b32e:	e7a0      	b.n	800b272 <_strtod_l+0x992>
 800b330:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b3b8 <_strtod_l+0xad8>
 800b334:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b338:	ec57 6b17 	vmov	r6, r7, d7
 800b33c:	e799      	b.n	800b272 <_strtod_l+0x992>
 800b33e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b342:	9b08      	ldr	r3, [sp, #32]
 800b344:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d1c1      	bne.n	800b2d0 <_strtod_l+0x9f0>
 800b34c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b350:	0d1b      	lsrs	r3, r3, #20
 800b352:	051b      	lsls	r3, r3, #20
 800b354:	429d      	cmp	r5, r3
 800b356:	d1bb      	bne.n	800b2d0 <_strtod_l+0x9f0>
 800b358:	4630      	mov	r0, r6
 800b35a:	4639      	mov	r1, r7
 800b35c:	f7f5 fcac 	bl	8000cb8 <__aeabi_d2lz>
 800b360:	f7f5 f91c 	bl	800059c <__aeabi_l2d>
 800b364:	4602      	mov	r2, r0
 800b366:	460b      	mov	r3, r1
 800b368:	4630      	mov	r0, r6
 800b36a:	4639      	mov	r1, r7
 800b36c:	f7f4 ff8c 	bl	8000288 <__aeabi_dsub>
 800b370:	460b      	mov	r3, r1
 800b372:	4602      	mov	r2, r0
 800b374:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b378:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b37c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b37e:	ea46 060a 	orr.w	r6, r6, sl
 800b382:	431e      	orrs	r6, r3
 800b384:	d06f      	beq.n	800b466 <_strtod_l+0xb86>
 800b386:	a30e      	add	r3, pc, #56	@ (adr r3, 800b3c0 <_strtod_l+0xae0>)
 800b388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b38c:	f7f5 fba6 	bl	8000adc <__aeabi_dcmplt>
 800b390:	2800      	cmp	r0, #0
 800b392:	f47f acd3 	bne.w	800ad3c <_strtod_l+0x45c>
 800b396:	a30c      	add	r3, pc, #48	@ (adr r3, 800b3c8 <_strtod_l+0xae8>)
 800b398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b39c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b3a0:	f7f5 fbba 	bl	8000b18 <__aeabi_dcmpgt>
 800b3a4:	2800      	cmp	r0, #0
 800b3a6:	d093      	beq.n	800b2d0 <_strtod_l+0x9f0>
 800b3a8:	e4c8      	b.n	800ad3c <_strtod_l+0x45c>
 800b3aa:	bf00      	nop
 800b3ac:	f3af 8000 	nop.w
 800b3b0:	00000000 	.word	0x00000000
 800b3b4:	bff00000 	.word	0xbff00000
 800b3b8:	00000000 	.word	0x00000000
 800b3bc:	3ff00000 	.word	0x3ff00000
 800b3c0:	94a03595 	.word	0x94a03595
 800b3c4:	3fdfffff 	.word	0x3fdfffff
 800b3c8:	35afe535 	.word	0x35afe535
 800b3cc:	3fe00000 	.word	0x3fe00000
 800b3d0:	000fffff 	.word	0x000fffff
 800b3d4:	7ff00000 	.word	0x7ff00000
 800b3d8:	7fefffff 	.word	0x7fefffff
 800b3dc:	3ff00000 	.word	0x3ff00000
 800b3e0:	3fe00000 	.word	0x3fe00000
 800b3e4:	7fe00000 	.word	0x7fe00000
 800b3e8:	7c9fffff 	.word	0x7c9fffff
 800b3ec:	9b08      	ldr	r3, [sp, #32]
 800b3ee:	b323      	cbz	r3, 800b43a <_strtod_l+0xb5a>
 800b3f0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b3f4:	d821      	bhi.n	800b43a <_strtod_l+0xb5a>
 800b3f6:	a328      	add	r3, pc, #160	@ (adr r3, 800b498 <_strtod_l+0xbb8>)
 800b3f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3fc:	4630      	mov	r0, r6
 800b3fe:	4639      	mov	r1, r7
 800b400:	f7f5 fb76 	bl	8000af0 <__aeabi_dcmple>
 800b404:	b1a0      	cbz	r0, 800b430 <_strtod_l+0xb50>
 800b406:	4639      	mov	r1, r7
 800b408:	4630      	mov	r0, r6
 800b40a:	f7f5 fbcd 	bl	8000ba8 <__aeabi_d2uiz>
 800b40e:	2801      	cmp	r0, #1
 800b410:	bf38      	it	cc
 800b412:	2001      	movcc	r0, #1
 800b414:	f7f5 f876 	bl	8000504 <__aeabi_ui2d>
 800b418:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b41a:	4606      	mov	r6, r0
 800b41c:	460f      	mov	r7, r1
 800b41e:	b9fb      	cbnz	r3, 800b460 <_strtod_l+0xb80>
 800b420:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b424:	9014      	str	r0, [sp, #80]	@ 0x50
 800b426:	9315      	str	r3, [sp, #84]	@ 0x54
 800b428:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b42c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b430:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b432:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b436:	1b5b      	subs	r3, r3, r5
 800b438:	9311      	str	r3, [sp, #68]	@ 0x44
 800b43a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b43e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b442:	f7ff f8f1 	bl	800a628 <__ulp>
 800b446:	4650      	mov	r0, sl
 800b448:	ec53 2b10 	vmov	r2, r3, d0
 800b44c:	4659      	mov	r1, fp
 800b44e:	f7f5 f8d3 	bl	80005f8 <__aeabi_dmul>
 800b452:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b456:	f7f4 ff19 	bl	800028c <__adddf3>
 800b45a:	4682      	mov	sl, r0
 800b45c:	468b      	mov	fp, r1
 800b45e:	e770      	b.n	800b342 <_strtod_l+0xa62>
 800b460:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b464:	e7e0      	b.n	800b428 <_strtod_l+0xb48>
 800b466:	a30e      	add	r3, pc, #56	@ (adr r3, 800b4a0 <_strtod_l+0xbc0>)
 800b468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b46c:	f7f5 fb36 	bl	8000adc <__aeabi_dcmplt>
 800b470:	e798      	b.n	800b3a4 <_strtod_l+0xac4>
 800b472:	2300      	movs	r3, #0
 800b474:	930e      	str	r3, [sp, #56]	@ 0x38
 800b476:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b478:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b47a:	6013      	str	r3, [r2, #0]
 800b47c:	f7ff ba6d 	b.w	800a95a <_strtod_l+0x7a>
 800b480:	2a65      	cmp	r2, #101	@ 0x65
 800b482:	f43f ab68 	beq.w	800ab56 <_strtod_l+0x276>
 800b486:	2a45      	cmp	r2, #69	@ 0x45
 800b488:	f43f ab65 	beq.w	800ab56 <_strtod_l+0x276>
 800b48c:	2301      	movs	r3, #1
 800b48e:	f7ff bba0 	b.w	800abd2 <_strtod_l+0x2f2>
 800b492:	bf00      	nop
 800b494:	f3af 8000 	nop.w
 800b498:	ffc00000 	.word	0xffc00000
 800b49c:	41dfffff 	.word	0x41dfffff
 800b4a0:	94a03595 	.word	0x94a03595
 800b4a4:	3fcfffff 	.word	0x3fcfffff

0800b4a8 <_strtod_r>:
 800b4a8:	4b01      	ldr	r3, [pc, #4]	@ (800b4b0 <_strtod_r+0x8>)
 800b4aa:	f7ff ba19 	b.w	800a8e0 <_strtod_l>
 800b4ae:	bf00      	nop
 800b4b0:	20000084 	.word	0x20000084

0800b4b4 <_strtol_l.isra.0>:
 800b4b4:	2b24      	cmp	r3, #36	@ 0x24
 800b4b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4ba:	4686      	mov	lr, r0
 800b4bc:	4690      	mov	r8, r2
 800b4be:	d801      	bhi.n	800b4c4 <_strtol_l.isra.0+0x10>
 800b4c0:	2b01      	cmp	r3, #1
 800b4c2:	d106      	bne.n	800b4d2 <_strtol_l.isra.0+0x1e>
 800b4c4:	f7fd fdaa 	bl	800901c <__errno>
 800b4c8:	2316      	movs	r3, #22
 800b4ca:	6003      	str	r3, [r0, #0]
 800b4cc:	2000      	movs	r0, #0
 800b4ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4d2:	4834      	ldr	r0, [pc, #208]	@ (800b5a4 <_strtol_l.isra.0+0xf0>)
 800b4d4:	460d      	mov	r5, r1
 800b4d6:	462a      	mov	r2, r5
 800b4d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b4dc:	5d06      	ldrb	r6, [r0, r4]
 800b4de:	f016 0608 	ands.w	r6, r6, #8
 800b4e2:	d1f8      	bne.n	800b4d6 <_strtol_l.isra.0+0x22>
 800b4e4:	2c2d      	cmp	r4, #45	@ 0x2d
 800b4e6:	d110      	bne.n	800b50a <_strtol_l.isra.0+0x56>
 800b4e8:	782c      	ldrb	r4, [r5, #0]
 800b4ea:	2601      	movs	r6, #1
 800b4ec:	1c95      	adds	r5, r2, #2
 800b4ee:	f033 0210 	bics.w	r2, r3, #16
 800b4f2:	d115      	bne.n	800b520 <_strtol_l.isra.0+0x6c>
 800b4f4:	2c30      	cmp	r4, #48	@ 0x30
 800b4f6:	d10d      	bne.n	800b514 <_strtol_l.isra.0+0x60>
 800b4f8:	782a      	ldrb	r2, [r5, #0]
 800b4fa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b4fe:	2a58      	cmp	r2, #88	@ 0x58
 800b500:	d108      	bne.n	800b514 <_strtol_l.isra.0+0x60>
 800b502:	786c      	ldrb	r4, [r5, #1]
 800b504:	3502      	adds	r5, #2
 800b506:	2310      	movs	r3, #16
 800b508:	e00a      	b.n	800b520 <_strtol_l.isra.0+0x6c>
 800b50a:	2c2b      	cmp	r4, #43	@ 0x2b
 800b50c:	bf04      	itt	eq
 800b50e:	782c      	ldrbeq	r4, [r5, #0]
 800b510:	1c95      	addeq	r5, r2, #2
 800b512:	e7ec      	b.n	800b4ee <_strtol_l.isra.0+0x3a>
 800b514:	2b00      	cmp	r3, #0
 800b516:	d1f6      	bne.n	800b506 <_strtol_l.isra.0+0x52>
 800b518:	2c30      	cmp	r4, #48	@ 0x30
 800b51a:	bf14      	ite	ne
 800b51c:	230a      	movne	r3, #10
 800b51e:	2308      	moveq	r3, #8
 800b520:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b524:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b528:	2200      	movs	r2, #0
 800b52a:	fbbc f9f3 	udiv	r9, ip, r3
 800b52e:	4610      	mov	r0, r2
 800b530:	fb03 ca19 	mls	sl, r3, r9, ip
 800b534:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b538:	2f09      	cmp	r7, #9
 800b53a:	d80f      	bhi.n	800b55c <_strtol_l.isra.0+0xa8>
 800b53c:	463c      	mov	r4, r7
 800b53e:	42a3      	cmp	r3, r4
 800b540:	dd1b      	ble.n	800b57a <_strtol_l.isra.0+0xc6>
 800b542:	1c57      	adds	r7, r2, #1
 800b544:	d007      	beq.n	800b556 <_strtol_l.isra.0+0xa2>
 800b546:	4581      	cmp	r9, r0
 800b548:	d314      	bcc.n	800b574 <_strtol_l.isra.0+0xc0>
 800b54a:	d101      	bne.n	800b550 <_strtol_l.isra.0+0x9c>
 800b54c:	45a2      	cmp	sl, r4
 800b54e:	db11      	blt.n	800b574 <_strtol_l.isra.0+0xc0>
 800b550:	fb00 4003 	mla	r0, r0, r3, r4
 800b554:	2201      	movs	r2, #1
 800b556:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b55a:	e7eb      	b.n	800b534 <_strtol_l.isra.0+0x80>
 800b55c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b560:	2f19      	cmp	r7, #25
 800b562:	d801      	bhi.n	800b568 <_strtol_l.isra.0+0xb4>
 800b564:	3c37      	subs	r4, #55	@ 0x37
 800b566:	e7ea      	b.n	800b53e <_strtol_l.isra.0+0x8a>
 800b568:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b56c:	2f19      	cmp	r7, #25
 800b56e:	d804      	bhi.n	800b57a <_strtol_l.isra.0+0xc6>
 800b570:	3c57      	subs	r4, #87	@ 0x57
 800b572:	e7e4      	b.n	800b53e <_strtol_l.isra.0+0x8a>
 800b574:	f04f 32ff 	mov.w	r2, #4294967295
 800b578:	e7ed      	b.n	800b556 <_strtol_l.isra.0+0xa2>
 800b57a:	1c53      	adds	r3, r2, #1
 800b57c:	d108      	bne.n	800b590 <_strtol_l.isra.0+0xdc>
 800b57e:	2322      	movs	r3, #34	@ 0x22
 800b580:	f8ce 3000 	str.w	r3, [lr]
 800b584:	4660      	mov	r0, ip
 800b586:	f1b8 0f00 	cmp.w	r8, #0
 800b58a:	d0a0      	beq.n	800b4ce <_strtol_l.isra.0+0x1a>
 800b58c:	1e69      	subs	r1, r5, #1
 800b58e:	e006      	b.n	800b59e <_strtol_l.isra.0+0xea>
 800b590:	b106      	cbz	r6, 800b594 <_strtol_l.isra.0+0xe0>
 800b592:	4240      	negs	r0, r0
 800b594:	f1b8 0f00 	cmp.w	r8, #0
 800b598:	d099      	beq.n	800b4ce <_strtol_l.isra.0+0x1a>
 800b59a:	2a00      	cmp	r2, #0
 800b59c:	d1f6      	bne.n	800b58c <_strtol_l.isra.0+0xd8>
 800b59e:	f8c8 1000 	str.w	r1, [r8]
 800b5a2:	e794      	b.n	800b4ce <_strtol_l.isra.0+0x1a>
 800b5a4:	0800d9e9 	.word	0x0800d9e9

0800b5a8 <_strtol_r>:
 800b5a8:	f7ff bf84 	b.w	800b4b4 <_strtol_l.isra.0>

0800b5ac <__ssputs_r>:
 800b5ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5b0:	688e      	ldr	r6, [r1, #8]
 800b5b2:	461f      	mov	r7, r3
 800b5b4:	42be      	cmp	r6, r7
 800b5b6:	680b      	ldr	r3, [r1, #0]
 800b5b8:	4682      	mov	sl, r0
 800b5ba:	460c      	mov	r4, r1
 800b5bc:	4690      	mov	r8, r2
 800b5be:	d82d      	bhi.n	800b61c <__ssputs_r+0x70>
 800b5c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b5c4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b5c8:	d026      	beq.n	800b618 <__ssputs_r+0x6c>
 800b5ca:	6965      	ldr	r5, [r4, #20]
 800b5cc:	6909      	ldr	r1, [r1, #16]
 800b5ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b5d2:	eba3 0901 	sub.w	r9, r3, r1
 800b5d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b5da:	1c7b      	adds	r3, r7, #1
 800b5dc:	444b      	add	r3, r9
 800b5de:	106d      	asrs	r5, r5, #1
 800b5e0:	429d      	cmp	r5, r3
 800b5e2:	bf38      	it	cc
 800b5e4:	461d      	movcc	r5, r3
 800b5e6:	0553      	lsls	r3, r2, #21
 800b5e8:	d527      	bpl.n	800b63a <__ssputs_r+0x8e>
 800b5ea:	4629      	mov	r1, r5
 800b5ec:	f7fe fc24 	bl	8009e38 <_malloc_r>
 800b5f0:	4606      	mov	r6, r0
 800b5f2:	b360      	cbz	r0, 800b64e <__ssputs_r+0xa2>
 800b5f4:	6921      	ldr	r1, [r4, #16]
 800b5f6:	464a      	mov	r2, r9
 800b5f8:	f7fd fd3d 	bl	8009076 <memcpy>
 800b5fc:	89a3      	ldrh	r3, [r4, #12]
 800b5fe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b602:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b606:	81a3      	strh	r3, [r4, #12]
 800b608:	6126      	str	r6, [r4, #16]
 800b60a:	6165      	str	r5, [r4, #20]
 800b60c:	444e      	add	r6, r9
 800b60e:	eba5 0509 	sub.w	r5, r5, r9
 800b612:	6026      	str	r6, [r4, #0]
 800b614:	60a5      	str	r5, [r4, #8]
 800b616:	463e      	mov	r6, r7
 800b618:	42be      	cmp	r6, r7
 800b61a:	d900      	bls.n	800b61e <__ssputs_r+0x72>
 800b61c:	463e      	mov	r6, r7
 800b61e:	6820      	ldr	r0, [r4, #0]
 800b620:	4632      	mov	r2, r6
 800b622:	4641      	mov	r1, r8
 800b624:	f000 fd57 	bl	800c0d6 <memmove>
 800b628:	68a3      	ldr	r3, [r4, #8]
 800b62a:	1b9b      	subs	r3, r3, r6
 800b62c:	60a3      	str	r3, [r4, #8]
 800b62e:	6823      	ldr	r3, [r4, #0]
 800b630:	4433      	add	r3, r6
 800b632:	6023      	str	r3, [r4, #0]
 800b634:	2000      	movs	r0, #0
 800b636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b63a:	462a      	mov	r2, r5
 800b63c:	f001 f90d 	bl	800c85a <_realloc_r>
 800b640:	4606      	mov	r6, r0
 800b642:	2800      	cmp	r0, #0
 800b644:	d1e0      	bne.n	800b608 <__ssputs_r+0x5c>
 800b646:	6921      	ldr	r1, [r4, #16]
 800b648:	4650      	mov	r0, sl
 800b64a:	f7fe fb81 	bl	8009d50 <_free_r>
 800b64e:	230c      	movs	r3, #12
 800b650:	f8ca 3000 	str.w	r3, [sl]
 800b654:	89a3      	ldrh	r3, [r4, #12]
 800b656:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b65a:	81a3      	strh	r3, [r4, #12]
 800b65c:	f04f 30ff 	mov.w	r0, #4294967295
 800b660:	e7e9      	b.n	800b636 <__ssputs_r+0x8a>
	...

0800b664 <_svfiprintf_r>:
 800b664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b668:	4698      	mov	r8, r3
 800b66a:	898b      	ldrh	r3, [r1, #12]
 800b66c:	061b      	lsls	r3, r3, #24
 800b66e:	b09d      	sub	sp, #116	@ 0x74
 800b670:	4607      	mov	r7, r0
 800b672:	460d      	mov	r5, r1
 800b674:	4614      	mov	r4, r2
 800b676:	d510      	bpl.n	800b69a <_svfiprintf_r+0x36>
 800b678:	690b      	ldr	r3, [r1, #16]
 800b67a:	b973      	cbnz	r3, 800b69a <_svfiprintf_r+0x36>
 800b67c:	2140      	movs	r1, #64	@ 0x40
 800b67e:	f7fe fbdb 	bl	8009e38 <_malloc_r>
 800b682:	6028      	str	r0, [r5, #0]
 800b684:	6128      	str	r0, [r5, #16]
 800b686:	b930      	cbnz	r0, 800b696 <_svfiprintf_r+0x32>
 800b688:	230c      	movs	r3, #12
 800b68a:	603b      	str	r3, [r7, #0]
 800b68c:	f04f 30ff 	mov.w	r0, #4294967295
 800b690:	b01d      	add	sp, #116	@ 0x74
 800b692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b696:	2340      	movs	r3, #64	@ 0x40
 800b698:	616b      	str	r3, [r5, #20]
 800b69a:	2300      	movs	r3, #0
 800b69c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b69e:	2320      	movs	r3, #32
 800b6a0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b6a4:	f8cd 800c 	str.w	r8, [sp, #12]
 800b6a8:	2330      	movs	r3, #48	@ 0x30
 800b6aa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b848 <_svfiprintf_r+0x1e4>
 800b6ae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b6b2:	f04f 0901 	mov.w	r9, #1
 800b6b6:	4623      	mov	r3, r4
 800b6b8:	469a      	mov	sl, r3
 800b6ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b6be:	b10a      	cbz	r2, 800b6c4 <_svfiprintf_r+0x60>
 800b6c0:	2a25      	cmp	r2, #37	@ 0x25
 800b6c2:	d1f9      	bne.n	800b6b8 <_svfiprintf_r+0x54>
 800b6c4:	ebba 0b04 	subs.w	fp, sl, r4
 800b6c8:	d00b      	beq.n	800b6e2 <_svfiprintf_r+0x7e>
 800b6ca:	465b      	mov	r3, fp
 800b6cc:	4622      	mov	r2, r4
 800b6ce:	4629      	mov	r1, r5
 800b6d0:	4638      	mov	r0, r7
 800b6d2:	f7ff ff6b 	bl	800b5ac <__ssputs_r>
 800b6d6:	3001      	adds	r0, #1
 800b6d8:	f000 80a7 	beq.w	800b82a <_svfiprintf_r+0x1c6>
 800b6dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b6de:	445a      	add	r2, fp
 800b6e0:	9209      	str	r2, [sp, #36]	@ 0x24
 800b6e2:	f89a 3000 	ldrb.w	r3, [sl]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	f000 809f 	beq.w	800b82a <_svfiprintf_r+0x1c6>
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	f04f 32ff 	mov.w	r2, #4294967295
 800b6f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b6f6:	f10a 0a01 	add.w	sl, sl, #1
 800b6fa:	9304      	str	r3, [sp, #16]
 800b6fc:	9307      	str	r3, [sp, #28]
 800b6fe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b702:	931a      	str	r3, [sp, #104]	@ 0x68
 800b704:	4654      	mov	r4, sl
 800b706:	2205      	movs	r2, #5
 800b708:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b70c:	484e      	ldr	r0, [pc, #312]	@ (800b848 <_svfiprintf_r+0x1e4>)
 800b70e:	f7f4 fd5f 	bl	80001d0 <memchr>
 800b712:	9a04      	ldr	r2, [sp, #16]
 800b714:	b9d8      	cbnz	r0, 800b74e <_svfiprintf_r+0xea>
 800b716:	06d0      	lsls	r0, r2, #27
 800b718:	bf44      	itt	mi
 800b71a:	2320      	movmi	r3, #32
 800b71c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b720:	0711      	lsls	r1, r2, #28
 800b722:	bf44      	itt	mi
 800b724:	232b      	movmi	r3, #43	@ 0x2b
 800b726:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b72a:	f89a 3000 	ldrb.w	r3, [sl]
 800b72e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b730:	d015      	beq.n	800b75e <_svfiprintf_r+0xfa>
 800b732:	9a07      	ldr	r2, [sp, #28]
 800b734:	4654      	mov	r4, sl
 800b736:	2000      	movs	r0, #0
 800b738:	f04f 0c0a 	mov.w	ip, #10
 800b73c:	4621      	mov	r1, r4
 800b73e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b742:	3b30      	subs	r3, #48	@ 0x30
 800b744:	2b09      	cmp	r3, #9
 800b746:	d94b      	bls.n	800b7e0 <_svfiprintf_r+0x17c>
 800b748:	b1b0      	cbz	r0, 800b778 <_svfiprintf_r+0x114>
 800b74a:	9207      	str	r2, [sp, #28]
 800b74c:	e014      	b.n	800b778 <_svfiprintf_r+0x114>
 800b74e:	eba0 0308 	sub.w	r3, r0, r8
 800b752:	fa09 f303 	lsl.w	r3, r9, r3
 800b756:	4313      	orrs	r3, r2
 800b758:	9304      	str	r3, [sp, #16]
 800b75a:	46a2      	mov	sl, r4
 800b75c:	e7d2      	b.n	800b704 <_svfiprintf_r+0xa0>
 800b75e:	9b03      	ldr	r3, [sp, #12]
 800b760:	1d19      	adds	r1, r3, #4
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	9103      	str	r1, [sp, #12]
 800b766:	2b00      	cmp	r3, #0
 800b768:	bfbb      	ittet	lt
 800b76a:	425b      	neglt	r3, r3
 800b76c:	f042 0202 	orrlt.w	r2, r2, #2
 800b770:	9307      	strge	r3, [sp, #28]
 800b772:	9307      	strlt	r3, [sp, #28]
 800b774:	bfb8      	it	lt
 800b776:	9204      	strlt	r2, [sp, #16]
 800b778:	7823      	ldrb	r3, [r4, #0]
 800b77a:	2b2e      	cmp	r3, #46	@ 0x2e
 800b77c:	d10a      	bne.n	800b794 <_svfiprintf_r+0x130>
 800b77e:	7863      	ldrb	r3, [r4, #1]
 800b780:	2b2a      	cmp	r3, #42	@ 0x2a
 800b782:	d132      	bne.n	800b7ea <_svfiprintf_r+0x186>
 800b784:	9b03      	ldr	r3, [sp, #12]
 800b786:	1d1a      	adds	r2, r3, #4
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	9203      	str	r2, [sp, #12]
 800b78c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b790:	3402      	adds	r4, #2
 800b792:	9305      	str	r3, [sp, #20]
 800b794:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b858 <_svfiprintf_r+0x1f4>
 800b798:	7821      	ldrb	r1, [r4, #0]
 800b79a:	2203      	movs	r2, #3
 800b79c:	4650      	mov	r0, sl
 800b79e:	f7f4 fd17 	bl	80001d0 <memchr>
 800b7a2:	b138      	cbz	r0, 800b7b4 <_svfiprintf_r+0x150>
 800b7a4:	9b04      	ldr	r3, [sp, #16]
 800b7a6:	eba0 000a 	sub.w	r0, r0, sl
 800b7aa:	2240      	movs	r2, #64	@ 0x40
 800b7ac:	4082      	lsls	r2, r0
 800b7ae:	4313      	orrs	r3, r2
 800b7b0:	3401      	adds	r4, #1
 800b7b2:	9304      	str	r3, [sp, #16]
 800b7b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7b8:	4824      	ldr	r0, [pc, #144]	@ (800b84c <_svfiprintf_r+0x1e8>)
 800b7ba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b7be:	2206      	movs	r2, #6
 800b7c0:	f7f4 fd06 	bl	80001d0 <memchr>
 800b7c4:	2800      	cmp	r0, #0
 800b7c6:	d036      	beq.n	800b836 <_svfiprintf_r+0x1d2>
 800b7c8:	4b21      	ldr	r3, [pc, #132]	@ (800b850 <_svfiprintf_r+0x1ec>)
 800b7ca:	bb1b      	cbnz	r3, 800b814 <_svfiprintf_r+0x1b0>
 800b7cc:	9b03      	ldr	r3, [sp, #12]
 800b7ce:	3307      	adds	r3, #7
 800b7d0:	f023 0307 	bic.w	r3, r3, #7
 800b7d4:	3308      	adds	r3, #8
 800b7d6:	9303      	str	r3, [sp, #12]
 800b7d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7da:	4433      	add	r3, r6
 800b7dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800b7de:	e76a      	b.n	800b6b6 <_svfiprintf_r+0x52>
 800b7e0:	fb0c 3202 	mla	r2, ip, r2, r3
 800b7e4:	460c      	mov	r4, r1
 800b7e6:	2001      	movs	r0, #1
 800b7e8:	e7a8      	b.n	800b73c <_svfiprintf_r+0xd8>
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	3401      	adds	r4, #1
 800b7ee:	9305      	str	r3, [sp, #20]
 800b7f0:	4619      	mov	r1, r3
 800b7f2:	f04f 0c0a 	mov.w	ip, #10
 800b7f6:	4620      	mov	r0, r4
 800b7f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b7fc:	3a30      	subs	r2, #48	@ 0x30
 800b7fe:	2a09      	cmp	r2, #9
 800b800:	d903      	bls.n	800b80a <_svfiprintf_r+0x1a6>
 800b802:	2b00      	cmp	r3, #0
 800b804:	d0c6      	beq.n	800b794 <_svfiprintf_r+0x130>
 800b806:	9105      	str	r1, [sp, #20]
 800b808:	e7c4      	b.n	800b794 <_svfiprintf_r+0x130>
 800b80a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b80e:	4604      	mov	r4, r0
 800b810:	2301      	movs	r3, #1
 800b812:	e7f0      	b.n	800b7f6 <_svfiprintf_r+0x192>
 800b814:	ab03      	add	r3, sp, #12
 800b816:	9300      	str	r3, [sp, #0]
 800b818:	462a      	mov	r2, r5
 800b81a:	4b0e      	ldr	r3, [pc, #56]	@ (800b854 <_svfiprintf_r+0x1f0>)
 800b81c:	a904      	add	r1, sp, #16
 800b81e:	4638      	mov	r0, r7
 800b820:	f7fc fc80 	bl	8008124 <_printf_float>
 800b824:	1c42      	adds	r2, r0, #1
 800b826:	4606      	mov	r6, r0
 800b828:	d1d6      	bne.n	800b7d8 <_svfiprintf_r+0x174>
 800b82a:	89ab      	ldrh	r3, [r5, #12]
 800b82c:	065b      	lsls	r3, r3, #25
 800b82e:	f53f af2d 	bmi.w	800b68c <_svfiprintf_r+0x28>
 800b832:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b834:	e72c      	b.n	800b690 <_svfiprintf_r+0x2c>
 800b836:	ab03      	add	r3, sp, #12
 800b838:	9300      	str	r3, [sp, #0]
 800b83a:	462a      	mov	r2, r5
 800b83c:	4b05      	ldr	r3, [pc, #20]	@ (800b854 <_svfiprintf_r+0x1f0>)
 800b83e:	a904      	add	r1, sp, #16
 800b840:	4638      	mov	r0, r7
 800b842:	f7fc ff07 	bl	8008654 <_printf_i>
 800b846:	e7ed      	b.n	800b824 <_svfiprintf_r+0x1c0>
 800b848:	0800d7c7 	.word	0x0800d7c7
 800b84c:	0800d7d1 	.word	0x0800d7d1
 800b850:	08008125 	.word	0x08008125
 800b854:	0800b5ad 	.word	0x0800b5ad
 800b858:	0800d7cd 	.word	0x0800d7cd

0800b85c <_sungetc_r>:
 800b85c:	b538      	push	{r3, r4, r5, lr}
 800b85e:	1c4b      	adds	r3, r1, #1
 800b860:	4614      	mov	r4, r2
 800b862:	d103      	bne.n	800b86c <_sungetc_r+0x10>
 800b864:	f04f 35ff 	mov.w	r5, #4294967295
 800b868:	4628      	mov	r0, r5
 800b86a:	bd38      	pop	{r3, r4, r5, pc}
 800b86c:	8993      	ldrh	r3, [r2, #12]
 800b86e:	f023 0320 	bic.w	r3, r3, #32
 800b872:	8193      	strh	r3, [r2, #12]
 800b874:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b876:	6852      	ldr	r2, [r2, #4]
 800b878:	b2cd      	uxtb	r5, r1
 800b87a:	b18b      	cbz	r3, 800b8a0 <_sungetc_r+0x44>
 800b87c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800b87e:	4293      	cmp	r3, r2
 800b880:	dd08      	ble.n	800b894 <_sungetc_r+0x38>
 800b882:	6823      	ldr	r3, [r4, #0]
 800b884:	1e5a      	subs	r2, r3, #1
 800b886:	6022      	str	r2, [r4, #0]
 800b888:	f803 5c01 	strb.w	r5, [r3, #-1]
 800b88c:	6863      	ldr	r3, [r4, #4]
 800b88e:	3301      	adds	r3, #1
 800b890:	6063      	str	r3, [r4, #4]
 800b892:	e7e9      	b.n	800b868 <_sungetc_r+0xc>
 800b894:	4621      	mov	r1, r4
 800b896:	f000 fbe4 	bl	800c062 <__submore>
 800b89a:	2800      	cmp	r0, #0
 800b89c:	d0f1      	beq.n	800b882 <_sungetc_r+0x26>
 800b89e:	e7e1      	b.n	800b864 <_sungetc_r+0x8>
 800b8a0:	6921      	ldr	r1, [r4, #16]
 800b8a2:	6823      	ldr	r3, [r4, #0]
 800b8a4:	b151      	cbz	r1, 800b8bc <_sungetc_r+0x60>
 800b8a6:	4299      	cmp	r1, r3
 800b8a8:	d208      	bcs.n	800b8bc <_sungetc_r+0x60>
 800b8aa:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800b8ae:	42a9      	cmp	r1, r5
 800b8b0:	d104      	bne.n	800b8bc <_sungetc_r+0x60>
 800b8b2:	3b01      	subs	r3, #1
 800b8b4:	3201      	adds	r2, #1
 800b8b6:	6023      	str	r3, [r4, #0]
 800b8b8:	6062      	str	r2, [r4, #4]
 800b8ba:	e7d5      	b.n	800b868 <_sungetc_r+0xc>
 800b8bc:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 800b8c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b8c4:	6363      	str	r3, [r4, #52]	@ 0x34
 800b8c6:	2303      	movs	r3, #3
 800b8c8:	63a3      	str	r3, [r4, #56]	@ 0x38
 800b8ca:	4623      	mov	r3, r4
 800b8cc:	f803 5f46 	strb.w	r5, [r3, #70]!
 800b8d0:	6023      	str	r3, [r4, #0]
 800b8d2:	2301      	movs	r3, #1
 800b8d4:	e7dc      	b.n	800b890 <_sungetc_r+0x34>

0800b8d6 <__ssrefill_r>:
 800b8d6:	b510      	push	{r4, lr}
 800b8d8:	460c      	mov	r4, r1
 800b8da:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800b8dc:	b169      	cbz	r1, 800b8fa <__ssrefill_r+0x24>
 800b8de:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b8e2:	4299      	cmp	r1, r3
 800b8e4:	d001      	beq.n	800b8ea <__ssrefill_r+0x14>
 800b8e6:	f7fe fa33 	bl	8009d50 <_free_r>
 800b8ea:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b8ec:	6063      	str	r3, [r4, #4]
 800b8ee:	2000      	movs	r0, #0
 800b8f0:	6360      	str	r0, [r4, #52]	@ 0x34
 800b8f2:	b113      	cbz	r3, 800b8fa <__ssrefill_r+0x24>
 800b8f4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800b8f6:	6023      	str	r3, [r4, #0]
 800b8f8:	bd10      	pop	{r4, pc}
 800b8fa:	6923      	ldr	r3, [r4, #16]
 800b8fc:	6023      	str	r3, [r4, #0]
 800b8fe:	2300      	movs	r3, #0
 800b900:	6063      	str	r3, [r4, #4]
 800b902:	89a3      	ldrh	r3, [r4, #12]
 800b904:	f043 0320 	orr.w	r3, r3, #32
 800b908:	81a3      	strh	r3, [r4, #12]
 800b90a:	f04f 30ff 	mov.w	r0, #4294967295
 800b90e:	e7f3      	b.n	800b8f8 <__ssrefill_r+0x22>

0800b910 <__ssvfiscanf_r>:
 800b910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b914:	460c      	mov	r4, r1
 800b916:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 800b91a:	2100      	movs	r1, #0
 800b91c:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800b920:	49a6      	ldr	r1, [pc, #664]	@ (800bbbc <__ssvfiscanf_r+0x2ac>)
 800b922:	91a0      	str	r1, [sp, #640]	@ 0x280
 800b924:	f10d 0804 	add.w	r8, sp, #4
 800b928:	49a5      	ldr	r1, [pc, #660]	@ (800bbc0 <__ssvfiscanf_r+0x2b0>)
 800b92a:	4fa6      	ldr	r7, [pc, #664]	@ (800bbc4 <__ssvfiscanf_r+0x2b4>)
 800b92c:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800b930:	4606      	mov	r6, r0
 800b932:	91a1      	str	r1, [sp, #644]	@ 0x284
 800b934:	9300      	str	r3, [sp, #0]
 800b936:	f892 9000 	ldrb.w	r9, [r2]
 800b93a:	f1b9 0f00 	cmp.w	r9, #0
 800b93e:	f000 8158 	beq.w	800bbf2 <__ssvfiscanf_r+0x2e2>
 800b942:	f817 3009 	ldrb.w	r3, [r7, r9]
 800b946:	f013 0308 	ands.w	r3, r3, #8
 800b94a:	f102 0501 	add.w	r5, r2, #1
 800b94e:	d019      	beq.n	800b984 <__ssvfiscanf_r+0x74>
 800b950:	6863      	ldr	r3, [r4, #4]
 800b952:	2b00      	cmp	r3, #0
 800b954:	dd0f      	ble.n	800b976 <__ssvfiscanf_r+0x66>
 800b956:	6823      	ldr	r3, [r4, #0]
 800b958:	781a      	ldrb	r2, [r3, #0]
 800b95a:	5cba      	ldrb	r2, [r7, r2]
 800b95c:	0712      	lsls	r2, r2, #28
 800b95e:	d401      	bmi.n	800b964 <__ssvfiscanf_r+0x54>
 800b960:	462a      	mov	r2, r5
 800b962:	e7e8      	b.n	800b936 <__ssvfiscanf_r+0x26>
 800b964:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800b966:	3201      	adds	r2, #1
 800b968:	9245      	str	r2, [sp, #276]	@ 0x114
 800b96a:	6862      	ldr	r2, [r4, #4]
 800b96c:	3301      	adds	r3, #1
 800b96e:	3a01      	subs	r2, #1
 800b970:	6062      	str	r2, [r4, #4]
 800b972:	6023      	str	r3, [r4, #0]
 800b974:	e7ec      	b.n	800b950 <__ssvfiscanf_r+0x40>
 800b976:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800b978:	4621      	mov	r1, r4
 800b97a:	4630      	mov	r0, r6
 800b97c:	4798      	blx	r3
 800b97e:	2800      	cmp	r0, #0
 800b980:	d0e9      	beq.n	800b956 <__ssvfiscanf_r+0x46>
 800b982:	e7ed      	b.n	800b960 <__ssvfiscanf_r+0x50>
 800b984:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 800b988:	f040 8085 	bne.w	800ba96 <__ssvfiscanf_r+0x186>
 800b98c:	9341      	str	r3, [sp, #260]	@ 0x104
 800b98e:	9343      	str	r3, [sp, #268]	@ 0x10c
 800b990:	7853      	ldrb	r3, [r2, #1]
 800b992:	2b2a      	cmp	r3, #42	@ 0x2a
 800b994:	bf02      	ittt	eq
 800b996:	2310      	moveq	r3, #16
 800b998:	1c95      	addeq	r5, r2, #2
 800b99a:	9341      	streq	r3, [sp, #260]	@ 0x104
 800b99c:	220a      	movs	r2, #10
 800b99e:	46aa      	mov	sl, r5
 800b9a0:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800b9a4:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800b9a8:	2b09      	cmp	r3, #9
 800b9aa:	d91e      	bls.n	800b9ea <__ssvfiscanf_r+0xda>
 800b9ac:	f8df b218 	ldr.w	fp, [pc, #536]	@ 800bbc8 <__ssvfiscanf_r+0x2b8>
 800b9b0:	2203      	movs	r2, #3
 800b9b2:	4658      	mov	r0, fp
 800b9b4:	f7f4 fc0c 	bl	80001d0 <memchr>
 800b9b8:	b138      	cbz	r0, 800b9ca <__ssvfiscanf_r+0xba>
 800b9ba:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800b9bc:	eba0 000b 	sub.w	r0, r0, fp
 800b9c0:	2301      	movs	r3, #1
 800b9c2:	4083      	lsls	r3, r0
 800b9c4:	4313      	orrs	r3, r2
 800b9c6:	9341      	str	r3, [sp, #260]	@ 0x104
 800b9c8:	4655      	mov	r5, sl
 800b9ca:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b9ce:	2b78      	cmp	r3, #120	@ 0x78
 800b9d0:	d806      	bhi.n	800b9e0 <__ssvfiscanf_r+0xd0>
 800b9d2:	2b57      	cmp	r3, #87	@ 0x57
 800b9d4:	d810      	bhi.n	800b9f8 <__ssvfiscanf_r+0xe8>
 800b9d6:	2b25      	cmp	r3, #37	@ 0x25
 800b9d8:	d05d      	beq.n	800ba96 <__ssvfiscanf_r+0x186>
 800b9da:	d857      	bhi.n	800ba8c <__ssvfiscanf_r+0x17c>
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d075      	beq.n	800bacc <__ssvfiscanf_r+0x1bc>
 800b9e0:	2303      	movs	r3, #3
 800b9e2:	9347      	str	r3, [sp, #284]	@ 0x11c
 800b9e4:	230a      	movs	r3, #10
 800b9e6:	9342      	str	r3, [sp, #264]	@ 0x108
 800b9e8:	e088      	b.n	800bafc <__ssvfiscanf_r+0x1ec>
 800b9ea:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800b9ec:	fb02 1103 	mla	r1, r2, r3, r1
 800b9f0:	3930      	subs	r1, #48	@ 0x30
 800b9f2:	9143      	str	r1, [sp, #268]	@ 0x10c
 800b9f4:	4655      	mov	r5, sl
 800b9f6:	e7d2      	b.n	800b99e <__ssvfiscanf_r+0x8e>
 800b9f8:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800b9fc:	2a20      	cmp	r2, #32
 800b9fe:	d8ef      	bhi.n	800b9e0 <__ssvfiscanf_r+0xd0>
 800ba00:	a101      	add	r1, pc, #4	@ (adr r1, 800ba08 <__ssvfiscanf_r+0xf8>)
 800ba02:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ba06:	bf00      	nop
 800ba08:	0800badb 	.word	0x0800badb
 800ba0c:	0800b9e1 	.word	0x0800b9e1
 800ba10:	0800b9e1 	.word	0x0800b9e1
 800ba14:	0800bb35 	.word	0x0800bb35
 800ba18:	0800b9e1 	.word	0x0800b9e1
 800ba1c:	0800b9e1 	.word	0x0800b9e1
 800ba20:	0800b9e1 	.word	0x0800b9e1
 800ba24:	0800b9e1 	.word	0x0800b9e1
 800ba28:	0800b9e1 	.word	0x0800b9e1
 800ba2c:	0800b9e1 	.word	0x0800b9e1
 800ba30:	0800b9e1 	.word	0x0800b9e1
 800ba34:	0800bb4b 	.word	0x0800bb4b
 800ba38:	0800bb31 	.word	0x0800bb31
 800ba3c:	0800ba93 	.word	0x0800ba93
 800ba40:	0800ba93 	.word	0x0800ba93
 800ba44:	0800ba93 	.word	0x0800ba93
 800ba48:	0800b9e1 	.word	0x0800b9e1
 800ba4c:	0800baed 	.word	0x0800baed
 800ba50:	0800b9e1 	.word	0x0800b9e1
 800ba54:	0800b9e1 	.word	0x0800b9e1
 800ba58:	0800b9e1 	.word	0x0800b9e1
 800ba5c:	0800b9e1 	.word	0x0800b9e1
 800ba60:	0800bb5b 	.word	0x0800bb5b
 800ba64:	0800baf5 	.word	0x0800baf5
 800ba68:	0800bad3 	.word	0x0800bad3
 800ba6c:	0800b9e1 	.word	0x0800b9e1
 800ba70:	0800b9e1 	.word	0x0800b9e1
 800ba74:	0800bb57 	.word	0x0800bb57
 800ba78:	0800b9e1 	.word	0x0800b9e1
 800ba7c:	0800bb31 	.word	0x0800bb31
 800ba80:	0800b9e1 	.word	0x0800b9e1
 800ba84:	0800b9e1 	.word	0x0800b9e1
 800ba88:	0800badb 	.word	0x0800badb
 800ba8c:	3b45      	subs	r3, #69	@ 0x45
 800ba8e:	2b02      	cmp	r3, #2
 800ba90:	d8a6      	bhi.n	800b9e0 <__ssvfiscanf_r+0xd0>
 800ba92:	2305      	movs	r3, #5
 800ba94:	e031      	b.n	800bafa <__ssvfiscanf_r+0x1ea>
 800ba96:	6863      	ldr	r3, [r4, #4]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	dd0d      	ble.n	800bab8 <__ssvfiscanf_r+0x1a8>
 800ba9c:	6823      	ldr	r3, [r4, #0]
 800ba9e:	781a      	ldrb	r2, [r3, #0]
 800baa0:	454a      	cmp	r2, r9
 800baa2:	f040 80a6 	bne.w	800bbf2 <__ssvfiscanf_r+0x2e2>
 800baa6:	3301      	adds	r3, #1
 800baa8:	6862      	ldr	r2, [r4, #4]
 800baaa:	6023      	str	r3, [r4, #0]
 800baac:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800baae:	3a01      	subs	r2, #1
 800bab0:	3301      	adds	r3, #1
 800bab2:	6062      	str	r2, [r4, #4]
 800bab4:	9345      	str	r3, [sp, #276]	@ 0x114
 800bab6:	e753      	b.n	800b960 <__ssvfiscanf_r+0x50>
 800bab8:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800baba:	4621      	mov	r1, r4
 800babc:	4630      	mov	r0, r6
 800babe:	4798      	blx	r3
 800bac0:	2800      	cmp	r0, #0
 800bac2:	d0eb      	beq.n	800ba9c <__ssvfiscanf_r+0x18c>
 800bac4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800bac6:	2800      	cmp	r0, #0
 800bac8:	f040 808b 	bne.w	800bbe2 <__ssvfiscanf_r+0x2d2>
 800bacc:	f04f 30ff 	mov.w	r0, #4294967295
 800bad0:	e08b      	b.n	800bbea <__ssvfiscanf_r+0x2da>
 800bad2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800bad4:	f042 0220 	orr.w	r2, r2, #32
 800bad8:	9241      	str	r2, [sp, #260]	@ 0x104
 800bada:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800badc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bae0:	9241      	str	r2, [sp, #260]	@ 0x104
 800bae2:	2210      	movs	r2, #16
 800bae4:	2b6e      	cmp	r3, #110	@ 0x6e
 800bae6:	9242      	str	r2, [sp, #264]	@ 0x108
 800bae8:	d902      	bls.n	800baf0 <__ssvfiscanf_r+0x1e0>
 800baea:	e005      	b.n	800baf8 <__ssvfiscanf_r+0x1e8>
 800baec:	2300      	movs	r3, #0
 800baee:	9342      	str	r3, [sp, #264]	@ 0x108
 800baf0:	2303      	movs	r3, #3
 800baf2:	e002      	b.n	800bafa <__ssvfiscanf_r+0x1ea>
 800baf4:	2308      	movs	r3, #8
 800baf6:	9342      	str	r3, [sp, #264]	@ 0x108
 800baf8:	2304      	movs	r3, #4
 800bafa:	9347      	str	r3, [sp, #284]	@ 0x11c
 800bafc:	6863      	ldr	r3, [r4, #4]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	dd39      	ble.n	800bb76 <__ssvfiscanf_r+0x266>
 800bb02:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800bb04:	0659      	lsls	r1, r3, #25
 800bb06:	d404      	bmi.n	800bb12 <__ssvfiscanf_r+0x202>
 800bb08:	6823      	ldr	r3, [r4, #0]
 800bb0a:	781a      	ldrb	r2, [r3, #0]
 800bb0c:	5cba      	ldrb	r2, [r7, r2]
 800bb0e:	0712      	lsls	r2, r2, #28
 800bb10:	d438      	bmi.n	800bb84 <__ssvfiscanf_r+0x274>
 800bb12:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800bb14:	2b02      	cmp	r3, #2
 800bb16:	dc47      	bgt.n	800bba8 <__ssvfiscanf_r+0x298>
 800bb18:	466b      	mov	r3, sp
 800bb1a:	4622      	mov	r2, r4
 800bb1c:	a941      	add	r1, sp, #260	@ 0x104
 800bb1e:	4630      	mov	r0, r6
 800bb20:	f000 f86c 	bl	800bbfc <_scanf_chars>
 800bb24:	2801      	cmp	r0, #1
 800bb26:	d064      	beq.n	800bbf2 <__ssvfiscanf_r+0x2e2>
 800bb28:	2802      	cmp	r0, #2
 800bb2a:	f47f af19 	bne.w	800b960 <__ssvfiscanf_r+0x50>
 800bb2e:	e7c9      	b.n	800bac4 <__ssvfiscanf_r+0x1b4>
 800bb30:	220a      	movs	r2, #10
 800bb32:	e7d7      	b.n	800bae4 <__ssvfiscanf_r+0x1d4>
 800bb34:	4629      	mov	r1, r5
 800bb36:	4640      	mov	r0, r8
 800bb38:	f000 fa5a 	bl	800bff0 <__sccl>
 800bb3c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800bb3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bb42:	9341      	str	r3, [sp, #260]	@ 0x104
 800bb44:	4605      	mov	r5, r0
 800bb46:	2301      	movs	r3, #1
 800bb48:	e7d7      	b.n	800bafa <__ssvfiscanf_r+0x1ea>
 800bb4a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800bb4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bb50:	9341      	str	r3, [sp, #260]	@ 0x104
 800bb52:	2300      	movs	r3, #0
 800bb54:	e7d1      	b.n	800bafa <__ssvfiscanf_r+0x1ea>
 800bb56:	2302      	movs	r3, #2
 800bb58:	e7cf      	b.n	800bafa <__ssvfiscanf_r+0x1ea>
 800bb5a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800bb5c:	06c3      	lsls	r3, r0, #27
 800bb5e:	f53f aeff 	bmi.w	800b960 <__ssvfiscanf_r+0x50>
 800bb62:	9b00      	ldr	r3, [sp, #0]
 800bb64:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800bb66:	1d19      	adds	r1, r3, #4
 800bb68:	9100      	str	r1, [sp, #0]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	07c0      	lsls	r0, r0, #31
 800bb6e:	bf4c      	ite	mi
 800bb70:	801a      	strhmi	r2, [r3, #0]
 800bb72:	601a      	strpl	r2, [r3, #0]
 800bb74:	e6f4      	b.n	800b960 <__ssvfiscanf_r+0x50>
 800bb76:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800bb78:	4621      	mov	r1, r4
 800bb7a:	4630      	mov	r0, r6
 800bb7c:	4798      	blx	r3
 800bb7e:	2800      	cmp	r0, #0
 800bb80:	d0bf      	beq.n	800bb02 <__ssvfiscanf_r+0x1f2>
 800bb82:	e79f      	b.n	800bac4 <__ssvfiscanf_r+0x1b4>
 800bb84:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800bb86:	3201      	adds	r2, #1
 800bb88:	9245      	str	r2, [sp, #276]	@ 0x114
 800bb8a:	6862      	ldr	r2, [r4, #4]
 800bb8c:	3a01      	subs	r2, #1
 800bb8e:	2a00      	cmp	r2, #0
 800bb90:	6062      	str	r2, [r4, #4]
 800bb92:	dd02      	ble.n	800bb9a <__ssvfiscanf_r+0x28a>
 800bb94:	3301      	adds	r3, #1
 800bb96:	6023      	str	r3, [r4, #0]
 800bb98:	e7b6      	b.n	800bb08 <__ssvfiscanf_r+0x1f8>
 800bb9a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800bb9c:	4621      	mov	r1, r4
 800bb9e:	4630      	mov	r0, r6
 800bba0:	4798      	blx	r3
 800bba2:	2800      	cmp	r0, #0
 800bba4:	d0b0      	beq.n	800bb08 <__ssvfiscanf_r+0x1f8>
 800bba6:	e78d      	b.n	800bac4 <__ssvfiscanf_r+0x1b4>
 800bba8:	2b04      	cmp	r3, #4
 800bbaa:	dc0f      	bgt.n	800bbcc <__ssvfiscanf_r+0x2bc>
 800bbac:	466b      	mov	r3, sp
 800bbae:	4622      	mov	r2, r4
 800bbb0:	a941      	add	r1, sp, #260	@ 0x104
 800bbb2:	4630      	mov	r0, r6
 800bbb4:	f000 f87c 	bl	800bcb0 <_scanf_i>
 800bbb8:	e7b4      	b.n	800bb24 <__ssvfiscanf_r+0x214>
 800bbba:	bf00      	nop
 800bbbc:	0800b85d 	.word	0x0800b85d
 800bbc0:	0800b8d7 	.word	0x0800b8d7
 800bbc4:	0800d9e9 	.word	0x0800d9e9
 800bbc8:	0800d7cd 	.word	0x0800d7cd
 800bbcc:	4b0a      	ldr	r3, [pc, #40]	@ (800bbf8 <__ssvfiscanf_r+0x2e8>)
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	f43f aec6 	beq.w	800b960 <__ssvfiscanf_r+0x50>
 800bbd4:	466b      	mov	r3, sp
 800bbd6:	4622      	mov	r2, r4
 800bbd8:	a941      	add	r1, sp, #260	@ 0x104
 800bbda:	4630      	mov	r0, r6
 800bbdc:	f7fc fe58 	bl	8008890 <_scanf_float>
 800bbe0:	e7a0      	b.n	800bb24 <__ssvfiscanf_r+0x214>
 800bbe2:	89a3      	ldrh	r3, [r4, #12]
 800bbe4:	065b      	lsls	r3, r3, #25
 800bbe6:	f53f af71 	bmi.w	800bacc <__ssvfiscanf_r+0x1bc>
 800bbea:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 800bbee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbf2:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800bbf4:	e7f9      	b.n	800bbea <__ssvfiscanf_r+0x2da>
 800bbf6:	bf00      	nop
 800bbf8:	08008891 	.word	0x08008891

0800bbfc <_scanf_chars>:
 800bbfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc00:	4615      	mov	r5, r2
 800bc02:	688a      	ldr	r2, [r1, #8]
 800bc04:	4680      	mov	r8, r0
 800bc06:	460c      	mov	r4, r1
 800bc08:	b932      	cbnz	r2, 800bc18 <_scanf_chars+0x1c>
 800bc0a:	698a      	ldr	r2, [r1, #24]
 800bc0c:	2a00      	cmp	r2, #0
 800bc0e:	bf14      	ite	ne
 800bc10:	f04f 32ff 	movne.w	r2, #4294967295
 800bc14:	2201      	moveq	r2, #1
 800bc16:	608a      	str	r2, [r1, #8]
 800bc18:	6822      	ldr	r2, [r4, #0]
 800bc1a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800bcac <_scanf_chars+0xb0>
 800bc1e:	06d1      	lsls	r1, r2, #27
 800bc20:	bf5f      	itttt	pl
 800bc22:	681a      	ldrpl	r2, [r3, #0]
 800bc24:	1d11      	addpl	r1, r2, #4
 800bc26:	6019      	strpl	r1, [r3, #0]
 800bc28:	6816      	ldrpl	r6, [r2, #0]
 800bc2a:	2700      	movs	r7, #0
 800bc2c:	69a0      	ldr	r0, [r4, #24]
 800bc2e:	b188      	cbz	r0, 800bc54 <_scanf_chars+0x58>
 800bc30:	2801      	cmp	r0, #1
 800bc32:	d107      	bne.n	800bc44 <_scanf_chars+0x48>
 800bc34:	682b      	ldr	r3, [r5, #0]
 800bc36:	781a      	ldrb	r2, [r3, #0]
 800bc38:	6963      	ldr	r3, [r4, #20]
 800bc3a:	5c9b      	ldrb	r3, [r3, r2]
 800bc3c:	b953      	cbnz	r3, 800bc54 <_scanf_chars+0x58>
 800bc3e:	2f00      	cmp	r7, #0
 800bc40:	d031      	beq.n	800bca6 <_scanf_chars+0xaa>
 800bc42:	e022      	b.n	800bc8a <_scanf_chars+0x8e>
 800bc44:	2802      	cmp	r0, #2
 800bc46:	d120      	bne.n	800bc8a <_scanf_chars+0x8e>
 800bc48:	682b      	ldr	r3, [r5, #0]
 800bc4a:	781b      	ldrb	r3, [r3, #0]
 800bc4c:	f819 3003 	ldrb.w	r3, [r9, r3]
 800bc50:	071b      	lsls	r3, r3, #28
 800bc52:	d41a      	bmi.n	800bc8a <_scanf_chars+0x8e>
 800bc54:	6823      	ldr	r3, [r4, #0]
 800bc56:	06da      	lsls	r2, r3, #27
 800bc58:	bf5e      	ittt	pl
 800bc5a:	682b      	ldrpl	r3, [r5, #0]
 800bc5c:	781b      	ldrbpl	r3, [r3, #0]
 800bc5e:	f806 3b01 	strbpl.w	r3, [r6], #1
 800bc62:	682a      	ldr	r2, [r5, #0]
 800bc64:	686b      	ldr	r3, [r5, #4]
 800bc66:	3201      	adds	r2, #1
 800bc68:	602a      	str	r2, [r5, #0]
 800bc6a:	68a2      	ldr	r2, [r4, #8]
 800bc6c:	3b01      	subs	r3, #1
 800bc6e:	3a01      	subs	r2, #1
 800bc70:	606b      	str	r3, [r5, #4]
 800bc72:	3701      	adds	r7, #1
 800bc74:	60a2      	str	r2, [r4, #8]
 800bc76:	b142      	cbz	r2, 800bc8a <_scanf_chars+0x8e>
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	dcd7      	bgt.n	800bc2c <_scanf_chars+0x30>
 800bc7c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800bc80:	4629      	mov	r1, r5
 800bc82:	4640      	mov	r0, r8
 800bc84:	4798      	blx	r3
 800bc86:	2800      	cmp	r0, #0
 800bc88:	d0d0      	beq.n	800bc2c <_scanf_chars+0x30>
 800bc8a:	6823      	ldr	r3, [r4, #0]
 800bc8c:	f013 0310 	ands.w	r3, r3, #16
 800bc90:	d105      	bne.n	800bc9e <_scanf_chars+0xa2>
 800bc92:	68e2      	ldr	r2, [r4, #12]
 800bc94:	3201      	adds	r2, #1
 800bc96:	60e2      	str	r2, [r4, #12]
 800bc98:	69a2      	ldr	r2, [r4, #24]
 800bc9a:	b102      	cbz	r2, 800bc9e <_scanf_chars+0xa2>
 800bc9c:	7033      	strb	r3, [r6, #0]
 800bc9e:	6923      	ldr	r3, [r4, #16]
 800bca0:	443b      	add	r3, r7
 800bca2:	6123      	str	r3, [r4, #16]
 800bca4:	2000      	movs	r0, #0
 800bca6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bcaa:	bf00      	nop
 800bcac:	0800d9e9 	.word	0x0800d9e9

0800bcb0 <_scanf_i>:
 800bcb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcb4:	4698      	mov	r8, r3
 800bcb6:	4b74      	ldr	r3, [pc, #464]	@ (800be88 <_scanf_i+0x1d8>)
 800bcb8:	460c      	mov	r4, r1
 800bcba:	4682      	mov	sl, r0
 800bcbc:	4616      	mov	r6, r2
 800bcbe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bcc2:	b087      	sub	sp, #28
 800bcc4:	ab03      	add	r3, sp, #12
 800bcc6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800bcca:	4b70      	ldr	r3, [pc, #448]	@ (800be8c <_scanf_i+0x1dc>)
 800bccc:	69a1      	ldr	r1, [r4, #24]
 800bcce:	4a70      	ldr	r2, [pc, #448]	@ (800be90 <_scanf_i+0x1e0>)
 800bcd0:	2903      	cmp	r1, #3
 800bcd2:	bf08      	it	eq
 800bcd4:	461a      	moveq	r2, r3
 800bcd6:	68a3      	ldr	r3, [r4, #8]
 800bcd8:	9201      	str	r2, [sp, #4]
 800bcda:	1e5a      	subs	r2, r3, #1
 800bcdc:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800bce0:	bf88      	it	hi
 800bce2:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800bce6:	4627      	mov	r7, r4
 800bce8:	bf82      	ittt	hi
 800bcea:	eb03 0905 	addhi.w	r9, r3, r5
 800bcee:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800bcf2:	60a3      	strhi	r3, [r4, #8]
 800bcf4:	f857 3b1c 	ldr.w	r3, [r7], #28
 800bcf8:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800bcfc:	bf98      	it	ls
 800bcfe:	f04f 0900 	movls.w	r9, #0
 800bd02:	6023      	str	r3, [r4, #0]
 800bd04:	463d      	mov	r5, r7
 800bd06:	f04f 0b00 	mov.w	fp, #0
 800bd0a:	6831      	ldr	r1, [r6, #0]
 800bd0c:	ab03      	add	r3, sp, #12
 800bd0e:	7809      	ldrb	r1, [r1, #0]
 800bd10:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800bd14:	2202      	movs	r2, #2
 800bd16:	f7f4 fa5b 	bl	80001d0 <memchr>
 800bd1a:	b328      	cbz	r0, 800bd68 <_scanf_i+0xb8>
 800bd1c:	f1bb 0f01 	cmp.w	fp, #1
 800bd20:	d159      	bne.n	800bdd6 <_scanf_i+0x126>
 800bd22:	6862      	ldr	r2, [r4, #4]
 800bd24:	b92a      	cbnz	r2, 800bd32 <_scanf_i+0x82>
 800bd26:	6822      	ldr	r2, [r4, #0]
 800bd28:	2108      	movs	r1, #8
 800bd2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bd2e:	6061      	str	r1, [r4, #4]
 800bd30:	6022      	str	r2, [r4, #0]
 800bd32:	6822      	ldr	r2, [r4, #0]
 800bd34:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800bd38:	6022      	str	r2, [r4, #0]
 800bd3a:	68a2      	ldr	r2, [r4, #8]
 800bd3c:	1e51      	subs	r1, r2, #1
 800bd3e:	60a1      	str	r1, [r4, #8]
 800bd40:	b192      	cbz	r2, 800bd68 <_scanf_i+0xb8>
 800bd42:	6832      	ldr	r2, [r6, #0]
 800bd44:	1c51      	adds	r1, r2, #1
 800bd46:	6031      	str	r1, [r6, #0]
 800bd48:	7812      	ldrb	r2, [r2, #0]
 800bd4a:	f805 2b01 	strb.w	r2, [r5], #1
 800bd4e:	6872      	ldr	r2, [r6, #4]
 800bd50:	3a01      	subs	r2, #1
 800bd52:	2a00      	cmp	r2, #0
 800bd54:	6072      	str	r2, [r6, #4]
 800bd56:	dc07      	bgt.n	800bd68 <_scanf_i+0xb8>
 800bd58:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800bd5c:	4631      	mov	r1, r6
 800bd5e:	4650      	mov	r0, sl
 800bd60:	4790      	blx	r2
 800bd62:	2800      	cmp	r0, #0
 800bd64:	f040 8085 	bne.w	800be72 <_scanf_i+0x1c2>
 800bd68:	f10b 0b01 	add.w	fp, fp, #1
 800bd6c:	f1bb 0f03 	cmp.w	fp, #3
 800bd70:	d1cb      	bne.n	800bd0a <_scanf_i+0x5a>
 800bd72:	6863      	ldr	r3, [r4, #4]
 800bd74:	b90b      	cbnz	r3, 800bd7a <_scanf_i+0xca>
 800bd76:	230a      	movs	r3, #10
 800bd78:	6063      	str	r3, [r4, #4]
 800bd7a:	6863      	ldr	r3, [r4, #4]
 800bd7c:	4945      	ldr	r1, [pc, #276]	@ (800be94 <_scanf_i+0x1e4>)
 800bd7e:	6960      	ldr	r0, [r4, #20]
 800bd80:	1ac9      	subs	r1, r1, r3
 800bd82:	f000 f935 	bl	800bff0 <__sccl>
 800bd86:	f04f 0b00 	mov.w	fp, #0
 800bd8a:	68a3      	ldr	r3, [r4, #8]
 800bd8c:	6822      	ldr	r2, [r4, #0]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d03d      	beq.n	800be0e <_scanf_i+0x15e>
 800bd92:	6831      	ldr	r1, [r6, #0]
 800bd94:	6960      	ldr	r0, [r4, #20]
 800bd96:	f891 c000 	ldrb.w	ip, [r1]
 800bd9a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800bd9e:	2800      	cmp	r0, #0
 800bda0:	d035      	beq.n	800be0e <_scanf_i+0x15e>
 800bda2:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800bda6:	d124      	bne.n	800bdf2 <_scanf_i+0x142>
 800bda8:	0510      	lsls	r0, r2, #20
 800bdaa:	d522      	bpl.n	800bdf2 <_scanf_i+0x142>
 800bdac:	f10b 0b01 	add.w	fp, fp, #1
 800bdb0:	f1b9 0f00 	cmp.w	r9, #0
 800bdb4:	d003      	beq.n	800bdbe <_scanf_i+0x10e>
 800bdb6:	3301      	adds	r3, #1
 800bdb8:	f109 39ff 	add.w	r9, r9, #4294967295
 800bdbc:	60a3      	str	r3, [r4, #8]
 800bdbe:	6873      	ldr	r3, [r6, #4]
 800bdc0:	3b01      	subs	r3, #1
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	6073      	str	r3, [r6, #4]
 800bdc6:	dd1b      	ble.n	800be00 <_scanf_i+0x150>
 800bdc8:	6833      	ldr	r3, [r6, #0]
 800bdca:	3301      	adds	r3, #1
 800bdcc:	6033      	str	r3, [r6, #0]
 800bdce:	68a3      	ldr	r3, [r4, #8]
 800bdd0:	3b01      	subs	r3, #1
 800bdd2:	60a3      	str	r3, [r4, #8]
 800bdd4:	e7d9      	b.n	800bd8a <_scanf_i+0xda>
 800bdd6:	f1bb 0f02 	cmp.w	fp, #2
 800bdda:	d1ae      	bne.n	800bd3a <_scanf_i+0x8a>
 800bddc:	6822      	ldr	r2, [r4, #0]
 800bdde:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800bde2:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800bde6:	d1c4      	bne.n	800bd72 <_scanf_i+0xc2>
 800bde8:	2110      	movs	r1, #16
 800bdea:	6061      	str	r1, [r4, #4]
 800bdec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bdf0:	e7a2      	b.n	800bd38 <_scanf_i+0x88>
 800bdf2:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800bdf6:	6022      	str	r2, [r4, #0]
 800bdf8:	780b      	ldrb	r3, [r1, #0]
 800bdfa:	f805 3b01 	strb.w	r3, [r5], #1
 800bdfe:	e7de      	b.n	800bdbe <_scanf_i+0x10e>
 800be00:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800be04:	4631      	mov	r1, r6
 800be06:	4650      	mov	r0, sl
 800be08:	4798      	blx	r3
 800be0a:	2800      	cmp	r0, #0
 800be0c:	d0df      	beq.n	800bdce <_scanf_i+0x11e>
 800be0e:	6823      	ldr	r3, [r4, #0]
 800be10:	05d9      	lsls	r1, r3, #23
 800be12:	d50d      	bpl.n	800be30 <_scanf_i+0x180>
 800be14:	42bd      	cmp	r5, r7
 800be16:	d909      	bls.n	800be2c <_scanf_i+0x17c>
 800be18:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800be1c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800be20:	4632      	mov	r2, r6
 800be22:	4650      	mov	r0, sl
 800be24:	4798      	blx	r3
 800be26:	f105 39ff 	add.w	r9, r5, #4294967295
 800be2a:	464d      	mov	r5, r9
 800be2c:	42bd      	cmp	r5, r7
 800be2e:	d028      	beq.n	800be82 <_scanf_i+0x1d2>
 800be30:	6822      	ldr	r2, [r4, #0]
 800be32:	f012 0210 	ands.w	r2, r2, #16
 800be36:	d113      	bne.n	800be60 <_scanf_i+0x1b0>
 800be38:	702a      	strb	r2, [r5, #0]
 800be3a:	6863      	ldr	r3, [r4, #4]
 800be3c:	9e01      	ldr	r6, [sp, #4]
 800be3e:	4639      	mov	r1, r7
 800be40:	4650      	mov	r0, sl
 800be42:	47b0      	blx	r6
 800be44:	f8d8 3000 	ldr.w	r3, [r8]
 800be48:	6821      	ldr	r1, [r4, #0]
 800be4a:	1d1a      	adds	r2, r3, #4
 800be4c:	f8c8 2000 	str.w	r2, [r8]
 800be50:	f011 0f20 	tst.w	r1, #32
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	d00f      	beq.n	800be78 <_scanf_i+0x1c8>
 800be58:	6018      	str	r0, [r3, #0]
 800be5a:	68e3      	ldr	r3, [r4, #12]
 800be5c:	3301      	adds	r3, #1
 800be5e:	60e3      	str	r3, [r4, #12]
 800be60:	6923      	ldr	r3, [r4, #16]
 800be62:	1bed      	subs	r5, r5, r7
 800be64:	445d      	add	r5, fp
 800be66:	442b      	add	r3, r5
 800be68:	6123      	str	r3, [r4, #16]
 800be6a:	2000      	movs	r0, #0
 800be6c:	b007      	add	sp, #28
 800be6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be72:	f04f 0b00 	mov.w	fp, #0
 800be76:	e7ca      	b.n	800be0e <_scanf_i+0x15e>
 800be78:	07ca      	lsls	r2, r1, #31
 800be7a:	bf4c      	ite	mi
 800be7c:	8018      	strhmi	r0, [r3, #0]
 800be7e:	6018      	strpl	r0, [r3, #0]
 800be80:	e7eb      	b.n	800be5a <_scanf_i+0x1aa>
 800be82:	2001      	movs	r0, #1
 800be84:	e7f2      	b.n	800be6c <_scanf_i+0x1bc>
 800be86:	bf00      	nop
 800be88:	0800cfe4 	.word	0x0800cfe4
 800be8c:	0800b5a9 	.word	0x0800b5a9
 800be90:	0800c995 	.word	0x0800c995
 800be94:	0800d7e8 	.word	0x0800d7e8

0800be98 <__sflush_r>:
 800be98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800be9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bea0:	0716      	lsls	r6, r2, #28
 800bea2:	4605      	mov	r5, r0
 800bea4:	460c      	mov	r4, r1
 800bea6:	d454      	bmi.n	800bf52 <__sflush_r+0xba>
 800bea8:	684b      	ldr	r3, [r1, #4]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	dc02      	bgt.n	800beb4 <__sflush_r+0x1c>
 800beae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	dd48      	ble.n	800bf46 <__sflush_r+0xae>
 800beb4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800beb6:	2e00      	cmp	r6, #0
 800beb8:	d045      	beq.n	800bf46 <__sflush_r+0xae>
 800beba:	2300      	movs	r3, #0
 800bebc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bec0:	682f      	ldr	r7, [r5, #0]
 800bec2:	6a21      	ldr	r1, [r4, #32]
 800bec4:	602b      	str	r3, [r5, #0]
 800bec6:	d030      	beq.n	800bf2a <__sflush_r+0x92>
 800bec8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800beca:	89a3      	ldrh	r3, [r4, #12]
 800becc:	0759      	lsls	r1, r3, #29
 800bece:	d505      	bpl.n	800bedc <__sflush_r+0x44>
 800bed0:	6863      	ldr	r3, [r4, #4]
 800bed2:	1ad2      	subs	r2, r2, r3
 800bed4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bed6:	b10b      	cbz	r3, 800bedc <__sflush_r+0x44>
 800bed8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800beda:	1ad2      	subs	r2, r2, r3
 800bedc:	2300      	movs	r3, #0
 800bede:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bee0:	6a21      	ldr	r1, [r4, #32]
 800bee2:	4628      	mov	r0, r5
 800bee4:	47b0      	blx	r6
 800bee6:	1c43      	adds	r3, r0, #1
 800bee8:	89a3      	ldrh	r3, [r4, #12]
 800beea:	d106      	bne.n	800befa <__sflush_r+0x62>
 800beec:	6829      	ldr	r1, [r5, #0]
 800beee:	291d      	cmp	r1, #29
 800bef0:	d82b      	bhi.n	800bf4a <__sflush_r+0xb2>
 800bef2:	4a2a      	ldr	r2, [pc, #168]	@ (800bf9c <__sflush_r+0x104>)
 800bef4:	40ca      	lsrs	r2, r1
 800bef6:	07d6      	lsls	r6, r2, #31
 800bef8:	d527      	bpl.n	800bf4a <__sflush_r+0xb2>
 800befa:	2200      	movs	r2, #0
 800befc:	6062      	str	r2, [r4, #4]
 800befe:	04d9      	lsls	r1, r3, #19
 800bf00:	6922      	ldr	r2, [r4, #16]
 800bf02:	6022      	str	r2, [r4, #0]
 800bf04:	d504      	bpl.n	800bf10 <__sflush_r+0x78>
 800bf06:	1c42      	adds	r2, r0, #1
 800bf08:	d101      	bne.n	800bf0e <__sflush_r+0x76>
 800bf0a:	682b      	ldr	r3, [r5, #0]
 800bf0c:	b903      	cbnz	r3, 800bf10 <__sflush_r+0x78>
 800bf0e:	6560      	str	r0, [r4, #84]	@ 0x54
 800bf10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bf12:	602f      	str	r7, [r5, #0]
 800bf14:	b1b9      	cbz	r1, 800bf46 <__sflush_r+0xae>
 800bf16:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bf1a:	4299      	cmp	r1, r3
 800bf1c:	d002      	beq.n	800bf24 <__sflush_r+0x8c>
 800bf1e:	4628      	mov	r0, r5
 800bf20:	f7fd ff16 	bl	8009d50 <_free_r>
 800bf24:	2300      	movs	r3, #0
 800bf26:	6363      	str	r3, [r4, #52]	@ 0x34
 800bf28:	e00d      	b.n	800bf46 <__sflush_r+0xae>
 800bf2a:	2301      	movs	r3, #1
 800bf2c:	4628      	mov	r0, r5
 800bf2e:	47b0      	blx	r6
 800bf30:	4602      	mov	r2, r0
 800bf32:	1c50      	adds	r0, r2, #1
 800bf34:	d1c9      	bne.n	800beca <__sflush_r+0x32>
 800bf36:	682b      	ldr	r3, [r5, #0]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d0c6      	beq.n	800beca <__sflush_r+0x32>
 800bf3c:	2b1d      	cmp	r3, #29
 800bf3e:	d001      	beq.n	800bf44 <__sflush_r+0xac>
 800bf40:	2b16      	cmp	r3, #22
 800bf42:	d11e      	bne.n	800bf82 <__sflush_r+0xea>
 800bf44:	602f      	str	r7, [r5, #0]
 800bf46:	2000      	movs	r0, #0
 800bf48:	e022      	b.n	800bf90 <__sflush_r+0xf8>
 800bf4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bf4e:	b21b      	sxth	r3, r3
 800bf50:	e01b      	b.n	800bf8a <__sflush_r+0xf2>
 800bf52:	690f      	ldr	r7, [r1, #16]
 800bf54:	2f00      	cmp	r7, #0
 800bf56:	d0f6      	beq.n	800bf46 <__sflush_r+0xae>
 800bf58:	0793      	lsls	r3, r2, #30
 800bf5a:	680e      	ldr	r6, [r1, #0]
 800bf5c:	bf08      	it	eq
 800bf5e:	694b      	ldreq	r3, [r1, #20]
 800bf60:	600f      	str	r7, [r1, #0]
 800bf62:	bf18      	it	ne
 800bf64:	2300      	movne	r3, #0
 800bf66:	eba6 0807 	sub.w	r8, r6, r7
 800bf6a:	608b      	str	r3, [r1, #8]
 800bf6c:	f1b8 0f00 	cmp.w	r8, #0
 800bf70:	dde9      	ble.n	800bf46 <__sflush_r+0xae>
 800bf72:	6a21      	ldr	r1, [r4, #32]
 800bf74:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bf76:	4643      	mov	r3, r8
 800bf78:	463a      	mov	r2, r7
 800bf7a:	4628      	mov	r0, r5
 800bf7c:	47b0      	blx	r6
 800bf7e:	2800      	cmp	r0, #0
 800bf80:	dc08      	bgt.n	800bf94 <__sflush_r+0xfc>
 800bf82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bf8a:	81a3      	strh	r3, [r4, #12]
 800bf8c:	f04f 30ff 	mov.w	r0, #4294967295
 800bf90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf94:	4407      	add	r7, r0
 800bf96:	eba8 0800 	sub.w	r8, r8, r0
 800bf9a:	e7e7      	b.n	800bf6c <__sflush_r+0xd4>
 800bf9c:	20400001 	.word	0x20400001

0800bfa0 <_fflush_r>:
 800bfa0:	b538      	push	{r3, r4, r5, lr}
 800bfa2:	690b      	ldr	r3, [r1, #16]
 800bfa4:	4605      	mov	r5, r0
 800bfa6:	460c      	mov	r4, r1
 800bfa8:	b913      	cbnz	r3, 800bfb0 <_fflush_r+0x10>
 800bfaa:	2500      	movs	r5, #0
 800bfac:	4628      	mov	r0, r5
 800bfae:	bd38      	pop	{r3, r4, r5, pc}
 800bfb0:	b118      	cbz	r0, 800bfba <_fflush_r+0x1a>
 800bfb2:	6a03      	ldr	r3, [r0, #32]
 800bfb4:	b90b      	cbnz	r3, 800bfba <_fflush_r+0x1a>
 800bfb6:	f7fc ff05 	bl	8008dc4 <__sinit>
 800bfba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d0f3      	beq.n	800bfaa <_fflush_r+0xa>
 800bfc2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bfc4:	07d0      	lsls	r0, r2, #31
 800bfc6:	d404      	bmi.n	800bfd2 <_fflush_r+0x32>
 800bfc8:	0599      	lsls	r1, r3, #22
 800bfca:	d402      	bmi.n	800bfd2 <_fflush_r+0x32>
 800bfcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bfce:	f7fd f850 	bl	8009072 <__retarget_lock_acquire_recursive>
 800bfd2:	4628      	mov	r0, r5
 800bfd4:	4621      	mov	r1, r4
 800bfd6:	f7ff ff5f 	bl	800be98 <__sflush_r>
 800bfda:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bfdc:	07da      	lsls	r2, r3, #31
 800bfde:	4605      	mov	r5, r0
 800bfe0:	d4e4      	bmi.n	800bfac <_fflush_r+0xc>
 800bfe2:	89a3      	ldrh	r3, [r4, #12]
 800bfe4:	059b      	lsls	r3, r3, #22
 800bfe6:	d4e1      	bmi.n	800bfac <_fflush_r+0xc>
 800bfe8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bfea:	f7fd f843 	bl	8009074 <__retarget_lock_release_recursive>
 800bfee:	e7dd      	b.n	800bfac <_fflush_r+0xc>

0800bff0 <__sccl>:
 800bff0:	b570      	push	{r4, r5, r6, lr}
 800bff2:	780b      	ldrb	r3, [r1, #0]
 800bff4:	4604      	mov	r4, r0
 800bff6:	2b5e      	cmp	r3, #94	@ 0x5e
 800bff8:	bf0b      	itete	eq
 800bffa:	784b      	ldrbeq	r3, [r1, #1]
 800bffc:	1c4a      	addne	r2, r1, #1
 800bffe:	1c8a      	addeq	r2, r1, #2
 800c000:	2100      	movne	r1, #0
 800c002:	bf08      	it	eq
 800c004:	2101      	moveq	r1, #1
 800c006:	3801      	subs	r0, #1
 800c008:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800c00c:	f800 1f01 	strb.w	r1, [r0, #1]!
 800c010:	42a8      	cmp	r0, r5
 800c012:	d1fb      	bne.n	800c00c <__sccl+0x1c>
 800c014:	b90b      	cbnz	r3, 800c01a <__sccl+0x2a>
 800c016:	1e50      	subs	r0, r2, #1
 800c018:	bd70      	pop	{r4, r5, r6, pc}
 800c01a:	f081 0101 	eor.w	r1, r1, #1
 800c01e:	54e1      	strb	r1, [r4, r3]
 800c020:	4610      	mov	r0, r2
 800c022:	4602      	mov	r2, r0
 800c024:	f812 5b01 	ldrb.w	r5, [r2], #1
 800c028:	2d2d      	cmp	r5, #45	@ 0x2d
 800c02a:	d005      	beq.n	800c038 <__sccl+0x48>
 800c02c:	2d5d      	cmp	r5, #93	@ 0x5d
 800c02e:	d016      	beq.n	800c05e <__sccl+0x6e>
 800c030:	2d00      	cmp	r5, #0
 800c032:	d0f1      	beq.n	800c018 <__sccl+0x28>
 800c034:	462b      	mov	r3, r5
 800c036:	e7f2      	b.n	800c01e <__sccl+0x2e>
 800c038:	7846      	ldrb	r6, [r0, #1]
 800c03a:	2e5d      	cmp	r6, #93	@ 0x5d
 800c03c:	d0fa      	beq.n	800c034 <__sccl+0x44>
 800c03e:	42b3      	cmp	r3, r6
 800c040:	dcf8      	bgt.n	800c034 <__sccl+0x44>
 800c042:	3002      	adds	r0, #2
 800c044:	461a      	mov	r2, r3
 800c046:	3201      	adds	r2, #1
 800c048:	4296      	cmp	r6, r2
 800c04a:	54a1      	strb	r1, [r4, r2]
 800c04c:	dcfb      	bgt.n	800c046 <__sccl+0x56>
 800c04e:	1af2      	subs	r2, r6, r3
 800c050:	3a01      	subs	r2, #1
 800c052:	1c5d      	adds	r5, r3, #1
 800c054:	42b3      	cmp	r3, r6
 800c056:	bfa8      	it	ge
 800c058:	2200      	movge	r2, #0
 800c05a:	18ab      	adds	r3, r5, r2
 800c05c:	e7e1      	b.n	800c022 <__sccl+0x32>
 800c05e:	4610      	mov	r0, r2
 800c060:	e7da      	b.n	800c018 <__sccl+0x28>

0800c062 <__submore>:
 800c062:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c066:	460c      	mov	r4, r1
 800c068:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800c06a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c06e:	4299      	cmp	r1, r3
 800c070:	d11d      	bne.n	800c0ae <__submore+0x4c>
 800c072:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800c076:	f7fd fedf 	bl	8009e38 <_malloc_r>
 800c07a:	b918      	cbnz	r0, 800c084 <__submore+0x22>
 800c07c:	f04f 30ff 	mov.w	r0, #4294967295
 800c080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c084:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c088:	63a3      	str	r3, [r4, #56]	@ 0x38
 800c08a:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800c08e:	6360      	str	r0, [r4, #52]	@ 0x34
 800c090:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800c094:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800c098:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800c09c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800c0a0:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800c0a4:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800c0a8:	6020      	str	r0, [r4, #0]
 800c0aa:	2000      	movs	r0, #0
 800c0ac:	e7e8      	b.n	800c080 <__submore+0x1e>
 800c0ae:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800c0b0:	0077      	lsls	r7, r6, #1
 800c0b2:	463a      	mov	r2, r7
 800c0b4:	f000 fbd1 	bl	800c85a <_realloc_r>
 800c0b8:	4605      	mov	r5, r0
 800c0ba:	2800      	cmp	r0, #0
 800c0bc:	d0de      	beq.n	800c07c <__submore+0x1a>
 800c0be:	eb00 0806 	add.w	r8, r0, r6
 800c0c2:	4601      	mov	r1, r0
 800c0c4:	4632      	mov	r2, r6
 800c0c6:	4640      	mov	r0, r8
 800c0c8:	f7fc ffd5 	bl	8009076 <memcpy>
 800c0cc:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800c0d0:	f8c4 8000 	str.w	r8, [r4]
 800c0d4:	e7e9      	b.n	800c0aa <__submore+0x48>

0800c0d6 <memmove>:
 800c0d6:	4288      	cmp	r0, r1
 800c0d8:	b510      	push	{r4, lr}
 800c0da:	eb01 0402 	add.w	r4, r1, r2
 800c0de:	d902      	bls.n	800c0e6 <memmove+0x10>
 800c0e0:	4284      	cmp	r4, r0
 800c0e2:	4623      	mov	r3, r4
 800c0e4:	d807      	bhi.n	800c0f6 <memmove+0x20>
 800c0e6:	1e43      	subs	r3, r0, #1
 800c0e8:	42a1      	cmp	r1, r4
 800c0ea:	d008      	beq.n	800c0fe <memmove+0x28>
 800c0ec:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c0f0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c0f4:	e7f8      	b.n	800c0e8 <memmove+0x12>
 800c0f6:	4402      	add	r2, r0
 800c0f8:	4601      	mov	r1, r0
 800c0fa:	428a      	cmp	r2, r1
 800c0fc:	d100      	bne.n	800c100 <memmove+0x2a>
 800c0fe:	bd10      	pop	{r4, pc}
 800c100:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c104:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c108:	e7f7      	b.n	800c0fa <memmove+0x24>

0800c10a <strncmp>:
 800c10a:	b510      	push	{r4, lr}
 800c10c:	b16a      	cbz	r2, 800c12a <strncmp+0x20>
 800c10e:	3901      	subs	r1, #1
 800c110:	1884      	adds	r4, r0, r2
 800c112:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c116:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c11a:	429a      	cmp	r2, r3
 800c11c:	d103      	bne.n	800c126 <strncmp+0x1c>
 800c11e:	42a0      	cmp	r0, r4
 800c120:	d001      	beq.n	800c126 <strncmp+0x1c>
 800c122:	2a00      	cmp	r2, #0
 800c124:	d1f5      	bne.n	800c112 <strncmp+0x8>
 800c126:	1ad0      	subs	r0, r2, r3
 800c128:	bd10      	pop	{r4, pc}
 800c12a:	4610      	mov	r0, r2
 800c12c:	e7fc      	b.n	800c128 <strncmp+0x1e>
	...

0800c130 <_sbrk_r>:
 800c130:	b538      	push	{r3, r4, r5, lr}
 800c132:	4d06      	ldr	r5, [pc, #24]	@ (800c14c <_sbrk_r+0x1c>)
 800c134:	2300      	movs	r3, #0
 800c136:	4604      	mov	r4, r0
 800c138:	4608      	mov	r0, r1
 800c13a:	602b      	str	r3, [r5, #0]
 800c13c:	f7f5 fdc6 	bl	8001ccc <_sbrk>
 800c140:	1c43      	adds	r3, r0, #1
 800c142:	d102      	bne.n	800c14a <_sbrk_r+0x1a>
 800c144:	682b      	ldr	r3, [r5, #0]
 800c146:	b103      	cbz	r3, 800c14a <_sbrk_r+0x1a>
 800c148:	6023      	str	r3, [r4, #0]
 800c14a:	bd38      	pop	{r3, r4, r5, pc}
 800c14c:	20001064 	.word	0x20001064

0800c150 <nan>:
 800c150:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c158 <nan+0x8>
 800c154:	4770      	bx	lr
 800c156:	bf00      	nop
 800c158:	00000000 	.word	0x00000000
 800c15c:	7ff80000 	.word	0x7ff80000

0800c160 <__assert_func>:
 800c160:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c162:	4614      	mov	r4, r2
 800c164:	461a      	mov	r2, r3
 800c166:	4b09      	ldr	r3, [pc, #36]	@ (800c18c <__assert_func+0x2c>)
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	4605      	mov	r5, r0
 800c16c:	68d8      	ldr	r0, [r3, #12]
 800c16e:	b14c      	cbz	r4, 800c184 <__assert_func+0x24>
 800c170:	4b07      	ldr	r3, [pc, #28]	@ (800c190 <__assert_func+0x30>)
 800c172:	9100      	str	r1, [sp, #0]
 800c174:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c178:	4906      	ldr	r1, [pc, #24]	@ (800c194 <__assert_func+0x34>)
 800c17a:	462b      	mov	r3, r5
 800c17c:	f000 fc1a 	bl	800c9b4 <fiprintf>
 800c180:	f000 fc2a 	bl	800c9d8 <abort>
 800c184:	4b04      	ldr	r3, [pc, #16]	@ (800c198 <__assert_func+0x38>)
 800c186:	461c      	mov	r4, r3
 800c188:	e7f3      	b.n	800c172 <__assert_func+0x12>
 800c18a:	bf00      	nop
 800c18c:	20000034 	.word	0x20000034
 800c190:	0800d7fb 	.word	0x0800d7fb
 800c194:	0800d808 	.word	0x0800d808
 800c198:	0800d836 	.word	0x0800d836

0800c19c <_calloc_r>:
 800c19c:	b570      	push	{r4, r5, r6, lr}
 800c19e:	fba1 5402 	umull	r5, r4, r1, r2
 800c1a2:	b934      	cbnz	r4, 800c1b2 <_calloc_r+0x16>
 800c1a4:	4629      	mov	r1, r5
 800c1a6:	f7fd fe47 	bl	8009e38 <_malloc_r>
 800c1aa:	4606      	mov	r6, r0
 800c1ac:	b928      	cbnz	r0, 800c1ba <_calloc_r+0x1e>
 800c1ae:	4630      	mov	r0, r6
 800c1b0:	bd70      	pop	{r4, r5, r6, pc}
 800c1b2:	220c      	movs	r2, #12
 800c1b4:	6002      	str	r2, [r0, #0]
 800c1b6:	2600      	movs	r6, #0
 800c1b8:	e7f9      	b.n	800c1ae <_calloc_r+0x12>
 800c1ba:	462a      	mov	r2, r5
 800c1bc:	4621      	mov	r1, r4
 800c1be:	f7fc feda 	bl	8008f76 <memset>
 800c1c2:	e7f4      	b.n	800c1ae <_calloc_r+0x12>

0800c1c4 <rshift>:
 800c1c4:	6903      	ldr	r3, [r0, #16]
 800c1c6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c1ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c1ce:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c1d2:	f100 0414 	add.w	r4, r0, #20
 800c1d6:	dd45      	ble.n	800c264 <rshift+0xa0>
 800c1d8:	f011 011f 	ands.w	r1, r1, #31
 800c1dc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c1e0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c1e4:	d10c      	bne.n	800c200 <rshift+0x3c>
 800c1e6:	f100 0710 	add.w	r7, r0, #16
 800c1ea:	4629      	mov	r1, r5
 800c1ec:	42b1      	cmp	r1, r6
 800c1ee:	d334      	bcc.n	800c25a <rshift+0x96>
 800c1f0:	1a9b      	subs	r3, r3, r2
 800c1f2:	009b      	lsls	r3, r3, #2
 800c1f4:	1eea      	subs	r2, r5, #3
 800c1f6:	4296      	cmp	r6, r2
 800c1f8:	bf38      	it	cc
 800c1fa:	2300      	movcc	r3, #0
 800c1fc:	4423      	add	r3, r4
 800c1fe:	e015      	b.n	800c22c <rshift+0x68>
 800c200:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c204:	f1c1 0820 	rsb	r8, r1, #32
 800c208:	40cf      	lsrs	r7, r1
 800c20a:	f105 0e04 	add.w	lr, r5, #4
 800c20e:	46a1      	mov	r9, r4
 800c210:	4576      	cmp	r6, lr
 800c212:	46f4      	mov	ip, lr
 800c214:	d815      	bhi.n	800c242 <rshift+0x7e>
 800c216:	1a9a      	subs	r2, r3, r2
 800c218:	0092      	lsls	r2, r2, #2
 800c21a:	3a04      	subs	r2, #4
 800c21c:	3501      	adds	r5, #1
 800c21e:	42ae      	cmp	r6, r5
 800c220:	bf38      	it	cc
 800c222:	2200      	movcc	r2, #0
 800c224:	18a3      	adds	r3, r4, r2
 800c226:	50a7      	str	r7, [r4, r2]
 800c228:	b107      	cbz	r7, 800c22c <rshift+0x68>
 800c22a:	3304      	adds	r3, #4
 800c22c:	1b1a      	subs	r2, r3, r4
 800c22e:	42a3      	cmp	r3, r4
 800c230:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c234:	bf08      	it	eq
 800c236:	2300      	moveq	r3, #0
 800c238:	6102      	str	r2, [r0, #16]
 800c23a:	bf08      	it	eq
 800c23c:	6143      	streq	r3, [r0, #20]
 800c23e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c242:	f8dc c000 	ldr.w	ip, [ip]
 800c246:	fa0c fc08 	lsl.w	ip, ip, r8
 800c24a:	ea4c 0707 	orr.w	r7, ip, r7
 800c24e:	f849 7b04 	str.w	r7, [r9], #4
 800c252:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c256:	40cf      	lsrs	r7, r1
 800c258:	e7da      	b.n	800c210 <rshift+0x4c>
 800c25a:	f851 cb04 	ldr.w	ip, [r1], #4
 800c25e:	f847 cf04 	str.w	ip, [r7, #4]!
 800c262:	e7c3      	b.n	800c1ec <rshift+0x28>
 800c264:	4623      	mov	r3, r4
 800c266:	e7e1      	b.n	800c22c <rshift+0x68>

0800c268 <__hexdig_fun>:
 800c268:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c26c:	2b09      	cmp	r3, #9
 800c26e:	d802      	bhi.n	800c276 <__hexdig_fun+0xe>
 800c270:	3820      	subs	r0, #32
 800c272:	b2c0      	uxtb	r0, r0
 800c274:	4770      	bx	lr
 800c276:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c27a:	2b05      	cmp	r3, #5
 800c27c:	d801      	bhi.n	800c282 <__hexdig_fun+0x1a>
 800c27e:	3847      	subs	r0, #71	@ 0x47
 800c280:	e7f7      	b.n	800c272 <__hexdig_fun+0xa>
 800c282:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c286:	2b05      	cmp	r3, #5
 800c288:	d801      	bhi.n	800c28e <__hexdig_fun+0x26>
 800c28a:	3827      	subs	r0, #39	@ 0x27
 800c28c:	e7f1      	b.n	800c272 <__hexdig_fun+0xa>
 800c28e:	2000      	movs	r0, #0
 800c290:	4770      	bx	lr
	...

0800c294 <__gethex>:
 800c294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c298:	b085      	sub	sp, #20
 800c29a:	468a      	mov	sl, r1
 800c29c:	9302      	str	r3, [sp, #8]
 800c29e:	680b      	ldr	r3, [r1, #0]
 800c2a0:	9001      	str	r0, [sp, #4]
 800c2a2:	4690      	mov	r8, r2
 800c2a4:	1c9c      	adds	r4, r3, #2
 800c2a6:	46a1      	mov	r9, r4
 800c2a8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c2ac:	2830      	cmp	r0, #48	@ 0x30
 800c2ae:	d0fa      	beq.n	800c2a6 <__gethex+0x12>
 800c2b0:	eba9 0303 	sub.w	r3, r9, r3
 800c2b4:	f1a3 0b02 	sub.w	fp, r3, #2
 800c2b8:	f7ff ffd6 	bl	800c268 <__hexdig_fun>
 800c2bc:	4605      	mov	r5, r0
 800c2be:	2800      	cmp	r0, #0
 800c2c0:	d168      	bne.n	800c394 <__gethex+0x100>
 800c2c2:	49a0      	ldr	r1, [pc, #640]	@ (800c544 <__gethex+0x2b0>)
 800c2c4:	2201      	movs	r2, #1
 800c2c6:	4648      	mov	r0, r9
 800c2c8:	f7ff ff1f 	bl	800c10a <strncmp>
 800c2cc:	4607      	mov	r7, r0
 800c2ce:	2800      	cmp	r0, #0
 800c2d0:	d167      	bne.n	800c3a2 <__gethex+0x10e>
 800c2d2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c2d6:	4626      	mov	r6, r4
 800c2d8:	f7ff ffc6 	bl	800c268 <__hexdig_fun>
 800c2dc:	2800      	cmp	r0, #0
 800c2de:	d062      	beq.n	800c3a6 <__gethex+0x112>
 800c2e0:	4623      	mov	r3, r4
 800c2e2:	7818      	ldrb	r0, [r3, #0]
 800c2e4:	2830      	cmp	r0, #48	@ 0x30
 800c2e6:	4699      	mov	r9, r3
 800c2e8:	f103 0301 	add.w	r3, r3, #1
 800c2ec:	d0f9      	beq.n	800c2e2 <__gethex+0x4e>
 800c2ee:	f7ff ffbb 	bl	800c268 <__hexdig_fun>
 800c2f2:	fab0 f580 	clz	r5, r0
 800c2f6:	096d      	lsrs	r5, r5, #5
 800c2f8:	f04f 0b01 	mov.w	fp, #1
 800c2fc:	464a      	mov	r2, r9
 800c2fe:	4616      	mov	r6, r2
 800c300:	3201      	adds	r2, #1
 800c302:	7830      	ldrb	r0, [r6, #0]
 800c304:	f7ff ffb0 	bl	800c268 <__hexdig_fun>
 800c308:	2800      	cmp	r0, #0
 800c30a:	d1f8      	bne.n	800c2fe <__gethex+0x6a>
 800c30c:	498d      	ldr	r1, [pc, #564]	@ (800c544 <__gethex+0x2b0>)
 800c30e:	2201      	movs	r2, #1
 800c310:	4630      	mov	r0, r6
 800c312:	f7ff fefa 	bl	800c10a <strncmp>
 800c316:	2800      	cmp	r0, #0
 800c318:	d13f      	bne.n	800c39a <__gethex+0x106>
 800c31a:	b944      	cbnz	r4, 800c32e <__gethex+0x9a>
 800c31c:	1c74      	adds	r4, r6, #1
 800c31e:	4622      	mov	r2, r4
 800c320:	4616      	mov	r6, r2
 800c322:	3201      	adds	r2, #1
 800c324:	7830      	ldrb	r0, [r6, #0]
 800c326:	f7ff ff9f 	bl	800c268 <__hexdig_fun>
 800c32a:	2800      	cmp	r0, #0
 800c32c:	d1f8      	bne.n	800c320 <__gethex+0x8c>
 800c32e:	1ba4      	subs	r4, r4, r6
 800c330:	00a7      	lsls	r7, r4, #2
 800c332:	7833      	ldrb	r3, [r6, #0]
 800c334:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c338:	2b50      	cmp	r3, #80	@ 0x50
 800c33a:	d13e      	bne.n	800c3ba <__gethex+0x126>
 800c33c:	7873      	ldrb	r3, [r6, #1]
 800c33e:	2b2b      	cmp	r3, #43	@ 0x2b
 800c340:	d033      	beq.n	800c3aa <__gethex+0x116>
 800c342:	2b2d      	cmp	r3, #45	@ 0x2d
 800c344:	d034      	beq.n	800c3b0 <__gethex+0x11c>
 800c346:	1c71      	adds	r1, r6, #1
 800c348:	2400      	movs	r4, #0
 800c34a:	7808      	ldrb	r0, [r1, #0]
 800c34c:	f7ff ff8c 	bl	800c268 <__hexdig_fun>
 800c350:	1e43      	subs	r3, r0, #1
 800c352:	b2db      	uxtb	r3, r3
 800c354:	2b18      	cmp	r3, #24
 800c356:	d830      	bhi.n	800c3ba <__gethex+0x126>
 800c358:	f1a0 0210 	sub.w	r2, r0, #16
 800c35c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c360:	f7ff ff82 	bl	800c268 <__hexdig_fun>
 800c364:	f100 3cff 	add.w	ip, r0, #4294967295
 800c368:	fa5f fc8c 	uxtb.w	ip, ip
 800c36c:	f1bc 0f18 	cmp.w	ip, #24
 800c370:	f04f 030a 	mov.w	r3, #10
 800c374:	d91e      	bls.n	800c3b4 <__gethex+0x120>
 800c376:	b104      	cbz	r4, 800c37a <__gethex+0xe6>
 800c378:	4252      	negs	r2, r2
 800c37a:	4417      	add	r7, r2
 800c37c:	f8ca 1000 	str.w	r1, [sl]
 800c380:	b1ed      	cbz	r5, 800c3be <__gethex+0x12a>
 800c382:	f1bb 0f00 	cmp.w	fp, #0
 800c386:	bf0c      	ite	eq
 800c388:	2506      	moveq	r5, #6
 800c38a:	2500      	movne	r5, #0
 800c38c:	4628      	mov	r0, r5
 800c38e:	b005      	add	sp, #20
 800c390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c394:	2500      	movs	r5, #0
 800c396:	462c      	mov	r4, r5
 800c398:	e7b0      	b.n	800c2fc <__gethex+0x68>
 800c39a:	2c00      	cmp	r4, #0
 800c39c:	d1c7      	bne.n	800c32e <__gethex+0x9a>
 800c39e:	4627      	mov	r7, r4
 800c3a0:	e7c7      	b.n	800c332 <__gethex+0x9e>
 800c3a2:	464e      	mov	r6, r9
 800c3a4:	462f      	mov	r7, r5
 800c3a6:	2501      	movs	r5, #1
 800c3a8:	e7c3      	b.n	800c332 <__gethex+0x9e>
 800c3aa:	2400      	movs	r4, #0
 800c3ac:	1cb1      	adds	r1, r6, #2
 800c3ae:	e7cc      	b.n	800c34a <__gethex+0xb6>
 800c3b0:	2401      	movs	r4, #1
 800c3b2:	e7fb      	b.n	800c3ac <__gethex+0x118>
 800c3b4:	fb03 0002 	mla	r0, r3, r2, r0
 800c3b8:	e7ce      	b.n	800c358 <__gethex+0xc4>
 800c3ba:	4631      	mov	r1, r6
 800c3bc:	e7de      	b.n	800c37c <__gethex+0xe8>
 800c3be:	eba6 0309 	sub.w	r3, r6, r9
 800c3c2:	3b01      	subs	r3, #1
 800c3c4:	4629      	mov	r1, r5
 800c3c6:	2b07      	cmp	r3, #7
 800c3c8:	dc0a      	bgt.n	800c3e0 <__gethex+0x14c>
 800c3ca:	9801      	ldr	r0, [sp, #4]
 800c3cc:	f7fd fdc0 	bl	8009f50 <_Balloc>
 800c3d0:	4604      	mov	r4, r0
 800c3d2:	b940      	cbnz	r0, 800c3e6 <__gethex+0x152>
 800c3d4:	4b5c      	ldr	r3, [pc, #368]	@ (800c548 <__gethex+0x2b4>)
 800c3d6:	4602      	mov	r2, r0
 800c3d8:	21e4      	movs	r1, #228	@ 0xe4
 800c3da:	485c      	ldr	r0, [pc, #368]	@ (800c54c <__gethex+0x2b8>)
 800c3dc:	f7ff fec0 	bl	800c160 <__assert_func>
 800c3e0:	3101      	adds	r1, #1
 800c3e2:	105b      	asrs	r3, r3, #1
 800c3e4:	e7ef      	b.n	800c3c6 <__gethex+0x132>
 800c3e6:	f100 0a14 	add.w	sl, r0, #20
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	4655      	mov	r5, sl
 800c3ee:	469b      	mov	fp, r3
 800c3f0:	45b1      	cmp	r9, r6
 800c3f2:	d337      	bcc.n	800c464 <__gethex+0x1d0>
 800c3f4:	f845 bb04 	str.w	fp, [r5], #4
 800c3f8:	eba5 050a 	sub.w	r5, r5, sl
 800c3fc:	10ad      	asrs	r5, r5, #2
 800c3fe:	6125      	str	r5, [r4, #16]
 800c400:	4658      	mov	r0, fp
 800c402:	f7fd fe97 	bl	800a134 <__hi0bits>
 800c406:	016d      	lsls	r5, r5, #5
 800c408:	f8d8 6000 	ldr.w	r6, [r8]
 800c40c:	1a2d      	subs	r5, r5, r0
 800c40e:	42b5      	cmp	r5, r6
 800c410:	dd54      	ble.n	800c4bc <__gethex+0x228>
 800c412:	1bad      	subs	r5, r5, r6
 800c414:	4629      	mov	r1, r5
 800c416:	4620      	mov	r0, r4
 800c418:	f7fe fa23 	bl	800a862 <__any_on>
 800c41c:	4681      	mov	r9, r0
 800c41e:	b178      	cbz	r0, 800c440 <__gethex+0x1ac>
 800c420:	1e6b      	subs	r3, r5, #1
 800c422:	1159      	asrs	r1, r3, #5
 800c424:	f003 021f 	and.w	r2, r3, #31
 800c428:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c42c:	f04f 0901 	mov.w	r9, #1
 800c430:	fa09 f202 	lsl.w	r2, r9, r2
 800c434:	420a      	tst	r2, r1
 800c436:	d003      	beq.n	800c440 <__gethex+0x1ac>
 800c438:	454b      	cmp	r3, r9
 800c43a:	dc36      	bgt.n	800c4aa <__gethex+0x216>
 800c43c:	f04f 0902 	mov.w	r9, #2
 800c440:	4629      	mov	r1, r5
 800c442:	4620      	mov	r0, r4
 800c444:	f7ff febe 	bl	800c1c4 <rshift>
 800c448:	442f      	add	r7, r5
 800c44a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c44e:	42bb      	cmp	r3, r7
 800c450:	da42      	bge.n	800c4d8 <__gethex+0x244>
 800c452:	9801      	ldr	r0, [sp, #4]
 800c454:	4621      	mov	r1, r4
 800c456:	f7fd fdbb 	bl	8009fd0 <_Bfree>
 800c45a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c45c:	2300      	movs	r3, #0
 800c45e:	6013      	str	r3, [r2, #0]
 800c460:	25a3      	movs	r5, #163	@ 0xa3
 800c462:	e793      	b.n	800c38c <__gethex+0xf8>
 800c464:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c468:	2a2e      	cmp	r2, #46	@ 0x2e
 800c46a:	d012      	beq.n	800c492 <__gethex+0x1fe>
 800c46c:	2b20      	cmp	r3, #32
 800c46e:	d104      	bne.n	800c47a <__gethex+0x1e6>
 800c470:	f845 bb04 	str.w	fp, [r5], #4
 800c474:	f04f 0b00 	mov.w	fp, #0
 800c478:	465b      	mov	r3, fp
 800c47a:	7830      	ldrb	r0, [r6, #0]
 800c47c:	9303      	str	r3, [sp, #12]
 800c47e:	f7ff fef3 	bl	800c268 <__hexdig_fun>
 800c482:	9b03      	ldr	r3, [sp, #12]
 800c484:	f000 000f 	and.w	r0, r0, #15
 800c488:	4098      	lsls	r0, r3
 800c48a:	ea4b 0b00 	orr.w	fp, fp, r0
 800c48e:	3304      	adds	r3, #4
 800c490:	e7ae      	b.n	800c3f0 <__gethex+0x15c>
 800c492:	45b1      	cmp	r9, r6
 800c494:	d8ea      	bhi.n	800c46c <__gethex+0x1d8>
 800c496:	492b      	ldr	r1, [pc, #172]	@ (800c544 <__gethex+0x2b0>)
 800c498:	9303      	str	r3, [sp, #12]
 800c49a:	2201      	movs	r2, #1
 800c49c:	4630      	mov	r0, r6
 800c49e:	f7ff fe34 	bl	800c10a <strncmp>
 800c4a2:	9b03      	ldr	r3, [sp, #12]
 800c4a4:	2800      	cmp	r0, #0
 800c4a6:	d1e1      	bne.n	800c46c <__gethex+0x1d8>
 800c4a8:	e7a2      	b.n	800c3f0 <__gethex+0x15c>
 800c4aa:	1ea9      	subs	r1, r5, #2
 800c4ac:	4620      	mov	r0, r4
 800c4ae:	f7fe f9d8 	bl	800a862 <__any_on>
 800c4b2:	2800      	cmp	r0, #0
 800c4b4:	d0c2      	beq.n	800c43c <__gethex+0x1a8>
 800c4b6:	f04f 0903 	mov.w	r9, #3
 800c4ba:	e7c1      	b.n	800c440 <__gethex+0x1ac>
 800c4bc:	da09      	bge.n	800c4d2 <__gethex+0x23e>
 800c4be:	1b75      	subs	r5, r6, r5
 800c4c0:	4621      	mov	r1, r4
 800c4c2:	9801      	ldr	r0, [sp, #4]
 800c4c4:	462a      	mov	r2, r5
 800c4c6:	f7fd ff93 	bl	800a3f0 <__lshift>
 800c4ca:	1b7f      	subs	r7, r7, r5
 800c4cc:	4604      	mov	r4, r0
 800c4ce:	f100 0a14 	add.w	sl, r0, #20
 800c4d2:	f04f 0900 	mov.w	r9, #0
 800c4d6:	e7b8      	b.n	800c44a <__gethex+0x1b6>
 800c4d8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c4dc:	42bd      	cmp	r5, r7
 800c4de:	dd6f      	ble.n	800c5c0 <__gethex+0x32c>
 800c4e0:	1bed      	subs	r5, r5, r7
 800c4e2:	42ae      	cmp	r6, r5
 800c4e4:	dc34      	bgt.n	800c550 <__gethex+0x2bc>
 800c4e6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c4ea:	2b02      	cmp	r3, #2
 800c4ec:	d022      	beq.n	800c534 <__gethex+0x2a0>
 800c4ee:	2b03      	cmp	r3, #3
 800c4f0:	d024      	beq.n	800c53c <__gethex+0x2a8>
 800c4f2:	2b01      	cmp	r3, #1
 800c4f4:	d115      	bne.n	800c522 <__gethex+0x28e>
 800c4f6:	42ae      	cmp	r6, r5
 800c4f8:	d113      	bne.n	800c522 <__gethex+0x28e>
 800c4fa:	2e01      	cmp	r6, #1
 800c4fc:	d10b      	bne.n	800c516 <__gethex+0x282>
 800c4fe:	9a02      	ldr	r2, [sp, #8]
 800c500:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c504:	6013      	str	r3, [r2, #0]
 800c506:	2301      	movs	r3, #1
 800c508:	6123      	str	r3, [r4, #16]
 800c50a:	f8ca 3000 	str.w	r3, [sl]
 800c50e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c510:	2562      	movs	r5, #98	@ 0x62
 800c512:	601c      	str	r4, [r3, #0]
 800c514:	e73a      	b.n	800c38c <__gethex+0xf8>
 800c516:	1e71      	subs	r1, r6, #1
 800c518:	4620      	mov	r0, r4
 800c51a:	f7fe f9a2 	bl	800a862 <__any_on>
 800c51e:	2800      	cmp	r0, #0
 800c520:	d1ed      	bne.n	800c4fe <__gethex+0x26a>
 800c522:	9801      	ldr	r0, [sp, #4]
 800c524:	4621      	mov	r1, r4
 800c526:	f7fd fd53 	bl	8009fd0 <_Bfree>
 800c52a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c52c:	2300      	movs	r3, #0
 800c52e:	6013      	str	r3, [r2, #0]
 800c530:	2550      	movs	r5, #80	@ 0x50
 800c532:	e72b      	b.n	800c38c <__gethex+0xf8>
 800c534:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c536:	2b00      	cmp	r3, #0
 800c538:	d1f3      	bne.n	800c522 <__gethex+0x28e>
 800c53a:	e7e0      	b.n	800c4fe <__gethex+0x26a>
 800c53c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d1dd      	bne.n	800c4fe <__gethex+0x26a>
 800c542:	e7ee      	b.n	800c522 <__gethex+0x28e>
 800c544:	0800d7c5 	.word	0x0800d7c5
 800c548:	0800d75b 	.word	0x0800d75b
 800c54c:	0800d837 	.word	0x0800d837
 800c550:	1e6f      	subs	r7, r5, #1
 800c552:	f1b9 0f00 	cmp.w	r9, #0
 800c556:	d130      	bne.n	800c5ba <__gethex+0x326>
 800c558:	b127      	cbz	r7, 800c564 <__gethex+0x2d0>
 800c55a:	4639      	mov	r1, r7
 800c55c:	4620      	mov	r0, r4
 800c55e:	f7fe f980 	bl	800a862 <__any_on>
 800c562:	4681      	mov	r9, r0
 800c564:	117a      	asrs	r2, r7, #5
 800c566:	2301      	movs	r3, #1
 800c568:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c56c:	f007 071f 	and.w	r7, r7, #31
 800c570:	40bb      	lsls	r3, r7
 800c572:	4213      	tst	r3, r2
 800c574:	4629      	mov	r1, r5
 800c576:	4620      	mov	r0, r4
 800c578:	bf18      	it	ne
 800c57a:	f049 0902 	orrne.w	r9, r9, #2
 800c57e:	f7ff fe21 	bl	800c1c4 <rshift>
 800c582:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c586:	1b76      	subs	r6, r6, r5
 800c588:	2502      	movs	r5, #2
 800c58a:	f1b9 0f00 	cmp.w	r9, #0
 800c58e:	d047      	beq.n	800c620 <__gethex+0x38c>
 800c590:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c594:	2b02      	cmp	r3, #2
 800c596:	d015      	beq.n	800c5c4 <__gethex+0x330>
 800c598:	2b03      	cmp	r3, #3
 800c59a:	d017      	beq.n	800c5cc <__gethex+0x338>
 800c59c:	2b01      	cmp	r3, #1
 800c59e:	d109      	bne.n	800c5b4 <__gethex+0x320>
 800c5a0:	f019 0f02 	tst.w	r9, #2
 800c5a4:	d006      	beq.n	800c5b4 <__gethex+0x320>
 800c5a6:	f8da 3000 	ldr.w	r3, [sl]
 800c5aa:	ea49 0903 	orr.w	r9, r9, r3
 800c5ae:	f019 0f01 	tst.w	r9, #1
 800c5b2:	d10e      	bne.n	800c5d2 <__gethex+0x33e>
 800c5b4:	f045 0510 	orr.w	r5, r5, #16
 800c5b8:	e032      	b.n	800c620 <__gethex+0x38c>
 800c5ba:	f04f 0901 	mov.w	r9, #1
 800c5be:	e7d1      	b.n	800c564 <__gethex+0x2d0>
 800c5c0:	2501      	movs	r5, #1
 800c5c2:	e7e2      	b.n	800c58a <__gethex+0x2f6>
 800c5c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c5c6:	f1c3 0301 	rsb	r3, r3, #1
 800c5ca:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c5cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d0f0      	beq.n	800c5b4 <__gethex+0x320>
 800c5d2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c5d6:	f104 0314 	add.w	r3, r4, #20
 800c5da:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c5de:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c5e2:	f04f 0c00 	mov.w	ip, #0
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800c5ec:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c5f0:	d01b      	beq.n	800c62a <__gethex+0x396>
 800c5f2:	3201      	adds	r2, #1
 800c5f4:	6002      	str	r2, [r0, #0]
 800c5f6:	2d02      	cmp	r5, #2
 800c5f8:	f104 0314 	add.w	r3, r4, #20
 800c5fc:	d13c      	bne.n	800c678 <__gethex+0x3e4>
 800c5fe:	f8d8 2000 	ldr.w	r2, [r8]
 800c602:	3a01      	subs	r2, #1
 800c604:	42b2      	cmp	r2, r6
 800c606:	d109      	bne.n	800c61c <__gethex+0x388>
 800c608:	1171      	asrs	r1, r6, #5
 800c60a:	2201      	movs	r2, #1
 800c60c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c610:	f006 061f 	and.w	r6, r6, #31
 800c614:	fa02 f606 	lsl.w	r6, r2, r6
 800c618:	421e      	tst	r6, r3
 800c61a:	d13a      	bne.n	800c692 <__gethex+0x3fe>
 800c61c:	f045 0520 	orr.w	r5, r5, #32
 800c620:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c622:	601c      	str	r4, [r3, #0]
 800c624:	9b02      	ldr	r3, [sp, #8]
 800c626:	601f      	str	r7, [r3, #0]
 800c628:	e6b0      	b.n	800c38c <__gethex+0xf8>
 800c62a:	4299      	cmp	r1, r3
 800c62c:	f843 cc04 	str.w	ip, [r3, #-4]
 800c630:	d8d9      	bhi.n	800c5e6 <__gethex+0x352>
 800c632:	68a3      	ldr	r3, [r4, #8]
 800c634:	459b      	cmp	fp, r3
 800c636:	db17      	blt.n	800c668 <__gethex+0x3d4>
 800c638:	6861      	ldr	r1, [r4, #4]
 800c63a:	9801      	ldr	r0, [sp, #4]
 800c63c:	3101      	adds	r1, #1
 800c63e:	f7fd fc87 	bl	8009f50 <_Balloc>
 800c642:	4681      	mov	r9, r0
 800c644:	b918      	cbnz	r0, 800c64e <__gethex+0x3ba>
 800c646:	4b1a      	ldr	r3, [pc, #104]	@ (800c6b0 <__gethex+0x41c>)
 800c648:	4602      	mov	r2, r0
 800c64a:	2184      	movs	r1, #132	@ 0x84
 800c64c:	e6c5      	b.n	800c3da <__gethex+0x146>
 800c64e:	6922      	ldr	r2, [r4, #16]
 800c650:	3202      	adds	r2, #2
 800c652:	f104 010c 	add.w	r1, r4, #12
 800c656:	0092      	lsls	r2, r2, #2
 800c658:	300c      	adds	r0, #12
 800c65a:	f7fc fd0c 	bl	8009076 <memcpy>
 800c65e:	4621      	mov	r1, r4
 800c660:	9801      	ldr	r0, [sp, #4]
 800c662:	f7fd fcb5 	bl	8009fd0 <_Bfree>
 800c666:	464c      	mov	r4, r9
 800c668:	6923      	ldr	r3, [r4, #16]
 800c66a:	1c5a      	adds	r2, r3, #1
 800c66c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c670:	6122      	str	r2, [r4, #16]
 800c672:	2201      	movs	r2, #1
 800c674:	615a      	str	r2, [r3, #20]
 800c676:	e7be      	b.n	800c5f6 <__gethex+0x362>
 800c678:	6922      	ldr	r2, [r4, #16]
 800c67a:	455a      	cmp	r2, fp
 800c67c:	dd0b      	ble.n	800c696 <__gethex+0x402>
 800c67e:	2101      	movs	r1, #1
 800c680:	4620      	mov	r0, r4
 800c682:	f7ff fd9f 	bl	800c1c4 <rshift>
 800c686:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c68a:	3701      	adds	r7, #1
 800c68c:	42bb      	cmp	r3, r7
 800c68e:	f6ff aee0 	blt.w	800c452 <__gethex+0x1be>
 800c692:	2501      	movs	r5, #1
 800c694:	e7c2      	b.n	800c61c <__gethex+0x388>
 800c696:	f016 061f 	ands.w	r6, r6, #31
 800c69a:	d0fa      	beq.n	800c692 <__gethex+0x3fe>
 800c69c:	4453      	add	r3, sl
 800c69e:	f1c6 0620 	rsb	r6, r6, #32
 800c6a2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c6a6:	f7fd fd45 	bl	800a134 <__hi0bits>
 800c6aa:	42b0      	cmp	r0, r6
 800c6ac:	dbe7      	blt.n	800c67e <__gethex+0x3ea>
 800c6ae:	e7f0      	b.n	800c692 <__gethex+0x3fe>
 800c6b0:	0800d75b 	.word	0x0800d75b

0800c6b4 <L_shift>:
 800c6b4:	f1c2 0208 	rsb	r2, r2, #8
 800c6b8:	0092      	lsls	r2, r2, #2
 800c6ba:	b570      	push	{r4, r5, r6, lr}
 800c6bc:	f1c2 0620 	rsb	r6, r2, #32
 800c6c0:	6843      	ldr	r3, [r0, #4]
 800c6c2:	6804      	ldr	r4, [r0, #0]
 800c6c4:	fa03 f506 	lsl.w	r5, r3, r6
 800c6c8:	432c      	orrs	r4, r5
 800c6ca:	40d3      	lsrs	r3, r2
 800c6cc:	6004      	str	r4, [r0, #0]
 800c6ce:	f840 3f04 	str.w	r3, [r0, #4]!
 800c6d2:	4288      	cmp	r0, r1
 800c6d4:	d3f4      	bcc.n	800c6c0 <L_shift+0xc>
 800c6d6:	bd70      	pop	{r4, r5, r6, pc}

0800c6d8 <__match>:
 800c6d8:	b530      	push	{r4, r5, lr}
 800c6da:	6803      	ldr	r3, [r0, #0]
 800c6dc:	3301      	adds	r3, #1
 800c6de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c6e2:	b914      	cbnz	r4, 800c6ea <__match+0x12>
 800c6e4:	6003      	str	r3, [r0, #0]
 800c6e6:	2001      	movs	r0, #1
 800c6e8:	bd30      	pop	{r4, r5, pc}
 800c6ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c6ee:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c6f2:	2d19      	cmp	r5, #25
 800c6f4:	bf98      	it	ls
 800c6f6:	3220      	addls	r2, #32
 800c6f8:	42a2      	cmp	r2, r4
 800c6fa:	d0f0      	beq.n	800c6de <__match+0x6>
 800c6fc:	2000      	movs	r0, #0
 800c6fe:	e7f3      	b.n	800c6e8 <__match+0x10>

0800c700 <__hexnan>:
 800c700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c704:	680b      	ldr	r3, [r1, #0]
 800c706:	6801      	ldr	r1, [r0, #0]
 800c708:	115e      	asrs	r6, r3, #5
 800c70a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c70e:	f013 031f 	ands.w	r3, r3, #31
 800c712:	b087      	sub	sp, #28
 800c714:	bf18      	it	ne
 800c716:	3604      	addne	r6, #4
 800c718:	2500      	movs	r5, #0
 800c71a:	1f37      	subs	r7, r6, #4
 800c71c:	4682      	mov	sl, r0
 800c71e:	4690      	mov	r8, r2
 800c720:	9301      	str	r3, [sp, #4]
 800c722:	f846 5c04 	str.w	r5, [r6, #-4]
 800c726:	46b9      	mov	r9, r7
 800c728:	463c      	mov	r4, r7
 800c72a:	9502      	str	r5, [sp, #8]
 800c72c:	46ab      	mov	fp, r5
 800c72e:	784a      	ldrb	r2, [r1, #1]
 800c730:	1c4b      	adds	r3, r1, #1
 800c732:	9303      	str	r3, [sp, #12]
 800c734:	b342      	cbz	r2, 800c788 <__hexnan+0x88>
 800c736:	4610      	mov	r0, r2
 800c738:	9105      	str	r1, [sp, #20]
 800c73a:	9204      	str	r2, [sp, #16]
 800c73c:	f7ff fd94 	bl	800c268 <__hexdig_fun>
 800c740:	2800      	cmp	r0, #0
 800c742:	d151      	bne.n	800c7e8 <__hexnan+0xe8>
 800c744:	9a04      	ldr	r2, [sp, #16]
 800c746:	9905      	ldr	r1, [sp, #20]
 800c748:	2a20      	cmp	r2, #32
 800c74a:	d818      	bhi.n	800c77e <__hexnan+0x7e>
 800c74c:	9b02      	ldr	r3, [sp, #8]
 800c74e:	459b      	cmp	fp, r3
 800c750:	dd13      	ble.n	800c77a <__hexnan+0x7a>
 800c752:	454c      	cmp	r4, r9
 800c754:	d206      	bcs.n	800c764 <__hexnan+0x64>
 800c756:	2d07      	cmp	r5, #7
 800c758:	dc04      	bgt.n	800c764 <__hexnan+0x64>
 800c75a:	462a      	mov	r2, r5
 800c75c:	4649      	mov	r1, r9
 800c75e:	4620      	mov	r0, r4
 800c760:	f7ff ffa8 	bl	800c6b4 <L_shift>
 800c764:	4544      	cmp	r4, r8
 800c766:	d952      	bls.n	800c80e <__hexnan+0x10e>
 800c768:	2300      	movs	r3, #0
 800c76a:	f1a4 0904 	sub.w	r9, r4, #4
 800c76e:	f844 3c04 	str.w	r3, [r4, #-4]
 800c772:	f8cd b008 	str.w	fp, [sp, #8]
 800c776:	464c      	mov	r4, r9
 800c778:	461d      	mov	r5, r3
 800c77a:	9903      	ldr	r1, [sp, #12]
 800c77c:	e7d7      	b.n	800c72e <__hexnan+0x2e>
 800c77e:	2a29      	cmp	r2, #41	@ 0x29
 800c780:	d157      	bne.n	800c832 <__hexnan+0x132>
 800c782:	3102      	adds	r1, #2
 800c784:	f8ca 1000 	str.w	r1, [sl]
 800c788:	f1bb 0f00 	cmp.w	fp, #0
 800c78c:	d051      	beq.n	800c832 <__hexnan+0x132>
 800c78e:	454c      	cmp	r4, r9
 800c790:	d206      	bcs.n	800c7a0 <__hexnan+0xa0>
 800c792:	2d07      	cmp	r5, #7
 800c794:	dc04      	bgt.n	800c7a0 <__hexnan+0xa0>
 800c796:	462a      	mov	r2, r5
 800c798:	4649      	mov	r1, r9
 800c79a:	4620      	mov	r0, r4
 800c79c:	f7ff ff8a 	bl	800c6b4 <L_shift>
 800c7a0:	4544      	cmp	r4, r8
 800c7a2:	d936      	bls.n	800c812 <__hexnan+0x112>
 800c7a4:	f1a8 0204 	sub.w	r2, r8, #4
 800c7a8:	4623      	mov	r3, r4
 800c7aa:	f853 1b04 	ldr.w	r1, [r3], #4
 800c7ae:	f842 1f04 	str.w	r1, [r2, #4]!
 800c7b2:	429f      	cmp	r7, r3
 800c7b4:	d2f9      	bcs.n	800c7aa <__hexnan+0xaa>
 800c7b6:	1b3b      	subs	r3, r7, r4
 800c7b8:	f023 0303 	bic.w	r3, r3, #3
 800c7bc:	3304      	adds	r3, #4
 800c7be:	3401      	adds	r4, #1
 800c7c0:	3e03      	subs	r6, #3
 800c7c2:	42b4      	cmp	r4, r6
 800c7c4:	bf88      	it	hi
 800c7c6:	2304      	movhi	r3, #4
 800c7c8:	4443      	add	r3, r8
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	f843 2b04 	str.w	r2, [r3], #4
 800c7d0:	429f      	cmp	r7, r3
 800c7d2:	d2fb      	bcs.n	800c7cc <__hexnan+0xcc>
 800c7d4:	683b      	ldr	r3, [r7, #0]
 800c7d6:	b91b      	cbnz	r3, 800c7e0 <__hexnan+0xe0>
 800c7d8:	4547      	cmp	r7, r8
 800c7da:	d128      	bne.n	800c82e <__hexnan+0x12e>
 800c7dc:	2301      	movs	r3, #1
 800c7de:	603b      	str	r3, [r7, #0]
 800c7e0:	2005      	movs	r0, #5
 800c7e2:	b007      	add	sp, #28
 800c7e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7e8:	3501      	adds	r5, #1
 800c7ea:	2d08      	cmp	r5, #8
 800c7ec:	f10b 0b01 	add.w	fp, fp, #1
 800c7f0:	dd06      	ble.n	800c800 <__hexnan+0x100>
 800c7f2:	4544      	cmp	r4, r8
 800c7f4:	d9c1      	bls.n	800c77a <__hexnan+0x7a>
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	f844 3c04 	str.w	r3, [r4, #-4]
 800c7fc:	2501      	movs	r5, #1
 800c7fe:	3c04      	subs	r4, #4
 800c800:	6822      	ldr	r2, [r4, #0]
 800c802:	f000 000f 	and.w	r0, r0, #15
 800c806:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c80a:	6020      	str	r0, [r4, #0]
 800c80c:	e7b5      	b.n	800c77a <__hexnan+0x7a>
 800c80e:	2508      	movs	r5, #8
 800c810:	e7b3      	b.n	800c77a <__hexnan+0x7a>
 800c812:	9b01      	ldr	r3, [sp, #4]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d0dd      	beq.n	800c7d4 <__hexnan+0xd4>
 800c818:	f1c3 0320 	rsb	r3, r3, #32
 800c81c:	f04f 32ff 	mov.w	r2, #4294967295
 800c820:	40da      	lsrs	r2, r3
 800c822:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c826:	4013      	ands	r3, r2
 800c828:	f846 3c04 	str.w	r3, [r6, #-4]
 800c82c:	e7d2      	b.n	800c7d4 <__hexnan+0xd4>
 800c82e:	3f04      	subs	r7, #4
 800c830:	e7d0      	b.n	800c7d4 <__hexnan+0xd4>
 800c832:	2004      	movs	r0, #4
 800c834:	e7d5      	b.n	800c7e2 <__hexnan+0xe2>

0800c836 <__ascii_mbtowc>:
 800c836:	b082      	sub	sp, #8
 800c838:	b901      	cbnz	r1, 800c83c <__ascii_mbtowc+0x6>
 800c83a:	a901      	add	r1, sp, #4
 800c83c:	b142      	cbz	r2, 800c850 <__ascii_mbtowc+0x1a>
 800c83e:	b14b      	cbz	r3, 800c854 <__ascii_mbtowc+0x1e>
 800c840:	7813      	ldrb	r3, [r2, #0]
 800c842:	600b      	str	r3, [r1, #0]
 800c844:	7812      	ldrb	r2, [r2, #0]
 800c846:	1e10      	subs	r0, r2, #0
 800c848:	bf18      	it	ne
 800c84a:	2001      	movne	r0, #1
 800c84c:	b002      	add	sp, #8
 800c84e:	4770      	bx	lr
 800c850:	4610      	mov	r0, r2
 800c852:	e7fb      	b.n	800c84c <__ascii_mbtowc+0x16>
 800c854:	f06f 0001 	mvn.w	r0, #1
 800c858:	e7f8      	b.n	800c84c <__ascii_mbtowc+0x16>

0800c85a <_realloc_r>:
 800c85a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c85e:	4607      	mov	r7, r0
 800c860:	4614      	mov	r4, r2
 800c862:	460d      	mov	r5, r1
 800c864:	b921      	cbnz	r1, 800c870 <_realloc_r+0x16>
 800c866:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c86a:	4611      	mov	r1, r2
 800c86c:	f7fd bae4 	b.w	8009e38 <_malloc_r>
 800c870:	b92a      	cbnz	r2, 800c87e <_realloc_r+0x24>
 800c872:	f7fd fa6d 	bl	8009d50 <_free_r>
 800c876:	4625      	mov	r5, r4
 800c878:	4628      	mov	r0, r5
 800c87a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c87e:	f000 f8b2 	bl	800c9e6 <_malloc_usable_size_r>
 800c882:	4284      	cmp	r4, r0
 800c884:	4606      	mov	r6, r0
 800c886:	d802      	bhi.n	800c88e <_realloc_r+0x34>
 800c888:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c88c:	d8f4      	bhi.n	800c878 <_realloc_r+0x1e>
 800c88e:	4621      	mov	r1, r4
 800c890:	4638      	mov	r0, r7
 800c892:	f7fd fad1 	bl	8009e38 <_malloc_r>
 800c896:	4680      	mov	r8, r0
 800c898:	b908      	cbnz	r0, 800c89e <_realloc_r+0x44>
 800c89a:	4645      	mov	r5, r8
 800c89c:	e7ec      	b.n	800c878 <_realloc_r+0x1e>
 800c89e:	42b4      	cmp	r4, r6
 800c8a0:	4622      	mov	r2, r4
 800c8a2:	4629      	mov	r1, r5
 800c8a4:	bf28      	it	cs
 800c8a6:	4632      	movcs	r2, r6
 800c8a8:	f7fc fbe5 	bl	8009076 <memcpy>
 800c8ac:	4629      	mov	r1, r5
 800c8ae:	4638      	mov	r0, r7
 800c8b0:	f7fd fa4e 	bl	8009d50 <_free_r>
 800c8b4:	e7f1      	b.n	800c89a <_realloc_r+0x40>
	...

0800c8b8 <_strtoul_l.isra.0>:
 800c8b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c8bc:	4e34      	ldr	r6, [pc, #208]	@ (800c990 <_strtoul_l.isra.0+0xd8>)
 800c8be:	4686      	mov	lr, r0
 800c8c0:	460d      	mov	r5, r1
 800c8c2:	4628      	mov	r0, r5
 800c8c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c8c8:	5d37      	ldrb	r7, [r6, r4]
 800c8ca:	f017 0708 	ands.w	r7, r7, #8
 800c8ce:	d1f8      	bne.n	800c8c2 <_strtoul_l.isra.0+0xa>
 800c8d0:	2c2d      	cmp	r4, #45	@ 0x2d
 800c8d2:	d110      	bne.n	800c8f6 <_strtoul_l.isra.0+0x3e>
 800c8d4:	782c      	ldrb	r4, [r5, #0]
 800c8d6:	2701      	movs	r7, #1
 800c8d8:	1c85      	adds	r5, r0, #2
 800c8da:	f033 0010 	bics.w	r0, r3, #16
 800c8de:	d115      	bne.n	800c90c <_strtoul_l.isra.0+0x54>
 800c8e0:	2c30      	cmp	r4, #48	@ 0x30
 800c8e2:	d10d      	bne.n	800c900 <_strtoul_l.isra.0+0x48>
 800c8e4:	7828      	ldrb	r0, [r5, #0]
 800c8e6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800c8ea:	2858      	cmp	r0, #88	@ 0x58
 800c8ec:	d108      	bne.n	800c900 <_strtoul_l.isra.0+0x48>
 800c8ee:	786c      	ldrb	r4, [r5, #1]
 800c8f0:	3502      	adds	r5, #2
 800c8f2:	2310      	movs	r3, #16
 800c8f4:	e00a      	b.n	800c90c <_strtoul_l.isra.0+0x54>
 800c8f6:	2c2b      	cmp	r4, #43	@ 0x2b
 800c8f8:	bf04      	itt	eq
 800c8fa:	782c      	ldrbeq	r4, [r5, #0]
 800c8fc:	1c85      	addeq	r5, r0, #2
 800c8fe:	e7ec      	b.n	800c8da <_strtoul_l.isra.0+0x22>
 800c900:	2b00      	cmp	r3, #0
 800c902:	d1f6      	bne.n	800c8f2 <_strtoul_l.isra.0+0x3a>
 800c904:	2c30      	cmp	r4, #48	@ 0x30
 800c906:	bf14      	ite	ne
 800c908:	230a      	movne	r3, #10
 800c90a:	2308      	moveq	r3, #8
 800c90c:	f04f 38ff 	mov.w	r8, #4294967295
 800c910:	2600      	movs	r6, #0
 800c912:	fbb8 f8f3 	udiv	r8, r8, r3
 800c916:	fb03 f908 	mul.w	r9, r3, r8
 800c91a:	ea6f 0909 	mvn.w	r9, r9
 800c91e:	4630      	mov	r0, r6
 800c920:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800c924:	f1bc 0f09 	cmp.w	ip, #9
 800c928:	d810      	bhi.n	800c94c <_strtoul_l.isra.0+0x94>
 800c92a:	4664      	mov	r4, ip
 800c92c:	42a3      	cmp	r3, r4
 800c92e:	dd1e      	ble.n	800c96e <_strtoul_l.isra.0+0xb6>
 800c930:	f1b6 3fff 	cmp.w	r6, #4294967295
 800c934:	d007      	beq.n	800c946 <_strtoul_l.isra.0+0x8e>
 800c936:	4580      	cmp	r8, r0
 800c938:	d316      	bcc.n	800c968 <_strtoul_l.isra.0+0xb0>
 800c93a:	d101      	bne.n	800c940 <_strtoul_l.isra.0+0x88>
 800c93c:	45a1      	cmp	r9, r4
 800c93e:	db13      	blt.n	800c968 <_strtoul_l.isra.0+0xb0>
 800c940:	fb00 4003 	mla	r0, r0, r3, r4
 800c944:	2601      	movs	r6, #1
 800c946:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c94a:	e7e9      	b.n	800c920 <_strtoul_l.isra.0+0x68>
 800c94c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800c950:	f1bc 0f19 	cmp.w	ip, #25
 800c954:	d801      	bhi.n	800c95a <_strtoul_l.isra.0+0xa2>
 800c956:	3c37      	subs	r4, #55	@ 0x37
 800c958:	e7e8      	b.n	800c92c <_strtoul_l.isra.0+0x74>
 800c95a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800c95e:	f1bc 0f19 	cmp.w	ip, #25
 800c962:	d804      	bhi.n	800c96e <_strtoul_l.isra.0+0xb6>
 800c964:	3c57      	subs	r4, #87	@ 0x57
 800c966:	e7e1      	b.n	800c92c <_strtoul_l.isra.0+0x74>
 800c968:	f04f 36ff 	mov.w	r6, #4294967295
 800c96c:	e7eb      	b.n	800c946 <_strtoul_l.isra.0+0x8e>
 800c96e:	1c73      	adds	r3, r6, #1
 800c970:	d106      	bne.n	800c980 <_strtoul_l.isra.0+0xc8>
 800c972:	2322      	movs	r3, #34	@ 0x22
 800c974:	f8ce 3000 	str.w	r3, [lr]
 800c978:	4630      	mov	r0, r6
 800c97a:	b932      	cbnz	r2, 800c98a <_strtoul_l.isra.0+0xd2>
 800c97c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c980:	b107      	cbz	r7, 800c984 <_strtoul_l.isra.0+0xcc>
 800c982:	4240      	negs	r0, r0
 800c984:	2a00      	cmp	r2, #0
 800c986:	d0f9      	beq.n	800c97c <_strtoul_l.isra.0+0xc4>
 800c988:	b106      	cbz	r6, 800c98c <_strtoul_l.isra.0+0xd4>
 800c98a:	1e69      	subs	r1, r5, #1
 800c98c:	6011      	str	r1, [r2, #0]
 800c98e:	e7f5      	b.n	800c97c <_strtoul_l.isra.0+0xc4>
 800c990:	0800d9e9 	.word	0x0800d9e9

0800c994 <_strtoul_r>:
 800c994:	f7ff bf90 	b.w	800c8b8 <_strtoul_l.isra.0>

0800c998 <__ascii_wctomb>:
 800c998:	4603      	mov	r3, r0
 800c99a:	4608      	mov	r0, r1
 800c99c:	b141      	cbz	r1, 800c9b0 <__ascii_wctomb+0x18>
 800c99e:	2aff      	cmp	r2, #255	@ 0xff
 800c9a0:	d904      	bls.n	800c9ac <__ascii_wctomb+0x14>
 800c9a2:	228a      	movs	r2, #138	@ 0x8a
 800c9a4:	601a      	str	r2, [r3, #0]
 800c9a6:	f04f 30ff 	mov.w	r0, #4294967295
 800c9aa:	4770      	bx	lr
 800c9ac:	700a      	strb	r2, [r1, #0]
 800c9ae:	2001      	movs	r0, #1
 800c9b0:	4770      	bx	lr
	...

0800c9b4 <fiprintf>:
 800c9b4:	b40e      	push	{r1, r2, r3}
 800c9b6:	b503      	push	{r0, r1, lr}
 800c9b8:	4601      	mov	r1, r0
 800c9ba:	ab03      	add	r3, sp, #12
 800c9bc:	4805      	ldr	r0, [pc, #20]	@ (800c9d4 <fiprintf+0x20>)
 800c9be:	f853 2b04 	ldr.w	r2, [r3], #4
 800c9c2:	6800      	ldr	r0, [r0, #0]
 800c9c4:	9301      	str	r3, [sp, #4]
 800c9c6:	f000 f83f 	bl	800ca48 <_vfiprintf_r>
 800c9ca:	b002      	add	sp, #8
 800c9cc:	f85d eb04 	ldr.w	lr, [sp], #4
 800c9d0:	b003      	add	sp, #12
 800c9d2:	4770      	bx	lr
 800c9d4:	20000034 	.word	0x20000034

0800c9d8 <abort>:
 800c9d8:	b508      	push	{r3, lr}
 800c9da:	2006      	movs	r0, #6
 800c9dc:	f000 fa08 	bl	800cdf0 <raise>
 800c9e0:	2001      	movs	r0, #1
 800c9e2:	f7f5 f8fb 	bl	8001bdc <_exit>

0800c9e6 <_malloc_usable_size_r>:
 800c9e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c9ea:	1f18      	subs	r0, r3, #4
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	bfbc      	itt	lt
 800c9f0:	580b      	ldrlt	r3, [r1, r0]
 800c9f2:	18c0      	addlt	r0, r0, r3
 800c9f4:	4770      	bx	lr

0800c9f6 <__sfputc_r>:
 800c9f6:	6893      	ldr	r3, [r2, #8]
 800c9f8:	3b01      	subs	r3, #1
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	b410      	push	{r4}
 800c9fe:	6093      	str	r3, [r2, #8]
 800ca00:	da08      	bge.n	800ca14 <__sfputc_r+0x1e>
 800ca02:	6994      	ldr	r4, [r2, #24]
 800ca04:	42a3      	cmp	r3, r4
 800ca06:	db01      	blt.n	800ca0c <__sfputc_r+0x16>
 800ca08:	290a      	cmp	r1, #10
 800ca0a:	d103      	bne.n	800ca14 <__sfputc_r+0x1e>
 800ca0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca10:	f000 b932 	b.w	800cc78 <__swbuf_r>
 800ca14:	6813      	ldr	r3, [r2, #0]
 800ca16:	1c58      	adds	r0, r3, #1
 800ca18:	6010      	str	r0, [r2, #0]
 800ca1a:	7019      	strb	r1, [r3, #0]
 800ca1c:	4608      	mov	r0, r1
 800ca1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca22:	4770      	bx	lr

0800ca24 <__sfputs_r>:
 800ca24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca26:	4606      	mov	r6, r0
 800ca28:	460f      	mov	r7, r1
 800ca2a:	4614      	mov	r4, r2
 800ca2c:	18d5      	adds	r5, r2, r3
 800ca2e:	42ac      	cmp	r4, r5
 800ca30:	d101      	bne.n	800ca36 <__sfputs_r+0x12>
 800ca32:	2000      	movs	r0, #0
 800ca34:	e007      	b.n	800ca46 <__sfputs_r+0x22>
 800ca36:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca3a:	463a      	mov	r2, r7
 800ca3c:	4630      	mov	r0, r6
 800ca3e:	f7ff ffda 	bl	800c9f6 <__sfputc_r>
 800ca42:	1c43      	adds	r3, r0, #1
 800ca44:	d1f3      	bne.n	800ca2e <__sfputs_r+0xa>
 800ca46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ca48 <_vfiprintf_r>:
 800ca48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca4c:	460d      	mov	r5, r1
 800ca4e:	b09d      	sub	sp, #116	@ 0x74
 800ca50:	4614      	mov	r4, r2
 800ca52:	4698      	mov	r8, r3
 800ca54:	4606      	mov	r6, r0
 800ca56:	b118      	cbz	r0, 800ca60 <_vfiprintf_r+0x18>
 800ca58:	6a03      	ldr	r3, [r0, #32]
 800ca5a:	b90b      	cbnz	r3, 800ca60 <_vfiprintf_r+0x18>
 800ca5c:	f7fc f9b2 	bl	8008dc4 <__sinit>
 800ca60:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ca62:	07d9      	lsls	r1, r3, #31
 800ca64:	d405      	bmi.n	800ca72 <_vfiprintf_r+0x2a>
 800ca66:	89ab      	ldrh	r3, [r5, #12]
 800ca68:	059a      	lsls	r2, r3, #22
 800ca6a:	d402      	bmi.n	800ca72 <_vfiprintf_r+0x2a>
 800ca6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ca6e:	f7fc fb00 	bl	8009072 <__retarget_lock_acquire_recursive>
 800ca72:	89ab      	ldrh	r3, [r5, #12]
 800ca74:	071b      	lsls	r3, r3, #28
 800ca76:	d501      	bpl.n	800ca7c <_vfiprintf_r+0x34>
 800ca78:	692b      	ldr	r3, [r5, #16]
 800ca7a:	b99b      	cbnz	r3, 800caa4 <_vfiprintf_r+0x5c>
 800ca7c:	4629      	mov	r1, r5
 800ca7e:	4630      	mov	r0, r6
 800ca80:	f000 f938 	bl	800ccf4 <__swsetup_r>
 800ca84:	b170      	cbz	r0, 800caa4 <_vfiprintf_r+0x5c>
 800ca86:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ca88:	07dc      	lsls	r4, r3, #31
 800ca8a:	d504      	bpl.n	800ca96 <_vfiprintf_r+0x4e>
 800ca8c:	f04f 30ff 	mov.w	r0, #4294967295
 800ca90:	b01d      	add	sp, #116	@ 0x74
 800ca92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca96:	89ab      	ldrh	r3, [r5, #12]
 800ca98:	0598      	lsls	r0, r3, #22
 800ca9a:	d4f7      	bmi.n	800ca8c <_vfiprintf_r+0x44>
 800ca9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ca9e:	f7fc fae9 	bl	8009074 <__retarget_lock_release_recursive>
 800caa2:	e7f3      	b.n	800ca8c <_vfiprintf_r+0x44>
 800caa4:	2300      	movs	r3, #0
 800caa6:	9309      	str	r3, [sp, #36]	@ 0x24
 800caa8:	2320      	movs	r3, #32
 800caaa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800caae:	f8cd 800c 	str.w	r8, [sp, #12]
 800cab2:	2330      	movs	r3, #48	@ 0x30
 800cab4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800cc64 <_vfiprintf_r+0x21c>
 800cab8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cabc:	f04f 0901 	mov.w	r9, #1
 800cac0:	4623      	mov	r3, r4
 800cac2:	469a      	mov	sl, r3
 800cac4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cac8:	b10a      	cbz	r2, 800cace <_vfiprintf_r+0x86>
 800caca:	2a25      	cmp	r2, #37	@ 0x25
 800cacc:	d1f9      	bne.n	800cac2 <_vfiprintf_r+0x7a>
 800cace:	ebba 0b04 	subs.w	fp, sl, r4
 800cad2:	d00b      	beq.n	800caec <_vfiprintf_r+0xa4>
 800cad4:	465b      	mov	r3, fp
 800cad6:	4622      	mov	r2, r4
 800cad8:	4629      	mov	r1, r5
 800cada:	4630      	mov	r0, r6
 800cadc:	f7ff ffa2 	bl	800ca24 <__sfputs_r>
 800cae0:	3001      	adds	r0, #1
 800cae2:	f000 80a7 	beq.w	800cc34 <_vfiprintf_r+0x1ec>
 800cae6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cae8:	445a      	add	r2, fp
 800caea:	9209      	str	r2, [sp, #36]	@ 0x24
 800caec:	f89a 3000 	ldrb.w	r3, [sl]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	f000 809f 	beq.w	800cc34 <_vfiprintf_r+0x1ec>
 800caf6:	2300      	movs	r3, #0
 800caf8:	f04f 32ff 	mov.w	r2, #4294967295
 800cafc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cb00:	f10a 0a01 	add.w	sl, sl, #1
 800cb04:	9304      	str	r3, [sp, #16]
 800cb06:	9307      	str	r3, [sp, #28]
 800cb08:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cb0c:	931a      	str	r3, [sp, #104]	@ 0x68
 800cb0e:	4654      	mov	r4, sl
 800cb10:	2205      	movs	r2, #5
 800cb12:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb16:	4853      	ldr	r0, [pc, #332]	@ (800cc64 <_vfiprintf_r+0x21c>)
 800cb18:	f7f3 fb5a 	bl	80001d0 <memchr>
 800cb1c:	9a04      	ldr	r2, [sp, #16]
 800cb1e:	b9d8      	cbnz	r0, 800cb58 <_vfiprintf_r+0x110>
 800cb20:	06d1      	lsls	r1, r2, #27
 800cb22:	bf44      	itt	mi
 800cb24:	2320      	movmi	r3, #32
 800cb26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cb2a:	0713      	lsls	r3, r2, #28
 800cb2c:	bf44      	itt	mi
 800cb2e:	232b      	movmi	r3, #43	@ 0x2b
 800cb30:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cb34:	f89a 3000 	ldrb.w	r3, [sl]
 800cb38:	2b2a      	cmp	r3, #42	@ 0x2a
 800cb3a:	d015      	beq.n	800cb68 <_vfiprintf_r+0x120>
 800cb3c:	9a07      	ldr	r2, [sp, #28]
 800cb3e:	4654      	mov	r4, sl
 800cb40:	2000      	movs	r0, #0
 800cb42:	f04f 0c0a 	mov.w	ip, #10
 800cb46:	4621      	mov	r1, r4
 800cb48:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb4c:	3b30      	subs	r3, #48	@ 0x30
 800cb4e:	2b09      	cmp	r3, #9
 800cb50:	d94b      	bls.n	800cbea <_vfiprintf_r+0x1a2>
 800cb52:	b1b0      	cbz	r0, 800cb82 <_vfiprintf_r+0x13a>
 800cb54:	9207      	str	r2, [sp, #28]
 800cb56:	e014      	b.n	800cb82 <_vfiprintf_r+0x13a>
 800cb58:	eba0 0308 	sub.w	r3, r0, r8
 800cb5c:	fa09 f303 	lsl.w	r3, r9, r3
 800cb60:	4313      	orrs	r3, r2
 800cb62:	9304      	str	r3, [sp, #16]
 800cb64:	46a2      	mov	sl, r4
 800cb66:	e7d2      	b.n	800cb0e <_vfiprintf_r+0xc6>
 800cb68:	9b03      	ldr	r3, [sp, #12]
 800cb6a:	1d19      	adds	r1, r3, #4
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	9103      	str	r1, [sp, #12]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	bfbb      	ittet	lt
 800cb74:	425b      	neglt	r3, r3
 800cb76:	f042 0202 	orrlt.w	r2, r2, #2
 800cb7a:	9307      	strge	r3, [sp, #28]
 800cb7c:	9307      	strlt	r3, [sp, #28]
 800cb7e:	bfb8      	it	lt
 800cb80:	9204      	strlt	r2, [sp, #16]
 800cb82:	7823      	ldrb	r3, [r4, #0]
 800cb84:	2b2e      	cmp	r3, #46	@ 0x2e
 800cb86:	d10a      	bne.n	800cb9e <_vfiprintf_r+0x156>
 800cb88:	7863      	ldrb	r3, [r4, #1]
 800cb8a:	2b2a      	cmp	r3, #42	@ 0x2a
 800cb8c:	d132      	bne.n	800cbf4 <_vfiprintf_r+0x1ac>
 800cb8e:	9b03      	ldr	r3, [sp, #12]
 800cb90:	1d1a      	adds	r2, r3, #4
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	9203      	str	r2, [sp, #12]
 800cb96:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cb9a:	3402      	adds	r4, #2
 800cb9c:	9305      	str	r3, [sp, #20]
 800cb9e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cc74 <_vfiprintf_r+0x22c>
 800cba2:	7821      	ldrb	r1, [r4, #0]
 800cba4:	2203      	movs	r2, #3
 800cba6:	4650      	mov	r0, sl
 800cba8:	f7f3 fb12 	bl	80001d0 <memchr>
 800cbac:	b138      	cbz	r0, 800cbbe <_vfiprintf_r+0x176>
 800cbae:	9b04      	ldr	r3, [sp, #16]
 800cbb0:	eba0 000a 	sub.w	r0, r0, sl
 800cbb4:	2240      	movs	r2, #64	@ 0x40
 800cbb6:	4082      	lsls	r2, r0
 800cbb8:	4313      	orrs	r3, r2
 800cbba:	3401      	adds	r4, #1
 800cbbc:	9304      	str	r3, [sp, #16]
 800cbbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbc2:	4829      	ldr	r0, [pc, #164]	@ (800cc68 <_vfiprintf_r+0x220>)
 800cbc4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cbc8:	2206      	movs	r2, #6
 800cbca:	f7f3 fb01 	bl	80001d0 <memchr>
 800cbce:	2800      	cmp	r0, #0
 800cbd0:	d03f      	beq.n	800cc52 <_vfiprintf_r+0x20a>
 800cbd2:	4b26      	ldr	r3, [pc, #152]	@ (800cc6c <_vfiprintf_r+0x224>)
 800cbd4:	bb1b      	cbnz	r3, 800cc1e <_vfiprintf_r+0x1d6>
 800cbd6:	9b03      	ldr	r3, [sp, #12]
 800cbd8:	3307      	adds	r3, #7
 800cbda:	f023 0307 	bic.w	r3, r3, #7
 800cbde:	3308      	adds	r3, #8
 800cbe0:	9303      	str	r3, [sp, #12]
 800cbe2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cbe4:	443b      	add	r3, r7
 800cbe6:	9309      	str	r3, [sp, #36]	@ 0x24
 800cbe8:	e76a      	b.n	800cac0 <_vfiprintf_r+0x78>
 800cbea:	fb0c 3202 	mla	r2, ip, r2, r3
 800cbee:	460c      	mov	r4, r1
 800cbf0:	2001      	movs	r0, #1
 800cbf2:	e7a8      	b.n	800cb46 <_vfiprintf_r+0xfe>
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	3401      	adds	r4, #1
 800cbf8:	9305      	str	r3, [sp, #20]
 800cbfa:	4619      	mov	r1, r3
 800cbfc:	f04f 0c0a 	mov.w	ip, #10
 800cc00:	4620      	mov	r0, r4
 800cc02:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc06:	3a30      	subs	r2, #48	@ 0x30
 800cc08:	2a09      	cmp	r2, #9
 800cc0a:	d903      	bls.n	800cc14 <_vfiprintf_r+0x1cc>
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d0c6      	beq.n	800cb9e <_vfiprintf_r+0x156>
 800cc10:	9105      	str	r1, [sp, #20]
 800cc12:	e7c4      	b.n	800cb9e <_vfiprintf_r+0x156>
 800cc14:	fb0c 2101 	mla	r1, ip, r1, r2
 800cc18:	4604      	mov	r4, r0
 800cc1a:	2301      	movs	r3, #1
 800cc1c:	e7f0      	b.n	800cc00 <_vfiprintf_r+0x1b8>
 800cc1e:	ab03      	add	r3, sp, #12
 800cc20:	9300      	str	r3, [sp, #0]
 800cc22:	462a      	mov	r2, r5
 800cc24:	4b12      	ldr	r3, [pc, #72]	@ (800cc70 <_vfiprintf_r+0x228>)
 800cc26:	a904      	add	r1, sp, #16
 800cc28:	4630      	mov	r0, r6
 800cc2a:	f7fb fa7b 	bl	8008124 <_printf_float>
 800cc2e:	4607      	mov	r7, r0
 800cc30:	1c78      	adds	r0, r7, #1
 800cc32:	d1d6      	bne.n	800cbe2 <_vfiprintf_r+0x19a>
 800cc34:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cc36:	07d9      	lsls	r1, r3, #31
 800cc38:	d405      	bmi.n	800cc46 <_vfiprintf_r+0x1fe>
 800cc3a:	89ab      	ldrh	r3, [r5, #12]
 800cc3c:	059a      	lsls	r2, r3, #22
 800cc3e:	d402      	bmi.n	800cc46 <_vfiprintf_r+0x1fe>
 800cc40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cc42:	f7fc fa17 	bl	8009074 <__retarget_lock_release_recursive>
 800cc46:	89ab      	ldrh	r3, [r5, #12]
 800cc48:	065b      	lsls	r3, r3, #25
 800cc4a:	f53f af1f 	bmi.w	800ca8c <_vfiprintf_r+0x44>
 800cc4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cc50:	e71e      	b.n	800ca90 <_vfiprintf_r+0x48>
 800cc52:	ab03      	add	r3, sp, #12
 800cc54:	9300      	str	r3, [sp, #0]
 800cc56:	462a      	mov	r2, r5
 800cc58:	4b05      	ldr	r3, [pc, #20]	@ (800cc70 <_vfiprintf_r+0x228>)
 800cc5a:	a904      	add	r1, sp, #16
 800cc5c:	4630      	mov	r0, r6
 800cc5e:	f7fb fcf9 	bl	8008654 <_printf_i>
 800cc62:	e7e4      	b.n	800cc2e <_vfiprintf_r+0x1e6>
 800cc64:	0800d7c7 	.word	0x0800d7c7
 800cc68:	0800d7d1 	.word	0x0800d7d1
 800cc6c:	08008125 	.word	0x08008125
 800cc70:	0800ca25 	.word	0x0800ca25
 800cc74:	0800d7cd 	.word	0x0800d7cd

0800cc78 <__swbuf_r>:
 800cc78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc7a:	460e      	mov	r6, r1
 800cc7c:	4614      	mov	r4, r2
 800cc7e:	4605      	mov	r5, r0
 800cc80:	b118      	cbz	r0, 800cc8a <__swbuf_r+0x12>
 800cc82:	6a03      	ldr	r3, [r0, #32]
 800cc84:	b90b      	cbnz	r3, 800cc8a <__swbuf_r+0x12>
 800cc86:	f7fc f89d 	bl	8008dc4 <__sinit>
 800cc8a:	69a3      	ldr	r3, [r4, #24]
 800cc8c:	60a3      	str	r3, [r4, #8]
 800cc8e:	89a3      	ldrh	r3, [r4, #12]
 800cc90:	071a      	lsls	r2, r3, #28
 800cc92:	d501      	bpl.n	800cc98 <__swbuf_r+0x20>
 800cc94:	6923      	ldr	r3, [r4, #16]
 800cc96:	b943      	cbnz	r3, 800ccaa <__swbuf_r+0x32>
 800cc98:	4621      	mov	r1, r4
 800cc9a:	4628      	mov	r0, r5
 800cc9c:	f000 f82a 	bl	800ccf4 <__swsetup_r>
 800cca0:	b118      	cbz	r0, 800ccaa <__swbuf_r+0x32>
 800cca2:	f04f 37ff 	mov.w	r7, #4294967295
 800cca6:	4638      	mov	r0, r7
 800cca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ccaa:	6823      	ldr	r3, [r4, #0]
 800ccac:	6922      	ldr	r2, [r4, #16]
 800ccae:	1a98      	subs	r0, r3, r2
 800ccb0:	6963      	ldr	r3, [r4, #20]
 800ccb2:	b2f6      	uxtb	r6, r6
 800ccb4:	4283      	cmp	r3, r0
 800ccb6:	4637      	mov	r7, r6
 800ccb8:	dc05      	bgt.n	800ccc6 <__swbuf_r+0x4e>
 800ccba:	4621      	mov	r1, r4
 800ccbc:	4628      	mov	r0, r5
 800ccbe:	f7ff f96f 	bl	800bfa0 <_fflush_r>
 800ccc2:	2800      	cmp	r0, #0
 800ccc4:	d1ed      	bne.n	800cca2 <__swbuf_r+0x2a>
 800ccc6:	68a3      	ldr	r3, [r4, #8]
 800ccc8:	3b01      	subs	r3, #1
 800ccca:	60a3      	str	r3, [r4, #8]
 800cccc:	6823      	ldr	r3, [r4, #0]
 800ccce:	1c5a      	adds	r2, r3, #1
 800ccd0:	6022      	str	r2, [r4, #0]
 800ccd2:	701e      	strb	r6, [r3, #0]
 800ccd4:	6962      	ldr	r2, [r4, #20]
 800ccd6:	1c43      	adds	r3, r0, #1
 800ccd8:	429a      	cmp	r2, r3
 800ccda:	d004      	beq.n	800cce6 <__swbuf_r+0x6e>
 800ccdc:	89a3      	ldrh	r3, [r4, #12]
 800ccde:	07db      	lsls	r3, r3, #31
 800cce0:	d5e1      	bpl.n	800cca6 <__swbuf_r+0x2e>
 800cce2:	2e0a      	cmp	r6, #10
 800cce4:	d1df      	bne.n	800cca6 <__swbuf_r+0x2e>
 800cce6:	4621      	mov	r1, r4
 800cce8:	4628      	mov	r0, r5
 800ccea:	f7ff f959 	bl	800bfa0 <_fflush_r>
 800ccee:	2800      	cmp	r0, #0
 800ccf0:	d0d9      	beq.n	800cca6 <__swbuf_r+0x2e>
 800ccf2:	e7d6      	b.n	800cca2 <__swbuf_r+0x2a>

0800ccf4 <__swsetup_r>:
 800ccf4:	b538      	push	{r3, r4, r5, lr}
 800ccf6:	4b29      	ldr	r3, [pc, #164]	@ (800cd9c <__swsetup_r+0xa8>)
 800ccf8:	4605      	mov	r5, r0
 800ccfa:	6818      	ldr	r0, [r3, #0]
 800ccfc:	460c      	mov	r4, r1
 800ccfe:	b118      	cbz	r0, 800cd08 <__swsetup_r+0x14>
 800cd00:	6a03      	ldr	r3, [r0, #32]
 800cd02:	b90b      	cbnz	r3, 800cd08 <__swsetup_r+0x14>
 800cd04:	f7fc f85e 	bl	8008dc4 <__sinit>
 800cd08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd0c:	0719      	lsls	r1, r3, #28
 800cd0e:	d422      	bmi.n	800cd56 <__swsetup_r+0x62>
 800cd10:	06da      	lsls	r2, r3, #27
 800cd12:	d407      	bmi.n	800cd24 <__swsetup_r+0x30>
 800cd14:	2209      	movs	r2, #9
 800cd16:	602a      	str	r2, [r5, #0]
 800cd18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cd1c:	81a3      	strh	r3, [r4, #12]
 800cd1e:	f04f 30ff 	mov.w	r0, #4294967295
 800cd22:	e033      	b.n	800cd8c <__swsetup_r+0x98>
 800cd24:	0758      	lsls	r0, r3, #29
 800cd26:	d512      	bpl.n	800cd4e <__swsetup_r+0x5a>
 800cd28:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cd2a:	b141      	cbz	r1, 800cd3e <__swsetup_r+0x4a>
 800cd2c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cd30:	4299      	cmp	r1, r3
 800cd32:	d002      	beq.n	800cd3a <__swsetup_r+0x46>
 800cd34:	4628      	mov	r0, r5
 800cd36:	f7fd f80b 	bl	8009d50 <_free_r>
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	6363      	str	r3, [r4, #52]	@ 0x34
 800cd3e:	89a3      	ldrh	r3, [r4, #12]
 800cd40:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cd44:	81a3      	strh	r3, [r4, #12]
 800cd46:	2300      	movs	r3, #0
 800cd48:	6063      	str	r3, [r4, #4]
 800cd4a:	6923      	ldr	r3, [r4, #16]
 800cd4c:	6023      	str	r3, [r4, #0]
 800cd4e:	89a3      	ldrh	r3, [r4, #12]
 800cd50:	f043 0308 	orr.w	r3, r3, #8
 800cd54:	81a3      	strh	r3, [r4, #12]
 800cd56:	6923      	ldr	r3, [r4, #16]
 800cd58:	b94b      	cbnz	r3, 800cd6e <__swsetup_r+0x7a>
 800cd5a:	89a3      	ldrh	r3, [r4, #12]
 800cd5c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cd60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cd64:	d003      	beq.n	800cd6e <__swsetup_r+0x7a>
 800cd66:	4621      	mov	r1, r4
 800cd68:	4628      	mov	r0, r5
 800cd6a:	f000 f883 	bl	800ce74 <__smakebuf_r>
 800cd6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd72:	f013 0201 	ands.w	r2, r3, #1
 800cd76:	d00a      	beq.n	800cd8e <__swsetup_r+0x9a>
 800cd78:	2200      	movs	r2, #0
 800cd7a:	60a2      	str	r2, [r4, #8]
 800cd7c:	6962      	ldr	r2, [r4, #20]
 800cd7e:	4252      	negs	r2, r2
 800cd80:	61a2      	str	r2, [r4, #24]
 800cd82:	6922      	ldr	r2, [r4, #16]
 800cd84:	b942      	cbnz	r2, 800cd98 <__swsetup_r+0xa4>
 800cd86:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cd8a:	d1c5      	bne.n	800cd18 <__swsetup_r+0x24>
 800cd8c:	bd38      	pop	{r3, r4, r5, pc}
 800cd8e:	0799      	lsls	r1, r3, #30
 800cd90:	bf58      	it	pl
 800cd92:	6962      	ldrpl	r2, [r4, #20]
 800cd94:	60a2      	str	r2, [r4, #8]
 800cd96:	e7f4      	b.n	800cd82 <__swsetup_r+0x8e>
 800cd98:	2000      	movs	r0, #0
 800cd9a:	e7f7      	b.n	800cd8c <__swsetup_r+0x98>
 800cd9c:	20000034 	.word	0x20000034

0800cda0 <_raise_r>:
 800cda0:	291f      	cmp	r1, #31
 800cda2:	b538      	push	{r3, r4, r5, lr}
 800cda4:	4605      	mov	r5, r0
 800cda6:	460c      	mov	r4, r1
 800cda8:	d904      	bls.n	800cdb4 <_raise_r+0x14>
 800cdaa:	2316      	movs	r3, #22
 800cdac:	6003      	str	r3, [r0, #0]
 800cdae:	f04f 30ff 	mov.w	r0, #4294967295
 800cdb2:	bd38      	pop	{r3, r4, r5, pc}
 800cdb4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cdb6:	b112      	cbz	r2, 800cdbe <_raise_r+0x1e>
 800cdb8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cdbc:	b94b      	cbnz	r3, 800cdd2 <_raise_r+0x32>
 800cdbe:	4628      	mov	r0, r5
 800cdc0:	f000 f830 	bl	800ce24 <_getpid_r>
 800cdc4:	4622      	mov	r2, r4
 800cdc6:	4601      	mov	r1, r0
 800cdc8:	4628      	mov	r0, r5
 800cdca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cdce:	f000 b817 	b.w	800ce00 <_kill_r>
 800cdd2:	2b01      	cmp	r3, #1
 800cdd4:	d00a      	beq.n	800cdec <_raise_r+0x4c>
 800cdd6:	1c59      	adds	r1, r3, #1
 800cdd8:	d103      	bne.n	800cde2 <_raise_r+0x42>
 800cdda:	2316      	movs	r3, #22
 800cddc:	6003      	str	r3, [r0, #0]
 800cdde:	2001      	movs	r0, #1
 800cde0:	e7e7      	b.n	800cdb2 <_raise_r+0x12>
 800cde2:	2100      	movs	r1, #0
 800cde4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cde8:	4620      	mov	r0, r4
 800cdea:	4798      	blx	r3
 800cdec:	2000      	movs	r0, #0
 800cdee:	e7e0      	b.n	800cdb2 <_raise_r+0x12>

0800cdf0 <raise>:
 800cdf0:	4b02      	ldr	r3, [pc, #8]	@ (800cdfc <raise+0xc>)
 800cdf2:	4601      	mov	r1, r0
 800cdf4:	6818      	ldr	r0, [r3, #0]
 800cdf6:	f7ff bfd3 	b.w	800cda0 <_raise_r>
 800cdfa:	bf00      	nop
 800cdfc:	20000034 	.word	0x20000034

0800ce00 <_kill_r>:
 800ce00:	b538      	push	{r3, r4, r5, lr}
 800ce02:	4d07      	ldr	r5, [pc, #28]	@ (800ce20 <_kill_r+0x20>)
 800ce04:	2300      	movs	r3, #0
 800ce06:	4604      	mov	r4, r0
 800ce08:	4608      	mov	r0, r1
 800ce0a:	4611      	mov	r1, r2
 800ce0c:	602b      	str	r3, [r5, #0]
 800ce0e:	f7f4 fed5 	bl	8001bbc <_kill>
 800ce12:	1c43      	adds	r3, r0, #1
 800ce14:	d102      	bne.n	800ce1c <_kill_r+0x1c>
 800ce16:	682b      	ldr	r3, [r5, #0]
 800ce18:	b103      	cbz	r3, 800ce1c <_kill_r+0x1c>
 800ce1a:	6023      	str	r3, [r4, #0]
 800ce1c:	bd38      	pop	{r3, r4, r5, pc}
 800ce1e:	bf00      	nop
 800ce20:	20001064 	.word	0x20001064

0800ce24 <_getpid_r>:
 800ce24:	f7f4 bec2 	b.w	8001bac <_getpid>

0800ce28 <__swhatbuf_r>:
 800ce28:	b570      	push	{r4, r5, r6, lr}
 800ce2a:	460c      	mov	r4, r1
 800ce2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce30:	2900      	cmp	r1, #0
 800ce32:	b096      	sub	sp, #88	@ 0x58
 800ce34:	4615      	mov	r5, r2
 800ce36:	461e      	mov	r6, r3
 800ce38:	da0d      	bge.n	800ce56 <__swhatbuf_r+0x2e>
 800ce3a:	89a3      	ldrh	r3, [r4, #12]
 800ce3c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ce40:	f04f 0100 	mov.w	r1, #0
 800ce44:	bf14      	ite	ne
 800ce46:	2340      	movne	r3, #64	@ 0x40
 800ce48:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ce4c:	2000      	movs	r0, #0
 800ce4e:	6031      	str	r1, [r6, #0]
 800ce50:	602b      	str	r3, [r5, #0]
 800ce52:	b016      	add	sp, #88	@ 0x58
 800ce54:	bd70      	pop	{r4, r5, r6, pc}
 800ce56:	466a      	mov	r2, sp
 800ce58:	f000 f848 	bl	800ceec <_fstat_r>
 800ce5c:	2800      	cmp	r0, #0
 800ce5e:	dbec      	blt.n	800ce3a <__swhatbuf_r+0x12>
 800ce60:	9901      	ldr	r1, [sp, #4]
 800ce62:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ce66:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ce6a:	4259      	negs	r1, r3
 800ce6c:	4159      	adcs	r1, r3
 800ce6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ce72:	e7eb      	b.n	800ce4c <__swhatbuf_r+0x24>

0800ce74 <__smakebuf_r>:
 800ce74:	898b      	ldrh	r3, [r1, #12]
 800ce76:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ce78:	079d      	lsls	r5, r3, #30
 800ce7a:	4606      	mov	r6, r0
 800ce7c:	460c      	mov	r4, r1
 800ce7e:	d507      	bpl.n	800ce90 <__smakebuf_r+0x1c>
 800ce80:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ce84:	6023      	str	r3, [r4, #0]
 800ce86:	6123      	str	r3, [r4, #16]
 800ce88:	2301      	movs	r3, #1
 800ce8a:	6163      	str	r3, [r4, #20]
 800ce8c:	b003      	add	sp, #12
 800ce8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce90:	ab01      	add	r3, sp, #4
 800ce92:	466a      	mov	r2, sp
 800ce94:	f7ff ffc8 	bl	800ce28 <__swhatbuf_r>
 800ce98:	9f00      	ldr	r7, [sp, #0]
 800ce9a:	4605      	mov	r5, r0
 800ce9c:	4639      	mov	r1, r7
 800ce9e:	4630      	mov	r0, r6
 800cea0:	f7fc ffca 	bl	8009e38 <_malloc_r>
 800cea4:	b948      	cbnz	r0, 800ceba <__smakebuf_r+0x46>
 800cea6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ceaa:	059a      	lsls	r2, r3, #22
 800ceac:	d4ee      	bmi.n	800ce8c <__smakebuf_r+0x18>
 800ceae:	f023 0303 	bic.w	r3, r3, #3
 800ceb2:	f043 0302 	orr.w	r3, r3, #2
 800ceb6:	81a3      	strh	r3, [r4, #12]
 800ceb8:	e7e2      	b.n	800ce80 <__smakebuf_r+0xc>
 800ceba:	89a3      	ldrh	r3, [r4, #12]
 800cebc:	6020      	str	r0, [r4, #0]
 800cebe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cec2:	81a3      	strh	r3, [r4, #12]
 800cec4:	9b01      	ldr	r3, [sp, #4]
 800cec6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ceca:	b15b      	cbz	r3, 800cee4 <__smakebuf_r+0x70>
 800cecc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ced0:	4630      	mov	r0, r6
 800ced2:	f000 f81d 	bl	800cf10 <_isatty_r>
 800ced6:	b128      	cbz	r0, 800cee4 <__smakebuf_r+0x70>
 800ced8:	89a3      	ldrh	r3, [r4, #12]
 800ceda:	f023 0303 	bic.w	r3, r3, #3
 800cede:	f043 0301 	orr.w	r3, r3, #1
 800cee2:	81a3      	strh	r3, [r4, #12]
 800cee4:	89a3      	ldrh	r3, [r4, #12]
 800cee6:	431d      	orrs	r5, r3
 800cee8:	81a5      	strh	r5, [r4, #12]
 800ceea:	e7cf      	b.n	800ce8c <__smakebuf_r+0x18>

0800ceec <_fstat_r>:
 800ceec:	b538      	push	{r3, r4, r5, lr}
 800ceee:	4d07      	ldr	r5, [pc, #28]	@ (800cf0c <_fstat_r+0x20>)
 800cef0:	2300      	movs	r3, #0
 800cef2:	4604      	mov	r4, r0
 800cef4:	4608      	mov	r0, r1
 800cef6:	4611      	mov	r1, r2
 800cef8:	602b      	str	r3, [r5, #0]
 800cefa:	f7f4 febf 	bl	8001c7c <_fstat>
 800cefe:	1c43      	adds	r3, r0, #1
 800cf00:	d102      	bne.n	800cf08 <_fstat_r+0x1c>
 800cf02:	682b      	ldr	r3, [r5, #0]
 800cf04:	b103      	cbz	r3, 800cf08 <_fstat_r+0x1c>
 800cf06:	6023      	str	r3, [r4, #0]
 800cf08:	bd38      	pop	{r3, r4, r5, pc}
 800cf0a:	bf00      	nop
 800cf0c:	20001064 	.word	0x20001064

0800cf10 <_isatty_r>:
 800cf10:	b538      	push	{r3, r4, r5, lr}
 800cf12:	4d06      	ldr	r5, [pc, #24]	@ (800cf2c <_isatty_r+0x1c>)
 800cf14:	2300      	movs	r3, #0
 800cf16:	4604      	mov	r4, r0
 800cf18:	4608      	mov	r0, r1
 800cf1a:	602b      	str	r3, [r5, #0]
 800cf1c:	f7f4 febe 	bl	8001c9c <_isatty>
 800cf20:	1c43      	adds	r3, r0, #1
 800cf22:	d102      	bne.n	800cf2a <_isatty_r+0x1a>
 800cf24:	682b      	ldr	r3, [r5, #0]
 800cf26:	b103      	cbz	r3, 800cf2a <_isatty_r+0x1a>
 800cf28:	6023      	str	r3, [r4, #0]
 800cf2a:	bd38      	pop	{r3, r4, r5, pc}
 800cf2c:	20001064 	.word	0x20001064

0800cf30 <_init>:
 800cf30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf32:	bf00      	nop
 800cf34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf36:	bc08      	pop	{r3}
 800cf38:	469e      	mov	lr, r3
 800cf3a:	4770      	bx	lr

0800cf3c <_fini>:
 800cf3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf3e:	bf00      	nop
 800cf40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf42:	bc08      	pop	{r3}
 800cf44:	469e      	mov	lr, r3
 800cf46:	4770      	bx	lr
