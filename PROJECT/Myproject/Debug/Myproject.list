
Myproject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a678  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000460  0800a788  0800a788  0000b788  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800abe8  0800abe8  0000c1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800abe8  0800abe8  0000bbe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800abf0  0800abf0  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800abf0  0800abf0  0000bbf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800abf4  0800abf4  0000bbf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800abf8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a20  200001d4  0800adcc  0000c1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000bf4  0800adcc  0000cbf4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000116db  00000000  00000000  0000c1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c0c  00000000  00000000  0001d8d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001148  00000000  00000000  000204e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d97  00000000  00000000  00021630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019267  00000000  00000000  000223c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001686e  00000000  00000000  0003b62e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f7dd  00000000  00000000  00051e9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e1679  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e58  00000000  00000000  000e16bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  000e7514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a770 	.word	0x0800a770

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	0800a770 	.word	0x0800a770

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001b2:	2afd      	cmp	r2, #253	@ 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	@ 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	@ 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_d2uiz>:
 8000bf0:	004a      	lsls	r2, r1, #1
 8000bf2:	d211      	bcs.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bf4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf8:	d211      	bcs.n	8000c1e <__aeabi_d2uiz+0x2e>
 8000bfa:	d50d      	bpl.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bfc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c04:	d40e      	bmi.n	8000c24 <__aeabi_d2uiz+0x34>
 8000c06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c12:	fa23 f002 	lsr.w	r0, r3, r2
 8000c16:	4770      	bx	lr
 8000c18:	f04f 0000 	mov.w	r0, #0
 8000c1c:	4770      	bx	lr
 8000c1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c22:	d102      	bne.n	8000c2a <__aeabi_d2uiz+0x3a>
 8000c24:	f04f 30ff 	mov.w	r0, #4294967295
 8000c28:	4770      	bx	lr
 8000c2a:	f04f 0000 	mov.w	r0, #0
 8000c2e:	4770      	bx	lr

08000c30 <__aeabi_d2f>:
 8000c30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c38:	bf24      	itt	cs
 8000c3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c42:	d90d      	bls.n	8000c60 <__aeabi_d2f+0x30>
 8000c44:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c50:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c58:	bf08      	it	eq
 8000c5a:	f020 0001 	biceq.w	r0, r0, #1
 8000c5e:	4770      	bx	lr
 8000c60:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c64:	d121      	bne.n	8000caa <__aeabi_d2f+0x7a>
 8000c66:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c6a:	bfbc      	itt	lt
 8000c6c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c70:	4770      	bxlt	lr
 8000c72:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c7a:	f1c2 0218 	rsb	r2, r2, #24
 8000c7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c86:	fa20 f002 	lsr.w	r0, r0, r2
 8000c8a:	bf18      	it	ne
 8000c8c:	f040 0001 	orrne.w	r0, r0, #1
 8000c90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ca0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ca4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca8:	e7cc      	b.n	8000c44 <__aeabi_d2f+0x14>
 8000caa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cae:	d107      	bne.n	8000cc0 <__aeabi_d2f+0x90>
 8000cb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cb4:	bf1e      	ittt	ne
 8000cb6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cba:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cbe:	4770      	bxne	lr
 8000cc0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cc4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop

08000cd0 <__aeabi_frsub>:
 8000cd0:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000cd4:	e002      	b.n	8000cdc <__addsf3>
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_fsub>:
 8000cd8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000cdc <__addsf3>:
 8000cdc:	0042      	lsls	r2, r0, #1
 8000cde:	bf1f      	itttt	ne
 8000ce0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ce4:	ea92 0f03 	teqne	r2, r3
 8000ce8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cf0:	d06a      	beq.n	8000dc8 <__addsf3+0xec>
 8000cf2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cf6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cfa:	bfc1      	itttt	gt
 8000cfc:	18d2      	addgt	r2, r2, r3
 8000cfe:	4041      	eorgt	r1, r0
 8000d00:	4048      	eorgt	r0, r1
 8000d02:	4041      	eorgt	r1, r0
 8000d04:	bfb8      	it	lt
 8000d06:	425b      	neglt	r3, r3
 8000d08:	2b19      	cmp	r3, #25
 8000d0a:	bf88      	it	hi
 8000d0c:	4770      	bxhi	lr
 8000d0e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000d12:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d16:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000d1a:	bf18      	it	ne
 8000d1c:	4240      	negne	r0, r0
 8000d1e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000d22:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000d26:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000d2a:	bf18      	it	ne
 8000d2c:	4249      	negne	r1, r1
 8000d2e:	ea92 0f03 	teq	r2, r3
 8000d32:	d03f      	beq.n	8000db4 <__addsf3+0xd8>
 8000d34:	f1a2 0201 	sub.w	r2, r2, #1
 8000d38:	fa41 fc03 	asr.w	ip, r1, r3
 8000d3c:	eb10 000c 	adds.w	r0, r0, ip
 8000d40:	f1c3 0320 	rsb	r3, r3, #32
 8000d44:	fa01 f103 	lsl.w	r1, r1, r3
 8000d48:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d4c:	d502      	bpl.n	8000d54 <__addsf3+0x78>
 8000d4e:	4249      	negs	r1, r1
 8000d50:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d54:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000d58:	d313      	bcc.n	8000d82 <__addsf3+0xa6>
 8000d5a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d5e:	d306      	bcc.n	8000d6e <__addsf3+0x92>
 8000d60:	0840      	lsrs	r0, r0, #1
 8000d62:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d66:	f102 0201 	add.w	r2, r2, #1
 8000d6a:	2afe      	cmp	r2, #254	@ 0xfe
 8000d6c:	d251      	bcs.n	8000e12 <__addsf3+0x136>
 8000d6e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000d72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d76:	bf08      	it	eq
 8000d78:	f020 0001 	biceq.w	r0, r0, #1
 8000d7c:	ea40 0003 	orr.w	r0, r0, r3
 8000d80:	4770      	bx	lr
 8000d82:	0049      	lsls	r1, r1, #1
 8000d84:	eb40 0000 	adc.w	r0, r0, r0
 8000d88:	3a01      	subs	r2, #1
 8000d8a:	bf28      	it	cs
 8000d8c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d90:	d2ed      	bcs.n	8000d6e <__addsf3+0x92>
 8000d92:	fab0 fc80 	clz	ip, r0
 8000d96:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d9a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d9e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000da2:	bfaa      	itet	ge
 8000da4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000da8:	4252      	neglt	r2, r2
 8000daa:	4318      	orrge	r0, r3
 8000dac:	bfbc      	itt	lt
 8000dae:	40d0      	lsrlt	r0, r2
 8000db0:	4318      	orrlt	r0, r3
 8000db2:	4770      	bx	lr
 8000db4:	f092 0f00 	teq	r2, #0
 8000db8:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000dbc:	bf06      	itte	eq
 8000dbe:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000dc2:	3201      	addeq	r2, #1
 8000dc4:	3b01      	subne	r3, #1
 8000dc6:	e7b5      	b.n	8000d34 <__addsf3+0x58>
 8000dc8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dcc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dd0:	bf18      	it	ne
 8000dd2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dd6:	d021      	beq.n	8000e1c <__addsf3+0x140>
 8000dd8:	ea92 0f03 	teq	r2, r3
 8000ddc:	d004      	beq.n	8000de8 <__addsf3+0x10c>
 8000dde:	f092 0f00 	teq	r2, #0
 8000de2:	bf08      	it	eq
 8000de4:	4608      	moveq	r0, r1
 8000de6:	4770      	bx	lr
 8000de8:	ea90 0f01 	teq	r0, r1
 8000dec:	bf1c      	itt	ne
 8000dee:	2000      	movne	r0, #0
 8000df0:	4770      	bxne	lr
 8000df2:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000df6:	d104      	bne.n	8000e02 <__addsf3+0x126>
 8000df8:	0040      	lsls	r0, r0, #1
 8000dfa:	bf28      	it	cs
 8000dfc:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000e06:	bf3c      	itt	cc
 8000e08:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000e0c:	4770      	bxcc	lr
 8000e0e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000e12:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000e16:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e1a:	4770      	bx	lr
 8000e1c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e20:	bf16      	itet	ne
 8000e22:	4608      	movne	r0, r1
 8000e24:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e28:	4601      	movne	r1, r0
 8000e2a:	0242      	lsls	r2, r0, #9
 8000e2c:	bf06      	itte	eq
 8000e2e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e32:	ea90 0f01 	teqeq	r0, r1
 8000e36:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000e3a:	4770      	bx	lr

08000e3c <__aeabi_ui2f>:
 8000e3c:	f04f 0300 	mov.w	r3, #0
 8000e40:	e004      	b.n	8000e4c <__aeabi_i2f+0x8>
 8000e42:	bf00      	nop

08000e44 <__aeabi_i2f>:
 8000e44:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000e48:	bf48      	it	mi
 8000e4a:	4240      	negmi	r0, r0
 8000e4c:	ea5f 0c00 	movs.w	ip, r0
 8000e50:	bf08      	it	eq
 8000e52:	4770      	bxeq	lr
 8000e54:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000e58:	4601      	mov	r1, r0
 8000e5a:	f04f 0000 	mov.w	r0, #0
 8000e5e:	e01c      	b.n	8000e9a <__aeabi_l2f+0x2a>

08000e60 <__aeabi_ul2f>:
 8000e60:	ea50 0201 	orrs.w	r2, r0, r1
 8000e64:	bf08      	it	eq
 8000e66:	4770      	bxeq	lr
 8000e68:	f04f 0300 	mov.w	r3, #0
 8000e6c:	e00a      	b.n	8000e84 <__aeabi_l2f+0x14>
 8000e6e:	bf00      	nop

08000e70 <__aeabi_l2f>:
 8000e70:	ea50 0201 	orrs.w	r2, r0, r1
 8000e74:	bf08      	it	eq
 8000e76:	4770      	bxeq	lr
 8000e78:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e7c:	d502      	bpl.n	8000e84 <__aeabi_l2f+0x14>
 8000e7e:	4240      	negs	r0, r0
 8000e80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e84:	ea5f 0c01 	movs.w	ip, r1
 8000e88:	bf02      	ittt	eq
 8000e8a:	4684      	moveq	ip, r0
 8000e8c:	4601      	moveq	r1, r0
 8000e8e:	2000      	moveq	r0, #0
 8000e90:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e94:	bf08      	it	eq
 8000e96:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e9a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e9e:	fabc f28c 	clz	r2, ip
 8000ea2:	3a08      	subs	r2, #8
 8000ea4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ea8:	db10      	blt.n	8000ecc <__aeabi_l2f+0x5c>
 8000eaa:	fa01 fc02 	lsl.w	ip, r1, r2
 8000eae:	4463      	add	r3, ip
 8000eb0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eb4:	f1c2 0220 	rsb	r2, r2, #32
 8000eb8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000ebc:	fa20 f202 	lsr.w	r2, r0, r2
 8000ec0:	eb43 0002 	adc.w	r0, r3, r2
 8000ec4:	bf08      	it	eq
 8000ec6:	f020 0001 	biceq.w	r0, r0, #1
 8000eca:	4770      	bx	lr
 8000ecc:	f102 0220 	add.w	r2, r2, #32
 8000ed0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ed4:	f1c2 0220 	rsb	r2, r2, #32
 8000ed8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000edc:	fa21 f202 	lsr.w	r2, r1, r2
 8000ee0:	eb43 0002 	adc.w	r0, r3, r2
 8000ee4:	bf08      	it	eq
 8000ee6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eea:	4770      	bx	lr

08000eec <__gesf2>:
 8000eec:	f04f 3cff 	mov.w	ip, #4294967295
 8000ef0:	e006      	b.n	8000f00 <__cmpsf2+0x4>
 8000ef2:	bf00      	nop

08000ef4 <__lesf2>:
 8000ef4:	f04f 0c01 	mov.w	ip, #1
 8000ef8:	e002      	b.n	8000f00 <__cmpsf2+0x4>
 8000efa:	bf00      	nop

08000efc <__cmpsf2>:
 8000efc:	f04f 0c01 	mov.w	ip, #1
 8000f00:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f04:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f08:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f0c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f10:	bf18      	it	ne
 8000f12:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f16:	d011      	beq.n	8000f3c <__cmpsf2+0x40>
 8000f18:	b001      	add	sp, #4
 8000f1a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f1e:	bf18      	it	ne
 8000f20:	ea90 0f01 	teqne	r0, r1
 8000f24:	bf58      	it	pl
 8000f26:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f2a:	bf88      	it	hi
 8000f2c:	17c8      	asrhi	r0, r1, #31
 8000f2e:	bf38      	it	cc
 8000f30:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f34:	bf18      	it	ne
 8000f36:	f040 0001 	orrne.w	r0, r0, #1
 8000f3a:	4770      	bx	lr
 8000f3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f40:	d102      	bne.n	8000f48 <__cmpsf2+0x4c>
 8000f42:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f46:	d105      	bne.n	8000f54 <__cmpsf2+0x58>
 8000f48:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f4c:	d1e4      	bne.n	8000f18 <__cmpsf2+0x1c>
 8000f4e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f52:	d0e1      	beq.n	8000f18 <__cmpsf2+0x1c>
 8000f54:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <__aeabi_cfrcmple>:
 8000f5c:	4684      	mov	ip, r0
 8000f5e:	4608      	mov	r0, r1
 8000f60:	4661      	mov	r1, ip
 8000f62:	e7ff      	b.n	8000f64 <__aeabi_cfcmpeq>

08000f64 <__aeabi_cfcmpeq>:
 8000f64:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f66:	f7ff ffc9 	bl	8000efc <__cmpsf2>
 8000f6a:	2800      	cmp	r0, #0
 8000f6c:	bf48      	it	mi
 8000f6e:	f110 0f00 	cmnmi.w	r0, #0
 8000f72:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f74 <__aeabi_fcmpeq>:
 8000f74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f78:	f7ff fff4 	bl	8000f64 <__aeabi_cfcmpeq>
 8000f7c:	bf0c      	ite	eq
 8000f7e:	2001      	moveq	r0, #1
 8000f80:	2000      	movne	r0, #0
 8000f82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f86:	bf00      	nop

08000f88 <__aeabi_fcmplt>:
 8000f88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f8c:	f7ff ffea 	bl	8000f64 <__aeabi_cfcmpeq>
 8000f90:	bf34      	ite	cc
 8000f92:	2001      	movcc	r0, #1
 8000f94:	2000      	movcs	r0, #0
 8000f96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f9a:	bf00      	nop

08000f9c <__aeabi_fcmple>:
 8000f9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fa0:	f7ff ffe0 	bl	8000f64 <__aeabi_cfcmpeq>
 8000fa4:	bf94      	ite	ls
 8000fa6:	2001      	movls	r0, #1
 8000fa8:	2000      	movhi	r0, #0
 8000faa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fae:	bf00      	nop

08000fb0 <__aeabi_fcmpge>:
 8000fb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fb4:	f7ff ffd2 	bl	8000f5c <__aeabi_cfrcmple>
 8000fb8:	bf94      	ite	ls
 8000fba:	2001      	movls	r0, #1
 8000fbc:	2000      	movhi	r0, #0
 8000fbe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fc2:	bf00      	nop

08000fc4 <__aeabi_fcmpgt>:
 8000fc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fc8:	f7ff ffc8 	bl	8000f5c <__aeabi_cfrcmple>
 8000fcc:	bf34      	ite	cc
 8000fce:	2001      	movcc	r0, #1
 8000fd0:	2000      	movcs	r0, #0
 8000fd2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fd6:	bf00      	nop

08000fd8 <__aeabi_f2iz>:
 8000fd8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fdc:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000fe0:	d30f      	bcc.n	8001002 <__aeabi_f2iz+0x2a>
 8000fe2:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000fe6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fea:	d90d      	bls.n	8001008 <__aeabi_f2iz+0x30>
 8000fec:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ff0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ff4:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000ff8:	fa23 f002 	lsr.w	r0, r3, r2
 8000ffc:	bf18      	it	ne
 8000ffe:	4240      	negne	r0, r0
 8001000:	4770      	bx	lr
 8001002:	f04f 0000 	mov.w	r0, #0
 8001006:	4770      	bx	lr
 8001008:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800100c:	d101      	bne.n	8001012 <__aeabi_f2iz+0x3a>
 800100e:	0242      	lsls	r2, r0, #9
 8001010:	d105      	bne.n	800101e <__aeabi_f2iz+0x46>
 8001012:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8001016:	bf08      	it	eq
 8001018:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800101c:	4770      	bx	lr
 800101e:	f04f 0000 	mov.w	r0, #0
 8001022:	4770      	bx	lr

08001024 <__aeabi_d2lz>:
 8001024:	b538      	push	{r3, r4, r5, lr}
 8001026:	2200      	movs	r2, #0
 8001028:	2300      	movs	r3, #0
 800102a:	4604      	mov	r4, r0
 800102c:	460d      	mov	r5, r1
 800102e:	f7ff fd79 	bl	8000b24 <__aeabi_dcmplt>
 8001032:	b928      	cbnz	r0, 8001040 <__aeabi_d2lz+0x1c>
 8001034:	4620      	mov	r0, r4
 8001036:	4629      	mov	r1, r5
 8001038:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800103c:	f000 b80a 	b.w	8001054 <__aeabi_d2ulz>
 8001040:	4620      	mov	r0, r4
 8001042:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001046:	f000 f805 	bl	8001054 <__aeabi_d2ulz>
 800104a:	4240      	negs	r0, r0
 800104c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001050:	bd38      	pop	{r3, r4, r5, pc}
 8001052:	bf00      	nop

08001054 <__aeabi_d2ulz>:
 8001054:	b5d0      	push	{r4, r6, r7, lr}
 8001056:	2200      	movs	r2, #0
 8001058:	4b0b      	ldr	r3, [pc, #44]	@ (8001088 <__aeabi_d2ulz+0x34>)
 800105a:	4606      	mov	r6, r0
 800105c:	460f      	mov	r7, r1
 800105e:	f7ff faef 	bl	8000640 <__aeabi_dmul>
 8001062:	f7ff fdc5 	bl	8000bf0 <__aeabi_d2uiz>
 8001066:	4604      	mov	r4, r0
 8001068:	f7ff fa70 	bl	800054c <__aeabi_ui2d>
 800106c:	2200      	movs	r2, #0
 800106e:	4b07      	ldr	r3, [pc, #28]	@ (800108c <__aeabi_d2ulz+0x38>)
 8001070:	f7ff fae6 	bl	8000640 <__aeabi_dmul>
 8001074:	4602      	mov	r2, r0
 8001076:	460b      	mov	r3, r1
 8001078:	4630      	mov	r0, r6
 800107a:	4639      	mov	r1, r7
 800107c:	f7ff f928 	bl	80002d0 <__aeabi_dsub>
 8001080:	f7ff fdb6 	bl	8000bf0 <__aeabi_d2uiz>
 8001084:	4621      	mov	r1, r4
 8001086:	bdd0      	pop	{r4, r6, r7, pc}
 8001088:	3df00000 	.word	0x3df00000
 800108c:	41f00000 	.word	0x41f00000

08001090 <PID_Init>:
#include "pid.h"
void PID_Init(PID_InitDefStruct* p, float Velcity_Kp, float Velcity_Ki, float Velcity_Kd,int Velcity_Target )

{
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	607a      	str	r2, [r7, #4]
 800109c:	603b      	str	r3, [r7, #0]
	p->Velcity_Kp = Velcity_Kp;
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	68ba      	ldr	r2, [r7, #8]
 80010a2:	601a      	str	r2, [r3, #0]
	p->Velcity_Ki = Velcity_Ki;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	605a      	str	r2, [r3, #4]
	p->Velcity_Kd = Velcity_Kd;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	683a      	ldr	r2, [r7, #0]
 80010ae:	609a      	str	r2, [r3, #8]
	p->Ur = 1000;         //输出限幅
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	4a0c      	ldr	r2, [pc, #48]	@ (80010e4 <PID_Init+0x54>)
 80010b4:	60da      	str	r2, [r3, #12]
	p->PID_is_Enable = 1;
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	2201      	movs	r2, #1
 80010ba:	611a      	str	r2, [r3, #16]
	p->Un = 0;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	2200      	movs	r2, #0
 80010c0:	615a      	str	r2, [r3, #20]
	p->En_1 = 0;
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	2200      	movs	r2, #0
 80010c6:	619a      	str	r2, [r3, #24]
	p->En_2 = 0;
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	2200      	movs	r2, #0
 80010cc:	61da      	str	r2, [r3, #28]
	p->PWM = 0;
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	2200      	movs	r2, #0
 80010d2:	621a      	str	r2, [r3, #32]
	p->Velcity_Target=Velcity_Target;
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80010da:	bf00      	nop
 80010dc:	3714      	adds	r7, #20
 80010de:	46bd      	mov	sp, r7
 80010e0:	bc80      	pop	{r7}
 80010e2:	4770      	bx	lr
 80010e4:	447a0000 	.word	0x447a0000

080010e8 <Velocity_PID>:


void Velocity_PID(int TargetVelocity,int CurrentVelocity,PID_InitDefStruct* p)
{
 80010e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010ea:	b089      	sub	sp, #36	@ 0x24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
	if(p->PID_is_Enable == 1)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	691b      	ldr	r3, [r3, #16]
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	f040 8159 	bne.w	80013b0 <Velocity_PID+0x2c8>
	{
		int En = TargetVelocity - CurrentVelocity;  // 误差值
 80010fe:	68fa      	ldr	r2, [r7, #12]
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	1ad3      	subs	r3, r2, r3
 8001104:	61bb      	str	r3, [r7, #24]

		        // 计算积分项并进行限幅处理
		        float integral_term = p->Velcity_Ki * En;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	685c      	ldr	r4, [r3, #4]
 800110a:	69b8      	ldr	r0, [r7, #24]
 800110c:	f7ff fe9a 	bl	8000e44 <__aeabi_i2f>
 8001110:	4603      	mov	r3, r0
 8001112:	4619      	mov	r1, r3
 8001114:	4620      	mov	r0, r4
 8001116:	f7ff f823 	bl	8000160 <__aeabi_fmul>
 800111a:	4603      	mov	r3, r0
 800111c:	61fb      	str	r3, [r7, #28]
		        if(integral_term > 300) integral_term = 300;      // 正向积分限幅
 800111e:	4981      	ldr	r1, [pc, #516]	@ (8001324 <Velocity_PID+0x23c>)
 8001120:	69f8      	ldr	r0, [r7, #28]
 8001122:	f7ff ff4f 	bl	8000fc4 <__aeabi_fcmpgt>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <Velocity_PID+0x48>
 800112c:	4b7d      	ldr	r3, [pc, #500]	@ (8001324 <Velocity_PID+0x23c>)
 800112e:	61fb      	str	r3, [r7, #28]
		        if(integral_term < -300) integral_term = -300;    // 负向积分限幅
 8001130:	497d      	ldr	r1, [pc, #500]	@ (8001328 <Velocity_PID+0x240>)
 8001132:	69f8      	ldr	r0, [r7, #28]
 8001134:	f7ff ff28 	bl	8000f88 <__aeabi_fcmplt>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <Velocity_PID+0x5a>
 800113e:	4b7a      	ldr	r3, [pc, #488]	@ (8001328 <Velocity_PID+0x240>)
 8001140:	61fb      	str	r3, [r7, #28]

		        // 计算PID增量
		        float delta_output = p->Velcity_Kp*(En - p->En_1) + integral_term +
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681c      	ldr	r4, [r3, #0]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	699b      	ldr	r3, [r3, #24]
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff fe78 	bl	8000e44 <__aeabi_i2f>
 8001154:	4603      	mov	r3, r0
 8001156:	4619      	mov	r1, r3
 8001158:	4620      	mov	r0, r4
 800115a:	f7ff f801 	bl	8000160 <__aeabi_fmul>
 800115e:	4603      	mov	r3, r0
 8001160:	69f9      	ldr	r1, [r7, #28]
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff fdba 	bl	8000cdc <__addsf3>
 8001168:	4603      	mov	r3, r0
 800116a:	461d      	mov	r5, r3
		                            p->Velcity_Kd*(En - 2*p->En_1 + p->En_2);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	689c      	ldr	r4, [r3, #8]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	699b      	ldr	r3, [r3, #24]
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	1ad2      	subs	r2, r2, r3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	69db      	ldr	r3, [r3, #28]
 800117e:	4413      	add	r3, r2
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff fe5f 	bl	8000e44 <__aeabi_i2f>
 8001186:	4603      	mov	r3, r0
 8001188:	4619      	mov	r1, r3
 800118a:	4620      	mov	r0, r4
 800118c:	f7fe ffe8 	bl	8000160 <__aeabi_fmul>
 8001190:	4603      	mov	r3, r0
		        float delta_output = p->Velcity_Kp*(En - p->En_1) + integral_term +
 8001192:	4619      	mov	r1, r3
 8001194:	4628      	mov	r0, r5
 8001196:	f7ff fda1 	bl	8000cdc <__addsf3>
 800119a:	4603      	mov	r3, r0
 800119c:	617b      	str	r3, [r7, #20]

		        // 计算输出预估值
		        float predicted_output = p->Un + delta_output;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	695b      	ldr	r3, [r3, #20]
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff fe4e 	bl	8000e44 <__aeabi_i2f>
 80011a8:	4603      	mov	r3, r0
 80011aa:	4619      	mov	r1, r3
 80011ac:	6978      	ldr	r0, [r7, #20]
 80011ae:	f7ff fd95 	bl	8000cdc <__addsf3>
 80011b2:	4603      	mov	r3, r0
 80011b4:	613b      	str	r3, [r7, #16]

		        // 抗积分饱和处理（饱和值800）
		        if (predicted_output > 1000) {  // 正向饱和
 80011b6:	495d      	ldr	r1, [pc, #372]	@ (800132c <Velocity_PID+0x244>)
 80011b8:	6938      	ldr	r0, [r7, #16]
 80011ba:	f7ff ff03 	bl	8000fc4 <__aeabi_fcmpgt>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d053      	beq.n	800126c <Velocity_PID+0x184>
		            // 只允许减小输出的积分项通过
		            if (integral_term < 0) {
 80011c4:	f04f 0100 	mov.w	r1, #0
 80011c8:	69f8      	ldr	r0, [r7, #28]
 80011ca:	f7ff fedd 	bl	8000f88 <__aeabi_fcmplt>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d011      	beq.n	80011f8 <Velocity_PID+0x110>
		                p->Un += delta_output;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	695b      	ldr	r3, [r3, #20]
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff fe33 	bl	8000e44 <__aeabi_i2f>
 80011de:	4603      	mov	r3, r0
 80011e0:	6979      	ldr	r1, [r7, #20]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff fd7a 	bl	8000cdc <__addsf3>
 80011e8:	4603      	mov	r3, r0
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff fef4 	bl	8000fd8 <__aeabi_f2iz>
 80011f0:	4602      	mov	r2, r0
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	615a      	str	r2, [r3, #20]
 80011f6:	e0ac      	b.n	8001352 <Velocity_PID+0x26a>
		            } else {
		                // 忽略增加输出的积分项
		                p->Un += p->Velcity_Kp*(En - p->En_1) +
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	695b      	ldr	r3, [r3, #20]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff fe21 	bl	8000e44 <__aeabi_i2f>
 8001202:	4605      	mov	r5, r0
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681c      	ldr	r4, [r3, #0]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	1ad3      	subs	r3, r2, r3
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff fe17 	bl	8000e44 <__aeabi_i2f>
 8001216:	4603      	mov	r3, r0
 8001218:	4619      	mov	r1, r3
 800121a:	4620      	mov	r0, r4
 800121c:	f7fe ffa0 	bl	8000160 <__aeabi_fmul>
 8001220:	4603      	mov	r3, r0
 8001222:	461e      	mov	r6, r3
		                         p->Velcity_Kd*(En - 2*p->En_1 + p->En_2);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	689c      	ldr	r4, [r3, #8]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	699b      	ldr	r3, [r3, #24]
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	1ad2      	subs	r2, r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	69db      	ldr	r3, [r3, #28]
 8001236:	4413      	add	r3, r2
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff fe03 	bl	8000e44 <__aeabi_i2f>
 800123e:	4603      	mov	r3, r0
 8001240:	4619      	mov	r1, r3
 8001242:	4620      	mov	r0, r4
 8001244:	f7fe ff8c 	bl	8000160 <__aeabi_fmul>
 8001248:	4603      	mov	r3, r0
		                p->Un += p->Velcity_Kp*(En - p->En_1) +
 800124a:	4619      	mov	r1, r3
 800124c:	4630      	mov	r0, r6
 800124e:	f7ff fd45 	bl	8000cdc <__addsf3>
 8001252:	4603      	mov	r3, r0
 8001254:	4619      	mov	r1, r3
 8001256:	4628      	mov	r0, r5
 8001258:	f7ff fd40 	bl	8000cdc <__addsf3>
 800125c:	4603      	mov	r3, r0
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff feba 	bl	8000fd8 <__aeabi_f2iz>
 8001264:	4602      	mov	r2, r0
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	615a      	str	r2, [r3, #20]
 800126a:	e072      	b.n	8001352 <Velocity_PID+0x26a>
		            }
		        } else if (predicted_output < 0) {  // 负向饱和
 800126c:	f04f 0100 	mov.w	r1, #0
 8001270:	6938      	ldr	r0, [r7, #16]
 8001272:	f7ff fe89 	bl	8000f88 <__aeabi_fcmplt>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d059      	beq.n	8001330 <Velocity_PID+0x248>
		            // 只允许增加输出的积分项通过
		            if (integral_term > 0) {
 800127c:	f04f 0100 	mov.w	r1, #0
 8001280:	69f8      	ldr	r0, [r7, #28]
 8001282:	f7ff fe9f 	bl	8000fc4 <__aeabi_fcmpgt>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d011      	beq.n	80012b0 <Velocity_PID+0x1c8>
		                p->Un += delta_output;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	695b      	ldr	r3, [r3, #20]
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff fdd7 	bl	8000e44 <__aeabi_i2f>
 8001296:	4603      	mov	r3, r0
 8001298:	6979      	ldr	r1, [r7, #20]
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff fd1e 	bl	8000cdc <__addsf3>
 80012a0:	4603      	mov	r3, r0
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff fe98 	bl	8000fd8 <__aeabi_f2iz>
 80012a8:	4602      	mov	r2, r0
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	615a      	str	r2, [r3, #20]
 80012ae:	e050      	b.n	8001352 <Velocity_PID+0x26a>
		            } else {
		                // 忽略减小输出的积分项
		                p->Un += p->Velcity_Kp*(En - p->En_1) +
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	695b      	ldr	r3, [r3, #20]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff fdc5 	bl	8000e44 <__aeabi_i2f>
 80012ba:	4605      	mov	r5, r0
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681c      	ldr	r4, [r3, #0]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff fdbb 	bl	8000e44 <__aeabi_i2f>
 80012ce:	4603      	mov	r3, r0
 80012d0:	4619      	mov	r1, r3
 80012d2:	4620      	mov	r0, r4
 80012d4:	f7fe ff44 	bl	8000160 <__aeabi_fmul>
 80012d8:	4603      	mov	r3, r0
 80012da:	461e      	mov	r6, r3
		                         p->Velcity_Kd*(En - 2*p->En_1 + p->En_2);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	689c      	ldr	r4, [r3, #8]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	1ad2      	subs	r2, r2, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	69db      	ldr	r3, [r3, #28]
 80012ee:	4413      	add	r3, r2
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff fda7 	bl	8000e44 <__aeabi_i2f>
 80012f6:	4603      	mov	r3, r0
 80012f8:	4619      	mov	r1, r3
 80012fa:	4620      	mov	r0, r4
 80012fc:	f7fe ff30 	bl	8000160 <__aeabi_fmul>
 8001300:	4603      	mov	r3, r0
		                p->Un += p->Velcity_Kp*(En - p->En_1) +
 8001302:	4619      	mov	r1, r3
 8001304:	4630      	mov	r0, r6
 8001306:	f7ff fce9 	bl	8000cdc <__addsf3>
 800130a:	4603      	mov	r3, r0
 800130c:	4619      	mov	r1, r3
 800130e:	4628      	mov	r0, r5
 8001310:	f7ff fce4 	bl	8000cdc <__addsf3>
 8001314:	4603      	mov	r3, r0
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff fe5e 	bl	8000fd8 <__aeabi_f2iz>
 800131c:	4602      	mov	r2, r0
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	615a      	str	r2, [r3, #20]
 8001322:	e016      	b.n	8001352 <Velocity_PID+0x26a>
 8001324:	43960000 	.word	0x43960000
 8001328:	c3960000 	.word	0xc3960000
 800132c:	447a0000 	.word	0x447a0000
		            }
		        } else {
		            // 未饱和，正常累加
		            p->Un += delta_output;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	695b      	ldr	r3, [r3, #20]
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff fd85 	bl	8000e44 <__aeabi_i2f>
 800133a:	4603      	mov	r3, r0
 800133c:	6979      	ldr	r1, [r7, #20]
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff fccc 	bl	8000cdc <__addsf3>
 8001344:	4603      	mov	r3, r0
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff fe46 	bl	8000fd8 <__aeabi_f2iz>
 800134c:	4602      	mov	r2, r0
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	615a      	str	r2, [r3, #20]
		        }

		        p->En_2 = p->En_1;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	699a      	ldr	r2, [r3, #24]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	61da      	str	r2, [r3, #28]
		        p->En_1 = En;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	619a      	str	r2, [r3, #24]

		        p->PWM = p->Un;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	695a      	ldr	r2, [r3, #20]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	621a      	str	r2, [r3, #32]

		        /*输出限幅*/
		        if(p->PWM > p->Ur) p->PWM = p->Ur;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6a1b      	ldr	r3, [r3, #32]
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff fd69 	bl	8000e44 <__aeabi_i2f>
 8001372:	4602      	mov	r2, r0
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	4619      	mov	r1, r3
 800137a:	4610      	mov	r0, r2
 800137c:	f7ff fe22 	bl	8000fc4 <__aeabi_fcmpgt>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d007      	beq.n	8001396 <Velocity_PID+0x2ae>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	68db      	ldr	r3, [r3, #12]
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff fe24 	bl	8000fd8 <__aeabi_f2iz>
 8001390:	4602      	mov	r2, r0
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	621a      	str	r2, [r3, #32]
		        if(p->PWM < 0) p->PWM = 0;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6a1b      	ldr	r3, [r3, #32]
 800139a:	2b00      	cmp	r3, #0
 800139c:	da02      	bge.n	80013a4 <Velocity_PID+0x2bc>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2200      	movs	r2, #0
 80013a2:	621a      	str	r2, [r3, #32]
		        if(TargetVelocity == 0) {
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d102      	bne.n	80013b0 <Velocity_PID+0x2c8>
		            p->PWM = 0;  // 强制断电
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2200      	movs	r2, #0
 80013ae:	621a      	str	r2, [r3, #32]
		        }
	}


}
 80013b0:	bf00      	nop
 80013b2:	3724      	adds	r7, #36	@ 0x24
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080013b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013be:	4b10      	ldr	r3, [pc, #64]	@ (8001400 <MX_DMA_Init+0x48>)
 80013c0:	695b      	ldr	r3, [r3, #20]
 80013c2:	4a0f      	ldr	r2, [pc, #60]	@ (8001400 <MX_DMA_Init+0x48>)
 80013c4:	f043 0301 	orr.w	r3, r3, #1
 80013c8:	6153      	str	r3, [r2, #20]
 80013ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001400 <MX_DMA_Init+0x48>)
 80013cc:	695b      	ldr	r3, [r3, #20]
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	607b      	str	r3, [r7, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80013d6:	2200      	movs	r2, #0
 80013d8:	2100      	movs	r1, #0
 80013da:	200e      	movs	r0, #14
 80013dc:	f001 f881 	bl	80024e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80013e0:	200e      	movs	r0, #14
 80013e2:	f001 f89a 	bl	800251a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80013e6:	2200      	movs	r2, #0
 80013e8:	2100      	movs	r1, #0
 80013ea:	200f      	movs	r0, #15
 80013ec:	f001 f879 	bl	80024e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80013f0:	200f      	movs	r0, #15
 80013f2:	f001 f892 	bl	800251a <HAL_NVIC_EnableIRQ>

}
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40021000 	.word	0x40021000

08001404 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b088      	sub	sp, #32
 8001408:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140a:	f107 0310 	add.w	r3, r7, #16
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	605a      	str	r2, [r3, #4]
 8001414:	609a      	str	r2, [r3, #8]
 8001416:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001418:	4b4a      	ldr	r3, [pc, #296]	@ (8001544 <MX_GPIO_Init+0x140>)
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	4a49      	ldr	r2, [pc, #292]	@ (8001544 <MX_GPIO_Init+0x140>)
 800141e:	f043 0310 	orr.w	r3, r3, #16
 8001422:	6193      	str	r3, [r2, #24]
 8001424:	4b47      	ldr	r3, [pc, #284]	@ (8001544 <MX_GPIO_Init+0x140>)
 8001426:	699b      	ldr	r3, [r3, #24]
 8001428:	f003 0310 	and.w	r3, r3, #16
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001430:	4b44      	ldr	r3, [pc, #272]	@ (8001544 <MX_GPIO_Init+0x140>)
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	4a43      	ldr	r2, [pc, #268]	@ (8001544 <MX_GPIO_Init+0x140>)
 8001436:	f043 0320 	orr.w	r3, r3, #32
 800143a:	6193      	str	r3, [r2, #24]
 800143c:	4b41      	ldr	r3, [pc, #260]	@ (8001544 <MX_GPIO_Init+0x140>)
 800143e:	699b      	ldr	r3, [r3, #24]
 8001440:	f003 0320 	and.w	r3, r3, #32
 8001444:	60bb      	str	r3, [r7, #8]
 8001446:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001448:	4b3e      	ldr	r3, [pc, #248]	@ (8001544 <MX_GPIO_Init+0x140>)
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	4a3d      	ldr	r2, [pc, #244]	@ (8001544 <MX_GPIO_Init+0x140>)
 800144e:	f043 0304 	orr.w	r3, r3, #4
 8001452:	6193      	str	r3, [r2, #24]
 8001454:	4b3b      	ldr	r3, [pc, #236]	@ (8001544 <MX_GPIO_Init+0x140>)
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	f003 0304 	and.w	r3, r3, #4
 800145c:	607b      	str	r3, [r7, #4]
 800145e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001460:	4b38      	ldr	r3, [pc, #224]	@ (8001544 <MX_GPIO_Init+0x140>)
 8001462:	699b      	ldr	r3, [r3, #24]
 8001464:	4a37      	ldr	r2, [pc, #220]	@ (8001544 <MX_GPIO_Init+0x140>)
 8001466:	f043 0308 	orr.w	r3, r3, #8
 800146a:	6193      	str	r3, [r2, #24]
 800146c:	4b35      	ldr	r3, [pc, #212]	@ (8001544 <MX_GPIO_Init+0x140>)
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	f003 0308 	and.w	r3, r3, #8
 8001474:	603b      	str	r3, [r7, #0]
 8001476:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7|GPIO_PIN_11, GPIO_PIN_RESET);
 8001478:	2200      	movs	r2, #0
 800147a:	f44f 6108 	mov.w	r1, #2176	@ 0x880
 800147e:	4832      	ldr	r0, [pc, #200]	@ (8001548 <MX_GPIO_Init+0x144>)
 8001480:	f001 fc8c 	bl	8002d9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_SET);
 8001484:	2201      	movs	r2, #1
 8001486:	f44f 4130 	mov.w	r1, #45056	@ 0xb000
 800148a:	4830      	ldr	r0, [pc, #192]	@ (800154c <MX_GPIO_Init+0x148>)
 800148c:	f001 fc86 	bl	8002d9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001490:	2200      	movs	r2, #0
 8001492:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001496:	482d      	ldr	r0, [pc, #180]	@ (800154c <MX_GPIO_Init+0x148>)
 8001498:	f001 fc80 	bl	8002d9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800149c:	2380      	movs	r3, #128	@ 0x80
 800149e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a0:	2301      	movs	r3, #1
 80014a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80014a4:	2302      	movs	r3, #2
 80014a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a8:	2302      	movs	r3, #2
 80014aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ac:	f107 0310 	add.w	r3, r7, #16
 80014b0:	4619      	mov	r1, r3
 80014b2:	4825      	ldr	r0, [pc, #148]	@ (8001548 <MX_GPIO_Init+0x144>)
 80014b4:	f001 faee 	bl	8002a94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80014b8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80014bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014be:	4b24      	ldr	r3, [pc, #144]	@ (8001550 <MX_GPIO_Init+0x14c>)
 80014c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014c2:	2301      	movs	r3, #1
 80014c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c6:	f107 0310 	add.w	r3, r7, #16
 80014ca:	4619      	mov	r1, r3
 80014cc:	481f      	ldr	r0, [pc, #124]	@ (800154c <MX_GPIO_Init+0x148>)
 80014ce:	f001 fae1 	bl	8002a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_15;
 80014d2:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 80014d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d8:	2301      	movs	r3, #1
 80014da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014dc:	2301      	movs	r3, #1
 80014de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e0:	2302      	movs	r3, #2
 80014e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e4:	f107 0310 	add.w	r3, r7, #16
 80014e8:	4619      	mov	r1, r3
 80014ea:	4818      	ldr	r0, [pc, #96]	@ (800154c <MX_GPIO_Init+0x148>)
 80014ec:	f001 fad2 	bl	8002a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80014f0:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80014f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f6:	2301      	movs	r3, #1
 80014f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fe:	2302      	movs	r3, #2
 8001500:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001502:	f107 0310 	add.w	r3, r7, #16
 8001506:	4619      	mov	r1, r3
 8001508:	4810      	ldr	r0, [pc, #64]	@ (800154c <MX_GPIO_Init+0x148>)
 800150a:	f001 fac3 	bl	8002a94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800150e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001512:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001514:	2301      	movs	r3, #1
 8001516:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151c:	2302      	movs	r3, #2
 800151e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001520:	f107 0310 	add.w	r3, r7, #16
 8001524:	4619      	mov	r1, r3
 8001526:	4808      	ldr	r0, [pc, #32]	@ (8001548 <MX_GPIO_Init+0x144>)
 8001528:	f001 fab4 	bl	8002a94 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 800152c:	2200      	movs	r2, #0
 800152e:	2101      	movs	r1, #1
 8001530:	2028      	movs	r0, #40	@ 0x28
 8001532:	f000 ffd6 	bl	80024e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001536:	2028      	movs	r0, #40	@ 0x28
 8001538:	f000 ffef 	bl	800251a <HAL_NVIC_EnableIRQ>

}
 800153c:	bf00      	nop
 800153e:	3720      	adds	r7, #32
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40021000 	.word	0x40021000
 8001548:	40010800 	.word	0x40010800
 800154c:	40010c00 	.word	0x40010c00
 8001550:	10210000 	.word	0x10210000

08001554 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001558:	4b12      	ldr	r3, [pc, #72]	@ (80015a4 <MX_I2C1_Init+0x50>)
 800155a:	4a13      	ldr	r2, [pc, #76]	@ (80015a8 <MX_I2C1_Init+0x54>)
 800155c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800155e:	4b11      	ldr	r3, [pc, #68]	@ (80015a4 <MX_I2C1_Init+0x50>)
 8001560:	4a12      	ldr	r2, [pc, #72]	@ (80015ac <MX_I2C1_Init+0x58>)
 8001562:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001564:	4b0f      	ldr	r3, [pc, #60]	@ (80015a4 <MX_I2C1_Init+0x50>)
 8001566:	2200      	movs	r2, #0
 8001568:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800156a:	4b0e      	ldr	r3, [pc, #56]	@ (80015a4 <MX_I2C1_Init+0x50>)
 800156c:	2200      	movs	r2, #0
 800156e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001570:	4b0c      	ldr	r3, [pc, #48]	@ (80015a4 <MX_I2C1_Init+0x50>)
 8001572:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001576:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001578:	4b0a      	ldr	r3, [pc, #40]	@ (80015a4 <MX_I2C1_Init+0x50>)
 800157a:	2200      	movs	r2, #0
 800157c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800157e:	4b09      	ldr	r3, [pc, #36]	@ (80015a4 <MX_I2C1_Init+0x50>)
 8001580:	2200      	movs	r2, #0
 8001582:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001584:	4b07      	ldr	r3, [pc, #28]	@ (80015a4 <MX_I2C1_Init+0x50>)
 8001586:	2200      	movs	r2, #0
 8001588:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800158a:	4b06      	ldr	r3, [pc, #24]	@ (80015a4 <MX_I2C1_Init+0x50>)
 800158c:	2200      	movs	r2, #0
 800158e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001590:	4804      	ldr	r0, [pc, #16]	@ (80015a4 <MX_I2C1_Init+0x50>)
 8001592:	f001 fc33 	bl	8002dfc <HAL_I2C_Init>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800159c:	f000 f97f 	bl	800189e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015a0:	bf00      	nop
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	200001f0 	.word	0x200001f0
 80015a8:	40005400 	.word	0x40005400
 80015ac:	00061a80 	.word	0x00061a80

080015b0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b08a      	sub	sp, #40	@ 0x28
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b8:	f107 0314 	add.w	r3, r7, #20
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	605a      	str	r2, [r3, #4]
 80015c2:	609a      	str	r2, [r3, #8]
 80015c4:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a1d      	ldr	r2, [pc, #116]	@ (8001640 <HAL_I2C_MspInit+0x90>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d132      	bne.n	8001636 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d0:	4b1c      	ldr	r3, [pc, #112]	@ (8001644 <HAL_I2C_MspInit+0x94>)
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	4a1b      	ldr	r2, [pc, #108]	@ (8001644 <HAL_I2C_MspInit+0x94>)
 80015d6:	f043 0308 	orr.w	r3, r3, #8
 80015da:	6193      	str	r3, [r2, #24]
 80015dc:	4b19      	ldr	r3, [pc, #100]	@ (8001644 <HAL_I2C_MspInit+0x94>)
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	f003 0308 	and.w	r3, r3, #8
 80015e4:	613b      	str	r3, [r7, #16]
 80015e6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015e8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80015ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015ee:	2312      	movs	r3, #18
 80015f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015f2:	2303      	movs	r3, #3
 80015f4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015f6:	f107 0314 	add.w	r3, r7, #20
 80015fa:	4619      	mov	r1, r3
 80015fc:	4812      	ldr	r0, [pc, #72]	@ (8001648 <HAL_I2C_MspInit+0x98>)
 80015fe:	f001 fa49 	bl	8002a94 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001602:	4b12      	ldr	r3, [pc, #72]	@ (800164c <HAL_I2C_MspInit+0x9c>)
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	627b      	str	r3, [r7, #36]	@ 0x24
 8001608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800160a:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800160e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001612:	f043 0302 	orr.w	r3, r3, #2
 8001616:	627b      	str	r3, [r7, #36]	@ 0x24
 8001618:	4a0c      	ldr	r2, [pc, #48]	@ (800164c <HAL_I2C_MspInit+0x9c>)
 800161a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800161c:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800161e:	4b09      	ldr	r3, [pc, #36]	@ (8001644 <HAL_I2C_MspInit+0x94>)
 8001620:	69db      	ldr	r3, [r3, #28]
 8001622:	4a08      	ldr	r2, [pc, #32]	@ (8001644 <HAL_I2C_MspInit+0x94>)
 8001624:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001628:	61d3      	str	r3, [r2, #28]
 800162a:	4b06      	ldr	r3, [pc, #24]	@ (8001644 <HAL_I2C_MspInit+0x94>)
 800162c:	69db      	ldr	r3, [r3, #28]
 800162e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001636:	bf00      	nop
 8001638:	3728      	adds	r7, #40	@ 0x28
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40005400 	.word	0x40005400
 8001644:	40021000 	.word	0x40021000
 8001648:	40010c00 	.word	0x40010c00
 800164c:	40010000 	.word	0x40010000

08001650 <HAL_GPIO_EXTI_Callback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	4603      	mov	r3, r0
 8001658:	80fb      	strh	r3, [r7, #6]



		}

}
 800165a:	bf00      	nop
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	bc80      	pop	{r7}
 8001662:	4770      	bx	lr

08001664 <HAL_TIM_PeriodElapsedCallback>:



	void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af02      	add	r7, sp, #8
 800166a:	6078      	str	r0, [r7, #4]
	if(htim==&htim4){
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	4a1b      	ldr	r2, [pc, #108]	@ (80016dc <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d12f      	bne.n	80016d4 <HAL_TIM_PeriodElapsedCallback+0x70>
		encoder=__HAL_TIM_GET_COUNTER(&htim2)*5;
 8001674:	4b1a      	ldr	r3, [pc, #104]	@ (80016e0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800167a:	4613      	mov	r3, r2
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	4413      	add	r3, r2
 8001680:	4a18      	ldr	r2, [pc, #96]	@ (80016e4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001682:	6013      	str	r3, [r2, #0]
		Velocity_PID(pidL.Velcity_Target,encoder,&pidL);
 8001684:	4b18      	ldr	r3, [pc, #96]	@ (80016e8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001688:	4a16      	ldr	r2, [pc, #88]	@ (80016e4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800168a:	6812      	ldr	r2, [r2, #0]
 800168c:	4611      	mov	r1, r2
 800168e:	4a16      	ldr	r2, [pc, #88]	@ (80016e8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff fd29 	bl	80010e8 <Velocity_PID>
        __HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_3,pidL.PWM);
 8001696:	4b14      	ldr	r3, [pc, #80]	@ (80016e8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001698:	6a1a      	ldr	r2, [r3, #32]
 800169a:	4b14      	ldr	r3, [pc, #80]	@ (80016ec <HAL_TIM_PeriodElapsedCallback+0x88>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	63da      	str	r2, [r3, #60]	@ 0x3c
        sprintf(message,"%d,%ld,%d\n",pidL.Velcity_Target,encoder,pidL.PWM);
 80016a0:	4b11      	ldr	r3, [pc, #68]	@ (80016e8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80016a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80016a4:	4b0f      	ldr	r3, [pc, #60]	@ (80016e4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80016a6:	6819      	ldr	r1, [r3, #0]
 80016a8:	4b0f      	ldr	r3, [pc, #60]	@ (80016e8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80016aa:	6a1b      	ldr	r3, [r3, #32]
 80016ac:	9300      	str	r3, [sp, #0]
 80016ae:	460b      	mov	r3, r1
 80016b0:	490f      	ldr	r1, [pc, #60]	@ (80016f0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80016b2:	4810      	ldr	r0, [pc, #64]	@ (80016f4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80016b4:	f005 fca4 	bl	8007000 <siprintf>
        HAL_UART_Transmit_DMA(&huart1, (uint8_t*)message, strlen(message));
 80016b8:	480e      	ldr	r0, [pc, #56]	@ (80016f4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80016ba:	f7fe fd49 	bl	8000150 <strlen>
 80016be:	4603      	mov	r3, r0
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	461a      	mov	r2, r3
 80016c4:	490b      	ldr	r1, [pc, #44]	@ (80016f4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80016c6:	480c      	ldr	r0, [pc, #48]	@ (80016f8 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80016c8:	f003 fd1e 	bl	8005108 <HAL_UART_Transmit_DMA>
        __HAL_TIM_SET_COUNTER(&htim2,0);
 80016cc:	4b04      	ldr	r3, [pc, #16]	@ (80016e0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2200      	movs	r2, #0
 80016d2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
}
 80016d4:	bf00      	nop
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	2000098c 	.word	0x2000098c
 80016e0:	200008fc 	.word	0x200008fc
 80016e4:	20000444 	.word	0x20000444
 80016e8:	20000448 	.word	0x20000448
 80016ec:	20000944 	.word	0x20000944
 80016f0:	0800a788 	.word	0x0800a788
 80016f4:	20000244 	.word	0x20000244
 80016f8:	200009d4 	.word	0x200009d4

080016fc <HAL_UARTEx_RxEventCallback>:



void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){   //接受不定长
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	460b      	mov	r3, r1
 8001706:	807b      	strh	r3, [r7, #2]
	if(huart==&huart1){
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	4a16      	ldr	r2, [pc, #88]	@ (8001764 <HAL_UARTEx_RxEventCallback+0x68>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d125      	bne.n	800175c <HAL_UARTEx_RxEventCallback+0x60>


    int num = atoi((char*)rx_data);
 8001710:	4815      	ldr	r0, [pc, #84]	@ (8001768 <HAL_UARTEx_RxEventCallback+0x6c>)
 8001712:	f004 fcc5 	bl	80060a0 <atoi>
 8001716:	60f8      	str	r0, [r7, #12]
    sprintf(message,"%d\n",num);
 8001718:	68fa      	ldr	r2, [r7, #12]
 800171a:	4914      	ldr	r1, [pc, #80]	@ (800176c <HAL_UARTEx_RxEventCallback+0x70>)
 800171c:	4814      	ldr	r0, [pc, #80]	@ (8001770 <HAL_UARTEx_RxEventCallback+0x74>)
 800171e:	f005 fc6f 	bl	8007000 <siprintf>
    HAL_UART_Transmit_DMA(&huart1, (uint8_t*)message, strlen(message));
 8001722:	4813      	ldr	r0, [pc, #76]	@ (8001770 <HAL_UARTEx_RxEventCallback+0x74>)
 8001724:	f7fe fd14 	bl	8000150 <strlen>
 8001728:	4603      	mov	r3, r0
 800172a:	b29b      	uxth	r3, r3
 800172c:	461a      	mov	r2, r3
 800172e:	4910      	ldr	r1, [pc, #64]	@ (8001770 <HAL_UARTEx_RxEventCallback+0x74>)
 8001730:	480c      	ldr	r0, [pc, #48]	@ (8001764 <HAL_UARTEx_RxEventCallback+0x68>)
 8001732:	f003 fce9 	bl	8005108 <HAL_UART_Transmit_DMA>
    pidL.Velcity_Target=num;
 8001736:	4a0f      	ldr	r2, [pc, #60]	@ (8001774 <HAL_UARTEx_RxEventCallback+0x78>)
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rx_data, sizeof(rx_data));
 800173c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001740:	4909      	ldr	r1, [pc, #36]	@ (8001768 <HAL_UARTEx_RxEventCallback+0x6c>)
 8001742:	4808      	ldr	r0, [pc, #32]	@ (8001764 <HAL_UARTEx_RxEventCallback+0x68>)
 8001744:	f003 fd50 	bl	80051e8 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(huart1.hdmarx, DMA_IT_HT);  // 禁用半传输中断
 8001748:	4b06      	ldr	r3, [pc, #24]	@ (8001764 <HAL_UARTEx_RxEventCallback+0x68>)
 800174a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	4b04      	ldr	r3, [pc, #16]	@ (8001764 <HAL_UARTEx_RxEventCallback+0x68>)
 8001752:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f022 0204 	bic.w	r2, r2, #4
 800175a:	601a      	str	r2, [r3, #0]
	}

}
 800175c:	bf00      	nop
 800175e:	3710      	adds	r7, #16
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	200009d4 	.word	0x200009d4
 8001768:	20000344 	.word	0x20000344
 800176c:	0800a794 	.word	0x0800a794
 8001770:	20000244 	.word	0x20000244
 8001774:	20000448 	.word	0x20000448

08001778 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
PID_Init(&pidL,10,2,3,pidL.Velcity_Target);
 800177e:	4b1d      	ldr	r3, [pc, #116]	@ (80017f4 <main+0x7c>)
 8001780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001782:	9300      	str	r3, [sp, #0]
 8001784:	4b1c      	ldr	r3, [pc, #112]	@ (80017f8 <main+0x80>)
 8001786:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800178a:	491c      	ldr	r1, [pc, #112]	@ (80017fc <main+0x84>)
 800178c:	4819      	ldr	r0, [pc, #100]	@ (80017f4 <main+0x7c>)
 800178e:	f7ff fc7f 	bl	8001090 <PID_Init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001792:	f000 fd6d 	bl	8002270 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001796:	f000 f83d 	bl	8001814 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800179a:	f7ff fe33 	bl	8001404 <MX_GPIO_Init>
  MX_DMA_Init();
 800179e:	f7ff fe0b 	bl	80013b8 <MX_DMA_Init>
  MX_I2C1_Init();
 80017a2:	f7ff fed7 	bl	8001554 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80017a6:	f000 fc5b 	bl	8002060 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 80017aa:	f000 faed 	bl	8001d88 <MX_TIM3_Init>
  MX_TIM2_Init();
 80017ae:	f000 fa97 	bl	8001ce0 <MX_TIM2_Init>
  MX_TIM4_Init();
 80017b2:	f000 fb5f 	bl	8001e74 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 80017b6:	f000 f8a1 	bl	80018fc <OLED_Init>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rx_data,sizeof(rx_data));   //开启接受不定长
 80017ba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017be:	4910      	ldr	r1, [pc, #64]	@ (8001800 <main+0x88>)
 80017c0:	4810      	ldr	r0, [pc, #64]	@ (8001804 <main+0x8c>)
 80017c2:	f003 fd11 	bl	80051e8 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(huart1.hdmarx, DMA_IT_HT);          //关闭接受半中断
 80017c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001804 <main+0x8c>)
 80017c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001804 <main+0x8c>)
 80017d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f022 0204 	bic.w	r2, r2, #4
 80017d8:	601a      	str	r2, [r3, #0]
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80017da:	2108      	movs	r1, #8
 80017dc:	480a      	ldr	r0, [pc, #40]	@ (8001808 <main+0x90>)
 80017de:	f002 fcb3 	bl	8004148 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80017e2:	213c      	movs	r1, #60	@ 0x3c
 80017e4:	4809      	ldr	r0, [pc, #36]	@ (800180c <main+0x94>)
 80017e6:	f002 fdf3 	bl	80043d0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim4);
 80017ea:	4809      	ldr	r0, [pc, #36]	@ (8001810 <main+0x98>)
 80017ec:	f002 fc02 	bl	8003ff4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80017f0:	bf00      	nop
 80017f2:	e7fd      	b.n	80017f0 <main+0x78>
 80017f4:	20000448 	.word	0x20000448
 80017f8:	40400000 	.word	0x40400000
 80017fc:	41200000 	.word	0x41200000
 8001800:	20000344 	.word	0x20000344
 8001804:	200009d4 	.word	0x200009d4
 8001808:	20000944 	.word	0x20000944
 800180c:	200008fc 	.word	0x200008fc
 8001810:	2000098c 	.word	0x2000098c

08001814 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b090      	sub	sp, #64	@ 0x40
 8001818:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800181a:	f107 0318 	add.w	r3, r7, #24
 800181e:	2228      	movs	r2, #40	@ 0x28
 8001820:	2100      	movs	r1, #0
 8001822:	4618      	mov	r0, r3
 8001824:	f005 fc51 	bl	80070ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001828:	1d3b      	adds	r3, r7, #4
 800182a:	2200      	movs	r2, #0
 800182c:	601a      	str	r2, [r3, #0]
 800182e:	605a      	str	r2, [r3, #4]
 8001830:	609a      	str	r2, [r3, #8]
 8001832:	60da      	str	r2, [r3, #12]
 8001834:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001836:	2301      	movs	r3, #1
 8001838:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800183a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800183e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001840:	2300      	movs	r3, #0
 8001842:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001844:	2301      	movs	r3, #1
 8001846:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001848:	2302      	movs	r3, #2
 800184a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800184c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001850:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001852:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001856:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001858:	f107 0318 	add.w	r3, r7, #24
 800185c:	4618      	mov	r0, r3
 800185e:	f001 ff69 	bl	8003734 <HAL_RCC_OscConfig>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001868:	f000 f819 	bl	800189e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800186c:	230f      	movs	r3, #15
 800186e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001870:	2302      	movs	r3, #2
 8001872:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001874:	2300      	movs	r3, #0
 8001876:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001878:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800187c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800187e:	2300      	movs	r3, #0
 8001880:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001882:	1d3b      	adds	r3, r7, #4
 8001884:	2102      	movs	r1, #2
 8001886:	4618      	mov	r0, r3
 8001888:	f002 f9d6 	bl	8003c38 <HAL_RCC_ClockConfig>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001892:	f000 f804 	bl	800189e <Error_Handler>
  }
}
 8001896:	bf00      	nop
 8001898:	3740      	adds	r7, #64	@ 0x40
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800189e:	b480      	push	{r7}
 80018a0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018a2:	b672      	cpsid	i
}
 80018a4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018a6:	bf00      	nop
 80018a8:	e7fd      	b.n	80018a6 <Error_Handler+0x8>
	...

080018ac <OLED_Send>:
 * @param len 要发送的数据长度
 * @return None
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他平台时应根据实际情况修改此函数
 */
void OLED_Send(uint8_t *data, uint8_t len)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af02      	add	r7, sp, #8
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	460b      	mov	r3, r1
 80018b6:	70fb      	strb	r3, [r7, #3]
  HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, data, len, HAL_MAX_DELAY);
 80018b8:	78fb      	ldrb	r3, [r7, #3]
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	f04f 32ff 	mov.w	r2, #4294967295
 80018c0:	9200      	str	r2, [sp, #0]
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	2178      	movs	r1, #120	@ 0x78
 80018c6:	4803      	ldr	r0, [pc, #12]	@ (80018d4 <OLED_Send+0x28>)
 80018c8:	f001 fbdc 	bl	8003084 <HAL_I2C_Master_Transmit>
}
 80018cc:	bf00      	nop
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	200001f0 	.word	0x200001f0

080018d8 <OLED_SendCmd>:

/**
 * @brief 向OLED发送指令
 */
void OLED_SendCmd(uint8_t cmd)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	71fb      	strb	r3, [r7, #7]
  static uint8_t sendBuffer[2] = {0};
  sendBuffer[1] = cmd;
 80018e2:	4a05      	ldr	r2, [pc, #20]	@ (80018f8 <OLED_SendCmd+0x20>)
 80018e4:	79fb      	ldrb	r3, [r7, #7]
 80018e6:	7053      	strb	r3, [r2, #1]
  OLED_Send(sendBuffer, 2);
 80018e8:	2102      	movs	r1, #2
 80018ea:	4803      	ldr	r0, [pc, #12]	@ (80018f8 <OLED_SendCmd+0x20>)
 80018ec:	f7ff ffde 	bl	80018ac <OLED_Send>
}
 80018f0:	bf00      	nop
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	20000870 	.word	0x20000870

080018fc <OLED_Init>:
/**
 * @brief 初始化OLED (SSD1306)
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_Init()
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  OLED_SendCmd(0xAE); /*关闭显示 display off*/
 8001900:	20ae      	movs	r0, #174	@ 0xae
 8001902:	f7ff ffe9 	bl	80018d8 <OLED_SendCmd>

  OLED_SendCmd(0x20);
 8001906:	2020      	movs	r0, #32
 8001908:	f7ff ffe6 	bl	80018d8 <OLED_SendCmd>
  OLED_SendCmd(0x10);
 800190c:	2010      	movs	r0, #16
 800190e:	f7ff ffe3 	bl	80018d8 <OLED_SendCmd>

  OLED_SendCmd(0xB0);
 8001912:	20b0      	movs	r0, #176	@ 0xb0
 8001914:	f7ff ffe0 	bl	80018d8 <OLED_SendCmd>

  OLED_SendCmd(0xC8);
 8001918:	20c8      	movs	r0, #200	@ 0xc8
 800191a:	f7ff ffdd 	bl	80018d8 <OLED_SendCmd>

  OLED_SendCmd(0x00);
 800191e:	2000      	movs	r0, #0
 8001920:	f7ff ffda 	bl	80018d8 <OLED_SendCmd>
  OLED_SendCmd(0x10);
 8001924:	2010      	movs	r0, #16
 8001926:	f7ff ffd7 	bl	80018d8 <OLED_SendCmd>

  OLED_SendCmd(0x40);
 800192a:	2040      	movs	r0, #64	@ 0x40
 800192c:	f7ff ffd4 	bl	80018d8 <OLED_SendCmd>

  OLED_SendCmd(0x81);
 8001930:	2081      	movs	r0, #129	@ 0x81
 8001932:	f7ff ffd1 	bl	80018d8 <OLED_SendCmd>

  OLED_SendCmd(0xDF);
 8001936:	20df      	movs	r0, #223	@ 0xdf
 8001938:	f7ff ffce 	bl	80018d8 <OLED_SendCmd>
  OLED_SendCmd(0xA1);
 800193c:	20a1      	movs	r0, #161	@ 0xa1
 800193e:	f7ff ffcb 	bl	80018d8 <OLED_SendCmd>

  OLED_SendCmd(0xA6);
 8001942:	20a6      	movs	r0, #166	@ 0xa6
 8001944:	f7ff ffc8 	bl	80018d8 <OLED_SendCmd>
  OLED_SendCmd(0xA8);
 8001948:	20a8      	movs	r0, #168	@ 0xa8
 800194a:	f7ff ffc5 	bl	80018d8 <OLED_SendCmd>

  OLED_SendCmd(0x3F);
 800194e:	203f      	movs	r0, #63	@ 0x3f
 8001950:	f7ff ffc2 	bl	80018d8 <OLED_SendCmd>

  OLED_SendCmd(0xA4);
 8001954:	20a4      	movs	r0, #164	@ 0xa4
 8001956:	f7ff ffbf 	bl	80018d8 <OLED_SendCmd>

  OLED_SendCmd(0xD3);
 800195a:	20d3      	movs	r0, #211	@ 0xd3
 800195c:	f7ff ffbc 	bl	80018d8 <OLED_SendCmd>
  OLED_SendCmd(0x00);
 8001960:	2000      	movs	r0, #0
 8001962:	f7ff ffb9 	bl	80018d8 <OLED_SendCmd>

  OLED_SendCmd(0xD5);
 8001966:	20d5      	movs	r0, #213	@ 0xd5
 8001968:	f7ff ffb6 	bl	80018d8 <OLED_SendCmd>
  OLED_SendCmd(0xF0);
 800196c:	20f0      	movs	r0, #240	@ 0xf0
 800196e:	f7ff ffb3 	bl	80018d8 <OLED_SendCmd>

  OLED_SendCmd(0xD9);
 8001972:	20d9      	movs	r0, #217	@ 0xd9
 8001974:	f7ff ffb0 	bl	80018d8 <OLED_SendCmd>
  OLED_SendCmd(0x22);
 8001978:	2022      	movs	r0, #34	@ 0x22
 800197a:	f7ff ffad 	bl	80018d8 <OLED_SendCmd>

  OLED_SendCmd(0xDA);
 800197e:	20da      	movs	r0, #218	@ 0xda
 8001980:	f7ff ffaa 	bl	80018d8 <OLED_SendCmd>
  OLED_SendCmd(0x12);
 8001984:	2012      	movs	r0, #18
 8001986:	f7ff ffa7 	bl	80018d8 <OLED_SendCmd>

  OLED_SendCmd(0xDB);
 800198a:	20db      	movs	r0, #219	@ 0xdb
 800198c:	f7ff ffa4 	bl	80018d8 <OLED_SendCmd>
  OLED_SendCmd(0x20);
 8001990:	2020      	movs	r0, #32
 8001992:	f7ff ffa1 	bl	80018d8 <OLED_SendCmd>

  OLED_SendCmd(0x8D);
 8001996:	208d      	movs	r0, #141	@ 0x8d
 8001998:	f7ff ff9e 	bl	80018d8 <OLED_SendCmd>
  OLED_SendCmd(0x14);
 800199c:	2014      	movs	r0, #20
 800199e:	f7ff ff9b 	bl	80018d8 <OLED_SendCmd>

  OLED_NewFrame();
 80019a2:	f000 f807 	bl	80019b4 <OLED_NewFrame>
  OLED_ShowFrame();
 80019a6:	f000 f811 	bl	80019cc <OLED_ShowFrame>

  OLED_SendCmd(0xAF); /*开启显示 display ON*/
 80019aa:	20af      	movs	r0, #175	@ 0xaf
 80019ac:	f7ff ff94 	bl	80018d8 <OLED_SendCmd>
}
 80019b0:	bf00      	nop
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <OLED_NewFrame>:

/**
 * @brief 清空显存 绘制新的一帧
 */
void OLED_NewFrame()
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  memset(OLED_GRAM, 0, sizeof(OLED_GRAM));
 80019b8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80019bc:	2100      	movs	r1, #0
 80019be:	4802      	ldr	r0, [pc, #8]	@ (80019c8 <OLED_NewFrame+0x14>)
 80019c0:	f005 fb83 	bl	80070ca <memset>
}
 80019c4:	bf00      	nop
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	20000470 	.word	0x20000470

080019cc <OLED_ShowFrame>:
/**
 * @brief 将当前显存显示到屏幕上
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_ShowFrame()
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
  static uint8_t sendBuffer[OLED_COLUMN + 1];
  sendBuffer[0] = 0x40;
 80019d2:	4b15      	ldr	r3, [pc, #84]	@ (8001a28 <OLED_ShowFrame+0x5c>)
 80019d4:	2240      	movs	r2, #64	@ 0x40
 80019d6:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < OLED_PAGE; i++)
 80019d8:	2300      	movs	r3, #0
 80019da:	71fb      	strb	r3, [r7, #7]
 80019dc:	e01b      	b.n	8001a16 <OLED_ShowFrame+0x4a>
  {
    OLED_SendCmd(0xB0 + i); // 设置页地址
 80019de:	79fb      	ldrb	r3, [r7, #7]
 80019e0:	3b50      	subs	r3, #80	@ 0x50
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff ff77 	bl	80018d8 <OLED_SendCmd>
    OLED_SendCmd(0x00);     // 设置列地址低4位
 80019ea:	2000      	movs	r0, #0
 80019ec:	f7ff ff74 	bl	80018d8 <OLED_SendCmd>
    OLED_SendCmd(0x10);     // 设置列地址高4位
 80019f0:	2010      	movs	r0, #16
 80019f2:	f7ff ff71 	bl	80018d8 <OLED_SendCmd>
    memcpy(sendBuffer + 1, OLED_GRAM[i], OLED_COLUMN);
 80019f6:	480d      	ldr	r0, [pc, #52]	@ (8001a2c <OLED_ShowFrame+0x60>)
 80019f8:	79fb      	ldrb	r3, [r7, #7]
 80019fa:	01db      	lsls	r3, r3, #7
 80019fc:	4a0c      	ldr	r2, [pc, #48]	@ (8001a30 <OLED_ShowFrame+0x64>)
 80019fe:	4413      	add	r3, r2
 8001a00:	2280      	movs	r2, #128	@ 0x80
 8001a02:	4619      	mov	r1, r3
 8001a04:	f005 fbef 	bl	80071e6 <memcpy>
    OLED_Send(sendBuffer, OLED_COLUMN + 1);
 8001a08:	2181      	movs	r1, #129	@ 0x81
 8001a0a:	4807      	ldr	r0, [pc, #28]	@ (8001a28 <OLED_ShowFrame+0x5c>)
 8001a0c:	f7ff ff4e 	bl	80018ac <OLED_Send>
  for (uint8_t i = 0; i < OLED_PAGE; i++)
 8001a10:	79fb      	ldrb	r3, [r7, #7]
 8001a12:	3301      	adds	r3, #1
 8001a14:	71fb      	strb	r3, [r7, #7]
 8001a16:	79fb      	ldrb	r3, [r7, #7]
 8001a18:	2b07      	cmp	r3, #7
 8001a1a:	d9e0      	bls.n	80019de <OLED_ShowFrame+0x12>
  }
}
 8001a1c:	bf00      	nop
 8001a1e:	bf00      	nop
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	20000874 	.word	0x20000874
 8001a2c:	20000875 	.word	0x20000875
 8001a30:	20000470 	.word	0x20000470

08001a34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b085      	sub	sp, #20
 8001a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a3a:	4b15      	ldr	r3, [pc, #84]	@ (8001a90 <HAL_MspInit+0x5c>)
 8001a3c:	699b      	ldr	r3, [r3, #24]
 8001a3e:	4a14      	ldr	r2, [pc, #80]	@ (8001a90 <HAL_MspInit+0x5c>)
 8001a40:	f043 0301 	orr.w	r3, r3, #1
 8001a44:	6193      	str	r3, [r2, #24]
 8001a46:	4b12      	ldr	r3, [pc, #72]	@ (8001a90 <HAL_MspInit+0x5c>)
 8001a48:	699b      	ldr	r3, [r3, #24]
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	60bb      	str	r3, [r7, #8]
 8001a50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a52:	4b0f      	ldr	r3, [pc, #60]	@ (8001a90 <HAL_MspInit+0x5c>)
 8001a54:	69db      	ldr	r3, [r3, #28]
 8001a56:	4a0e      	ldr	r2, [pc, #56]	@ (8001a90 <HAL_MspInit+0x5c>)
 8001a58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a5c:	61d3      	str	r3, [r2, #28]
 8001a5e:	4b0c      	ldr	r3, [pc, #48]	@ (8001a90 <HAL_MspInit+0x5c>)
 8001a60:	69db      	ldr	r3, [r3, #28]
 8001a62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a66:	607b      	str	r3, [r7, #4]
 8001a68:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a94 <HAL_MspInit+0x60>)
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	4a04      	ldr	r2, [pc, #16]	@ (8001a94 <HAL_MspInit+0x60>)
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a86:	bf00      	nop
 8001a88:	3714      	adds	r7, #20
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bc80      	pop	{r7}
 8001a8e:	4770      	bx	lr
 8001a90:	40021000 	.word	0x40021000
 8001a94:	40010000 	.word	0x40010000

08001a98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a9c:	bf00      	nop
 8001a9e:	e7fd      	b.n	8001a9c <NMI_Handler+0x4>

08001aa0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aa4:	bf00      	nop
 8001aa6:	e7fd      	b.n	8001aa4 <HardFault_Handler+0x4>

08001aa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001aac:	bf00      	nop
 8001aae:	e7fd      	b.n	8001aac <MemManage_Handler+0x4>

08001ab0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ab4:	bf00      	nop
 8001ab6:	e7fd      	b.n	8001ab4 <BusFault_Handler+0x4>

08001ab8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001abc:	bf00      	nop
 8001abe:	e7fd      	b.n	8001abc <UsageFault_Handler+0x4>

08001ac0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ac4:	bf00      	nop
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bc80      	pop	{r7}
 8001aca:	4770      	bx	lr

08001acc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ad0:	bf00      	nop
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bc80      	pop	{r7}
 8001ad6:	4770      	bx	lr

08001ad8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001adc:	bf00      	nop
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bc80      	pop	{r7}
 8001ae2:	4770      	bx	lr

08001ae4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ae8:	f000 fc08 	bl	80022fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001aec:	bf00      	nop
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001af4:	4802      	ldr	r0, [pc, #8]	@ (8001b00 <DMA1_Channel4_IRQHandler+0x10>)
 8001af6:	f000 fe99 	bl	800282c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001afa:	bf00      	nop
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	20000a60 	.word	0x20000a60

08001b04 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001b08:	4802      	ldr	r0, [pc, #8]	@ (8001b14 <DMA1_Channel5_IRQHandler+0x10>)
 8001b0a:	f000 fe8f 	bl	800282c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001b0e:	bf00      	nop
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	20000a1c 	.word	0x20000a1c

08001b18 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001b1c:	4802      	ldr	r0, [pc, #8]	@ (8001b28 <TIM4_IRQHandler+0x10>)
 8001b1e:	f002 fce5 	bl	80044ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001b22:	bf00      	nop
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	2000098c 	.word	0x2000098c

08001b2c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b30:	4802      	ldr	r0, [pc, #8]	@ (8001b3c <USART1_IRQHandler+0x10>)
 8001b32:	f003 fbb3 	bl	800529c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b36:	bf00      	nop
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	200009d4 	.word	0x200009d4

08001b40 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001b44:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001b48:	f001 f940 	bl	8002dcc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b4c:	bf00      	nop
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  return 1;
 8001b54:	2301      	movs	r3, #1
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bc80      	pop	{r7}
 8001b5c:	4770      	bx	lr

08001b5e <_kill>:

int _kill(int pid, int sig)
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b082      	sub	sp, #8
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
 8001b66:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b68:	f005 fb02 	bl	8007170 <__errno>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2216      	movs	r2, #22
 8001b70:	601a      	str	r2, [r3, #0]
  return -1;
 8001b72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <_exit>:

void _exit (int status)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b082      	sub	sp, #8
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b86:	f04f 31ff 	mov.w	r1, #4294967295
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f7ff ffe7 	bl	8001b5e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b90:	bf00      	nop
 8001b92:	e7fd      	b.n	8001b90 <_exit+0x12>

08001b94 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b086      	sub	sp, #24
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	60b9      	str	r1, [r7, #8]
 8001b9e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	617b      	str	r3, [r7, #20]
 8001ba4:	e00a      	b.n	8001bbc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ba6:	f3af 8000 	nop.w
 8001baa:	4601      	mov	r1, r0
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	1c5a      	adds	r2, r3, #1
 8001bb0:	60ba      	str	r2, [r7, #8]
 8001bb2:	b2ca      	uxtb	r2, r1
 8001bb4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	3301      	adds	r3, #1
 8001bba:	617b      	str	r3, [r7, #20]
 8001bbc:	697a      	ldr	r2, [r7, #20]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	dbf0      	blt.n	8001ba6 <_read+0x12>
  }

  return len;
 8001bc4:	687b      	ldr	r3, [r7, #4]
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3718      	adds	r7, #24
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b086      	sub	sp, #24
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	60f8      	str	r0, [r7, #12]
 8001bd6:	60b9      	str	r1, [r7, #8]
 8001bd8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bda:	2300      	movs	r3, #0
 8001bdc:	617b      	str	r3, [r7, #20]
 8001bde:	e009      	b.n	8001bf4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	1c5a      	adds	r2, r3, #1
 8001be4:	60ba      	str	r2, [r7, #8]
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	617b      	str	r3, [r7, #20]
 8001bf4:	697a      	ldr	r2, [r7, #20]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	dbf1      	blt.n	8001be0 <_write+0x12>
  }
  return len;
 8001bfc:	687b      	ldr	r3, [r7, #4]
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3718      	adds	r7, #24
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <_close>:

int _close(int file)
{
 8001c06:	b480      	push	{r7}
 8001c08:	b083      	sub	sp, #12
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bc80      	pop	{r7}
 8001c1a:	4770      	bx	lr

08001c1c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c2c:	605a      	str	r2, [r3, #4]
  return 0;
 8001c2e:	2300      	movs	r3, #0
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bc80      	pop	{r7}
 8001c38:	4770      	bx	lr

08001c3a <_isatty>:

int _isatty(int file)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	b083      	sub	sp, #12
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c42:	2301      	movs	r3, #1
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bc80      	pop	{r7}
 8001c4c:	4770      	bx	lr

08001c4e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	b085      	sub	sp, #20
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	60f8      	str	r0, [r7, #12]
 8001c56:	60b9      	str	r1, [r7, #8]
 8001c58:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c5a:	2300      	movs	r3, #0
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3714      	adds	r7, #20
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bc80      	pop	{r7}
 8001c64:	4770      	bx	lr
	...

08001c68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b086      	sub	sp, #24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c70:	4a14      	ldr	r2, [pc, #80]	@ (8001cc4 <_sbrk+0x5c>)
 8001c72:	4b15      	ldr	r3, [pc, #84]	@ (8001cc8 <_sbrk+0x60>)
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c7c:	4b13      	ldr	r3, [pc, #76]	@ (8001ccc <_sbrk+0x64>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d102      	bne.n	8001c8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c84:	4b11      	ldr	r3, [pc, #68]	@ (8001ccc <_sbrk+0x64>)
 8001c86:	4a12      	ldr	r2, [pc, #72]	@ (8001cd0 <_sbrk+0x68>)
 8001c88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c8a:	4b10      	ldr	r3, [pc, #64]	@ (8001ccc <_sbrk+0x64>)
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4413      	add	r3, r2
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d207      	bcs.n	8001ca8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c98:	f005 fa6a 	bl	8007170 <__errno>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	220c      	movs	r2, #12
 8001ca0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca6:	e009      	b.n	8001cbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ca8:	4b08      	ldr	r3, [pc, #32]	@ (8001ccc <_sbrk+0x64>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cae:	4b07      	ldr	r3, [pc, #28]	@ (8001ccc <_sbrk+0x64>)
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	4a05      	ldr	r2, [pc, #20]	@ (8001ccc <_sbrk+0x64>)
 8001cb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cba:	68fb      	ldr	r3, [r7, #12]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3718      	adds	r7, #24
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	20005000 	.word	0x20005000
 8001cc8:	00000400 	.word	0x00000400
 8001ccc:	200008f8 	.word	0x200008f8
 8001cd0:	20000bf8 	.word	0x20000bf8

08001cd4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cd8:	bf00      	nop
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bc80      	pop	{r7}
 8001cde:	4770      	bx	lr

08001ce0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b08c      	sub	sp, #48	@ 0x30
 8001ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ce6:	f107 030c 	add.w	r3, r7, #12
 8001cea:	2224      	movs	r2, #36	@ 0x24
 8001cec:	2100      	movs	r1, #0
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f005 f9eb 	bl	80070ca <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cf4:	1d3b      	adds	r3, r7, #4
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	601a      	str	r2, [r3, #0]
 8001cfa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001cfc:	4b21      	ldr	r3, [pc, #132]	@ (8001d84 <MX_TIM2_Init+0xa4>)
 8001cfe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d02:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001d04:	4b1f      	ldr	r3, [pc, #124]	@ (8001d84 <MX_TIM2_Init+0xa4>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d0a:	4b1e      	ldr	r3, [pc, #120]	@ (8001d84 <MX_TIM2_Init+0xa4>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000;
 8001d10:	4b1c      	ldr	r3, [pc, #112]	@ (8001d84 <MX_TIM2_Init+0xa4>)
 8001d12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d16:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d18:	4b1a      	ldr	r3, [pc, #104]	@ (8001d84 <MX_TIM2_Init+0xa4>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d1e:	4b19      	ldr	r3, [pc, #100]	@ (8001d84 <MX_TIM2_Init+0xa4>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001d24:	2301      	movs	r3, #1
 8001d26:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d30:	2300      	movs	r3, #0
 8001d32:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001d34:	2300      	movs	r3, #0
 8001d36:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d40:	2300      	movs	r3, #0
 8001d42:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001d44:	2300      	movs	r3, #0
 8001d46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001d48:	f107 030c 	add.w	r3, r7, #12
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	480d      	ldr	r0, [pc, #52]	@ (8001d84 <MX_TIM2_Init+0xa4>)
 8001d50:	f002 fa9c 	bl	800428c <HAL_TIM_Encoder_Init>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001d5a:	f7ff fda0 	bl	800189e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d62:	2300      	movs	r3, #0
 8001d64:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d66:	1d3b      	adds	r3, r7, #4
 8001d68:	4619      	mov	r1, r3
 8001d6a:	4806      	ldr	r0, [pc, #24]	@ (8001d84 <MX_TIM2_Init+0xa4>)
 8001d6c:	f003 f90c 	bl	8004f88 <HAL_TIMEx_MasterConfigSynchronization>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001d76:	f7ff fd92 	bl	800189e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d7a:	bf00      	nop
 8001d7c:	3730      	adds	r7, #48	@ 0x30
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	200008fc 	.word	0x200008fc

08001d88 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b08e      	sub	sp, #56	@ 0x38
 8001d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d8e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d92:	2200      	movs	r2, #0
 8001d94:	601a      	str	r2, [r3, #0]
 8001d96:	605a      	str	r2, [r3, #4]
 8001d98:	609a      	str	r2, [r3, #8]
 8001d9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d9c:	f107 0320 	add.w	r3, r7, #32
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001da6:	1d3b      	adds	r3, r7, #4
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	605a      	str	r2, [r3, #4]
 8001dae:	609a      	str	r2, [r3, #8]
 8001db0:	60da      	str	r2, [r3, #12]
 8001db2:	611a      	str	r2, [r3, #16]
 8001db4:	615a      	str	r2, [r3, #20]
 8001db6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001db8:	4b2c      	ldr	r3, [pc, #176]	@ (8001e6c <MX_TIM3_Init+0xe4>)
 8001dba:	4a2d      	ldr	r2, [pc, #180]	@ (8001e70 <MX_TIM3_Init+0xe8>)
 8001dbc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8001dbe:	4b2b      	ldr	r3, [pc, #172]	@ (8001e6c <MX_TIM3_Init+0xe4>)
 8001dc0:	2247      	movs	r2, #71	@ 0x47
 8001dc2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dc4:	4b29      	ldr	r3, [pc, #164]	@ (8001e6c <MX_TIM3_Init+0xe4>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001dca:	4b28      	ldr	r3, [pc, #160]	@ (8001e6c <MX_TIM3_Init+0xe4>)
 8001dcc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001dd0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dd2:	4b26      	ldr	r3, [pc, #152]	@ (8001e6c <MX_TIM3_Init+0xe4>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dd8:	4b24      	ldr	r3, [pc, #144]	@ (8001e6c <MX_TIM3_Init+0xe4>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001dde:	4823      	ldr	r0, [pc, #140]	@ (8001e6c <MX_TIM3_Init+0xe4>)
 8001de0:	f002 f8b8 	bl	8003f54 <HAL_TIM_Base_Init>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001dea:	f7ff fd58 	bl	800189e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001df2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001df4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001df8:	4619      	mov	r1, r3
 8001dfa:	481c      	ldr	r0, [pc, #112]	@ (8001e6c <MX_TIM3_Init+0xe4>)
 8001dfc:	f002 fd28 	bl	8004850 <HAL_TIM_ConfigClockSource>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001e06:	f7ff fd4a 	bl	800189e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001e0a:	4818      	ldr	r0, [pc, #96]	@ (8001e6c <MX_TIM3_Init+0xe4>)
 8001e0c:	f002 f944 	bl	8004098 <HAL_TIM_PWM_Init>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001e16:	f7ff fd42 	bl	800189e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e22:	f107 0320 	add.w	r3, r7, #32
 8001e26:	4619      	mov	r1, r3
 8001e28:	4810      	ldr	r0, [pc, #64]	@ (8001e6c <MX_TIM3_Init+0xe4>)
 8001e2a:	f003 f8ad 	bl	8004f88 <HAL_TIMEx_MasterConfigSynchronization>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001e34:	f7ff fd33 	bl	800189e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e38:	2360      	movs	r3, #96	@ 0x60
 8001e3a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e40:	2300      	movs	r3, #0
 8001e42:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e44:	2300      	movs	r3, #0
 8001e46:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e48:	1d3b      	adds	r3, r7, #4
 8001e4a:	2208      	movs	r2, #8
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4807      	ldr	r0, [pc, #28]	@ (8001e6c <MX_TIM3_Init+0xe4>)
 8001e50:	f002 fc3c 	bl	80046cc <HAL_TIM_PWM_ConfigChannel>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001e5a:	f7ff fd20 	bl	800189e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001e5e:	4803      	ldr	r0, [pc, #12]	@ (8001e6c <MX_TIM3_Init+0xe4>)
 8001e60:	f000 f8cc 	bl	8001ffc <HAL_TIM_MspPostInit>

}
 8001e64:	bf00      	nop
 8001e66:	3738      	adds	r7, #56	@ 0x38
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	20000944 	.word	0x20000944
 8001e70:	40000400 	.word	0x40000400

08001e74 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b086      	sub	sp, #24
 8001e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e7a:	f107 0308 	add.w	r3, r7, #8
 8001e7e:	2200      	movs	r2, #0
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	605a      	str	r2, [r3, #4]
 8001e84:	609a      	str	r2, [r3, #8]
 8001e86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e88:	463b      	mov	r3, r7
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	601a      	str	r2, [r3, #0]
 8001e8e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001e90:	4b1d      	ldr	r3, [pc, #116]	@ (8001f08 <MX_TIM4_Init+0x94>)
 8001e92:	4a1e      	ldr	r2, [pc, #120]	@ (8001f0c <MX_TIM4_Init+0x98>)
 8001e94:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7200-1;
 8001e96:	4b1c      	ldr	r3, [pc, #112]	@ (8001f08 <MX_TIM4_Init+0x94>)
 8001e98:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8001e9c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e9e:	4b1a      	ldr	r3, [pc, #104]	@ (8001f08 <MX_TIM4_Init+0x94>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8001ea4:	4b18      	ldr	r3, [pc, #96]	@ (8001f08 <MX_TIM4_Init+0x94>)
 8001ea6:	2263      	movs	r2, #99	@ 0x63
 8001ea8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eaa:	4b17      	ldr	r3, [pc, #92]	@ (8001f08 <MX_TIM4_Init+0x94>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eb0:	4b15      	ldr	r3, [pc, #84]	@ (8001f08 <MX_TIM4_Init+0x94>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001eb6:	4814      	ldr	r0, [pc, #80]	@ (8001f08 <MX_TIM4_Init+0x94>)
 8001eb8:	f002 f84c 	bl	8003f54 <HAL_TIM_Base_Init>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001ec2:	f7ff fcec 	bl	800189e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ec6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001eca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001ecc:	f107 0308 	add.w	r3, r7, #8
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	480d      	ldr	r0, [pc, #52]	@ (8001f08 <MX_TIM4_Init+0x94>)
 8001ed4:	f002 fcbc 	bl	8004850 <HAL_TIM_ConfigClockSource>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001ede:	f7ff fcde 	bl	800189e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001eea:	463b      	mov	r3, r7
 8001eec:	4619      	mov	r1, r3
 8001eee:	4806      	ldr	r0, [pc, #24]	@ (8001f08 <MX_TIM4_Init+0x94>)
 8001ef0:	f003 f84a 	bl	8004f88 <HAL_TIMEx_MasterConfigSynchronization>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001efa:	f7ff fcd0 	bl	800189e <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001efe:	bf00      	nop
 8001f00:	3718      	adds	r7, #24
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	2000098c 	.word	0x2000098c
 8001f0c:	40000800 	.word	0x40000800

08001f10 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b088      	sub	sp, #32
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f18:	f107 0310 	add.w	r3, r7, #16
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	605a      	str	r2, [r3, #4]
 8001f22:	609a      	str	r2, [r3, #8]
 8001f24:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM2)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f2e:	d123      	bne.n	8001f78 <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f30:	4b13      	ldr	r3, [pc, #76]	@ (8001f80 <HAL_TIM_Encoder_MspInit+0x70>)
 8001f32:	69db      	ldr	r3, [r3, #28]
 8001f34:	4a12      	ldr	r2, [pc, #72]	@ (8001f80 <HAL_TIM_Encoder_MspInit+0x70>)
 8001f36:	f043 0301 	orr.w	r3, r3, #1
 8001f3a:	61d3      	str	r3, [r2, #28]
 8001f3c:	4b10      	ldr	r3, [pc, #64]	@ (8001f80 <HAL_TIM_Encoder_MspInit+0x70>)
 8001f3e:	69db      	ldr	r3, [r3, #28]
 8001f40:	f003 0301 	and.w	r3, r3, #1
 8001f44:	60fb      	str	r3, [r7, #12]
 8001f46:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f48:	4b0d      	ldr	r3, [pc, #52]	@ (8001f80 <HAL_TIM_Encoder_MspInit+0x70>)
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	4a0c      	ldr	r2, [pc, #48]	@ (8001f80 <HAL_TIM_Encoder_MspInit+0x70>)
 8001f4e:	f043 0304 	orr.w	r3, r3, #4
 8001f52:	6193      	str	r3, [r2, #24]
 8001f54:	4b0a      	ldr	r3, [pc, #40]	@ (8001f80 <HAL_TIM_Encoder_MspInit+0x70>)
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	f003 0304 	and.w	r3, r3, #4
 8001f5c:	60bb      	str	r3, [r7, #8]
 8001f5e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001f60:	2303      	movs	r3, #3
 8001f62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f64:	2300      	movs	r3, #0
 8001f66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f6c:	f107 0310 	add.w	r3, r7, #16
 8001f70:	4619      	mov	r1, r3
 8001f72:	4804      	ldr	r0, [pc, #16]	@ (8001f84 <HAL_TIM_Encoder_MspInit+0x74>)
 8001f74:	f000 fd8e 	bl	8002a94 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001f78:	bf00      	nop
 8001f7a:	3720      	adds	r7, #32
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	40021000 	.word	0x40021000
 8001f84:	40010800 	.word	0x40010800

08001f88 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a16      	ldr	r2, [pc, #88]	@ (8001ff0 <HAL_TIM_Base_MspInit+0x68>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d10c      	bne.n	8001fb4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f9a:	4b16      	ldr	r3, [pc, #88]	@ (8001ff4 <HAL_TIM_Base_MspInit+0x6c>)
 8001f9c:	69db      	ldr	r3, [r3, #28]
 8001f9e:	4a15      	ldr	r2, [pc, #84]	@ (8001ff4 <HAL_TIM_Base_MspInit+0x6c>)
 8001fa0:	f043 0302 	orr.w	r3, r3, #2
 8001fa4:	61d3      	str	r3, [r2, #28]
 8001fa6:	4b13      	ldr	r3, [pc, #76]	@ (8001ff4 <HAL_TIM_Base_MspInit+0x6c>)
 8001fa8:	69db      	ldr	r3, [r3, #28]
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001fb2:	e018      	b.n	8001fe6 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM4)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a0f      	ldr	r2, [pc, #60]	@ (8001ff8 <HAL_TIM_Base_MspInit+0x70>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d113      	bne.n	8001fe6 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001fbe:	4b0d      	ldr	r3, [pc, #52]	@ (8001ff4 <HAL_TIM_Base_MspInit+0x6c>)
 8001fc0:	69db      	ldr	r3, [r3, #28]
 8001fc2:	4a0c      	ldr	r2, [pc, #48]	@ (8001ff4 <HAL_TIM_Base_MspInit+0x6c>)
 8001fc4:	f043 0304 	orr.w	r3, r3, #4
 8001fc8:	61d3      	str	r3, [r2, #28]
 8001fca:	4b0a      	ldr	r3, [pc, #40]	@ (8001ff4 <HAL_TIM_Base_MspInit+0x6c>)
 8001fcc:	69db      	ldr	r3, [r3, #28]
 8001fce:	f003 0304 	and.w	r3, r3, #4
 8001fd2:	60bb      	str	r3, [r7, #8]
 8001fd4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	2100      	movs	r1, #0
 8001fda:	201e      	movs	r0, #30
 8001fdc:	f000 fa81 	bl	80024e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001fe0:	201e      	movs	r0, #30
 8001fe2:	f000 fa9a 	bl	800251a <HAL_NVIC_EnableIRQ>
}
 8001fe6:	bf00      	nop
 8001fe8:	3710      	adds	r7, #16
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	40000400 	.word	0x40000400
 8001ff4:	40021000 	.word	0x40021000
 8001ff8:	40000800 	.word	0x40000800

08001ffc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b088      	sub	sp, #32
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002004:	f107 0310 	add.w	r3, r7, #16
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]
 800200c:	605a      	str	r2, [r3, #4]
 800200e:	609a      	str	r2, [r3, #8]
 8002010:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a0f      	ldr	r2, [pc, #60]	@ (8002054 <HAL_TIM_MspPostInit+0x58>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d117      	bne.n	800204c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800201c:	4b0e      	ldr	r3, [pc, #56]	@ (8002058 <HAL_TIM_MspPostInit+0x5c>)
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	4a0d      	ldr	r2, [pc, #52]	@ (8002058 <HAL_TIM_MspPostInit+0x5c>)
 8002022:	f043 0308 	orr.w	r3, r3, #8
 8002026:	6193      	str	r3, [r2, #24]
 8002028:	4b0b      	ldr	r3, [pc, #44]	@ (8002058 <HAL_TIM_MspPostInit+0x5c>)
 800202a:	699b      	ldr	r3, [r3, #24]
 800202c:	f003 0308 	and.w	r3, r3, #8
 8002030:	60fb      	str	r3, [r7, #12]
 8002032:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002034:	2301      	movs	r3, #1
 8002036:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002038:	2302      	movs	r3, #2
 800203a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203c:	2302      	movs	r3, #2
 800203e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002040:	f107 0310 	add.w	r3, r7, #16
 8002044:	4619      	mov	r1, r3
 8002046:	4805      	ldr	r0, [pc, #20]	@ (800205c <HAL_TIM_MspPostInit+0x60>)
 8002048:	f000 fd24 	bl	8002a94 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800204c:	bf00      	nop
 800204e:	3720      	adds	r7, #32
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	40000400 	.word	0x40000400
 8002058:	40021000 	.word	0x40021000
 800205c:	40010c00 	.word	0x40010c00

08002060 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002064:	4b11      	ldr	r3, [pc, #68]	@ (80020ac <MX_USART1_UART_Init+0x4c>)
 8002066:	4a12      	ldr	r2, [pc, #72]	@ (80020b0 <MX_USART1_UART_Init+0x50>)
 8002068:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800206a:	4b10      	ldr	r3, [pc, #64]	@ (80020ac <MX_USART1_UART_Init+0x4c>)
 800206c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002070:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002072:	4b0e      	ldr	r3, [pc, #56]	@ (80020ac <MX_USART1_UART_Init+0x4c>)
 8002074:	2200      	movs	r2, #0
 8002076:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002078:	4b0c      	ldr	r3, [pc, #48]	@ (80020ac <MX_USART1_UART_Init+0x4c>)
 800207a:	2200      	movs	r2, #0
 800207c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800207e:	4b0b      	ldr	r3, [pc, #44]	@ (80020ac <MX_USART1_UART_Init+0x4c>)
 8002080:	2200      	movs	r2, #0
 8002082:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002084:	4b09      	ldr	r3, [pc, #36]	@ (80020ac <MX_USART1_UART_Init+0x4c>)
 8002086:	220c      	movs	r2, #12
 8002088:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800208a:	4b08      	ldr	r3, [pc, #32]	@ (80020ac <MX_USART1_UART_Init+0x4c>)
 800208c:	2200      	movs	r2, #0
 800208e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002090:	4b06      	ldr	r3, [pc, #24]	@ (80020ac <MX_USART1_UART_Init+0x4c>)
 8002092:	2200      	movs	r2, #0
 8002094:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002096:	4805      	ldr	r0, [pc, #20]	@ (80020ac <MX_USART1_UART_Init+0x4c>)
 8002098:	f002 ffe6 	bl	8005068 <HAL_UART_Init>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80020a2:	f7ff fbfc 	bl	800189e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80020a6:	bf00      	nop
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	200009d4 	.word	0x200009d4
 80020b0:	40013800 	.word	0x40013800

080020b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b08a      	sub	sp, #40	@ 0x28
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020bc:	f107 0314 	add.w	r3, r7, #20
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	605a      	str	r2, [r3, #4]
 80020c6:	609a      	str	r2, [r3, #8]
 80020c8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a4d      	ldr	r2, [pc, #308]	@ (8002204 <HAL_UART_MspInit+0x150>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	f040 8092 	bne.w	80021fa <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80020d6:	4b4c      	ldr	r3, [pc, #304]	@ (8002208 <HAL_UART_MspInit+0x154>)
 80020d8:	699b      	ldr	r3, [r3, #24]
 80020da:	4a4b      	ldr	r2, [pc, #300]	@ (8002208 <HAL_UART_MspInit+0x154>)
 80020dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020e0:	6193      	str	r3, [r2, #24]
 80020e2:	4b49      	ldr	r3, [pc, #292]	@ (8002208 <HAL_UART_MspInit+0x154>)
 80020e4:	699b      	ldr	r3, [r3, #24]
 80020e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020ea:	613b      	str	r3, [r7, #16]
 80020ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ee:	4b46      	ldr	r3, [pc, #280]	@ (8002208 <HAL_UART_MspInit+0x154>)
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	4a45      	ldr	r2, [pc, #276]	@ (8002208 <HAL_UART_MspInit+0x154>)
 80020f4:	f043 0308 	orr.w	r3, r3, #8
 80020f8:	6193      	str	r3, [r2, #24]
 80020fa:	4b43      	ldr	r3, [pc, #268]	@ (8002208 <HAL_UART_MspInit+0x154>)
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	f003 0308 	and.w	r3, r3, #8
 8002102:	60fb      	str	r3, [r7, #12]
 8002104:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002106:	2340      	movs	r3, #64	@ 0x40
 8002108:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210a:	2302      	movs	r3, #2
 800210c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800210e:	2303      	movs	r3, #3
 8002110:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002112:	f107 0314 	add.w	r3, r7, #20
 8002116:	4619      	mov	r1, r3
 8002118:	483c      	ldr	r0, [pc, #240]	@ (800220c <HAL_UART_MspInit+0x158>)
 800211a:	f000 fcbb 	bl	8002a94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800211e:	2380      	movs	r3, #128	@ 0x80
 8002120:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002122:	2300      	movs	r3, #0
 8002124:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002126:	2300      	movs	r3, #0
 8002128:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800212a:	f107 0314 	add.w	r3, r7, #20
 800212e:	4619      	mov	r1, r3
 8002130:	4836      	ldr	r0, [pc, #216]	@ (800220c <HAL_UART_MspInit+0x158>)
 8002132:	f000 fcaf 	bl	8002a94 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8002136:	4b36      	ldr	r3, [pc, #216]	@ (8002210 <HAL_UART_MspInit+0x15c>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	627b      	str	r3, [r7, #36]	@ 0x24
 800213c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800213e:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8002142:	627b      	str	r3, [r7, #36]	@ 0x24
 8002144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002146:	f043 0304 	orr.w	r3, r3, #4
 800214a:	627b      	str	r3, [r7, #36]	@ 0x24
 800214c:	4a30      	ldr	r2, [pc, #192]	@ (8002210 <HAL_UART_MspInit+0x15c>)
 800214e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002150:	6053      	str	r3, [r2, #4]

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002152:	4b30      	ldr	r3, [pc, #192]	@ (8002214 <HAL_UART_MspInit+0x160>)
 8002154:	4a30      	ldr	r2, [pc, #192]	@ (8002218 <HAL_UART_MspInit+0x164>)
 8002156:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002158:	4b2e      	ldr	r3, [pc, #184]	@ (8002214 <HAL_UART_MspInit+0x160>)
 800215a:	2200      	movs	r2, #0
 800215c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800215e:	4b2d      	ldr	r3, [pc, #180]	@ (8002214 <HAL_UART_MspInit+0x160>)
 8002160:	2200      	movs	r2, #0
 8002162:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002164:	4b2b      	ldr	r3, [pc, #172]	@ (8002214 <HAL_UART_MspInit+0x160>)
 8002166:	2280      	movs	r2, #128	@ 0x80
 8002168:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800216a:	4b2a      	ldr	r3, [pc, #168]	@ (8002214 <HAL_UART_MspInit+0x160>)
 800216c:	2200      	movs	r2, #0
 800216e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002170:	4b28      	ldr	r3, [pc, #160]	@ (8002214 <HAL_UART_MspInit+0x160>)
 8002172:	2200      	movs	r2, #0
 8002174:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002176:	4b27      	ldr	r3, [pc, #156]	@ (8002214 <HAL_UART_MspInit+0x160>)
 8002178:	2200      	movs	r2, #0
 800217a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800217c:	4b25      	ldr	r3, [pc, #148]	@ (8002214 <HAL_UART_MspInit+0x160>)
 800217e:	2200      	movs	r2, #0
 8002180:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002182:	4824      	ldr	r0, [pc, #144]	@ (8002214 <HAL_UART_MspInit+0x160>)
 8002184:	f000 f9e4 	bl	8002550 <HAL_DMA_Init>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <HAL_UART_MspInit+0xde>
    {
      Error_Handler();
 800218e:	f7ff fb86 	bl	800189e <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a1f      	ldr	r2, [pc, #124]	@ (8002214 <HAL_UART_MspInit+0x160>)
 8002196:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002198:	4a1e      	ldr	r2, [pc, #120]	@ (8002214 <HAL_UART_MspInit+0x160>)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800219e:	4b1f      	ldr	r3, [pc, #124]	@ (800221c <HAL_UART_MspInit+0x168>)
 80021a0:	4a1f      	ldr	r2, [pc, #124]	@ (8002220 <HAL_UART_MspInit+0x16c>)
 80021a2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021a4:	4b1d      	ldr	r3, [pc, #116]	@ (800221c <HAL_UART_MspInit+0x168>)
 80021a6:	2210      	movs	r2, #16
 80021a8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021aa:	4b1c      	ldr	r3, [pc, #112]	@ (800221c <HAL_UART_MspInit+0x168>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80021b0:	4b1a      	ldr	r3, [pc, #104]	@ (800221c <HAL_UART_MspInit+0x168>)
 80021b2:	2280      	movs	r2, #128	@ 0x80
 80021b4:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021b6:	4b19      	ldr	r3, [pc, #100]	@ (800221c <HAL_UART_MspInit+0x168>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021bc:	4b17      	ldr	r3, [pc, #92]	@ (800221c <HAL_UART_MspInit+0x168>)
 80021be:	2200      	movs	r2, #0
 80021c0:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80021c2:	4b16      	ldr	r3, [pc, #88]	@ (800221c <HAL_UART_MspInit+0x168>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80021c8:	4b14      	ldr	r3, [pc, #80]	@ (800221c <HAL_UART_MspInit+0x168>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80021ce:	4813      	ldr	r0, [pc, #76]	@ (800221c <HAL_UART_MspInit+0x168>)
 80021d0:	f000 f9be 	bl	8002550 <HAL_DMA_Init>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 80021da:	f7ff fb60 	bl	800189e <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a0e      	ldr	r2, [pc, #56]	@ (800221c <HAL_UART_MspInit+0x168>)
 80021e2:	639a      	str	r2, [r3, #56]	@ 0x38
 80021e4:	4a0d      	ldr	r2, [pc, #52]	@ (800221c <HAL_UART_MspInit+0x168>)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80021ea:	2200      	movs	r2, #0
 80021ec:	2100      	movs	r1, #0
 80021ee:	2025      	movs	r0, #37	@ 0x25
 80021f0:	f000 f977 	bl	80024e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80021f4:	2025      	movs	r0, #37	@ 0x25
 80021f6:	f000 f990 	bl	800251a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80021fa:	bf00      	nop
 80021fc:	3728      	adds	r7, #40	@ 0x28
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	40013800 	.word	0x40013800
 8002208:	40021000 	.word	0x40021000
 800220c:	40010c00 	.word	0x40010c00
 8002210:	40010000 	.word	0x40010000
 8002214:	20000a1c 	.word	0x20000a1c
 8002218:	40020058 	.word	0x40020058
 800221c:	20000a60 	.word	0x20000a60
 8002220:	40020044 	.word	0x40020044

08002224 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002224:	f7ff fd56 	bl	8001cd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002228:	480b      	ldr	r0, [pc, #44]	@ (8002258 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800222a:	490c      	ldr	r1, [pc, #48]	@ (800225c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800222c:	4a0c      	ldr	r2, [pc, #48]	@ (8002260 <LoopFillZerobss+0x16>)
  movs r3, #0
 800222e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002230:	e002      	b.n	8002238 <LoopCopyDataInit>

08002232 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002232:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002234:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002236:	3304      	adds	r3, #4

08002238 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002238:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800223a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800223c:	d3f9      	bcc.n	8002232 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800223e:	4a09      	ldr	r2, [pc, #36]	@ (8002264 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002240:	4c09      	ldr	r4, [pc, #36]	@ (8002268 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002242:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002244:	e001      	b.n	800224a <LoopFillZerobss>

08002246 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002246:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002248:	3204      	adds	r2, #4

0800224a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800224a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800224c:	d3fb      	bcc.n	8002246 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800224e:	f004 ff95 	bl	800717c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002252:	f7ff fa91 	bl	8001778 <main>
  bx lr
 8002256:	4770      	bx	lr
  ldr r0, =_sdata
 8002258:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800225c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002260:	0800abf8 	.word	0x0800abf8
  ldr r2, =_sbss
 8002264:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002268:	20000bf4 	.word	0x20000bf4

0800226c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800226c:	e7fe      	b.n	800226c <ADC1_2_IRQHandler>
	...

08002270 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002274:	4b08      	ldr	r3, [pc, #32]	@ (8002298 <HAL_Init+0x28>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a07      	ldr	r2, [pc, #28]	@ (8002298 <HAL_Init+0x28>)
 800227a:	f043 0310 	orr.w	r3, r3, #16
 800227e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002280:	2003      	movs	r0, #3
 8002282:	f000 f923 	bl	80024cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002286:	200b      	movs	r0, #11
 8002288:	f000 f808 	bl	800229c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800228c:	f7ff fbd2 	bl	8001a34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	40022000 	.word	0x40022000

0800229c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022a4:	4b12      	ldr	r3, [pc, #72]	@ (80022f0 <HAL_InitTick+0x54>)
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	4b12      	ldr	r3, [pc, #72]	@ (80022f4 <HAL_InitTick+0x58>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	4619      	mov	r1, r3
 80022ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80022b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ba:	4618      	mov	r0, r3
 80022bc:	f000 f93b 	bl	8002536 <HAL_SYSTICK_Config>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e00e      	b.n	80022e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2b0f      	cmp	r3, #15
 80022ce:	d80a      	bhi.n	80022e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022d0:	2200      	movs	r2, #0
 80022d2:	6879      	ldr	r1, [r7, #4]
 80022d4:	f04f 30ff 	mov.w	r0, #4294967295
 80022d8:	f000 f903 	bl	80024e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022dc:	4a06      	ldr	r2, [pc, #24]	@ (80022f8 <HAL_InitTick+0x5c>)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022e2:	2300      	movs	r3, #0
 80022e4:	e000      	b.n	80022e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3708      	adds	r7, #8
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	20000000 	.word	0x20000000
 80022f4:	20000008 	.word	0x20000008
 80022f8:	20000004 	.word	0x20000004

080022fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002300:	4b05      	ldr	r3, [pc, #20]	@ (8002318 <HAL_IncTick+0x1c>)
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	461a      	mov	r2, r3
 8002306:	4b05      	ldr	r3, [pc, #20]	@ (800231c <HAL_IncTick+0x20>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4413      	add	r3, r2
 800230c:	4a03      	ldr	r2, [pc, #12]	@ (800231c <HAL_IncTick+0x20>)
 800230e:	6013      	str	r3, [r2, #0]
}
 8002310:	bf00      	nop
 8002312:	46bd      	mov	sp, r7
 8002314:	bc80      	pop	{r7}
 8002316:	4770      	bx	lr
 8002318:	20000008 	.word	0x20000008
 800231c:	20000aa4 	.word	0x20000aa4

08002320 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  return uwTick;
 8002324:	4b02      	ldr	r3, [pc, #8]	@ (8002330 <HAL_GetTick+0x10>)
 8002326:	681b      	ldr	r3, [r3, #0]
}
 8002328:	4618      	mov	r0, r3
 800232a:	46bd      	mov	sp, r7
 800232c:	bc80      	pop	{r7}
 800232e:	4770      	bx	lr
 8002330:	20000aa4 	.word	0x20000aa4

08002334 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002334:	b480      	push	{r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f003 0307 	and.w	r3, r3, #7
 8002342:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002344:	4b0c      	ldr	r3, [pc, #48]	@ (8002378 <__NVIC_SetPriorityGrouping+0x44>)
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800234a:	68ba      	ldr	r2, [r7, #8]
 800234c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002350:	4013      	ands	r3, r2
 8002352:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800235c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002360:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002364:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002366:	4a04      	ldr	r2, [pc, #16]	@ (8002378 <__NVIC_SetPriorityGrouping+0x44>)
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	60d3      	str	r3, [r2, #12]
}
 800236c:	bf00      	nop
 800236e:	3714      	adds	r7, #20
 8002370:	46bd      	mov	sp, r7
 8002372:	bc80      	pop	{r7}
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	e000ed00 	.word	0xe000ed00

0800237c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002380:	4b04      	ldr	r3, [pc, #16]	@ (8002394 <__NVIC_GetPriorityGrouping+0x18>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	0a1b      	lsrs	r3, r3, #8
 8002386:	f003 0307 	and.w	r3, r3, #7
}
 800238a:	4618      	mov	r0, r3
 800238c:	46bd      	mov	sp, r7
 800238e:	bc80      	pop	{r7}
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	e000ed00 	.word	0xe000ed00

08002398 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	4603      	mov	r3, r0
 80023a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	db0b      	blt.n	80023c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023aa:	79fb      	ldrb	r3, [r7, #7]
 80023ac:	f003 021f 	and.w	r2, r3, #31
 80023b0:	4906      	ldr	r1, [pc, #24]	@ (80023cc <__NVIC_EnableIRQ+0x34>)
 80023b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b6:	095b      	lsrs	r3, r3, #5
 80023b8:	2001      	movs	r0, #1
 80023ba:	fa00 f202 	lsl.w	r2, r0, r2
 80023be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023c2:	bf00      	nop
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bc80      	pop	{r7}
 80023ca:	4770      	bx	lr
 80023cc:	e000e100 	.word	0xe000e100

080023d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	4603      	mov	r3, r0
 80023d8:	6039      	str	r1, [r7, #0]
 80023da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	db0a      	blt.n	80023fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	b2da      	uxtb	r2, r3
 80023e8:	490c      	ldr	r1, [pc, #48]	@ (800241c <__NVIC_SetPriority+0x4c>)
 80023ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ee:	0112      	lsls	r2, r2, #4
 80023f0:	b2d2      	uxtb	r2, r2
 80023f2:	440b      	add	r3, r1
 80023f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023f8:	e00a      	b.n	8002410 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	b2da      	uxtb	r2, r3
 80023fe:	4908      	ldr	r1, [pc, #32]	@ (8002420 <__NVIC_SetPriority+0x50>)
 8002400:	79fb      	ldrb	r3, [r7, #7]
 8002402:	f003 030f 	and.w	r3, r3, #15
 8002406:	3b04      	subs	r3, #4
 8002408:	0112      	lsls	r2, r2, #4
 800240a:	b2d2      	uxtb	r2, r2
 800240c:	440b      	add	r3, r1
 800240e:	761a      	strb	r2, [r3, #24]
}
 8002410:	bf00      	nop
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	bc80      	pop	{r7}
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	e000e100 	.word	0xe000e100
 8002420:	e000ed00 	.word	0xe000ed00

08002424 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002424:	b480      	push	{r7}
 8002426:	b089      	sub	sp, #36	@ 0x24
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f003 0307 	and.w	r3, r3, #7
 8002436:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	f1c3 0307 	rsb	r3, r3, #7
 800243e:	2b04      	cmp	r3, #4
 8002440:	bf28      	it	cs
 8002442:	2304      	movcs	r3, #4
 8002444:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	3304      	adds	r3, #4
 800244a:	2b06      	cmp	r3, #6
 800244c:	d902      	bls.n	8002454 <NVIC_EncodePriority+0x30>
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	3b03      	subs	r3, #3
 8002452:	e000      	b.n	8002456 <NVIC_EncodePriority+0x32>
 8002454:	2300      	movs	r3, #0
 8002456:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002458:	f04f 32ff 	mov.w	r2, #4294967295
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	fa02 f303 	lsl.w	r3, r2, r3
 8002462:	43da      	mvns	r2, r3
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	401a      	ands	r2, r3
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800246c:	f04f 31ff 	mov.w	r1, #4294967295
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	fa01 f303 	lsl.w	r3, r1, r3
 8002476:	43d9      	mvns	r1, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800247c:	4313      	orrs	r3, r2
         );
}
 800247e:	4618      	mov	r0, r3
 8002480:	3724      	adds	r7, #36	@ 0x24
 8002482:	46bd      	mov	sp, r7
 8002484:	bc80      	pop	{r7}
 8002486:	4770      	bx	lr

08002488 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	3b01      	subs	r3, #1
 8002494:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002498:	d301      	bcc.n	800249e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800249a:	2301      	movs	r3, #1
 800249c:	e00f      	b.n	80024be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800249e:	4a0a      	ldr	r2, [pc, #40]	@ (80024c8 <SysTick_Config+0x40>)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	3b01      	subs	r3, #1
 80024a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024a6:	210f      	movs	r1, #15
 80024a8:	f04f 30ff 	mov.w	r0, #4294967295
 80024ac:	f7ff ff90 	bl	80023d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024b0:	4b05      	ldr	r3, [pc, #20]	@ (80024c8 <SysTick_Config+0x40>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024b6:	4b04      	ldr	r3, [pc, #16]	@ (80024c8 <SysTick_Config+0x40>)
 80024b8:	2207      	movs	r2, #7
 80024ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	e000e010 	.word	0xe000e010

080024cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f7ff ff2d 	bl	8002334 <__NVIC_SetPriorityGrouping>
}
 80024da:	bf00      	nop
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b086      	sub	sp, #24
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	4603      	mov	r3, r0
 80024ea:	60b9      	str	r1, [r7, #8]
 80024ec:	607a      	str	r2, [r7, #4]
 80024ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024f0:	2300      	movs	r3, #0
 80024f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024f4:	f7ff ff42 	bl	800237c <__NVIC_GetPriorityGrouping>
 80024f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	68b9      	ldr	r1, [r7, #8]
 80024fe:	6978      	ldr	r0, [r7, #20]
 8002500:	f7ff ff90 	bl	8002424 <NVIC_EncodePriority>
 8002504:	4602      	mov	r2, r0
 8002506:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800250a:	4611      	mov	r1, r2
 800250c:	4618      	mov	r0, r3
 800250e:	f7ff ff5f 	bl	80023d0 <__NVIC_SetPriority>
}
 8002512:	bf00      	nop
 8002514:	3718      	adds	r7, #24
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	b082      	sub	sp, #8
 800251e:	af00      	add	r7, sp, #0
 8002520:	4603      	mov	r3, r0
 8002522:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002528:	4618      	mov	r0, r3
 800252a:	f7ff ff35 	bl	8002398 <__NVIC_EnableIRQ>
}
 800252e:	bf00      	nop
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	b082      	sub	sp, #8
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f7ff ffa2 	bl	8002488 <SysTick_Config>
 8002544:	4603      	mov	r3, r0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
	...

08002550 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002550:	b480      	push	{r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002558:	2300      	movs	r3, #0
 800255a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d101      	bne.n	8002566 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e043      	b.n	80025ee <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	461a      	mov	r2, r3
 800256c:	4b22      	ldr	r3, [pc, #136]	@ (80025f8 <HAL_DMA_Init+0xa8>)
 800256e:	4413      	add	r3, r2
 8002570:	4a22      	ldr	r2, [pc, #136]	@ (80025fc <HAL_DMA_Init+0xac>)
 8002572:	fba2 2303 	umull	r2, r3, r2, r3
 8002576:	091b      	lsrs	r3, r3, #4
 8002578:	009a      	lsls	r2, r3, #2
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a1f      	ldr	r2, [pc, #124]	@ (8002600 <HAL_DMA_Init+0xb0>)
 8002582:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2202      	movs	r2, #2
 8002588:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800259a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800259e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80025a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	695b      	ldr	r3, [r3, #20]
 80025ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	69db      	ldr	r3, [r3, #28]
 80025c6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80025c8:	68fa      	ldr	r2, [r7, #12]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68fa      	ldr	r2, [r7, #12]
 80025d4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2201      	movs	r2, #1
 80025e0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3714      	adds	r7, #20
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bc80      	pop	{r7}
 80025f6:	4770      	bx	lr
 80025f8:	bffdfff8 	.word	0xbffdfff8
 80025fc:	cccccccd 	.word	0xcccccccd
 8002600:	40020000 	.word	0x40020000

08002604 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b086      	sub	sp, #24
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	607a      	str	r2, [r7, #4]
 8002610:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002612:	2300      	movs	r3, #0
 8002614:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	f893 3020 	ldrb.w	r3, [r3, #32]
 800261c:	2b01      	cmp	r3, #1
 800261e:	d101      	bne.n	8002624 <HAL_DMA_Start_IT+0x20>
 8002620:	2302      	movs	r3, #2
 8002622:	e04b      	b.n	80026bc <HAL_DMA_Start_IT+0xb8>
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002632:	b2db      	uxtb	r3, r3
 8002634:	2b01      	cmp	r3, #1
 8002636:	d13a      	bne.n	80026ae <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2202      	movs	r2, #2
 800263c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2200      	movs	r2, #0
 8002644:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f022 0201 	bic.w	r2, r2, #1
 8002654:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	68b9      	ldr	r1, [r7, #8]
 800265c:	68f8      	ldr	r0, [r7, #12]
 800265e:	f000 f9eb 	bl	8002a38 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002666:	2b00      	cmp	r3, #0
 8002668:	d008      	beq.n	800267c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f042 020e 	orr.w	r2, r2, #14
 8002678:	601a      	str	r2, [r3, #0]
 800267a:	e00f      	b.n	800269c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f022 0204 	bic.w	r2, r2, #4
 800268a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f042 020a 	orr.w	r2, r2, #10
 800269a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f042 0201 	orr.w	r2, r2, #1
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	e005      	b.n	80026ba <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80026b6:	2302      	movs	r3, #2
 80026b8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80026ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3718      	adds	r7, #24
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b085      	sub	sp, #20
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026cc:	2300      	movs	r3, #0
 80026ce:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d008      	beq.n	80026ee <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2204      	movs	r2, #4
 80026e0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e020      	b.n	8002730 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f022 020e 	bic.w	r2, r2, #14
 80026fc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f022 0201 	bic.w	r2, r2, #1
 800270c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002716:	2101      	movs	r1, #1
 8002718:	fa01 f202 	lsl.w	r2, r1, r2
 800271c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2201      	movs	r2, #1
 8002722:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800272e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002730:	4618      	mov	r0, r3
 8002732:	3714      	adds	r7, #20
 8002734:	46bd      	mov	sp, r7
 8002736:	bc80      	pop	{r7}
 8002738:	4770      	bx	lr
	...

0800273c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002744:	2300      	movs	r3, #0
 8002746:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800274e:	b2db      	uxtb	r3, r3
 8002750:	2b02      	cmp	r3, #2
 8002752:	d005      	beq.n	8002760 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2204      	movs	r2, #4
 8002758:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	73fb      	strb	r3, [r7, #15]
 800275e:	e051      	b.n	8002804 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f022 020e 	bic.w	r2, r2, #14
 800276e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f022 0201 	bic.w	r2, r2, #1
 800277e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a22      	ldr	r2, [pc, #136]	@ (8002810 <HAL_DMA_Abort_IT+0xd4>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d029      	beq.n	80027de <HAL_DMA_Abort_IT+0xa2>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a21      	ldr	r2, [pc, #132]	@ (8002814 <HAL_DMA_Abort_IT+0xd8>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d022      	beq.n	80027da <HAL_DMA_Abort_IT+0x9e>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a1f      	ldr	r2, [pc, #124]	@ (8002818 <HAL_DMA_Abort_IT+0xdc>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d01a      	beq.n	80027d4 <HAL_DMA_Abort_IT+0x98>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a1e      	ldr	r2, [pc, #120]	@ (800281c <HAL_DMA_Abort_IT+0xe0>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d012      	beq.n	80027ce <HAL_DMA_Abort_IT+0x92>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a1c      	ldr	r2, [pc, #112]	@ (8002820 <HAL_DMA_Abort_IT+0xe4>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d00a      	beq.n	80027c8 <HAL_DMA_Abort_IT+0x8c>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a1b      	ldr	r2, [pc, #108]	@ (8002824 <HAL_DMA_Abort_IT+0xe8>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d102      	bne.n	80027c2 <HAL_DMA_Abort_IT+0x86>
 80027bc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80027c0:	e00e      	b.n	80027e0 <HAL_DMA_Abort_IT+0xa4>
 80027c2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80027c6:	e00b      	b.n	80027e0 <HAL_DMA_Abort_IT+0xa4>
 80027c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80027cc:	e008      	b.n	80027e0 <HAL_DMA_Abort_IT+0xa4>
 80027ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80027d2:	e005      	b.n	80027e0 <HAL_DMA_Abort_IT+0xa4>
 80027d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80027d8:	e002      	b.n	80027e0 <HAL_DMA_Abort_IT+0xa4>
 80027da:	2310      	movs	r3, #16
 80027dc:	e000      	b.n	80027e0 <HAL_DMA_Abort_IT+0xa4>
 80027de:	2301      	movs	r3, #1
 80027e0:	4a11      	ldr	r2, [pc, #68]	@ (8002828 <HAL_DMA_Abort_IT+0xec>)
 80027e2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d003      	beq.n	8002804 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	4798      	blx	r3
    } 
  }
  return status;
 8002804:	7bfb      	ldrb	r3, [r7, #15]
}
 8002806:	4618      	mov	r0, r3
 8002808:	3710      	adds	r7, #16
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	40020008 	.word	0x40020008
 8002814:	4002001c 	.word	0x4002001c
 8002818:	40020030 	.word	0x40020030
 800281c:	40020044 	.word	0x40020044
 8002820:	40020058 	.word	0x40020058
 8002824:	4002006c 	.word	0x4002006c
 8002828:	40020000 	.word	0x40020000

0800282c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002848:	2204      	movs	r2, #4
 800284a:	409a      	lsls	r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	4013      	ands	r3, r2
 8002850:	2b00      	cmp	r3, #0
 8002852:	d04f      	beq.n	80028f4 <HAL_DMA_IRQHandler+0xc8>
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	f003 0304 	and.w	r3, r3, #4
 800285a:	2b00      	cmp	r3, #0
 800285c:	d04a      	beq.n	80028f4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0320 	and.w	r3, r3, #32
 8002868:	2b00      	cmp	r3, #0
 800286a:	d107      	bne.n	800287c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f022 0204 	bic.w	r2, r2, #4
 800287a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a66      	ldr	r2, [pc, #408]	@ (8002a1c <HAL_DMA_IRQHandler+0x1f0>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d029      	beq.n	80028da <HAL_DMA_IRQHandler+0xae>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a65      	ldr	r2, [pc, #404]	@ (8002a20 <HAL_DMA_IRQHandler+0x1f4>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d022      	beq.n	80028d6 <HAL_DMA_IRQHandler+0xaa>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a63      	ldr	r2, [pc, #396]	@ (8002a24 <HAL_DMA_IRQHandler+0x1f8>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d01a      	beq.n	80028d0 <HAL_DMA_IRQHandler+0xa4>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a62      	ldr	r2, [pc, #392]	@ (8002a28 <HAL_DMA_IRQHandler+0x1fc>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d012      	beq.n	80028ca <HAL_DMA_IRQHandler+0x9e>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a60      	ldr	r2, [pc, #384]	@ (8002a2c <HAL_DMA_IRQHandler+0x200>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d00a      	beq.n	80028c4 <HAL_DMA_IRQHandler+0x98>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a5f      	ldr	r2, [pc, #380]	@ (8002a30 <HAL_DMA_IRQHandler+0x204>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d102      	bne.n	80028be <HAL_DMA_IRQHandler+0x92>
 80028b8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80028bc:	e00e      	b.n	80028dc <HAL_DMA_IRQHandler+0xb0>
 80028be:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80028c2:	e00b      	b.n	80028dc <HAL_DMA_IRQHandler+0xb0>
 80028c4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80028c8:	e008      	b.n	80028dc <HAL_DMA_IRQHandler+0xb0>
 80028ca:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80028ce:	e005      	b.n	80028dc <HAL_DMA_IRQHandler+0xb0>
 80028d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80028d4:	e002      	b.n	80028dc <HAL_DMA_IRQHandler+0xb0>
 80028d6:	2340      	movs	r3, #64	@ 0x40
 80028d8:	e000      	b.n	80028dc <HAL_DMA_IRQHandler+0xb0>
 80028da:	2304      	movs	r3, #4
 80028dc:	4a55      	ldr	r2, [pc, #340]	@ (8002a34 <HAL_DMA_IRQHandler+0x208>)
 80028de:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	f000 8094 	beq.w	8002a12 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80028f2:	e08e      	b.n	8002a12 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f8:	2202      	movs	r2, #2
 80028fa:	409a      	lsls	r2, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	4013      	ands	r3, r2
 8002900:	2b00      	cmp	r3, #0
 8002902:	d056      	beq.n	80029b2 <HAL_DMA_IRQHandler+0x186>
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d051      	beq.n	80029b2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0320 	and.w	r3, r3, #32
 8002918:	2b00      	cmp	r3, #0
 800291a:	d10b      	bne.n	8002934 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f022 020a 	bic.w	r2, r2, #10
 800292a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a38      	ldr	r2, [pc, #224]	@ (8002a1c <HAL_DMA_IRQHandler+0x1f0>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d029      	beq.n	8002992 <HAL_DMA_IRQHandler+0x166>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a37      	ldr	r2, [pc, #220]	@ (8002a20 <HAL_DMA_IRQHandler+0x1f4>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d022      	beq.n	800298e <HAL_DMA_IRQHandler+0x162>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a35      	ldr	r2, [pc, #212]	@ (8002a24 <HAL_DMA_IRQHandler+0x1f8>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d01a      	beq.n	8002988 <HAL_DMA_IRQHandler+0x15c>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a34      	ldr	r2, [pc, #208]	@ (8002a28 <HAL_DMA_IRQHandler+0x1fc>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d012      	beq.n	8002982 <HAL_DMA_IRQHandler+0x156>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a32      	ldr	r2, [pc, #200]	@ (8002a2c <HAL_DMA_IRQHandler+0x200>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d00a      	beq.n	800297c <HAL_DMA_IRQHandler+0x150>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a31      	ldr	r2, [pc, #196]	@ (8002a30 <HAL_DMA_IRQHandler+0x204>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d102      	bne.n	8002976 <HAL_DMA_IRQHandler+0x14a>
 8002970:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002974:	e00e      	b.n	8002994 <HAL_DMA_IRQHandler+0x168>
 8002976:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800297a:	e00b      	b.n	8002994 <HAL_DMA_IRQHandler+0x168>
 800297c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002980:	e008      	b.n	8002994 <HAL_DMA_IRQHandler+0x168>
 8002982:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002986:	e005      	b.n	8002994 <HAL_DMA_IRQHandler+0x168>
 8002988:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800298c:	e002      	b.n	8002994 <HAL_DMA_IRQHandler+0x168>
 800298e:	2320      	movs	r3, #32
 8002990:	e000      	b.n	8002994 <HAL_DMA_IRQHandler+0x168>
 8002992:	2302      	movs	r3, #2
 8002994:	4a27      	ldr	r2, [pc, #156]	@ (8002a34 <HAL_DMA_IRQHandler+0x208>)
 8002996:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d034      	beq.n	8002a12 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80029b0:	e02f      	b.n	8002a12 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b6:	2208      	movs	r2, #8
 80029b8:	409a      	lsls	r2, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	4013      	ands	r3, r2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d028      	beq.n	8002a14 <HAL_DMA_IRQHandler+0x1e8>
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	f003 0308 	and.w	r3, r3, #8
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d023      	beq.n	8002a14 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f022 020e 	bic.w	r2, r2, #14
 80029da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029e4:	2101      	movs	r1, #1
 80029e6:	fa01 f202 	lsl.w	r2, r1, r2
 80029ea:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2201      	movs	r2, #1
 80029f6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d004      	beq.n	8002a14 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	4798      	blx	r3
    }
  }
  return;
 8002a12:	bf00      	nop
 8002a14:	bf00      	nop
}
 8002a16:	3710      	adds	r7, #16
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	40020008 	.word	0x40020008
 8002a20:	4002001c 	.word	0x4002001c
 8002a24:	40020030 	.word	0x40020030
 8002a28:	40020044 	.word	0x40020044
 8002a2c:	40020058 	.word	0x40020058
 8002a30:	4002006c 	.word	0x4002006c
 8002a34:	40020000 	.word	0x40020000

08002a38 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b085      	sub	sp, #20
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	60b9      	str	r1, [r7, #8]
 8002a42:	607a      	str	r2, [r7, #4]
 8002a44:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a4e:	2101      	movs	r1, #1
 8002a50:	fa01 f202 	lsl.w	r2, r1, r2
 8002a54:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	683a      	ldr	r2, [r7, #0]
 8002a5c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	2b10      	cmp	r3, #16
 8002a64:	d108      	bne.n	8002a78 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68ba      	ldr	r2, [r7, #8]
 8002a74:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002a76:	e007      	b.n	8002a88 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	68ba      	ldr	r2, [r7, #8]
 8002a7e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	60da      	str	r2, [r3, #12]
}
 8002a88:	bf00      	nop
 8002a8a:	3714      	adds	r7, #20
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bc80      	pop	{r7}
 8002a90:	4770      	bx	lr
	...

08002a94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b08b      	sub	sp, #44	@ 0x2c
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002aa6:	e169      	b.n	8002d7c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aac:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	69fa      	ldr	r2, [r7, #28]
 8002ab8:	4013      	ands	r3, r2
 8002aba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	f040 8158 	bne.w	8002d76 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	4a9a      	ldr	r2, [pc, #616]	@ (8002d34 <HAL_GPIO_Init+0x2a0>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d05e      	beq.n	8002b8e <HAL_GPIO_Init+0xfa>
 8002ad0:	4a98      	ldr	r2, [pc, #608]	@ (8002d34 <HAL_GPIO_Init+0x2a0>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d875      	bhi.n	8002bc2 <HAL_GPIO_Init+0x12e>
 8002ad6:	4a98      	ldr	r2, [pc, #608]	@ (8002d38 <HAL_GPIO_Init+0x2a4>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d058      	beq.n	8002b8e <HAL_GPIO_Init+0xfa>
 8002adc:	4a96      	ldr	r2, [pc, #600]	@ (8002d38 <HAL_GPIO_Init+0x2a4>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d86f      	bhi.n	8002bc2 <HAL_GPIO_Init+0x12e>
 8002ae2:	4a96      	ldr	r2, [pc, #600]	@ (8002d3c <HAL_GPIO_Init+0x2a8>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d052      	beq.n	8002b8e <HAL_GPIO_Init+0xfa>
 8002ae8:	4a94      	ldr	r2, [pc, #592]	@ (8002d3c <HAL_GPIO_Init+0x2a8>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d869      	bhi.n	8002bc2 <HAL_GPIO_Init+0x12e>
 8002aee:	4a94      	ldr	r2, [pc, #592]	@ (8002d40 <HAL_GPIO_Init+0x2ac>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d04c      	beq.n	8002b8e <HAL_GPIO_Init+0xfa>
 8002af4:	4a92      	ldr	r2, [pc, #584]	@ (8002d40 <HAL_GPIO_Init+0x2ac>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d863      	bhi.n	8002bc2 <HAL_GPIO_Init+0x12e>
 8002afa:	4a92      	ldr	r2, [pc, #584]	@ (8002d44 <HAL_GPIO_Init+0x2b0>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d046      	beq.n	8002b8e <HAL_GPIO_Init+0xfa>
 8002b00:	4a90      	ldr	r2, [pc, #576]	@ (8002d44 <HAL_GPIO_Init+0x2b0>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d85d      	bhi.n	8002bc2 <HAL_GPIO_Init+0x12e>
 8002b06:	2b12      	cmp	r3, #18
 8002b08:	d82a      	bhi.n	8002b60 <HAL_GPIO_Init+0xcc>
 8002b0a:	2b12      	cmp	r3, #18
 8002b0c:	d859      	bhi.n	8002bc2 <HAL_GPIO_Init+0x12e>
 8002b0e:	a201      	add	r2, pc, #4	@ (adr r2, 8002b14 <HAL_GPIO_Init+0x80>)
 8002b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b14:	08002b8f 	.word	0x08002b8f
 8002b18:	08002b69 	.word	0x08002b69
 8002b1c:	08002b7b 	.word	0x08002b7b
 8002b20:	08002bbd 	.word	0x08002bbd
 8002b24:	08002bc3 	.word	0x08002bc3
 8002b28:	08002bc3 	.word	0x08002bc3
 8002b2c:	08002bc3 	.word	0x08002bc3
 8002b30:	08002bc3 	.word	0x08002bc3
 8002b34:	08002bc3 	.word	0x08002bc3
 8002b38:	08002bc3 	.word	0x08002bc3
 8002b3c:	08002bc3 	.word	0x08002bc3
 8002b40:	08002bc3 	.word	0x08002bc3
 8002b44:	08002bc3 	.word	0x08002bc3
 8002b48:	08002bc3 	.word	0x08002bc3
 8002b4c:	08002bc3 	.word	0x08002bc3
 8002b50:	08002bc3 	.word	0x08002bc3
 8002b54:	08002bc3 	.word	0x08002bc3
 8002b58:	08002b71 	.word	0x08002b71
 8002b5c:	08002b85 	.word	0x08002b85
 8002b60:	4a79      	ldr	r2, [pc, #484]	@ (8002d48 <HAL_GPIO_Init+0x2b4>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d013      	beq.n	8002b8e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002b66:	e02c      	b.n	8002bc2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	623b      	str	r3, [r7, #32]
          break;
 8002b6e:	e029      	b.n	8002bc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	3304      	adds	r3, #4
 8002b76:	623b      	str	r3, [r7, #32]
          break;
 8002b78:	e024      	b.n	8002bc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	3308      	adds	r3, #8
 8002b80:	623b      	str	r3, [r7, #32]
          break;
 8002b82:	e01f      	b.n	8002bc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	330c      	adds	r3, #12
 8002b8a:	623b      	str	r3, [r7, #32]
          break;
 8002b8c:	e01a      	b.n	8002bc4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d102      	bne.n	8002b9c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002b96:	2304      	movs	r3, #4
 8002b98:	623b      	str	r3, [r7, #32]
          break;
 8002b9a:	e013      	b.n	8002bc4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d105      	bne.n	8002bb0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ba4:	2308      	movs	r3, #8
 8002ba6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	69fa      	ldr	r2, [r7, #28]
 8002bac:	611a      	str	r2, [r3, #16]
          break;
 8002bae:	e009      	b.n	8002bc4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002bb0:	2308      	movs	r3, #8
 8002bb2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	69fa      	ldr	r2, [r7, #28]
 8002bb8:	615a      	str	r2, [r3, #20]
          break;
 8002bba:	e003      	b.n	8002bc4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	623b      	str	r3, [r7, #32]
          break;
 8002bc0:	e000      	b.n	8002bc4 <HAL_GPIO_Init+0x130>
          break;
 8002bc2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	2bff      	cmp	r3, #255	@ 0xff
 8002bc8:	d801      	bhi.n	8002bce <HAL_GPIO_Init+0x13a>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	e001      	b.n	8002bd2 <HAL_GPIO_Init+0x13e>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	3304      	adds	r3, #4
 8002bd2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	2bff      	cmp	r3, #255	@ 0xff
 8002bd8:	d802      	bhi.n	8002be0 <HAL_GPIO_Init+0x14c>
 8002bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	e002      	b.n	8002be6 <HAL_GPIO_Init+0x152>
 8002be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be2:	3b08      	subs	r3, #8
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	210f      	movs	r1, #15
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf4:	43db      	mvns	r3, r3
 8002bf6:	401a      	ands	r2, r3
 8002bf8:	6a39      	ldr	r1, [r7, #32]
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8002c00:	431a      	orrs	r2, r3
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	f000 80b1 	beq.w	8002d76 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002c14:	4b4d      	ldr	r3, [pc, #308]	@ (8002d4c <HAL_GPIO_Init+0x2b8>)
 8002c16:	699b      	ldr	r3, [r3, #24]
 8002c18:	4a4c      	ldr	r2, [pc, #304]	@ (8002d4c <HAL_GPIO_Init+0x2b8>)
 8002c1a:	f043 0301 	orr.w	r3, r3, #1
 8002c1e:	6193      	str	r3, [r2, #24]
 8002c20:	4b4a      	ldr	r3, [pc, #296]	@ (8002d4c <HAL_GPIO_Init+0x2b8>)
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	f003 0301 	and.w	r3, r3, #1
 8002c28:	60bb      	str	r3, [r7, #8]
 8002c2a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002c2c:	4a48      	ldr	r2, [pc, #288]	@ (8002d50 <HAL_GPIO_Init+0x2bc>)
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c30:	089b      	lsrs	r3, r3, #2
 8002c32:	3302      	adds	r3, #2
 8002c34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c38:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c3c:	f003 0303 	and.w	r3, r3, #3
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	220f      	movs	r2, #15
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	43db      	mvns	r3, r3
 8002c4a:	68fa      	ldr	r2, [r7, #12]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	4a40      	ldr	r2, [pc, #256]	@ (8002d54 <HAL_GPIO_Init+0x2c0>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d013      	beq.n	8002c80 <HAL_GPIO_Init+0x1ec>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	4a3f      	ldr	r2, [pc, #252]	@ (8002d58 <HAL_GPIO_Init+0x2c4>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d00d      	beq.n	8002c7c <HAL_GPIO_Init+0x1e8>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	4a3e      	ldr	r2, [pc, #248]	@ (8002d5c <HAL_GPIO_Init+0x2c8>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d007      	beq.n	8002c78 <HAL_GPIO_Init+0x1e4>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4a3d      	ldr	r2, [pc, #244]	@ (8002d60 <HAL_GPIO_Init+0x2cc>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d101      	bne.n	8002c74 <HAL_GPIO_Init+0x1e0>
 8002c70:	2303      	movs	r3, #3
 8002c72:	e006      	b.n	8002c82 <HAL_GPIO_Init+0x1ee>
 8002c74:	2304      	movs	r3, #4
 8002c76:	e004      	b.n	8002c82 <HAL_GPIO_Init+0x1ee>
 8002c78:	2302      	movs	r3, #2
 8002c7a:	e002      	b.n	8002c82 <HAL_GPIO_Init+0x1ee>
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e000      	b.n	8002c82 <HAL_GPIO_Init+0x1ee>
 8002c80:	2300      	movs	r3, #0
 8002c82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c84:	f002 0203 	and.w	r2, r2, #3
 8002c88:	0092      	lsls	r2, r2, #2
 8002c8a:	4093      	lsls	r3, r2
 8002c8c:	68fa      	ldr	r2, [r7, #12]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002c92:	492f      	ldr	r1, [pc, #188]	@ (8002d50 <HAL_GPIO_Init+0x2bc>)
 8002c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c96:	089b      	lsrs	r3, r3, #2
 8002c98:	3302      	adds	r3, #2
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d006      	beq.n	8002cba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002cac:	4b2d      	ldr	r3, [pc, #180]	@ (8002d64 <HAL_GPIO_Init+0x2d0>)
 8002cae:	689a      	ldr	r2, [r3, #8]
 8002cb0:	492c      	ldr	r1, [pc, #176]	@ (8002d64 <HAL_GPIO_Init+0x2d0>)
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	608b      	str	r3, [r1, #8]
 8002cb8:	e006      	b.n	8002cc8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002cba:	4b2a      	ldr	r3, [pc, #168]	@ (8002d64 <HAL_GPIO_Init+0x2d0>)
 8002cbc:	689a      	ldr	r2, [r3, #8]
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	43db      	mvns	r3, r3
 8002cc2:	4928      	ldr	r1, [pc, #160]	@ (8002d64 <HAL_GPIO_Init+0x2d0>)
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d006      	beq.n	8002ce2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002cd4:	4b23      	ldr	r3, [pc, #140]	@ (8002d64 <HAL_GPIO_Init+0x2d0>)
 8002cd6:	68da      	ldr	r2, [r3, #12]
 8002cd8:	4922      	ldr	r1, [pc, #136]	@ (8002d64 <HAL_GPIO_Init+0x2d0>)
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	60cb      	str	r3, [r1, #12]
 8002ce0:	e006      	b.n	8002cf0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002ce2:	4b20      	ldr	r3, [pc, #128]	@ (8002d64 <HAL_GPIO_Init+0x2d0>)
 8002ce4:	68da      	ldr	r2, [r3, #12]
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	43db      	mvns	r3, r3
 8002cea:	491e      	ldr	r1, [pc, #120]	@ (8002d64 <HAL_GPIO_Init+0x2d0>)
 8002cec:	4013      	ands	r3, r2
 8002cee:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d006      	beq.n	8002d0a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002cfc:	4b19      	ldr	r3, [pc, #100]	@ (8002d64 <HAL_GPIO_Init+0x2d0>)
 8002cfe:	685a      	ldr	r2, [r3, #4]
 8002d00:	4918      	ldr	r1, [pc, #96]	@ (8002d64 <HAL_GPIO_Init+0x2d0>)
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	604b      	str	r3, [r1, #4]
 8002d08:	e006      	b.n	8002d18 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002d0a:	4b16      	ldr	r3, [pc, #88]	@ (8002d64 <HAL_GPIO_Init+0x2d0>)
 8002d0c:	685a      	ldr	r2, [r3, #4]
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	43db      	mvns	r3, r3
 8002d12:	4914      	ldr	r1, [pc, #80]	@ (8002d64 <HAL_GPIO_Init+0x2d0>)
 8002d14:	4013      	ands	r3, r2
 8002d16:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d021      	beq.n	8002d68 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002d24:	4b0f      	ldr	r3, [pc, #60]	@ (8002d64 <HAL_GPIO_Init+0x2d0>)
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	490e      	ldr	r1, [pc, #56]	@ (8002d64 <HAL_GPIO_Init+0x2d0>)
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	600b      	str	r3, [r1, #0]
 8002d30:	e021      	b.n	8002d76 <HAL_GPIO_Init+0x2e2>
 8002d32:	bf00      	nop
 8002d34:	10320000 	.word	0x10320000
 8002d38:	10310000 	.word	0x10310000
 8002d3c:	10220000 	.word	0x10220000
 8002d40:	10210000 	.word	0x10210000
 8002d44:	10120000 	.word	0x10120000
 8002d48:	10110000 	.word	0x10110000
 8002d4c:	40021000 	.word	0x40021000
 8002d50:	40010000 	.word	0x40010000
 8002d54:	40010800 	.word	0x40010800
 8002d58:	40010c00 	.word	0x40010c00
 8002d5c:	40011000 	.word	0x40011000
 8002d60:	40011400 	.word	0x40011400
 8002d64:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002d68:	4b0b      	ldr	r3, [pc, #44]	@ (8002d98 <HAL_GPIO_Init+0x304>)
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	43db      	mvns	r3, r3
 8002d70:	4909      	ldr	r1, [pc, #36]	@ (8002d98 <HAL_GPIO_Init+0x304>)
 8002d72:	4013      	ands	r3, r2
 8002d74:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d78:	3301      	adds	r3, #1
 8002d7a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d82:	fa22 f303 	lsr.w	r3, r2, r3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	f47f ae8e 	bne.w	8002aa8 <HAL_GPIO_Init+0x14>
  }
}
 8002d8c:	bf00      	nop
 8002d8e:	bf00      	nop
 8002d90:	372c      	adds	r7, #44	@ 0x2c
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bc80      	pop	{r7}
 8002d96:	4770      	bx	lr
 8002d98:	40010400 	.word	0x40010400

08002d9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	460b      	mov	r3, r1
 8002da6:	807b      	strh	r3, [r7, #2]
 8002da8:	4613      	mov	r3, r2
 8002daa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002dac:	787b      	ldrb	r3, [r7, #1]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d003      	beq.n	8002dba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002db2:	887a      	ldrh	r2, [r7, #2]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002db8:	e003      	b.n	8002dc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002dba:	887b      	ldrh	r3, [r7, #2]
 8002dbc:	041a      	lsls	r2, r3, #16
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	611a      	str	r2, [r3, #16]
}
 8002dc2:	bf00      	nop
 8002dc4:	370c      	adds	r7, #12
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bc80      	pop	{r7}
 8002dca:	4770      	bx	lr

08002dcc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002dd6:	4b08      	ldr	r3, [pc, #32]	@ (8002df8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002dd8:	695a      	ldr	r2, [r3, #20]
 8002dda:	88fb      	ldrh	r3, [r7, #6]
 8002ddc:	4013      	ands	r3, r2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d006      	beq.n	8002df0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002de2:	4a05      	ldr	r2, [pc, #20]	@ (8002df8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002de4:	88fb      	ldrh	r3, [r7, #6]
 8002de6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002de8:	88fb      	ldrh	r3, [r7, #6]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7fe fc30 	bl	8001650 <HAL_GPIO_EXTI_Callback>
  }
}
 8002df0:	bf00      	nop
 8002df2:	3708      	adds	r7, #8
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	40010400 	.word	0x40010400

08002dfc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d101      	bne.n	8002e0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e12b      	b.n	8003066 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d106      	bne.n	8002e28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f7fe fbc4 	bl	80015b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2224      	movs	r2, #36	@ 0x24
 8002e2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f022 0201 	bic.w	r2, r2, #1
 8002e3e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002e5e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e60:	f001 f832 	bl	8003ec8 <HAL_RCC_GetPCLK1Freq>
 8002e64:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	4a81      	ldr	r2, [pc, #516]	@ (8003070 <HAL_I2C_Init+0x274>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d807      	bhi.n	8002e80 <HAL_I2C_Init+0x84>
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	4a80      	ldr	r2, [pc, #512]	@ (8003074 <HAL_I2C_Init+0x278>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	bf94      	ite	ls
 8002e78:	2301      	movls	r3, #1
 8002e7a:	2300      	movhi	r3, #0
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	e006      	b.n	8002e8e <HAL_I2C_Init+0x92>
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	4a7d      	ldr	r2, [pc, #500]	@ (8003078 <HAL_I2C_Init+0x27c>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	bf94      	ite	ls
 8002e88:	2301      	movls	r3, #1
 8002e8a:	2300      	movhi	r3, #0
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e0e7      	b.n	8003066 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	4a78      	ldr	r2, [pc, #480]	@ (800307c <HAL_I2C_Init+0x280>)
 8002e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e9e:	0c9b      	lsrs	r3, r3, #18
 8002ea0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	68ba      	ldr	r2, [r7, #8]
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	6a1b      	ldr	r3, [r3, #32]
 8002ebc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	4a6a      	ldr	r2, [pc, #424]	@ (8003070 <HAL_I2C_Init+0x274>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d802      	bhi.n	8002ed0 <HAL_I2C_Init+0xd4>
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	3301      	adds	r3, #1
 8002ece:	e009      	b.n	8002ee4 <HAL_I2C_Init+0xe8>
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002ed6:	fb02 f303 	mul.w	r3, r2, r3
 8002eda:	4a69      	ldr	r2, [pc, #420]	@ (8003080 <HAL_I2C_Init+0x284>)
 8002edc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee0:	099b      	lsrs	r3, r3, #6
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	6812      	ldr	r2, [r2, #0]
 8002ee8:	430b      	orrs	r3, r1
 8002eea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	69db      	ldr	r3, [r3, #28]
 8002ef2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002ef6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	495c      	ldr	r1, [pc, #368]	@ (8003070 <HAL_I2C_Init+0x274>)
 8002f00:	428b      	cmp	r3, r1
 8002f02:	d819      	bhi.n	8002f38 <HAL_I2C_Init+0x13c>
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	1e59      	subs	r1, r3, #1
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f12:	1c59      	adds	r1, r3, #1
 8002f14:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002f18:	400b      	ands	r3, r1
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00a      	beq.n	8002f34 <HAL_I2C_Init+0x138>
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	1e59      	subs	r1, r3, #1
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	005b      	lsls	r3, r3, #1
 8002f28:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f32:	e051      	b.n	8002fd8 <HAL_I2C_Init+0x1dc>
 8002f34:	2304      	movs	r3, #4
 8002f36:	e04f      	b.n	8002fd8 <HAL_I2C_Init+0x1dc>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d111      	bne.n	8002f64 <HAL_I2C_Init+0x168>
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	1e58      	subs	r0, r3, #1
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6859      	ldr	r1, [r3, #4]
 8002f48:	460b      	mov	r3, r1
 8002f4a:	005b      	lsls	r3, r3, #1
 8002f4c:	440b      	add	r3, r1
 8002f4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f52:	3301      	adds	r3, #1
 8002f54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	bf0c      	ite	eq
 8002f5c:	2301      	moveq	r3, #1
 8002f5e:	2300      	movne	r3, #0
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	e012      	b.n	8002f8a <HAL_I2C_Init+0x18e>
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	1e58      	subs	r0, r3, #1
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6859      	ldr	r1, [r3, #4]
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	440b      	add	r3, r1
 8002f72:	0099      	lsls	r1, r3, #2
 8002f74:	440b      	add	r3, r1
 8002f76:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	bf0c      	ite	eq
 8002f84:	2301      	moveq	r3, #1
 8002f86:	2300      	movne	r3, #0
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <HAL_I2C_Init+0x196>
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e022      	b.n	8002fd8 <HAL_I2C_Init+0x1dc>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10e      	bne.n	8002fb8 <HAL_I2C_Init+0x1bc>
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	1e58      	subs	r0, r3, #1
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6859      	ldr	r1, [r3, #4]
 8002fa2:	460b      	mov	r3, r1
 8002fa4:	005b      	lsls	r3, r3, #1
 8002fa6:	440b      	add	r3, r1
 8002fa8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fac:	3301      	adds	r3, #1
 8002fae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002fb6:	e00f      	b.n	8002fd8 <HAL_I2C_Init+0x1dc>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	1e58      	subs	r0, r3, #1
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6859      	ldr	r1, [r3, #4]
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	440b      	add	r3, r1
 8002fc6:	0099      	lsls	r1, r3, #2
 8002fc8:	440b      	add	r3, r1
 8002fca:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fce:	3301      	adds	r3, #1
 8002fd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fd4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002fd8:	6879      	ldr	r1, [r7, #4]
 8002fda:	6809      	ldr	r1, [r1, #0]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	69da      	ldr	r2, [r3, #28]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a1b      	ldr	r3, [r3, #32]
 8002ff2:	431a      	orrs	r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003006:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	6911      	ldr	r1, [r2, #16]
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	68d2      	ldr	r2, [r2, #12]
 8003012:	4311      	orrs	r1, r2
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	6812      	ldr	r2, [r2, #0]
 8003018:	430b      	orrs	r3, r1
 800301a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	695a      	ldr	r2, [r3, #20]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	431a      	orrs	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	430a      	orrs	r2, r1
 8003036:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f042 0201 	orr.w	r2, r2, #1
 8003046:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2220      	movs	r2, #32
 8003052:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3710      	adds	r7, #16
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	000186a0 	.word	0x000186a0
 8003074:	001e847f 	.word	0x001e847f
 8003078:	003d08ff 	.word	0x003d08ff
 800307c:	431bde83 	.word	0x431bde83
 8003080:	10624dd3 	.word	0x10624dd3

08003084 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b088      	sub	sp, #32
 8003088:	af02      	add	r7, sp, #8
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	607a      	str	r2, [r7, #4]
 800308e:	461a      	mov	r2, r3
 8003090:	460b      	mov	r3, r1
 8003092:	817b      	strh	r3, [r7, #10]
 8003094:	4613      	mov	r3, r2
 8003096:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003098:	f7ff f942 	bl	8002320 <HAL_GetTick>
 800309c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b20      	cmp	r3, #32
 80030a8:	f040 80e0 	bne.w	800326c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	9300      	str	r3, [sp, #0]
 80030b0:	2319      	movs	r3, #25
 80030b2:	2201      	movs	r2, #1
 80030b4:	4970      	ldr	r1, [pc, #448]	@ (8003278 <HAL_I2C_Master_Transmit+0x1f4>)
 80030b6:	68f8      	ldr	r0, [r7, #12]
 80030b8:	f000 f964 	bl	8003384 <I2C_WaitOnFlagUntilTimeout>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d001      	beq.n	80030c6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80030c2:	2302      	movs	r3, #2
 80030c4:	e0d3      	b.n	800326e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d101      	bne.n	80030d4 <HAL_I2C_Master_Transmit+0x50>
 80030d0:	2302      	movs	r3, #2
 80030d2:	e0cc      	b.n	800326e <HAL_I2C_Master_Transmit+0x1ea>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d007      	beq.n	80030fa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f042 0201 	orr.w	r2, r2, #1
 80030f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003108:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2221      	movs	r2, #33	@ 0x21
 800310e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2210      	movs	r2, #16
 8003116:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2200      	movs	r2, #0
 800311e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	893a      	ldrh	r2, [r7, #8]
 800312a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003130:	b29a      	uxth	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	4a50      	ldr	r2, [pc, #320]	@ (800327c <HAL_I2C_Master_Transmit+0x1f8>)
 800313a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800313c:	8979      	ldrh	r1, [r7, #10]
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	6a3a      	ldr	r2, [r7, #32]
 8003142:	68f8      	ldr	r0, [r7, #12]
 8003144:	f000 f89c 	bl	8003280 <I2C_MasterRequestWrite>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d001      	beq.n	8003152 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e08d      	b.n	800326e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003152:	2300      	movs	r3, #0
 8003154:	613b      	str	r3, [r7, #16]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	695b      	ldr	r3, [r3, #20]
 800315c:	613b      	str	r3, [r7, #16]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	613b      	str	r3, [r7, #16]
 8003166:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003168:	e066      	b.n	8003238 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800316a:	697a      	ldr	r2, [r7, #20]
 800316c:	6a39      	ldr	r1, [r7, #32]
 800316e:	68f8      	ldr	r0, [r7, #12]
 8003170:	f000 fa22 	bl	80035b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00d      	beq.n	8003196 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800317e:	2b04      	cmp	r3, #4
 8003180:	d107      	bne.n	8003192 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003190:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e06b      	b.n	800326e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800319a:	781a      	ldrb	r2, [r3, #0]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a6:	1c5a      	adds	r2, r3, #1
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	3b01      	subs	r3, #1
 80031b4:	b29a      	uxth	r2, r3
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031be:	3b01      	subs	r3, #1
 80031c0:	b29a      	uxth	r2, r3
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	695b      	ldr	r3, [r3, #20]
 80031cc:	f003 0304 	and.w	r3, r3, #4
 80031d0:	2b04      	cmp	r3, #4
 80031d2:	d11b      	bne.n	800320c <HAL_I2C_Master_Transmit+0x188>
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d017      	beq.n	800320c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e0:	781a      	ldrb	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ec:	1c5a      	adds	r2, r3, #1
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	3b01      	subs	r3, #1
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003204:	3b01      	subs	r3, #1
 8003206:	b29a      	uxth	r2, r3
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800320c:	697a      	ldr	r2, [r7, #20]
 800320e:	6a39      	ldr	r1, [r7, #32]
 8003210:	68f8      	ldr	r0, [r7, #12]
 8003212:	f000 fa19 	bl	8003648 <I2C_WaitOnBTFFlagUntilTimeout>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d00d      	beq.n	8003238 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003220:	2b04      	cmp	r3, #4
 8003222:	d107      	bne.n	8003234 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003232:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e01a      	b.n	800326e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800323c:	2b00      	cmp	r3, #0
 800323e:	d194      	bne.n	800316a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800324e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2220      	movs	r2, #32
 8003254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003268:	2300      	movs	r3, #0
 800326a:	e000      	b.n	800326e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800326c:	2302      	movs	r3, #2
  }
}
 800326e:	4618      	mov	r0, r3
 8003270:	3718      	adds	r7, #24
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	00100002 	.word	0x00100002
 800327c:	ffff0000 	.word	0xffff0000

08003280 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b088      	sub	sp, #32
 8003284:	af02      	add	r7, sp, #8
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	607a      	str	r2, [r7, #4]
 800328a:	603b      	str	r3, [r7, #0]
 800328c:	460b      	mov	r3, r1
 800328e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003294:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	2b08      	cmp	r3, #8
 800329a:	d006      	beq.n	80032aa <I2C_MasterRequestWrite+0x2a>
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d003      	beq.n	80032aa <I2C_MasterRequestWrite+0x2a>
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80032a8:	d108      	bne.n	80032bc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032b8:	601a      	str	r2, [r3, #0]
 80032ba:	e00b      	b.n	80032d4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c0:	2b12      	cmp	r3, #18
 80032c2:	d107      	bne.n	80032d4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032d2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	9300      	str	r3, [sp, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80032e0:	68f8      	ldr	r0, [r7, #12]
 80032e2:	f000 f84f 	bl	8003384 <I2C_WaitOnFlagUntilTimeout>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d00d      	beq.n	8003308 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032fa:	d103      	bne.n	8003304 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003302:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e035      	b.n	8003374 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	691b      	ldr	r3, [r3, #16]
 800330c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003310:	d108      	bne.n	8003324 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003312:	897b      	ldrh	r3, [r7, #10]
 8003314:	b2db      	uxtb	r3, r3
 8003316:	461a      	mov	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003320:	611a      	str	r2, [r3, #16]
 8003322:	e01b      	b.n	800335c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003324:	897b      	ldrh	r3, [r7, #10]
 8003326:	11db      	asrs	r3, r3, #7
 8003328:	b2db      	uxtb	r3, r3
 800332a:	f003 0306 	and.w	r3, r3, #6
 800332e:	b2db      	uxtb	r3, r3
 8003330:	f063 030f 	orn	r3, r3, #15
 8003334:	b2da      	uxtb	r2, r3
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	490e      	ldr	r1, [pc, #56]	@ (800337c <I2C_MasterRequestWrite+0xfc>)
 8003342:	68f8      	ldr	r0, [r7, #12]
 8003344:	f000 f898 	bl	8003478 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e010      	b.n	8003374 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003352:	897b      	ldrh	r3, [r7, #10]
 8003354:	b2da      	uxtb	r2, r3
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	4907      	ldr	r1, [pc, #28]	@ (8003380 <I2C_MasterRequestWrite+0x100>)
 8003362:	68f8      	ldr	r0, [r7, #12]
 8003364:	f000 f888 	bl	8003478 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d001      	beq.n	8003372 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e000      	b.n	8003374 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003372:	2300      	movs	r3, #0
}
 8003374:	4618      	mov	r0, r3
 8003376:	3718      	adds	r7, #24
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	00010008 	.word	0x00010008
 8003380:	00010002 	.word	0x00010002

08003384 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	603b      	str	r3, [r7, #0]
 8003390:	4613      	mov	r3, r2
 8003392:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003394:	e048      	b.n	8003428 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800339c:	d044      	beq.n	8003428 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800339e:	f7fe ffbf 	bl	8002320 <HAL_GetTick>
 80033a2:	4602      	mov	r2, r0
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	683a      	ldr	r2, [r7, #0]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d302      	bcc.n	80033b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d139      	bne.n	8003428 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	0c1b      	lsrs	r3, r3, #16
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d10d      	bne.n	80033da <I2C_WaitOnFlagUntilTimeout+0x56>
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	695b      	ldr	r3, [r3, #20]
 80033c4:	43da      	mvns	r2, r3
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	4013      	ands	r3, r2
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	bf0c      	ite	eq
 80033d0:	2301      	moveq	r3, #1
 80033d2:	2300      	movne	r3, #0
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	461a      	mov	r2, r3
 80033d8:	e00c      	b.n	80033f4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	43da      	mvns	r2, r3
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	4013      	ands	r3, r2
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	bf0c      	ite	eq
 80033ec:	2301      	moveq	r3, #1
 80033ee:	2300      	movne	r3, #0
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	461a      	mov	r2, r3
 80033f4:	79fb      	ldrb	r3, [r7, #7]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d116      	bne.n	8003428 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2200      	movs	r2, #0
 80033fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2220      	movs	r2, #32
 8003404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2200      	movs	r2, #0
 800340c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003414:	f043 0220 	orr.w	r2, r3, #32
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e023      	b.n	8003470 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	0c1b      	lsrs	r3, r3, #16
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b01      	cmp	r3, #1
 8003430:	d10d      	bne.n	800344e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	695b      	ldr	r3, [r3, #20]
 8003438:	43da      	mvns	r2, r3
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	4013      	ands	r3, r2
 800343e:	b29b      	uxth	r3, r3
 8003440:	2b00      	cmp	r3, #0
 8003442:	bf0c      	ite	eq
 8003444:	2301      	moveq	r3, #1
 8003446:	2300      	movne	r3, #0
 8003448:	b2db      	uxtb	r3, r3
 800344a:	461a      	mov	r2, r3
 800344c:	e00c      	b.n	8003468 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	699b      	ldr	r3, [r3, #24]
 8003454:	43da      	mvns	r2, r3
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	4013      	ands	r3, r2
 800345a:	b29b      	uxth	r3, r3
 800345c:	2b00      	cmp	r3, #0
 800345e:	bf0c      	ite	eq
 8003460:	2301      	moveq	r3, #1
 8003462:	2300      	movne	r3, #0
 8003464:	b2db      	uxtb	r3, r3
 8003466:	461a      	mov	r2, r3
 8003468:	79fb      	ldrb	r3, [r7, #7]
 800346a:	429a      	cmp	r2, r3
 800346c:	d093      	beq.n	8003396 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	3710      	adds	r7, #16
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]
 8003484:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003486:	e071      	b.n	800356c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	695b      	ldr	r3, [r3, #20]
 800348e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003492:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003496:	d123      	bne.n	80034e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034a6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80034b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2200      	movs	r2, #0
 80034b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2220      	movs	r2, #32
 80034bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034cc:	f043 0204 	orr.w	r2, r3, #4
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e067      	b.n	80035b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e6:	d041      	beq.n	800356c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034e8:	f7fe ff1a 	bl	8002320 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d302      	bcc.n	80034fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d136      	bne.n	800356c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	0c1b      	lsrs	r3, r3, #16
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2b01      	cmp	r3, #1
 8003506:	d10c      	bne.n	8003522 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	43da      	mvns	r2, r3
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	4013      	ands	r3, r2
 8003514:	b29b      	uxth	r3, r3
 8003516:	2b00      	cmp	r3, #0
 8003518:	bf14      	ite	ne
 800351a:	2301      	movne	r3, #1
 800351c:	2300      	moveq	r3, #0
 800351e:	b2db      	uxtb	r3, r3
 8003520:	e00b      	b.n	800353a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	699b      	ldr	r3, [r3, #24]
 8003528:	43da      	mvns	r2, r3
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	4013      	ands	r3, r2
 800352e:	b29b      	uxth	r3, r3
 8003530:	2b00      	cmp	r3, #0
 8003532:	bf14      	ite	ne
 8003534:	2301      	movne	r3, #1
 8003536:	2300      	moveq	r3, #0
 8003538:	b2db      	uxtb	r3, r3
 800353a:	2b00      	cmp	r3, #0
 800353c:	d016      	beq.n	800356c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2200      	movs	r2, #0
 8003542:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2220      	movs	r2, #32
 8003548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003558:	f043 0220 	orr.w	r2, r3, #32
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e021      	b.n	80035b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	0c1b      	lsrs	r3, r3, #16
 8003570:	b2db      	uxtb	r3, r3
 8003572:	2b01      	cmp	r3, #1
 8003574:	d10c      	bne.n	8003590 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	695b      	ldr	r3, [r3, #20]
 800357c:	43da      	mvns	r2, r3
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	4013      	ands	r3, r2
 8003582:	b29b      	uxth	r3, r3
 8003584:	2b00      	cmp	r3, #0
 8003586:	bf14      	ite	ne
 8003588:	2301      	movne	r3, #1
 800358a:	2300      	moveq	r3, #0
 800358c:	b2db      	uxtb	r3, r3
 800358e:	e00b      	b.n	80035a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	43da      	mvns	r2, r3
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	4013      	ands	r3, r2
 800359c:	b29b      	uxth	r3, r3
 800359e:	2b00      	cmp	r3, #0
 80035a0:	bf14      	ite	ne
 80035a2:	2301      	movne	r3, #1
 80035a4:	2300      	moveq	r3, #0
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f47f af6d 	bne.w	8003488 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80035ae:	2300      	movs	r3, #0
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3710      	adds	r7, #16
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035c4:	e034      	b.n	8003630 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035c6:	68f8      	ldr	r0, [r7, #12]
 80035c8:	f000 f886 	bl	80036d8 <I2C_IsAcknowledgeFailed>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d001      	beq.n	80035d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e034      	b.n	8003640 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035dc:	d028      	beq.n	8003630 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035de:	f7fe fe9f 	bl	8002320 <HAL_GetTick>
 80035e2:	4602      	mov	r2, r0
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	68ba      	ldr	r2, [r7, #8]
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d302      	bcc.n	80035f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d11d      	bne.n	8003630 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035fe:	2b80      	cmp	r3, #128	@ 0x80
 8003600:	d016      	beq.n	8003630 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2220      	movs	r2, #32
 800360c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800361c:	f043 0220 	orr.w	r2, r3, #32
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e007      	b.n	8003640 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800363a:	2b80      	cmp	r3, #128	@ 0x80
 800363c:	d1c3      	bne.n	80035c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800363e:	2300      	movs	r3, #0
}
 8003640:	4618      	mov	r0, r3
 8003642:	3710      	adds	r7, #16
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003654:	e034      	b.n	80036c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003656:	68f8      	ldr	r0, [r7, #12]
 8003658:	f000 f83e 	bl	80036d8 <I2C_IsAcknowledgeFailed>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d001      	beq.n	8003666 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e034      	b.n	80036d0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800366c:	d028      	beq.n	80036c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800366e:	f7fe fe57 	bl	8002320 <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	68ba      	ldr	r2, [r7, #8]
 800367a:	429a      	cmp	r2, r3
 800367c:	d302      	bcc.n	8003684 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d11d      	bne.n	80036c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	695b      	ldr	r3, [r3, #20]
 800368a:	f003 0304 	and.w	r3, r3, #4
 800368e:	2b04      	cmp	r3, #4
 8003690:	d016      	beq.n	80036c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2200      	movs	r2, #0
 8003696:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2220      	movs	r2, #32
 800369c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ac:	f043 0220 	orr.w	r2, r3, #32
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e007      	b.n	80036d0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	695b      	ldr	r3, [r3, #20]
 80036c6:	f003 0304 	and.w	r3, r3, #4
 80036ca:	2b04      	cmp	r3, #4
 80036cc:	d1c3      	bne.n	8003656 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80036ce:	2300      	movs	r3, #0
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3710      	adds	r7, #16
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036ee:	d11b      	bne.n	8003728 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80036f8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2220      	movs	r2, #32
 8003704:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003714:	f043 0204 	orr.w	r2, r3, #4
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e000      	b.n	800372a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003728:	2300      	movs	r3, #0
}
 800372a:	4618      	mov	r0, r3
 800372c:	370c      	adds	r7, #12
 800372e:	46bd      	mov	sp, r7
 8003730:	bc80      	pop	{r7}
 8003732:	4770      	bx	lr

08003734 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b086      	sub	sp, #24
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d101      	bne.n	8003746 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e272      	b.n	8003c2c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0301 	and.w	r3, r3, #1
 800374e:	2b00      	cmp	r3, #0
 8003750:	f000 8087 	beq.w	8003862 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003754:	4b92      	ldr	r3, [pc, #584]	@ (80039a0 <HAL_RCC_OscConfig+0x26c>)
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f003 030c 	and.w	r3, r3, #12
 800375c:	2b04      	cmp	r3, #4
 800375e:	d00c      	beq.n	800377a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003760:	4b8f      	ldr	r3, [pc, #572]	@ (80039a0 <HAL_RCC_OscConfig+0x26c>)
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f003 030c 	and.w	r3, r3, #12
 8003768:	2b08      	cmp	r3, #8
 800376a:	d112      	bne.n	8003792 <HAL_RCC_OscConfig+0x5e>
 800376c:	4b8c      	ldr	r3, [pc, #560]	@ (80039a0 <HAL_RCC_OscConfig+0x26c>)
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003774:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003778:	d10b      	bne.n	8003792 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800377a:	4b89      	ldr	r3, [pc, #548]	@ (80039a0 <HAL_RCC_OscConfig+0x26c>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d06c      	beq.n	8003860 <HAL_RCC_OscConfig+0x12c>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d168      	bne.n	8003860 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e24c      	b.n	8003c2c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800379a:	d106      	bne.n	80037aa <HAL_RCC_OscConfig+0x76>
 800379c:	4b80      	ldr	r3, [pc, #512]	@ (80039a0 <HAL_RCC_OscConfig+0x26c>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a7f      	ldr	r2, [pc, #508]	@ (80039a0 <HAL_RCC_OscConfig+0x26c>)
 80037a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037a6:	6013      	str	r3, [r2, #0]
 80037a8:	e02e      	b.n	8003808 <HAL_RCC_OscConfig+0xd4>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d10c      	bne.n	80037cc <HAL_RCC_OscConfig+0x98>
 80037b2:	4b7b      	ldr	r3, [pc, #492]	@ (80039a0 <HAL_RCC_OscConfig+0x26c>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a7a      	ldr	r2, [pc, #488]	@ (80039a0 <HAL_RCC_OscConfig+0x26c>)
 80037b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037bc:	6013      	str	r3, [r2, #0]
 80037be:	4b78      	ldr	r3, [pc, #480]	@ (80039a0 <HAL_RCC_OscConfig+0x26c>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a77      	ldr	r2, [pc, #476]	@ (80039a0 <HAL_RCC_OscConfig+0x26c>)
 80037c4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037c8:	6013      	str	r3, [r2, #0]
 80037ca:	e01d      	b.n	8003808 <HAL_RCC_OscConfig+0xd4>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037d4:	d10c      	bne.n	80037f0 <HAL_RCC_OscConfig+0xbc>
 80037d6:	4b72      	ldr	r3, [pc, #456]	@ (80039a0 <HAL_RCC_OscConfig+0x26c>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a71      	ldr	r2, [pc, #452]	@ (80039a0 <HAL_RCC_OscConfig+0x26c>)
 80037dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037e0:	6013      	str	r3, [r2, #0]
 80037e2:	4b6f      	ldr	r3, [pc, #444]	@ (80039a0 <HAL_RCC_OscConfig+0x26c>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a6e      	ldr	r2, [pc, #440]	@ (80039a0 <HAL_RCC_OscConfig+0x26c>)
 80037e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037ec:	6013      	str	r3, [r2, #0]
 80037ee:	e00b      	b.n	8003808 <HAL_RCC_OscConfig+0xd4>
 80037f0:	4b6b      	ldr	r3, [pc, #428]	@ (80039a0 <HAL_RCC_OscConfig+0x26c>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a6a      	ldr	r2, [pc, #424]	@ (80039a0 <HAL_RCC_OscConfig+0x26c>)
 80037f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037fa:	6013      	str	r3, [r2, #0]
 80037fc:	4b68      	ldr	r3, [pc, #416]	@ (80039a0 <HAL_RCC_OscConfig+0x26c>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a67      	ldr	r2, [pc, #412]	@ (80039a0 <HAL_RCC_OscConfig+0x26c>)
 8003802:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003806:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d013      	beq.n	8003838 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003810:	f7fe fd86 	bl	8002320 <HAL_GetTick>
 8003814:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003816:	e008      	b.n	800382a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003818:	f7fe fd82 	bl	8002320 <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	2b64      	cmp	r3, #100	@ 0x64
 8003824:	d901      	bls.n	800382a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e200      	b.n	8003c2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800382a:	4b5d      	ldr	r3, [pc, #372]	@ (80039a0 <HAL_RCC_OscConfig+0x26c>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d0f0      	beq.n	8003818 <HAL_RCC_OscConfig+0xe4>
 8003836:	e014      	b.n	8003862 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003838:	f7fe fd72 	bl	8002320 <HAL_GetTick>
 800383c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800383e:	e008      	b.n	8003852 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003840:	f7fe fd6e 	bl	8002320 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b64      	cmp	r3, #100	@ 0x64
 800384c:	d901      	bls.n	8003852 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e1ec      	b.n	8003c2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003852:	4b53      	ldr	r3, [pc, #332]	@ (80039a0 <HAL_RCC_OscConfig+0x26c>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1f0      	bne.n	8003840 <HAL_RCC_OscConfig+0x10c>
 800385e:	e000      	b.n	8003862 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003860:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0302 	and.w	r3, r3, #2
 800386a:	2b00      	cmp	r3, #0
 800386c:	d063      	beq.n	8003936 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800386e:	4b4c      	ldr	r3, [pc, #304]	@ (80039a0 <HAL_RCC_OscConfig+0x26c>)
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f003 030c 	and.w	r3, r3, #12
 8003876:	2b00      	cmp	r3, #0
 8003878:	d00b      	beq.n	8003892 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800387a:	4b49      	ldr	r3, [pc, #292]	@ (80039a0 <HAL_RCC_OscConfig+0x26c>)
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f003 030c 	and.w	r3, r3, #12
 8003882:	2b08      	cmp	r3, #8
 8003884:	d11c      	bne.n	80038c0 <HAL_RCC_OscConfig+0x18c>
 8003886:	4b46      	ldr	r3, [pc, #280]	@ (80039a0 <HAL_RCC_OscConfig+0x26c>)
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d116      	bne.n	80038c0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003892:	4b43      	ldr	r3, [pc, #268]	@ (80039a0 <HAL_RCC_OscConfig+0x26c>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	2b00      	cmp	r3, #0
 800389c:	d005      	beq.n	80038aa <HAL_RCC_OscConfig+0x176>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d001      	beq.n	80038aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e1c0      	b.n	8003c2c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038aa:	4b3d      	ldr	r3, [pc, #244]	@ (80039a0 <HAL_RCC_OscConfig+0x26c>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	695b      	ldr	r3, [r3, #20]
 80038b6:	00db      	lsls	r3, r3, #3
 80038b8:	4939      	ldr	r1, [pc, #228]	@ (80039a0 <HAL_RCC_OscConfig+0x26c>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038be:	e03a      	b.n	8003936 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	691b      	ldr	r3, [r3, #16]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d020      	beq.n	800390a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038c8:	4b36      	ldr	r3, [pc, #216]	@ (80039a4 <HAL_RCC_OscConfig+0x270>)
 80038ca:	2201      	movs	r2, #1
 80038cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ce:	f7fe fd27 	bl	8002320 <HAL_GetTick>
 80038d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038d4:	e008      	b.n	80038e8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038d6:	f7fe fd23 	bl	8002320 <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d901      	bls.n	80038e8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e1a1      	b.n	8003c2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038e8:	4b2d      	ldr	r3, [pc, #180]	@ (80039a0 <HAL_RCC_OscConfig+0x26c>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0302 	and.w	r3, r3, #2
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d0f0      	beq.n	80038d6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038f4:	4b2a      	ldr	r3, [pc, #168]	@ (80039a0 <HAL_RCC_OscConfig+0x26c>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	695b      	ldr	r3, [r3, #20]
 8003900:	00db      	lsls	r3, r3, #3
 8003902:	4927      	ldr	r1, [pc, #156]	@ (80039a0 <HAL_RCC_OscConfig+0x26c>)
 8003904:	4313      	orrs	r3, r2
 8003906:	600b      	str	r3, [r1, #0]
 8003908:	e015      	b.n	8003936 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800390a:	4b26      	ldr	r3, [pc, #152]	@ (80039a4 <HAL_RCC_OscConfig+0x270>)
 800390c:	2200      	movs	r2, #0
 800390e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003910:	f7fe fd06 	bl	8002320 <HAL_GetTick>
 8003914:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003916:	e008      	b.n	800392a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003918:	f7fe fd02 	bl	8002320 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	2b02      	cmp	r3, #2
 8003924:	d901      	bls.n	800392a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e180      	b.n	8003c2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800392a:	4b1d      	ldr	r3, [pc, #116]	@ (80039a0 <HAL_RCC_OscConfig+0x26c>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0302 	and.w	r3, r3, #2
 8003932:	2b00      	cmp	r3, #0
 8003934:	d1f0      	bne.n	8003918 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0308 	and.w	r3, r3, #8
 800393e:	2b00      	cmp	r3, #0
 8003940:	d03a      	beq.n	80039b8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d019      	beq.n	800397e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800394a:	4b17      	ldr	r3, [pc, #92]	@ (80039a8 <HAL_RCC_OscConfig+0x274>)
 800394c:	2201      	movs	r2, #1
 800394e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003950:	f7fe fce6 	bl	8002320 <HAL_GetTick>
 8003954:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003956:	e008      	b.n	800396a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003958:	f7fe fce2 	bl	8002320 <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	2b02      	cmp	r3, #2
 8003964:	d901      	bls.n	800396a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e160      	b.n	8003c2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800396a:	4b0d      	ldr	r3, [pc, #52]	@ (80039a0 <HAL_RCC_OscConfig+0x26c>)
 800396c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800396e:	f003 0302 	and.w	r3, r3, #2
 8003972:	2b00      	cmp	r3, #0
 8003974:	d0f0      	beq.n	8003958 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003976:	2001      	movs	r0, #1
 8003978:	f000 face 	bl	8003f18 <RCC_Delay>
 800397c:	e01c      	b.n	80039b8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800397e:	4b0a      	ldr	r3, [pc, #40]	@ (80039a8 <HAL_RCC_OscConfig+0x274>)
 8003980:	2200      	movs	r2, #0
 8003982:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003984:	f7fe fccc 	bl	8002320 <HAL_GetTick>
 8003988:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800398a:	e00f      	b.n	80039ac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800398c:	f7fe fcc8 	bl	8002320 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b02      	cmp	r3, #2
 8003998:	d908      	bls.n	80039ac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e146      	b.n	8003c2c <HAL_RCC_OscConfig+0x4f8>
 800399e:	bf00      	nop
 80039a0:	40021000 	.word	0x40021000
 80039a4:	42420000 	.word	0x42420000
 80039a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039ac:	4b92      	ldr	r3, [pc, #584]	@ (8003bf8 <HAL_RCC_OscConfig+0x4c4>)
 80039ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b0:	f003 0302 	and.w	r3, r3, #2
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d1e9      	bne.n	800398c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0304 	and.w	r3, r3, #4
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	f000 80a6 	beq.w	8003b12 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039c6:	2300      	movs	r3, #0
 80039c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039ca:	4b8b      	ldr	r3, [pc, #556]	@ (8003bf8 <HAL_RCC_OscConfig+0x4c4>)
 80039cc:	69db      	ldr	r3, [r3, #28]
 80039ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d10d      	bne.n	80039f2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039d6:	4b88      	ldr	r3, [pc, #544]	@ (8003bf8 <HAL_RCC_OscConfig+0x4c4>)
 80039d8:	69db      	ldr	r3, [r3, #28]
 80039da:	4a87      	ldr	r2, [pc, #540]	@ (8003bf8 <HAL_RCC_OscConfig+0x4c4>)
 80039dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039e0:	61d3      	str	r3, [r2, #28]
 80039e2:	4b85      	ldr	r3, [pc, #532]	@ (8003bf8 <HAL_RCC_OscConfig+0x4c4>)
 80039e4:	69db      	ldr	r3, [r3, #28]
 80039e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039ea:	60bb      	str	r3, [r7, #8]
 80039ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039ee:	2301      	movs	r3, #1
 80039f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039f2:	4b82      	ldr	r3, [pc, #520]	@ (8003bfc <HAL_RCC_OscConfig+0x4c8>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d118      	bne.n	8003a30 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039fe:	4b7f      	ldr	r3, [pc, #508]	@ (8003bfc <HAL_RCC_OscConfig+0x4c8>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a7e      	ldr	r2, [pc, #504]	@ (8003bfc <HAL_RCC_OscConfig+0x4c8>)
 8003a04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a0a:	f7fe fc89 	bl	8002320 <HAL_GetTick>
 8003a0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a10:	e008      	b.n	8003a24 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a12:	f7fe fc85 	bl	8002320 <HAL_GetTick>
 8003a16:	4602      	mov	r2, r0
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	1ad3      	subs	r3, r2, r3
 8003a1c:	2b64      	cmp	r3, #100	@ 0x64
 8003a1e:	d901      	bls.n	8003a24 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	e103      	b.n	8003c2c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a24:	4b75      	ldr	r3, [pc, #468]	@ (8003bfc <HAL_RCC_OscConfig+0x4c8>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d0f0      	beq.n	8003a12 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d106      	bne.n	8003a46 <HAL_RCC_OscConfig+0x312>
 8003a38:	4b6f      	ldr	r3, [pc, #444]	@ (8003bf8 <HAL_RCC_OscConfig+0x4c4>)
 8003a3a:	6a1b      	ldr	r3, [r3, #32]
 8003a3c:	4a6e      	ldr	r2, [pc, #440]	@ (8003bf8 <HAL_RCC_OscConfig+0x4c4>)
 8003a3e:	f043 0301 	orr.w	r3, r3, #1
 8003a42:	6213      	str	r3, [r2, #32]
 8003a44:	e02d      	b.n	8003aa2 <HAL_RCC_OscConfig+0x36e>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d10c      	bne.n	8003a68 <HAL_RCC_OscConfig+0x334>
 8003a4e:	4b6a      	ldr	r3, [pc, #424]	@ (8003bf8 <HAL_RCC_OscConfig+0x4c4>)
 8003a50:	6a1b      	ldr	r3, [r3, #32]
 8003a52:	4a69      	ldr	r2, [pc, #420]	@ (8003bf8 <HAL_RCC_OscConfig+0x4c4>)
 8003a54:	f023 0301 	bic.w	r3, r3, #1
 8003a58:	6213      	str	r3, [r2, #32]
 8003a5a:	4b67      	ldr	r3, [pc, #412]	@ (8003bf8 <HAL_RCC_OscConfig+0x4c4>)
 8003a5c:	6a1b      	ldr	r3, [r3, #32]
 8003a5e:	4a66      	ldr	r2, [pc, #408]	@ (8003bf8 <HAL_RCC_OscConfig+0x4c4>)
 8003a60:	f023 0304 	bic.w	r3, r3, #4
 8003a64:	6213      	str	r3, [r2, #32]
 8003a66:	e01c      	b.n	8003aa2 <HAL_RCC_OscConfig+0x36e>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	2b05      	cmp	r3, #5
 8003a6e:	d10c      	bne.n	8003a8a <HAL_RCC_OscConfig+0x356>
 8003a70:	4b61      	ldr	r3, [pc, #388]	@ (8003bf8 <HAL_RCC_OscConfig+0x4c4>)
 8003a72:	6a1b      	ldr	r3, [r3, #32]
 8003a74:	4a60      	ldr	r2, [pc, #384]	@ (8003bf8 <HAL_RCC_OscConfig+0x4c4>)
 8003a76:	f043 0304 	orr.w	r3, r3, #4
 8003a7a:	6213      	str	r3, [r2, #32]
 8003a7c:	4b5e      	ldr	r3, [pc, #376]	@ (8003bf8 <HAL_RCC_OscConfig+0x4c4>)
 8003a7e:	6a1b      	ldr	r3, [r3, #32]
 8003a80:	4a5d      	ldr	r2, [pc, #372]	@ (8003bf8 <HAL_RCC_OscConfig+0x4c4>)
 8003a82:	f043 0301 	orr.w	r3, r3, #1
 8003a86:	6213      	str	r3, [r2, #32]
 8003a88:	e00b      	b.n	8003aa2 <HAL_RCC_OscConfig+0x36e>
 8003a8a:	4b5b      	ldr	r3, [pc, #364]	@ (8003bf8 <HAL_RCC_OscConfig+0x4c4>)
 8003a8c:	6a1b      	ldr	r3, [r3, #32]
 8003a8e:	4a5a      	ldr	r2, [pc, #360]	@ (8003bf8 <HAL_RCC_OscConfig+0x4c4>)
 8003a90:	f023 0301 	bic.w	r3, r3, #1
 8003a94:	6213      	str	r3, [r2, #32]
 8003a96:	4b58      	ldr	r3, [pc, #352]	@ (8003bf8 <HAL_RCC_OscConfig+0x4c4>)
 8003a98:	6a1b      	ldr	r3, [r3, #32]
 8003a9a:	4a57      	ldr	r2, [pc, #348]	@ (8003bf8 <HAL_RCC_OscConfig+0x4c4>)
 8003a9c:	f023 0304 	bic.w	r3, r3, #4
 8003aa0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d015      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aaa:	f7fe fc39 	bl	8002320 <HAL_GetTick>
 8003aae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ab0:	e00a      	b.n	8003ac8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ab2:	f7fe fc35 	bl	8002320 <HAL_GetTick>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d901      	bls.n	8003ac8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e0b1      	b.n	8003c2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ac8:	4b4b      	ldr	r3, [pc, #300]	@ (8003bf8 <HAL_RCC_OscConfig+0x4c4>)
 8003aca:	6a1b      	ldr	r3, [r3, #32]
 8003acc:	f003 0302 	and.w	r3, r3, #2
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d0ee      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x37e>
 8003ad4:	e014      	b.n	8003b00 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ad6:	f7fe fc23 	bl	8002320 <HAL_GetTick>
 8003ada:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003adc:	e00a      	b.n	8003af4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ade:	f7fe fc1f 	bl	8002320 <HAL_GetTick>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d901      	bls.n	8003af4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003af0:	2303      	movs	r3, #3
 8003af2:	e09b      	b.n	8003c2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003af4:	4b40      	ldr	r3, [pc, #256]	@ (8003bf8 <HAL_RCC_OscConfig+0x4c4>)
 8003af6:	6a1b      	ldr	r3, [r3, #32]
 8003af8:	f003 0302 	and.w	r3, r3, #2
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d1ee      	bne.n	8003ade <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003b00:	7dfb      	ldrb	r3, [r7, #23]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d105      	bne.n	8003b12 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b06:	4b3c      	ldr	r3, [pc, #240]	@ (8003bf8 <HAL_RCC_OscConfig+0x4c4>)
 8003b08:	69db      	ldr	r3, [r3, #28]
 8003b0a:	4a3b      	ldr	r2, [pc, #236]	@ (8003bf8 <HAL_RCC_OscConfig+0x4c4>)
 8003b0c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b10:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	69db      	ldr	r3, [r3, #28]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	f000 8087 	beq.w	8003c2a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b1c:	4b36      	ldr	r3, [pc, #216]	@ (8003bf8 <HAL_RCC_OscConfig+0x4c4>)
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	f003 030c 	and.w	r3, r3, #12
 8003b24:	2b08      	cmp	r3, #8
 8003b26:	d061      	beq.n	8003bec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	69db      	ldr	r3, [r3, #28]
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d146      	bne.n	8003bbe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b30:	4b33      	ldr	r3, [pc, #204]	@ (8003c00 <HAL_RCC_OscConfig+0x4cc>)
 8003b32:	2200      	movs	r2, #0
 8003b34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b36:	f7fe fbf3 	bl	8002320 <HAL_GetTick>
 8003b3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b3c:	e008      	b.n	8003b50 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b3e:	f7fe fbef 	bl	8002320 <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d901      	bls.n	8003b50 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e06d      	b.n	8003c2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b50:	4b29      	ldr	r3, [pc, #164]	@ (8003bf8 <HAL_RCC_OscConfig+0x4c4>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d1f0      	bne.n	8003b3e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a1b      	ldr	r3, [r3, #32]
 8003b60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b64:	d108      	bne.n	8003b78 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003b66:	4b24      	ldr	r3, [pc, #144]	@ (8003bf8 <HAL_RCC_OscConfig+0x4c4>)
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	4921      	ldr	r1, [pc, #132]	@ (8003bf8 <HAL_RCC_OscConfig+0x4c4>)
 8003b74:	4313      	orrs	r3, r2
 8003b76:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b78:	4b1f      	ldr	r3, [pc, #124]	@ (8003bf8 <HAL_RCC_OscConfig+0x4c4>)
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6a19      	ldr	r1, [r3, #32]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b88:	430b      	orrs	r3, r1
 8003b8a:	491b      	ldr	r1, [pc, #108]	@ (8003bf8 <HAL_RCC_OscConfig+0x4c4>)
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b90:	4b1b      	ldr	r3, [pc, #108]	@ (8003c00 <HAL_RCC_OscConfig+0x4cc>)
 8003b92:	2201      	movs	r2, #1
 8003b94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b96:	f7fe fbc3 	bl	8002320 <HAL_GetTick>
 8003b9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b9c:	e008      	b.n	8003bb0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b9e:	f7fe fbbf 	bl	8002320 <HAL_GetTick>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d901      	bls.n	8003bb0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003bac:	2303      	movs	r3, #3
 8003bae:	e03d      	b.n	8003c2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003bb0:	4b11      	ldr	r3, [pc, #68]	@ (8003bf8 <HAL_RCC_OscConfig+0x4c4>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d0f0      	beq.n	8003b9e <HAL_RCC_OscConfig+0x46a>
 8003bbc:	e035      	b.n	8003c2a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bbe:	4b10      	ldr	r3, [pc, #64]	@ (8003c00 <HAL_RCC_OscConfig+0x4cc>)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bc4:	f7fe fbac 	bl	8002320 <HAL_GetTick>
 8003bc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bca:	e008      	b.n	8003bde <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bcc:	f7fe fba8 	bl	8002320 <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d901      	bls.n	8003bde <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e026      	b.n	8003c2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bde:	4b06      	ldr	r3, [pc, #24]	@ (8003bf8 <HAL_RCC_OscConfig+0x4c4>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d1f0      	bne.n	8003bcc <HAL_RCC_OscConfig+0x498>
 8003bea:	e01e      	b.n	8003c2a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	69db      	ldr	r3, [r3, #28]
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d107      	bne.n	8003c04 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e019      	b.n	8003c2c <HAL_RCC_OscConfig+0x4f8>
 8003bf8:	40021000 	.word	0x40021000
 8003bfc:	40007000 	.word	0x40007000
 8003c00:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c04:	4b0b      	ldr	r3, [pc, #44]	@ (8003c34 <HAL_RCC_OscConfig+0x500>)
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a1b      	ldr	r3, [r3, #32]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d106      	bne.n	8003c26 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d001      	beq.n	8003c2a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e000      	b.n	8003c2c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003c2a:	2300      	movs	r3, #0
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3718      	adds	r7, #24
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	40021000 	.word	0x40021000

08003c38 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b084      	sub	sp, #16
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d101      	bne.n	8003c4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e0d0      	b.n	8003dee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c4c:	4b6a      	ldr	r3, [pc, #424]	@ (8003df8 <HAL_RCC_ClockConfig+0x1c0>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0307 	and.w	r3, r3, #7
 8003c54:	683a      	ldr	r2, [r7, #0]
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d910      	bls.n	8003c7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c5a:	4b67      	ldr	r3, [pc, #412]	@ (8003df8 <HAL_RCC_ClockConfig+0x1c0>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f023 0207 	bic.w	r2, r3, #7
 8003c62:	4965      	ldr	r1, [pc, #404]	@ (8003df8 <HAL_RCC_ClockConfig+0x1c0>)
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c6a:	4b63      	ldr	r3, [pc, #396]	@ (8003df8 <HAL_RCC_ClockConfig+0x1c0>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0307 	and.w	r3, r3, #7
 8003c72:	683a      	ldr	r2, [r7, #0]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d001      	beq.n	8003c7c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e0b8      	b.n	8003dee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0302 	and.w	r3, r3, #2
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d020      	beq.n	8003cca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0304 	and.w	r3, r3, #4
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d005      	beq.n	8003ca0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c94:	4b59      	ldr	r3, [pc, #356]	@ (8003dfc <HAL_RCC_ClockConfig+0x1c4>)
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	4a58      	ldr	r2, [pc, #352]	@ (8003dfc <HAL_RCC_ClockConfig+0x1c4>)
 8003c9a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003c9e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0308 	and.w	r3, r3, #8
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d005      	beq.n	8003cb8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cac:	4b53      	ldr	r3, [pc, #332]	@ (8003dfc <HAL_RCC_ClockConfig+0x1c4>)
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	4a52      	ldr	r2, [pc, #328]	@ (8003dfc <HAL_RCC_ClockConfig+0x1c4>)
 8003cb2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003cb6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cb8:	4b50      	ldr	r3, [pc, #320]	@ (8003dfc <HAL_RCC_ClockConfig+0x1c4>)
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	494d      	ldr	r1, [pc, #308]	@ (8003dfc <HAL_RCC_ClockConfig+0x1c4>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0301 	and.w	r3, r3, #1
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d040      	beq.n	8003d58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d107      	bne.n	8003cee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cde:	4b47      	ldr	r3, [pc, #284]	@ (8003dfc <HAL_RCC_ClockConfig+0x1c4>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d115      	bne.n	8003d16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e07f      	b.n	8003dee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d107      	bne.n	8003d06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cf6:	4b41      	ldr	r3, [pc, #260]	@ (8003dfc <HAL_RCC_ClockConfig+0x1c4>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d109      	bne.n	8003d16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e073      	b.n	8003dee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d06:	4b3d      	ldr	r3, [pc, #244]	@ (8003dfc <HAL_RCC_ClockConfig+0x1c4>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0302 	and.w	r3, r3, #2
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d101      	bne.n	8003d16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e06b      	b.n	8003dee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d16:	4b39      	ldr	r3, [pc, #228]	@ (8003dfc <HAL_RCC_ClockConfig+0x1c4>)
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	f023 0203 	bic.w	r2, r3, #3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	4936      	ldr	r1, [pc, #216]	@ (8003dfc <HAL_RCC_ClockConfig+0x1c4>)
 8003d24:	4313      	orrs	r3, r2
 8003d26:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d28:	f7fe fafa 	bl	8002320 <HAL_GetTick>
 8003d2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d2e:	e00a      	b.n	8003d46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d30:	f7fe faf6 	bl	8002320 <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d901      	bls.n	8003d46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e053      	b.n	8003dee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d46:	4b2d      	ldr	r3, [pc, #180]	@ (8003dfc <HAL_RCC_ClockConfig+0x1c4>)
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f003 020c 	and.w	r2, r3, #12
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d1eb      	bne.n	8003d30 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d58:	4b27      	ldr	r3, [pc, #156]	@ (8003df8 <HAL_RCC_ClockConfig+0x1c0>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0307 	and.w	r3, r3, #7
 8003d60:	683a      	ldr	r2, [r7, #0]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d210      	bcs.n	8003d88 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d66:	4b24      	ldr	r3, [pc, #144]	@ (8003df8 <HAL_RCC_ClockConfig+0x1c0>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f023 0207 	bic.w	r2, r3, #7
 8003d6e:	4922      	ldr	r1, [pc, #136]	@ (8003df8 <HAL_RCC_ClockConfig+0x1c0>)
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d76:	4b20      	ldr	r3, [pc, #128]	@ (8003df8 <HAL_RCC_ClockConfig+0x1c0>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0307 	and.w	r3, r3, #7
 8003d7e:	683a      	ldr	r2, [r7, #0]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d001      	beq.n	8003d88 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e032      	b.n	8003dee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0304 	and.w	r3, r3, #4
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d008      	beq.n	8003da6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d94:	4b19      	ldr	r3, [pc, #100]	@ (8003dfc <HAL_RCC_ClockConfig+0x1c4>)
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	4916      	ldr	r1, [pc, #88]	@ (8003dfc <HAL_RCC_ClockConfig+0x1c4>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0308 	and.w	r3, r3, #8
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d009      	beq.n	8003dc6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003db2:	4b12      	ldr	r3, [pc, #72]	@ (8003dfc <HAL_RCC_ClockConfig+0x1c4>)
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	691b      	ldr	r3, [r3, #16]
 8003dbe:	00db      	lsls	r3, r3, #3
 8003dc0:	490e      	ldr	r1, [pc, #56]	@ (8003dfc <HAL_RCC_ClockConfig+0x1c4>)
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003dc6:	f000 f821 	bl	8003e0c <HAL_RCC_GetSysClockFreq>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	4b0b      	ldr	r3, [pc, #44]	@ (8003dfc <HAL_RCC_ClockConfig+0x1c4>)
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	091b      	lsrs	r3, r3, #4
 8003dd2:	f003 030f 	and.w	r3, r3, #15
 8003dd6:	490a      	ldr	r1, [pc, #40]	@ (8003e00 <HAL_RCC_ClockConfig+0x1c8>)
 8003dd8:	5ccb      	ldrb	r3, [r1, r3]
 8003dda:	fa22 f303 	lsr.w	r3, r2, r3
 8003dde:	4a09      	ldr	r2, [pc, #36]	@ (8003e04 <HAL_RCC_ClockConfig+0x1cc>)
 8003de0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003de2:	4b09      	ldr	r3, [pc, #36]	@ (8003e08 <HAL_RCC_ClockConfig+0x1d0>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4618      	mov	r0, r3
 8003de8:	f7fe fa58 	bl	800229c <HAL_InitTick>

  return HAL_OK;
 8003dec:	2300      	movs	r3, #0
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3710      	adds	r7, #16
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	40022000 	.word	0x40022000
 8003dfc:	40021000 	.word	0x40021000
 8003e00:	0800a798 	.word	0x0800a798
 8003e04:	20000000 	.word	0x20000000
 8003e08:	20000004 	.word	0x20000004

08003e0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b087      	sub	sp, #28
 8003e10:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003e12:	2300      	movs	r3, #0
 8003e14:	60fb      	str	r3, [r7, #12]
 8003e16:	2300      	movs	r3, #0
 8003e18:	60bb      	str	r3, [r7, #8]
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	617b      	str	r3, [r7, #20]
 8003e1e:	2300      	movs	r3, #0
 8003e20:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003e22:	2300      	movs	r3, #0
 8003e24:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003e26:	4b1e      	ldr	r3, [pc, #120]	@ (8003ea0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f003 030c 	and.w	r3, r3, #12
 8003e32:	2b04      	cmp	r3, #4
 8003e34:	d002      	beq.n	8003e3c <HAL_RCC_GetSysClockFreq+0x30>
 8003e36:	2b08      	cmp	r3, #8
 8003e38:	d003      	beq.n	8003e42 <HAL_RCC_GetSysClockFreq+0x36>
 8003e3a:	e027      	b.n	8003e8c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e3c:	4b19      	ldr	r3, [pc, #100]	@ (8003ea4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003e3e:	613b      	str	r3, [r7, #16]
      break;
 8003e40:	e027      	b.n	8003e92 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	0c9b      	lsrs	r3, r3, #18
 8003e46:	f003 030f 	and.w	r3, r3, #15
 8003e4a:	4a17      	ldr	r2, [pc, #92]	@ (8003ea8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003e4c:	5cd3      	ldrb	r3, [r2, r3]
 8003e4e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d010      	beq.n	8003e7c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003e5a:	4b11      	ldr	r3, [pc, #68]	@ (8003ea0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	0c5b      	lsrs	r3, r3, #17
 8003e60:	f003 0301 	and.w	r3, r3, #1
 8003e64:	4a11      	ldr	r2, [pc, #68]	@ (8003eac <HAL_RCC_GetSysClockFreq+0xa0>)
 8003e66:	5cd3      	ldrb	r3, [r2, r3]
 8003e68:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a0d      	ldr	r2, [pc, #52]	@ (8003ea4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003e6e:	fb03 f202 	mul.w	r2, r3, r2
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e78:	617b      	str	r3, [r7, #20]
 8003e7a:	e004      	b.n	8003e86 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a0c      	ldr	r2, [pc, #48]	@ (8003eb0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003e80:	fb02 f303 	mul.w	r3, r2, r3
 8003e84:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	613b      	str	r3, [r7, #16]
      break;
 8003e8a:	e002      	b.n	8003e92 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e8c:	4b05      	ldr	r3, [pc, #20]	@ (8003ea4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003e8e:	613b      	str	r3, [r7, #16]
      break;
 8003e90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e92:	693b      	ldr	r3, [r7, #16]
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	371c      	adds	r7, #28
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bc80      	pop	{r7}
 8003e9c:	4770      	bx	lr
 8003e9e:	bf00      	nop
 8003ea0:	40021000 	.word	0x40021000
 8003ea4:	007a1200 	.word	0x007a1200
 8003ea8:	0800a7b0 	.word	0x0800a7b0
 8003eac:	0800a7c0 	.word	0x0800a7c0
 8003eb0:	003d0900 	.word	0x003d0900

08003eb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003eb8:	4b02      	ldr	r3, [pc, #8]	@ (8003ec4 <HAL_RCC_GetHCLKFreq+0x10>)
 8003eba:	681b      	ldr	r3, [r3, #0]
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bc80      	pop	{r7}
 8003ec2:	4770      	bx	lr
 8003ec4:	20000000 	.word	0x20000000

08003ec8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ecc:	f7ff fff2 	bl	8003eb4 <HAL_RCC_GetHCLKFreq>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	4b05      	ldr	r3, [pc, #20]	@ (8003ee8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	0a1b      	lsrs	r3, r3, #8
 8003ed8:	f003 0307 	and.w	r3, r3, #7
 8003edc:	4903      	ldr	r1, [pc, #12]	@ (8003eec <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ede:	5ccb      	ldrb	r3, [r1, r3]
 8003ee0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	40021000 	.word	0x40021000
 8003eec:	0800a7a8 	.word	0x0800a7a8

08003ef0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ef4:	f7ff ffde 	bl	8003eb4 <HAL_RCC_GetHCLKFreq>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	4b05      	ldr	r3, [pc, #20]	@ (8003f10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	0adb      	lsrs	r3, r3, #11
 8003f00:	f003 0307 	and.w	r3, r3, #7
 8003f04:	4903      	ldr	r1, [pc, #12]	@ (8003f14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f06:	5ccb      	ldrb	r3, [r1, r3]
 8003f08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	40021000 	.word	0x40021000
 8003f14:	0800a7a8 	.word	0x0800a7a8

08003f18 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b085      	sub	sp, #20
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003f20:	4b0a      	ldr	r3, [pc, #40]	@ (8003f4c <RCC_Delay+0x34>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a0a      	ldr	r2, [pc, #40]	@ (8003f50 <RCC_Delay+0x38>)
 8003f26:	fba2 2303 	umull	r2, r3, r2, r3
 8003f2a:	0a5b      	lsrs	r3, r3, #9
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	fb02 f303 	mul.w	r3, r2, r3
 8003f32:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003f34:	bf00      	nop
  }
  while (Delay --);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	1e5a      	subs	r2, r3, #1
 8003f3a:	60fa      	str	r2, [r7, #12]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d1f9      	bne.n	8003f34 <RCC_Delay+0x1c>
}
 8003f40:	bf00      	nop
 8003f42:	bf00      	nop
 8003f44:	3714      	adds	r7, #20
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bc80      	pop	{r7}
 8003f4a:	4770      	bx	lr
 8003f4c:	20000000 	.word	0x20000000
 8003f50:	10624dd3 	.word	0x10624dd3

08003f54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d101      	bne.n	8003f66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e041      	b.n	8003fea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d106      	bne.n	8003f80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f7fe f804 	bl	8001f88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2202      	movs	r2, #2
 8003f84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	3304      	adds	r3, #4
 8003f90:	4619      	mov	r1, r3
 8003f92:	4610      	mov	r0, r2
 8003f94:	f000 fd48 	bl	8004a28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3708      	adds	r7, #8
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
	...

08003ff4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b085      	sub	sp, #20
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004002:	b2db      	uxtb	r3, r3
 8004004:	2b01      	cmp	r3, #1
 8004006:	d001      	beq.n	800400c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e03a      	b.n	8004082 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2202      	movs	r2, #2
 8004010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68da      	ldr	r2, [r3, #12]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f042 0201 	orr.w	r2, r2, #1
 8004022:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a18      	ldr	r2, [pc, #96]	@ (800408c <HAL_TIM_Base_Start_IT+0x98>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d00e      	beq.n	800404c <HAL_TIM_Base_Start_IT+0x58>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004036:	d009      	beq.n	800404c <HAL_TIM_Base_Start_IT+0x58>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a14      	ldr	r2, [pc, #80]	@ (8004090 <HAL_TIM_Base_Start_IT+0x9c>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d004      	beq.n	800404c <HAL_TIM_Base_Start_IT+0x58>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a13      	ldr	r2, [pc, #76]	@ (8004094 <HAL_TIM_Base_Start_IT+0xa0>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d111      	bne.n	8004070 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f003 0307 	and.w	r3, r3, #7
 8004056:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2b06      	cmp	r3, #6
 800405c:	d010      	beq.n	8004080 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f042 0201 	orr.w	r2, r2, #1
 800406c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800406e:	e007      	b.n	8004080 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f042 0201 	orr.w	r2, r2, #1
 800407e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004080:	2300      	movs	r3, #0
}
 8004082:	4618      	mov	r0, r3
 8004084:	3714      	adds	r7, #20
 8004086:	46bd      	mov	sp, r7
 8004088:	bc80      	pop	{r7}
 800408a:	4770      	bx	lr
 800408c:	40012c00 	.word	0x40012c00
 8004090:	40000400 	.word	0x40000400
 8004094:	40000800 	.word	0x40000800

08004098 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d101      	bne.n	80040aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e041      	b.n	800412e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d106      	bne.n	80040c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 f839 	bl	8004136 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2202      	movs	r2, #2
 80040c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	3304      	adds	r3, #4
 80040d4:	4619      	mov	r1, r3
 80040d6:	4610      	mov	r0, r2
 80040d8:	f000 fca6 	bl	8004a28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800412c:	2300      	movs	r3, #0
}
 800412e:	4618      	mov	r0, r3
 8004130:	3708      	adds	r7, #8
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}

08004136 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004136:	b480      	push	{r7}
 8004138:	b083      	sub	sp, #12
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800413e:	bf00      	nop
 8004140:	370c      	adds	r7, #12
 8004142:	46bd      	mov	sp, r7
 8004144:	bc80      	pop	{r7}
 8004146:	4770      	bx	lr

08004148 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d109      	bne.n	800416c <HAL_TIM_PWM_Start+0x24>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800415e:	b2db      	uxtb	r3, r3
 8004160:	2b01      	cmp	r3, #1
 8004162:	bf14      	ite	ne
 8004164:	2301      	movne	r3, #1
 8004166:	2300      	moveq	r3, #0
 8004168:	b2db      	uxtb	r3, r3
 800416a:	e022      	b.n	80041b2 <HAL_TIM_PWM_Start+0x6a>
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	2b04      	cmp	r3, #4
 8004170:	d109      	bne.n	8004186 <HAL_TIM_PWM_Start+0x3e>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004178:	b2db      	uxtb	r3, r3
 800417a:	2b01      	cmp	r3, #1
 800417c:	bf14      	ite	ne
 800417e:	2301      	movne	r3, #1
 8004180:	2300      	moveq	r3, #0
 8004182:	b2db      	uxtb	r3, r3
 8004184:	e015      	b.n	80041b2 <HAL_TIM_PWM_Start+0x6a>
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	2b08      	cmp	r3, #8
 800418a:	d109      	bne.n	80041a0 <HAL_TIM_PWM_Start+0x58>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004192:	b2db      	uxtb	r3, r3
 8004194:	2b01      	cmp	r3, #1
 8004196:	bf14      	ite	ne
 8004198:	2301      	movne	r3, #1
 800419a:	2300      	moveq	r3, #0
 800419c:	b2db      	uxtb	r3, r3
 800419e:	e008      	b.n	80041b2 <HAL_TIM_PWM_Start+0x6a>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	bf14      	ite	ne
 80041ac:	2301      	movne	r3, #1
 80041ae:	2300      	moveq	r3, #0
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d001      	beq.n	80041ba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e05e      	b.n	8004278 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d104      	bne.n	80041ca <HAL_TIM_PWM_Start+0x82>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2202      	movs	r2, #2
 80041c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80041c8:	e013      	b.n	80041f2 <HAL_TIM_PWM_Start+0xaa>
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	2b04      	cmp	r3, #4
 80041ce:	d104      	bne.n	80041da <HAL_TIM_PWM_Start+0x92>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2202      	movs	r2, #2
 80041d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80041d8:	e00b      	b.n	80041f2 <HAL_TIM_PWM_Start+0xaa>
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	2b08      	cmp	r3, #8
 80041de:	d104      	bne.n	80041ea <HAL_TIM_PWM_Start+0xa2>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2202      	movs	r2, #2
 80041e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80041e8:	e003      	b.n	80041f2 <HAL_TIM_PWM_Start+0xaa>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2202      	movs	r2, #2
 80041ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	2201      	movs	r2, #1
 80041f8:	6839      	ldr	r1, [r7, #0]
 80041fa:	4618      	mov	r0, r3
 80041fc:	f000 fea0 	bl	8004f40 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a1e      	ldr	r2, [pc, #120]	@ (8004280 <HAL_TIM_PWM_Start+0x138>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d107      	bne.n	800421a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004218:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a18      	ldr	r2, [pc, #96]	@ (8004280 <HAL_TIM_PWM_Start+0x138>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d00e      	beq.n	8004242 <HAL_TIM_PWM_Start+0xfa>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800422c:	d009      	beq.n	8004242 <HAL_TIM_PWM_Start+0xfa>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a14      	ldr	r2, [pc, #80]	@ (8004284 <HAL_TIM_PWM_Start+0x13c>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d004      	beq.n	8004242 <HAL_TIM_PWM_Start+0xfa>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a12      	ldr	r2, [pc, #72]	@ (8004288 <HAL_TIM_PWM_Start+0x140>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d111      	bne.n	8004266 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	f003 0307 	and.w	r3, r3, #7
 800424c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2b06      	cmp	r3, #6
 8004252:	d010      	beq.n	8004276 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f042 0201 	orr.w	r2, r2, #1
 8004262:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004264:	e007      	b.n	8004276 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f042 0201 	orr.w	r2, r2, #1
 8004274:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004276:	2300      	movs	r3, #0
}
 8004278:	4618      	mov	r0, r3
 800427a:	3710      	adds	r7, #16
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}
 8004280:	40012c00 	.word	0x40012c00
 8004284:	40000400 	.word	0x40000400
 8004288:	40000800 	.word	0x40000800

0800428c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b086      	sub	sp, #24
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d101      	bne.n	80042a0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e093      	b.n	80043c8 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d106      	bne.n	80042ba <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f7fd fe2b 	bl	8001f10 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2202      	movs	r2, #2
 80042be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	6812      	ldr	r2, [r2, #0]
 80042cc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80042d0:	f023 0307 	bic.w	r3, r3, #7
 80042d4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	3304      	adds	r3, #4
 80042de:	4619      	mov	r1, r3
 80042e0:	4610      	mov	r0, r2
 80042e2:	f000 fba1 	bl	8004a28 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	699b      	ldr	r3, [r3, #24]
 80042f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	6a1b      	ldr	r3, [r3, #32]
 80042fc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	697a      	ldr	r2, [r7, #20]
 8004304:	4313      	orrs	r3, r2
 8004306:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800430e:	f023 0303 	bic.w	r3, r3, #3
 8004312:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	689a      	ldr	r2, [r3, #8]
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	699b      	ldr	r3, [r3, #24]
 800431c:	021b      	lsls	r3, r3, #8
 800431e:	4313      	orrs	r3, r2
 8004320:	693a      	ldr	r2, [r7, #16]
 8004322:	4313      	orrs	r3, r2
 8004324:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800432c:	f023 030c 	bic.w	r3, r3, #12
 8004330:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004338:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800433c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	68da      	ldr	r2, [r3, #12]
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	69db      	ldr	r3, [r3, #28]
 8004346:	021b      	lsls	r3, r3, #8
 8004348:	4313      	orrs	r3, r2
 800434a:	693a      	ldr	r2, [r7, #16]
 800434c:	4313      	orrs	r3, r2
 800434e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	691b      	ldr	r3, [r3, #16]
 8004354:	011a      	lsls	r2, r3, #4
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	6a1b      	ldr	r3, [r3, #32]
 800435a:	031b      	lsls	r3, r3, #12
 800435c:	4313      	orrs	r3, r2
 800435e:	693a      	ldr	r2, [r7, #16]
 8004360:	4313      	orrs	r3, r2
 8004362:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800436a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	685a      	ldr	r2, [r3, #4]
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	695b      	ldr	r3, [r3, #20]
 8004374:	011b      	lsls	r3, r3, #4
 8004376:	4313      	orrs	r3, r2
 8004378:	68fa      	ldr	r2, [r7, #12]
 800437a:	4313      	orrs	r3, r2
 800437c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	697a      	ldr	r2, [r7, #20]
 8004384:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	693a      	ldr	r2, [r7, #16]
 800438c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68fa      	ldr	r2, [r7, #12]
 8004394:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2201      	movs	r2, #1
 800439a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2201      	movs	r2, #1
 80043a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2201      	movs	r2, #1
 80043aa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2201      	movs	r2, #1
 80043b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2201      	movs	r2, #1
 80043ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2201      	movs	r2, #1
 80043c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3718      	adds	r7, #24
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80043e0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80043e8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80043f0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80043f8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d110      	bne.n	8004422 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004400:	7bfb      	ldrb	r3, [r7, #15]
 8004402:	2b01      	cmp	r3, #1
 8004404:	d102      	bne.n	800440c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004406:	7b7b      	ldrb	r3, [r7, #13]
 8004408:	2b01      	cmp	r3, #1
 800440a:	d001      	beq.n	8004410 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e069      	b.n	80044e4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2202      	movs	r2, #2
 8004414:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2202      	movs	r2, #2
 800441c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004420:	e031      	b.n	8004486 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	2b04      	cmp	r3, #4
 8004426:	d110      	bne.n	800444a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004428:	7bbb      	ldrb	r3, [r7, #14]
 800442a:	2b01      	cmp	r3, #1
 800442c:	d102      	bne.n	8004434 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800442e:	7b3b      	ldrb	r3, [r7, #12]
 8004430:	2b01      	cmp	r3, #1
 8004432:	d001      	beq.n	8004438 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e055      	b.n	80044e4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2202      	movs	r2, #2
 800443c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2202      	movs	r2, #2
 8004444:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004448:	e01d      	b.n	8004486 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800444a:	7bfb      	ldrb	r3, [r7, #15]
 800444c:	2b01      	cmp	r3, #1
 800444e:	d108      	bne.n	8004462 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004450:	7bbb      	ldrb	r3, [r7, #14]
 8004452:	2b01      	cmp	r3, #1
 8004454:	d105      	bne.n	8004462 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004456:	7b7b      	ldrb	r3, [r7, #13]
 8004458:	2b01      	cmp	r3, #1
 800445a:	d102      	bne.n	8004462 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800445c:	7b3b      	ldrb	r3, [r7, #12]
 800445e:	2b01      	cmp	r3, #1
 8004460:	d001      	beq.n	8004466 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e03e      	b.n	80044e4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2202      	movs	r2, #2
 800446a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2202      	movs	r2, #2
 8004472:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2202      	movs	r2, #2
 800447a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2202      	movs	r2, #2
 8004482:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d003      	beq.n	8004494 <HAL_TIM_Encoder_Start+0xc4>
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	2b04      	cmp	r3, #4
 8004490:	d008      	beq.n	80044a4 <HAL_TIM_Encoder_Start+0xd4>
 8004492:	e00f      	b.n	80044b4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2201      	movs	r2, #1
 800449a:	2100      	movs	r1, #0
 800449c:	4618      	mov	r0, r3
 800449e:	f000 fd4f 	bl	8004f40 <TIM_CCxChannelCmd>
      break;
 80044a2:	e016      	b.n	80044d2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2201      	movs	r2, #1
 80044aa:	2104      	movs	r1, #4
 80044ac:	4618      	mov	r0, r3
 80044ae:	f000 fd47 	bl	8004f40 <TIM_CCxChannelCmd>
      break;
 80044b2:	e00e      	b.n	80044d2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2201      	movs	r2, #1
 80044ba:	2100      	movs	r1, #0
 80044bc:	4618      	mov	r0, r3
 80044be:	f000 fd3f 	bl	8004f40 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	2201      	movs	r2, #1
 80044c8:	2104      	movs	r1, #4
 80044ca:	4618      	mov	r0, r3
 80044cc:	f000 fd38 	bl	8004f40 <TIM_CCxChannelCmd>
      break;
 80044d0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f042 0201 	orr.w	r2, r2, #1
 80044e0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80044e2:	2300      	movs	r3, #0
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3710      	adds	r7, #16
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}

080044ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	f003 0302 	and.w	r3, r3, #2
 800450a:	2b00      	cmp	r3, #0
 800450c:	d020      	beq.n	8004550 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f003 0302 	and.w	r3, r3, #2
 8004514:	2b00      	cmp	r3, #0
 8004516:	d01b      	beq.n	8004550 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f06f 0202 	mvn.w	r2, #2
 8004520:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2201      	movs	r2, #1
 8004526:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	699b      	ldr	r3, [r3, #24]
 800452e:	f003 0303 	and.w	r3, r3, #3
 8004532:	2b00      	cmp	r3, #0
 8004534:	d003      	beq.n	800453e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 fa5a 	bl	80049f0 <HAL_TIM_IC_CaptureCallback>
 800453c:	e005      	b.n	800454a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 fa4d 	bl	80049de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f000 fa5c 	bl	8004a02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	f003 0304 	and.w	r3, r3, #4
 8004556:	2b00      	cmp	r3, #0
 8004558:	d020      	beq.n	800459c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	f003 0304 	and.w	r3, r3, #4
 8004560:	2b00      	cmp	r3, #0
 8004562:	d01b      	beq.n	800459c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f06f 0204 	mvn.w	r2, #4
 800456c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2202      	movs	r2, #2
 8004572:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800457e:	2b00      	cmp	r3, #0
 8004580:	d003      	beq.n	800458a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 fa34 	bl	80049f0 <HAL_TIM_IC_CaptureCallback>
 8004588:	e005      	b.n	8004596 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f000 fa27 	bl	80049de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f000 fa36 	bl	8004a02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	f003 0308 	and.w	r3, r3, #8
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d020      	beq.n	80045e8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f003 0308 	and.w	r3, r3, #8
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d01b      	beq.n	80045e8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f06f 0208 	mvn.w	r2, #8
 80045b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2204      	movs	r2, #4
 80045be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	69db      	ldr	r3, [r3, #28]
 80045c6:	f003 0303 	and.w	r3, r3, #3
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d003      	beq.n	80045d6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f000 fa0e 	bl	80049f0 <HAL_TIM_IC_CaptureCallback>
 80045d4:	e005      	b.n	80045e2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 fa01 	bl	80049de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 fa10 	bl	8004a02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	f003 0310 	and.w	r3, r3, #16
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d020      	beq.n	8004634 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f003 0310 	and.w	r3, r3, #16
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d01b      	beq.n	8004634 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f06f 0210 	mvn.w	r2, #16
 8004604:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2208      	movs	r2, #8
 800460a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	69db      	ldr	r3, [r3, #28]
 8004612:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004616:	2b00      	cmp	r3, #0
 8004618:	d003      	beq.n	8004622 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 f9e8 	bl	80049f0 <HAL_TIM_IC_CaptureCallback>
 8004620:	e005      	b.n	800462e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 f9db 	bl	80049de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f000 f9ea 	bl	8004a02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	f003 0301 	and.w	r3, r3, #1
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00c      	beq.n	8004658 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f003 0301 	and.w	r3, r3, #1
 8004644:	2b00      	cmp	r3, #0
 8004646:	d007      	beq.n	8004658 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f06f 0201 	mvn.w	r2, #1
 8004650:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f7fd f806 	bl	8001664 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00c      	beq.n	800467c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004668:	2b00      	cmp	r3, #0
 800466a:	d007      	beq.n	800467c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004674:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 fced 	bl	8005056 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004682:	2b00      	cmp	r3, #0
 8004684:	d00c      	beq.n	80046a0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800468c:	2b00      	cmp	r3, #0
 800468e:	d007      	beq.n	80046a0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004698:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 f9ba 	bl	8004a14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	f003 0320 	and.w	r3, r3, #32
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d00c      	beq.n	80046c4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	f003 0320 	and.w	r3, r3, #32
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d007      	beq.n	80046c4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f06f 0220 	mvn.w	r2, #32
 80046bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 fcc0 	bl	8005044 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046c4:	bf00      	nop
 80046c6:	3710      	adds	r7, #16
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}

080046cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b086      	sub	sp, #24
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046d8:	2300      	movs	r3, #0
 80046da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d101      	bne.n	80046ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 80046e6:	2302      	movs	r3, #2
 80046e8:	e0ae      	b.n	8004848 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2201      	movs	r2, #1
 80046ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2b0c      	cmp	r3, #12
 80046f6:	f200 809f 	bhi.w	8004838 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80046fa:	a201      	add	r2, pc, #4	@ (adr r2, 8004700 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80046fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004700:	08004735 	.word	0x08004735
 8004704:	08004839 	.word	0x08004839
 8004708:	08004839 	.word	0x08004839
 800470c:	08004839 	.word	0x08004839
 8004710:	08004775 	.word	0x08004775
 8004714:	08004839 	.word	0x08004839
 8004718:	08004839 	.word	0x08004839
 800471c:	08004839 	.word	0x08004839
 8004720:	080047b7 	.word	0x080047b7
 8004724:	08004839 	.word	0x08004839
 8004728:	08004839 	.word	0x08004839
 800472c:	08004839 	.word	0x08004839
 8004730:	080047f7 	.word	0x080047f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68b9      	ldr	r1, [r7, #8]
 800473a:	4618      	mov	r0, r3
 800473c:	f000 f9e2 	bl	8004b04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	699a      	ldr	r2, [r3, #24]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f042 0208 	orr.w	r2, r2, #8
 800474e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	699a      	ldr	r2, [r3, #24]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f022 0204 	bic.w	r2, r2, #4
 800475e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	6999      	ldr	r1, [r3, #24]
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	691a      	ldr	r2, [r3, #16]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	430a      	orrs	r2, r1
 8004770:	619a      	str	r2, [r3, #24]
      break;
 8004772:	e064      	b.n	800483e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	68b9      	ldr	r1, [r7, #8]
 800477a:	4618      	mov	r0, r3
 800477c:	f000 fa28 	bl	8004bd0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	699a      	ldr	r2, [r3, #24]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800478e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	699a      	ldr	r2, [r3, #24]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800479e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	6999      	ldr	r1, [r3, #24]
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	021a      	lsls	r2, r3, #8
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	430a      	orrs	r2, r1
 80047b2:	619a      	str	r2, [r3, #24]
      break;
 80047b4:	e043      	b.n	800483e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	68b9      	ldr	r1, [r7, #8]
 80047bc:	4618      	mov	r0, r3
 80047be:	f000 fa71 	bl	8004ca4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	69da      	ldr	r2, [r3, #28]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f042 0208 	orr.w	r2, r2, #8
 80047d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	69da      	ldr	r2, [r3, #28]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f022 0204 	bic.w	r2, r2, #4
 80047e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	69d9      	ldr	r1, [r3, #28]
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	691a      	ldr	r2, [r3, #16]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	430a      	orrs	r2, r1
 80047f2:	61da      	str	r2, [r3, #28]
      break;
 80047f4:	e023      	b.n	800483e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	68b9      	ldr	r1, [r7, #8]
 80047fc:	4618      	mov	r0, r3
 80047fe:	f000 fabb 	bl	8004d78 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	69da      	ldr	r2, [r3, #28]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004810:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	69da      	ldr	r2, [r3, #28]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004820:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	69d9      	ldr	r1, [r3, #28]
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	691b      	ldr	r3, [r3, #16]
 800482c:	021a      	lsls	r2, r3, #8
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	430a      	orrs	r2, r1
 8004834:	61da      	str	r2, [r3, #28]
      break;
 8004836:	e002      	b.n	800483e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	75fb      	strb	r3, [r7, #23]
      break;
 800483c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2200      	movs	r2, #0
 8004842:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004846:	7dfb      	ldrb	r3, [r7, #23]
}
 8004848:	4618      	mov	r0, r3
 800484a:	3718      	adds	r7, #24
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}

08004850 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800485a:	2300      	movs	r3, #0
 800485c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004864:	2b01      	cmp	r3, #1
 8004866:	d101      	bne.n	800486c <HAL_TIM_ConfigClockSource+0x1c>
 8004868:	2302      	movs	r3, #2
 800486a:	e0b4      	b.n	80049d6 <HAL_TIM_ConfigClockSource+0x186>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2202      	movs	r2, #2
 8004878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800488a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004892:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	68ba      	ldr	r2, [r7, #8]
 800489a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048a4:	d03e      	beq.n	8004924 <HAL_TIM_ConfigClockSource+0xd4>
 80048a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048aa:	f200 8087 	bhi.w	80049bc <HAL_TIM_ConfigClockSource+0x16c>
 80048ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048b2:	f000 8086 	beq.w	80049c2 <HAL_TIM_ConfigClockSource+0x172>
 80048b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048ba:	d87f      	bhi.n	80049bc <HAL_TIM_ConfigClockSource+0x16c>
 80048bc:	2b70      	cmp	r3, #112	@ 0x70
 80048be:	d01a      	beq.n	80048f6 <HAL_TIM_ConfigClockSource+0xa6>
 80048c0:	2b70      	cmp	r3, #112	@ 0x70
 80048c2:	d87b      	bhi.n	80049bc <HAL_TIM_ConfigClockSource+0x16c>
 80048c4:	2b60      	cmp	r3, #96	@ 0x60
 80048c6:	d050      	beq.n	800496a <HAL_TIM_ConfigClockSource+0x11a>
 80048c8:	2b60      	cmp	r3, #96	@ 0x60
 80048ca:	d877      	bhi.n	80049bc <HAL_TIM_ConfigClockSource+0x16c>
 80048cc:	2b50      	cmp	r3, #80	@ 0x50
 80048ce:	d03c      	beq.n	800494a <HAL_TIM_ConfigClockSource+0xfa>
 80048d0:	2b50      	cmp	r3, #80	@ 0x50
 80048d2:	d873      	bhi.n	80049bc <HAL_TIM_ConfigClockSource+0x16c>
 80048d4:	2b40      	cmp	r3, #64	@ 0x40
 80048d6:	d058      	beq.n	800498a <HAL_TIM_ConfigClockSource+0x13a>
 80048d8:	2b40      	cmp	r3, #64	@ 0x40
 80048da:	d86f      	bhi.n	80049bc <HAL_TIM_ConfigClockSource+0x16c>
 80048dc:	2b30      	cmp	r3, #48	@ 0x30
 80048de:	d064      	beq.n	80049aa <HAL_TIM_ConfigClockSource+0x15a>
 80048e0:	2b30      	cmp	r3, #48	@ 0x30
 80048e2:	d86b      	bhi.n	80049bc <HAL_TIM_ConfigClockSource+0x16c>
 80048e4:	2b20      	cmp	r3, #32
 80048e6:	d060      	beq.n	80049aa <HAL_TIM_ConfigClockSource+0x15a>
 80048e8:	2b20      	cmp	r3, #32
 80048ea:	d867      	bhi.n	80049bc <HAL_TIM_ConfigClockSource+0x16c>
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d05c      	beq.n	80049aa <HAL_TIM_ConfigClockSource+0x15a>
 80048f0:	2b10      	cmp	r3, #16
 80048f2:	d05a      	beq.n	80049aa <HAL_TIM_ConfigClockSource+0x15a>
 80048f4:	e062      	b.n	80049bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004906:	f000 fafc 	bl	8004f02 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004918:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	68ba      	ldr	r2, [r7, #8]
 8004920:	609a      	str	r2, [r3, #8]
      break;
 8004922:	e04f      	b.n	80049c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004934:	f000 fae5 	bl	8004f02 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	689a      	ldr	r2, [r3, #8]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004946:	609a      	str	r2, [r3, #8]
      break;
 8004948:	e03c      	b.n	80049c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004956:	461a      	mov	r2, r3
 8004958:	f000 fa5c 	bl	8004e14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2150      	movs	r1, #80	@ 0x50
 8004962:	4618      	mov	r0, r3
 8004964:	f000 fab3 	bl	8004ece <TIM_ITRx_SetConfig>
      break;
 8004968:	e02c      	b.n	80049c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004976:	461a      	mov	r2, r3
 8004978:	f000 fa7a 	bl	8004e70 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2160      	movs	r1, #96	@ 0x60
 8004982:	4618      	mov	r0, r3
 8004984:	f000 faa3 	bl	8004ece <TIM_ITRx_SetConfig>
      break;
 8004988:	e01c      	b.n	80049c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004996:	461a      	mov	r2, r3
 8004998:	f000 fa3c 	bl	8004e14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2140      	movs	r1, #64	@ 0x40
 80049a2:	4618      	mov	r0, r3
 80049a4:	f000 fa93 	bl	8004ece <TIM_ITRx_SetConfig>
      break;
 80049a8:	e00c      	b.n	80049c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4619      	mov	r1, r3
 80049b4:	4610      	mov	r0, r2
 80049b6:	f000 fa8a 	bl	8004ece <TIM_ITRx_SetConfig>
      break;
 80049ba:	e003      	b.n	80049c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	73fb      	strb	r3, [r7, #15]
      break;
 80049c0:	e000      	b.n	80049c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80049c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80049d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3710      	adds	r7, #16
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}

080049de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049de:	b480      	push	{r7}
 80049e0:	b083      	sub	sp, #12
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80049e6:	bf00      	nop
 80049e8:	370c      	adds	r7, #12
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bc80      	pop	{r7}
 80049ee:	4770      	bx	lr

080049f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049f8:	bf00      	nop
 80049fa:	370c      	adds	r7, #12
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bc80      	pop	{r7}
 8004a00:	4770      	bx	lr

08004a02 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a02:	b480      	push	{r7}
 8004a04:	b083      	sub	sp, #12
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a0a:	bf00      	nop
 8004a0c:	370c      	adds	r7, #12
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bc80      	pop	{r7}
 8004a12:	4770      	bx	lr

08004a14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a1c:	bf00      	nop
 8004a1e:	370c      	adds	r7, #12
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bc80      	pop	{r7}
 8004a24:	4770      	bx	lr
	...

08004a28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b085      	sub	sp, #20
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4a2f      	ldr	r2, [pc, #188]	@ (8004af8 <TIM_Base_SetConfig+0xd0>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d00b      	beq.n	8004a58 <TIM_Base_SetConfig+0x30>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a46:	d007      	beq.n	8004a58 <TIM_Base_SetConfig+0x30>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a2c      	ldr	r2, [pc, #176]	@ (8004afc <TIM_Base_SetConfig+0xd4>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d003      	beq.n	8004a58 <TIM_Base_SetConfig+0x30>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a2b      	ldr	r2, [pc, #172]	@ (8004b00 <TIM_Base_SetConfig+0xd8>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d108      	bne.n	8004a6a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	68fa      	ldr	r2, [r7, #12]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a22      	ldr	r2, [pc, #136]	@ (8004af8 <TIM_Base_SetConfig+0xd0>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d00b      	beq.n	8004a8a <TIM_Base_SetConfig+0x62>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a78:	d007      	beq.n	8004a8a <TIM_Base_SetConfig+0x62>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a1f      	ldr	r2, [pc, #124]	@ (8004afc <TIM_Base_SetConfig+0xd4>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d003      	beq.n	8004a8a <TIM_Base_SetConfig+0x62>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a1e      	ldr	r2, [pc, #120]	@ (8004b00 <TIM_Base_SetConfig+0xd8>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d108      	bne.n	8004a9c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	68fa      	ldr	r2, [r7, #12]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	695b      	ldr	r3, [r3, #20]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	68fa      	ldr	r2, [r7, #12]
 8004aae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	689a      	ldr	r2, [r3, #8]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	4a0d      	ldr	r2, [pc, #52]	@ (8004af8 <TIM_Base_SetConfig+0xd0>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d103      	bne.n	8004ad0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	691a      	ldr	r2, [r3, #16]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	691b      	ldr	r3, [r3, #16]
 8004ada:	f003 0301 	and.w	r3, r3, #1
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d005      	beq.n	8004aee <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	f023 0201 	bic.w	r2, r3, #1
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	611a      	str	r2, [r3, #16]
  }
}
 8004aee:	bf00      	nop
 8004af0:	3714      	adds	r7, #20
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bc80      	pop	{r7}
 8004af6:	4770      	bx	lr
 8004af8:	40012c00 	.word	0x40012c00
 8004afc:	40000400 	.word	0x40000400
 8004b00:	40000800 	.word	0x40000800

08004b04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b087      	sub	sp, #28
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a1b      	ldr	r3, [r3, #32]
 8004b12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6a1b      	ldr	r3, [r3, #32]
 8004b18:	f023 0201 	bic.w	r2, r3, #1
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	699b      	ldr	r3, [r3, #24]
 8004b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f023 0303 	bic.w	r3, r3, #3
 8004b3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	68fa      	ldr	r2, [r7, #12]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	f023 0302 	bic.w	r3, r3, #2
 8004b4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	697a      	ldr	r2, [r7, #20]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	4a1c      	ldr	r2, [pc, #112]	@ (8004bcc <TIM_OC1_SetConfig+0xc8>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d10c      	bne.n	8004b7a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	f023 0308 	bic.w	r3, r3, #8
 8004b66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	697a      	ldr	r2, [r7, #20]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	f023 0304 	bic.w	r3, r3, #4
 8004b78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4a13      	ldr	r2, [pc, #76]	@ (8004bcc <TIM_OC1_SetConfig+0xc8>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d111      	bne.n	8004ba6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004b90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	695b      	ldr	r3, [r3, #20]
 8004b96:	693a      	ldr	r2, [r7, #16]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	699b      	ldr	r3, [r3, #24]
 8004ba0:	693a      	ldr	r2, [r7, #16]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	693a      	ldr	r2, [r7, #16]
 8004baa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	68fa      	ldr	r2, [r7, #12]
 8004bb0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	685a      	ldr	r2, [r3, #4]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	697a      	ldr	r2, [r7, #20]
 8004bbe:	621a      	str	r2, [r3, #32]
}
 8004bc0:	bf00      	nop
 8004bc2:	371c      	adds	r7, #28
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bc80      	pop	{r7}
 8004bc8:	4770      	bx	lr
 8004bca:	bf00      	nop
 8004bcc:	40012c00 	.word	0x40012c00

08004bd0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b087      	sub	sp, #28
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a1b      	ldr	r3, [r3, #32]
 8004bde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6a1b      	ldr	r3, [r3, #32]
 8004be4:	f023 0210 	bic.w	r2, r3, #16
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	699b      	ldr	r3, [r3, #24]
 8004bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004bfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	021b      	lsls	r3, r3, #8
 8004c0e:	68fa      	ldr	r2, [r7, #12]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	f023 0320 	bic.w	r3, r3, #32
 8004c1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	011b      	lsls	r3, r3, #4
 8004c22:	697a      	ldr	r2, [r7, #20]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4a1d      	ldr	r2, [pc, #116]	@ (8004ca0 <TIM_OC2_SetConfig+0xd0>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d10d      	bne.n	8004c4c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	011b      	lsls	r3, r3, #4
 8004c3e:	697a      	ldr	r2, [r7, #20]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c4a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4a14      	ldr	r2, [pc, #80]	@ (8004ca0 <TIM_OC2_SetConfig+0xd0>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d113      	bne.n	8004c7c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004c5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004c62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	695b      	ldr	r3, [r3, #20]
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	693a      	ldr	r2, [r7, #16]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	699b      	ldr	r3, [r3, #24]
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	693a      	ldr	r2, [r7, #16]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	693a      	ldr	r2, [r7, #16]
 8004c80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	68fa      	ldr	r2, [r7, #12]
 8004c86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	685a      	ldr	r2, [r3, #4]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	697a      	ldr	r2, [r7, #20]
 8004c94:	621a      	str	r2, [r3, #32]
}
 8004c96:	bf00      	nop
 8004c98:	371c      	adds	r7, #28
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bc80      	pop	{r7}
 8004c9e:	4770      	bx	lr
 8004ca0:	40012c00 	.word	0x40012c00

08004ca4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b087      	sub	sp, #28
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a1b      	ldr	r3, [r3, #32]
 8004cb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a1b      	ldr	r3, [r3, #32]
 8004cb8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	69db      	ldr	r3, [r3, #28]
 8004cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f023 0303 	bic.w	r3, r3, #3
 8004cda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	68fa      	ldr	r2, [r7, #12]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004cec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	021b      	lsls	r3, r3, #8
 8004cf4:	697a      	ldr	r2, [r7, #20]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a1d      	ldr	r2, [pc, #116]	@ (8004d74 <TIM_OC3_SetConfig+0xd0>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d10d      	bne.n	8004d1e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004d08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	021b      	lsls	r3, r3, #8
 8004d10:	697a      	ldr	r2, [r7, #20]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004d1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a14      	ldr	r2, [pc, #80]	@ (8004d74 <TIM_OC3_SetConfig+0xd0>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d113      	bne.n	8004d4e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004d2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004d34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	695b      	ldr	r3, [r3, #20]
 8004d3a:	011b      	lsls	r3, r3, #4
 8004d3c:	693a      	ldr	r2, [r7, #16]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	699b      	ldr	r3, [r3, #24]
 8004d46:	011b      	lsls	r3, r3, #4
 8004d48:	693a      	ldr	r2, [r7, #16]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	693a      	ldr	r2, [r7, #16]
 8004d52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	685a      	ldr	r2, [r3, #4]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	697a      	ldr	r2, [r7, #20]
 8004d66:	621a      	str	r2, [r3, #32]
}
 8004d68:	bf00      	nop
 8004d6a:	371c      	adds	r7, #28
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bc80      	pop	{r7}
 8004d70:	4770      	bx	lr
 8004d72:	bf00      	nop
 8004d74:	40012c00 	.word	0x40012c00

08004d78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b087      	sub	sp, #28
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a1b      	ldr	r3, [r3, #32]
 8004d86:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6a1b      	ldr	r3, [r3, #32]
 8004d8c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	69db      	ldr	r3, [r3, #28]
 8004d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004da6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004dae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	021b      	lsls	r3, r3, #8
 8004db6:	68fa      	ldr	r2, [r7, #12]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004dc2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	031b      	lsls	r3, r3, #12
 8004dca:	693a      	ldr	r2, [r7, #16]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4a0f      	ldr	r2, [pc, #60]	@ (8004e10 <TIM_OC4_SetConfig+0x98>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d109      	bne.n	8004dec <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004dde:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	695b      	ldr	r3, [r3, #20]
 8004de4:	019b      	lsls	r3, r3, #6
 8004de6:	697a      	ldr	r2, [r7, #20]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	697a      	ldr	r2, [r7, #20]
 8004df0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	68fa      	ldr	r2, [r7, #12]
 8004df6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	685a      	ldr	r2, [r3, #4]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	693a      	ldr	r2, [r7, #16]
 8004e04:	621a      	str	r2, [r3, #32]
}
 8004e06:	bf00      	nop
 8004e08:	371c      	adds	r7, #28
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bc80      	pop	{r7}
 8004e0e:	4770      	bx	lr
 8004e10:	40012c00 	.word	0x40012c00

08004e14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b087      	sub	sp, #28
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6a1b      	ldr	r3, [r3, #32]
 8004e24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6a1b      	ldr	r3, [r3, #32]
 8004e2a:	f023 0201 	bic.w	r2, r3, #1
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	699b      	ldr	r3, [r3, #24]
 8004e36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004e3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	011b      	lsls	r3, r3, #4
 8004e44:	693a      	ldr	r2, [r7, #16]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	f023 030a 	bic.w	r3, r3, #10
 8004e50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e52:	697a      	ldr	r2, [r7, #20]
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	693a      	ldr	r2, [r7, #16]
 8004e5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	697a      	ldr	r2, [r7, #20]
 8004e64:	621a      	str	r2, [r3, #32]
}
 8004e66:	bf00      	nop
 8004e68:	371c      	adds	r7, #28
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bc80      	pop	{r7}
 8004e6e:	4770      	bx	lr

08004e70 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b087      	sub	sp, #28
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	60f8      	str	r0, [r7, #12]
 8004e78:	60b9      	str	r1, [r7, #8]
 8004e7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6a1b      	ldr	r3, [r3, #32]
 8004e80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6a1b      	ldr	r3, [r3, #32]
 8004e86:	f023 0210 	bic.w	r2, r3, #16
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	699b      	ldr	r3, [r3, #24]
 8004e92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004e9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	031b      	lsls	r3, r3, #12
 8004ea0:	693a      	ldr	r2, [r7, #16]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004eac:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	011b      	lsls	r3, r3, #4
 8004eb2:	697a      	ldr	r2, [r7, #20]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	693a      	ldr	r2, [r7, #16]
 8004ebc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	697a      	ldr	r2, [r7, #20]
 8004ec2:	621a      	str	r2, [r3, #32]
}
 8004ec4:	bf00      	nop
 8004ec6:	371c      	adds	r7, #28
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bc80      	pop	{r7}
 8004ecc:	4770      	bx	lr

08004ece <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ece:	b480      	push	{r7}
 8004ed0:	b085      	sub	sp, #20
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	6078      	str	r0, [r7, #4]
 8004ed6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ee4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ee6:	683a      	ldr	r2, [r7, #0]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	f043 0307 	orr.w	r3, r3, #7
 8004ef0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	68fa      	ldr	r2, [r7, #12]
 8004ef6:	609a      	str	r2, [r3, #8]
}
 8004ef8:	bf00      	nop
 8004efa:	3714      	adds	r7, #20
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bc80      	pop	{r7}
 8004f00:	4770      	bx	lr

08004f02 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f02:	b480      	push	{r7}
 8004f04:	b087      	sub	sp, #28
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	60f8      	str	r0, [r7, #12]
 8004f0a:	60b9      	str	r1, [r7, #8]
 8004f0c:	607a      	str	r2, [r7, #4]
 8004f0e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004f1c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	021a      	lsls	r2, r3, #8
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	431a      	orrs	r2, r3
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	697a      	ldr	r2, [r7, #20]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	697a      	ldr	r2, [r7, #20]
 8004f34:	609a      	str	r2, [r3, #8]
}
 8004f36:	bf00      	nop
 8004f38:	371c      	adds	r7, #28
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bc80      	pop	{r7}
 8004f3e:	4770      	bx	lr

08004f40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b087      	sub	sp, #28
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	f003 031f 	and.w	r3, r3, #31
 8004f52:	2201      	movs	r2, #1
 8004f54:	fa02 f303 	lsl.w	r3, r2, r3
 8004f58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6a1a      	ldr	r2, [r3, #32]
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	43db      	mvns	r3, r3
 8004f62:	401a      	ands	r2, r3
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	6a1a      	ldr	r2, [r3, #32]
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	f003 031f 	and.w	r3, r3, #31
 8004f72:	6879      	ldr	r1, [r7, #4]
 8004f74:	fa01 f303 	lsl.w	r3, r1, r3
 8004f78:	431a      	orrs	r2, r3
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	621a      	str	r2, [r3, #32]
}
 8004f7e:	bf00      	nop
 8004f80:	371c      	adds	r7, #28
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bc80      	pop	{r7}
 8004f86:	4770      	bx	lr

08004f88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b085      	sub	sp, #20
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d101      	bne.n	8004fa0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f9c:	2302      	movs	r3, #2
 8004f9e:	e046      	b.n	800502e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2202      	movs	r2, #2
 8004fac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fc6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	68fa      	ldr	r2, [r7, #12]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a16      	ldr	r2, [pc, #88]	@ (8005038 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d00e      	beq.n	8005002 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fec:	d009      	beq.n	8005002 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a12      	ldr	r2, [pc, #72]	@ (800503c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d004      	beq.n	8005002 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a10      	ldr	r2, [pc, #64]	@ (8005040 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d10c      	bne.n	800501c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005008:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	68ba      	ldr	r2, [r7, #8]
 8005010:	4313      	orrs	r3, r2
 8005012:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	68ba      	ldr	r2, [r7, #8]
 800501a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800502c:	2300      	movs	r3, #0
}
 800502e:	4618      	mov	r0, r3
 8005030:	3714      	adds	r7, #20
 8005032:	46bd      	mov	sp, r7
 8005034:	bc80      	pop	{r7}
 8005036:	4770      	bx	lr
 8005038:	40012c00 	.word	0x40012c00
 800503c:	40000400 	.word	0x40000400
 8005040:	40000800 	.word	0x40000800

08005044 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800504c:	bf00      	nop
 800504e:	370c      	adds	r7, #12
 8005050:	46bd      	mov	sp, r7
 8005052:	bc80      	pop	{r7}
 8005054:	4770      	bx	lr

08005056 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005056:	b480      	push	{r7}
 8005058:	b083      	sub	sp, #12
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800505e:	bf00      	nop
 8005060:	370c      	adds	r7, #12
 8005062:	46bd      	mov	sp, r7
 8005064:	bc80      	pop	{r7}
 8005066:	4770      	bx	lr

08005068 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d101      	bne.n	800507a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e042      	b.n	8005100 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005080:	b2db      	uxtb	r3, r3
 8005082:	2b00      	cmp	r3, #0
 8005084:	d106      	bne.n	8005094 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f7fd f810 	bl	80020b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2224      	movs	r2, #36	@ 0x24
 8005098:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	68da      	ldr	r2, [r3, #12]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80050aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f000 ff69 	bl	8005f84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	691a      	ldr	r2, [r3, #16]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80050c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	695a      	ldr	r2, [r3, #20]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80050d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	68da      	ldr	r2, [r3, #12]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80050e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2220      	movs	r2, #32
 80050ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2220      	movs	r2, #32
 80050f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80050fe:	2300      	movs	r3, #0
}
 8005100:	4618      	mov	r0, r3
 8005102:	3708      	adds	r7, #8
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}

08005108 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b08c      	sub	sp, #48	@ 0x30
 800510c:	af00      	add	r7, sp, #0
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	60b9      	str	r1, [r7, #8]
 8005112:	4613      	mov	r3, r2
 8005114:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800511c:	b2db      	uxtb	r3, r3
 800511e:	2b20      	cmp	r3, #32
 8005120:	d156      	bne.n	80051d0 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d002      	beq.n	800512e <HAL_UART_Transmit_DMA+0x26>
 8005128:	88fb      	ldrh	r3, [r7, #6]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d101      	bne.n	8005132 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e04f      	b.n	80051d2 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8005132:	68ba      	ldr	r2, [r7, #8]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	88fa      	ldrh	r2, [r7, #6]
 800513c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	88fa      	ldrh	r2, [r7, #6]
 8005142:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2200      	movs	r2, #0
 8005148:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2221      	movs	r2, #33	@ 0x21
 800514e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005156:	4a21      	ldr	r2, [pc, #132]	@ (80051dc <HAL_UART_Transmit_DMA+0xd4>)
 8005158:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800515e:	4a20      	ldr	r2, [pc, #128]	@ (80051e0 <HAL_UART_Transmit_DMA+0xd8>)
 8005160:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005166:	4a1f      	ldr	r2, [pc, #124]	@ (80051e4 <HAL_UART_Transmit_DMA+0xdc>)
 8005168:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800516e:	2200      	movs	r2, #0
 8005170:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8005172:	f107 0308 	add.w	r3, r7, #8
 8005176:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800517c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800517e:	6819      	ldr	r1, [r3, #0]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	3304      	adds	r3, #4
 8005186:	461a      	mov	r2, r3
 8005188:	88fb      	ldrh	r3, [r7, #6]
 800518a:	f7fd fa3b 	bl	8002604 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005196:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	3314      	adds	r3, #20
 800519e:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a0:	69bb      	ldr	r3, [r7, #24]
 80051a2:	e853 3f00 	ldrex	r3, [r3]
 80051a6:	617b      	str	r3, [r7, #20]
   return(result);
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	3314      	adds	r3, #20
 80051b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80051b8:	627a      	str	r2, [r7, #36]	@ 0x24
 80051ba:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051bc:	6a39      	ldr	r1, [r7, #32]
 80051be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051c0:	e841 2300 	strex	r3, r2, [r1]
 80051c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d1e5      	bne.n	8005198 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80051cc:	2300      	movs	r3, #0
 80051ce:	e000      	b.n	80051d2 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80051d0:	2302      	movs	r3, #2
  }
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3730      	adds	r7, #48	@ 0x30
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}
 80051da:	bf00      	nop
 80051dc:	0800581b 	.word	0x0800581b
 80051e0:	080058b5 	.word	0x080058b5
 80051e4:	08005a39 	.word	0x08005a39

080051e8 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b08c      	sub	sp, #48	@ 0x30
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	60f8      	str	r0, [r7, #12]
 80051f0:	60b9      	str	r1, [r7, #8]
 80051f2:	4613      	mov	r3, r2
 80051f4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	2b20      	cmp	r3, #32
 8005200:	d146      	bne.n	8005290 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d002      	beq.n	800520e <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8005208:	88fb      	ldrh	r3, [r7, #6]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d101      	bne.n	8005212 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e03f      	b.n	8005292 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2201      	movs	r2, #1
 8005216:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2200      	movs	r2, #0
 800521c:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800521e:	88fb      	ldrh	r3, [r7, #6]
 8005220:	461a      	mov	r2, r3
 8005222:	68b9      	ldr	r1, [r7, #8]
 8005224:	68f8      	ldr	r0, [r7, #12]
 8005226:	f000 fc51 	bl	8005acc <UART_Start_Receive_DMA>
 800522a:	4603      	mov	r3, r0
 800522c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005234:	2b01      	cmp	r3, #1
 8005236:	d125      	bne.n	8005284 <HAL_UARTEx_ReceiveToIdle_DMA+0x9c>
    {
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005238:	2300      	movs	r3, #0
 800523a:	613b      	str	r3, [r7, #16]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	613b      	str	r3, [r7, #16]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	613b      	str	r3, [r7, #16]
 800524c:	693b      	ldr	r3, [r7, #16]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	330c      	adds	r3, #12
 8005254:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	e853 3f00 	ldrex	r3, [r3]
 800525c:	617b      	str	r3, [r7, #20]
   return(result);
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	f043 0310 	orr.w	r3, r3, #16
 8005264:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	330c      	adds	r3, #12
 800526c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800526e:	627a      	str	r2, [r7, #36]	@ 0x24
 8005270:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005272:	6a39      	ldr	r1, [r7, #32]
 8005274:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005276:	e841 2300 	strex	r3, r2, [r1]
 800527a:	61fb      	str	r3, [r7, #28]
   return(result);
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d1e5      	bne.n	800524e <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
 8005282:	e002      	b.n	800528a <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 800528a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800528e:	e000      	b.n	8005292 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
  }
  else
  {
    return HAL_BUSY;
 8005290:	2302      	movs	r3, #2
  }
}
 8005292:	4618      	mov	r0, r3
 8005294:	3730      	adds	r7, #48	@ 0x30
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
	...

0800529c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b0ba      	sub	sp, #232	@ 0xe8
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	695b      	ldr	r3, [r3, #20]
 80052be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80052c2:	2300      	movs	r3, #0
 80052c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80052c8:	2300      	movs	r3, #0
 80052ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80052ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052d2:	f003 030f 	and.w	r3, r3, #15
 80052d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80052da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d10f      	bne.n	8005302 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80052e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052e6:	f003 0320 	and.w	r3, r3, #32
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d009      	beq.n	8005302 <HAL_UART_IRQHandler+0x66>
 80052ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052f2:	f003 0320 	and.w	r3, r3, #32
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d003      	beq.n	8005302 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 fd84 	bl	8005e08 <UART_Receive_IT>
      return;
 8005300:	e25b      	b.n	80057ba <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005302:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005306:	2b00      	cmp	r3, #0
 8005308:	f000 80de 	beq.w	80054c8 <HAL_UART_IRQHandler+0x22c>
 800530c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005310:	f003 0301 	and.w	r3, r3, #1
 8005314:	2b00      	cmp	r3, #0
 8005316:	d106      	bne.n	8005326 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005318:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800531c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005320:	2b00      	cmp	r3, #0
 8005322:	f000 80d1 	beq.w	80054c8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005326:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800532a:	f003 0301 	and.w	r3, r3, #1
 800532e:	2b00      	cmp	r3, #0
 8005330:	d00b      	beq.n	800534a <HAL_UART_IRQHandler+0xae>
 8005332:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005336:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800533a:	2b00      	cmp	r3, #0
 800533c:	d005      	beq.n	800534a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005342:	f043 0201 	orr.w	r2, r3, #1
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800534a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800534e:	f003 0304 	and.w	r3, r3, #4
 8005352:	2b00      	cmp	r3, #0
 8005354:	d00b      	beq.n	800536e <HAL_UART_IRQHandler+0xd2>
 8005356:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800535a:	f003 0301 	and.w	r3, r3, #1
 800535e:	2b00      	cmp	r3, #0
 8005360:	d005      	beq.n	800536e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005366:	f043 0202 	orr.w	r2, r3, #2
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800536e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005372:	f003 0302 	and.w	r3, r3, #2
 8005376:	2b00      	cmp	r3, #0
 8005378:	d00b      	beq.n	8005392 <HAL_UART_IRQHandler+0xf6>
 800537a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800537e:	f003 0301 	and.w	r3, r3, #1
 8005382:	2b00      	cmp	r3, #0
 8005384:	d005      	beq.n	8005392 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800538a:	f043 0204 	orr.w	r2, r3, #4
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005396:	f003 0308 	and.w	r3, r3, #8
 800539a:	2b00      	cmp	r3, #0
 800539c:	d011      	beq.n	80053c2 <HAL_UART_IRQHandler+0x126>
 800539e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053a2:	f003 0320 	and.w	r3, r3, #32
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d105      	bne.n	80053b6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80053aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053ae:	f003 0301 	and.w	r3, r3, #1
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d005      	beq.n	80053c2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053ba:	f043 0208 	orr.w	r2, r3, #8
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	f000 81f2 	beq.w	80057b0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80053cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053d0:	f003 0320 	and.w	r3, r3, #32
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d008      	beq.n	80053ea <HAL_UART_IRQHandler+0x14e>
 80053d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053dc:	f003 0320 	and.w	r3, r3, #32
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d002      	beq.n	80053ea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f000 fd0f 	bl	8005e08 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	695b      	ldr	r3, [r3, #20]
 80053f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	bf14      	ite	ne
 80053f8:	2301      	movne	r3, #1
 80053fa:	2300      	moveq	r3, #0
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005406:	f003 0308 	and.w	r3, r3, #8
 800540a:	2b00      	cmp	r3, #0
 800540c:	d103      	bne.n	8005416 <HAL_UART_IRQHandler+0x17a>
 800540e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005412:	2b00      	cmp	r3, #0
 8005414:	d04f      	beq.n	80054b6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 fc19 	bl	8005c4e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	695b      	ldr	r3, [r3, #20]
 8005422:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005426:	2b00      	cmp	r3, #0
 8005428:	d041      	beq.n	80054ae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	3314      	adds	r3, #20
 8005430:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005434:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005438:	e853 3f00 	ldrex	r3, [r3]
 800543c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005440:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005444:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005448:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	3314      	adds	r3, #20
 8005452:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005456:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800545a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800545e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005462:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005466:	e841 2300 	strex	r3, r2, [r1]
 800546a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800546e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005472:	2b00      	cmp	r3, #0
 8005474:	d1d9      	bne.n	800542a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800547a:	2b00      	cmp	r3, #0
 800547c:	d013      	beq.n	80054a6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005482:	4a7e      	ldr	r2, [pc, #504]	@ (800567c <HAL_UART_IRQHandler+0x3e0>)
 8005484:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800548a:	4618      	mov	r0, r3
 800548c:	f7fd f956 	bl	800273c <HAL_DMA_Abort_IT>
 8005490:	4603      	mov	r3, r0
 8005492:	2b00      	cmp	r3, #0
 8005494:	d016      	beq.n	80054c4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800549a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80054a0:	4610      	mov	r0, r2
 80054a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054a4:	e00e      	b.n	80054c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 f9ae 	bl	8005808 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054ac:	e00a      	b.n	80054c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f000 f9aa 	bl	8005808 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054b4:	e006      	b.n	80054c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 f9a6 	bl	8005808 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80054c2:	e175      	b.n	80057b0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054c4:	bf00      	nop
    return;
 80054c6:	e173      	b.n	80057b0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	f040 814f 	bne.w	8005770 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80054d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054d6:	f003 0310 	and.w	r3, r3, #16
 80054da:	2b00      	cmp	r3, #0
 80054dc:	f000 8148 	beq.w	8005770 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80054e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054e4:	f003 0310 	and.w	r3, r3, #16
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	f000 8141 	beq.w	8005770 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80054ee:	2300      	movs	r3, #0
 80054f0:	60bb      	str	r3, [r7, #8]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	60bb      	str	r3, [r7, #8]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	60bb      	str	r3, [r7, #8]
 8005502:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	695b      	ldr	r3, [r3, #20]
 800550a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800550e:	2b00      	cmp	r3, #0
 8005510:	f000 80b6 	beq.w	8005680 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005520:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005524:	2b00      	cmp	r3, #0
 8005526:	f000 8145 	beq.w	80057b4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800552e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005532:	429a      	cmp	r2, r3
 8005534:	f080 813e 	bcs.w	80057b4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800553e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005544:	699b      	ldr	r3, [r3, #24]
 8005546:	2b20      	cmp	r3, #32
 8005548:	f000 8088 	beq.w	800565c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	330c      	adds	r3, #12
 8005552:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005556:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800555a:	e853 3f00 	ldrex	r3, [r3]
 800555e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005562:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005566:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800556a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	330c      	adds	r3, #12
 8005574:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005578:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800557c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005580:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005584:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005588:	e841 2300 	strex	r3, r2, [r1]
 800558c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005590:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005594:	2b00      	cmp	r3, #0
 8005596:	d1d9      	bne.n	800554c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	3314      	adds	r3, #20
 800559e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80055a2:	e853 3f00 	ldrex	r3, [r3]
 80055a6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80055a8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80055aa:	f023 0301 	bic.w	r3, r3, #1
 80055ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	3314      	adds	r3, #20
 80055b8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80055bc:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80055c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80055c4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80055c8:	e841 2300 	strex	r3, r2, [r1]
 80055cc:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80055ce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d1e1      	bne.n	8005598 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	3314      	adds	r3, #20
 80055da:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055dc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80055de:	e853 3f00 	ldrex	r3, [r3]
 80055e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80055e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80055e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	3314      	adds	r3, #20
 80055f4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80055f8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80055fa:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055fc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80055fe:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005600:	e841 2300 	strex	r3, r2, [r1]
 8005604:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005606:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005608:	2b00      	cmp	r3, #0
 800560a:	d1e3      	bne.n	80055d4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2220      	movs	r2, #32
 8005610:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	330c      	adds	r3, #12
 8005620:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005622:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005624:	e853 3f00 	ldrex	r3, [r3]
 8005628:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800562a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800562c:	f023 0310 	bic.w	r3, r3, #16
 8005630:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	330c      	adds	r3, #12
 800563a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800563e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005640:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005642:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005644:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005646:	e841 2300 	strex	r3, r2, [r1]
 800564a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800564c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800564e:	2b00      	cmp	r3, #0
 8005650:	d1e3      	bne.n	800561a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005656:	4618      	mov	r0, r3
 8005658:	f7fd f834 	bl	80026c4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2202      	movs	r2, #2
 8005660:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800566a:	b29b      	uxth	r3, r3
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	b29b      	uxth	r3, r3
 8005670:	4619      	mov	r1, r3
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f7fc f842 	bl	80016fc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005678:	e09c      	b.n	80057b4 <HAL_UART_IRQHandler+0x518>
 800567a:	bf00      	nop
 800567c:	08005d13 	.word	0x08005d13
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005688:	b29b      	uxth	r3, r3
 800568a:	1ad3      	subs	r3, r2, r3
 800568c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005694:	b29b      	uxth	r3, r3
 8005696:	2b00      	cmp	r3, #0
 8005698:	f000 808e 	beq.w	80057b8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800569c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	f000 8089 	beq.w	80057b8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	330c      	adds	r3, #12
 80056ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056b0:	e853 3f00 	ldrex	r3, [r3]
 80056b4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80056b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80056bc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	330c      	adds	r3, #12
 80056c6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80056ca:	647a      	str	r2, [r7, #68]	@ 0x44
 80056cc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80056d0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80056d2:	e841 2300 	strex	r3, r2, [r1]
 80056d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80056d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d1e3      	bne.n	80056a6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	3314      	adds	r3, #20
 80056e4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e8:	e853 3f00 	ldrex	r3, [r3]
 80056ec:	623b      	str	r3, [r7, #32]
   return(result);
 80056ee:	6a3b      	ldr	r3, [r7, #32]
 80056f0:	f023 0301 	bic.w	r3, r3, #1
 80056f4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	3314      	adds	r3, #20
 80056fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005702:	633a      	str	r2, [r7, #48]	@ 0x30
 8005704:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005706:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005708:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800570a:	e841 2300 	strex	r3, r2, [r1]
 800570e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005712:	2b00      	cmp	r3, #0
 8005714:	d1e3      	bne.n	80056de <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2220      	movs	r2, #32
 800571a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	330c      	adds	r3, #12
 800572a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	e853 3f00 	ldrex	r3, [r3]
 8005732:	60fb      	str	r3, [r7, #12]
   return(result);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f023 0310 	bic.w	r3, r3, #16
 800573a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	330c      	adds	r3, #12
 8005744:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005748:	61fa      	str	r2, [r7, #28]
 800574a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800574c:	69b9      	ldr	r1, [r7, #24]
 800574e:	69fa      	ldr	r2, [r7, #28]
 8005750:	e841 2300 	strex	r3, r2, [r1]
 8005754:	617b      	str	r3, [r7, #20]
   return(result);
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d1e3      	bne.n	8005724 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2202      	movs	r2, #2
 8005760:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005762:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005766:	4619      	mov	r1, r3
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f7fb ffc7 	bl	80016fc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800576e:	e023      	b.n	80057b8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005770:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005774:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005778:	2b00      	cmp	r3, #0
 800577a:	d009      	beq.n	8005790 <HAL_UART_IRQHandler+0x4f4>
 800577c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005780:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005784:	2b00      	cmp	r3, #0
 8005786:	d003      	beq.n	8005790 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f000 fad6 	bl	8005d3a <UART_Transmit_IT>
    return;
 800578e:	e014      	b.n	80057ba <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005790:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005794:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005798:	2b00      	cmp	r3, #0
 800579a:	d00e      	beq.n	80057ba <HAL_UART_IRQHandler+0x51e>
 800579c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d008      	beq.n	80057ba <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f000 fb15 	bl	8005dd8 <UART_EndTransmit_IT>
    return;
 80057ae:	e004      	b.n	80057ba <HAL_UART_IRQHandler+0x51e>
    return;
 80057b0:	bf00      	nop
 80057b2:	e002      	b.n	80057ba <HAL_UART_IRQHandler+0x51e>
      return;
 80057b4:	bf00      	nop
 80057b6:	e000      	b.n	80057ba <HAL_UART_IRQHandler+0x51e>
      return;
 80057b8:	bf00      	nop
  }
}
 80057ba:	37e8      	adds	r7, #232	@ 0xe8
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}

080057c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b083      	sub	sp, #12
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80057c8:	bf00      	nop
 80057ca:	370c      	adds	r7, #12
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bc80      	pop	{r7}
 80057d0:	4770      	bx	lr

080057d2 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80057d2:	b480      	push	{r7}
 80057d4:	b083      	sub	sp, #12
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80057da:	bf00      	nop
 80057dc:	370c      	adds	r7, #12
 80057de:	46bd      	mov	sp, r7
 80057e0:	bc80      	pop	{r7}
 80057e2:	4770      	bx	lr

080057e4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80057ec:	bf00      	nop
 80057ee:	370c      	adds	r7, #12
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bc80      	pop	{r7}
 80057f4:	4770      	bx	lr

080057f6 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80057f6:	b480      	push	{r7}
 80057f8:	b083      	sub	sp, #12
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80057fe:	bf00      	nop
 8005800:	370c      	adds	r7, #12
 8005802:	46bd      	mov	sp, r7
 8005804:	bc80      	pop	{r7}
 8005806:	4770      	bx	lr

08005808 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005808:	b480      	push	{r7}
 800580a:	b083      	sub	sp, #12
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005810:	bf00      	nop
 8005812:	370c      	adds	r7, #12
 8005814:	46bd      	mov	sp, r7
 8005816:	bc80      	pop	{r7}
 8005818:	4770      	bx	lr

0800581a <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800581a:	b580      	push	{r7, lr}
 800581c:	b090      	sub	sp, #64	@ 0x40
 800581e:	af00      	add	r7, sp, #0
 8005820:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005826:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 0320 	and.w	r3, r3, #32
 8005832:	2b00      	cmp	r3, #0
 8005834:	d137      	bne.n	80058a6 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8005836:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005838:	2200      	movs	r2, #0
 800583a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800583c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	3314      	adds	r3, #20
 8005842:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005846:	e853 3f00 	ldrex	r3, [r3]
 800584a:	623b      	str	r3, [r7, #32]
   return(result);
 800584c:	6a3b      	ldr	r3, [r7, #32]
 800584e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005852:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005854:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	3314      	adds	r3, #20
 800585a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800585c:	633a      	str	r2, [r7, #48]	@ 0x30
 800585e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005860:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005862:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005864:	e841 2300 	strex	r3, r2, [r1]
 8005868:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800586a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800586c:	2b00      	cmp	r3, #0
 800586e:	d1e5      	bne.n	800583c <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005870:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	330c      	adds	r3, #12
 8005876:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	e853 3f00 	ldrex	r3, [r3]
 800587e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005886:	637b      	str	r3, [r7, #52]	@ 0x34
 8005888:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	330c      	adds	r3, #12
 800588e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005890:	61fa      	str	r2, [r7, #28]
 8005892:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005894:	69b9      	ldr	r1, [r7, #24]
 8005896:	69fa      	ldr	r2, [r7, #28]
 8005898:	e841 2300 	strex	r3, r2, [r1]
 800589c:	617b      	str	r3, [r7, #20]
   return(result);
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d1e5      	bne.n	8005870 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80058a4:	e002      	b.n	80058ac <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80058a6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80058a8:	f7ff ff8a 	bl	80057c0 <HAL_UART_TxCpltCallback>
}
 80058ac:	bf00      	nop
 80058ae:	3740      	adds	r7, #64	@ 0x40
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b084      	sub	sp, #16
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058c0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80058c2:	68f8      	ldr	r0, [r7, #12]
 80058c4:	f7ff ff85 	bl	80057d2 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058c8:	bf00      	nop
 80058ca:	3710      	adds	r7, #16
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b09c      	sub	sp, #112	@ 0x70
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058dc:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 0320 	and.w	r3, r3, #32
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d172      	bne.n	80059d2 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80058ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80058ee:	2200      	movs	r2, #0
 80058f0:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80058f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	330c      	adds	r3, #12
 80058f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058fc:	e853 3f00 	ldrex	r3, [r3]
 8005900:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005902:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005904:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005908:	66bb      	str	r3, [r7, #104]	@ 0x68
 800590a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	330c      	adds	r3, #12
 8005910:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005912:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005914:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005916:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005918:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800591a:	e841 2300 	strex	r3, r2, [r1]
 800591e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005920:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005922:	2b00      	cmp	r3, #0
 8005924:	d1e5      	bne.n	80058f2 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005926:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	3314      	adds	r3, #20
 800592c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800592e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005930:	e853 3f00 	ldrex	r3, [r3]
 8005934:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005936:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005938:	f023 0301 	bic.w	r3, r3, #1
 800593c:	667b      	str	r3, [r7, #100]	@ 0x64
 800593e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	3314      	adds	r3, #20
 8005944:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005946:	647a      	str	r2, [r7, #68]	@ 0x44
 8005948:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800594a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800594c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800594e:	e841 2300 	strex	r3, r2, [r1]
 8005952:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005954:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005956:	2b00      	cmp	r3, #0
 8005958:	d1e5      	bne.n	8005926 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800595a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	3314      	adds	r3, #20
 8005960:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005964:	e853 3f00 	ldrex	r3, [r3]
 8005968:	623b      	str	r3, [r7, #32]
   return(result);
 800596a:	6a3b      	ldr	r3, [r7, #32]
 800596c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005970:	663b      	str	r3, [r7, #96]	@ 0x60
 8005972:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	3314      	adds	r3, #20
 8005978:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800597a:	633a      	str	r2, [r7, #48]	@ 0x30
 800597c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800597e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005980:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005982:	e841 2300 	strex	r3, r2, [r1]
 8005986:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800598a:	2b00      	cmp	r3, #0
 800598c:	d1e5      	bne.n	800595a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800598e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005990:	2220      	movs	r2, #32
 8005992:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005996:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800599a:	2b01      	cmp	r3, #1
 800599c:	d119      	bne.n	80059d2 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800599e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	330c      	adds	r3, #12
 80059a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	e853 3f00 	ldrex	r3, [r3]
 80059ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f023 0310 	bic.w	r3, r3, #16
 80059b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80059b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	330c      	adds	r3, #12
 80059bc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80059be:	61fa      	str	r2, [r7, #28]
 80059c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c2:	69b9      	ldr	r1, [r7, #24]
 80059c4:	69fa      	ldr	r2, [r7, #28]
 80059c6:	e841 2300 	strex	r3, r2, [r1]
 80059ca:	617b      	str	r3, [r7, #20]
   return(result);
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d1e5      	bne.n	800599e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80059d4:	2200      	movs	r2, #0
 80059d6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80059da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d106      	bne.n	80059ee <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80059e2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80059e4:	4619      	mov	r1, r3
 80059e6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80059e8:	f7fb fe88 	bl	80016fc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80059ec:	e002      	b.n	80059f4 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80059ee:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80059f0:	f7ff fef8 	bl	80057e4 <HAL_UART_RxCpltCallback>
}
 80059f4:	bf00      	nop
 80059f6:	3770      	adds	r7, #112	@ 0x70
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}

080059fc <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b084      	sub	sp, #16
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a08:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d108      	bne.n	8005a2a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005a1c:	085b      	lsrs	r3, r3, #1
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	4619      	mov	r1, r3
 8005a22:	68f8      	ldr	r0, [r7, #12]
 8005a24:	f7fb fe6a 	bl	80016fc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005a28:	e002      	b.n	8005a30 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005a2a:	68f8      	ldr	r0, [r7, #12]
 8005a2c:	f7ff fee3 	bl	80057f6 <HAL_UART_RxHalfCpltCallback>
}
 8005a30:	bf00      	nop
 8005a32:	3710      	adds	r7, #16
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}

08005a38 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b084      	sub	sp, #16
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005a40:	2300      	movs	r3, #0
 8005a42:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a48:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	695b      	ldr	r3, [r3, #20]
 8005a50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	bf14      	ite	ne
 8005a58:	2301      	movne	r3, #1
 8005a5a:	2300      	moveq	r3, #0
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a66:	b2db      	uxtb	r3, r3
 8005a68:	2b21      	cmp	r3, #33	@ 0x21
 8005a6a:	d108      	bne.n	8005a7e <UART_DMAError+0x46>
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d005      	beq.n	8005a7e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	2200      	movs	r2, #0
 8005a76:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8005a78:	68b8      	ldr	r0, [r7, #8]
 8005a7a:	f000 f8c1 	bl	8005c00 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	695b      	ldr	r3, [r3, #20]
 8005a84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	bf14      	ite	ne
 8005a8c:	2301      	movne	r3, #1
 8005a8e:	2300      	moveq	r3, #0
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	2b22      	cmp	r3, #34	@ 0x22
 8005a9e:	d108      	bne.n	8005ab2 <UART_DMAError+0x7a>
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d005      	beq.n	8005ab2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8005aac:	68b8      	ldr	r0, [r7, #8]
 8005aae:	f000 f8ce 	bl	8005c4e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ab6:	f043 0210 	orr.w	r2, r3, #16
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005abe:	68b8      	ldr	r0, [r7, #8]
 8005ac0:	f7ff fea2 	bl	8005808 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ac4:	bf00      	nop
 8005ac6:	3710      	adds	r7, #16
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}

08005acc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b098      	sub	sp, #96	@ 0x60
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	60b9      	str	r1, [r7, #8]
 8005ad6:	4613      	mov	r3, r2
 8005ad8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005ada:	68ba      	ldr	r2, [r7, #8]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	88fa      	ldrh	r2, [r7, #6]
 8005ae4:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2222      	movs	r2, #34	@ 0x22
 8005af0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005af8:	4a3e      	ldr	r2, [pc, #248]	@ (8005bf4 <UART_Start_Receive_DMA+0x128>)
 8005afa:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b00:	4a3d      	ldr	r2, [pc, #244]	@ (8005bf8 <UART_Start_Receive_DMA+0x12c>)
 8005b02:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b08:	4a3c      	ldr	r2, [pc, #240]	@ (8005bfc <UART_Start_Receive_DMA+0x130>)
 8005b0a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b10:	2200      	movs	r2, #0
 8005b12:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005b14:	f107 0308 	add.w	r3, r7, #8
 8005b18:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	3304      	adds	r3, #4
 8005b24:	4619      	mov	r1, r3
 8005b26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	88fb      	ldrh	r3, [r7, #6]
 8005b2c:	f7fc fd6a 	bl	8002604 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005b30:	2300      	movs	r3, #0
 8005b32:	613b      	str	r3, [r7, #16]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	613b      	str	r3, [r7, #16]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	613b      	str	r3, [r7, #16]
 8005b44:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	691b      	ldr	r3, [r3, #16]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d019      	beq.n	8005b82 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	330c      	adds	r3, #12
 8005b54:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b58:	e853 3f00 	ldrex	r3, [r3]
 8005b5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005b5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b64:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	330c      	adds	r3, #12
 8005b6c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005b6e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005b70:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b72:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005b74:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005b76:	e841 2300 	strex	r3, r2, [r1]
 8005b7a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005b7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d1e5      	bne.n	8005b4e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	3314      	adds	r3, #20
 8005b88:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b8c:	e853 3f00 	ldrex	r3, [r3]
 8005b90:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005b92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b94:	f043 0301 	orr.w	r3, r3, #1
 8005b98:	657b      	str	r3, [r7, #84]	@ 0x54
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	3314      	adds	r3, #20
 8005ba0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005ba2:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005ba4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ba6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005ba8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005baa:	e841 2300 	strex	r3, r2, [r1]
 8005bae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d1e5      	bne.n	8005b82 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	3314      	adds	r3, #20
 8005bbc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bbe:	69bb      	ldr	r3, [r7, #24]
 8005bc0:	e853 3f00 	ldrex	r3, [r3]
 8005bc4:	617b      	str	r3, [r7, #20]
   return(result);
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005bcc:	653b      	str	r3, [r7, #80]	@ 0x50
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	3314      	adds	r3, #20
 8005bd4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005bd6:	627a      	str	r2, [r7, #36]	@ 0x24
 8005bd8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bda:	6a39      	ldr	r1, [r7, #32]
 8005bdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bde:	e841 2300 	strex	r3, r2, [r1]
 8005be2:	61fb      	str	r3, [r7, #28]
   return(result);
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d1e5      	bne.n	8005bb6 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8005bea:	2300      	movs	r3, #0
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3760      	adds	r7, #96	@ 0x60
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}
 8005bf4:	080058d1 	.word	0x080058d1
 8005bf8:	080059fd 	.word	0x080059fd
 8005bfc:	08005a39 	.word	0x08005a39

08005c00 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b089      	sub	sp, #36	@ 0x24
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	330c      	adds	r3, #12
 8005c0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	e853 3f00 	ldrex	r3, [r3]
 8005c16:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005c1e:	61fb      	str	r3, [r7, #28]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	330c      	adds	r3, #12
 8005c26:	69fa      	ldr	r2, [r7, #28]
 8005c28:	61ba      	str	r2, [r7, #24]
 8005c2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c2c:	6979      	ldr	r1, [r7, #20]
 8005c2e:	69ba      	ldr	r2, [r7, #24]
 8005c30:	e841 2300 	strex	r3, r2, [r1]
 8005c34:	613b      	str	r3, [r7, #16]
   return(result);
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d1e5      	bne.n	8005c08 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2220      	movs	r2, #32
 8005c40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8005c44:	bf00      	nop
 8005c46:	3724      	adds	r7, #36	@ 0x24
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bc80      	pop	{r7}
 8005c4c:	4770      	bx	lr

08005c4e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c4e:	b480      	push	{r7}
 8005c50:	b095      	sub	sp, #84	@ 0x54
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	330c      	adds	r3, #12
 8005c5c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c60:	e853 3f00 	ldrex	r3, [r3]
 8005c64:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c68:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	330c      	adds	r3, #12
 8005c74:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005c76:	643a      	str	r2, [r7, #64]	@ 0x40
 8005c78:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c7a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005c7c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005c7e:	e841 2300 	strex	r3, r2, [r1]
 8005c82:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005c84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d1e5      	bne.n	8005c56 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	3314      	adds	r3, #20
 8005c90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c92:	6a3b      	ldr	r3, [r7, #32]
 8005c94:	e853 3f00 	ldrex	r3, [r3]
 8005c98:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c9a:	69fb      	ldr	r3, [r7, #28]
 8005c9c:	f023 0301 	bic.w	r3, r3, #1
 8005ca0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	3314      	adds	r3, #20
 8005ca8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005caa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005cac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005cb0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005cb2:	e841 2300 	strex	r3, r2, [r1]
 8005cb6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d1e5      	bne.n	8005c8a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d119      	bne.n	8005cfa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	330c      	adds	r3, #12
 8005ccc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	e853 3f00 	ldrex	r3, [r3]
 8005cd4:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	f023 0310 	bic.w	r3, r3, #16
 8005cdc:	647b      	str	r3, [r7, #68]	@ 0x44
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	330c      	adds	r3, #12
 8005ce4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ce6:	61ba      	str	r2, [r7, #24]
 8005ce8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cea:	6979      	ldr	r1, [r7, #20]
 8005cec:	69ba      	ldr	r2, [r7, #24]
 8005cee:	e841 2300 	strex	r3, r2, [r1]
 8005cf2:	613b      	str	r3, [r7, #16]
   return(result);
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d1e5      	bne.n	8005cc6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2220      	movs	r2, #32
 8005cfe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2200      	movs	r2, #0
 8005d06:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005d08:	bf00      	nop
 8005d0a:	3754      	adds	r7, #84	@ 0x54
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bc80      	pop	{r7}
 8005d10:	4770      	bx	lr

08005d12 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d12:	b580      	push	{r7, lr}
 8005d14:	b084      	sub	sp, #16
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d1e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2200      	movs	r2, #0
 8005d24:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d2c:	68f8      	ldr	r0, [r7, #12]
 8005d2e:	f7ff fd6b 	bl	8005808 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d32:	bf00      	nop
 8005d34:	3710      	adds	r7, #16
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}

08005d3a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005d3a:	b480      	push	{r7}
 8005d3c:	b085      	sub	sp, #20
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	2b21      	cmp	r3, #33	@ 0x21
 8005d4c:	d13e      	bne.n	8005dcc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d56:	d114      	bne.n	8005d82 <UART_Transmit_IT+0x48>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	691b      	ldr	r3, [r3, #16]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d110      	bne.n	8005d82 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6a1b      	ldr	r3, [r3, #32]
 8005d64:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	881b      	ldrh	r3, [r3, #0]
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d74:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a1b      	ldr	r3, [r3, #32]
 8005d7a:	1c9a      	adds	r2, r3, #2
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	621a      	str	r2, [r3, #32]
 8005d80:	e008      	b.n	8005d94 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6a1b      	ldr	r3, [r3, #32]
 8005d86:	1c59      	adds	r1, r3, #1
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	6211      	str	r1, [r2, #32]
 8005d8c:	781a      	ldrb	r2, [r3, #0]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	3b01      	subs	r3, #1
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	4619      	mov	r1, r3
 8005da2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d10f      	bne.n	8005dc8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	68da      	ldr	r2, [r3, #12]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005db6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	68da      	ldr	r2, [r3, #12]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005dc6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	e000      	b.n	8005dce <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005dcc:	2302      	movs	r3, #2
  }
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3714      	adds	r7, #20
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bc80      	pop	{r7}
 8005dd6:	4770      	bx	lr

08005dd8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b082      	sub	sp, #8
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	68da      	ldr	r2, [r3, #12]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005dee:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2220      	movs	r2, #32
 8005df4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f7ff fce1 	bl	80057c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005dfe:	2300      	movs	r3, #0
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3708      	adds	r7, #8
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b08c      	sub	sp, #48	@ 0x30
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	2b22      	cmp	r3, #34	@ 0x22
 8005e1a:	f040 80ae 	bne.w	8005f7a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e26:	d117      	bne.n	8005e58 <UART_Receive_IT+0x50>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	691b      	ldr	r3, [r3, #16]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d113      	bne.n	8005e58 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005e30:	2300      	movs	r3, #0
 8005e32:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e38:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e46:	b29a      	uxth	r2, r3
 8005e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e4a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e50:	1c9a      	adds	r2, r3, #2
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	629a      	str	r2, [r3, #40]	@ 0x28
 8005e56:	e026      	b.n	8005ea6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e6a:	d007      	beq.n	8005e7c <UART_Receive_IT+0x74>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d10a      	bne.n	8005e8a <UART_Receive_IT+0x82>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	691b      	ldr	r3, [r3, #16]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d106      	bne.n	8005e8a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	b2da      	uxtb	r2, r3
 8005e84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e86:	701a      	strb	r2, [r3, #0]
 8005e88:	e008      	b.n	8005e9c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e96:	b2da      	uxtb	r2, r3
 8005e98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e9a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ea0:	1c5a      	adds	r2, r3, #1
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	3b01      	subs	r3, #1
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	687a      	ldr	r2, [r7, #4]
 8005eb2:	4619      	mov	r1, r3
 8005eb4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d15d      	bne.n	8005f76 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	68da      	ldr	r2, [r3, #12]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f022 0220 	bic.w	r2, r2, #32
 8005ec8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	68da      	ldr	r2, [r3, #12]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005ed8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	695a      	ldr	r2, [r3, #20]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f022 0201 	bic.w	r2, r2, #1
 8005ee8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2220      	movs	r2, #32
 8005eee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d135      	bne.n	8005f6c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2200      	movs	r2, #0
 8005f04:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	330c      	adds	r3, #12
 8005f0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	e853 3f00 	ldrex	r3, [r3]
 8005f14:	613b      	str	r3, [r7, #16]
   return(result);
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	f023 0310 	bic.w	r3, r3, #16
 8005f1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	330c      	adds	r3, #12
 8005f24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f26:	623a      	str	r2, [r7, #32]
 8005f28:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f2a:	69f9      	ldr	r1, [r7, #28]
 8005f2c:	6a3a      	ldr	r2, [r7, #32]
 8005f2e:	e841 2300 	strex	r3, r2, [r1]
 8005f32:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f34:	69bb      	ldr	r3, [r7, #24]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d1e5      	bne.n	8005f06 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f003 0310 	and.w	r3, r3, #16
 8005f44:	2b10      	cmp	r3, #16
 8005f46:	d10a      	bne.n	8005f5e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f48:	2300      	movs	r3, #0
 8005f4a:	60fb      	str	r3, [r7, #12]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	60fb      	str	r3, [r7, #12]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	60fb      	str	r3, [r7, #12]
 8005f5c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005f62:	4619      	mov	r1, r3
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f7fb fbc9 	bl	80016fc <HAL_UARTEx_RxEventCallback>
 8005f6a:	e002      	b.n	8005f72 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f7ff fc39 	bl	80057e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005f72:	2300      	movs	r3, #0
 8005f74:	e002      	b.n	8005f7c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005f76:	2300      	movs	r3, #0
 8005f78:	e000      	b.n	8005f7c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005f7a:	2302      	movs	r3, #2
  }
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3730      	adds	r7, #48	@ 0x30
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}

08005f84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b084      	sub	sp, #16
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	691b      	ldr	r3, [r3, #16]
 8005f92:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	68da      	ldr	r2, [r3, #12]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	430a      	orrs	r2, r1
 8005fa0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	689a      	ldr	r2, [r3, #8]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	691b      	ldr	r3, [r3, #16]
 8005faa:	431a      	orrs	r2, r3
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	695b      	ldr	r3, [r3, #20]
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005fbe:	f023 030c 	bic.w	r3, r3, #12
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	6812      	ldr	r2, [r2, #0]
 8005fc6:	68b9      	ldr	r1, [r7, #8]
 8005fc8:	430b      	orrs	r3, r1
 8005fca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	695b      	ldr	r3, [r3, #20]
 8005fd2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	699a      	ldr	r2, [r3, #24]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	430a      	orrs	r2, r1
 8005fe0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a2c      	ldr	r2, [pc, #176]	@ (8006098 <UART_SetConfig+0x114>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d103      	bne.n	8005ff4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005fec:	f7fd ff80 	bl	8003ef0 <HAL_RCC_GetPCLK2Freq>
 8005ff0:	60f8      	str	r0, [r7, #12]
 8005ff2:	e002      	b.n	8005ffa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005ff4:	f7fd ff68 	bl	8003ec8 <HAL_RCC_GetPCLK1Freq>
 8005ff8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	4613      	mov	r3, r2
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	4413      	add	r3, r2
 8006002:	009a      	lsls	r2, r3, #2
 8006004:	441a      	add	r2, r3
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006010:	4a22      	ldr	r2, [pc, #136]	@ (800609c <UART_SetConfig+0x118>)
 8006012:	fba2 2303 	umull	r2, r3, r2, r3
 8006016:	095b      	lsrs	r3, r3, #5
 8006018:	0119      	lsls	r1, r3, #4
 800601a:	68fa      	ldr	r2, [r7, #12]
 800601c:	4613      	mov	r3, r2
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	4413      	add	r3, r2
 8006022:	009a      	lsls	r2, r3, #2
 8006024:	441a      	add	r2, r3
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006030:	4b1a      	ldr	r3, [pc, #104]	@ (800609c <UART_SetConfig+0x118>)
 8006032:	fba3 0302 	umull	r0, r3, r3, r2
 8006036:	095b      	lsrs	r3, r3, #5
 8006038:	2064      	movs	r0, #100	@ 0x64
 800603a:	fb00 f303 	mul.w	r3, r0, r3
 800603e:	1ad3      	subs	r3, r2, r3
 8006040:	011b      	lsls	r3, r3, #4
 8006042:	3332      	adds	r3, #50	@ 0x32
 8006044:	4a15      	ldr	r2, [pc, #84]	@ (800609c <UART_SetConfig+0x118>)
 8006046:	fba2 2303 	umull	r2, r3, r2, r3
 800604a:	095b      	lsrs	r3, r3, #5
 800604c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006050:	4419      	add	r1, r3
 8006052:	68fa      	ldr	r2, [r7, #12]
 8006054:	4613      	mov	r3, r2
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	4413      	add	r3, r2
 800605a:	009a      	lsls	r2, r3, #2
 800605c:	441a      	add	r2, r3
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	fbb2 f2f3 	udiv	r2, r2, r3
 8006068:	4b0c      	ldr	r3, [pc, #48]	@ (800609c <UART_SetConfig+0x118>)
 800606a:	fba3 0302 	umull	r0, r3, r3, r2
 800606e:	095b      	lsrs	r3, r3, #5
 8006070:	2064      	movs	r0, #100	@ 0x64
 8006072:	fb00 f303 	mul.w	r3, r0, r3
 8006076:	1ad3      	subs	r3, r2, r3
 8006078:	011b      	lsls	r3, r3, #4
 800607a:	3332      	adds	r3, #50	@ 0x32
 800607c:	4a07      	ldr	r2, [pc, #28]	@ (800609c <UART_SetConfig+0x118>)
 800607e:	fba2 2303 	umull	r2, r3, r2, r3
 8006082:	095b      	lsrs	r3, r3, #5
 8006084:	f003 020f 	and.w	r2, r3, #15
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	440a      	add	r2, r1
 800608e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006090:	bf00      	nop
 8006092:	3710      	adds	r7, #16
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}
 8006098:	40013800 	.word	0x40013800
 800609c:	51eb851f 	.word	0x51eb851f

080060a0 <atoi>:
 80060a0:	220a      	movs	r2, #10
 80060a2:	2100      	movs	r1, #0
 80060a4:	f000 b87c 	b.w	80061a0 <strtol>

080060a8 <_strtol_l.isra.0>:
 80060a8:	2b24      	cmp	r3, #36	@ 0x24
 80060aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060ae:	4686      	mov	lr, r0
 80060b0:	4690      	mov	r8, r2
 80060b2:	d801      	bhi.n	80060b8 <_strtol_l.isra.0+0x10>
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d106      	bne.n	80060c6 <_strtol_l.isra.0+0x1e>
 80060b8:	f001 f85a 	bl	8007170 <__errno>
 80060bc:	2316      	movs	r3, #22
 80060be:	6003      	str	r3, [r0, #0]
 80060c0:	2000      	movs	r0, #0
 80060c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060c6:	460d      	mov	r5, r1
 80060c8:	4833      	ldr	r0, [pc, #204]	@ (8006198 <_strtol_l.isra.0+0xf0>)
 80060ca:	462a      	mov	r2, r5
 80060cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80060d0:	5d06      	ldrb	r6, [r0, r4]
 80060d2:	f016 0608 	ands.w	r6, r6, #8
 80060d6:	d1f8      	bne.n	80060ca <_strtol_l.isra.0+0x22>
 80060d8:	2c2d      	cmp	r4, #45	@ 0x2d
 80060da:	d110      	bne.n	80060fe <_strtol_l.isra.0+0x56>
 80060dc:	2601      	movs	r6, #1
 80060de:	782c      	ldrb	r4, [r5, #0]
 80060e0:	1c95      	adds	r5, r2, #2
 80060e2:	f033 0210 	bics.w	r2, r3, #16
 80060e6:	d115      	bne.n	8006114 <_strtol_l.isra.0+0x6c>
 80060e8:	2c30      	cmp	r4, #48	@ 0x30
 80060ea:	d10d      	bne.n	8006108 <_strtol_l.isra.0+0x60>
 80060ec:	782a      	ldrb	r2, [r5, #0]
 80060ee:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80060f2:	2a58      	cmp	r2, #88	@ 0x58
 80060f4:	d108      	bne.n	8006108 <_strtol_l.isra.0+0x60>
 80060f6:	786c      	ldrb	r4, [r5, #1]
 80060f8:	3502      	adds	r5, #2
 80060fa:	2310      	movs	r3, #16
 80060fc:	e00a      	b.n	8006114 <_strtol_l.isra.0+0x6c>
 80060fe:	2c2b      	cmp	r4, #43	@ 0x2b
 8006100:	bf04      	itt	eq
 8006102:	782c      	ldrbeq	r4, [r5, #0]
 8006104:	1c95      	addeq	r5, r2, #2
 8006106:	e7ec      	b.n	80060e2 <_strtol_l.isra.0+0x3a>
 8006108:	2b00      	cmp	r3, #0
 800610a:	d1f6      	bne.n	80060fa <_strtol_l.isra.0+0x52>
 800610c:	2c30      	cmp	r4, #48	@ 0x30
 800610e:	bf14      	ite	ne
 8006110:	230a      	movne	r3, #10
 8006112:	2308      	moveq	r3, #8
 8006114:	2200      	movs	r2, #0
 8006116:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800611a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800611e:	fbbc f9f3 	udiv	r9, ip, r3
 8006122:	4610      	mov	r0, r2
 8006124:	fb03 ca19 	mls	sl, r3, r9, ip
 8006128:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800612c:	2f09      	cmp	r7, #9
 800612e:	d80f      	bhi.n	8006150 <_strtol_l.isra.0+0xa8>
 8006130:	463c      	mov	r4, r7
 8006132:	42a3      	cmp	r3, r4
 8006134:	dd1b      	ble.n	800616e <_strtol_l.isra.0+0xc6>
 8006136:	1c57      	adds	r7, r2, #1
 8006138:	d007      	beq.n	800614a <_strtol_l.isra.0+0xa2>
 800613a:	4581      	cmp	r9, r0
 800613c:	d314      	bcc.n	8006168 <_strtol_l.isra.0+0xc0>
 800613e:	d101      	bne.n	8006144 <_strtol_l.isra.0+0x9c>
 8006140:	45a2      	cmp	sl, r4
 8006142:	db11      	blt.n	8006168 <_strtol_l.isra.0+0xc0>
 8006144:	2201      	movs	r2, #1
 8006146:	fb00 4003 	mla	r0, r0, r3, r4
 800614a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800614e:	e7eb      	b.n	8006128 <_strtol_l.isra.0+0x80>
 8006150:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006154:	2f19      	cmp	r7, #25
 8006156:	d801      	bhi.n	800615c <_strtol_l.isra.0+0xb4>
 8006158:	3c37      	subs	r4, #55	@ 0x37
 800615a:	e7ea      	b.n	8006132 <_strtol_l.isra.0+0x8a>
 800615c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006160:	2f19      	cmp	r7, #25
 8006162:	d804      	bhi.n	800616e <_strtol_l.isra.0+0xc6>
 8006164:	3c57      	subs	r4, #87	@ 0x57
 8006166:	e7e4      	b.n	8006132 <_strtol_l.isra.0+0x8a>
 8006168:	f04f 32ff 	mov.w	r2, #4294967295
 800616c:	e7ed      	b.n	800614a <_strtol_l.isra.0+0xa2>
 800616e:	1c53      	adds	r3, r2, #1
 8006170:	d108      	bne.n	8006184 <_strtol_l.isra.0+0xdc>
 8006172:	2322      	movs	r3, #34	@ 0x22
 8006174:	4660      	mov	r0, ip
 8006176:	f8ce 3000 	str.w	r3, [lr]
 800617a:	f1b8 0f00 	cmp.w	r8, #0
 800617e:	d0a0      	beq.n	80060c2 <_strtol_l.isra.0+0x1a>
 8006180:	1e69      	subs	r1, r5, #1
 8006182:	e006      	b.n	8006192 <_strtol_l.isra.0+0xea>
 8006184:	b106      	cbz	r6, 8006188 <_strtol_l.isra.0+0xe0>
 8006186:	4240      	negs	r0, r0
 8006188:	f1b8 0f00 	cmp.w	r8, #0
 800618c:	d099      	beq.n	80060c2 <_strtol_l.isra.0+0x1a>
 800618e:	2a00      	cmp	r2, #0
 8006190:	d1f6      	bne.n	8006180 <_strtol_l.isra.0+0xd8>
 8006192:	f8c8 1000 	str.w	r1, [r8]
 8006196:	e794      	b.n	80060c2 <_strtol_l.isra.0+0x1a>
 8006198:	0800a7c3 	.word	0x0800a7c3

0800619c <_strtol_r>:
 800619c:	f7ff bf84 	b.w	80060a8 <_strtol_l.isra.0>

080061a0 <strtol>:
 80061a0:	4613      	mov	r3, r2
 80061a2:	460a      	mov	r2, r1
 80061a4:	4601      	mov	r1, r0
 80061a6:	4802      	ldr	r0, [pc, #8]	@ (80061b0 <strtol+0x10>)
 80061a8:	6800      	ldr	r0, [r0, #0]
 80061aa:	f7ff bf7d 	b.w	80060a8 <_strtol_l.isra.0>
 80061ae:	bf00      	nop
 80061b0:	20000018 	.word	0x20000018

080061b4 <__cvt>:
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061ba:	461d      	mov	r5, r3
 80061bc:	bfbb      	ittet	lt
 80061be:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80061c2:	461d      	movlt	r5, r3
 80061c4:	2300      	movge	r3, #0
 80061c6:	232d      	movlt	r3, #45	@ 0x2d
 80061c8:	b088      	sub	sp, #32
 80061ca:	4614      	mov	r4, r2
 80061cc:	bfb8      	it	lt
 80061ce:	4614      	movlt	r4, r2
 80061d0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80061d2:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80061d4:	7013      	strb	r3, [r2, #0]
 80061d6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80061d8:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80061dc:	f023 0820 	bic.w	r8, r3, #32
 80061e0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80061e4:	d005      	beq.n	80061f2 <__cvt+0x3e>
 80061e6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80061ea:	d100      	bne.n	80061ee <__cvt+0x3a>
 80061ec:	3601      	adds	r6, #1
 80061ee:	2302      	movs	r3, #2
 80061f0:	e000      	b.n	80061f4 <__cvt+0x40>
 80061f2:	2303      	movs	r3, #3
 80061f4:	aa07      	add	r2, sp, #28
 80061f6:	9204      	str	r2, [sp, #16]
 80061f8:	aa06      	add	r2, sp, #24
 80061fa:	e9cd a202 	strd	sl, r2, [sp, #8]
 80061fe:	e9cd 3600 	strd	r3, r6, [sp]
 8006202:	4622      	mov	r2, r4
 8006204:	462b      	mov	r3, r5
 8006206:	f001 f88b 	bl	8007320 <_dtoa_r>
 800620a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800620e:	4607      	mov	r7, r0
 8006210:	d119      	bne.n	8006246 <__cvt+0x92>
 8006212:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006214:	07db      	lsls	r3, r3, #31
 8006216:	d50e      	bpl.n	8006236 <__cvt+0x82>
 8006218:	eb00 0906 	add.w	r9, r0, r6
 800621c:	2200      	movs	r2, #0
 800621e:	2300      	movs	r3, #0
 8006220:	4620      	mov	r0, r4
 8006222:	4629      	mov	r1, r5
 8006224:	f7fa fc74 	bl	8000b10 <__aeabi_dcmpeq>
 8006228:	b108      	cbz	r0, 800622e <__cvt+0x7a>
 800622a:	f8cd 901c 	str.w	r9, [sp, #28]
 800622e:	2230      	movs	r2, #48	@ 0x30
 8006230:	9b07      	ldr	r3, [sp, #28]
 8006232:	454b      	cmp	r3, r9
 8006234:	d31e      	bcc.n	8006274 <__cvt+0xc0>
 8006236:	4638      	mov	r0, r7
 8006238:	9b07      	ldr	r3, [sp, #28]
 800623a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800623c:	1bdb      	subs	r3, r3, r7
 800623e:	6013      	str	r3, [r2, #0]
 8006240:	b008      	add	sp, #32
 8006242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006246:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800624a:	eb00 0906 	add.w	r9, r0, r6
 800624e:	d1e5      	bne.n	800621c <__cvt+0x68>
 8006250:	7803      	ldrb	r3, [r0, #0]
 8006252:	2b30      	cmp	r3, #48	@ 0x30
 8006254:	d10a      	bne.n	800626c <__cvt+0xb8>
 8006256:	2200      	movs	r2, #0
 8006258:	2300      	movs	r3, #0
 800625a:	4620      	mov	r0, r4
 800625c:	4629      	mov	r1, r5
 800625e:	f7fa fc57 	bl	8000b10 <__aeabi_dcmpeq>
 8006262:	b918      	cbnz	r0, 800626c <__cvt+0xb8>
 8006264:	f1c6 0601 	rsb	r6, r6, #1
 8006268:	f8ca 6000 	str.w	r6, [sl]
 800626c:	f8da 3000 	ldr.w	r3, [sl]
 8006270:	4499      	add	r9, r3
 8006272:	e7d3      	b.n	800621c <__cvt+0x68>
 8006274:	1c59      	adds	r1, r3, #1
 8006276:	9107      	str	r1, [sp, #28]
 8006278:	701a      	strb	r2, [r3, #0]
 800627a:	e7d9      	b.n	8006230 <__cvt+0x7c>

0800627c <__exponent>:
 800627c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800627e:	2900      	cmp	r1, #0
 8006280:	bfb6      	itet	lt
 8006282:	232d      	movlt	r3, #45	@ 0x2d
 8006284:	232b      	movge	r3, #43	@ 0x2b
 8006286:	4249      	neglt	r1, r1
 8006288:	2909      	cmp	r1, #9
 800628a:	7002      	strb	r2, [r0, #0]
 800628c:	7043      	strb	r3, [r0, #1]
 800628e:	dd29      	ble.n	80062e4 <__exponent+0x68>
 8006290:	f10d 0307 	add.w	r3, sp, #7
 8006294:	461d      	mov	r5, r3
 8006296:	270a      	movs	r7, #10
 8006298:	fbb1 f6f7 	udiv	r6, r1, r7
 800629c:	461a      	mov	r2, r3
 800629e:	fb07 1416 	mls	r4, r7, r6, r1
 80062a2:	3430      	adds	r4, #48	@ 0x30
 80062a4:	f802 4c01 	strb.w	r4, [r2, #-1]
 80062a8:	460c      	mov	r4, r1
 80062aa:	2c63      	cmp	r4, #99	@ 0x63
 80062ac:	4631      	mov	r1, r6
 80062ae:	f103 33ff 	add.w	r3, r3, #4294967295
 80062b2:	dcf1      	bgt.n	8006298 <__exponent+0x1c>
 80062b4:	3130      	adds	r1, #48	@ 0x30
 80062b6:	1e94      	subs	r4, r2, #2
 80062b8:	f803 1c01 	strb.w	r1, [r3, #-1]
 80062bc:	4623      	mov	r3, r4
 80062be:	1c41      	adds	r1, r0, #1
 80062c0:	42ab      	cmp	r3, r5
 80062c2:	d30a      	bcc.n	80062da <__exponent+0x5e>
 80062c4:	f10d 0309 	add.w	r3, sp, #9
 80062c8:	1a9b      	subs	r3, r3, r2
 80062ca:	42ac      	cmp	r4, r5
 80062cc:	bf88      	it	hi
 80062ce:	2300      	movhi	r3, #0
 80062d0:	3302      	adds	r3, #2
 80062d2:	4403      	add	r3, r0
 80062d4:	1a18      	subs	r0, r3, r0
 80062d6:	b003      	add	sp, #12
 80062d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062da:	f813 6b01 	ldrb.w	r6, [r3], #1
 80062de:	f801 6f01 	strb.w	r6, [r1, #1]!
 80062e2:	e7ed      	b.n	80062c0 <__exponent+0x44>
 80062e4:	2330      	movs	r3, #48	@ 0x30
 80062e6:	3130      	adds	r1, #48	@ 0x30
 80062e8:	7083      	strb	r3, [r0, #2]
 80062ea:	70c1      	strb	r1, [r0, #3]
 80062ec:	1d03      	adds	r3, r0, #4
 80062ee:	e7f1      	b.n	80062d4 <__exponent+0x58>

080062f0 <_printf_float>:
 80062f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062f4:	b091      	sub	sp, #68	@ 0x44
 80062f6:	460c      	mov	r4, r1
 80062f8:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80062fc:	4616      	mov	r6, r2
 80062fe:	461f      	mov	r7, r3
 8006300:	4605      	mov	r5, r0
 8006302:	f000 feeb 	bl	80070dc <_localeconv_r>
 8006306:	6803      	ldr	r3, [r0, #0]
 8006308:	4618      	mov	r0, r3
 800630a:	9308      	str	r3, [sp, #32]
 800630c:	f7f9 ff20 	bl	8000150 <strlen>
 8006310:	2300      	movs	r3, #0
 8006312:	930e      	str	r3, [sp, #56]	@ 0x38
 8006314:	f8d8 3000 	ldr.w	r3, [r8]
 8006318:	9009      	str	r0, [sp, #36]	@ 0x24
 800631a:	3307      	adds	r3, #7
 800631c:	f023 0307 	bic.w	r3, r3, #7
 8006320:	f103 0208 	add.w	r2, r3, #8
 8006324:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006328:	f8d4 b000 	ldr.w	fp, [r4]
 800632c:	f8c8 2000 	str.w	r2, [r8]
 8006330:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006334:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006338:	930b      	str	r3, [sp, #44]	@ 0x2c
 800633a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800633e:	f04f 32ff 	mov.w	r2, #4294967295
 8006342:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006346:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800634a:	4b9c      	ldr	r3, [pc, #624]	@ (80065bc <_printf_float+0x2cc>)
 800634c:	f7fa fc12 	bl	8000b74 <__aeabi_dcmpun>
 8006350:	bb70      	cbnz	r0, 80063b0 <_printf_float+0xc0>
 8006352:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006356:	f04f 32ff 	mov.w	r2, #4294967295
 800635a:	4b98      	ldr	r3, [pc, #608]	@ (80065bc <_printf_float+0x2cc>)
 800635c:	f7fa fbec 	bl	8000b38 <__aeabi_dcmple>
 8006360:	bb30      	cbnz	r0, 80063b0 <_printf_float+0xc0>
 8006362:	2200      	movs	r2, #0
 8006364:	2300      	movs	r3, #0
 8006366:	4640      	mov	r0, r8
 8006368:	4649      	mov	r1, r9
 800636a:	f7fa fbdb 	bl	8000b24 <__aeabi_dcmplt>
 800636e:	b110      	cbz	r0, 8006376 <_printf_float+0x86>
 8006370:	232d      	movs	r3, #45	@ 0x2d
 8006372:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006376:	4a92      	ldr	r2, [pc, #584]	@ (80065c0 <_printf_float+0x2d0>)
 8006378:	4b92      	ldr	r3, [pc, #584]	@ (80065c4 <_printf_float+0x2d4>)
 800637a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800637e:	bf8c      	ite	hi
 8006380:	4690      	movhi	r8, r2
 8006382:	4698      	movls	r8, r3
 8006384:	2303      	movs	r3, #3
 8006386:	f04f 0900 	mov.w	r9, #0
 800638a:	6123      	str	r3, [r4, #16]
 800638c:	f02b 0304 	bic.w	r3, fp, #4
 8006390:	6023      	str	r3, [r4, #0]
 8006392:	4633      	mov	r3, r6
 8006394:	4621      	mov	r1, r4
 8006396:	4628      	mov	r0, r5
 8006398:	9700      	str	r7, [sp, #0]
 800639a:	aa0f      	add	r2, sp, #60	@ 0x3c
 800639c:	f000 f9d4 	bl	8006748 <_printf_common>
 80063a0:	3001      	adds	r0, #1
 80063a2:	f040 8090 	bne.w	80064c6 <_printf_float+0x1d6>
 80063a6:	f04f 30ff 	mov.w	r0, #4294967295
 80063aa:	b011      	add	sp, #68	@ 0x44
 80063ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063b0:	4642      	mov	r2, r8
 80063b2:	464b      	mov	r3, r9
 80063b4:	4640      	mov	r0, r8
 80063b6:	4649      	mov	r1, r9
 80063b8:	f7fa fbdc 	bl	8000b74 <__aeabi_dcmpun>
 80063bc:	b148      	cbz	r0, 80063d2 <_printf_float+0xe2>
 80063be:	464b      	mov	r3, r9
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	bfb8      	it	lt
 80063c4:	232d      	movlt	r3, #45	@ 0x2d
 80063c6:	4a80      	ldr	r2, [pc, #512]	@ (80065c8 <_printf_float+0x2d8>)
 80063c8:	bfb8      	it	lt
 80063ca:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80063ce:	4b7f      	ldr	r3, [pc, #508]	@ (80065cc <_printf_float+0x2dc>)
 80063d0:	e7d3      	b.n	800637a <_printf_float+0x8a>
 80063d2:	6863      	ldr	r3, [r4, #4]
 80063d4:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80063d8:	1c5a      	adds	r2, r3, #1
 80063da:	d13f      	bne.n	800645c <_printf_float+0x16c>
 80063dc:	2306      	movs	r3, #6
 80063de:	6063      	str	r3, [r4, #4]
 80063e0:	2200      	movs	r2, #0
 80063e2:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80063e6:	6023      	str	r3, [r4, #0]
 80063e8:	9206      	str	r2, [sp, #24]
 80063ea:	aa0e      	add	r2, sp, #56	@ 0x38
 80063ec:	e9cd a204 	strd	sl, r2, [sp, #16]
 80063f0:	aa0d      	add	r2, sp, #52	@ 0x34
 80063f2:	9203      	str	r2, [sp, #12]
 80063f4:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80063f8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80063fc:	6863      	ldr	r3, [r4, #4]
 80063fe:	4642      	mov	r2, r8
 8006400:	9300      	str	r3, [sp, #0]
 8006402:	4628      	mov	r0, r5
 8006404:	464b      	mov	r3, r9
 8006406:	910a      	str	r1, [sp, #40]	@ 0x28
 8006408:	f7ff fed4 	bl	80061b4 <__cvt>
 800640c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800640e:	4680      	mov	r8, r0
 8006410:	2947      	cmp	r1, #71	@ 0x47
 8006412:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006414:	d128      	bne.n	8006468 <_printf_float+0x178>
 8006416:	1cc8      	adds	r0, r1, #3
 8006418:	db02      	blt.n	8006420 <_printf_float+0x130>
 800641a:	6863      	ldr	r3, [r4, #4]
 800641c:	4299      	cmp	r1, r3
 800641e:	dd40      	ble.n	80064a2 <_printf_float+0x1b2>
 8006420:	f1aa 0a02 	sub.w	sl, sl, #2
 8006424:	fa5f fa8a 	uxtb.w	sl, sl
 8006428:	4652      	mov	r2, sl
 800642a:	3901      	subs	r1, #1
 800642c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006430:	910d      	str	r1, [sp, #52]	@ 0x34
 8006432:	f7ff ff23 	bl	800627c <__exponent>
 8006436:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006438:	4681      	mov	r9, r0
 800643a:	1813      	adds	r3, r2, r0
 800643c:	2a01      	cmp	r2, #1
 800643e:	6123      	str	r3, [r4, #16]
 8006440:	dc02      	bgt.n	8006448 <_printf_float+0x158>
 8006442:	6822      	ldr	r2, [r4, #0]
 8006444:	07d2      	lsls	r2, r2, #31
 8006446:	d501      	bpl.n	800644c <_printf_float+0x15c>
 8006448:	3301      	adds	r3, #1
 800644a:	6123      	str	r3, [r4, #16]
 800644c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8006450:	2b00      	cmp	r3, #0
 8006452:	d09e      	beq.n	8006392 <_printf_float+0xa2>
 8006454:	232d      	movs	r3, #45	@ 0x2d
 8006456:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800645a:	e79a      	b.n	8006392 <_printf_float+0xa2>
 800645c:	2947      	cmp	r1, #71	@ 0x47
 800645e:	d1bf      	bne.n	80063e0 <_printf_float+0xf0>
 8006460:	2b00      	cmp	r3, #0
 8006462:	d1bd      	bne.n	80063e0 <_printf_float+0xf0>
 8006464:	2301      	movs	r3, #1
 8006466:	e7ba      	b.n	80063de <_printf_float+0xee>
 8006468:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800646c:	d9dc      	bls.n	8006428 <_printf_float+0x138>
 800646e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006472:	d118      	bne.n	80064a6 <_printf_float+0x1b6>
 8006474:	2900      	cmp	r1, #0
 8006476:	6863      	ldr	r3, [r4, #4]
 8006478:	dd0b      	ble.n	8006492 <_printf_float+0x1a2>
 800647a:	6121      	str	r1, [r4, #16]
 800647c:	b913      	cbnz	r3, 8006484 <_printf_float+0x194>
 800647e:	6822      	ldr	r2, [r4, #0]
 8006480:	07d0      	lsls	r0, r2, #31
 8006482:	d502      	bpl.n	800648a <_printf_float+0x19a>
 8006484:	3301      	adds	r3, #1
 8006486:	440b      	add	r3, r1
 8006488:	6123      	str	r3, [r4, #16]
 800648a:	f04f 0900 	mov.w	r9, #0
 800648e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006490:	e7dc      	b.n	800644c <_printf_float+0x15c>
 8006492:	b913      	cbnz	r3, 800649a <_printf_float+0x1aa>
 8006494:	6822      	ldr	r2, [r4, #0]
 8006496:	07d2      	lsls	r2, r2, #31
 8006498:	d501      	bpl.n	800649e <_printf_float+0x1ae>
 800649a:	3302      	adds	r3, #2
 800649c:	e7f4      	b.n	8006488 <_printf_float+0x198>
 800649e:	2301      	movs	r3, #1
 80064a0:	e7f2      	b.n	8006488 <_printf_float+0x198>
 80064a2:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80064a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80064a8:	4299      	cmp	r1, r3
 80064aa:	db05      	blt.n	80064b8 <_printf_float+0x1c8>
 80064ac:	6823      	ldr	r3, [r4, #0]
 80064ae:	6121      	str	r1, [r4, #16]
 80064b0:	07d8      	lsls	r0, r3, #31
 80064b2:	d5ea      	bpl.n	800648a <_printf_float+0x19a>
 80064b4:	1c4b      	adds	r3, r1, #1
 80064b6:	e7e7      	b.n	8006488 <_printf_float+0x198>
 80064b8:	2900      	cmp	r1, #0
 80064ba:	bfcc      	ite	gt
 80064bc:	2201      	movgt	r2, #1
 80064be:	f1c1 0202 	rsble	r2, r1, #2
 80064c2:	4413      	add	r3, r2
 80064c4:	e7e0      	b.n	8006488 <_printf_float+0x198>
 80064c6:	6823      	ldr	r3, [r4, #0]
 80064c8:	055a      	lsls	r2, r3, #21
 80064ca:	d407      	bmi.n	80064dc <_printf_float+0x1ec>
 80064cc:	6923      	ldr	r3, [r4, #16]
 80064ce:	4642      	mov	r2, r8
 80064d0:	4631      	mov	r1, r6
 80064d2:	4628      	mov	r0, r5
 80064d4:	47b8      	blx	r7
 80064d6:	3001      	adds	r0, #1
 80064d8:	d12b      	bne.n	8006532 <_printf_float+0x242>
 80064da:	e764      	b.n	80063a6 <_printf_float+0xb6>
 80064dc:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80064e0:	f240 80dc 	bls.w	800669c <_printf_float+0x3ac>
 80064e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80064e8:	2200      	movs	r2, #0
 80064ea:	2300      	movs	r3, #0
 80064ec:	f7fa fb10 	bl	8000b10 <__aeabi_dcmpeq>
 80064f0:	2800      	cmp	r0, #0
 80064f2:	d033      	beq.n	800655c <_printf_float+0x26c>
 80064f4:	2301      	movs	r3, #1
 80064f6:	4631      	mov	r1, r6
 80064f8:	4628      	mov	r0, r5
 80064fa:	4a35      	ldr	r2, [pc, #212]	@ (80065d0 <_printf_float+0x2e0>)
 80064fc:	47b8      	blx	r7
 80064fe:	3001      	adds	r0, #1
 8006500:	f43f af51 	beq.w	80063a6 <_printf_float+0xb6>
 8006504:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8006508:	4543      	cmp	r3, r8
 800650a:	db02      	blt.n	8006512 <_printf_float+0x222>
 800650c:	6823      	ldr	r3, [r4, #0]
 800650e:	07d8      	lsls	r0, r3, #31
 8006510:	d50f      	bpl.n	8006532 <_printf_float+0x242>
 8006512:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006516:	4631      	mov	r1, r6
 8006518:	4628      	mov	r0, r5
 800651a:	47b8      	blx	r7
 800651c:	3001      	adds	r0, #1
 800651e:	f43f af42 	beq.w	80063a6 <_printf_float+0xb6>
 8006522:	f04f 0900 	mov.w	r9, #0
 8006526:	f108 38ff 	add.w	r8, r8, #4294967295
 800652a:	f104 0a1a 	add.w	sl, r4, #26
 800652e:	45c8      	cmp	r8, r9
 8006530:	dc09      	bgt.n	8006546 <_printf_float+0x256>
 8006532:	6823      	ldr	r3, [r4, #0]
 8006534:	079b      	lsls	r3, r3, #30
 8006536:	f100 8102 	bmi.w	800673e <_printf_float+0x44e>
 800653a:	68e0      	ldr	r0, [r4, #12]
 800653c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800653e:	4298      	cmp	r0, r3
 8006540:	bfb8      	it	lt
 8006542:	4618      	movlt	r0, r3
 8006544:	e731      	b.n	80063aa <_printf_float+0xba>
 8006546:	2301      	movs	r3, #1
 8006548:	4652      	mov	r2, sl
 800654a:	4631      	mov	r1, r6
 800654c:	4628      	mov	r0, r5
 800654e:	47b8      	blx	r7
 8006550:	3001      	adds	r0, #1
 8006552:	f43f af28 	beq.w	80063a6 <_printf_float+0xb6>
 8006556:	f109 0901 	add.w	r9, r9, #1
 800655a:	e7e8      	b.n	800652e <_printf_float+0x23e>
 800655c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800655e:	2b00      	cmp	r3, #0
 8006560:	dc38      	bgt.n	80065d4 <_printf_float+0x2e4>
 8006562:	2301      	movs	r3, #1
 8006564:	4631      	mov	r1, r6
 8006566:	4628      	mov	r0, r5
 8006568:	4a19      	ldr	r2, [pc, #100]	@ (80065d0 <_printf_float+0x2e0>)
 800656a:	47b8      	blx	r7
 800656c:	3001      	adds	r0, #1
 800656e:	f43f af1a 	beq.w	80063a6 <_printf_float+0xb6>
 8006572:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8006576:	ea59 0303 	orrs.w	r3, r9, r3
 800657a:	d102      	bne.n	8006582 <_printf_float+0x292>
 800657c:	6823      	ldr	r3, [r4, #0]
 800657e:	07d9      	lsls	r1, r3, #31
 8006580:	d5d7      	bpl.n	8006532 <_printf_float+0x242>
 8006582:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006586:	4631      	mov	r1, r6
 8006588:	4628      	mov	r0, r5
 800658a:	47b8      	blx	r7
 800658c:	3001      	adds	r0, #1
 800658e:	f43f af0a 	beq.w	80063a6 <_printf_float+0xb6>
 8006592:	f04f 0a00 	mov.w	sl, #0
 8006596:	f104 0b1a 	add.w	fp, r4, #26
 800659a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800659c:	425b      	negs	r3, r3
 800659e:	4553      	cmp	r3, sl
 80065a0:	dc01      	bgt.n	80065a6 <_printf_float+0x2b6>
 80065a2:	464b      	mov	r3, r9
 80065a4:	e793      	b.n	80064ce <_printf_float+0x1de>
 80065a6:	2301      	movs	r3, #1
 80065a8:	465a      	mov	r2, fp
 80065aa:	4631      	mov	r1, r6
 80065ac:	4628      	mov	r0, r5
 80065ae:	47b8      	blx	r7
 80065b0:	3001      	adds	r0, #1
 80065b2:	f43f aef8 	beq.w	80063a6 <_printf_float+0xb6>
 80065b6:	f10a 0a01 	add.w	sl, sl, #1
 80065ba:	e7ee      	b.n	800659a <_printf_float+0x2aa>
 80065bc:	7fefffff 	.word	0x7fefffff
 80065c0:	0800a8c7 	.word	0x0800a8c7
 80065c4:	0800a8c3 	.word	0x0800a8c3
 80065c8:	0800a8cf 	.word	0x0800a8cf
 80065cc:	0800a8cb 	.word	0x0800a8cb
 80065d0:	0800a8d3 	.word	0x0800a8d3
 80065d4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80065d6:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80065da:	4553      	cmp	r3, sl
 80065dc:	bfa8      	it	ge
 80065de:	4653      	movge	r3, sl
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	4699      	mov	r9, r3
 80065e4:	dc36      	bgt.n	8006654 <_printf_float+0x364>
 80065e6:	f04f 0b00 	mov.w	fp, #0
 80065ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80065ee:	f104 021a 	add.w	r2, r4, #26
 80065f2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80065f4:	930a      	str	r3, [sp, #40]	@ 0x28
 80065f6:	eba3 0309 	sub.w	r3, r3, r9
 80065fa:	455b      	cmp	r3, fp
 80065fc:	dc31      	bgt.n	8006662 <_printf_float+0x372>
 80065fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006600:	459a      	cmp	sl, r3
 8006602:	dc3a      	bgt.n	800667a <_printf_float+0x38a>
 8006604:	6823      	ldr	r3, [r4, #0]
 8006606:	07da      	lsls	r2, r3, #31
 8006608:	d437      	bmi.n	800667a <_printf_float+0x38a>
 800660a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800660c:	ebaa 0903 	sub.w	r9, sl, r3
 8006610:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006612:	ebaa 0303 	sub.w	r3, sl, r3
 8006616:	4599      	cmp	r9, r3
 8006618:	bfa8      	it	ge
 800661a:	4699      	movge	r9, r3
 800661c:	f1b9 0f00 	cmp.w	r9, #0
 8006620:	dc33      	bgt.n	800668a <_printf_float+0x39a>
 8006622:	f04f 0800 	mov.w	r8, #0
 8006626:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800662a:	f104 0b1a 	add.w	fp, r4, #26
 800662e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006630:	ebaa 0303 	sub.w	r3, sl, r3
 8006634:	eba3 0309 	sub.w	r3, r3, r9
 8006638:	4543      	cmp	r3, r8
 800663a:	f77f af7a 	ble.w	8006532 <_printf_float+0x242>
 800663e:	2301      	movs	r3, #1
 8006640:	465a      	mov	r2, fp
 8006642:	4631      	mov	r1, r6
 8006644:	4628      	mov	r0, r5
 8006646:	47b8      	blx	r7
 8006648:	3001      	adds	r0, #1
 800664a:	f43f aeac 	beq.w	80063a6 <_printf_float+0xb6>
 800664e:	f108 0801 	add.w	r8, r8, #1
 8006652:	e7ec      	b.n	800662e <_printf_float+0x33e>
 8006654:	4642      	mov	r2, r8
 8006656:	4631      	mov	r1, r6
 8006658:	4628      	mov	r0, r5
 800665a:	47b8      	blx	r7
 800665c:	3001      	adds	r0, #1
 800665e:	d1c2      	bne.n	80065e6 <_printf_float+0x2f6>
 8006660:	e6a1      	b.n	80063a6 <_printf_float+0xb6>
 8006662:	2301      	movs	r3, #1
 8006664:	4631      	mov	r1, r6
 8006666:	4628      	mov	r0, r5
 8006668:	920a      	str	r2, [sp, #40]	@ 0x28
 800666a:	47b8      	blx	r7
 800666c:	3001      	adds	r0, #1
 800666e:	f43f ae9a 	beq.w	80063a6 <_printf_float+0xb6>
 8006672:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006674:	f10b 0b01 	add.w	fp, fp, #1
 8006678:	e7bb      	b.n	80065f2 <_printf_float+0x302>
 800667a:	4631      	mov	r1, r6
 800667c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006680:	4628      	mov	r0, r5
 8006682:	47b8      	blx	r7
 8006684:	3001      	adds	r0, #1
 8006686:	d1c0      	bne.n	800660a <_printf_float+0x31a>
 8006688:	e68d      	b.n	80063a6 <_printf_float+0xb6>
 800668a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800668c:	464b      	mov	r3, r9
 800668e:	4631      	mov	r1, r6
 8006690:	4628      	mov	r0, r5
 8006692:	4442      	add	r2, r8
 8006694:	47b8      	blx	r7
 8006696:	3001      	adds	r0, #1
 8006698:	d1c3      	bne.n	8006622 <_printf_float+0x332>
 800669a:	e684      	b.n	80063a6 <_printf_float+0xb6>
 800669c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80066a0:	f1ba 0f01 	cmp.w	sl, #1
 80066a4:	dc01      	bgt.n	80066aa <_printf_float+0x3ba>
 80066a6:	07db      	lsls	r3, r3, #31
 80066a8:	d536      	bpl.n	8006718 <_printf_float+0x428>
 80066aa:	2301      	movs	r3, #1
 80066ac:	4642      	mov	r2, r8
 80066ae:	4631      	mov	r1, r6
 80066b0:	4628      	mov	r0, r5
 80066b2:	47b8      	blx	r7
 80066b4:	3001      	adds	r0, #1
 80066b6:	f43f ae76 	beq.w	80063a6 <_printf_float+0xb6>
 80066ba:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80066be:	4631      	mov	r1, r6
 80066c0:	4628      	mov	r0, r5
 80066c2:	47b8      	blx	r7
 80066c4:	3001      	adds	r0, #1
 80066c6:	f43f ae6e 	beq.w	80063a6 <_printf_float+0xb6>
 80066ca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80066ce:	2200      	movs	r2, #0
 80066d0:	2300      	movs	r3, #0
 80066d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80066d6:	f7fa fa1b 	bl	8000b10 <__aeabi_dcmpeq>
 80066da:	b9c0      	cbnz	r0, 800670e <_printf_float+0x41e>
 80066dc:	4653      	mov	r3, sl
 80066de:	f108 0201 	add.w	r2, r8, #1
 80066e2:	4631      	mov	r1, r6
 80066e4:	4628      	mov	r0, r5
 80066e6:	47b8      	blx	r7
 80066e8:	3001      	adds	r0, #1
 80066ea:	d10c      	bne.n	8006706 <_printf_float+0x416>
 80066ec:	e65b      	b.n	80063a6 <_printf_float+0xb6>
 80066ee:	2301      	movs	r3, #1
 80066f0:	465a      	mov	r2, fp
 80066f2:	4631      	mov	r1, r6
 80066f4:	4628      	mov	r0, r5
 80066f6:	47b8      	blx	r7
 80066f8:	3001      	adds	r0, #1
 80066fa:	f43f ae54 	beq.w	80063a6 <_printf_float+0xb6>
 80066fe:	f108 0801 	add.w	r8, r8, #1
 8006702:	45d0      	cmp	r8, sl
 8006704:	dbf3      	blt.n	80066ee <_printf_float+0x3fe>
 8006706:	464b      	mov	r3, r9
 8006708:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800670c:	e6e0      	b.n	80064d0 <_printf_float+0x1e0>
 800670e:	f04f 0800 	mov.w	r8, #0
 8006712:	f104 0b1a 	add.w	fp, r4, #26
 8006716:	e7f4      	b.n	8006702 <_printf_float+0x412>
 8006718:	2301      	movs	r3, #1
 800671a:	4642      	mov	r2, r8
 800671c:	e7e1      	b.n	80066e2 <_printf_float+0x3f2>
 800671e:	2301      	movs	r3, #1
 8006720:	464a      	mov	r2, r9
 8006722:	4631      	mov	r1, r6
 8006724:	4628      	mov	r0, r5
 8006726:	47b8      	blx	r7
 8006728:	3001      	adds	r0, #1
 800672a:	f43f ae3c 	beq.w	80063a6 <_printf_float+0xb6>
 800672e:	f108 0801 	add.w	r8, r8, #1
 8006732:	68e3      	ldr	r3, [r4, #12]
 8006734:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006736:	1a5b      	subs	r3, r3, r1
 8006738:	4543      	cmp	r3, r8
 800673a:	dcf0      	bgt.n	800671e <_printf_float+0x42e>
 800673c:	e6fd      	b.n	800653a <_printf_float+0x24a>
 800673e:	f04f 0800 	mov.w	r8, #0
 8006742:	f104 0919 	add.w	r9, r4, #25
 8006746:	e7f4      	b.n	8006732 <_printf_float+0x442>

08006748 <_printf_common>:
 8006748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800674c:	4616      	mov	r6, r2
 800674e:	4698      	mov	r8, r3
 8006750:	688a      	ldr	r2, [r1, #8]
 8006752:	690b      	ldr	r3, [r1, #16]
 8006754:	4607      	mov	r7, r0
 8006756:	4293      	cmp	r3, r2
 8006758:	bfb8      	it	lt
 800675a:	4613      	movlt	r3, r2
 800675c:	6033      	str	r3, [r6, #0]
 800675e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006762:	460c      	mov	r4, r1
 8006764:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006768:	b10a      	cbz	r2, 800676e <_printf_common+0x26>
 800676a:	3301      	adds	r3, #1
 800676c:	6033      	str	r3, [r6, #0]
 800676e:	6823      	ldr	r3, [r4, #0]
 8006770:	0699      	lsls	r1, r3, #26
 8006772:	bf42      	ittt	mi
 8006774:	6833      	ldrmi	r3, [r6, #0]
 8006776:	3302      	addmi	r3, #2
 8006778:	6033      	strmi	r3, [r6, #0]
 800677a:	6825      	ldr	r5, [r4, #0]
 800677c:	f015 0506 	ands.w	r5, r5, #6
 8006780:	d106      	bne.n	8006790 <_printf_common+0x48>
 8006782:	f104 0a19 	add.w	sl, r4, #25
 8006786:	68e3      	ldr	r3, [r4, #12]
 8006788:	6832      	ldr	r2, [r6, #0]
 800678a:	1a9b      	subs	r3, r3, r2
 800678c:	42ab      	cmp	r3, r5
 800678e:	dc2b      	bgt.n	80067e8 <_printf_common+0xa0>
 8006790:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006794:	6822      	ldr	r2, [r4, #0]
 8006796:	3b00      	subs	r3, #0
 8006798:	bf18      	it	ne
 800679a:	2301      	movne	r3, #1
 800679c:	0692      	lsls	r2, r2, #26
 800679e:	d430      	bmi.n	8006802 <_printf_common+0xba>
 80067a0:	4641      	mov	r1, r8
 80067a2:	4638      	mov	r0, r7
 80067a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80067a8:	47c8      	blx	r9
 80067aa:	3001      	adds	r0, #1
 80067ac:	d023      	beq.n	80067f6 <_printf_common+0xae>
 80067ae:	6823      	ldr	r3, [r4, #0]
 80067b0:	6922      	ldr	r2, [r4, #16]
 80067b2:	f003 0306 	and.w	r3, r3, #6
 80067b6:	2b04      	cmp	r3, #4
 80067b8:	bf14      	ite	ne
 80067ba:	2500      	movne	r5, #0
 80067bc:	6833      	ldreq	r3, [r6, #0]
 80067be:	f04f 0600 	mov.w	r6, #0
 80067c2:	bf08      	it	eq
 80067c4:	68e5      	ldreq	r5, [r4, #12]
 80067c6:	f104 041a 	add.w	r4, r4, #26
 80067ca:	bf08      	it	eq
 80067cc:	1aed      	subeq	r5, r5, r3
 80067ce:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80067d2:	bf08      	it	eq
 80067d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80067d8:	4293      	cmp	r3, r2
 80067da:	bfc4      	itt	gt
 80067dc:	1a9b      	subgt	r3, r3, r2
 80067de:	18ed      	addgt	r5, r5, r3
 80067e0:	42b5      	cmp	r5, r6
 80067e2:	d11a      	bne.n	800681a <_printf_common+0xd2>
 80067e4:	2000      	movs	r0, #0
 80067e6:	e008      	b.n	80067fa <_printf_common+0xb2>
 80067e8:	2301      	movs	r3, #1
 80067ea:	4652      	mov	r2, sl
 80067ec:	4641      	mov	r1, r8
 80067ee:	4638      	mov	r0, r7
 80067f0:	47c8      	blx	r9
 80067f2:	3001      	adds	r0, #1
 80067f4:	d103      	bne.n	80067fe <_printf_common+0xb6>
 80067f6:	f04f 30ff 	mov.w	r0, #4294967295
 80067fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067fe:	3501      	adds	r5, #1
 8006800:	e7c1      	b.n	8006786 <_printf_common+0x3e>
 8006802:	2030      	movs	r0, #48	@ 0x30
 8006804:	18e1      	adds	r1, r4, r3
 8006806:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800680a:	1c5a      	adds	r2, r3, #1
 800680c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006810:	4422      	add	r2, r4
 8006812:	3302      	adds	r3, #2
 8006814:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006818:	e7c2      	b.n	80067a0 <_printf_common+0x58>
 800681a:	2301      	movs	r3, #1
 800681c:	4622      	mov	r2, r4
 800681e:	4641      	mov	r1, r8
 8006820:	4638      	mov	r0, r7
 8006822:	47c8      	blx	r9
 8006824:	3001      	adds	r0, #1
 8006826:	d0e6      	beq.n	80067f6 <_printf_common+0xae>
 8006828:	3601      	adds	r6, #1
 800682a:	e7d9      	b.n	80067e0 <_printf_common+0x98>

0800682c <_printf_i>:
 800682c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006830:	7e0f      	ldrb	r7, [r1, #24]
 8006832:	4691      	mov	r9, r2
 8006834:	2f78      	cmp	r7, #120	@ 0x78
 8006836:	4680      	mov	r8, r0
 8006838:	460c      	mov	r4, r1
 800683a:	469a      	mov	sl, r3
 800683c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800683e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006842:	d807      	bhi.n	8006854 <_printf_i+0x28>
 8006844:	2f62      	cmp	r7, #98	@ 0x62
 8006846:	d80a      	bhi.n	800685e <_printf_i+0x32>
 8006848:	2f00      	cmp	r7, #0
 800684a:	f000 80d1 	beq.w	80069f0 <_printf_i+0x1c4>
 800684e:	2f58      	cmp	r7, #88	@ 0x58
 8006850:	f000 80b8 	beq.w	80069c4 <_printf_i+0x198>
 8006854:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006858:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800685c:	e03a      	b.n	80068d4 <_printf_i+0xa8>
 800685e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006862:	2b15      	cmp	r3, #21
 8006864:	d8f6      	bhi.n	8006854 <_printf_i+0x28>
 8006866:	a101      	add	r1, pc, #4	@ (adr r1, 800686c <_printf_i+0x40>)
 8006868:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800686c:	080068c5 	.word	0x080068c5
 8006870:	080068d9 	.word	0x080068d9
 8006874:	08006855 	.word	0x08006855
 8006878:	08006855 	.word	0x08006855
 800687c:	08006855 	.word	0x08006855
 8006880:	08006855 	.word	0x08006855
 8006884:	080068d9 	.word	0x080068d9
 8006888:	08006855 	.word	0x08006855
 800688c:	08006855 	.word	0x08006855
 8006890:	08006855 	.word	0x08006855
 8006894:	08006855 	.word	0x08006855
 8006898:	080069d7 	.word	0x080069d7
 800689c:	08006903 	.word	0x08006903
 80068a0:	08006991 	.word	0x08006991
 80068a4:	08006855 	.word	0x08006855
 80068a8:	08006855 	.word	0x08006855
 80068ac:	080069f9 	.word	0x080069f9
 80068b0:	08006855 	.word	0x08006855
 80068b4:	08006903 	.word	0x08006903
 80068b8:	08006855 	.word	0x08006855
 80068bc:	08006855 	.word	0x08006855
 80068c0:	08006999 	.word	0x08006999
 80068c4:	6833      	ldr	r3, [r6, #0]
 80068c6:	1d1a      	adds	r2, r3, #4
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	6032      	str	r2, [r6, #0]
 80068cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80068d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80068d4:	2301      	movs	r3, #1
 80068d6:	e09c      	b.n	8006a12 <_printf_i+0x1e6>
 80068d8:	6833      	ldr	r3, [r6, #0]
 80068da:	6820      	ldr	r0, [r4, #0]
 80068dc:	1d19      	adds	r1, r3, #4
 80068de:	6031      	str	r1, [r6, #0]
 80068e0:	0606      	lsls	r6, r0, #24
 80068e2:	d501      	bpl.n	80068e8 <_printf_i+0xbc>
 80068e4:	681d      	ldr	r5, [r3, #0]
 80068e6:	e003      	b.n	80068f0 <_printf_i+0xc4>
 80068e8:	0645      	lsls	r5, r0, #25
 80068ea:	d5fb      	bpl.n	80068e4 <_printf_i+0xb8>
 80068ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 80068f0:	2d00      	cmp	r5, #0
 80068f2:	da03      	bge.n	80068fc <_printf_i+0xd0>
 80068f4:	232d      	movs	r3, #45	@ 0x2d
 80068f6:	426d      	negs	r5, r5
 80068f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80068fc:	230a      	movs	r3, #10
 80068fe:	4858      	ldr	r0, [pc, #352]	@ (8006a60 <_printf_i+0x234>)
 8006900:	e011      	b.n	8006926 <_printf_i+0xfa>
 8006902:	6821      	ldr	r1, [r4, #0]
 8006904:	6833      	ldr	r3, [r6, #0]
 8006906:	0608      	lsls	r0, r1, #24
 8006908:	f853 5b04 	ldr.w	r5, [r3], #4
 800690c:	d402      	bmi.n	8006914 <_printf_i+0xe8>
 800690e:	0649      	lsls	r1, r1, #25
 8006910:	bf48      	it	mi
 8006912:	b2ad      	uxthmi	r5, r5
 8006914:	2f6f      	cmp	r7, #111	@ 0x6f
 8006916:	6033      	str	r3, [r6, #0]
 8006918:	bf14      	ite	ne
 800691a:	230a      	movne	r3, #10
 800691c:	2308      	moveq	r3, #8
 800691e:	4850      	ldr	r0, [pc, #320]	@ (8006a60 <_printf_i+0x234>)
 8006920:	2100      	movs	r1, #0
 8006922:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006926:	6866      	ldr	r6, [r4, #4]
 8006928:	2e00      	cmp	r6, #0
 800692a:	60a6      	str	r6, [r4, #8]
 800692c:	db05      	blt.n	800693a <_printf_i+0x10e>
 800692e:	6821      	ldr	r1, [r4, #0]
 8006930:	432e      	orrs	r6, r5
 8006932:	f021 0104 	bic.w	r1, r1, #4
 8006936:	6021      	str	r1, [r4, #0]
 8006938:	d04b      	beq.n	80069d2 <_printf_i+0x1a6>
 800693a:	4616      	mov	r6, r2
 800693c:	fbb5 f1f3 	udiv	r1, r5, r3
 8006940:	fb03 5711 	mls	r7, r3, r1, r5
 8006944:	5dc7      	ldrb	r7, [r0, r7]
 8006946:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800694a:	462f      	mov	r7, r5
 800694c:	42bb      	cmp	r3, r7
 800694e:	460d      	mov	r5, r1
 8006950:	d9f4      	bls.n	800693c <_printf_i+0x110>
 8006952:	2b08      	cmp	r3, #8
 8006954:	d10b      	bne.n	800696e <_printf_i+0x142>
 8006956:	6823      	ldr	r3, [r4, #0]
 8006958:	07df      	lsls	r7, r3, #31
 800695a:	d508      	bpl.n	800696e <_printf_i+0x142>
 800695c:	6923      	ldr	r3, [r4, #16]
 800695e:	6861      	ldr	r1, [r4, #4]
 8006960:	4299      	cmp	r1, r3
 8006962:	bfde      	ittt	le
 8006964:	2330      	movle	r3, #48	@ 0x30
 8006966:	f806 3c01 	strble.w	r3, [r6, #-1]
 800696a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800696e:	1b92      	subs	r2, r2, r6
 8006970:	6122      	str	r2, [r4, #16]
 8006972:	464b      	mov	r3, r9
 8006974:	4621      	mov	r1, r4
 8006976:	4640      	mov	r0, r8
 8006978:	f8cd a000 	str.w	sl, [sp]
 800697c:	aa03      	add	r2, sp, #12
 800697e:	f7ff fee3 	bl	8006748 <_printf_common>
 8006982:	3001      	adds	r0, #1
 8006984:	d14a      	bne.n	8006a1c <_printf_i+0x1f0>
 8006986:	f04f 30ff 	mov.w	r0, #4294967295
 800698a:	b004      	add	sp, #16
 800698c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006990:	6823      	ldr	r3, [r4, #0]
 8006992:	f043 0320 	orr.w	r3, r3, #32
 8006996:	6023      	str	r3, [r4, #0]
 8006998:	2778      	movs	r7, #120	@ 0x78
 800699a:	4832      	ldr	r0, [pc, #200]	@ (8006a64 <_printf_i+0x238>)
 800699c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80069a0:	6823      	ldr	r3, [r4, #0]
 80069a2:	6831      	ldr	r1, [r6, #0]
 80069a4:	061f      	lsls	r7, r3, #24
 80069a6:	f851 5b04 	ldr.w	r5, [r1], #4
 80069aa:	d402      	bmi.n	80069b2 <_printf_i+0x186>
 80069ac:	065f      	lsls	r7, r3, #25
 80069ae:	bf48      	it	mi
 80069b0:	b2ad      	uxthmi	r5, r5
 80069b2:	6031      	str	r1, [r6, #0]
 80069b4:	07d9      	lsls	r1, r3, #31
 80069b6:	bf44      	itt	mi
 80069b8:	f043 0320 	orrmi.w	r3, r3, #32
 80069bc:	6023      	strmi	r3, [r4, #0]
 80069be:	b11d      	cbz	r5, 80069c8 <_printf_i+0x19c>
 80069c0:	2310      	movs	r3, #16
 80069c2:	e7ad      	b.n	8006920 <_printf_i+0xf4>
 80069c4:	4826      	ldr	r0, [pc, #152]	@ (8006a60 <_printf_i+0x234>)
 80069c6:	e7e9      	b.n	800699c <_printf_i+0x170>
 80069c8:	6823      	ldr	r3, [r4, #0]
 80069ca:	f023 0320 	bic.w	r3, r3, #32
 80069ce:	6023      	str	r3, [r4, #0]
 80069d0:	e7f6      	b.n	80069c0 <_printf_i+0x194>
 80069d2:	4616      	mov	r6, r2
 80069d4:	e7bd      	b.n	8006952 <_printf_i+0x126>
 80069d6:	6833      	ldr	r3, [r6, #0]
 80069d8:	6825      	ldr	r5, [r4, #0]
 80069da:	1d18      	adds	r0, r3, #4
 80069dc:	6961      	ldr	r1, [r4, #20]
 80069de:	6030      	str	r0, [r6, #0]
 80069e0:	062e      	lsls	r6, r5, #24
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	d501      	bpl.n	80069ea <_printf_i+0x1be>
 80069e6:	6019      	str	r1, [r3, #0]
 80069e8:	e002      	b.n	80069f0 <_printf_i+0x1c4>
 80069ea:	0668      	lsls	r0, r5, #25
 80069ec:	d5fb      	bpl.n	80069e6 <_printf_i+0x1ba>
 80069ee:	8019      	strh	r1, [r3, #0]
 80069f0:	2300      	movs	r3, #0
 80069f2:	4616      	mov	r6, r2
 80069f4:	6123      	str	r3, [r4, #16]
 80069f6:	e7bc      	b.n	8006972 <_printf_i+0x146>
 80069f8:	6833      	ldr	r3, [r6, #0]
 80069fa:	2100      	movs	r1, #0
 80069fc:	1d1a      	adds	r2, r3, #4
 80069fe:	6032      	str	r2, [r6, #0]
 8006a00:	681e      	ldr	r6, [r3, #0]
 8006a02:	6862      	ldr	r2, [r4, #4]
 8006a04:	4630      	mov	r0, r6
 8006a06:	f000 fbe0 	bl	80071ca <memchr>
 8006a0a:	b108      	cbz	r0, 8006a10 <_printf_i+0x1e4>
 8006a0c:	1b80      	subs	r0, r0, r6
 8006a0e:	6060      	str	r0, [r4, #4]
 8006a10:	6863      	ldr	r3, [r4, #4]
 8006a12:	6123      	str	r3, [r4, #16]
 8006a14:	2300      	movs	r3, #0
 8006a16:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a1a:	e7aa      	b.n	8006972 <_printf_i+0x146>
 8006a1c:	4632      	mov	r2, r6
 8006a1e:	4649      	mov	r1, r9
 8006a20:	4640      	mov	r0, r8
 8006a22:	6923      	ldr	r3, [r4, #16]
 8006a24:	47d0      	blx	sl
 8006a26:	3001      	adds	r0, #1
 8006a28:	d0ad      	beq.n	8006986 <_printf_i+0x15a>
 8006a2a:	6823      	ldr	r3, [r4, #0]
 8006a2c:	079b      	lsls	r3, r3, #30
 8006a2e:	d413      	bmi.n	8006a58 <_printf_i+0x22c>
 8006a30:	68e0      	ldr	r0, [r4, #12]
 8006a32:	9b03      	ldr	r3, [sp, #12]
 8006a34:	4298      	cmp	r0, r3
 8006a36:	bfb8      	it	lt
 8006a38:	4618      	movlt	r0, r3
 8006a3a:	e7a6      	b.n	800698a <_printf_i+0x15e>
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	4632      	mov	r2, r6
 8006a40:	4649      	mov	r1, r9
 8006a42:	4640      	mov	r0, r8
 8006a44:	47d0      	blx	sl
 8006a46:	3001      	adds	r0, #1
 8006a48:	d09d      	beq.n	8006986 <_printf_i+0x15a>
 8006a4a:	3501      	adds	r5, #1
 8006a4c:	68e3      	ldr	r3, [r4, #12]
 8006a4e:	9903      	ldr	r1, [sp, #12]
 8006a50:	1a5b      	subs	r3, r3, r1
 8006a52:	42ab      	cmp	r3, r5
 8006a54:	dcf2      	bgt.n	8006a3c <_printf_i+0x210>
 8006a56:	e7eb      	b.n	8006a30 <_printf_i+0x204>
 8006a58:	2500      	movs	r5, #0
 8006a5a:	f104 0619 	add.w	r6, r4, #25
 8006a5e:	e7f5      	b.n	8006a4c <_printf_i+0x220>
 8006a60:	0800a8d5 	.word	0x0800a8d5
 8006a64:	0800a8e6 	.word	0x0800a8e6

08006a68 <_scanf_float>:
 8006a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a6c:	b087      	sub	sp, #28
 8006a6e:	9303      	str	r3, [sp, #12]
 8006a70:	688b      	ldr	r3, [r1, #8]
 8006a72:	4691      	mov	r9, r2
 8006a74:	1e5a      	subs	r2, r3, #1
 8006a76:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006a7a:	bf82      	ittt	hi
 8006a7c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006a80:	eb03 0b05 	addhi.w	fp, r3, r5
 8006a84:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006a88:	460a      	mov	r2, r1
 8006a8a:	f04f 0500 	mov.w	r5, #0
 8006a8e:	bf88      	it	hi
 8006a90:	608b      	strhi	r3, [r1, #8]
 8006a92:	680b      	ldr	r3, [r1, #0]
 8006a94:	4680      	mov	r8, r0
 8006a96:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8006a9a:	f842 3b1c 	str.w	r3, [r2], #28
 8006a9e:	460c      	mov	r4, r1
 8006aa0:	bf98      	it	ls
 8006aa2:	f04f 0b00 	movls.w	fp, #0
 8006aa6:	4616      	mov	r6, r2
 8006aa8:	46aa      	mov	sl, r5
 8006aaa:	462f      	mov	r7, r5
 8006aac:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006ab0:	9201      	str	r2, [sp, #4]
 8006ab2:	9502      	str	r5, [sp, #8]
 8006ab4:	68a2      	ldr	r2, [r4, #8]
 8006ab6:	b15a      	cbz	r2, 8006ad0 <_scanf_float+0x68>
 8006ab8:	f8d9 3000 	ldr.w	r3, [r9]
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	2b4e      	cmp	r3, #78	@ 0x4e
 8006ac0:	d862      	bhi.n	8006b88 <_scanf_float+0x120>
 8006ac2:	2b40      	cmp	r3, #64	@ 0x40
 8006ac4:	d83a      	bhi.n	8006b3c <_scanf_float+0xd4>
 8006ac6:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006aca:	b2c8      	uxtb	r0, r1
 8006acc:	280e      	cmp	r0, #14
 8006ace:	d938      	bls.n	8006b42 <_scanf_float+0xda>
 8006ad0:	b11f      	cbz	r7, 8006ada <_scanf_float+0x72>
 8006ad2:	6823      	ldr	r3, [r4, #0]
 8006ad4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ad8:	6023      	str	r3, [r4, #0]
 8006ada:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006ade:	f1ba 0f01 	cmp.w	sl, #1
 8006ae2:	f200 8114 	bhi.w	8006d0e <_scanf_float+0x2a6>
 8006ae6:	9b01      	ldr	r3, [sp, #4]
 8006ae8:	429e      	cmp	r6, r3
 8006aea:	f200 8105 	bhi.w	8006cf8 <_scanf_float+0x290>
 8006aee:	2001      	movs	r0, #1
 8006af0:	b007      	add	sp, #28
 8006af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006af6:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006afa:	2a0d      	cmp	r2, #13
 8006afc:	d8e8      	bhi.n	8006ad0 <_scanf_float+0x68>
 8006afe:	a101      	add	r1, pc, #4	@ (adr r1, 8006b04 <_scanf_float+0x9c>)
 8006b00:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006b04:	08006c4d 	.word	0x08006c4d
 8006b08:	08006ad1 	.word	0x08006ad1
 8006b0c:	08006ad1 	.word	0x08006ad1
 8006b10:	08006ad1 	.word	0x08006ad1
 8006b14:	08006ca9 	.word	0x08006ca9
 8006b18:	08006c83 	.word	0x08006c83
 8006b1c:	08006ad1 	.word	0x08006ad1
 8006b20:	08006ad1 	.word	0x08006ad1
 8006b24:	08006c5b 	.word	0x08006c5b
 8006b28:	08006ad1 	.word	0x08006ad1
 8006b2c:	08006ad1 	.word	0x08006ad1
 8006b30:	08006ad1 	.word	0x08006ad1
 8006b34:	08006ad1 	.word	0x08006ad1
 8006b38:	08006c17 	.word	0x08006c17
 8006b3c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006b40:	e7db      	b.n	8006afa <_scanf_float+0x92>
 8006b42:	290e      	cmp	r1, #14
 8006b44:	d8c4      	bhi.n	8006ad0 <_scanf_float+0x68>
 8006b46:	a001      	add	r0, pc, #4	@ (adr r0, 8006b4c <_scanf_float+0xe4>)
 8006b48:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006b4c:	08006c07 	.word	0x08006c07
 8006b50:	08006ad1 	.word	0x08006ad1
 8006b54:	08006c07 	.word	0x08006c07
 8006b58:	08006c97 	.word	0x08006c97
 8006b5c:	08006ad1 	.word	0x08006ad1
 8006b60:	08006ba9 	.word	0x08006ba9
 8006b64:	08006bed 	.word	0x08006bed
 8006b68:	08006bed 	.word	0x08006bed
 8006b6c:	08006bed 	.word	0x08006bed
 8006b70:	08006bed 	.word	0x08006bed
 8006b74:	08006bed 	.word	0x08006bed
 8006b78:	08006bed 	.word	0x08006bed
 8006b7c:	08006bed 	.word	0x08006bed
 8006b80:	08006bed 	.word	0x08006bed
 8006b84:	08006bed 	.word	0x08006bed
 8006b88:	2b6e      	cmp	r3, #110	@ 0x6e
 8006b8a:	d809      	bhi.n	8006ba0 <_scanf_float+0x138>
 8006b8c:	2b60      	cmp	r3, #96	@ 0x60
 8006b8e:	d8b2      	bhi.n	8006af6 <_scanf_float+0x8e>
 8006b90:	2b54      	cmp	r3, #84	@ 0x54
 8006b92:	d07b      	beq.n	8006c8c <_scanf_float+0x224>
 8006b94:	2b59      	cmp	r3, #89	@ 0x59
 8006b96:	d19b      	bne.n	8006ad0 <_scanf_float+0x68>
 8006b98:	2d07      	cmp	r5, #7
 8006b9a:	d199      	bne.n	8006ad0 <_scanf_float+0x68>
 8006b9c:	2508      	movs	r5, #8
 8006b9e:	e02f      	b.n	8006c00 <_scanf_float+0x198>
 8006ba0:	2b74      	cmp	r3, #116	@ 0x74
 8006ba2:	d073      	beq.n	8006c8c <_scanf_float+0x224>
 8006ba4:	2b79      	cmp	r3, #121	@ 0x79
 8006ba6:	e7f6      	b.n	8006b96 <_scanf_float+0x12e>
 8006ba8:	6821      	ldr	r1, [r4, #0]
 8006baa:	05c8      	lsls	r0, r1, #23
 8006bac:	d51e      	bpl.n	8006bec <_scanf_float+0x184>
 8006bae:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8006bb2:	6021      	str	r1, [r4, #0]
 8006bb4:	3701      	adds	r7, #1
 8006bb6:	f1bb 0f00 	cmp.w	fp, #0
 8006bba:	d003      	beq.n	8006bc4 <_scanf_float+0x15c>
 8006bbc:	3201      	adds	r2, #1
 8006bbe:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006bc2:	60a2      	str	r2, [r4, #8]
 8006bc4:	68a3      	ldr	r3, [r4, #8]
 8006bc6:	3b01      	subs	r3, #1
 8006bc8:	60a3      	str	r3, [r4, #8]
 8006bca:	6923      	ldr	r3, [r4, #16]
 8006bcc:	3301      	adds	r3, #1
 8006bce:	6123      	str	r3, [r4, #16]
 8006bd0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8006bd4:	3b01      	subs	r3, #1
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	f8c9 3004 	str.w	r3, [r9, #4]
 8006bdc:	f340 8083 	ble.w	8006ce6 <_scanf_float+0x27e>
 8006be0:	f8d9 3000 	ldr.w	r3, [r9]
 8006be4:	3301      	adds	r3, #1
 8006be6:	f8c9 3000 	str.w	r3, [r9]
 8006bea:	e763      	b.n	8006ab4 <_scanf_float+0x4c>
 8006bec:	eb1a 0105 	adds.w	r1, sl, r5
 8006bf0:	f47f af6e 	bne.w	8006ad0 <_scanf_float+0x68>
 8006bf4:	460d      	mov	r5, r1
 8006bf6:	468a      	mov	sl, r1
 8006bf8:	6822      	ldr	r2, [r4, #0]
 8006bfa:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006bfe:	6022      	str	r2, [r4, #0]
 8006c00:	f806 3b01 	strb.w	r3, [r6], #1
 8006c04:	e7de      	b.n	8006bc4 <_scanf_float+0x15c>
 8006c06:	6822      	ldr	r2, [r4, #0]
 8006c08:	0610      	lsls	r0, r2, #24
 8006c0a:	f57f af61 	bpl.w	8006ad0 <_scanf_float+0x68>
 8006c0e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006c12:	6022      	str	r2, [r4, #0]
 8006c14:	e7f4      	b.n	8006c00 <_scanf_float+0x198>
 8006c16:	f1ba 0f00 	cmp.w	sl, #0
 8006c1a:	d10c      	bne.n	8006c36 <_scanf_float+0x1ce>
 8006c1c:	b977      	cbnz	r7, 8006c3c <_scanf_float+0x1d4>
 8006c1e:	6822      	ldr	r2, [r4, #0]
 8006c20:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006c24:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006c28:	d108      	bne.n	8006c3c <_scanf_float+0x1d4>
 8006c2a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006c2e:	f04f 0a01 	mov.w	sl, #1
 8006c32:	6022      	str	r2, [r4, #0]
 8006c34:	e7e4      	b.n	8006c00 <_scanf_float+0x198>
 8006c36:	f1ba 0f02 	cmp.w	sl, #2
 8006c3a:	d051      	beq.n	8006ce0 <_scanf_float+0x278>
 8006c3c:	2d01      	cmp	r5, #1
 8006c3e:	d002      	beq.n	8006c46 <_scanf_float+0x1de>
 8006c40:	2d04      	cmp	r5, #4
 8006c42:	f47f af45 	bne.w	8006ad0 <_scanf_float+0x68>
 8006c46:	3501      	adds	r5, #1
 8006c48:	b2ed      	uxtb	r5, r5
 8006c4a:	e7d9      	b.n	8006c00 <_scanf_float+0x198>
 8006c4c:	f1ba 0f01 	cmp.w	sl, #1
 8006c50:	f47f af3e 	bne.w	8006ad0 <_scanf_float+0x68>
 8006c54:	f04f 0a02 	mov.w	sl, #2
 8006c58:	e7d2      	b.n	8006c00 <_scanf_float+0x198>
 8006c5a:	b975      	cbnz	r5, 8006c7a <_scanf_float+0x212>
 8006c5c:	2f00      	cmp	r7, #0
 8006c5e:	f47f af38 	bne.w	8006ad2 <_scanf_float+0x6a>
 8006c62:	6822      	ldr	r2, [r4, #0]
 8006c64:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006c68:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006c6c:	f040 80ff 	bne.w	8006e6e <_scanf_float+0x406>
 8006c70:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006c74:	2501      	movs	r5, #1
 8006c76:	6022      	str	r2, [r4, #0]
 8006c78:	e7c2      	b.n	8006c00 <_scanf_float+0x198>
 8006c7a:	2d03      	cmp	r5, #3
 8006c7c:	d0e3      	beq.n	8006c46 <_scanf_float+0x1de>
 8006c7e:	2d05      	cmp	r5, #5
 8006c80:	e7df      	b.n	8006c42 <_scanf_float+0x1da>
 8006c82:	2d02      	cmp	r5, #2
 8006c84:	f47f af24 	bne.w	8006ad0 <_scanf_float+0x68>
 8006c88:	2503      	movs	r5, #3
 8006c8a:	e7b9      	b.n	8006c00 <_scanf_float+0x198>
 8006c8c:	2d06      	cmp	r5, #6
 8006c8e:	f47f af1f 	bne.w	8006ad0 <_scanf_float+0x68>
 8006c92:	2507      	movs	r5, #7
 8006c94:	e7b4      	b.n	8006c00 <_scanf_float+0x198>
 8006c96:	6822      	ldr	r2, [r4, #0]
 8006c98:	0591      	lsls	r1, r2, #22
 8006c9a:	f57f af19 	bpl.w	8006ad0 <_scanf_float+0x68>
 8006c9e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8006ca2:	6022      	str	r2, [r4, #0]
 8006ca4:	9702      	str	r7, [sp, #8]
 8006ca6:	e7ab      	b.n	8006c00 <_scanf_float+0x198>
 8006ca8:	6822      	ldr	r2, [r4, #0]
 8006caa:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006cae:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006cb2:	d005      	beq.n	8006cc0 <_scanf_float+0x258>
 8006cb4:	0550      	lsls	r0, r2, #21
 8006cb6:	f57f af0b 	bpl.w	8006ad0 <_scanf_float+0x68>
 8006cba:	2f00      	cmp	r7, #0
 8006cbc:	f000 80d7 	beq.w	8006e6e <_scanf_float+0x406>
 8006cc0:	0591      	lsls	r1, r2, #22
 8006cc2:	bf58      	it	pl
 8006cc4:	9902      	ldrpl	r1, [sp, #8]
 8006cc6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006cca:	bf58      	it	pl
 8006ccc:	1a79      	subpl	r1, r7, r1
 8006cce:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006cd2:	f04f 0700 	mov.w	r7, #0
 8006cd6:	bf58      	it	pl
 8006cd8:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006cdc:	6022      	str	r2, [r4, #0]
 8006cde:	e78f      	b.n	8006c00 <_scanf_float+0x198>
 8006ce0:	f04f 0a03 	mov.w	sl, #3
 8006ce4:	e78c      	b.n	8006c00 <_scanf_float+0x198>
 8006ce6:	4649      	mov	r1, r9
 8006ce8:	4640      	mov	r0, r8
 8006cea:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006cee:	4798      	blx	r3
 8006cf0:	2800      	cmp	r0, #0
 8006cf2:	f43f aedf 	beq.w	8006ab4 <_scanf_float+0x4c>
 8006cf6:	e6eb      	b.n	8006ad0 <_scanf_float+0x68>
 8006cf8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006cfc:	464a      	mov	r2, r9
 8006cfe:	4640      	mov	r0, r8
 8006d00:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006d04:	4798      	blx	r3
 8006d06:	6923      	ldr	r3, [r4, #16]
 8006d08:	3b01      	subs	r3, #1
 8006d0a:	6123      	str	r3, [r4, #16]
 8006d0c:	e6eb      	b.n	8006ae6 <_scanf_float+0x7e>
 8006d0e:	1e6b      	subs	r3, r5, #1
 8006d10:	2b06      	cmp	r3, #6
 8006d12:	d824      	bhi.n	8006d5e <_scanf_float+0x2f6>
 8006d14:	2d02      	cmp	r5, #2
 8006d16:	d836      	bhi.n	8006d86 <_scanf_float+0x31e>
 8006d18:	9b01      	ldr	r3, [sp, #4]
 8006d1a:	429e      	cmp	r6, r3
 8006d1c:	f67f aee7 	bls.w	8006aee <_scanf_float+0x86>
 8006d20:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006d24:	464a      	mov	r2, r9
 8006d26:	4640      	mov	r0, r8
 8006d28:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006d2c:	4798      	blx	r3
 8006d2e:	6923      	ldr	r3, [r4, #16]
 8006d30:	3b01      	subs	r3, #1
 8006d32:	6123      	str	r3, [r4, #16]
 8006d34:	e7f0      	b.n	8006d18 <_scanf_float+0x2b0>
 8006d36:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006d3a:	464a      	mov	r2, r9
 8006d3c:	4640      	mov	r0, r8
 8006d3e:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006d42:	4798      	blx	r3
 8006d44:	6923      	ldr	r3, [r4, #16]
 8006d46:	3b01      	subs	r3, #1
 8006d48:	6123      	str	r3, [r4, #16]
 8006d4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006d4e:	fa5f fa8a 	uxtb.w	sl, sl
 8006d52:	f1ba 0f02 	cmp.w	sl, #2
 8006d56:	d1ee      	bne.n	8006d36 <_scanf_float+0x2ce>
 8006d58:	3d03      	subs	r5, #3
 8006d5a:	b2ed      	uxtb	r5, r5
 8006d5c:	1b76      	subs	r6, r6, r5
 8006d5e:	6823      	ldr	r3, [r4, #0]
 8006d60:	05da      	lsls	r2, r3, #23
 8006d62:	d530      	bpl.n	8006dc6 <_scanf_float+0x35e>
 8006d64:	055b      	lsls	r3, r3, #21
 8006d66:	d511      	bpl.n	8006d8c <_scanf_float+0x324>
 8006d68:	9b01      	ldr	r3, [sp, #4]
 8006d6a:	429e      	cmp	r6, r3
 8006d6c:	f67f aebf 	bls.w	8006aee <_scanf_float+0x86>
 8006d70:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006d74:	464a      	mov	r2, r9
 8006d76:	4640      	mov	r0, r8
 8006d78:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006d7c:	4798      	blx	r3
 8006d7e:	6923      	ldr	r3, [r4, #16]
 8006d80:	3b01      	subs	r3, #1
 8006d82:	6123      	str	r3, [r4, #16]
 8006d84:	e7f0      	b.n	8006d68 <_scanf_float+0x300>
 8006d86:	46aa      	mov	sl, r5
 8006d88:	46b3      	mov	fp, r6
 8006d8a:	e7de      	b.n	8006d4a <_scanf_float+0x2e2>
 8006d8c:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006d90:	6923      	ldr	r3, [r4, #16]
 8006d92:	2965      	cmp	r1, #101	@ 0x65
 8006d94:	f103 33ff 	add.w	r3, r3, #4294967295
 8006d98:	f106 35ff 	add.w	r5, r6, #4294967295
 8006d9c:	6123      	str	r3, [r4, #16]
 8006d9e:	d00c      	beq.n	8006dba <_scanf_float+0x352>
 8006da0:	2945      	cmp	r1, #69	@ 0x45
 8006da2:	d00a      	beq.n	8006dba <_scanf_float+0x352>
 8006da4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006da8:	464a      	mov	r2, r9
 8006daa:	4640      	mov	r0, r8
 8006dac:	4798      	blx	r3
 8006dae:	6923      	ldr	r3, [r4, #16]
 8006db0:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006db4:	3b01      	subs	r3, #1
 8006db6:	1eb5      	subs	r5, r6, #2
 8006db8:	6123      	str	r3, [r4, #16]
 8006dba:	464a      	mov	r2, r9
 8006dbc:	4640      	mov	r0, r8
 8006dbe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006dc2:	4798      	blx	r3
 8006dc4:	462e      	mov	r6, r5
 8006dc6:	6822      	ldr	r2, [r4, #0]
 8006dc8:	f012 0210 	ands.w	r2, r2, #16
 8006dcc:	d001      	beq.n	8006dd2 <_scanf_float+0x36a>
 8006dce:	2000      	movs	r0, #0
 8006dd0:	e68e      	b.n	8006af0 <_scanf_float+0x88>
 8006dd2:	7032      	strb	r2, [r6, #0]
 8006dd4:	6823      	ldr	r3, [r4, #0]
 8006dd6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006dda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006dde:	d125      	bne.n	8006e2c <_scanf_float+0x3c4>
 8006de0:	9b02      	ldr	r3, [sp, #8]
 8006de2:	429f      	cmp	r7, r3
 8006de4:	d00a      	beq.n	8006dfc <_scanf_float+0x394>
 8006de6:	1bda      	subs	r2, r3, r7
 8006de8:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006dec:	429e      	cmp	r6, r3
 8006dee:	bf28      	it	cs
 8006df0:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006df4:	4630      	mov	r0, r6
 8006df6:	491f      	ldr	r1, [pc, #124]	@ (8006e74 <_scanf_float+0x40c>)
 8006df8:	f000 f902 	bl	8007000 <siprintf>
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	4640      	mov	r0, r8
 8006e00:	9901      	ldr	r1, [sp, #4]
 8006e02:	f002 fbf9 	bl	80095f8 <_strtod_r>
 8006e06:	9b03      	ldr	r3, [sp, #12]
 8006e08:	6825      	ldr	r5, [r4, #0]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f015 0f02 	tst.w	r5, #2
 8006e10:	4606      	mov	r6, r0
 8006e12:	460f      	mov	r7, r1
 8006e14:	f103 0204 	add.w	r2, r3, #4
 8006e18:	d015      	beq.n	8006e46 <_scanf_float+0x3de>
 8006e1a:	9903      	ldr	r1, [sp, #12]
 8006e1c:	600a      	str	r2, [r1, #0]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	e9c3 6700 	strd	r6, r7, [r3]
 8006e24:	68e3      	ldr	r3, [r4, #12]
 8006e26:	3301      	adds	r3, #1
 8006e28:	60e3      	str	r3, [r4, #12]
 8006e2a:	e7d0      	b.n	8006dce <_scanf_float+0x366>
 8006e2c:	9b04      	ldr	r3, [sp, #16]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d0e4      	beq.n	8006dfc <_scanf_float+0x394>
 8006e32:	9905      	ldr	r1, [sp, #20]
 8006e34:	230a      	movs	r3, #10
 8006e36:	4640      	mov	r0, r8
 8006e38:	3101      	adds	r1, #1
 8006e3a:	f7ff f9af 	bl	800619c <_strtol_r>
 8006e3e:	9b04      	ldr	r3, [sp, #16]
 8006e40:	9e05      	ldr	r6, [sp, #20]
 8006e42:	1ac2      	subs	r2, r0, r3
 8006e44:	e7d0      	b.n	8006de8 <_scanf_float+0x380>
 8006e46:	076d      	lsls	r5, r5, #29
 8006e48:	d4e7      	bmi.n	8006e1a <_scanf_float+0x3b2>
 8006e4a:	9d03      	ldr	r5, [sp, #12]
 8006e4c:	602a      	str	r2, [r5, #0]
 8006e4e:	681d      	ldr	r5, [r3, #0]
 8006e50:	4602      	mov	r2, r0
 8006e52:	460b      	mov	r3, r1
 8006e54:	f7f9 fe8e 	bl	8000b74 <__aeabi_dcmpun>
 8006e58:	b120      	cbz	r0, 8006e64 <_scanf_float+0x3fc>
 8006e5a:	4807      	ldr	r0, [pc, #28]	@ (8006e78 <_scanf_float+0x410>)
 8006e5c:	f000 f9d2 	bl	8007204 <nanf>
 8006e60:	6028      	str	r0, [r5, #0]
 8006e62:	e7df      	b.n	8006e24 <_scanf_float+0x3bc>
 8006e64:	4630      	mov	r0, r6
 8006e66:	4639      	mov	r1, r7
 8006e68:	f7f9 fee2 	bl	8000c30 <__aeabi_d2f>
 8006e6c:	e7f8      	b.n	8006e60 <_scanf_float+0x3f8>
 8006e6e:	2700      	movs	r7, #0
 8006e70:	e633      	b.n	8006ada <_scanf_float+0x72>
 8006e72:	bf00      	nop
 8006e74:	0800a8f7 	.word	0x0800a8f7
 8006e78:	0800aa38 	.word	0x0800aa38

08006e7c <std>:
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	b510      	push	{r4, lr}
 8006e80:	4604      	mov	r4, r0
 8006e82:	e9c0 3300 	strd	r3, r3, [r0]
 8006e86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e8a:	6083      	str	r3, [r0, #8]
 8006e8c:	8181      	strh	r1, [r0, #12]
 8006e8e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006e90:	81c2      	strh	r2, [r0, #14]
 8006e92:	6183      	str	r3, [r0, #24]
 8006e94:	4619      	mov	r1, r3
 8006e96:	2208      	movs	r2, #8
 8006e98:	305c      	adds	r0, #92	@ 0x5c
 8006e9a:	f000 f916 	bl	80070ca <memset>
 8006e9e:	4b0d      	ldr	r3, [pc, #52]	@ (8006ed4 <std+0x58>)
 8006ea0:	6224      	str	r4, [r4, #32]
 8006ea2:	6263      	str	r3, [r4, #36]	@ 0x24
 8006ea4:	4b0c      	ldr	r3, [pc, #48]	@ (8006ed8 <std+0x5c>)
 8006ea6:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006ea8:	4b0c      	ldr	r3, [pc, #48]	@ (8006edc <std+0x60>)
 8006eaa:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006eac:	4b0c      	ldr	r3, [pc, #48]	@ (8006ee0 <std+0x64>)
 8006eae:	6323      	str	r3, [r4, #48]	@ 0x30
 8006eb0:	4b0c      	ldr	r3, [pc, #48]	@ (8006ee4 <std+0x68>)
 8006eb2:	429c      	cmp	r4, r3
 8006eb4:	d006      	beq.n	8006ec4 <std+0x48>
 8006eb6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006eba:	4294      	cmp	r4, r2
 8006ebc:	d002      	beq.n	8006ec4 <std+0x48>
 8006ebe:	33d0      	adds	r3, #208	@ 0xd0
 8006ec0:	429c      	cmp	r4, r3
 8006ec2:	d105      	bne.n	8006ed0 <std+0x54>
 8006ec4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006ec8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ecc:	f000 b97a 	b.w	80071c4 <__retarget_lock_init_recursive>
 8006ed0:	bd10      	pop	{r4, pc}
 8006ed2:	bf00      	nop
 8006ed4:	08007045 	.word	0x08007045
 8006ed8:	08007067 	.word	0x08007067
 8006edc:	0800709f 	.word	0x0800709f
 8006ee0:	080070c3 	.word	0x080070c3
 8006ee4:	20000aa8 	.word	0x20000aa8

08006ee8 <stdio_exit_handler>:
 8006ee8:	4a02      	ldr	r2, [pc, #8]	@ (8006ef4 <stdio_exit_handler+0xc>)
 8006eea:	4903      	ldr	r1, [pc, #12]	@ (8006ef8 <stdio_exit_handler+0x10>)
 8006eec:	4803      	ldr	r0, [pc, #12]	@ (8006efc <stdio_exit_handler+0x14>)
 8006eee:	f000 b869 	b.w	8006fc4 <_fwalk_sglue>
 8006ef2:	bf00      	nop
 8006ef4:	2000000c 	.word	0x2000000c
 8006ef8:	080099b5 	.word	0x080099b5
 8006efc:	2000001c 	.word	0x2000001c

08006f00 <cleanup_stdio>:
 8006f00:	6841      	ldr	r1, [r0, #4]
 8006f02:	4b0c      	ldr	r3, [pc, #48]	@ (8006f34 <cleanup_stdio+0x34>)
 8006f04:	b510      	push	{r4, lr}
 8006f06:	4299      	cmp	r1, r3
 8006f08:	4604      	mov	r4, r0
 8006f0a:	d001      	beq.n	8006f10 <cleanup_stdio+0x10>
 8006f0c:	f002 fd52 	bl	80099b4 <_fflush_r>
 8006f10:	68a1      	ldr	r1, [r4, #8]
 8006f12:	4b09      	ldr	r3, [pc, #36]	@ (8006f38 <cleanup_stdio+0x38>)
 8006f14:	4299      	cmp	r1, r3
 8006f16:	d002      	beq.n	8006f1e <cleanup_stdio+0x1e>
 8006f18:	4620      	mov	r0, r4
 8006f1a:	f002 fd4b 	bl	80099b4 <_fflush_r>
 8006f1e:	68e1      	ldr	r1, [r4, #12]
 8006f20:	4b06      	ldr	r3, [pc, #24]	@ (8006f3c <cleanup_stdio+0x3c>)
 8006f22:	4299      	cmp	r1, r3
 8006f24:	d004      	beq.n	8006f30 <cleanup_stdio+0x30>
 8006f26:	4620      	mov	r0, r4
 8006f28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f2c:	f002 bd42 	b.w	80099b4 <_fflush_r>
 8006f30:	bd10      	pop	{r4, pc}
 8006f32:	bf00      	nop
 8006f34:	20000aa8 	.word	0x20000aa8
 8006f38:	20000b10 	.word	0x20000b10
 8006f3c:	20000b78 	.word	0x20000b78

08006f40 <global_stdio_init.part.0>:
 8006f40:	b510      	push	{r4, lr}
 8006f42:	4b0b      	ldr	r3, [pc, #44]	@ (8006f70 <global_stdio_init.part.0+0x30>)
 8006f44:	4c0b      	ldr	r4, [pc, #44]	@ (8006f74 <global_stdio_init.part.0+0x34>)
 8006f46:	4a0c      	ldr	r2, [pc, #48]	@ (8006f78 <global_stdio_init.part.0+0x38>)
 8006f48:	4620      	mov	r0, r4
 8006f4a:	601a      	str	r2, [r3, #0]
 8006f4c:	2104      	movs	r1, #4
 8006f4e:	2200      	movs	r2, #0
 8006f50:	f7ff ff94 	bl	8006e7c <std>
 8006f54:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006f58:	2201      	movs	r2, #1
 8006f5a:	2109      	movs	r1, #9
 8006f5c:	f7ff ff8e 	bl	8006e7c <std>
 8006f60:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006f64:	2202      	movs	r2, #2
 8006f66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f6a:	2112      	movs	r1, #18
 8006f6c:	f7ff bf86 	b.w	8006e7c <std>
 8006f70:	20000be0 	.word	0x20000be0
 8006f74:	20000aa8 	.word	0x20000aa8
 8006f78:	08006ee9 	.word	0x08006ee9

08006f7c <__sfp_lock_acquire>:
 8006f7c:	4801      	ldr	r0, [pc, #4]	@ (8006f84 <__sfp_lock_acquire+0x8>)
 8006f7e:	f000 b922 	b.w	80071c6 <__retarget_lock_acquire_recursive>
 8006f82:	bf00      	nop
 8006f84:	20000be9 	.word	0x20000be9

08006f88 <__sfp_lock_release>:
 8006f88:	4801      	ldr	r0, [pc, #4]	@ (8006f90 <__sfp_lock_release+0x8>)
 8006f8a:	f000 b91d 	b.w	80071c8 <__retarget_lock_release_recursive>
 8006f8e:	bf00      	nop
 8006f90:	20000be9 	.word	0x20000be9

08006f94 <__sinit>:
 8006f94:	b510      	push	{r4, lr}
 8006f96:	4604      	mov	r4, r0
 8006f98:	f7ff fff0 	bl	8006f7c <__sfp_lock_acquire>
 8006f9c:	6a23      	ldr	r3, [r4, #32]
 8006f9e:	b11b      	cbz	r3, 8006fa8 <__sinit+0x14>
 8006fa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fa4:	f7ff bff0 	b.w	8006f88 <__sfp_lock_release>
 8006fa8:	4b04      	ldr	r3, [pc, #16]	@ (8006fbc <__sinit+0x28>)
 8006faa:	6223      	str	r3, [r4, #32]
 8006fac:	4b04      	ldr	r3, [pc, #16]	@ (8006fc0 <__sinit+0x2c>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d1f5      	bne.n	8006fa0 <__sinit+0xc>
 8006fb4:	f7ff ffc4 	bl	8006f40 <global_stdio_init.part.0>
 8006fb8:	e7f2      	b.n	8006fa0 <__sinit+0xc>
 8006fba:	bf00      	nop
 8006fbc:	08006f01 	.word	0x08006f01
 8006fc0:	20000be0 	.word	0x20000be0

08006fc4 <_fwalk_sglue>:
 8006fc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fc8:	4607      	mov	r7, r0
 8006fca:	4688      	mov	r8, r1
 8006fcc:	4614      	mov	r4, r2
 8006fce:	2600      	movs	r6, #0
 8006fd0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006fd4:	f1b9 0901 	subs.w	r9, r9, #1
 8006fd8:	d505      	bpl.n	8006fe6 <_fwalk_sglue+0x22>
 8006fda:	6824      	ldr	r4, [r4, #0]
 8006fdc:	2c00      	cmp	r4, #0
 8006fde:	d1f7      	bne.n	8006fd0 <_fwalk_sglue+0xc>
 8006fe0:	4630      	mov	r0, r6
 8006fe2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fe6:	89ab      	ldrh	r3, [r5, #12]
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	d907      	bls.n	8006ffc <_fwalk_sglue+0x38>
 8006fec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006ff0:	3301      	adds	r3, #1
 8006ff2:	d003      	beq.n	8006ffc <_fwalk_sglue+0x38>
 8006ff4:	4629      	mov	r1, r5
 8006ff6:	4638      	mov	r0, r7
 8006ff8:	47c0      	blx	r8
 8006ffa:	4306      	orrs	r6, r0
 8006ffc:	3568      	adds	r5, #104	@ 0x68
 8006ffe:	e7e9      	b.n	8006fd4 <_fwalk_sglue+0x10>

08007000 <siprintf>:
 8007000:	b40e      	push	{r1, r2, r3}
 8007002:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007006:	b510      	push	{r4, lr}
 8007008:	2400      	movs	r4, #0
 800700a:	b09d      	sub	sp, #116	@ 0x74
 800700c:	ab1f      	add	r3, sp, #124	@ 0x7c
 800700e:	9002      	str	r0, [sp, #8]
 8007010:	9006      	str	r0, [sp, #24]
 8007012:	9107      	str	r1, [sp, #28]
 8007014:	9104      	str	r1, [sp, #16]
 8007016:	4809      	ldr	r0, [pc, #36]	@ (800703c <siprintf+0x3c>)
 8007018:	4909      	ldr	r1, [pc, #36]	@ (8007040 <siprintf+0x40>)
 800701a:	f853 2b04 	ldr.w	r2, [r3], #4
 800701e:	9105      	str	r1, [sp, #20]
 8007020:	6800      	ldr	r0, [r0, #0]
 8007022:	a902      	add	r1, sp, #8
 8007024:	9301      	str	r3, [sp, #4]
 8007026:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007028:	f002 fb48 	bl	80096bc <_svfiprintf_r>
 800702c:	9b02      	ldr	r3, [sp, #8]
 800702e:	701c      	strb	r4, [r3, #0]
 8007030:	b01d      	add	sp, #116	@ 0x74
 8007032:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007036:	b003      	add	sp, #12
 8007038:	4770      	bx	lr
 800703a:	bf00      	nop
 800703c:	20000018 	.word	0x20000018
 8007040:	ffff0208 	.word	0xffff0208

08007044 <__sread>:
 8007044:	b510      	push	{r4, lr}
 8007046:	460c      	mov	r4, r1
 8007048:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800704c:	f000 f86c 	bl	8007128 <_read_r>
 8007050:	2800      	cmp	r0, #0
 8007052:	bfab      	itete	ge
 8007054:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007056:	89a3      	ldrhlt	r3, [r4, #12]
 8007058:	181b      	addge	r3, r3, r0
 800705a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800705e:	bfac      	ite	ge
 8007060:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007062:	81a3      	strhlt	r3, [r4, #12]
 8007064:	bd10      	pop	{r4, pc}

08007066 <__swrite>:
 8007066:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800706a:	461f      	mov	r7, r3
 800706c:	898b      	ldrh	r3, [r1, #12]
 800706e:	4605      	mov	r5, r0
 8007070:	05db      	lsls	r3, r3, #23
 8007072:	460c      	mov	r4, r1
 8007074:	4616      	mov	r6, r2
 8007076:	d505      	bpl.n	8007084 <__swrite+0x1e>
 8007078:	2302      	movs	r3, #2
 800707a:	2200      	movs	r2, #0
 800707c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007080:	f000 f840 	bl	8007104 <_lseek_r>
 8007084:	89a3      	ldrh	r3, [r4, #12]
 8007086:	4632      	mov	r2, r6
 8007088:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800708c:	81a3      	strh	r3, [r4, #12]
 800708e:	4628      	mov	r0, r5
 8007090:	463b      	mov	r3, r7
 8007092:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007096:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800709a:	f000 b857 	b.w	800714c <_write_r>

0800709e <__sseek>:
 800709e:	b510      	push	{r4, lr}
 80070a0:	460c      	mov	r4, r1
 80070a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070a6:	f000 f82d 	bl	8007104 <_lseek_r>
 80070aa:	1c43      	adds	r3, r0, #1
 80070ac:	89a3      	ldrh	r3, [r4, #12]
 80070ae:	bf15      	itete	ne
 80070b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80070b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80070b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80070ba:	81a3      	strheq	r3, [r4, #12]
 80070bc:	bf18      	it	ne
 80070be:	81a3      	strhne	r3, [r4, #12]
 80070c0:	bd10      	pop	{r4, pc}

080070c2 <__sclose>:
 80070c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070c6:	f000 b80d 	b.w	80070e4 <_close_r>

080070ca <memset>:
 80070ca:	4603      	mov	r3, r0
 80070cc:	4402      	add	r2, r0
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d100      	bne.n	80070d4 <memset+0xa>
 80070d2:	4770      	bx	lr
 80070d4:	f803 1b01 	strb.w	r1, [r3], #1
 80070d8:	e7f9      	b.n	80070ce <memset+0x4>
	...

080070dc <_localeconv_r>:
 80070dc:	4800      	ldr	r0, [pc, #0]	@ (80070e0 <_localeconv_r+0x4>)
 80070de:	4770      	bx	lr
 80070e0:	20000158 	.word	0x20000158

080070e4 <_close_r>:
 80070e4:	b538      	push	{r3, r4, r5, lr}
 80070e6:	2300      	movs	r3, #0
 80070e8:	4d05      	ldr	r5, [pc, #20]	@ (8007100 <_close_r+0x1c>)
 80070ea:	4604      	mov	r4, r0
 80070ec:	4608      	mov	r0, r1
 80070ee:	602b      	str	r3, [r5, #0]
 80070f0:	f7fa fd89 	bl	8001c06 <_close>
 80070f4:	1c43      	adds	r3, r0, #1
 80070f6:	d102      	bne.n	80070fe <_close_r+0x1a>
 80070f8:	682b      	ldr	r3, [r5, #0]
 80070fa:	b103      	cbz	r3, 80070fe <_close_r+0x1a>
 80070fc:	6023      	str	r3, [r4, #0]
 80070fe:	bd38      	pop	{r3, r4, r5, pc}
 8007100:	20000be4 	.word	0x20000be4

08007104 <_lseek_r>:
 8007104:	b538      	push	{r3, r4, r5, lr}
 8007106:	4604      	mov	r4, r0
 8007108:	4608      	mov	r0, r1
 800710a:	4611      	mov	r1, r2
 800710c:	2200      	movs	r2, #0
 800710e:	4d05      	ldr	r5, [pc, #20]	@ (8007124 <_lseek_r+0x20>)
 8007110:	602a      	str	r2, [r5, #0]
 8007112:	461a      	mov	r2, r3
 8007114:	f7fa fd9b 	bl	8001c4e <_lseek>
 8007118:	1c43      	adds	r3, r0, #1
 800711a:	d102      	bne.n	8007122 <_lseek_r+0x1e>
 800711c:	682b      	ldr	r3, [r5, #0]
 800711e:	b103      	cbz	r3, 8007122 <_lseek_r+0x1e>
 8007120:	6023      	str	r3, [r4, #0]
 8007122:	bd38      	pop	{r3, r4, r5, pc}
 8007124:	20000be4 	.word	0x20000be4

08007128 <_read_r>:
 8007128:	b538      	push	{r3, r4, r5, lr}
 800712a:	4604      	mov	r4, r0
 800712c:	4608      	mov	r0, r1
 800712e:	4611      	mov	r1, r2
 8007130:	2200      	movs	r2, #0
 8007132:	4d05      	ldr	r5, [pc, #20]	@ (8007148 <_read_r+0x20>)
 8007134:	602a      	str	r2, [r5, #0]
 8007136:	461a      	mov	r2, r3
 8007138:	f7fa fd2c 	bl	8001b94 <_read>
 800713c:	1c43      	adds	r3, r0, #1
 800713e:	d102      	bne.n	8007146 <_read_r+0x1e>
 8007140:	682b      	ldr	r3, [r5, #0]
 8007142:	b103      	cbz	r3, 8007146 <_read_r+0x1e>
 8007144:	6023      	str	r3, [r4, #0]
 8007146:	bd38      	pop	{r3, r4, r5, pc}
 8007148:	20000be4 	.word	0x20000be4

0800714c <_write_r>:
 800714c:	b538      	push	{r3, r4, r5, lr}
 800714e:	4604      	mov	r4, r0
 8007150:	4608      	mov	r0, r1
 8007152:	4611      	mov	r1, r2
 8007154:	2200      	movs	r2, #0
 8007156:	4d05      	ldr	r5, [pc, #20]	@ (800716c <_write_r+0x20>)
 8007158:	602a      	str	r2, [r5, #0]
 800715a:	461a      	mov	r2, r3
 800715c:	f7fa fd37 	bl	8001bce <_write>
 8007160:	1c43      	adds	r3, r0, #1
 8007162:	d102      	bne.n	800716a <_write_r+0x1e>
 8007164:	682b      	ldr	r3, [r5, #0]
 8007166:	b103      	cbz	r3, 800716a <_write_r+0x1e>
 8007168:	6023      	str	r3, [r4, #0]
 800716a:	bd38      	pop	{r3, r4, r5, pc}
 800716c:	20000be4 	.word	0x20000be4

08007170 <__errno>:
 8007170:	4b01      	ldr	r3, [pc, #4]	@ (8007178 <__errno+0x8>)
 8007172:	6818      	ldr	r0, [r3, #0]
 8007174:	4770      	bx	lr
 8007176:	bf00      	nop
 8007178:	20000018 	.word	0x20000018

0800717c <__libc_init_array>:
 800717c:	b570      	push	{r4, r5, r6, lr}
 800717e:	2600      	movs	r6, #0
 8007180:	4d0c      	ldr	r5, [pc, #48]	@ (80071b4 <__libc_init_array+0x38>)
 8007182:	4c0d      	ldr	r4, [pc, #52]	@ (80071b8 <__libc_init_array+0x3c>)
 8007184:	1b64      	subs	r4, r4, r5
 8007186:	10a4      	asrs	r4, r4, #2
 8007188:	42a6      	cmp	r6, r4
 800718a:	d109      	bne.n	80071a0 <__libc_init_array+0x24>
 800718c:	f003 faf0 	bl	800a770 <_init>
 8007190:	2600      	movs	r6, #0
 8007192:	4d0a      	ldr	r5, [pc, #40]	@ (80071bc <__libc_init_array+0x40>)
 8007194:	4c0a      	ldr	r4, [pc, #40]	@ (80071c0 <__libc_init_array+0x44>)
 8007196:	1b64      	subs	r4, r4, r5
 8007198:	10a4      	asrs	r4, r4, #2
 800719a:	42a6      	cmp	r6, r4
 800719c:	d105      	bne.n	80071aa <__libc_init_array+0x2e>
 800719e:	bd70      	pop	{r4, r5, r6, pc}
 80071a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80071a4:	4798      	blx	r3
 80071a6:	3601      	adds	r6, #1
 80071a8:	e7ee      	b.n	8007188 <__libc_init_array+0xc>
 80071aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80071ae:	4798      	blx	r3
 80071b0:	3601      	adds	r6, #1
 80071b2:	e7f2      	b.n	800719a <__libc_init_array+0x1e>
 80071b4:	0800abf0 	.word	0x0800abf0
 80071b8:	0800abf0 	.word	0x0800abf0
 80071bc:	0800abf0 	.word	0x0800abf0
 80071c0:	0800abf4 	.word	0x0800abf4

080071c4 <__retarget_lock_init_recursive>:
 80071c4:	4770      	bx	lr

080071c6 <__retarget_lock_acquire_recursive>:
 80071c6:	4770      	bx	lr

080071c8 <__retarget_lock_release_recursive>:
 80071c8:	4770      	bx	lr

080071ca <memchr>:
 80071ca:	4603      	mov	r3, r0
 80071cc:	b510      	push	{r4, lr}
 80071ce:	b2c9      	uxtb	r1, r1
 80071d0:	4402      	add	r2, r0
 80071d2:	4293      	cmp	r3, r2
 80071d4:	4618      	mov	r0, r3
 80071d6:	d101      	bne.n	80071dc <memchr+0x12>
 80071d8:	2000      	movs	r0, #0
 80071da:	e003      	b.n	80071e4 <memchr+0x1a>
 80071dc:	7804      	ldrb	r4, [r0, #0]
 80071de:	3301      	adds	r3, #1
 80071e0:	428c      	cmp	r4, r1
 80071e2:	d1f6      	bne.n	80071d2 <memchr+0x8>
 80071e4:	bd10      	pop	{r4, pc}

080071e6 <memcpy>:
 80071e6:	440a      	add	r2, r1
 80071e8:	4291      	cmp	r1, r2
 80071ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80071ee:	d100      	bne.n	80071f2 <memcpy+0xc>
 80071f0:	4770      	bx	lr
 80071f2:	b510      	push	{r4, lr}
 80071f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071f8:	4291      	cmp	r1, r2
 80071fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071fe:	d1f9      	bne.n	80071f4 <memcpy+0xe>
 8007200:	bd10      	pop	{r4, pc}
	...

08007204 <nanf>:
 8007204:	4800      	ldr	r0, [pc, #0]	@ (8007208 <nanf+0x4>)
 8007206:	4770      	bx	lr
 8007208:	7fc00000 	.word	0x7fc00000

0800720c <quorem>:
 800720c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007210:	6903      	ldr	r3, [r0, #16]
 8007212:	690c      	ldr	r4, [r1, #16]
 8007214:	4607      	mov	r7, r0
 8007216:	42a3      	cmp	r3, r4
 8007218:	db7e      	blt.n	8007318 <quorem+0x10c>
 800721a:	3c01      	subs	r4, #1
 800721c:	00a3      	lsls	r3, r4, #2
 800721e:	f100 0514 	add.w	r5, r0, #20
 8007222:	f101 0814 	add.w	r8, r1, #20
 8007226:	9300      	str	r3, [sp, #0]
 8007228:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800722c:	9301      	str	r3, [sp, #4]
 800722e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007232:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007236:	3301      	adds	r3, #1
 8007238:	429a      	cmp	r2, r3
 800723a:	fbb2 f6f3 	udiv	r6, r2, r3
 800723e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007242:	d32e      	bcc.n	80072a2 <quorem+0x96>
 8007244:	f04f 0a00 	mov.w	sl, #0
 8007248:	46c4      	mov	ip, r8
 800724a:	46ae      	mov	lr, r5
 800724c:	46d3      	mov	fp, sl
 800724e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007252:	b298      	uxth	r0, r3
 8007254:	fb06 a000 	mla	r0, r6, r0, sl
 8007258:	0c1b      	lsrs	r3, r3, #16
 800725a:	0c02      	lsrs	r2, r0, #16
 800725c:	fb06 2303 	mla	r3, r6, r3, r2
 8007260:	f8de 2000 	ldr.w	r2, [lr]
 8007264:	b280      	uxth	r0, r0
 8007266:	b292      	uxth	r2, r2
 8007268:	1a12      	subs	r2, r2, r0
 800726a:	445a      	add	r2, fp
 800726c:	f8de 0000 	ldr.w	r0, [lr]
 8007270:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007274:	b29b      	uxth	r3, r3
 8007276:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800727a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800727e:	b292      	uxth	r2, r2
 8007280:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007284:	45e1      	cmp	r9, ip
 8007286:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800728a:	f84e 2b04 	str.w	r2, [lr], #4
 800728e:	d2de      	bcs.n	800724e <quorem+0x42>
 8007290:	9b00      	ldr	r3, [sp, #0]
 8007292:	58eb      	ldr	r3, [r5, r3]
 8007294:	b92b      	cbnz	r3, 80072a2 <quorem+0x96>
 8007296:	9b01      	ldr	r3, [sp, #4]
 8007298:	3b04      	subs	r3, #4
 800729a:	429d      	cmp	r5, r3
 800729c:	461a      	mov	r2, r3
 800729e:	d32f      	bcc.n	8007300 <quorem+0xf4>
 80072a0:	613c      	str	r4, [r7, #16]
 80072a2:	4638      	mov	r0, r7
 80072a4:	f001 f9ca 	bl	800863c <__mcmp>
 80072a8:	2800      	cmp	r0, #0
 80072aa:	db25      	blt.n	80072f8 <quorem+0xec>
 80072ac:	4629      	mov	r1, r5
 80072ae:	2000      	movs	r0, #0
 80072b0:	f858 2b04 	ldr.w	r2, [r8], #4
 80072b4:	f8d1 c000 	ldr.w	ip, [r1]
 80072b8:	fa1f fe82 	uxth.w	lr, r2
 80072bc:	fa1f f38c 	uxth.w	r3, ip
 80072c0:	eba3 030e 	sub.w	r3, r3, lr
 80072c4:	4403      	add	r3, r0
 80072c6:	0c12      	lsrs	r2, r2, #16
 80072c8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80072cc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80072d6:	45c1      	cmp	r9, r8
 80072d8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80072dc:	f841 3b04 	str.w	r3, [r1], #4
 80072e0:	d2e6      	bcs.n	80072b0 <quorem+0xa4>
 80072e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80072e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80072ea:	b922      	cbnz	r2, 80072f6 <quorem+0xea>
 80072ec:	3b04      	subs	r3, #4
 80072ee:	429d      	cmp	r5, r3
 80072f0:	461a      	mov	r2, r3
 80072f2:	d30b      	bcc.n	800730c <quorem+0x100>
 80072f4:	613c      	str	r4, [r7, #16]
 80072f6:	3601      	adds	r6, #1
 80072f8:	4630      	mov	r0, r6
 80072fa:	b003      	add	sp, #12
 80072fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007300:	6812      	ldr	r2, [r2, #0]
 8007302:	3b04      	subs	r3, #4
 8007304:	2a00      	cmp	r2, #0
 8007306:	d1cb      	bne.n	80072a0 <quorem+0x94>
 8007308:	3c01      	subs	r4, #1
 800730a:	e7c6      	b.n	800729a <quorem+0x8e>
 800730c:	6812      	ldr	r2, [r2, #0]
 800730e:	3b04      	subs	r3, #4
 8007310:	2a00      	cmp	r2, #0
 8007312:	d1ef      	bne.n	80072f4 <quorem+0xe8>
 8007314:	3c01      	subs	r4, #1
 8007316:	e7ea      	b.n	80072ee <quorem+0xe2>
 8007318:	2000      	movs	r0, #0
 800731a:	e7ee      	b.n	80072fa <quorem+0xee>
 800731c:	0000      	movs	r0, r0
	...

08007320 <_dtoa_r>:
 8007320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007324:	4614      	mov	r4, r2
 8007326:	461d      	mov	r5, r3
 8007328:	69c7      	ldr	r7, [r0, #28]
 800732a:	b097      	sub	sp, #92	@ 0x5c
 800732c:	4681      	mov	r9, r0
 800732e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007332:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8007334:	b97f      	cbnz	r7, 8007356 <_dtoa_r+0x36>
 8007336:	2010      	movs	r0, #16
 8007338:	f000 fe0e 	bl	8007f58 <malloc>
 800733c:	4602      	mov	r2, r0
 800733e:	f8c9 001c 	str.w	r0, [r9, #28]
 8007342:	b920      	cbnz	r0, 800734e <_dtoa_r+0x2e>
 8007344:	21ef      	movs	r1, #239	@ 0xef
 8007346:	4bac      	ldr	r3, [pc, #688]	@ (80075f8 <_dtoa_r+0x2d8>)
 8007348:	48ac      	ldr	r0, [pc, #688]	@ (80075fc <_dtoa_r+0x2dc>)
 800734a:	f002 fb9d 	bl	8009a88 <__assert_func>
 800734e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007352:	6007      	str	r7, [r0, #0]
 8007354:	60c7      	str	r7, [r0, #12]
 8007356:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800735a:	6819      	ldr	r1, [r3, #0]
 800735c:	b159      	cbz	r1, 8007376 <_dtoa_r+0x56>
 800735e:	685a      	ldr	r2, [r3, #4]
 8007360:	2301      	movs	r3, #1
 8007362:	4093      	lsls	r3, r2
 8007364:	604a      	str	r2, [r1, #4]
 8007366:	608b      	str	r3, [r1, #8]
 8007368:	4648      	mov	r0, r9
 800736a:	f000 feeb 	bl	8008144 <_Bfree>
 800736e:	2200      	movs	r2, #0
 8007370:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007374:	601a      	str	r2, [r3, #0]
 8007376:	1e2b      	subs	r3, r5, #0
 8007378:	bfaf      	iteee	ge
 800737a:	2300      	movge	r3, #0
 800737c:	2201      	movlt	r2, #1
 800737e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007382:	9307      	strlt	r3, [sp, #28]
 8007384:	bfa8      	it	ge
 8007386:	6033      	strge	r3, [r6, #0]
 8007388:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800738c:	4b9c      	ldr	r3, [pc, #624]	@ (8007600 <_dtoa_r+0x2e0>)
 800738e:	bfb8      	it	lt
 8007390:	6032      	strlt	r2, [r6, #0]
 8007392:	ea33 0308 	bics.w	r3, r3, r8
 8007396:	d112      	bne.n	80073be <_dtoa_r+0x9e>
 8007398:	f242 730f 	movw	r3, #9999	@ 0x270f
 800739c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800739e:	6013      	str	r3, [r2, #0]
 80073a0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80073a4:	4323      	orrs	r3, r4
 80073a6:	f000 855e 	beq.w	8007e66 <_dtoa_r+0xb46>
 80073aa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80073ac:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007604 <_dtoa_r+0x2e4>
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	f000 8560 	beq.w	8007e76 <_dtoa_r+0xb56>
 80073b6:	f10a 0303 	add.w	r3, sl, #3
 80073ba:	f000 bd5a 	b.w	8007e72 <_dtoa_r+0xb52>
 80073be:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80073c2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80073c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80073ca:	2200      	movs	r2, #0
 80073cc:	2300      	movs	r3, #0
 80073ce:	f7f9 fb9f 	bl	8000b10 <__aeabi_dcmpeq>
 80073d2:	4607      	mov	r7, r0
 80073d4:	b158      	cbz	r0, 80073ee <_dtoa_r+0xce>
 80073d6:	2301      	movs	r3, #1
 80073d8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80073da:	6013      	str	r3, [r2, #0]
 80073dc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80073de:	b113      	cbz	r3, 80073e6 <_dtoa_r+0xc6>
 80073e0:	4b89      	ldr	r3, [pc, #548]	@ (8007608 <_dtoa_r+0x2e8>)
 80073e2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80073e4:	6013      	str	r3, [r2, #0]
 80073e6:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800760c <_dtoa_r+0x2ec>
 80073ea:	f000 bd44 	b.w	8007e76 <_dtoa_r+0xb56>
 80073ee:	ab14      	add	r3, sp, #80	@ 0x50
 80073f0:	9301      	str	r3, [sp, #4]
 80073f2:	ab15      	add	r3, sp, #84	@ 0x54
 80073f4:	9300      	str	r3, [sp, #0]
 80073f6:	4648      	mov	r0, r9
 80073f8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80073fc:	f001 fa36 	bl	800886c <__d2b>
 8007400:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8007404:	9003      	str	r0, [sp, #12]
 8007406:	2e00      	cmp	r6, #0
 8007408:	d078      	beq.n	80074fc <_dtoa_r+0x1dc>
 800740a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800740e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007410:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007414:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007418:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800741c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007420:	9712      	str	r7, [sp, #72]	@ 0x48
 8007422:	4619      	mov	r1, r3
 8007424:	2200      	movs	r2, #0
 8007426:	4b7a      	ldr	r3, [pc, #488]	@ (8007610 <_dtoa_r+0x2f0>)
 8007428:	f7f8 ff52 	bl	80002d0 <__aeabi_dsub>
 800742c:	a36c      	add	r3, pc, #432	@ (adr r3, 80075e0 <_dtoa_r+0x2c0>)
 800742e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007432:	f7f9 f905 	bl	8000640 <__aeabi_dmul>
 8007436:	a36c      	add	r3, pc, #432	@ (adr r3, 80075e8 <_dtoa_r+0x2c8>)
 8007438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800743c:	f7f8 ff4a 	bl	80002d4 <__adddf3>
 8007440:	4604      	mov	r4, r0
 8007442:	4630      	mov	r0, r6
 8007444:	460d      	mov	r5, r1
 8007446:	f7f9 f891 	bl	800056c <__aeabi_i2d>
 800744a:	a369      	add	r3, pc, #420	@ (adr r3, 80075f0 <_dtoa_r+0x2d0>)
 800744c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007450:	f7f9 f8f6 	bl	8000640 <__aeabi_dmul>
 8007454:	4602      	mov	r2, r0
 8007456:	460b      	mov	r3, r1
 8007458:	4620      	mov	r0, r4
 800745a:	4629      	mov	r1, r5
 800745c:	f7f8 ff3a 	bl	80002d4 <__adddf3>
 8007460:	4604      	mov	r4, r0
 8007462:	460d      	mov	r5, r1
 8007464:	f7f9 fb9c 	bl	8000ba0 <__aeabi_d2iz>
 8007468:	2200      	movs	r2, #0
 800746a:	4607      	mov	r7, r0
 800746c:	2300      	movs	r3, #0
 800746e:	4620      	mov	r0, r4
 8007470:	4629      	mov	r1, r5
 8007472:	f7f9 fb57 	bl	8000b24 <__aeabi_dcmplt>
 8007476:	b140      	cbz	r0, 800748a <_dtoa_r+0x16a>
 8007478:	4638      	mov	r0, r7
 800747a:	f7f9 f877 	bl	800056c <__aeabi_i2d>
 800747e:	4622      	mov	r2, r4
 8007480:	462b      	mov	r3, r5
 8007482:	f7f9 fb45 	bl	8000b10 <__aeabi_dcmpeq>
 8007486:	b900      	cbnz	r0, 800748a <_dtoa_r+0x16a>
 8007488:	3f01      	subs	r7, #1
 800748a:	2f16      	cmp	r7, #22
 800748c:	d854      	bhi.n	8007538 <_dtoa_r+0x218>
 800748e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007492:	4b60      	ldr	r3, [pc, #384]	@ (8007614 <_dtoa_r+0x2f4>)
 8007494:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800749c:	f7f9 fb42 	bl	8000b24 <__aeabi_dcmplt>
 80074a0:	2800      	cmp	r0, #0
 80074a2:	d04b      	beq.n	800753c <_dtoa_r+0x21c>
 80074a4:	2300      	movs	r3, #0
 80074a6:	3f01      	subs	r7, #1
 80074a8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80074aa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80074ac:	1b9b      	subs	r3, r3, r6
 80074ae:	1e5a      	subs	r2, r3, #1
 80074b0:	bf49      	itett	mi
 80074b2:	f1c3 0301 	rsbmi	r3, r3, #1
 80074b6:	2300      	movpl	r3, #0
 80074b8:	9304      	strmi	r3, [sp, #16]
 80074ba:	2300      	movmi	r3, #0
 80074bc:	9209      	str	r2, [sp, #36]	@ 0x24
 80074be:	bf54      	ite	pl
 80074c0:	9304      	strpl	r3, [sp, #16]
 80074c2:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80074c4:	2f00      	cmp	r7, #0
 80074c6:	db3b      	blt.n	8007540 <_dtoa_r+0x220>
 80074c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074ca:	970e      	str	r7, [sp, #56]	@ 0x38
 80074cc:	443b      	add	r3, r7
 80074ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80074d0:	2300      	movs	r3, #0
 80074d2:	930a      	str	r3, [sp, #40]	@ 0x28
 80074d4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80074d6:	2b09      	cmp	r3, #9
 80074d8:	d865      	bhi.n	80075a6 <_dtoa_r+0x286>
 80074da:	2b05      	cmp	r3, #5
 80074dc:	bfc4      	itt	gt
 80074de:	3b04      	subgt	r3, #4
 80074e0:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80074e2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80074e4:	bfc8      	it	gt
 80074e6:	2400      	movgt	r4, #0
 80074e8:	f1a3 0302 	sub.w	r3, r3, #2
 80074ec:	bfd8      	it	le
 80074ee:	2401      	movle	r4, #1
 80074f0:	2b03      	cmp	r3, #3
 80074f2:	d864      	bhi.n	80075be <_dtoa_r+0x29e>
 80074f4:	e8df f003 	tbb	[pc, r3]
 80074f8:	2c385553 	.word	0x2c385553
 80074fc:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007500:	441e      	add	r6, r3
 8007502:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007506:	2b20      	cmp	r3, #32
 8007508:	bfc1      	itttt	gt
 800750a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800750e:	fa08 f803 	lslgt.w	r8, r8, r3
 8007512:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007516:	fa24 f303 	lsrgt.w	r3, r4, r3
 800751a:	bfd6      	itet	le
 800751c:	f1c3 0320 	rsble	r3, r3, #32
 8007520:	ea48 0003 	orrgt.w	r0, r8, r3
 8007524:	fa04 f003 	lslle.w	r0, r4, r3
 8007528:	f7f9 f810 	bl	800054c <__aeabi_ui2d>
 800752c:	2201      	movs	r2, #1
 800752e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007532:	3e01      	subs	r6, #1
 8007534:	9212      	str	r2, [sp, #72]	@ 0x48
 8007536:	e774      	b.n	8007422 <_dtoa_r+0x102>
 8007538:	2301      	movs	r3, #1
 800753a:	e7b5      	b.n	80074a8 <_dtoa_r+0x188>
 800753c:	900f      	str	r0, [sp, #60]	@ 0x3c
 800753e:	e7b4      	b.n	80074aa <_dtoa_r+0x18a>
 8007540:	9b04      	ldr	r3, [sp, #16]
 8007542:	1bdb      	subs	r3, r3, r7
 8007544:	9304      	str	r3, [sp, #16]
 8007546:	427b      	negs	r3, r7
 8007548:	930a      	str	r3, [sp, #40]	@ 0x28
 800754a:	2300      	movs	r3, #0
 800754c:	930e      	str	r3, [sp, #56]	@ 0x38
 800754e:	e7c1      	b.n	80074d4 <_dtoa_r+0x1b4>
 8007550:	2301      	movs	r3, #1
 8007552:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007554:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007556:	eb07 0b03 	add.w	fp, r7, r3
 800755a:	f10b 0301 	add.w	r3, fp, #1
 800755e:	2b01      	cmp	r3, #1
 8007560:	9308      	str	r3, [sp, #32]
 8007562:	bfb8      	it	lt
 8007564:	2301      	movlt	r3, #1
 8007566:	e006      	b.n	8007576 <_dtoa_r+0x256>
 8007568:	2301      	movs	r3, #1
 800756a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800756c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800756e:	2b00      	cmp	r3, #0
 8007570:	dd28      	ble.n	80075c4 <_dtoa_r+0x2a4>
 8007572:	469b      	mov	fp, r3
 8007574:	9308      	str	r3, [sp, #32]
 8007576:	2100      	movs	r1, #0
 8007578:	2204      	movs	r2, #4
 800757a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800757e:	f102 0514 	add.w	r5, r2, #20
 8007582:	429d      	cmp	r5, r3
 8007584:	d926      	bls.n	80075d4 <_dtoa_r+0x2b4>
 8007586:	6041      	str	r1, [r0, #4]
 8007588:	4648      	mov	r0, r9
 800758a:	f000 fd9b 	bl	80080c4 <_Balloc>
 800758e:	4682      	mov	sl, r0
 8007590:	2800      	cmp	r0, #0
 8007592:	d143      	bne.n	800761c <_dtoa_r+0x2fc>
 8007594:	4602      	mov	r2, r0
 8007596:	f240 11af 	movw	r1, #431	@ 0x1af
 800759a:	4b1f      	ldr	r3, [pc, #124]	@ (8007618 <_dtoa_r+0x2f8>)
 800759c:	e6d4      	b.n	8007348 <_dtoa_r+0x28>
 800759e:	2300      	movs	r3, #0
 80075a0:	e7e3      	b.n	800756a <_dtoa_r+0x24a>
 80075a2:	2300      	movs	r3, #0
 80075a4:	e7d5      	b.n	8007552 <_dtoa_r+0x232>
 80075a6:	2401      	movs	r4, #1
 80075a8:	2300      	movs	r3, #0
 80075aa:	940b      	str	r4, [sp, #44]	@ 0x2c
 80075ac:	9320      	str	r3, [sp, #128]	@ 0x80
 80075ae:	f04f 3bff 	mov.w	fp, #4294967295
 80075b2:	2200      	movs	r2, #0
 80075b4:	2312      	movs	r3, #18
 80075b6:	f8cd b020 	str.w	fp, [sp, #32]
 80075ba:	9221      	str	r2, [sp, #132]	@ 0x84
 80075bc:	e7db      	b.n	8007576 <_dtoa_r+0x256>
 80075be:	2301      	movs	r3, #1
 80075c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80075c2:	e7f4      	b.n	80075ae <_dtoa_r+0x28e>
 80075c4:	f04f 0b01 	mov.w	fp, #1
 80075c8:	465b      	mov	r3, fp
 80075ca:	f8cd b020 	str.w	fp, [sp, #32]
 80075ce:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 80075d2:	e7d0      	b.n	8007576 <_dtoa_r+0x256>
 80075d4:	3101      	adds	r1, #1
 80075d6:	0052      	lsls	r2, r2, #1
 80075d8:	e7d1      	b.n	800757e <_dtoa_r+0x25e>
 80075da:	bf00      	nop
 80075dc:	f3af 8000 	nop.w
 80075e0:	636f4361 	.word	0x636f4361
 80075e4:	3fd287a7 	.word	0x3fd287a7
 80075e8:	8b60c8b3 	.word	0x8b60c8b3
 80075ec:	3fc68a28 	.word	0x3fc68a28
 80075f0:	509f79fb 	.word	0x509f79fb
 80075f4:	3fd34413 	.word	0x3fd34413
 80075f8:	0800a909 	.word	0x0800a909
 80075fc:	0800a920 	.word	0x0800a920
 8007600:	7ff00000 	.word	0x7ff00000
 8007604:	0800a905 	.word	0x0800a905
 8007608:	0800a8d4 	.word	0x0800a8d4
 800760c:	0800a8d3 	.word	0x0800a8d3
 8007610:	3ff80000 	.word	0x3ff80000
 8007614:	0800aad0 	.word	0x0800aad0
 8007618:	0800a978 	.word	0x0800a978
 800761c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007620:	6018      	str	r0, [r3, #0]
 8007622:	9b08      	ldr	r3, [sp, #32]
 8007624:	2b0e      	cmp	r3, #14
 8007626:	f200 80a1 	bhi.w	800776c <_dtoa_r+0x44c>
 800762a:	2c00      	cmp	r4, #0
 800762c:	f000 809e 	beq.w	800776c <_dtoa_r+0x44c>
 8007630:	2f00      	cmp	r7, #0
 8007632:	dd33      	ble.n	800769c <_dtoa_r+0x37c>
 8007634:	4b9c      	ldr	r3, [pc, #624]	@ (80078a8 <_dtoa_r+0x588>)
 8007636:	f007 020f 	and.w	r2, r7, #15
 800763a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800763e:	05f8      	lsls	r0, r7, #23
 8007640:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007644:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8007648:	ea4f 1427 	mov.w	r4, r7, asr #4
 800764c:	d516      	bpl.n	800767c <_dtoa_r+0x35c>
 800764e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007652:	4b96      	ldr	r3, [pc, #600]	@ (80078ac <_dtoa_r+0x58c>)
 8007654:	2603      	movs	r6, #3
 8007656:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800765a:	f7f9 f91b 	bl	8000894 <__aeabi_ddiv>
 800765e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007662:	f004 040f 	and.w	r4, r4, #15
 8007666:	4d91      	ldr	r5, [pc, #580]	@ (80078ac <_dtoa_r+0x58c>)
 8007668:	b954      	cbnz	r4, 8007680 <_dtoa_r+0x360>
 800766a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800766e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007672:	f7f9 f90f 	bl	8000894 <__aeabi_ddiv>
 8007676:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800767a:	e028      	b.n	80076ce <_dtoa_r+0x3ae>
 800767c:	2602      	movs	r6, #2
 800767e:	e7f2      	b.n	8007666 <_dtoa_r+0x346>
 8007680:	07e1      	lsls	r1, r4, #31
 8007682:	d508      	bpl.n	8007696 <_dtoa_r+0x376>
 8007684:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007688:	e9d5 2300 	ldrd	r2, r3, [r5]
 800768c:	f7f8 ffd8 	bl	8000640 <__aeabi_dmul>
 8007690:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007694:	3601      	adds	r6, #1
 8007696:	1064      	asrs	r4, r4, #1
 8007698:	3508      	adds	r5, #8
 800769a:	e7e5      	b.n	8007668 <_dtoa_r+0x348>
 800769c:	f000 80af 	beq.w	80077fe <_dtoa_r+0x4de>
 80076a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80076a4:	427c      	negs	r4, r7
 80076a6:	4b80      	ldr	r3, [pc, #512]	@ (80078a8 <_dtoa_r+0x588>)
 80076a8:	f004 020f 	and.w	r2, r4, #15
 80076ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80076b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076b4:	f7f8 ffc4 	bl	8000640 <__aeabi_dmul>
 80076b8:	2602      	movs	r6, #2
 80076ba:	2300      	movs	r3, #0
 80076bc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80076c0:	4d7a      	ldr	r5, [pc, #488]	@ (80078ac <_dtoa_r+0x58c>)
 80076c2:	1124      	asrs	r4, r4, #4
 80076c4:	2c00      	cmp	r4, #0
 80076c6:	f040 808f 	bne.w	80077e8 <_dtoa_r+0x4c8>
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d1d3      	bne.n	8007676 <_dtoa_r+0x356>
 80076ce:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80076d2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	f000 8094 	beq.w	8007802 <_dtoa_r+0x4e2>
 80076da:	2200      	movs	r2, #0
 80076dc:	4620      	mov	r0, r4
 80076de:	4629      	mov	r1, r5
 80076e0:	4b73      	ldr	r3, [pc, #460]	@ (80078b0 <_dtoa_r+0x590>)
 80076e2:	f7f9 fa1f 	bl	8000b24 <__aeabi_dcmplt>
 80076e6:	2800      	cmp	r0, #0
 80076e8:	f000 808b 	beq.w	8007802 <_dtoa_r+0x4e2>
 80076ec:	9b08      	ldr	r3, [sp, #32]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	f000 8087 	beq.w	8007802 <_dtoa_r+0x4e2>
 80076f4:	f1bb 0f00 	cmp.w	fp, #0
 80076f8:	dd34      	ble.n	8007764 <_dtoa_r+0x444>
 80076fa:	4620      	mov	r0, r4
 80076fc:	2200      	movs	r2, #0
 80076fe:	4629      	mov	r1, r5
 8007700:	4b6c      	ldr	r3, [pc, #432]	@ (80078b4 <_dtoa_r+0x594>)
 8007702:	f7f8 ff9d 	bl	8000640 <__aeabi_dmul>
 8007706:	465c      	mov	r4, fp
 8007708:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800770c:	f107 38ff 	add.w	r8, r7, #4294967295
 8007710:	3601      	adds	r6, #1
 8007712:	4630      	mov	r0, r6
 8007714:	f7f8 ff2a 	bl	800056c <__aeabi_i2d>
 8007718:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800771c:	f7f8 ff90 	bl	8000640 <__aeabi_dmul>
 8007720:	2200      	movs	r2, #0
 8007722:	4b65      	ldr	r3, [pc, #404]	@ (80078b8 <_dtoa_r+0x598>)
 8007724:	f7f8 fdd6 	bl	80002d4 <__adddf3>
 8007728:	4605      	mov	r5, r0
 800772a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800772e:	2c00      	cmp	r4, #0
 8007730:	d16a      	bne.n	8007808 <_dtoa_r+0x4e8>
 8007732:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007736:	2200      	movs	r2, #0
 8007738:	4b60      	ldr	r3, [pc, #384]	@ (80078bc <_dtoa_r+0x59c>)
 800773a:	f7f8 fdc9 	bl	80002d0 <__aeabi_dsub>
 800773e:	4602      	mov	r2, r0
 8007740:	460b      	mov	r3, r1
 8007742:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007746:	462a      	mov	r2, r5
 8007748:	4633      	mov	r3, r6
 800774a:	f7f9 fa09 	bl	8000b60 <__aeabi_dcmpgt>
 800774e:	2800      	cmp	r0, #0
 8007750:	f040 8298 	bne.w	8007c84 <_dtoa_r+0x964>
 8007754:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007758:	462a      	mov	r2, r5
 800775a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800775e:	f7f9 f9e1 	bl	8000b24 <__aeabi_dcmplt>
 8007762:	bb38      	cbnz	r0, 80077b4 <_dtoa_r+0x494>
 8007764:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007768:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800776c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800776e:	2b00      	cmp	r3, #0
 8007770:	f2c0 8157 	blt.w	8007a22 <_dtoa_r+0x702>
 8007774:	2f0e      	cmp	r7, #14
 8007776:	f300 8154 	bgt.w	8007a22 <_dtoa_r+0x702>
 800777a:	4b4b      	ldr	r3, [pc, #300]	@ (80078a8 <_dtoa_r+0x588>)
 800777c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007780:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007784:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007788:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800778a:	2b00      	cmp	r3, #0
 800778c:	f280 80e5 	bge.w	800795a <_dtoa_r+0x63a>
 8007790:	9b08      	ldr	r3, [sp, #32]
 8007792:	2b00      	cmp	r3, #0
 8007794:	f300 80e1 	bgt.w	800795a <_dtoa_r+0x63a>
 8007798:	d10c      	bne.n	80077b4 <_dtoa_r+0x494>
 800779a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800779e:	2200      	movs	r2, #0
 80077a0:	4b46      	ldr	r3, [pc, #280]	@ (80078bc <_dtoa_r+0x59c>)
 80077a2:	f7f8 ff4d 	bl	8000640 <__aeabi_dmul>
 80077a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80077aa:	f7f9 f9cf 	bl	8000b4c <__aeabi_dcmpge>
 80077ae:	2800      	cmp	r0, #0
 80077b0:	f000 8266 	beq.w	8007c80 <_dtoa_r+0x960>
 80077b4:	2400      	movs	r4, #0
 80077b6:	4625      	mov	r5, r4
 80077b8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80077ba:	4656      	mov	r6, sl
 80077bc:	ea6f 0803 	mvn.w	r8, r3
 80077c0:	2700      	movs	r7, #0
 80077c2:	4621      	mov	r1, r4
 80077c4:	4648      	mov	r0, r9
 80077c6:	f000 fcbd 	bl	8008144 <_Bfree>
 80077ca:	2d00      	cmp	r5, #0
 80077cc:	f000 80bd 	beq.w	800794a <_dtoa_r+0x62a>
 80077d0:	b12f      	cbz	r7, 80077de <_dtoa_r+0x4be>
 80077d2:	42af      	cmp	r7, r5
 80077d4:	d003      	beq.n	80077de <_dtoa_r+0x4be>
 80077d6:	4639      	mov	r1, r7
 80077d8:	4648      	mov	r0, r9
 80077da:	f000 fcb3 	bl	8008144 <_Bfree>
 80077de:	4629      	mov	r1, r5
 80077e0:	4648      	mov	r0, r9
 80077e2:	f000 fcaf 	bl	8008144 <_Bfree>
 80077e6:	e0b0      	b.n	800794a <_dtoa_r+0x62a>
 80077e8:	07e2      	lsls	r2, r4, #31
 80077ea:	d505      	bpl.n	80077f8 <_dtoa_r+0x4d8>
 80077ec:	e9d5 2300 	ldrd	r2, r3, [r5]
 80077f0:	f7f8 ff26 	bl	8000640 <__aeabi_dmul>
 80077f4:	2301      	movs	r3, #1
 80077f6:	3601      	adds	r6, #1
 80077f8:	1064      	asrs	r4, r4, #1
 80077fa:	3508      	adds	r5, #8
 80077fc:	e762      	b.n	80076c4 <_dtoa_r+0x3a4>
 80077fe:	2602      	movs	r6, #2
 8007800:	e765      	b.n	80076ce <_dtoa_r+0x3ae>
 8007802:	46b8      	mov	r8, r7
 8007804:	9c08      	ldr	r4, [sp, #32]
 8007806:	e784      	b.n	8007712 <_dtoa_r+0x3f2>
 8007808:	4b27      	ldr	r3, [pc, #156]	@ (80078a8 <_dtoa_r+0x588>)
 800780a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800780c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007810:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007814:	4454      	add	r4, sl
 8007816:	2900      	cmp	r1, #0
 8007818:	d054      	beq.n	80078c4 <_dtoa_r+0x5a4>
 800781a:	2000      	movs	r0, #0
 800781c:	4928      	ldr	r1, [pc, #160]	@ (80078c0 <_dtoa_r+0x5a0>)
 800781e:	f7f9 f839 	bl	8000894 <__aeabi_ddiv>
 8007822:	4633      	mov	r3, r6
 8007824:	462a      	mov	r2, r5
 8007826:	f7f8 fd53 	bl	80002d0 <__aeabi_dsub>
 800782a:	4656      	mov	r6, sl
 800782c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007830:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007834:	f7f9 f9b4 	bl	8000ba0 <__aeabi_d2iz>
 8007838:	4605      	mov	r5, r0
 800783a:	f7f8 fe97 	bl	800056c <__aeabi_i2d>
 800783e:	4602      	mov	r2, r0
 8007840:	460b      	mov	r3, r1
 8007842:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007846:	f7f8 fd43 	bl	80002d0 <__aeabi_dsub>
 800784a:	4602      	mov	r2, r0
 800784c:	460b      	mov	r3, r1
 800784e:	3530      	adds	r5, #48	@ 0x30
 8007850:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007854:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007858:	f806 5b01 	strb.w	r5, [r6], #1
 800785c:	f7f9 f962 	bl	8000b24 <__aeabi_dcmplt>
 8007860:	2800      	cmp	r0, #0
 8007862:	d172      	bne.n	800794a <_dtoa_r+0x62a>
 8007864:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007868:	2000      	movs	r0, #0
 800786a:	4911      	ldr	r1, [pc, #68]	@ (80078b0 <_dtoa_r+0x590>)
 800786c:	f7f8 fd30 	bl	80002d0 <__aeabi_dsub>
 8007870:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007874:	f7f9 f956 	bl	8000b24 <__aeabi_dcmplt>
 8007878:	2800      	cmp	r0, #0
 800787a:	f040 80b4 	bne.w	80079e6 <_dtoa_r+0x6c6>
 800787e:	42a6      	cmp	r6, r4
 8007880:	f43f af70 	beq.w	8007764 <_dtoa_r+0x444>
 8007884:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007888:	2200      	movs	r2, #0
 800788a:	4b0a      	ldr	r3, [pc, #40]	@ (80078b4 <_dtoa_r+0x594>)
 800788c:	f7f8 fed8 	bl	8000640 <__aeabi_dmul>
 8007890:	2200      	movs	r2, #0
 8007892:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007896:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800789a:	4b06      	ldr	r3, [pc, #24]	@ (80078b4 <_dtoa_r+0x594>)
 800789c:	f7f8 fed0 	bl	8000640 <__aeabi_dmul>
 80078a0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80078a4:	e7c4      	b.n	8007830 <_dtoa_r+0x510>
 80078a6:	bf00      	nop
 80078a8:	0800aad0 	.word	0x0800aad0
 80078ac:	0800aaa8 	.word	0x0800aaa8
 80078b0:	3ff00000 	.word	0x3ff00000
 80078b4:	40240000 	.word	0x40240000
 80078b8:	401c0000 	.word	0x401c0000
 80078bc:	40140000 	.word	0x40140000
 80078c0:	3fe00000 	.word	0x3fe00000
 80078c4:	4631      	mov	r1, r6
 80078c6:	4628      	mov	r0, r5
 80078c8:	f7f8 feba 	bl	8000640 <__aeabi_dmul>
 80078cc:	4656      	mov	r6, sl
 80078ce:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80078d2:	9413      	str	r4, [sp, #76]	@ 0x4c
 80078d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80078d8:	f7f9 f962 	bl	8000ba0 <__aeabi_d2iz>
 80078dc:	4605      	mov	r5, r0
 80078de:	f7f8 fe45 	bl	800056c <__aeabi_i2d>
 80078e2:	4602      	mov	r2, r0
 80078e4:	460b      	mov	r3, r1
 80078e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80078ea:	f7f8 fcf1 	bl	80002d0 <__aeabi_dsub>
 80078ee:	4602      	mov	r2, r0
 80078f0:	460b      	mov	r3, r1
 80078f2:	3530      	adds	r5, #48	@ 0x30
 80078f4:	f806 5b01 	strb.w	r5, [r6], #1
 80078f8:	42a6      	cmp	r6, r4
 80078fa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80078fe:	f04f 0200 	mov.w	r2, #0
 8007902:	d124      	bne.n	800794e <_dtoa_r+0x62e>
 8007904:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007908:	4bae      	ldr	r3, [pc, #696]	@ (8007bc4 <_dtoa_r+0x8a4>)
 800790a:	f7f8 fce3 	bl	80002d4 <__adddf3>
 800790e:	4602      	mov	r2, r0
 8007910:	460b      	mov	r3, r1
 8007912:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007916:	f7f9 f923 	bl	8000b60 <__aeabi_dcmpgt>
 800791a:	2800      	cmp	r0, #0
 800791c:	d163      	bne.n	80079e6 <_dtoa_r+0x6c6>
 800791e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007922:	2000      	movs	r0, #0
 8007924:	49a7      	ldr	r1, [pc, #668]	@ (8007bc4 <_dtoa_r+0x8a4>)
 8007926:	f7f8 fcd3 	bl	80002d0 <__aeabi_dsub>
 800792a:	4602      	mov	r2, r0
 800792c:	460b      	mov	r3, r1
 800792e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007932:	f7f9 f8f7 	bl	8000b24 <__aeabi_dcmplt>
 8007936:	2800      	cmp	r0, #0
 8007938:	f43f af14 	beq.w	8007764 <_dtoa_r+0x444>
 800793c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800793e:	1e73      	subs	r3, r6, #1
 8007940:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007942:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007946:	2b30      	cmp	r3, #48	@ 0x30
 8007948:	d0f8      	beq.n	800793c <_dtoa_r+0x61c>
 800794a:	4647      	mov	r7, r8
 800794c:	e03b      	b.n	80079c6 <_dtoa_r+0x6a6>
 800794e:	4b9e      	ldr	r3, [pc, #632]	@ (8007bc8 <_dtoa_r+0x8a8>)
 8007950:	f7f8 fe76 	bl	8000640 <__aeabi_dmul>
 8007954:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007958:	e7bc      	b.n	80078d4 <_dtoa_r+0x5b4>
 800795a:	4656      	mov	r6, sl
 800795c:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8007960:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007964:	4620      	mov	r0, r4
 8007966:	4629      	mov	r1, r5
 8007968:	f7f8 ff94 	bl	8000894 <__aeabi_ddiv>
 800796c:	f7f9 f918 	bl	8000ba0 <__aeabi_d2iz>
 8007970:	4680      	mov	r8, r0
 8007972:	f7f8 fdfb 	bl	800056c <__aeabi_i2d>
 8007976:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800797a:	f7f8 fe61 	bl	8000640 <__aeabi_dmul>
 800797e:	4602      	mov	r2, r0
 8007980:	460b      	mov	r3, r1
 8007982:	4620      	mov	r0, r4
 8007984:	4629      	mov	r1, r5
 8007986:	f7f8 fca3 	bl	80002d0 <__aeabi_dsub>
 800798a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800798e:	9d08      	ldr	r5, [sp, #32]
 8007990:	f806 4b01 	strb.w	r4, [r6], #1
 8007994:	eba6 040a 	sub.w	r4, r6, sl
 8007998:	42a5      	cmp	r5, r4
 800799a:	4602      	mov	r2, r0
 800799c:	460b      	mov	r3, r1
 800799e:	d133      	bne.n	8007a08 <_dtoa_r+0x6e8>
 80079a0:	f7f8 fc98 	bl	80002d4 <__adddf3>
 80079a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80079a8:	4604      	mov	r4, r0
 80079aa:	460d      	mov	r5, r1
 80079ac:	f7f9 f8d8 	bl	8000b60 <__aeabi_dcmpgt>
 80079b0:	b9c0      	cbnz	r0, 80079e4 <_dtoa_r+0x6c4>
 80079b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80079b6:	4620      	mov	r0, r4
 80079b8:	4629      	mov	r1, r5
 80079ba:	f7f9 f8a9 	bl	8000b10 <__aeabi_dcmpeq>
 80079be:	b110      	cbz	r0, 80079c6 <_dtoa_r+0x6a6>
 80079c0:	f018 0f01 	tst.w	r8, #1
 80079c4:	d10e      	bne.n	80079e4 <_dtoa_r+0x6c4>
 80079c6:	4648      	mov	r0, r9
 80079c8:	9903      	ldr	r1, [sp, #12]
 80079ca:	f000 fbbb 	bl	8008144 <_Bfree>
 80079ce:	2300      	movs	r3, #0
 80079d0:	7033      	strb	r3, [r6, #0]
 80079d2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80079d4:	3701      	adds	r7, #1
 80079d6:	601f      	str	r7, [r3, #0]
 80079d8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80079da:	2b00      	cmp	r3, #0
 80079dc:	f000 824b 	beq.w	8007e76 <_dtoa_r+0xb56>
 80079e0:	601e      	str	r6, [r3, #0]
 80079e2:	e248      	b.n	8007e76 <_dtoa_r+0xb56>
 80079e4:	46b8      	mov	r8, r7
 80079e6:	4633      	mov	r3, r6
 80079e8:	461e      	mov	r6, r3
 80079ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80079ee:	2a39      	cmp	r2, #57	@ 0x39
 80079f0:	d106      	bne.n	8007a00 <_dtoa_r+0x6e0>
 80079f2:	459a      	cmp	sl, r3
 80079f4:	d1f8      	bne.n	80079e8 <_dtoa_r+0x6c8>
 80079f6:	2230      	movs	r2, #48	@ 0x30
 80079f8:	f108 0801 	add.w	r8, r8, #1
 80079fc:	f88a 2000 	strb.w	r2, [sl]
 8007a00:	781a      	ldrb	r2, [r3, #0]
 8007a02:	3201      	adds	r2, #1
 8007a04:	701a      	strb	r2, [r3, #0]
 8007a06:	e7a0      	b.n	800794a <_dtoa_r+0x62a>
 8007a08:	2200      	movs	r2, #0
 8007a0a:	4b6f      	ldr	r3, [pc, #444]	@ (8007bc8 <_dtoa_r+0x8a8>)
 8007a0c:	f7f8 fe18 	bl	8000640 <__aeabi_dmul>
 8007a10:	2200      	movs	r2, #0
 8007a12:	2300      	movs	r3, #0
 8007a14:	4604      	mov	r4, r0
 8007a16:	460d      	mov	r5, r1
 8007a18:	f7f9 f87a 	bl	8000b10 <__aeabi_dcmpeq>
 8007a1c:	2800      	cmp	r0, #0
 8007a1e:	d09f      	beq.n	8007960 <_dtoa_r+0x640>
 8007a20:	e7d1      	b.n	80079c6 <_dtoa_r+0x6a6>
 8007a22:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007a24:	2a00      	cmp	r2, #0
 8007a26:	f000 80ea 	beq.w	8007bfe <_dtoa_r+0x8de>
 8007a2a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007a2c:	2a01      	cmp	r2, #1
 8007a2e:	f300 80cd 	bgt.w	8007bcc <_dtoa_r+0x8ac>
 8007a32:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007a34:	2a00      	cmp	r2, #0
 8007a36:	f000 80c1 	beq.w	8007bbc <_dtoa_r+0x89c>
 8007a3a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007a3e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007a40:	9e04      	ldr	r6, [sp, #16]
 8007a42:	9a04      	ldr	r2, [sp, #16]
 8007a44:	2101      	movs	r1, #1
 8007a46:	441a      	add	r2, r3
 8007a48:	9204      	str	r2, [sp, #16]
 8007a4a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a4c:	4648      	mov	r0, r9
 8007a4e:	441a      	add	r2, r3
 8007a50:	9209      	str	r2, [sp, #36]	@ 0x24
 8007a52:	f000 fc75 	bl	8008340 <__i2b>
 8007a56:	4605      	mov	r5, r0
 8007a58:	b166      	cbz	r6, 8007a74 <_dtoa_r+0x754>
 8007a5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	dd09      	ble.n	8007a74 <_dtoa_r+0x754>
 8007a60:	42b3      	cmp	r3, r6
 8007a62:	bfa8      	it	ge
 8007a64:	4633      	movge	r3, r6
 8007a66:	9a04      	ldr	r2, [sp, #16]
 8007a68:	1af6      	subs	r6, r6, r3
 8007a6a:	1ad2      	subs	r2, r2, r3
 8007a6c:	9204      	str	r2, [sp, #16]
 8007a6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a70:	1ad3      	subs	r3, r2, r3
 8007a72:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a76:	b30b      	cbz	r3, 8007abc <_dtoa_r+0x79c>
 8007a78:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	f000 80c6 	beq.w	8007c0c <_dtoa_r+0x8ec>
 8007a80:	2c00      	cmp	r4, #0
 8007a82:	f000 80c0 	beq.w	8007c06 <_dtoa_r+0x8e6>
 8007a86:	4629      	mov	r1, r5
 8007a88:	4622      	mov	r2, r4
 8007a8a:	4648      	mov	r0, r9
 8007a8c:	f000 fd10 	bl	80084b0 <__pow5mult>
 8007a90:	9a03      	ldr	r2, [sp, #12]
 8007a92:	4601      	mov	r1, r0
 8007a94:	4605      	mov	r5, r0
 8007a96:	4648      	mov	r0, r9
 8007a98:	f000 fc68 	bl	800836c <__multiply>
 8007a9c:	9903      	ldr	r1, [sp, #12]
 8007a9e:	4680      	mov	r8, r0
 8007aa0:	4648      	mov	r0, r9
 8007aa2:	f000 fb4f 	bl	8008144 <_Bfree>
 8007aa6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007aa8:	1b1b      	subs	r3, r3, r4
 8007aaa:	930a      	str	r3, [sp, #40]	@ 0x28
 8007aac:	f000 80b1 	beq.w	8007c12 <_dtoa_r+0x8f2>
 8007ab0:	4641      	mov	r1, r8
 8007ab2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007ab4:	4648      	mov	r0, r9
 8007ab6:	f000 fcfb 	bl	80084b0 <__pow5mult>
 8007aba:	9003      	str	r0, [sp, #12]
 8007abc:	2101      	movs	r1, #1
 8007abe:	4648      	mov	r0, r9
 8007ac0:	f000 fc3e 	bl	8008340 <__i2b>
 8007ac4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007ac6:	4604      	mov	r4, r0
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	f000 81d8 	beq.w	8007e7e <_dtoa_r+0xb5e>
 8007ace:	461a      	mov	r2, r3
 8007ad0:	4601      	mov	r1, r0
 8007ad2:	4648      	mov	r0, r9
 8007ad4:	f000 fcec 	bl	80084b0 <__pow5mult>
 8007ad8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007ada:	4604      	mov	r4, r0
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	f300 809f 	bgt.w	8007c20 <_dtoa_r+0x900>
 8007ae2:	9b06      	ldr	r3, [sp, #24]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	f040 8097 	bne.w	8007c18 <_dtoa_r+0x8f8>
 8007aea:	9b07      	ldr	r3, [sp, #28]
 8007aec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	f040 8093 	bne.w	8007c1c <_dtoa_r+0x8fc>
 8007af6:	9b07      	ldr	r3, [sp, #28]
 8007af8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007afc:	0d1b      	lsrs	r3, r3, #20
 8007afe:	051b      	lsls	r3, r3, #20
 8007b00:	b133      	cbz	r3, 8007b10 <_dtoa_r+0x7f0>
 8007b02:	9b04      	ldr	r3, [sp, #16]
 8007b04:	3301      	adds	r3, #1
 8007b06:	9304      	str	r3, [sp, #16]
 8007b08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b0a:	3301      	adds	r3, #1
 8007b0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b0e:	2301      	movs	r3, #1
 8007b10:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	f000 81b8 	beq.w	8007e8a <_dtoa_r+0xb6a>
 8007b1a:	6923      	ldr	r3, [r4, #16]
 8007b1c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007b20:	6918      	ldr	r0, [r3, #16]
 8007b22:	f000 fbc1 	bl	80082a8 <__hi0bits>
 8007b26:	f1c0 0020 	rsb	r0, r0, #32
 8007b2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b2c:	4418      	add	r0, r3
 8007b2e:	f010 001f 	ands.w	r0, r0, #31
 8007b32:	f000 8082 	beq.w	8007c3a <_dtoa_r+0x91a>
 8007b36:	f1c0 0320 	rsb	r3, r0, #32
 8007b3a:	2b04      	cmp	r3, #4
 8007b3c:	dd73      	ble.n	8007c26 <_dtoa_r+0x906>
 8007b3e:	9b04      	ldr	r3, [sp, #16]
 8007b40:	f1c0 001c 	rsb	r0, r0, #28
 8007b44:	4403      	add	r3, r0
 8007b46:	9304      	str	r3, [sp, #16]
 8007b48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b4a:	4406      	add	r6, r0
 8007b4c:	4403      	add	r3, r0
 8007b4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b50:	9b04      	ldr	r3, [sp, #16]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	dd05      	ble.n	8007b62 <_dtoa_r+0x842>
 8007b56:	461a      	mov	r2, r3
 8007b58:	4648      	mov	r0, r9
 8007b5a:	9903      	ldr	r1, [sp, #12]
 8007b5c:	f000 fd02 	bl	8008564 <__lshift>
 8007b60:	9003      	str	r0, [sp, #12]
 8007b62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	dd05      	ble.n	8007b74 <_dtoa_r+0x854>
 8007b68:	4621      	mov	r1, r4
 8007b6a:	461a      	mov	r2, r3
 8007b6c:	4648      	mov	r0, r9
 8007b6e:	f000 fcf9 	bl	8008564 <__lshift>
 8007b72:	4604      	mov	r4, r0
 8007b74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d061      	beq.n	8007c3e <_dtoa_r+0x91e>
 8007b7a:	4621      	mov	r1, r4
 8007b7c:	9803      	ldr	r0, [sp, #12]
 8007b7e:	f000 fd5d 	bl	800863c <__mcmp>
 8007b82:	2800      	cmp	r0, #0
 8007b84:	da5b      	bge.n	8007c3e <_dtoa_r+0x91e>
 8007b86:	2300      	movs	r3, #0
 8007b88:	220a      	movs	r2, #10
 8007b8a:	4648      	mov	r0, r9
 8007b8c:	9903      	ldr	r1, [sp, #12]
 8007b8e:	f000 fafb 	bl	8008188 <__multadd>
 8007b92:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b94:	f107 38ff 	add.w	r8, r7, #4294967295
 8007b98:	9003      	str	r0, [sp, #12]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	f000 8177 	beq.w	8007e8e <_dtoa_r+0xb6e>
 8007ba0:	4629      	mov	r1, r5
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	220a      	movs	r2, #10
 8007ba6:	4648      	mov	r0, r9
 8007ba8:	f000 faee 	bl	8008188 <__multadd>
 8007bac:	f1bb 0f00 	cmp.w	fp, #0
 8007bb0:	4605      	mov	r5, r0
 8007bb2:	dc6f      	bgt.n	8007c94 <_dtoa_r+0x974>
 8007bb4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007bb6:	2b02      	cmp	r3, #2
 8007bb8:	dc49      	bgt.n	8007c4e <_dtoa_r+0x92e>
 8007bba:	e06b      	b.n	8007c94 <_dtoa_r+0x974>
 8007bbc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007bbe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007bc2:	e73c      	b.n	8007a3e <_dtoa_r+0x71e>
 8007bc4:	3fe00000 	.word	0x3fe00000
 8007bc8:	40240000 	.word	0x40240000
 8007bcc:	9b08      	ldr	r3, [sp, #32]
 8007bce:	1e5c      	subs	r4, r3, #1
 8007bd0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007bd2:	42a3      	cmp	r3, r4
 8007bd4:	db09      	blt.n	8007bea <_dtoa_r+0x8ca>
 8007bd6:	1b1c      	subs	r4, r3, r4
 8007bd8:	9b08      	ldr	r3, [sp, #32]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	f6bf af30 	bge.w	8007a40 <_dtoa_r+0x720>
 8007be0:	9b04      	ldr	r3, [sp, #16]
 8007be2:	9a08      	ldr	r2, [sp, #32]
 8007be4:	1a9e      	subs	r6, r3, r2
 8007be6:	2300      	movs	r3, #0
 8007be8:	e72b      	b.n	8007a42 <_dtoa_r+0x722>
 8007bea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007bec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007bee:	1ae3      	subs	r3, r4, r3
 8007bf0:	441a      	add	r2, r3
 8007bf2:	940a      	str	r4, [sp, #40]	@ 0x28
 8007bf4:	9e04      	ldr	r6, [sp, #16]
 8007bf6:	2400      	movs	r4, #0
 8007bf8:	9b08      	ldr	r3, [sp, #32]
 8007bfa:	920e      	str	r2, [sp, #56]	@ 0x38
 8007bfc:	e721      	b.n	8007a42 <_dtoa_r+0x722>
 8007bfe:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007c00:	9e04      	ldr	r6, [sp, #16]
 8007c02:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007c04:	e728      	b.n	8007a58 <_dtoa_r+0x738>
 8007c06:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007c0a:	e751      	b.n	8007ab0 <_dtoa_r+0x790>
 8007c0c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007c0e:	9903      	ldr	r1, [sp, #12]
 8007c10:	e750      	b.n	8007ab4 <_dtoa_r+0x794>
 8007c12:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c16:	e751      	b.n	8007abc <_dtoa_r+0x79c>
 8007c18:	2300      	movs	r3, #0
 8007c1a:	e779      	b.n	8007b10 <_dtoa_r+0x7f0>
 8007c1c:	9b06      	ldr	r3, [sp, #24]
 8007c1e:	e777      	b.n	8007b10 <_dtoa_r+0x7f0>
 8007c20:	2300      	movs	r3, #0
 8007c22:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c24:	e779      	b.n	8007b1a <_dtoa_r+0x7fa>
 8007c26:	d093      	beq.n	8007b50 <_dtoa_r+0x830>
 8007c28:	9a04      	ldr	r2, [sp, #16]
 8007c2a:	331c      	adds	r3, #28
 8007c2c:	441a      	add	r2, r3
 8007c2e:	9204      	str	r2, [sp, #16]
 8007c30:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007c32:	441e      	add	r6, r3
 8007c34:	441a      	add	r2, r3
 8007c36:	9209      	str	r2, [sp, #36]	@ 0x24
 8007c38:	e78a      	b.n	8007b50 <_dtoa_r+0x830>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	e7f4      	b.n	8007c28 <_dtoa_r+0x908>
 8007c3e:	9b08      	ldr	r3, [sp, #32]
 8007c40:	46b8      	mov	r8, r7
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	dc20      	bgt.n	8007c88 <_dtoa_r+0x968>
 8007c46:	469b      	mov	fp, r3
 8007c48:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007c4a:	2b02      	cmp	r3, #2
 8007c4c:	dd1e      	ble.n	8007c8c <_dtoa_r+0x96c>
 8007c4e:	f1bb 0f00 	cmp.w	fp, #0
 8007c52:	f47f adb1 	bne.w	80077b8 <_dtoa_r+0x498>
 8007c56:	4621      	mov	r1, r4
 8007c58:	465b      	mov	r3, fp
 8007c5a:	2205      	movs	r2, #5
 8007c5c:	4648      	mov	r0, r9
 8007c5e:	f000 fa93 	bl	8008188 <__multadd>
 8007c62:	4601      	mov	r1, r0
 8007c64:	4604      	mov	r4, r0
 8007c66:	9803      	ldr	r0, [sp, #12]
 8007c68:	f000 fce8 	bl	800863c <__mcmp>
 8007c6c:	2800      	cmp	r0, #0
 8007c6e:	f77f ada3 	ble.w	80077b8 <_dtoa_r+0x498>
 8007c72:	4656      	mov	r6, sl
 8007c74:	2331      	movs	r3, #49	@ 0x31
 8007c76:	f108 0801 	add.w	r8, r8, #1
 8007c7a:	f806 3b01 	strb.w	r3, [r6], #1
 8007c7e:	e59f      	b.n	80077c0 <_dtoa_r+0x4a0>
 8007c80:	46b8      	mov	r8, r7
 8007c82:	9c08      	ldr	r4, [sp, #32]
 8007c84:	4625      	mov	r5, r4
 8007c86:	e7f4      	b.n	8007c72 <_dtoa_r+0x952>
 8007c88:	f8dd b020 	ldr.w	fp, [sp, #32]
 8007c8c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	f000 8101 	beq.w	8007e96 <_dtoa_r+0xb76>
 8007c94:	2e00      	cmp	r6, #0
 8007c96:	dd05      	ble.n	8007ca4 <_dtoa_r+0x984>
 8007c98:	4629      	mov	r1, r5
 8007c9a:	4632      	mov	r2, r6
 8007c9c:	4648      	mov	r0, r9
 8007c9e:	f000 fc61 	bl	8008564 <__lshift>
 8007ca2:	4605      	mov	r5, r0
 8007ca4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d05c      	beq.n	8007d64 <_dtoa_r+0xa44>
 8007caa:	4648      	mov	r0, r9
 8007cac:	6869      	ldr	r1, [r5, #4]
 8007cae:	f000 fa09 	bl	80080c4 <_Balloc>
 8007cb2:	4606      	mov	r6, r0
 8007cb4:	b928      	cbnz	r0, 8007cc2 <_dtoa_r+0x9a2>
 8007cb6:	4602      	mov	r2, r0
 8007cb8:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007cbc:	4b80      	ldr	r3, [pc, #512]	@ (8007ec0 <_dtoa_r+0xba0>)
 8007cbe:	f7ff bb43 	b.w	8007348 <_dtoa_r+0x28>
 8007cc2:	692a      	ldr	r2, [r5, #16]
 8007cc4:	f105 010c 	add.w	r1, r5, #12
 8007cc8:	3202      	adds	r2, #2
 8007cca:	0092      	lsls	r2, r2, #2
 8007ccc:	300c      	adds	r0, #12
 8007cce:	f7ff fa8a 	bl	80071e6 <memcpy>
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	4631      	mov	r1, r6
 8007cd6:	4648      	mov	r0, r9
 8007cd8:	f000 fc44 	bl	8008564 <__lshift>
 8007cdc:	462f      	mov	r7, r5
 8007cde:	4605      	mov	r5, r0
 8007ce0:	f10a 0301 	add.w	r3, sl, #1
 8007ce4:	9304      	str	r3, [sp, #16]
 8007ce6:	eb0a 030b 	add.w	r3, sl, fp
 8007cea:	930a      	str	r3, [sp, #40]	@ 0x28
 8007cec:	9b06      	ldr	r3, [sp, #24]
 8007cee:	f003 0301 	and.w	r3, r3, #1
 8007cf2:	9309      	str	r3, [sp, #36]	@ 0x24
 8007cf4:	9b04      	ldr	r3, [sp, #16]
 8007cf6:	4621      	mov	r1, r4
 8007cf8:	9803      	ldr	r0, [sp, #12]
 8007cfa:	f103 3bff 	add.w	fp, r3, #4294967295
 8007cfe:	f7ff fa85 	bl	800720c <quorem>
 8007d02:	4603      	mov	r3, r0
 8007d04:	4639      	mov	r1, r7
 8007d06:	3330      	adds	r3, #48	@ 0x30
 8007d08:	9006      	str	r0, [sp, #24]
 8007d0a:	9803      	ldr	r0, [sp, #12]
 8007d0c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007d0e:	f000 fc95 	bl	800863c <__mcmp>
 8007d12:	462a      	mov	r2, r5
 8007d14:	9008      	str	r0, [sp, #32]
 8007d16:	4621      	mov	r1, r4
 8007d18:	4648      	mov	r0, r9
 8007d1a:	f000 fcab 	bl	8008674 <__mdiff>
 8007d1e:	68c2      	ldr	r2, [r0, #12]
 8007d20:	4606      	mov	r6, r0
 8007d22:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007d24:	bb02      	cbnz	r2, 8007d68 <_dtoa_r+0xa48>
 8007d26:	4601      	mov	r1, r0
 8007d28:	9803      	ldr	r0, [sp, #12]
 8007d2a:	f000 fc87 	bl	800863c <__mcmp>
 8007d2e:	4602      	mov	r2, r0
 8007d30:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007d32:	4631      	mov	r1, r6
 8007d34:	4648      	mov	r0, r9
 8007d36:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8007d3a:	f000 fa03 	bl	8008144 <_Bfree>
 8007d3e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007d40:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007d42:	9e04      	ldr	r6, [sp, #16]
 8007d44:	ea42 0103 	orr.w	r1, r2, r3
 8007d48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d4a:	4319      	orrs	r1, r3
 8007d4c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007d4e:	d10d      	bne.n	8007d6c <_dtoa_r+0xa4c>
 8007d50:	2b39      	cmp	r3, #57	@ 0x39
 8007d52:	d027      	beq.n	8007da4 <_dtoa_r+0xa84>
 8007d54:	9a08      	ldr	r2, [sp, #32]
 8007d56:	2a00      	cmp	r2, #0
 8007d58:	dd01      	ble.n	8007d5e <_dtoa_r+0xa3e>
 8007d5a:	9b06      	ldr	r3, [sp, #24]
 8007d5c:	3331      	adds	r3, #49	@ 0x31
 8007d5e:	f88b 3000 	strb.w	r3, [fp]
 8007d62:	e52e      	b.n	80077c2 <_dtoa_r+0x4a2>
 8007d64:	4628      	mov	r0, r5
 8007d66:	e7b9      	b.n	8007cdc <_dtoa_r+0x9bc>
 8007d68:	2201      	movs	r2, #1
 8007d6a:	e7e2      	b.n	8007d32 <_dtoa_r+0xa12>
 8007d6c:	9908      	ldr	r1, [sp, #32]
 8007d6e:	2900      	cmp	r1, #0
 8007d70:	db04      	blt.n	8007d7c <_dtoa_r+0xa5c>
 8007d72:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8007d74:	4301      	orrs	r1, r0
 8007d76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007d78:	4301      	orrs	r1, r0
 8007d7a:	d120      	bne.n	8007dbe <_dtoa_r+0xa9e>
 8007d7c:	2a00      	cmp	r2, #0
 8007d7e:	ddee      	ble.n	8007d5e <_dtoa_r+0xa3e>
 8007d80:	2201      	movs	r2, #1
 8007d82:	9903      	ldr	r1, [sp, #12]
 8007d84:	4648      	mov	r0, r9
 8007d86:	9304      	str	r3, [sp, #16]
 8007d88:	f000 fbec 	bl	8008564 <__lshift>
 8007d8c:	4621      	mov	r1, r4
 8007d8e:	9003      	str	r0, [sp, #12]
 8007d90:	f000 fc54 	bl	800863c <__mcmp>
 8007d94:	2800      	cmp	r0, #0
 8007d96:	9b04      	ldr	r3, [sp, #16]
 8007d98:	dc02      	bgt.n	8007da0 <_dtoa_r+0xa80>
 8007d9a:	d1e0      	bne.n	8007d5e <_dtoa_r+0xa3e>
 8007d9c:	07da      	lsls	r2, r3, #31
 8007d9e:	d5de      	bpl.n	8007d5e <_dtoa_r+0xa3e>
 8007da0:	2b39      	cmp	r3, #57	@ 0x39
 8007da2:	d1da      	bne.n	8007d5a <_dtoa_r+0xa3a>
 8007da4:	2339      	movs	r3, #57	@ 0x39
 8007da6:	f88b 3000 	strb.w	r3, [fp]
 8007daa:	4633      	mov	r3, r6
 8007dac:	461e      	mov	r6, r3
 8007dae:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007db2:	3b01      	subs	r3, #1
 8007db4:	2a39      	cmp	r2, #57	@ 0x39
 8007db6:	d04e      	beq.n	8007e56 <_dtoa_r+0xb36>
 8007db8:	3201      	adds	r2, #1
 8007dba:	701a      	strb	r2, [r3, #0]
 8007dbc:	e501      	b.n	80077c2 <_dtoa_r+0x4a2>
 8007dbe:	2a00      	cmp	r2, #0
 8007dc0:	dd03      	ble.n	8007dca <_dtoa_r+0xaaa>
 8007dc2:	2b39      	cmp	r3, #57	@ 0x39
 8007dc4:	d0ee      	beq.n	8007da4 <_dtoa_r+0xa84>
 8007dc6:	3301      	adds	r3, #1
 8007dc8:	e7c9      	b.n	8007d5e <_dtoa_r+0xa3e>
 8007dca:	9a04      	ldr	r2, [sp, #16]
 8007dcc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007dce:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007dd2:	428a      	cmp	r2, r1
 8007dd4:	d028      	beq.n	8007e28 <_dtoa_r+0xb08>
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	220a      	movs	r2, #10
 8007dda:	9903      	ldr	r1, [sp, #12]
 8007ddc:	4648      	mov	r0, r9
 8007dde:	f000 f9d3 	bl	8008188 <__multadd>
 8007de2:	42af      	cmp	r7, r5
 8007de4:	9003      	str	r0, [sp, #12]
 8007de6:	f04f 0300 	mov.w	r3, #0
 8007dea:	f04f 020a 	mov.w	r2, #10
 8007dee:	4639      	mov	r1, r7
 8007df0:	4648      	mov	r0, r9
 8007df2:	d107      	bne.n	8007e04 <_dtoa_r+0xae4>
 8007df4:	f000 f9c8 	bl	8008188 <__multadd>
 8007df8:	4607      	mov	r7, r0
 8007dfa:	4605      	mov	r5, r0
 8007dfc:	9b04      	ldr	r3, [sp, #16]
 8007dfe:	3301      	adds	r3, #1
 8007e00:	9304      	str	r3, [sp, #16]
 8007e02:	e777      	b.n	8007cf4 <_dtoa_r+0x9d4>
 8007e04:	f000 f9c0 	bl	8008188 <__multadd>
 8007e08:	4629      	mov	r1, r5
 8007e0a:	4607      	mov	r7, r0
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	220a      	movs	r2, #10
 8007e10:	4648      	mov	r0, r9
 8007e12:	f000 f9b9 	bl	8008188 <__multadd>
 8007e16:	4605      	mov	r5, r0
 8007e18:	e7f0      	b.n	8007dfc <_dtoa_r+0xadc>
 8007e1a:	f1bb 0f00 	cmp.w	fp, #0
 8007e1e:	bfcc      	ite	gt
 8007e20:	465e      	movgt	r6, fp
 8007e22:	2601      	movle	r6, #1
 8007e24:	2700      	movs	r7, #0
 8007e26:	4456      	add	r6, sl
 8007e28:	2201      	movs	r2, #1
 8007e2a:	9903      	ldr	r1, [sp, #12]
 8007e2c:	4648      	mov	r0, r9
 8007e2e:	9304      	str	r3, [sp, #16]
 8007e30:	f000 fb98 	bl	8008564 <__lshift>
 8007e34:	4621      	mov	r1, r4
 8007e36:	9003      	str	r0, [sp, #12]
 8007e38:	f000 fc00 	bl	800863c <__mcmp>
 8007e3c:	2800      	cmp	r0, #0
 8007e3e:	dcb4      	bgt.n	8007daa <_dtoa_r+0xa8a>
 8007e40:	d102      	bne.n	8007e48 <_dtoa_r+0xb28>
 8007e42:	9b04      	ldr	r3, [sp, #16]
 8007e44:	07db      	lsls	r3, r3, #31
 8007e46:	d4b0      	bmi.n	8007daa <_dtoa_r+0xa8a>
 8007e48:	4633      	mov	r3, r6
 8007e4a:	461e      	mov	r6, r3
 8007e4c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e50:	2a30      	cmp	r2, #48	@ 0x30
 8007e52:	d0fa      	beq.n	8007e4a <_dtoa_r+0xb2a>
 8007e54:	e4b5      	b.n	80077c2 <_dtoa_r+0x4a2>
 8007e56:	459a      	cmp	sl, r3
 8007e58:	d1a8      	bne.n	8007dac <_dtoa_r+0xa8c>
 8007e5a:	2331      	movs	r3, #49	@ 0x31
 8007e5c:	f108 0801 	add.w	r8, r8, #1
 8007e60:	f88a 3000 	strb.w	r3, [sl]
 8007e64:	e4ad      	b.n	80077c2 <_dtoa_r+0x4a2>
 8007e66:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007e68:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8007ec4 <_dtoa_r+0xba4>
 8007e6c:	b11b      	cbz	r3, 8007e76 <_dtoa_r+0xb56>
 8007e6e:	f10a 0308 	add.w	r3, sl, #8
 8007e72:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007e74:	6013      	str	r3, [r2, #0]
 8007e76:	4650      	mov	r0, sl
 8007e78:	b017      	add	sp, #92	@ 0x5c
 8007e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e7e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	f77f ae2e 	ble.w	8007ae2 <_dtoa_r+0x7c2>
 8007e86:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e88:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e8a:	2001      	movs	r0, #1
 8007e8c:	e64d      	b.n	8007b2a <_dtoa_r+0x80a>
 8007e8e:	f1bb 0f00 	cmp.w	fp, #0
 8007e92:	f77f aed9 	ble.w	8007c48 <_dtoa_r+0x928>
 8007e96:	4656      	mov	r6, sl
 8007e98:	4621      	mov	r1, r4
 8007e9a:	9803      	ldr	r0, [sp, #12]
 8007e9c:	f7ff f9b6 	bl	800720c <quorem>
 8007ea0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8007ea4:	f806 3b01 	strb.w	r3, [r6], #1
 8007ea8:	eba6 020a 	sub.w	r2, r6, sl
 8007eac:	4593      	cmp	fp, r2
 8007eae:	ddb4      	ble.n	8007e1a <_dtoa_r+0xafa>
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	220a      	movs	r2, #10
 8007eb4:	4648      	mov	r0, r9
 8007eb6:	9903      	ldr	r1, [sp, #12]
 8007eb8:	f000 f966 	bl	8008188 <__multadd>
 8007ebc:	9003      	str	r0, [sp, #12]
 8007ebe:	e7eb      	b.n	8007e98 <_dtoa_r+0xb78>
 8007ec0:	0800a978 	.word	0x0800a978
 8007ec4:	0800a8fc 	.word	0x0800a8fc

08007ec8 <_free_r>:
 8007ec8:	b538      	push	{r3, r4, r5, lr}
 8007eca:	4605      	mov	r5, r0
 8007ecc:	2900      	cmp	r1, #0
 8007ece:	d040      	beq.n	8007f52 <_free_r+0x8a>
 8007ed0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ed4:	1f0c      	subs	r4, r1, #4
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	bfb8      	it	lt
 8007eda:	18e4      	addlt	r4, r4, r3
 8007edc:	f000 f8e6 	bl	80080ac <__malloc_lock>
 8007ee0:	4a1c      	ldr	r2, [pc, #112]	@ (8007f54 <_free_r+0x8c>)
 8007ee2:	6813      	ldr	r3, [r2, #0]
 8007ee4:	b933      	cbnz	r3, 8007ef4 <_free_r+0x2c>
 8007ee6:	6063      	str	r3, [r4, #4]
 8007ee8:	6014      	str	r4, [r2, #0]
 8007eea:	4628      	mov	r0, r5
 8007eec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ef0:	f000 b8e2 	b.w	80080b8 <__malloc_unlock>
 8007ef4:	42a3      	cmp	r3, r4
 8007ef6:	d908      	bls.n	8007f0a <_free_r+0x42>
 8007ef8:	6820      	ldr	r0, [r4, #0]
 8007efa:	1821      	adds	r1, r4, r0
 8007efc:	428b      	cmp	r3, r1
 8007efe:	bf01      	itttt	eq
 8007f00:	6819      	ldreq	r1, [r3, #0]
 8007f02:	685b      	ldreq	r3, [r3, #4]
 8007f04:	1809      	addeq	r1, r1, r0
 8007f06:	6021      	streq	r1, [r4, #0]
 8007f08:	e7ed      	b.n	8007ee6 <_free_r+0x1e>
 8007f0a:	461a      	mov	r2, r3
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	b10b      	cbz	r3, 8007f14 <_free_r+0x4c>
 8007f10:	42a3      	cmp	r3, r4
 8007f12:	d9fa      	bls.n	8007f0a <_free_r+0x42>
 8007f14:	6811      	ldr	r1, [r2, #0]
 8007f16:	1850      	adds	r0, r2, r1
 8007f18:	42a0      	cmp	r0, r4
 8007f1a:	d10b      	bne.n	8007f34 <_free_r+0x6c>
 8007f1c:	6820      	ldr	r0, [r4, #0]
 8007f1e:	4401      	add	r1, r0
 8007f20:	1850      	adds	r0, r2, r1
 8007f22:	4283      	cmp	r3, r0
 8007f24:	6011      	str	r1, [r2, #0]
 8007f26:	d1e0      	bne.n	8007eea <_free_r+0x22>
 8007f28:	6818      	ldr	r0, [r3, #0]
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	4408      	add	r0, r1
 8007f2e:	6010      	str	r0, [r2, #0]
 8007f30:	6053      	str	r3, [r2, #4]
 8007f32:	e7da      	b.n	8007eea <_free_r+0x22>
 8007f34:	d902      	bls.n	8007f3c <_free_r+0x74>
 8007f36:	230c      	movs	r3, #12
 8007f38:	602b      	str	r3, [r5, #0]
 8007f3a:	e7d6      	b.n	8007eea <_free_r+0x22>
 8007f3c:	6820      	ldr	r0, [r4, #0]
 8007f3e:	1821      	adds	r1, r4, r0
 8007f40:	428b      	cmp	r3, r1
 8007f42:	bf01      	itttt	eq
 8007f44:	6819      	ldreq	r1, [r3, #0]
 8007f46:	685b      	ldreq	r3, [r3, #4]
 8007f48:	1809      	addeq	r1, r1, r0
 8007f4a:	6021      	streq	r1, [r4, #0]
 8007f4c:	6063      	str	r3, [r4, #4]
 8007f4e:	6054      	str	r4, [r2, #4]
 8007f50:	e7cb      	b.n	8007eea <_free_r+0x22>
 8007f52:	bd38      	pop	{r3, r4, r5, pc}
 8007f54:	20000bf0 	.word	0x20000bf0

08007f58 <malloc>:
 8007f58:	4b02      	ldr	r3, [pc, #8]	@ (8007f64 <malloc+0xc>)
 8007f5a:	4601      	mov	r1, r0
 8007f5c:	6818      	ldr	r0, [r3, #0]
 8007f5e:	f000 b825 	b.w	8007fac <_malloc_r>
 8007f62:	bf00      	nop
 8007f64:	20000018 	.word	0x20000018

08007f68 <sbrk_aligned>:
 8007f68:	b570      	push	{r4, r5, r6, lr}
 8007f6a:	4e0f      	ldr	r6, [pc, #60]	@ (8007fa8 <sbrk_aligned+0x40>)
 8007f6c:	460c      	mov	r4, r1
 8007f6e:	6831      	ldr	r1, [r6, #0]
 8007f70:	4605      	mov	r5, r0
 8007f72:	b911      	cbnz	r1, 8007f7a <sbrk_aligned+0x12>
 8007f74:	f001 fd72 	bl	8009a5c <_sbrk_r>
 8007f78:	6030      	str	r0, [r6, #0]
 8007f7a:	4621      	mov	r1, r4
 8007f7c:	4628      	mov	r0, r5
 8007f7e:	f001 fd6d 	bl	8009a5c <_sbrk_r>
 8007f82:	1c43      	adds	r3, r0, #1
 8007f84:	d103      	bne.n	8007f8e <sbrk_aligned+0x26>
 8007f86:	f04f 34ff 	mov.w	r4, #4294967295
 8007f8a:	4620      	mov	r0, r4
 8007f8c:	bd70      	pop	{r4, r5, r6, pc}
 8007f8e:	1cc4      	adds	r4, r0, #3
 8007f90:	f024 0403 	bic.w	r4, r4, #3
 8007f94:	42a0      	cmp	r0, r4
 8007f96:	d0f8      	beq.n	8007f8a <sbrk_aligned+0x22>
 8007f98:	1a21      	subs	r1, r4, r0
 8007f9a:	4628      	mov	r0, r5
 8007f9c:	f001 fd5e 	bl	8009a5c <_sbrk_r>
 8007fa0:	3001      	adds	r0, #1
 8007fa2:	d1f2      	bne.n	8007f8a <sbrk_aligned+0x22>
 8007fa4:	e7ef      	b.n	8007f86 <sbrk_aligned+0x1e>
 8007fa6:	bf00      	nop
 8007fa8:	20000bec 	.word	0x20000bec

08007fac <_malloc_r>:
 8007fac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fb0:	1ccd      	adds	r5, r1, #3
 8007fb2:	f025 0503 	bic.w	r5, r5, #3
 8007fb6:	3508      	adds	r5, #8
 8007fb8:	2d0c      	cmp	r5, #12
 8007fba:	bf38      	it	cc
 8007fbc:	250c      	movcc	r5, #12
 8007fbe:	2d00      	cmp	r5, #0
 8007fc0:	4606      	mov	r6, r0
 8007fc2:	db01      	blt.n	8007fc8 <_malloc_r+0x1c>
 8007fc4:	42a9      	cmp	r1, r5
 8007fc6:	d904      	bls.n	8007fd2 <_malloc_r+0x26>
 8007fc8:	230c      	movs	r3, #12
 8007fca:	6033      	str	r3, [r6, #0]
 8007fcc:	2000      	movs	r0, #0
 8007fce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fd2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80080a8 <_malloc_r+0xfc>
 8007fd6:	f000 f869 	bl	80080ac <__malloc_lock>
 8007fda:	f8d8 3000 	ldr.w	r3, [r8]
 8007fde:	461c      	mov	r4, r3
 8007fe0:	bb44      	cbnz	r4, 8008034 <_malloc_r+0x88>
 8007fe2:	4629      	mov	r1, r5
 8007fe4:	4630      	mov	r0, r6
 8007fe6:	f7ff ffbf 	bl	8007f68 <sbrk_aligned>
 8007fea:	1c43      	adds	r3, r0, #1
 8007fec:	4604      	mov	r4, r0
 8007fee:	d158      	bne.n	80080a2 <_malloc_r+0xf6>
 8007ff0:	f8d8 4000 	ldr.w	r4, [r8]
 8007ff4:	4627      	mov	r7, r4
 8007ff6:	2f00      	cmp	r7, #0
 8007ff8:	d143      	bne.n	8008082 <_malloc_r+0xd6>
 8007ffa:	2c00      	cmp	r4, #0
 8007ffc:	d04b      	beq.n	8008096 <_malloc_r+0xea>
 8007ffe:	6823      	ldr	r3, [r4, #0]
 8008000:	4639      	mov	r1, r7
 8008002:	4630      	mov	r0, r6
 8008004:	eb04 0903 	add.w	r9, r4, r3
 8008008:	f001 fd28 	bl	8009a5c <_sbrk_r>
 800800c:	4581      	cmp	r9, r0
 800800e:	d142      	bne.n	8008096 <_malloc_r+0xea>
 8008010:	6821      	ldr	r1, [r4, #0]
 8008012:	4630      	mov	r0, r6
 8008014:	1a6d      	subs	r5, r5, r1
 8008016:	4629      	mov	r1, r5
 8008018:	f7ff ffa6 	bl	8007f68 <sbrk_aligned>
 800801c:	3001      	adds	r0, #1
 800801e:	d03a      	beq.n	8008096 <_malloc_r+0xea>
 8008020:	6823      	ldr	r3, [r4, #0]
 8008022:	442b      	add	r3, r5
 8008024:	6023      	str	r3, [r4, #0]
 8008026:	f8d8 3000 	ldr.w	r3, [r8]
 800802a:	685a      	ldr	r2, [r3, #4]
 800802c:	bb62      	cbnz	r2, 8008088 <_malloc_r+0xdc>
 800802e:	f8c8 7000 	str.w	r7, [r8]
 8008032:	e00f      	b.n	8008054 <_malloc_r+0xa8>
 8008034:	6822      	ldr	r2, [r4, #0]
 8008036:	1b52      	subs	r2, r2, r5
 8008038:	d420      	bmi.n	800807c <_malloc_r+0xd0>
 800803a:	2a0b      	cmp	r2, #11
 800803c:	d917      	bls.n	800806e <_malloc_r+0xc2>
 800803e:	1961      	adds	r1, r4, r5
 8008040:	42a3      	cmp	r3, r4
 8008042:	6025      	str	r5, [r4, #0]
 8008044:	bf18      	it	ne
 8008046:	6059      	strne	r1, [r3, #4]
 8008048:	6863      	ldr	r3, [r4, #4]
 800804a:	bf08      	it	eq
 800804c:	f8c8 1000 	streq.w	r1, [r8]
 8008050:	5162      	str	r2, [r4, r5]
 8008052:	604b      	str	r3, [r1, #4]
 8008054:	4630      	mov	r0, r6
 8008056:	f000 f82f 	bl	80080b8 <__malloc_unlock>
 800805a:	f104 000b 	add.w	r0, r4, #11
 800805e:	1d23      	adds	r3, r4, #4
 8008060:	f020 0007 	bic.w	r0, r0, #7
 8008064:	1ac2      	subs	r2, r0, r3
 8008066:	bf1c      	itt	ne
 8008068:	1a1b      	subne	r3, r3, r0
 800806a:	50a3      	strne	r3, [r4, r2]
 800806c:	e7af      	b.n	8007fce <_malloc_r+0x22>
 800806e:	6862      	ldr	r2, [r4, #4]
 8008070:	42a3      	cmp	r3, r4
 8008072:	bf0c      	ite	eq
 8008074:	f8c8 2000 	streq.w	r2, [r8]
 8008078:	605a      	strne	r2, [r3, #4]
 800807a:	e7eb      	b.n	8008054 <_malloc_r+0xa8>
 800807c:	4623      	mov	r3, r4
 800807e:	6864      	ldr	r4, [r4, #4]
 8008080:	e7ae      	b.n	8007fe0 <_malloc_r+0x34>
 8008082:	463c      	mov	r4, r7
 8008084:	687f      	ldr	r7, [r7, #4]
 8008086:	e7b6      	b.n	8007ff6 <_malloc_r+0x4a>
 8008088:	461a      	mov	r2, r3
 800808a:	685b      	ldr	r3, [r3, #4]
 800808c:	42a3      	cmp	r3, r4
 800808e:	d1fb      	bne.n	8008088 <_malloc_r+0xdc>
 8008090:	2300      	movs	r3, #0
 8008092:	6053      	str	r3, [r2, #4]
 8008094:	e7de      	b.n	8008054 <_malloc_r+0xa8>
 8008096:	230c      	movs	r3, #12
 8008098:	4630      	mov	r0, r6
 800809a:	6033      	str	r3, [r6, #0]
 800809c:	f000 f80c 	bl	80080b8 <__malloc_unlock>
 80080a0:	e794      	b.n	8007fcc <_malloc_r+0x20>
 80080a2:	6005      	str	r5, [r0, #0]
 80080a4:	e7d6      	b.n	8008054 <_malloc_r+0xa8>
 80080a6:	bf00      	nop
 80080a8:	20000bf0 	.word	0x20000bf0

080080ac <__malloc_lock>:
 80080ac:	4801      	ldr	r0, [pc, #4]	@ (80080b4 <__malloc_lock+0x8>)
 80080ae:	f7ff b88a 	b.w	80071c6 <__retarget_lock_acquire_recursive>
 80080b2:	bf00      	nop
 80080b4:	20000be8 	.word	0x20000be8

080080b8 <__malloc_unlock>:
 80080b8:	4801      	ldr	r0, [pc, #4]	@ (80080c0 <__malloc_unlock+0x8>)
 80080ba:	f7ff b885 	b.w	80071c8 <__retarget_lock_release_recursive>
 80080be:	bf00      	nop
 80080c0:	20000be8 	.word	0x20000be8

080080c4 <_Balloc>:
 80080c4:	b570      	push	{r4, r5, r6, lr}
 80080c6:	69c6      	ldr	r6, [r0, #28]
 80080c8:	4604      	mov	r4, r0
 80080ca:	460d      	mov	r5, r1
 80080cc:	b976      	cbnz	r6, 80080ec <_Balloc+0x28>
 80080ce:	2010      	movs	r0, #16
 80080d0:	f7ff ff42 	bl	8007f58 <malloc>
 80080d4:	4602      	mov	r2, r0
 80080d6:	61e0      	str	r0, [r4, #28]
 80080d8:	b920      	cbnz	r0, 80080e4 <_Balloc+0x20>
 80080da:	216b      	movs	r1, #107	@ 0x6b
 80080dc:	4b17      	ldr	r3, [pc, #92]	@ (800813c <_Balloc+0x78>)
 80080de:	4818      	ldr	r0, [pc, #96]	@ (8008140 <_Balloc+0x7c>)
 80080e0:	f001 fcd2 	bl	8009a88 <__assert_func>
 80080e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80080e8:	6006      	str	r6, [r0, #0]
 80080ea:	60c6      	str	r6, [r0, #12]
 80080ec:	69e6      	ldr	r6, [r4, #28]
 80080ee:	68f3      	ldr	r3, [r6, #12]
 80080f0:	b183      	cbz	r3, 8008114 <_Balloc+0x50>
 80080f2:	69e3      	ldr	r3, [r4, #28]
 80080f4:	68db      	ldr	r3, [r3, #12]
 80080f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80080fa:	b9b8      	cbnz	r0, 800812c <_Balloc+0x68>
 80080fc:	2101      	movs	r1, #1
 80080fe:	fa01 f605 	lsl.w	r6, r1, r5
 8008102:	1d72      	adds	r2, r6, #5
 8008104:	4620      	mov	r0, r4
 8008106:	0092      	lsls	r2, r2, #2
 8008108:	f001 fcdc 	bl	8009ac4 <_calloc_r>
 800810c:	b160      	cbz	r0, 8008128 <_Balloc+0x64>
 800810e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008112:	e00e      	b.n	8008132 <_Balloc+0x6e>
 8008114:	2221      	movs	r2, #33	@ 0x21
 8008116:	2104      	movs	r1, #4
 8008118:	4620      	mov	r0, r4
 800811a:	f001 fcd3 	bl	8009ac4 <_calloc_r>
 800811e:	69e3      	ldr	r3, [r4, #28]
 8008120:	60f0      	str	r0, [r6, #12]
 8008122:	68db      	ldr	r3, [r3, #12]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d1e4      	bne.n	80080f2 <_Balloc+0x2e>
 8008128:	2000      	movs	r0, #0
 800812a:	bd70      	pop	{r4, r5, r6, pc}
 800812c:	6802      	ldr	r2, [r0, #0]
 800812e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008132:	2300      	movs	r3, #0
 8008134:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008138:	e7f7      	b.n	800812a <_Balloc+0x66>
 800813a:	bf00      	nop
 800813c:	0800a909 	.word	0x0800a909
 8008140:	0800a989 	.word	0x0800a989

08008144 <_Bfree>:
 8008144:	b570      	push	{r4, r5, r6, lr}
 8008146:	69c6      	ldr	r6, [r0, #28]
 8008148:	4605      	mov	r5, r0
 800814a:	460c      	mov	r4, r1
 800814c:	b976      	cbnz	r6, 800816c <_Bfree+0x28>
 800814e:	2010      	movs	r0, #16
 8008150:	f7ff ff02 	bl	8007f58 <malloc>
 8008154:	4602      	mov	r2, r0
 8008156:	61e8      	str	r0, [r5, #28]
 8008158:	b920      	cbnz	r0, 8008164 <_Bfree+0x20>
 800815a:	218f      	movs	r1, #143	@ 0x8f
 800815c:	4b08      	ldr	r3, [pc, #32]	@ (8008180 <_Bfree+0x3c>)
 800815e:	4809      	ldr	r0, [pc, #36]	@ (8008184 <_Bfree+0x40>)
 8008160:	f001 fc92 	bl	8009a88 <__assert_func>
 8008164:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008168:	6006      	str	r6, [r0, #0]
 800816a:	60c6      	str	r6, [r0, #12]
 800816c:	b13c      	cbz	r4, 800817e <_Bfree+0x3a>
 800816e:	69eb      	ldr	r3, [r5, #28]
 8008170:	6862      	ldr	r2, [r4, #4]
 8008172:	68db      	ldr	r3, [r3, #12]
 8008174:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008178:	6021      	str	r1, [r4, #0]
 800817a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800817e:	bd70      	pop	{r4, r5, r6, pc}
 8008180:	0800a909 	.word	0x0800a909
 8008184:	0800a989 	.word	0x0800a989

08008188 <__multadd>:
 8008188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800818c:	4607      	mov	r7, r0
 800818e:	460c      	mov	r4, r1
 8008190:	461e      	mov	r6, r3
 8008192:	2000      	movs	r0, #0
 8008194:	690d      	ldr	r5, [r1, #16]
 8008196:	f101 0c14 	add.w	ip, r1, #20
 800819a:	f8dc 3000 	ldr.w	r3, [ip]
 800819e:	3001      	adds	r0, #1
 80081a0:	b299      	uxth	r1, r3
 80081a2:	fb02 6101 	mla	r1, r2, r1, r6
 80081a6:	0c1e      	lsrs	r6, r3, #16
 80081a8:	0c0b      	lsrs	r3, r1, #16
 80081aa:	fb02 3306 	mla	r3, r2, r6, r3
 80081ae:	b289      	uxth	r1, r1
 80081b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80081b4:	4285      	cmp	r5, r0
 80081b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80081ba:	f84c 1b04 	str.w	r1, [ip], #4
 80081be:	dcec      	bgt.n	800819a <__multadd+0x12>
 80081c0:	b30e      	cbz	r6, 8008206 <__multadd+0x7e>
 80081c2:	68a3      	ldr	r3, [r4, #8]
 80081c4:	42ab      	cmp	r3, r5
 80081c6:	dc19      	bgt.n	80081fc <__multadd+0x74>
 80081c8:	6861      	ldr	r1, [r4, #4]
 80081ca:	4638      	mov	r0, r7
 80081cc:	3101      	adds	r1, #1
 80081ce:	f7ff ff79 	bl	80080c4 <_Balloc>
 80081d2:	4680      	mov	r8, r0
 80081d4:	b928      	cbnz	r0, 80081e2 <__multadd+0x5a>
 80081d6:	4602      	mov	r2, r0
 80081d8:	21ba      	movs	r1, #186	@ 0xba
 80081da:	4b0c      	ldr	r3, [pc, #48]	@ (800820c <__multadd+0x84>)
 80081dc:	480c      	ldr	r0, [pc, #48]	@ (8008210 <__multadd+0x88>)
 80081de:	f001 fc53 	bl	8009a88 <__assert_func>
 80081e2:	6922      	ldr	r2, [r4, #16]
 80081e4:	f104 010c 	add.w	r1, r4, #12
 80081e8:	3202      	adds	r2, #2
 80081ea:	0092      	lsls	r2, r2, #2
 80081ec:	300c      	adds	r0, #12
 80081ee:	f7fe fffa 	bl	80071e6 <memcpy>
 80081f2:	4621      	mov	r1, r4
 80081f4:	4638      	mov	r0, r7
 80081f6:	f7ff ffa5 	bl	8008144 <_Bfree>
 80081fa:	4644      	mov	r4, r8
 80081fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008200:	3501      	adds	r5, #1
 8008202:	615e      	str	r6, [r3, #20]
 8008204:	6125      	str	r5, [r4, #16]
 8008206:	4620      	mov	r0, r4
 8008208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800820c:	0800a978 	.word	0x0800a978
 8008210:	0800a989 	.word	0x0800a989

08008214 <__s2b>:
 8008214:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008218:	4615      	mov	r5, r2
 800821a:	2209      	movs	r2, #9
 800821c:	461f      	mov	r7, r3
 800821e:	3308      	adds	r3, #8
 8008220:	460c      	mov	r4, r1
 8008222:	fb93 f3f2 	sdiv	r3, r3, r2
 8008226:	4606      	mov	r6, r0
 8008228:	2201      	movs	r2, #1
 800822a:	2100      	movs	r1, #0
 800822c:	429a      	cmp	r2, r3
 800822e:	db09      	blt.n	8008244 <__s2b+0x30>
 8008230:	4630      	mov	r0, r6
 8008232:	f7ff ff47 	bl	80080c4 <_Balloc>
 8008236:	b940      	cbnz	r0, 800824a <__s2b+0x36>
 8008238:	4602      	mov	r2, r0
 800823a:	21d3      	movs	r1, #211	@ 0xd3
 800823c:	4b18      	ldr	r3, [pc, #96]	@ (80082a0 <__s2b+0x8c>)
 800823e:	4819      	ldr	r0, [pc, #100]	@ (80082a4 <__s2b+0x90>)
 8008240:	f001 fc22 	bl	8009a88 <__assert_func>
 8008244:	0052      	lsls	r2, r2, #1
 8008246:	3101      	adds	r1, #1
 8008248:	e7f0      	b.n	800822c <__s2b+0x18>
 800824a:	9b08      	ldr	r3, [sp, #32]
 800824c:	2d09      	cmp	r5, #9
 800824e:	6143      	str	r3, [r0, #20]
 8008250:	f04f 0301 	mov.w	r3, #1
 8008254:	6103      	str	r3, [r0, #16]
 8008256:	dd16      	ble.n	8008286 <__s2b+0x72>
 8008258:	f104 0909 	add.w	r9, r4, #9
 800825c:	46c8      	mov	r8, r9
 800825e:	442c      	add	r4, r5
 8008260:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008264:	4601      	mov	r1, r0
 8008266:	220a      	movs	r2, #10
 8008268:	4630      	mov	r0, r6
 800826a:	3b30      	subs	r3, #48	@ 0x30
 800826c:	f7ff ff8c 	bl	8008188 <__multadd>
 8008270:	45a0      	cmp	r8, r4
 8008272:	d1f5      	bne.n	8008260 <__s2b+0x4c>
 8008274:	f1a5 0408 	sub.w	r4, r5, #8
 8008278:	444c      	add	r4, r9
 800827a:	1b2d      	subs	r5, r5, r4
 800827c:	1963      	adds	r3, r4, r5
 800827e:	42bb      	cmp	r3, r7
 8008280:	db04      	blt.n	800828c <__s2b+0x78>
 8008282:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008286:	2509      	movs	r5, #9
 8008288:	340a      	adds	r4, #10
 800828a:	e7f6      	b.n	800827a <__s2b+0x66>
 800828c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008290:	4601      	mov	r1, r0
 8008292:	220a      	movs	r2, #10
 8008294:	4630      	mov	r0, r6
 8008296:	3b30      	subs	r3, #48	@ 0x30
 8008298:	f7ff ff76 	bl	8008188 <__multadd>
 800829c:	e7ee      	b.n	800827c <__s2b+0x68>
 800829e:	bf00      	nop
 80082a0:	0800a978 	.word	0x0800a978
 80082a4:	0800a989 	.word	0x0800a989

080082a8 <__hi0bits>:
 80082a8:	4603      	mov	r3, r0
 80082aa:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80082ae:	bf3a      	itte	cc
 80082b0:	0403      	lslcc	r3, r0, #16
 80082b2:	2010      	movcc	r0, #16
 80082b4:	2000      	movcs	r0, #0
 80082b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80082ba:	bf3c      	itt	cc
 80082bc:	021b      	lslcc	r3, r3, #8
 80082be:	3008      	addcc	r0, #8
 80082c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80082c4:	bf3c      	itt	cc
 80082c6:	011b      	lslcc	r3, r3, #4
 80082c8:	3004      	addcc	r0, #4
 80082ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082ce:	bf3c      	itt	cc
 80082d0:	009b      	lslcc	r3, r3, #2
 80082d2:	3002      	addcc	r0, #2
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	db05      	blt.n	80082e4 <__hi0bits+0x3c>
 80082d8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80082dc:	f100 0001 	add.w	r0, r0, #1
 80082e0:	bf08      	it	eq
 80082e2:	2020      	moveq	r0, #32
 80082e4:	4770      	bx	lr

080082e6 <__lo0bits>:
 80082e6:	6803      	ldr	r3, [r0, #0]
 80082e8:	4602      	mov	r2, r0
 80082ea:	f013 0007 	ands.w	r0, r3, #7
 80082ee:	d00b      	beq.n	8008308 <__lo0bits+0x22>
 80082f0:	07d9      	lsls	r1, r3, #31
 80082f2:	d421      	bmi.n	8008338 <__lo0bits+0x52>
 80082f4:	0798      	lsls	r0, r3, #30
 80082f6:	bf49      	itett	mi
 80082f8:	085b      	lsrmi	r3, r3, #1
 80082fa:	089b      	lsrpl	r3, r3, #2
 80082fc:	2001      	movmi	r0, #1
 80082fe:	6013      	strmi	r3, [r2, #0]
 8008300:	bf5c      	itt	pl
 8008302:	2002      	movpl	r0, #2
 8008304:	6013      	strpl	r3, [r2, #0]
 8008306:	4770      	bx	lr
 8008308:	b299      	uxth	r1, r3
 800830a:	b909      	cbnz	r1, 8008310 <__lo0bits+0x2a>
 800830c:	2010      	movs	r0, #16
 800830e:	0c1b      	lsrs	r3, r3, #16
 8008310:	b2d9      	uxtb	r1, r3
 8008312:	b909      	cbnz	r1, 8008318 <__lo0bits+0x32>
 8008314:	3008      	adds	r0, #8
 8008316:	0a1b      	lsrs	r3, r3, #8
 8008318:	0719      	lsls	r1, r3, #28
 800831a:	bf04      	itt	eq
 800831c:	091b      	lsreq	r3, r3, #4
 800831e:	3004      	addeq	r0, #4
 8008320:	0799      	lsls	r1, r3, #30
 8008322:	bf04      	itt	eq
 8008324:	089b      	lsreq	r3, r3, #2
 8008326:	3002      	addeq	r0, #2
 8008328:	07d9      	lsls	r1, r3, #31
 800832a:	d403      	bmi.n	8008334 <__lo0bits+0x4e>
 800832c:	085b      	lsrs	r3, r3, #1
 800832e:	f100 0001 	add.w	r0, r0, #1
 8008332:	d003      	beq.n	800833c <__lo0bits+0x56>
 8008334:	6013      	str	r3, [r2, #0]
 8008336:	4770      	bx	lr
 8008338:	2000      	movs	r0, #0
 800833a:	4770      	bx	lr
 800833c:	2020      	movs	r0, #32
 800833e:	4770      	bx	lr

08008340 <__i2b>:
 8008340:	b510      	push	{r4, lr}
 8008342:	460c      	mov	r4, r1
 8008344:	2101      	movs	r1, #1
 8008346:	f7ff febd 	bl	80080c4 <_Balloc>
 800834a:	4602      	mov	r2, r0
 800834c:	b928      	cbnz	r0, 800835a <__i2b+0x1a>
 800834e:	f240 1145 	movw	r1, #325	@ 0x145
 8008352:	4b04      	ldr	r3, [pc, #16]	@ (8008364 <__i2b+0x24>)
 8008354:	4804      	ldr	r0, [pc, #16]	@ (8008368 <__i2b+0x28>)
 8008356:	f001 fb97 	bl	8009a88 <__assert_func>
 800835a:	2301      	movs	r3, #1
 800835c:	6144      	str	r4, [r0, #20]
 800835e:	6103      	str	r3, [r0, #16]
 8008360:	bd10      	pop	{r4, pc}
 8008362:	bf00      	nop
 8008364:	0800a978 	.word	0x0800a978
 8008368:	0800a989 	.word	0x0800a989

0800836c <__multiply>:
 800836c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008370:	4617      	mov	r7, r2
 8008372:	690a      	ldr	r2, [r1, #16]
 8008374:	693b      	ldr	r3, [r7, #16]
 8008376:	4689      	mov	r9, r1
 8008378:	429a      	cmp	r2, r3
 800837a:	bfa2      	ittt	ge
 800837c:	463b      	movge	r3, r7
 800837e:	460f      	movge	r7, r1
 8008380:	4699      	movge	r9, r3
 8008382:	693d      	ldr	r5, [r7, #16]
 8008384:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	6879      	ldr	r1, [r7, #4]
 800838c:	eb05 060a 	add.w	r6, r5, sl
 8008390:	42b3      	cmp	r3, r6
 8008392:	b085      	sub	sp, #20
 8008394:	bfb8      	it	lt
 8008396:	3101      	addlt	r1, #1
 8008398:	f7ff fe94 	bl	80080c4 <_Balloc>
 800839c:	b930      	cbnz	r0, 80083ac <__multiply+0x40>
 800839e:	4602      	mov	r2, r0
 80083a0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80083a4:	4b40      	ldr	r3, [pc, #256]	@ (80084a8 <__multiply+0x13c>)
 80083a6:	4841      	ldr	r0, [pc, #260]	@ (80084ac <__multiply+0x140>)
 80083a8:	f001 fb6e 	bl	8009a88 <__assert_func>
 80083ac:	f100 0414 	add.w	r4, r0, #20
 80083b0:	4623      	mov	r3, r4
 80083b2:	2200      	movs	r2, #0
 80083b4:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80083b8:	4573      	cmp	r3, lr
 80083ba:	d320      	bcc.n	80083fe <__multiply+0x92>
 80083bc:	f107 0814 	add.w	r8, r7, #20
 80083c0:	f109 0114 	add.w	r1, r9, #20
 80083c4:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80083c8:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80083cc:	9302      	str	r3, [sp, #8]
 80083ce:	1beb      	subs	r3, r5, r7
 80083d0:	3b15      	subs	r3, #21
 80083d2:	f023 0303 	bic.w	r3, r3, #3
 80083d6:	3304      	adds	r3, #4
 80083d8:	3715      	adds	r7, #21
 80083da:	42bd      	cmp	r5, r7
 80083dc:	bf38      	it	cc
 80083de:	2304      	movcc	r3, #4
 80083e0:	9301      	str	r3, [sp, #4]
 80083e2:	9b02      	ldr	r3, [sp, #8]
 80083e4:	9103      	str	r1, [sp, #12]
 80083e6:	428b      	cmp	r3, r1
 80083e8:	d80c      	bhi.n	8008404 <__multiply+0x98>
 80083ea:	2e00      	cmp	r6, #0
 80083ec:	dd03      	ble.n	80083f6 <__multiply+0x8a>
 80083ee:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d055      	beq.n	80084a2 <__multiply+0x136>
 80083f6:	6106      	str	r6, [r0, #16]
 80083f8:	b005      	add	sp, #20
 80083fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083fe:	f843 2b04 	str.w	r2, [r3], #4
 8008402:	e7d9      	b.n	80083b8 <__multiply+0x4c>
 8008404:	f8b1 a000 	ldrh.w	sl, [r1]
 8008408:	f1ba 0f00 	cmp.w	sl, #0
 800840c:	d01f      	beq.n	800844e <__multiply+0xe2>
 800840e:	46c4      	mov	ip, r8
 8008410:	46a1      	mov	r9, r4
 8008412:	2700      	movs	r7, #0
 8008414:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008418:	f8d9 3000 	ldr.w	r3, [r9]
 800841c:	fa1f fb82 	uxth.w	fp, r2
 8008420:	b29b      	uxth	r3, r3
 8008422:	fb0a 330b 	mla	r3, sl, fp, r3
 8008426:	443b      	add	r3, r7
 8008428:	f8d9 7000 	ldr.w	r7, [r9]
 800842c:	0c12      	lsrs	r2, r2, #16
 800842e:	0c3f      	lsrs	r7, r7, #16
 8008430:	fb0a 7202 	mla	r2, sl, r2, r7
 8008434:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008438:	b29b      	uxth	r3, r3
 800843a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800843e:	4565      	cmp	r5, ip
 8008440:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008444:	f849 3b04 	str.w	r3, [r9], #4
 8008448:	d8e4      	bhi.n	8008414 <__multiply+0xa8>
 800844a:	9b01      	ldr	r3, [sp, #4]
 800844c:	50e7      	str	r7, [r4, r3]
 800844e:	9b03      	ldr	r3, [sp, #12]
 8008450:	3104      	adds	r1, #4
 8008452:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008456:	f1b9 0f00 	cmp.w	r9, #0
 800845a:	d020      	beq.n	800849e <__multiply+0x132>
 800845c:	4647      	mov	r7, r8
 800845e:	46a4      	mov	ip, r4
 8008460:	f04f 0a00 	mov.w	sl, #0
 8008464:	6823      	ldr	r3, [r4, #0]
 8008466:	f8b7 b000 	ldrh.w	fp, [r7]
 800846a:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800846e:	b29b      	uxth	r3, r3
 8008470:	fb09 220b 	mla	r2, r9, fp, r2
 8008474:	4452      	add	r2, sl
 8008476:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800847a:	f84c 3b04 	str.w	r3, [ip], #4
 800847e:	f857 3b04 	ldr.w	r3, [r7], #4
 8008482:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008486:	f8bc 3000 	ldrh.w	r3, [ip]
 800848a:	42bd      	cmp	r5, r7
 800848c:	fb09 330a 	mla	r3, r9, sl, r3
 8008490:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008494:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008498:	d8e5      	bhi.n	8008466 <__multiply+0xfa>
 800849a:	9a01      	ldr	r2, [sp, #4]
 800849c:	50a3      	str	r3, [r4, r2]
 800849e:	3404      	adds	r4, #4
 80084a0:	e79f      	b.n	80083e2 <__multiply+0x76>
 80084a2:	3e01      	subs	r6, #1
 80084a4:	e7a1      	b.n	80083ea <__multiply+0x7e>
 80084a6:	bf00      	nop
 80084a8:	0800a978 	.word	0x0800a978
 80084ac:	0800a989 	.word	0x0800a989

080084b0 <__pow5mult>:
 80084b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084b4:	4615      	mov	r5, r2
 80084b6:	f012 0203 	ands.w	r2, r2, #3
 80084ba:	4607      	mov	r7, r0
 80084bc:	460e      	mov	r6, r1
 80084be:	d007      	beq.n	80084d0 <__pow5mult+0x20>
 80084c0:	4c25      	ldr	r4, [pc, #148]	@ (8008558 <__pow5mult+0xa8>)
 80084c2:	3a01      	subs	r2, #1
 80084c4:	2300      	movs	r3, #0
 80084c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80084ca:	f7ff fe5d 	bl	8008188 <__multadd>
 80084ce:	4606      	mov	r6, r0
 80084d0:	10ad      	asrs	r5, r5, #2
 80084d2:	d03d      	beq.n	8008550 <__pow5mult+0xa0>
 80084d4:	69fc      	ldr	r4, [r7, #28]
 80084d6:	b97c      	cbnz	r4, 80084f8 <__pow5mult+0x48>
 80084d8:	2010      	movs	r0, #16
 80084da:	f7ff fd3d 	bl	8007f58 <malloc>
 80084de:	4602      	mov	r2, r0
 80084e0:	61f8      	str	r0, [r7, #28]
 80084e2:	b928      	cbnz	r0, 80084f0 <__pow5mult+0x40>
 80084e4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80084e8:	4b1c      	ldr	r3, [pc, #112]	@ (800855c <__pow5mult+0xac>)
 80084ea:	481d      	ldr	r0, [pc, #116]	@ (8008560 <__pow5mult+0xb0>)
 80084ec:	f001 facc 	bl	8009a88 <__assert_func>
 80084f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80084f4:	6004      	str	r4, [r0, #0]
 80084f6:	60c4      	str	r4, [r0, #12]
 80084f8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80084fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008500:	b94c      	cbnz	r4, 8008516 <__pow5mult+0x66>
 8008502:	f240 2171 	movw	r1, #625	@ 0x271
 8008506:	4638      	mov	r0, r7
 8008508:	f7ff ff1a 	bl	8008340 <__i2b>
 800850c:	2300      	movs	r3, #0
 800850e:	4604      	mov	r4, r0
 8008510:	f8c8 0008 	str.w	r0, [r8, #8]
 8008514:	6003      	str	r3, [r0, #0]
 8008516:	f04f 0900 	mov.w	r9, #0
 800851a:	07eb      	lsls	r3, r5, #31
 800851c:	d50a      	bpl.n	8008534 <__pow5mult+0x84>
 800851e:	4631      	mov	r1, r6
 8008520:	4622      	mov	r2, r4
 8008522:	4638      	mov	r0, r7
 8008524:	f7ff ff22 	bl	800836c <__multiply>
 8008528:	4680      	mov	r8, r0
 800852a:	4631      	mov	r1, r6
 800852c:	4638      	mov	r0, r7
 800852e:	f7ff fe09 	bl	8008144 <_Bfree>
 8008532:	4646      	mov	r6, r8
 8008534:	106d      	asrs	r5, r5, #1
 8008536:	d00b      	beq.n	8008550 <__pow5mult+0xa0>
 8008538:	6820      	ldr	r0, [r4, #0]
 800853a:	b938      	cbnz	r0, 800854c <__pow5mult+0x9c>
 800853c:	4622      	mov	r2, r4
 800853e:	4621      	mov	r1, r4
 8008540:	4638      	mov	r0, r7
 8008542:	f7ff ff13 	bl	800836c <__multiply>
 8008546:	6020      	str	r0, [r4, #0]
 8008548:	f8c0 9000 	str.w	r9, [r0]
 800854c:	4604      	mov	r4, r0
 800854e:	e7e4      	b.n	800851a <__pow5mult+0x6a>
 8008550:	4630      	mov	r0, r6
 8008552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008556:	bf00      	nop
 8008558:	0800aa9c 	.word	0x0800aa9c
 800855c:	0800a909 	.word	0x0800a909
 8008560:	0800a989 	.word	0x0800a989

08008564 <__lshift>:
 8008564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008568:	460c      	mov	r4, r1
 800856a:	4607      	mov	r7, r0
 800856c:	4691      	mov	r9, r2
 800856e:	6923      	ldr	r3, [r4, #16]
 8008570:	6849      	ldr	r1, [r1, #4]
 8008572:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008576:	68a3      	ldr	r3, [r4, #8]
 8008578:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800857c:	f108 0601 	add.w	r6, r8, #1
 8008580:	42b3      	cmp	r3, r6
 8008582:	db0b      	blt.n	800859c <__lshift+0x38>
 8008584:	4638      	mov	r0, r7
 8008586:	f7ff fd9d 	bl	80080c4 <_Balloc>
 800858a:	4605      	mov	r5, r0
 800858c:	b948      	cbnz	r0, 80085a2 <__lshift+0x3e>
 800858e:	4602      	mov	r2, r0
 8008590:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008594:	4b27      	ldr	r3, [pc, #156]	@ (8008634 <__lshift+0xd0>)
 8008596:	4828      	ldr	r0, [pc, #160]	@ (8008638 <__lshift+0xd4>)
 8008598:	f001 fa76 	bl	8009a88 <__assert_func>
 800859c:	3101      	adds	r1, #1
 800859e:	005b      	lsls	r3, r3, #1
 80085a0:	e7ee      	b.n	8008580 <__lshift+0x1c>
 80085a2:	2300      	movs	r3, #0
 80085a4:	f100 0114 	add.w	r1, r0, #20
 80085a8:	f100 0210 	add.w	r2, r0, #16
 80085ac:	4618      	mov	r0, r3
 80085ae:	4553      	cmp	r3, sl
 80085b0:	db33      	blt.n	800861a <__lshift+0xb6>
 80085b2:	6920      	ldr	r0, [r4, #16]
 80085b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80085b8:	f104 0314 	add.w	r3, r4, #20
 80085bc:	f019 091f 	ands.w	r9, r9, #31
 80085c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80085c4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80085c8:	d02b      	beq.n	8008622 <__lshift+0xbe>
 80085ca:	468a      	mov	sl, r1
 80085cc:	2200      	movs	r2, #0
 80085ce:	f1c9 0e20 	rsb	lr, r9, #32
 80085d2:	6818      	ldr	r0, [r3, #0]
 80085d4:	fa00 f009 	lsl.w	r0, r0, r9
 80085d8:	4310      	orrs	r0, r2
 80085da:	f84a 0b04 	str.w	r0, [sl], #4
 80085de:	f853 2b04 	ldr.w	r2, [r3], #4
 80085e2:	459c      	cmp	ip, r3
 80085e4:	fa22 f20e 	lsr.w	r2, r2, lr
 80085e8:	d8f3      	bhi.n	80085d2 <__lshift+0x6e>
 80085ea:	ebac 0304 	sub.w	r3, ip, r4
 80085ee:	3b15      	subs	r3, #21
 80085f0:	f023 0303 	bic.w	r3, r3, #3
 80085f4:	3304      	adds	r3, #4
 80085f6:	f104 0015 	add.w	r0, r4, #21
 80085fa:	4560      	cmp	r0, ip
 80085fc:	bf88      	it	hi
 80085fe:	2304      	movhi	r3, #4
 8008600:	50ca      	str	r2, [r1, r3]
 8008602:	b10a      	cbz	r2, 8008608 <__lshift+0xa4>
 8008604:	f108 0602 	add.w	r6, r8, #2
 8008608:	3e01      	subs	r6, #1
 800860a:	4638      	mov	r0, r7
 800860c:	4621      	mov	r1, r4
 800860e:	612e      	str	r6, [r5, #16]
 8008610:	f7ff fd98 	bl	8008144 <_Bfree>
 8008614:	4628      	mov	r0, r5
 8008616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800861a:	f842 0f04 	str.w	r0, [r2, #4]!
 800861e:	3301      	adds	r3, #1
 8008620:	e7c5      	b.n	80085ae <__lshift+0x4a>
 8008622:	3904      	subs	r1, #4
 8008624:	f853 2b04 	ldr.w	r2, [r3], #4
 8008628:	459c      	cmp	ip, r3
 800862a:	f841 2f04 	str.w	r2, [r1, #4]!
 800862e:	d8f9      	bhi.n	8008624 <__lshift+0xc0>
 8008630:	e7ea      	b.n	8008608 <__lshift+0xa4>
 8008632:	bf00      	nop
 8008634:	0800a978 	.word	0x0800a978
 8008638:	0800a989 	.word	0x0800a989

0800863c <__mcmp>:
 800863c:	4603      	mov	r3, r0
 800863e:	690a      	ldr	r2, [r1, #16]
 8008640:	6900      	ldr	r0, [r0, #16]
 8008642:	b530      	push	{r4, r5, lr}
 8008644:	1a80      	subs	r0, r0, r2
 8008646:	d10e      	bne.n	8008666 <__mcmp+0x2a>
 8008648:	3314      	adds	r3, #20
 800864a:	3114      	adds	r1, #20
 800864c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008650:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008654:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008658:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800865c:	4295      	cmp	r5, r2
 800865e:	d003      	beq.n	8008668 <__mcmp+0x2c>
 8008660:	d205      	bcs.n	800866e <__mcmp+0x32>
 8008662:	f04f 30ff 	mov.w	r0, #4294967295
 8008666:	bd30      	pop	{r4, r5, pc}
 8008668:	42a3      	cmp	r3, r4
 800866a:	d3f3      	bcc.n	8008654 <__mcmp+0x18>
 800866c:	e7fb      	b.n	8008666 <__mcmp+0x2a>
 800866e:	2001      	movs	r0, #1
 8008670:	e7f9      	b.n	8008666 <__mcmp+0x2a>
	...

08008674 <__mdiff>:
 8008674:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008678:	4689      	mov	r9, r1
 800867a:	4606      	mov	r6, r0
 800867c:	4611      	mov	r1, r2
 800867e:	4648      	mov	r0, r9
 8008680:	4614      	mov	r4, r2
 8008682:	f7ff ffdb 	bl	800863c <__mcmp>
 8008686:	1e05      	subs	r5, r0, #0
 8008688:	d112      	bne.n	80086b0 <__mdiff+0x3c>
 800868a:	4629      	mov	r1, r5
 800868c:	4630      	mov	r0, r6
 800868e:	f7ff fd19 	bl	80080c4 <_Balloc>
 8008692:	4602      	mov	r2, r0
 8008694:	b928      	cbnz	r0, 80086a2 <__mdiff+0x2e>
 8008696:	f240 2137 	movw	r1, #567	@ 0x237
 800869a:	4b3e      	ldr	r3, [pc, #248]	@ (8008794 <__mdiff+0x120>)
 800869c:	483e      	ldr	r0, [pc, #248]	@ (8008798 <__mdiff+0x124>)
 800869e:	f001 f9f3 	bl	8009a88 <__assert_func>
 80086a2:	2301      	movs	r3, #1
 80086a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80086a8:	4610      	mov	r0, r2
 80086aa:	b003      	add	sp, #12
 80086ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086b0:	bfbc      	itt	lt
 80086b2:	464b      	movlt	r3, r9
 80086b4:	46a1      	movlt	r9, r4
 80086b6:	4630      	mov	r0, r6
 80086b8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80086bc:	bfba      	itte	lt
 80086be:	461c      	movlt	r4, r3
 80086c0:	2501      	movlt	r5, #1
 80086c2:	2500      	movge	r5, #0
 80086c4:	f7ff fcfe 	bl	80080c4 <_Balloc>
 80086c8:	4602      	mov	r2, r0
 80086ca:	b918      	cbnz	r0, 80086d4 <__mdiff+0x60>
 80086cc:	f240 2145 	movw	r1, #581	@ 0x245
 80086d0:	4b30      	ldr	r3, [pc, #192]	@ (8008794 <__mdiff+0x120>)
 80086d2:	e7e3      	b.n	800869c <__mdiff+0x28>
 80086d4:	f100 0b14 	add.w	fp, r0, #20
 80086d8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80086dc:	f109 0310 	add.w	r3, r9, #16
 80086e0:	60c5      	str	r5, [r0, #12]
 80086e2:	f04f 0c00 	mov.w	ip, #0
 80086e6:	f109 0514 	add.w	r5, r9, #20
 80086ea:	46d9      	mov	r9, fp
 80086ec:	6926      	ldr	r6, [r4, #16]
 80086ee:	f104 0e14 	add.w	lr, r4, #20
 80086f2:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80086f6:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80086fa:	9301      	str	r3, [sp, #4]
 80086fc:	9b01      	ldr	r3, [sp, #4]
 80086fe:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008702:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008706:	b281      	uxth	r1, r0
 8008708:	9301      	str	r3, [sp, #4]
 800870a:	fa1f f38a 	uxth.w	r3, sl
 800870e:	1a5b      	subs	r3, r3, r1
 8008710:	0c00      	lsrs	r0, r0, #16
 8008712:	4463      	add	r3, ip
 8008714:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008718:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800871c:	b29b      	uxth	r3, r3
 800871e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008722:	4576      	cmp	r6, lr
 8008724:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008728:	f849 3b04 	str.w	r3, [r9], #4
 800872c:	d8e6      	bhi.n	80086fc <__mdiff+0x88>
 800872e:	1b33      	subs	r3, r6, r4
 8008730:	3b15      	subs	r3, #21
 8008732:	f023 0303 	bic.w	r3, r3, #3
 8008736:	3415      	adds	r4, #21
 8008738:	3304      	adds	r3, #4
 800873a:	42a6      	cmp	r6, r4
 800873c:	bf38      	it	cc
 800873e:	2304      	movcc	r3, #4
 8008740:	441d      	add	r5, r3
 8008742:	445b      	add	r3, fp
 8008744:	461e      	mov	r6, r3
 8008746:	462c      	mov	r4, r5
 8008748:	4544      	cmp	r4, r8
 800874a:	d30e      	bcc.n	800876a <__mdiff+0xf6>
 800874c:	f108 0103 	add.w	r1, r8, #3
 8008750:	1b49      	subs	r1, r1, r5
 8008752:	f021 0103 	bic.w	r1, r1, #3
 8008756:	3d03      	subs	r5, #3
 8008758:	45a8      	cmp	r8, r5
 800875a:	bf38      	it	cc
 800875c:	2100      	movcc	r1, #0
 800875e:	440b      	add	r3, r1
 8008760:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008764:	b199      	cbz	r1, 800878e <__mdiff+0x11a>
 8008766:	6117      	str	r7, [r2, #16]
 8008768:	e79e      	b.n	80086a8 <__mdiff+0x34>
 800876a:	46e6      	mov	lr, ip
 800876c:	f854 1b04 	ldr.w	r1, [r4], #4
 8008770:	fa1f fc81 	uxth.w	ip, r1
 8008774:	44f4      	add	ip, lr
 8008776:	0c08      	lsrs	r0, r1, #16
 8008778:	4471      	add	r1, lr
 800877a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800877e:	b289      	uxth	r1, r1
 8008780:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008784:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008788:	f846 1b04 	str.w	r1, [r6], #4
 800878c:	e7dc      	b.n	8008748 <__mdiff+0xd4>
 800878e:	3f01      	subs	r7, #1
 8008790:	e7e6      	b.n	8008760 <__mdiff+0xec>
 8008792:	bf00      	nop
 8008794:	0800a978 	.word	0x0800a978
 8008798:	0800a989 	.word	0x0800a989

0800879c <__ulp>:
 800879c:	4b0e      	ldr	r3, [pc, #56]	@ (80087d8 <__ulp+0x3c>)
 800879e:	400b      	ands	r3, r1
 80087a0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	dc08      	bgt.n	80087ba <__ulp+0x1e>
 80087a8:	425b      	negs	r3, r3
 80087aa:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80087ae:	ea4f 5223 	mov.w	r2, r3, asr #20
 80087b2:	da04      	bge.n	80087be <__ulp+0x22>
 80087b4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80087b8:	4113      	asrs	r3, r2
 80087ba:	2200      	movs	r2, #0
 80087bc:	e008      	b.n	80087d0 <__ulp+0x34>
 80087be:	f1a2 0314 	sub.w	r3, r2, #20
 80087c2:	2b1e      	cmp	r3, #30
 80087c4:	bfd6      	itet	le
 80087c6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80087ca:	2201      	movgt	r2, #1
 80087cc:	40da      	lsrle	r2, r3
 80087ce:	2300      	movs	r3, #0
 80087d0:	4619      	mov	r1, r3
 80087d2:	4610      	mov	r0, r2
 80087d4:	4770      	bx	lr
 80087d6:	bf00      	nop
 80087d8:	7ff00000 	.word	0x7ff00000

080087dc <__b2d>:
 80087dc:	6902      	ldr	r2, [r0, #16]
 80087de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087e0:	f100 0614 	add.w	r6, r0, #20
 80087e4:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 80087e8:	f852 4c04 	ldr.w	r4, [r2, #-4]
 80087ec:	4f1e      	ldr	r7, [pc, #120]	@ (8008868 <__b2d+0x8c>)
 80087ee:	4620      	mov	r0, r4
 80087f0:	f7ff fd5a 	bl	80082a8 <__hi0bits>
 80087f4:	4603      	mov	r3, r0
 80087f6:	f1c0 0020 	rsb	r0, r0, #32
 80087fa:	2b0a      	cmp	r3, #10
 80087fc:	f1a2 0504 	sub.w	r5, r2, #4
 8008800:	6008      	str	r0, [r1, #0]
 8008802:	dc12      	bgt.n	800882a <__b2d+0x4e>
 8008804:	42ae      	cmp	r6, r5
 8008806:	bf2c      	ite	cs
 8008808:	2200      	movcs	r2, #0
 800880a:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800880e:	f1c3 0c0b 	rsb	ip, r3, #11
 8008812:	3315      	adds	r3, #21
 8008814:	fa24 fe0c 	lsr.w	lr, r4, ip
 8008818:	fa04 f303 	lsl.w	r3, r4, r3
 800881c:	fa22 f20c 	lsr.w	r2, r2, ip
 8008820:	ea4e 0107 	orr.w	r1, lr, r7
 8008824:	431a      	orrs	r2, r3
 8008826:	4610      	mov	r0, r2
 8008828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800882a:	42ae      	cmp	r6, r5
 800882c:	bf36      	itet	cc
 800882e:	f1a2 0508 	subcc.w	r5, r2, #8
 8008832:	2200      	movcs	r2, #0
 8008834:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8008838:	3b0b      	subs	r3, #11
 800883a:	d012      	beq.n	8008862 <__b2d+0x86>
 800883c:	f1c3 0720 	rsb	r7, r3, #32
 8008840:	fa22 f107 	lsr.w	r1, r2, r7
 8008844:	409c      	lsls	r4, r3
 8008846:	430c      	orrs	r4, r1
 8008848:	42b5      	cmp	r5, r6
 800884a:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800884e:	bf94      	ite	ls
 8008850:	2400      	movls	r4, #0
 8008852:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8008856:	409a      	lsls	r2, r3
 8008858:	40fc      	lsrs	r4, r7
 800885a:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800885e:	4322      	orrs	r2, r4
 8008860:	e7e1      	b.n	8008826 <__b2d+0x4a>
 8008862:	ea44 0107 	orr.w	r1, r4, r7
 8008866:	e7de      	b.n	8008826 <__b2d+0x4a>
 8008868:	3ff00000 	.word	0x3ff00000

0800886c <__d2b>:
 800886c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8008870:	2101      	movs	r1, #1
 8008872:	4690      	mov	r8, r2
 8008874:	4699      	mov	r9, r3
 8008876:	9e08      	ldr	r6, [sp, #32]
 8008878:	f7ff fc24 	bl	80080c4 <_Balloc>
 800887c:	4604      	mov	r4, r0
 800887e:	b930      	cbnz	r0, 800888e <__d2b+0x22>
 8008880:	4602      	mov	r2, r0
 8008882:	f240 310f 	movw	r1, #783	@ 0x30f
 8008886:	4b23      	ldr	r3, [pc, #140]	@ (8008914 <__d2b+0xa8>)
 8008888:	4823      	ldr	r0, [pc, #140]	@ (8008918 <__d2b+0xac>)
 800888a:	f001 f8fd 	bl	8009a88 <__assert_func>
 800888e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008892:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008896:	b10d      	cbz	r5, 800889c <__d2b+0x30>
 8008898:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800889c:	9301      	str	r3, [sp, #4]
 800889e:	f1b8 0300 	subs.w	r3, r8, #0
 80088a2:	d024      	beq.n	80088ee <__d2b+0x82>
 80088a4:	4668      	mov	r0, sp
 80088a6:	9300      	str	r3, [sp, #0]
 80088a8:	f7ff fd1d 	bl	80082e6 <__lo0bits>
 80088ac:	e9dd 1200 	ldrd	r1, r2, [sp]
 80088b0:	b1d8      	cbz	r0, 80088ea <__d2b+0x7e>
 80088b2:	f1c0 0320 	rsb	r3, r0, #32
 80088b6:	fa02 f303 	lsl.w	r3, r2, r3
 80088ba:	430b      	orrs	r3, r1
 80088bc:	40c2      	lsrs	r2, r0
 80088be:	6163      	str	r3, [r4, #20]
 80088c0:	9201      	str	r2, [sp, #4]
 80088c2:	9b01      	ldr	r3, [sp, #4]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	bf0c      	ite	eq
 80088c8:	2201      	moveq	r2, #1
 80088ca:	2202      	movne	r2, #2
 80088cc:	61a3      	str	r3, [r4, #24]
 80088ce:	6122      	str	r2, [r4, #16]
 80088d0:	b1ad      	cbz	r5, 80088fe <__d2b+0x92>
 80088d2:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80088d6:	4405      	add	r5, r0
 80088d8:	6035      	str	r5, [r6, #0]
 80088da:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80088de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088e0:	6018      	str	r0, [r3, #0]
 80088e2:	4620      	mov	r0, r4
 80088e4:	b002      	add	sp, #8
 80088e6:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80088ea:	6161      	str	r1, [r4, #20]
 80088ec:	e7e9      	b.n	80088c2 <__d2b+0x56>
 80088ee:	a801      	add	r0, sp, #4
 80088f0:	f7ff fcf9 	bl	80082e6 <__lo0bits>
 80088f4:	9b01      	ldr	r3, [sp, #4]
 80088f6:	2201      	movs	r2, #1
 80088f8:	6163      	str	r3, [r4, #20]
 80088fa:	3020      	adds	r0, #32
 80088fc:	e7e7      	b.n	80088ce <__d2b+0x62>
 80088fe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008902:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008906:	6030      	str	r0, [r6, #0]
 8008908:	6918      	ldr	r0, [r3, #16]
 800890a:	f7ff fccd 	bl	80082a8 <__hi0bits>
 800890e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008912:	e7e4      	b.n	80088de <__d2b+0x72>
 8008914:	0800a978 	.word	0x0800a978
 8008918:	0800a989 	.word	0x0800a989

0800891c <__ratio>:
 800891c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008920:	b085      	sub	sp, #20
 8008922:	e9cd 1000 	strd	r1, r0, [sp]
 8008926:	a902      	add	r1, sp, #8
 8008928:	f7ff ff58 	bl	80087dc <__b2d>
 800892c:	468b      	mov	fp, r1
 800892e:	4606      	mov	r6, r0
 8008930:	460f      	mov	r7, r1
 8008932:	9800      	ldr	r0, [sp, #0]
 8008934:	a903      	add	r1, sp, #12
 8008936:	f7ff ff51 	bl	80087dc <__b2d>
 800893a:	460d      	mov	r5, r1
 800893c:	9b01      	ldr	r3, [sp, #4]
 800893e:	4689      	mov	r9, r1
 8008940:	6919      	ldr	r1, [r3, #16]
 8008942:	9b00      	ldr	r3, [sp, #0]
 8008944:	4604      	mov	r4, r0
 8008946:	691b      	ldr	r3, [r3, #16]
 8008948:	4630      	mov	r0, r6
 800894a:	1ac9      	subs	r1, r1, r3
 800894c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008950:	1a9b      	subs	r3, r3, r2
 8008952:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008956:	2b00      	cmp	r3, #0
 8008958:	bfcd      	iteet	gt
 800895a:	463a      	movgt	r2, r7
 800895c:	462a      	movle	r2, r5
 800895e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008962:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8008966:	bfd8      	it	le
 8008968:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800896c:	464b      	mov	r3, r9
 800896e:	4622      	mov	r2, r4
 8008970:	4659      	mov	r1, fp
 8008972:	f7f7 ff8f 	bl	8000894 <__aeabi_ddiv>
 8008976:	b005      	add	sp, #20
 8008978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800897c <__copybits>:
 800897c:	3901      	subs	r1, #1
 800897e:	b570      	push	{r4, r5, r6, lr}
 8008980:	1149      	asrs	r1, r1, #5
 8008982:	6914      	ldr	r4, [r2, #16]
 8008984:	3101      	adds	r1, #1
 8008986:	f102 0314 	add.w	r3, r2, #20
 800898a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800898e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008992:	1f05      	subs	r5, r0, #4
 8008994:	42a3      	cmp	r3, r4
 8008996:	d30c      	bcc.n	80089b2 <__copybits+0x36>
 8008998:	1aa3      	subs	r3, r4, r2
 800899a:	3b11      	subs	r3, #17
 800899c:	f023 0303 	bic.w	r3, r3, #3
 80089a0:	3211      	adds	r2, #17
 80089a2:	42a2      	cmp	r2, r4
 80089a4:	bf88      	it	hi
 80089a6:	2300      	movhi	r3, #0
 80089a8:	4418      	add	r0, r3
 80089aa:	2300      	movs	r3, #0
 80089ac:	4288      	cmp	r0, r1
 80089ae:	d305      	bcc.n	80089bc <__copybits+0x40>
 80089b0:	bd70      	pop	{r4, r5, r6, pc}
 80089b2:	f853 6b04 	ldr.w	r6, [r3], #4
 80089b6:	f845 6f04 	str.w	r6, [r5, #4]!
 80089ba:	e7eb      	b.n	8008994 <__copybits+0x18>
 80089bc:	f840 3b04 	str.w	r3, [r0], #4
 80089c0:	e7f4      	b.n	80089ac <__copybits+0x30>

080089c2 <__any_on>:
 80089c2:	f100 0214 	add.w	r2, r0, #20
 80089c6:	6900      	ldr	r0, [r0, #16]
 80089c8:	114b      	asrs	r3, r1, #5
 80089ca:	4298      	cmp	r0, r3
 80089cc:	b510      	push	{r4, lr}
 80089ce:	db11      	blt.n	80089f4 <__any_on+0x32>
 80089d0:	dd0a      	ble.n	80089e8 <__any_on+0x26>
 80089d2:	f011 011f 	ands.w	r1, r1, #31
 80089d6:	d007      	beq.n	80089e8 <__any_on+0x26>
 80089d8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80089dc:	fa24 f001 	lsr.w	r0, r4, r1
 80089e0:	fa00 f101 	lsl.w	r1, r0, r1
 80089e4:	428c      	cmp	r4, r1
 80089e6:	d10b      	bne.n	8008a00 <__any_on+0x3e>
 80089e8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d803      	bhi.n	80089f8 <__any_on+0x36>
 80089f0:	2000      	movs	r0, #0
 80089f2:	bd10      	pop	{r4, pc}
 80089f4:	4603      	mov	r3, r0
 80089f6:	e7f7      	b.n	80089e8 <__any_on+0x26>
 80089f8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80089fc:	2900      	cmp	r1, #0
 80089fe:	d0f5      	beq.n	80089ec <__any_on+0x2a>
 8008a00:	2001      	movs	r0, #1
 8008a02:	e7f6      	b.n	80089f2 <__any_on+0x30>

08008a04 <sulp>:
 8008a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a08:	460f      	mov	r7, r1
 8008a0a:	4690      	mov	r8, r2
 8008a0c:	f7ff fec6 	bl	800879c <__ulp>
 8008a10:	4604      	mov	r4, r0
 8008a12:	460d      	mov	r5, r1
 8008a14:	f1b8 0f00 	cmp.w	r8, #0
 8008a18:	d011      	beq.n	8008a3e <sulp+0x3a>
 8008a1a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8008a1e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	dd0b      	ble.n	8008a3e <sulp+0x3a>
 8008a26:	2400      	movs	r4, #0
 8008a28:	051b      	lsls	r3, r3, #20
 8008a2a:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008a2e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008a32:	4622      	mov	r2, r4
 8008a34:	462b      	mov	r3, r5
 8008a36:	f7f7 fe03 	bl	8000640 <__aeabi_dmul>
 8008a3a:	4604      	mov	r4, r0
 8008a3c:	460d      	mov	r5, r1
 8008a3e:	4620      	mov	r0, r4
 8008a40:	4629      	mov	r1, r5
 8008a42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08008a48 <_strtod_l>:
 8008a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a4c:	b09f      	sub	sp, #124	@ 0x7c
 8008a4e:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008a50:	2200      	movs	r2, #0
 8008a52:	460c      	mov	r4, r1
 8008a54:	921a      	str	r2, [sp, #104]	@ 0x68
 8008a56:	f04f 0a00 	mov.w	sl, #0
 8008a5a:	f04f 0b00 	mov.w	fp, #0
 8008a5e:	460a      	mov	r2, r1
 8008a60:	9005      	str	r0, [sp, #20]
 8008a62:	9219      	str	r2, [sp, #100]	@ 0x64
 8008a64:	7811      	ldrb	r1, [r2, #0]
 8008a66:	292b      	cmp	r1, #43	@ 0x2b
 8008a68:	d048      	beq.n	8008afc <_strtod_l+0xb4>
 8008a6a:	d836      	bhi.n	8008ada <_strtod_l+0x92>
 8008a6c:	290d      	cmp	r1, #13
 8008a6e:	d830      	bhi.n	8008ad2 <_strtod_l+0x8a>
 8008a70:	2908      	cmp	r1, #8
 8008a72:	d830      	bhi.n	8008ad6 <_strtod_l+0x8e>
 8008a74:	2900      	cmp	r1, #0
 8008a76:	d039      	beq.n	8008aec <_strtod_l+0xa4>
 8008a78:	2200      	movs	r2, #0
 8008a7a:	920e      	str	r2, [sp, #56]	@ 0x38
 8008a7c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008a7e:	782a      	ldrb	r2, [r5, #0]
 8008a80:	2a30      	cmp	r2, #48	@ 0x30
 8008a82:	f040 80b0 	bne.w	8008be6 <_strtod_l+0x19e>
 8008a86:	786a      	ldrb	r2, [r5, #1]
 8008a88:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008a8c:	2a58      	cmp	r2, #88	@ 0x58
 8008a8e:	d16c      	bne.n	8008b6a <_strtod_l+0x122>
 8008a90:	9302      	str	r3, [sp, #8]
 8008a92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a94:	4a8f      	ldr	r2, [pc, #572]	@ (8008cd4 <_strtod_l+0x28c>)
 8008a96:	9301      	str	r3, [sp, #4]
 8008a98:	ab1a      	add	r3, sp, #104	@ 0x68
 8008a9a:	9300      	str	r3, [sp, #0]
 8008a9c:	9805      	ldr	r0, [sp, #20]
 8008a9e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008aa0:	a919      	add	r1, sp, #100	@ 0x64
 8008aa2:	f001 f88b 	bl	8009bbc <__gethex>
 8008aa6:	f010 060f 	ands.w	r6, r0, #15
 8008aaa:	4604      	mov	r4, r0
 8008aac:	d005      	beq.n	8008aba <_strtod_l+0x72>
 8008aae:	2e06      	cmp	r6, #6
 8008ab0:	d126      	bne.n	8008b00 <_strtod_l+0xb8>
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	3501      	adds	r5, #1
 8008ab6:	9519      	str	r5, [sp, #100]	@ 0x64
 8008ab8:	930e      	str	r3, [sp, #56]	@ 0x38
 8008aba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	f040 8582 	bne.w	80095c6 <_strtod_l+0xb7e>
 8008ac2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ac4:	b1bb      	cbz	r3, 8008af6 <_strtod_l+0xae>
 8008ac6:	4650      	mov	r0, sl
 8008ac8:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8008acc:	b01f      	add	sp, #124	@ 0x7c
 8008ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ad2:	2920      	cmp	r1, #32
 8008ad4:	d1d0      	bne.n	8008a78 <_strtod_l+0x30>
 8008ad6:	3201      	adds	r2, #1
 8008ad8:	e7c3      	b.n	8008a62 <_strtod_l+0x1a>
 8008ada:	292d      	cmp	r1, #45	@ 0x2d
 8008adc:	d1cc      	bne.n	8008a78 <_strtod_l+0x30>
 8008ade:	2101      	movs	r1, #1
 8008ae0:	910e      	str	r1, [sp, #56]	@ 0x38
 8008ae2:	1c51      	adds	r1, r2, #1
 8008ae4:	9119      	str	r1, [sp, #100]	@ 0x64
 8008ae6:	7852      	ldrb	r2, [r2, #1]
 8008ae8:	2a00      	cmp	r2, #0
 8008aea:	d1c7      	bne.n	8008a7c <_strtod_l+0x34>
 8008aec:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008aee:	9419      	str	r4, [sp, #100]	@ 0x64
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	f040 8566 	bne.w	80095c2 <_strtod_l+0xb7a>
 8008af6:	4650      	mov	r0, sl
 8008af8:	4659      	mov	r1, fp
 8008afa:	e7e7      	b.n	8008acc <_strtod_l+0x84>
 8008afc:	2100      	movs	r1, #0
 8008afe:	e7ef      	b.n	8008ae0 <_strtod_l+0x98>
 8008b00:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008b02:	b13a      	cbz	r2, 8008b14 <_strtod_l+0xcc>
 8008b04:	2135      	movs	r1, #53	@ 0x35
 8008b06:	a81c      	add	r0, sp, #112	@ 0x70
 8008b08:	f7ff ff38 	bl	800897c <__copybits>
 8008b0c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008b0e:	9805      	ldr	r0, [sp, #20]
 8008b10:	f7ff fb18 	bl	8008144 <_Bfree>
 8008b14:	3e01      	subs	r6, #1
 8008b16:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008b18:	2e04      	cmp	r6, #4
 8008b1a:	d806      	bhi.n	8008b2a <_strtod_l+0xe2>
 8008b1c:	e8df f006 	tbb	[pc, r6]
 8008b20:	201d0314 	.word	0x201d0314
 8008b24:	14          	.byte	0x14
 8008b25:	00          	.byte	0x00
 8008b26:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008b2a:	05e1      	lsls	r1, r4, #23
 8008b2c:	bf48      	it	mi
 8008b2e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008b32:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008b36:	0d1b      	lsrs	r3, r3, #20
 8008b38:	051b      	lsls	r3, r3, #20
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d1bd      	bne.n	8008aba <_strtod_l+0x72>
 8008b3e:	f7fe fb17 	bl	8007170 <__errno>
 8008b42:	2322      	movs	r3, #34	@ 0x22
 8008b44:	6003      	str	r3, [r0, #0]
 8008b46:	e7b8      	b.n	8008aba <_strtod_l+0x72>
 8008b48:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008b4c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008b50:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008b54:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008b58:	e7e7      	b.n	8008b2a <_strtod_l+0xe2>
 8008b5a:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8008cd8 <_strtod_l+0x290>
 8008b5e:	e7e4      	b.n	8008b2a <_strtod_l+0xe2>
 8008b60:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008b64:	f04f 3aff 	mov.w	sl, #4294967295
 8008b68:	e7df      	b.n	8008b2a <_strtod_l+0xe2>
 8008b6a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008b6c:	1c5a      	adds	r2, r3, #1
 8008b6e:	9219      	str	r2, [sp, #100]	@ 0x64
 8008b70:	785b      	ldrb	r3, [r3, #1]
 8008b72:	2b30      	cmp	r3, #48	@ 0x30
 8008b74:	d0f9      	beq.n	8008b6a <_strtod_l+0x122>
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d09f      	beq.n	8008aba <_strtod_l+0x72>
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	2700      	movs	r7, #0
 8008b7e:	220a      	movs	r2, #10
 8008b80:	46b9      	mov	r9, r7
 8008b82:	9308      	str	r3, [sp, #32]
 8008b84:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008b86:	970b      	str	r7, [sp, #44]	@ 0x2c
 8008b88:	930c      	str	r3, [sp, #48]	@ 0x30
 8008b8a:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008b8c:	7805      	ldrb	r5, [r0, #0]
 8008b8e:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008b92:	b2d9      	uxtb	r1, r3
 8008b94:	2909      	cmp	r1, #9
 8008b96:	d928      	bls.n	8008bea <_strtod_l+0x1a2>
 8008b98:	2201      	movs	r2, #1
 8008b9a:	4950      	ldr	r1, [pc, #320]	@ (8008cdc <_strtod_l+0x294>)
 8008b9c:	f000 ff4c 	bl	8009a38 <strncmp>
 8008ba0:	2800      	cmp	r0, #0
 8008ba2:	d032      	beq.n	8008c0a <_strtod_l+0x1c2>
 8008ba4:	2000      	movs	r0, #0
 8008ba6:	462a      	mov	r2, r5
 8008ba8:	4603      	mov	r3, r0
 8008baa:	464d      	mov	r5, r9
 8008bac:	900a      	str	r0, [sp, #40]	@ 0x28
 8008bae:	2a65      	cmp	r2, #101	@ 0x65
 8008bb0:	d001      	beq.n	8008bb6 <_strtod_l+0x16e>
 8008bb2:	2a45      	cmp	r2, #69	@ 0x45
 8008bb4:	d114      	bne.n	8008be0 <_strtod_l+0x198>
 8008bb6:	b91d      	cbnz	r5, 8008bc0 <_strtod_l+0x178>
 8008bb8:	9a08      	ldr	r2, [sp, #32]
 8008bba:	4302      	orrs	r2, r0
 8008bbc:	d096      	beq.n	8008aec <_strtod_l+0xa4>
 8008bbe:	2500      	movs	r5, #0
 8008bc0:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008bc2:	1c62      	adds	r2, r4, #1
 8008bc4:	9219      	str	r2, [sp, #100]	@ 0x64
 8008bc6:	7862      	ldrb	r2, [r4, #1]
 8008bc8:	2a2b      	cmp	r2, #43	@ 0x2b
 8008bca:	d07a      	beq.n	8008cc2 <_strtod_l+0x27a>
 8008bcc:	2a2d      	cmp	r2, #45	@ 0x2d
 8008bce:	d07e      	beq.n	8008cce <_strtod_l+0x286>
 8008bd0:	f04f 0c00 	mov.w	ip, #0
 8008bd4:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008bd8:	2909      	cmp	r1, #9
 8008bda:	f240 8085 	bls.w	8008ce8 <_strtod_l+0x2a0>
 8008bde:	9419      	str	r4, [sp, #100]	@ 0x64
 8008be0:	f04f 0800 	mov.w	r8, #0
 8008be4:	e0a5      	b.n	8008d32 <_strtod_l+0x2ea>
 8008be6:	2300      	movs	r3, #0
 8008be8:	e7c8      	b.n	8008b7c <_strtod_l+0x134>
 8008bea:	f1b9 0f08 	cmp.w	r9, #8
 8008bee:	bfd8      	it	le
 8008bf0:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8008bf2:	f100 0001 	add.w	r0, r0, #1
 8008bf6:	bfd6      	itet	le
 8008bf8:	fb02 3301 	mlale	r3, r2, r1, r3
 8008bfc:	fb02 3707 	mlagt	r7, r2, r7, r3
 8008c00:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8008c02:	f109 0901 	add.w	r9, r9, #1
 8008c06:	9019      	str	r0, [sp, #100]	@ 0x64
 8008c08:	e7bf      	b.n	8008b8a <_strtod_l+0x142>
 8008c0a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008c0c:	1c5a      	adds	r2, r3, #1
 8008c0e:	9219      	str	r2, [sp, #100]	@ 0x64
 8008c10:	785a      	ldrb	r2, [r3, #1]
 8008c12:	f1b9 0f00 	cmp.w	r9, #0
 8008c16:	d03b      	beq.n	8008c90 <_strtod_l+0x248>
 8008c18:	464d      	mov	r5, r9
 8008c1a:	900a      	str	r0, [sp, #40]	@ 0x28
 8008c1c:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008c20:	2b09      	cmp	r3, #9
 8008c22:	d912      	bls.n	8008c4a <_strtod_l+0x202>
 8008c24:	2301      	movs	r3, #1
 8008c26:	e7c2      	b.n	8008bae <_strtod_l+0x166>
 8008c28:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008c2a:	3001      	adds	r0, #1
 8008c2c:	1c5a      	adds	r2, r3, #1
 8008c2e:	9219      	str	r2, [sp, #100]	@ 0x64
 8008c30:	785a      	ldrb	r2, [r3, #1]
 8008c32:	2a30      	cmp	r2, #48	@ 0x30
 8008c34:	d0f8      	beq.n	8008c28 <_strtod_l+0x1e0>
 8008c36:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008c3a:	2b08      	cmp	r3, #8
 8008c3c:	f200 84c8 	bhi.w	80095d0 <_strtod_l+0xb88>
 8008c40:	900a      	str	r0, [sp, #40]	@ 0x28
 8008c42:	2000      	movs	r0, #0
 8008c44:	4605      	mov	r5, r0
 8008c46:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008c48:	930c      	str	r3, [sp, #48]	@ 0x30
 8008c4a:	3a30      	subs	r2, #48	@ 0x30
 8008c4c:	f100 0301 	add.w	r3, r0, #1
 8008c50:	d018      	beq.n	8008c84 <_strtod_l+0x23c>
 8008c52:	462e      	mov	r6, r5
 8008c54:	f04f 0e0a 	mov.w	lr, #10
 8008c58:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008c5a:	4419      	add	r1, r3
 8008c5c:	910a      	str	r1, [sp, #40]	@ 0x28
 8008c5e:	1c71      	adds	r1, r6, #1
 8008c60:	eba1 0c05 	sub.w	ip, r1, r5
 8008c64:	4563      	cmp	r3, ip
 8008c66:	dc15      	bgt.n	8008c94 <_strtod_l+0x24c>
 8008c68:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8008c6c:	182b      	adds	r3, r5, r0
 8008c6e:	2b08      	cmp	r3, #8
 8008c70:	f105 0501 	add.w	r5, r5, #1
 8008c74:	4405      	add	r5, r0
 8008c76:	dc1a      	bgt.n	8008cae <_strtod_l+0x266>
 8008c78:	230a      	movs	r3, #10
 8008c7a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008c7c:	fb03 2301 	mla	r3, r3, r1, r2
 8008c80:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008c82:	2300      	movs	r3, #0
 8008c84:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008c86:	4618      	mov	r0, r3
 8008c88:	1c51      	adds	r1, r2, #1
 8008c8a:	9119      	str	r1, [sp, #100]	@ 0x64
 8008c8c:	7852      	ldrb	r2, [r2, #1]
 8008c8e:	e7c5      	b.n	8008c1c <_strtod_l+0x1d4>
 8008c90:	4648      	mov	r0, r9
 8008c92:	e7ce      	b.n	8008c32 <_strtod_l+0x1ea>
 8008c94:	2e08      	cmp	r6, #8
 8008c96:	dc05      	bgt.n	8008ca4 <_strtod_l+0x25c>
 8008c98:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8008c9a:	fb0e f606 	mul.w	r6, lr, r6
 8008c9e:	960b      	str	r6, [sp, #44]	@ 0x2c
 8008ca0:	460e      	mov	r6, r1
 8008ca2:	e7dc      	b.n	8008c5e <_strtod_l+0x216>
 8008ca4:	2910      	cmp	r1, #16
 8008ca6:	bfd8      	it	le
 8008ca8:	fb0e f707 	mulle.w	r7, lr, r7
 8008cac:	e7f8      	b.n	8008ca0 <_strtod_l+0x258>
 8008cae:	2b0f      	cmp	r3, #15
 8008cb0:	bfdc      	itt	le
 8008cb2:	230a      	movle	r3, #10
 8008cb4:	fb03 2707 	mlale	r7, r3, r7, r2
 8008cb8:	e7e3      	b.n	8008c82 <_strtod_l+0x23a>
 8008cba:	2300      	movs	r3, #0
 8008cbc:	930a      	str	r3, [sp, #40]	@ 0x28
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	e77a      	b.n	8008bb8 <_strtod_l+0x170>
 8008cc2:	f04f 0c00 	mov.w	ip, #0
 8008cc6:	1ca2      	adds	r2, r4, #2
 8008cc8:	9219      	str	r2, [sp, #100]	@ 0x64
 8008cca:	78a2      	ldrb	r2, [r4, #2]
 8008ccc:	e782      	b.n	8008bd4 <_strtod_l+0x18c>
 8008cce:	f04f 0c01 	mov.w	ip, #1
 8008cd2:	e7f8      	b.n	8008cc6 <_strtod_l+0x27e>
 8008cd4:	0800abac 	.word	0x0800abac
 8008cd8:	7ff00000 	.word	0x7ff00000
 8008cdc:	0800a9e2 	.word	0x0800a9e2
 8008ce0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008ce2:	1c51      	adds	r1, r2, #1
 8008ce4:	9119      	str	r1, [sp, #100]	@ 0x64
 8008ce6:	7852      	ldrb	r2, [r2, #1]
 8008ce8:	2a30      	cmp	r2, #48	@ 0x30
 8008cea:	d0f9      	beq.n	8008ce0 <_strtod_l+0x298>
 8008cec:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008cf0:	2908      	cmp	r1, #8
 8008cf2:	f63f af75 	bhi.w	8008be0 <_strtod_l+0x198>
 8008cf6:	f04f 080a 	mov.w	r8, #10
 8008cfa:	3a30      	subs	r2, #48	@ 0x30
 8008cfc:	9209      	str	r2, [sp, #36]	@ 0x24
 8008cfe:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008d00:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008d02:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008d04:	1c56      	adds	r6, r2, #1
 8008d06:	9619      	str	r6, [sp, #100]	@ 0x64
 8008d08:	7852      	ldrb	r2, [r2, #1]
 8008d0a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008d0e:	f1be 0f09 	cmp.w	lr, #9
 8008d12:	d939      	bls.n	8008d88 <_strtod_l+0x340>
 8008d14:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008d16:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008d1a:	1a76      	subs	r6, r6, r1
 8008d1c:	2e08      	cmp	r6, #8
 8008d1e:	dc03      	bgt.n	8008d28 <_strtod_l+0x2e0>
 8008d20:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008d22:	4588      	cmp	r8, r1
 8008d24:	bfa8      	it	ge
 8008d26:	4688      	movge	r8, r1
 8008d28:	f1bc 0f00 	cmp.w	ip, #0
 8008d2c:	d001      	beq.n	8008d32 <_strtod_l+0x2ea>
 8008d2e:	f1c8 0800 	rsb	r8, r8, #0
 8008d32:	2d00      	cmp	r5, #0
 8008d34:	d14e      	bne.n	8008dd4 <_strtod_l+0x38c>
 8008d36:	9908      	ldr	r1, [sp, #32]
 8008d38:	4308      	orrs	r0, r1
 8008d3a:	f47f aebe 	bne.w	8008aba <_strtod_l+0x72>
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	f47f aed4 	bne.w	8008aec <_strtod_l+0xa4>
 8008d44:	2a69      	cmp	r2, #105	@ 0x69
 8008d46:	d028      	beq.n	8008d9a <_strtod_l+0x352>
 8008d48:	dc25      	bgt.n	8008d96 <_strtod_l+0x34e>
 8008d4a:	2a49      	cmp	r2, #73	@ 0x49
 8008d4c:	d025      	beq.n	8008d9a <_strtod_l+0x352>
 8008d4e:	2a4e      	cmp	r2, #78	@ 0x4e
 8008d50:	f47f aecc 	bne.w	8008aec <_strtod_l+0xa4>
 8008d54:	4999      	ldr	r1, [pc, #612]	@ (8008fbc <_strtod_l+0x574>)
 8008d56:	a819      	add	r0, sp, #100	@ 0x64
 8008d58:	f001 f952 	bl	800a000 <__match>
 8008d5c:	2800      	cmp	r0, #0
 8008d5e:	f43f aec5 	beq.w	8008aec <_strtod_l+0xa4>
 8008d62:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008d64:	781b      	ldrb	r3, [r3, #0]
 8008d66:	2b28      	cmp	r3, #40	@ 0x28
 8008d68:	d12e      	bne.n	8008dc8 <_strtod_l+0x380>
 8008d6a:	4995      	ldr	r1, [pc, #596]	@ (8008fc0 <_strtod_l+0x578>)
 8008d6c:	aa1c      	add	r2, sp, #112	@ 0x70
 8008d6e:	a819      	add	r0, sp, #100	@ 0x64
 8008d70:	f001 f95a 	bl	800a028 <__hexnan>
 8008d74:	2805      	cmp	r0, #5
 8008d76:	d127      	bne.n	8008dc8 <_strtod_l+0x380>
 8008d78:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008d7a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008d7e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008d82:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008d86:	e698      	b.n	8008aba <_strtod_l+0x72>
 8008d88:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008d8a:	fb08 2101 	mla	r1, r8, r1, r2
 8008d8e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008d92:	9209      	str	r2, [sp, #36]	@ 0x24
 8008d94:	e7b5      	b.n	8008d02 <_strtod_l+0x2ba>
 8008d96:	2a6e      	cmp	r2, #110	@ 0x6e
 8008d98:	e7da      	b.n	8008d50 <_strtod_l+0x308>
 8008d9a:	498a      	ldr	r1, [pc, #552]	@ (8008fc4 <_strtod_l+0x57c>)
 8008d9c:	a819      	add	r0, sp, #100	@ 0x64
 8008d9e:	f001 f92f 	bl	800a000 <__match>
 8008da2:	2800      	cmp	r0, #0
 8008da4:	f43f aea2 	beq.w	8008aec <_strtod_l+0xa4>
 8008da8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008daa:	4987      	ldr	r1, [pc, #540]	@ (8008fc8 <_strtod_l+0x580>)
 8008dac:	3b01      	subs	r3, #1
 8008dae:	a819      	add	r0, sp, #100	@ 0x64
 8008db0:	9319      	str	r3, [sp, #100]	@ 0x64
 8008db2:	f001 f925 	bl	800a000 <__match>
 8008db6:	b910      	cbnz	r0, 8008dbe <_strtod_l+0x376>
 8008db8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008dba:	3301      	adds	r3, #1
 8008dbc:	9319      	str	r3, [sp, #100]	@ 0x64
 8008dbe:	f04f 0a00 	mov.w	sl, #0
 8008dc2:	f8df b208 	ldr.w	fp, [pc, #520]	@ 8008fcc <_strtod_l+0x584>
 8008dc6:	e678      	b.n	8008aba <_strtod_l+0x72>
 8008dc8:	4881      	ldr	r0, [pc, #516]	@ (8008fd0 <_strtod_l+0x588>)
 8008dca:	f000 fe57 	bl	8009a7c <nan>
 8008dce:	4682      	mov	sl, r0
 8008dd0:	468b      	mov	fp, r1
 8008dd2:	e672      	b.n	8008aba <_strtod_l+0x72>
 8008dd4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008dd6:	f1b9 0f00 	cmp.w	r9, #0
 8008dda:	bf08      	it	eq
 8008ddc:	46a9      	moveq	r9, r5
 8008dde:	eba8 0303 	sub.w	r3, r8, r3
 8008de2:	2d10      	cmp	r5, #16
 8008de4:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8008de6:	462c      	mov	r4, r5
 8008de8:	9309      	str	r3, [sp, #36]	@ 0x24
 8008dea:	bfa8      	it	ge
 8008dec:	2410      	movge	r4, #16
 8008dee:	f7f7 fbad 	bl	800054c <__aeabi_ui2d>
 8008df2:	2d09      	cmp	r5, #9
 8008df4:	4682      	mov	sl, r0
 8008df6:	468b      	mov	fp, r1
 8008df8:	dc11      	bgt.n	8008e1e <_strtod_l+0x3d6>
 8008dfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	f43f ae5c 	beq.w	8008aba <_strtod_l+0x72>
 8008e02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e04:	dd76      	ble.n	8008ef4 <_strtod_l+0x4ac>
 8008e06:	2b16      	cmp	r3, #22
 8008e08:	dc5d      	bgt.n	8008ec6 <_strtod_l+0x47e>
 8008e0a:	4972      	ldr	r1, [pc, #456]	@ (8008fd4 <_strtod_l+0x58c>)
 8008e0c:	4652      	mov	r2, sl
 8008e0e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008e12:	465b      	mov	r3, fp
 8008e14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e18:	f7f7 fc12 	bl	8000640 <__aeabi_dmul>
 8008e1c:	e7d7      	b.n	8008dce <_strtod_l+0x386>
 8008e1e:	4b6d      	ldr	r3, [pc, #436]	@ (8008fd4 <_strtod_l+0x58c>)
 8008e20:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008e24:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008e28:	f7f7 fc0a 	bl	8000640 <__aeabi_dmul>
 8008e2c:	4682      	mov	sl, r0
 8008e2e:	4638      	mov	r0, r7
 8008e30:	468b      	mov	fp, r1
 8008e32:	f7f7 fb8b 	bl	800054c <__aeabi_ui2d>
 8008e36:	4602      	mov	r2, r0
 8008e38:	460b      	mov	r3, r1
 8008e3a:	4650      	mov	r0, sl
 8008e3c:	4659      	mov	r1, fp
 8008e3e:	f7f7 fa49 	bl	80002d4 <__adddf3>
 8008e42:	2d0f      	cmp	r5, #15
 8008e44:	4682      	mov	sl, r0
 8008e46:	468b      	mov	fp, r1
 8008e48:	ddd7      	ble.n	8008dfa <_strtod_l+0x3b2>
 8008e4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e4c:	1b2c      	subs	r4, r5, r4
 8008e4e:	441c      	add	r4, r3
 8008e50:	2c00      	cmp	r4, #0
 8008e52:	f340 8093 	ble.w	8008f7c <_strtod_l+0x534>
 8008e56:	f014 030f 	ands.w	r3, r4, #15
 8008e5a:	d00a      	beq.n	8008e72 <_strtod_l+0x42a>
 8008e5c:	495d      	ldr	r1, [pc, #372]	@ (8008fd4 <_strtod_l+0x58c>)
 8008e5e:	4652      	mov	r2, sl
 8008e60:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008e64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e68:	465b      	mov	r3, fp
 8008e6a:	f7f7 fbe9 	bl	8000640 <__aeabi_dmul>
 8008e6e:	4682      	mov	sl, r0
 8008e70:	468b      	mov	fp, r1
 8008e72:	f034 040f 	bics.w	r4, r4, #15
 8008e76:	d073      	beq.n	8008f60 <_strtod_l+0x518>
 8008e78:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008e7c:	dd49      	ble.n	8008f12 <_strtod_l+0x4ca>
 8008e7e:	2400      	movs	r4, #0
 8008e80:	46a0      	mov	r8, r4
 8008e82:	46a1      	mov	r9, r4
 8008e84:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008e86:	2322      	movs	r3, #34	@ 0x22
 8008e88:	f04f 0a00 	mov.w	sl, #0
 8008e8c:	9a05      	ldr	r2, [sp, #20]
 8008e8e:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 8008fcc <_strtod_l+0x584>
 8008e92:	6013      	str	r3, [r2, #0]
 8008e94:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	f43f ae0f 	beq.w	8008aba <_strtod_l+0x72>
 8008e9c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008e9e:	9805      	ldr	r0, [sp, #20]
 8008ea0:	f7ff f950 	bl	8008144 <_Bfree>
 8008ea4:	4649      	mov	r1, r9
 8008ea6:	9805      	ldr	r0, [sp, #20]
 8008ea8:	f7ff f94c 	bl	8008144 <_Bfree>
 8008eac:	4641      	mov	r1, r8
 8008eae:	9805      	ldr	r0, [sp, #20]
 8008eb0:	f7ff f948 	bl	8008144 <_Bfree>
 8008eb4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008eb6:	9805      	ldr	r0, [sp, #20]
 8008eb8:	f7ff f944 	bl	8008144 <_Bfree>
 8008ebc:	4621      	mov	r1, r4
 8008ebe:	9805      	ldr	r0, [sp, #20]
 8008ec0:	f7ff f940 	bl	8008144 <_Bfree>
 8008ec4:	e5f9      	b.n	8008aba <_strtod_l+0x72>
 8008ec6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008ec8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	dbbc      	blt.n	8008e4a <_strtod_l+0x402>
 8008ed0:	4c40      	ldr	r4, [pc, #256]	@ (8008fd4 <_strtod_l+0x58c>)
 8008ed2:	f1c5 050f 	rsb	r5, r5, #15
 8008ed6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008eda:	4652      	mov	r2, sl
 8008edc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ee0:	465b      	mov	r3, fp
 8008ee2:	f7f7 fbad 	bl	8000640 <__aeabi_dmul>
 8008ee6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ee8:	1b5d      	subs	r5, r3, r5
 8008eea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008eee:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008ef2:	e791      	b.n	8008e18 <_strtod_l+0x3d0>
 8008ef4:	3316      	adds	r3, #22
 8008ef6:	dba8      	blt.n	8008e4a <_strtod_l+0x402>
 8008ef8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008efa:	4650      	mov	r0, sl
 8008efc:	eba3 0808 	sub.w	r8, r3, r8
 8008f00:	4b34      	ldr	r3, [pc, #208]	@ (8008fd4 <_strtod_l+0x58c>)
 8008f02:	4659      	mov	r1, fp
 8008f04:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008f08:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008f0c:	f7f7 fcc2 	bl	8000894 <__aeabi_ddiv>
 8008f10:	e75d      	b.n	8008dce <_strtod_l+0x386>
 8008f12:	2300      	movs	r3, #0
 8008f14:	4650      	mov	r0, sl
 8008f16:	4659      	mov	r1, fp
 8008f18:	461e      	mov	r6, r3
 8008f1a:	4f2f      	ldr	r7, [pc, #188]	@ (8008fd8 <_strtod_l+0x590>)
 8008f1c:	1124      	asrs	r4, r4, #4
 8008f1e:	2c01      	cmp	r4, #1
 8008f20:	dc21      	bgt.n	8008f66 <_strtod_l+0x51e>
 8008f22:	b10b      	cbz	r3, 8008f28 <_strtod_l+0x4e0>
 8008f24:	4682      	mov	sl, r0
 8008f26:	468b      	mov	fp, r1
 8008f28:	492b      	ldr	r1, [pc, #172]	@ (8008fd8 <_strtod_l+0x590>)
 8008f2a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008f2e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008f32:	4652      	mov	r2, sl
 8008f34:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f38:	465b      	mov	r3, fp
 8008f3a:	f7f7 fb81 	bl	8000640 <__aeabi_dmul>
 8008f3e:	4b23      	ldr	r3, [pc, #140]	@ (8008fcc <_strtod_l+0x584>)
 8008f40:	460a      	mov	r2, r1
 8008f42:	400b      	ands	r3, r1
 8008f44:	4925      	ldr	r1, [pc, #148]	@ (8008fdc <_strtod_l+0x594>)
 8008f46:	4682      	mov	sl, r0
 8008f48:	428b      	cmp	r3, r1
 8008f4a:	d898      	bhi.n	8008e7e <_strtod_l+0x436>
 8008f4c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008f50:	428b      	cmp	r3, r1
 8008f52:	bf86      	itte	hi
 8008f54:	f04f 3aff 	movhi.w	sl, #4294967295
 8008f58:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 8008fe0 <_strtod_l+0x598>
 8008f5c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008f60:	2300      	movs	r3, #0
 8008f62:	9308      	str	r3, [sp, #32]
 8008f64:	e076      	b.n	8009054 <_strtod_l+0x60c>
 8008f66:	07e2      	lsls	r2, r4, #31
 8008f68:	d504      	bpl.n	8008f74 <_strtod_l+0x52c>
 8008f6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f6e:	f7f7 fb67 	bl	8000640 <__aeabi_dmul>
 8008f72:	2301      	movs	r3, #1
 8008f74:	3601      	adds	r6, #1
 8008f76:	1064      	asrs	r4, r4, #1
 8008f78:	3708      	adds	r7, #8
 8008f7a:	e7d0      	b.n	8008f1e <_strtod_l+0x4d6>
 8008f7c:	d0f0      	beq.n	8008f60 <_strtod_l+0x518>
 8008f7e:	4264      	negs	r4, r4
 8008f80:	f014 020f 	ands.w	r2, r4, #15
 8008f84:	d00a      	beq.n	8008f9c <_strtod_l+0x554>
 8008f86:	4b13      	ldr	r3, [pc, #76]	@ (8008fd4 <_strtod_l+0x58c>)
 8008f88:	4650      	mov	r0, sl
 8008f8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f8e:	4659      	mov	r1, fp
 8008f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f94:	f7f7 fc7e 	bl	8000894 <__aeabi_ddiv>
 8008f98:	4682      	mov	sl, r0
 8008f9a:	468b      	mov	fp, r1
 8008f9c:	1124      	asrs	r4, r4, #4
 8008f9e:	d0df      	beq.n	8008f60 <_strtod_l+0x518>
 8008fa0:	2c1f      	cmp	r4, #31
 8008fa2:	dd1f      	ble.n	8008fe4 <_strtod_l+0x59c>
 8008fa4:	2400      	movs	r4, #0
 8008fa6:	46a0      	mov	r8, r4
 8008fa8:	46a1      	mov	r9, r4
 8008faa:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008fac:	2322      	movs	r3, #34	@ 0x22
 8008fae:	9a05      	ldr	r2, [sp, #20]
 8008fb0:	f04f 0a00 	mov.w	sl, #0
 8008fb4:	f04f 0b00 	mov.w	fp, #0
 8008fb8:	6013      	str	r3, [r2, #0]
 8008fba:	e76b      	b.n	8008e94 <_strtod_l+0x44c>
 8008fbc:	0800a8d0 	.word	0x0800a8d0
 8008fc0:	0800ab98 	.word	0x0800ab98
 8008fc4:	0800a8c8 	.word	0x0800a8c8
 8008fc8:	0800a8ff 	.word	0x0800a8ff
 8008fcc:	7ff00000 	.word	0x7ff00000
 8008fd0:	0800aa38 	.word	0x0800aa38
 8008fd4:	0800aad0 	.word	0x0800aad0
 8008fd8:	0800aaa8 	.word	0x0800aaa8
 8008fdc:	7ca00000 	.word	0x7ca00000
 8008fe0:	7fefffff 	.word	0x7fefffff
 8008fe4:	f014 0310 	ands.w	r3, r4, #16
 8008fe8:	bf18      	it	ne
 8008fea:	236a      	movne	r3, #106	@ 0x6a
 8008fec:	4650      	mov	r0, sl
 8008fee:	9308      	str	r3, [sp, #32]
 8008ff0:	4659      	mov	r1, fp
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	4e77      	ldr	r6, [pc, #476]	@ (80091d4 <_strtod_l+0x78c>)
 8008ff6:	07e7      	lsls	r7, r4, #31
 8008ff8:	d504      	bpl.n	8009004 <_strtod_l+0x5bc>
 8008ffa:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008ffe:	f7f7 fb1f 	bl	8000640 <__aeabi_dmul>
 8009002:	2301      	movs	r3, #1
 8009004:	1064      	asrs	r4, r4, #1
 8009006:	f106 0608 	add.w	r6, r6, #8
 800900a:	d1f4      	bne.n	8008ff6 <_strtod_l+0x5ae>
 800900c:	b10b      	cbz	r3, 8009012 <_strtod_l+0x5ca>
 800900e:	4682      	mov	sl, r0
 8009010:	468b      	mov	fp, r1
 8009012:	9b08      	ldr	r3, [sp, #32]
 8009014:	b1b3      	cbz	r3, 8009044 <_strtod_l+0x5fc>
 8009016:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800901a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800901e:	2b00      	cmp	r3, #0
 8009020:	4659      	mov	r1, fp
 8009022:	dd0f      	ble.n	8009044 <_strtod_l+0x5fc>
 8009024:	2b1f      	cmp	r3, #31
 8009026:	dd58      	ble.n	80090da <_strtod_l+0x692>
 8009028:	2b34      	cmp	r3, #52	@ 0x34
 800902a:	bfd8      	it	le
 800902c:	f04f 33ff 	movle.w	r3, #4294967295
 8009030:	f04f 0a00 	mov.w	sl, #0
 8009034:	bfcf      	iteee	gt
 8009036:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800903a:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800903e:	4093      	lslle	r3, r2
 8009040:	ea03 0b01 	andle.w	fp, r3, r1
 8009044:	2200      	movs	r2, #0
 8009046:	2300      	movs	r3, #0
 8009048:	4650      	mov	r0, sl
 800904a:	4659      	mov	r1, fp
 800904c:	f7f7 fd60 	bl	8000b10 <__aeabi_dcmpeq>
 8009050:	2800      	cmp	r0, #0
 8009052:	d1a7      	bne.n	8008fa4 <_strtod_l+0x55c>
 8009054:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009056:	464a      	mov	r2, r9
 8009058:	9300      	str	r3, [sp, #0]
 800905a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800905c:	462b      	mov	r3, r5
 800905e:	9805      	ldr	r0, [sp, #20]
 8009060:	f7ff f8d8 	bl	8008214 <__s2b>
 8009064:	900b      	str	r0, [sp, #44]	@ 0x2c
 8009066:	2800      	cmp	r0, #0
 8009068:	f43f af09 	beq.w	8008e7e <_strtod_l+0x436>
 800906c:	2400      	movs	r4, #0
 800906e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009070:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009072:	2a00      	cmp	r2, #0
 8009074:	eba3 0308 	sub.w	r3, r3, r8
 8009078:	bfa8      	it	ge
 800907a:	2300      	movge	r3, #0
 800907c:	46a0      	mov	r8, r4
 800907e:	9312      	str	r3, [sp, #72]	@ 0x48
 8009080:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009084:	9316      	str	r3, [sp, #88]	@ 0x58
 8009086:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009088:	9805      	ldr	r0, [sp, #20]
 800908a:	6859      	ldr	r1, [r3, #4]
 800908c:	f7ff f81a 	bl	80080c4 <_Balloc>
 8009090:	4681      	mov	r9, r0
 8009092:	2800      	cmp	r0, #0
 8009094:	f43f aef7 	beq.w	8008e86 <_strtod_l+0x43e>
 8009098:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800909a:	300c      	adds	r0, #12
 800909c:	691a      	ldr	r2, [r3, #16]
 800909e:	f103 010c 	add.w	r1, r3, #12
 80090a2:	3202      	adds	r2, #2
 80090a4:	0092      	lsls	r2, r2, #2
 80090a6:	f7fe f89e 	bl	80071e6 <memcpy>
 80090aa:	ab1c      	add	r3, sp, #112	@ 0x70
 80090ac:	9301      	str	r3, [sp, #4]
 80090ae:	ab1b      	add	r3, sp, #108	@ 0x6c
 80090b0:	9300      	str	r3, [sp, #0]
 80090b2:	4652      	mov	r2, sl
 80090b4:	465b      	mov	r3, fp
 80090b6:	9805      	ldr	r0, [sp, #20]
 80090b8:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80090bc:	f7ff fbd6 	bl	800886c <__d2b>
 80090c0:	901a      	str	r0, [sp, #104]	@ 0x68
 80090c2:	2800      	cmp	r0, #0
 80090c4:	f43f aedf 	beq.w	8008e86 <_strtod_l+0x43e>
 80090c8:	2101      	movs	r1, #1
 80090ca:	9805      	ldr	r0, [sp, #20]
 80090cc:	f7ff f938 	bl	8008340 <__i2b>
 80090d0:	4680      	mov	r8, r0
 80090d2:	b948      	cbnz	r0, 80090e8 <_strtod_l+0x6a0>
 80090d4:	f04f 0800 	mov.w	r8, #0
 80090d8:	e6d5      	b.n	8008e86 <_strtod_l+0x43e>
 80090da:	f04f 32ff 	mov.w	r2, #4294967295
 80090de:	fa02 f303 	lsl.w	r3, r2, r3
 80090e2:	ea03 0a0a 	and.w	sl, r3, sl
 80090e6:	e7ad      	b.n	8009044 <_strtod_l+0x5fc>
 80090e8:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80090ea:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80090ec:	2d00      	cmp	r5, #0
 80090ee:	bfab      	itete	ge
 80090f0:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80090f2:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80090f4:	18ef      	addge	r7, r5, r3
 80090f6:	1b5e      	sublt	r6, r3, r5
 80090f8:	9b08      	ldr	r3, [sp, #32]
 80090fa:	bfa8      	it	ge
 80090fc:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80090fe:	eba5 0503 	sub.w	r5, r5, r3
 8009102:	4415      	add	r5, r2
 8009104:	4b34      	ldr	r3, [pc, #208]	@ (80091d8 <_strtod_l+0x790>)
 8009106:	f105 35ff 	add.w	r5, r5, #4294967295
 800910a:	bfb8      	it	lt
 800910c:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800910e:	429d      	cmp	r5, r3
 8009110:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009114:	da50      	bge.n	80091b8 <_strtod_l+0x770>
 8009116:	1b5b      	subs	r3, r3, r5
 8009118:	2b1f      	cmp	r3, #31
 800911a:	f04f 0101 	mov.w	r1, #1
 800911e:	eba2 0203 	sub.w	r2, r2, r3
 8009122:	dc3d      	bgt.n	80091a0 <_strtod_l+0x758>
 8009124:	fa01 f303 	lsl.w	r3, r1, r3
 8009128:	9313      	str	r3, [sp, #76]	@ 0x4c
 800912a:	2300      	movs	r3, #0
 800912c:	9310      	str	r3, [sp, #64]	@ 0x40
 800912e:	18bd      	adds	r5, r7, r2
 8009130:	9b08      	ldr	r3, [sp, #32]
 8009132:	42af      	cmp	r7, r5
 8009134:	4416      	add	r6, r2
 8009136:	441e      	add	r6, r3
 8009138:	463b      	mov	r3, r7
 800913a:	bfa8      	it	ge
 800913c:	462b      	movge	r3, r5
 800913e:	42b3      	cmp	r3, r6
 8009140:	bfa8      	it	ge
 8009142:	4633      	movge	r3, r6
 8009144:	2b00      	cmp	r3, #0
 8009146:	bfc2      	ittt	gt
 8009148:	1aed      	subgt	r5, r5, r3
 800914a:	1af6      	subgt	r6, r6, r3
 800914c:	1aff      	subgt	r7, r7, r3
 800914e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009150:	2b00      	cmp	r3, #0
 8009152:	dd16      	ble.n	8009182 <_strtod_l+0x73a>
 8009154:	4641      	mov	r1, r8
 8009156:	461a      	mov	r2, r3
 8009158:	9805      	ldr	r0, [sp, #20]
 800915a:	f7ff f9a9 	bl	80084b0 <__pow5mult>
 800915e:	4680      	mov	r8, r0
 8009160:	2800      	cmp	r0, #0
 8009162:	d0b7      	beq.n	80090d4 <_strtod_l+0x68c>
 8009164:	4601      	mov	r1, r0
 8009166:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009168:	9805      	ldr	r0, [sp, #20]
 800916a:	f7ff f8ff 	bl	800836c <__multiply>
 800916e:	900a      	str	r0, [sp, #40]	@ 0x28
 8009170:	2800      	cmp	r0, #0
 8009172:	f43f ae88 	beq.w	8008e86 <_strtod_l+0x43e>
 8009176:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009178:	9805      	ldr	r0, [sp, #20]
 800917a:	f7fe ffe3 	bl	8008144 <_Bfree>
 800917e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009180:	931a      	str	r3, [sp, #104]	@ 0x68
 8009182:	2d00      	cmp	r5, #0
 8009184:	dc1d      	bgt.n	80091c2 <_strtod_l+0x77a>
 8009186:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009188:	2b00      	cmp	r3, #0
 800918a:	dd27      	ble.n	80091dc <_strtod_l+0x794>
 800918c:	4649      	mov	r1, r9
 800918e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009190:	9805      	ldr	r0, [sp, #20]
 8009192:	f7ff f98d 	bl	80084b0 <__pow5mult>
 8009196:	4681      	mov	r9, r0
 8009198:	bb00      	cbnz	r0, 80091dc <_strtod_l+0x794>
 800919a:	f04f 0900 	mov.w	r9, #0
 800919e:	e672      	b.n	8008e86 <_strtod_l+0x43e>
 80091a0:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80091a4:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80091a8:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80091ac:	35e2      	adds	r5, #226	@ 0xe2
 80091ae:	fa01 f305 	lsl.w	r3, r1, r5
 80091b2:	9310      	str	r3, [sp, #64]	@ 0x40
 80091b4:	9113      	str	r1, [sp, #76]	@ 0x4c
 80091b6:	e7ba      	b.n	800912e <_strtod_l+0x6e6>
 80091b8:	2300      	movs	r3, #0
 80091ba:	9310      	str	r3, [sp, #64]	@ 0x40
 80091bc:	2301      	movs	r3, #1
 80091be:	9313      	str	r3, [sp, #76]	@ 0x4c
 80091c0:	e7b5      	b.n	800912e <_strtod_l+0x6e6>
 80091c2:	462a      	mov	r2, r5
 80091c4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80091c6:	9805      	ldr	r0, [sp, #20]
 80091c8:	f7ff f9cc 	bl	8008564 <__lshift>
 80091cc:	901a      	str	r0, [sp, #104]	@ 0x68
 80091ce:	2800      	cmp	r0, #0
 80091d0:	d1d9      	bne.n	8009186 <_strtod_l+0x73e>
 80091d2:	e658      	b.n	8008e86 <_strtod_l+0x43e>
 80091d4:	0800abc0 	.word	0x0800abc0
 80091d8:	fffffc02 	.word	0xfffffc02
 80091dc:	2e00      	cmp	r6, #0
 80091de:	dd07      	ble.n	80091f0 <_strtod_l+0x7a8>
 80091e0:	4649      	mov	r1, r9
 80091e2:	4632      	mov	r2, r6
 80091e4:	9805      	ldr	r0, [sp, #20]
 80091e6:	f7ff f9bd 	bl	8008564 <__lshift>
 80091ea:	4681      	mov	r9, r0
 80091ec:	2800      	cmp	r0, #0
 80091ee:	d0d4      	beq.n	800919a <_strtod_l+0x752>
 80091f0:	2f00      	cmp	r7, #0
 80091f2:	dd08      	ble.n	8009206 <_strtod_l+0x7be>
 80091f4:	4641      	mov	r1, r8
 80091f6:	463a      	mov	r2, r7
 80091f8:	9805      	ldr	r0, [sp, #20]
 80091fa:	f7ff f9b3 	bl	8008564 <__lshift>
 80091fe:	4680      	mov	r8, r0
 8009200:	2800      	cmp	r0, #0
 8009202:	f43f ae40 	beq.w	8008e86 <_strtod_l+0x43e>
 8009206:	464a      	mov	r2, r9
 8009208:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800920a:	9805      	ldr	r0, [sp, #20]
 800920c:	f7ff fa32 	bl	8008674 <__mdiff>
 8009210:	4604      	mov	r4, r0
 8009212:	2800      	cmp	r0, #0
 8009214:	f43f ae37 	beq.w	8008e86 <_strtod_l+0x43e>
 8009218:	68c3      	ldr	r3, [r0, #12]
 800921a:	4641      	mov	r1, r8
 800921c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800921e:	2300      	movs	r3, #0
 8009220:	60c3      	str	r3, [r0, #12]
 8009222:	f7ff fa0b 	bl	800863c <__mcmp>
 8009226:	2800      	cmp	r0, #0
 8009228:	da3d      	bge.n	80092a6 <_strtod_l+0x85e>
 800922a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800922c:	ea53 030a 	orrs.w	r3, r3, sl
 8009230:	d163      	bne.n	80092fa <_strtod_l+0x8b2>
 8009232:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009236:	2b00      	cmp	r3, #0
 8009238:	d15f      	bne.n	80092fa <_strtod_l+0x8b2>
 800923a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800923e:	0d1b      	lsrs	r3, r3, #20
 8009240:	051b      	lsls	r3, r3, #20
 8009242:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009246:	d958      	bls.n	80092fa <_strtod_l+0x8b2>
 8009248:	6963      	ldr	r3, [r4, #20]
 800924a:	b913      	cbnz	r3, 8009252 <_strtod_l+0x80a>
 800924c:	6923      	ldr	r3, [r4, #16]
 800924e:	2b01      	cmp	r3, #1
 8009250:	dd53      	ble.n	80092fa <_strtod_l+0x8b2>
 8009252:	4621      	mov	r1, r4
 8009254:	2201      	movs	r2, #1
 8009256:	9805      	ldr	r0, [sp, #20]
 8009258:	f7ff f984 	bl	8008564 <__lshift>
 800925c:	4641      	mov	r1, r8
 800925e:	4604      	mov	r4, r0
 8009260:	f7ff f9ec 	bl	800863c <__mcmp>
 8009264:	2800      	cmp	r0, #0
 8009266:	dd48      	ble.n	80092fa <_strtod_l+0x8b2>
 8009268:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800926c:	9a08      	ldr	r2, [sp, #32]
 800926e:	0d1b      	lsrs	r3, r3, #20
 8009270:	051b      	lsls	r3, r3, #20
 8009272:	2a00      	cmp	r2, #0
 8009274:	d062      	beq.n	800933c <_strtod_l+0x8f4>
 8009276:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800927a:	d85f      	bhi.n	800933c <_strtod_l+0x8f4>
 800927c:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009280:	f67f ae94 	bls.w	8008fac <_strtod_l+0x564>
 8009284:	4650      	mov	r0, sl
 8009286:	4659      	mov	r1, fp
 8009288:	4ba3      	ldr	r3, [pc, #652]	@ (8009518 <_strtod_l+0xad0>)
 800928a:	2200      	movs	r2, #0
 800928c:	f7f7 f9d8 	bl	8000640 <__aeabi_dmul>
 8009290:	4ba2      	ldr	r3, [pc, #648]	@ (800951c <_strtod_l+0xad4>)
 8009292:	4682      	mov	sl, r0
 8009294:	400b      	ands	r3, r1
 8009296:	468b      	mov	fp, r1
 8009298:	2b00      	cmp	r3, #0
 800929a:	f47f adff 	bne.w	8008e9c <_strtod_l+0x454>
 800929e:	2322      	movs	r3, #34	@ 0x22
 80092a0:	9a05      	ldr	r2, [sp, #20]
 80092a2:	6013      	str	r3, [r2, #0]
 80092a4:	e5fa      	b.n	8008e9c <_strtod_l+0x454>
 80092a6:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80092aa:	d165      	bne.n	8009378 <_strtod_l+0x930>
 80092ac:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80092ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80092b2:	b35a      	cbz	r2, 800930c <_strtod_l+0x8c4>
 80092b4:	4a9a      	ldr	r2, [pc, #616]	@ (8009520 <_strtod_l+0xad8>)
 80092b6:	4293      	cmp	r3, r2
 80092b8:	d12b      	bne.n	8009312 <_strtod_l+0x8ca>
 80092ba:	9b08      	ldr	r3, [sp, #32]
 80092bc:	4651      	mov	r1, sl
 80092be:	b303      	cbz	r3, 8009302 <_strtod_l+0x8ba>
 80092c0:	465a      	mov	r2, fp
 80092c2:	4b96      	ldr	r3, [pc, #600]	@ (800951c <_strtod_l+0xad4>)
 80092c4:	4013      	ands	r3, r2
 80092c6:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80092ca:	f04f 32ff 	mov.w	r2, #4294967295
 80092ce:	d81b      	bhi.n	8009308 <_strtod_l+0x8c0>
 80092d0:	0d1b      	lsrs	r3, r3, #20
 80092d2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80092d6:	fa02 f303 	lsl.w	r3, r2, r3
 80092da:	4299      	cmp	r1, r3
 80092dc:	d119      	bne.n	8009312 <_strtod_l+0x8ca>
 80092de:	4b91      	ldr	r3, [pc, #580]	@ (8009524 <_strtod_l+0xadc>)
 80092e0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80092e2:	429a      	cmp	r2, r3
 80092e4:	d102      	bne.n	80092ec <_strtod_l+0x8a4>
 80092e6:	3101      	adds	r1, #1
 80092e8:	f43f adcd 	beq.w	8008e86 <_strtod_l+0x43e>
 80092ec:	f04f 0a00 	mov.w	sl, #0
 80092f0:	4b8a      	ldr	r3, [pc, #552]	@ (800951c <_strtod_l+0xad4>)
 80092f2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80092f4:	401a      	ands	r2, r3
 80092f6:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80092fa:	9b08      	ldr	r3, [sp, #32]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d1c1      	bne.n	8009284 <_strtod_l+0x83c>
 8009300:	e5cc      	b.n	8008e9c <_strtod_l+0x454>
 8009302:	f04f 33ff 	mov.w	r3, #4294967295
 8009306:	e7e8      	b.n	80092da <_strtod_l+0x892>
 8009308:	4613      	mov	r3, r2
 800930a:	e7e6      	b.n	80092da <_strtod_l+0x892>
 800930c:	ea53 030a 	orrs.w	r3, r3, sl
 8009310:	d0aa      	beq.n	8009268 <_strtod_l+0x820>
 8009312:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009314:	b1db      	cbz	r3, 800934e <_strtod_l+0x906>
 8009316:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009318:	4213      	tst	r3, r2
 800931a:	d0ee      	beq.n	80092fa <_strtod_l+0x8b2>
 800931c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800931e:	4650      	mov	r0, sl
 8009320:	4659      	mov	r1, fp
 8009322:	9a08      	ldr	r2, [sp, #32]
 8009324:	b1bb      	cbz	r3, 8009356 <_strtod_l+0x90e>
 8009326:	f7ff fb6d 	bl	8008a04 <sulp>
 800932a:	4602      	mov	r2, r0
 800932c:	460b      	mov	r3, r1
 800932e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009332:	f7f6 ffcf 	bl	80002d4 <__adddf3>
 8009336:	4682      	mov	sl, r0
 8009338:	468b      	mov	fp, r1
 800933a:	e7de      	b.n	80092fa <_strtod_l+0x8b2>
 800933c:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009340:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009344:	f04f 3aff 	mov.w	sl, #4294967295
 8009348:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800934c:	e7d5      	b.n	80092fa <_strtod_l+0x8b2>
 800934e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009350:	ea13 0f0a 	tst.w	r3, sl
 8009354:	e7e1      	b.n	800931a <_strtod_l+0x8d2>
 8009356:	f7ff fb55 	bl	8008a04 <sulp>
 800935a:	4602      	mov	r2, r0
 800935c:	460b      	mov	r3, r1
 800935e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009362:	f7f6 ffb5 	bl	80002d0 <__aeabi_dsub>
 8009366:	2200      	movs	r2, #0
 8009368:	2300      	movs	r3, #0
 800936a:	4682      	mov	sl, r0
 800936c:	468b      	mov	fp, r1
 800936e:	f7f7 fbcf 	bl	8000b10 <__aeabi_dcmpeq>
 8009372:	2800      	cmp	r0, #0
 8009374:	d0c1      	beq.n	80092fa <_strtod_l+0x8b2>
 8009376:	e619      	b.n	8008fac <_strtod_l+0x564>
 8009378:	4641      	mov	r1, r8
 800937a:	4620      	mov	r0, r4
 800937c:	f7ff face 	bl	800891c <__ratio>
 8009380:	2200      	movs	r2, #0
 8009382:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009386:	4606      	mov	r6, r0
 8009388:	460f      	mov	r7, r1
 800938a:	f7f7 fbd5 	bl	8000b38 <__aeabi_dcmple>
 800938e:	2800      	cmp	r0, #0
 8009390:	d06d      	beq.n	800946e <_strtod_l+0xa26>
 8009392:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009394:	2b00      	cmp	r3, #0
 8009396:	d178      	bne.n	800948a <_strtod_l+0xa42>
 8009398:	f1ba 0f00 	cmp.w	sl, #0
 800939c:	d156      	bne.n	800944c <_strtod_l+0xa04>
 800939e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80093a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d158      	bne.n	800945a <_strtod_l+0xa12>
 80093a8:	2200      	movs	r2, #0
 80093aa:	4630      	mov	r0, r6
 80093ac:	4639      	mov	r1, r7
 80093ae:	4b5e      	ldr	r3, [pc, #376]	@ (8009528 <_strtod_l+0xae0>)
 80093b0:	f7f7 fbb8 	bl	8000b24 <__aeabi_dcmplt>
 80093b4:	2800      	cmp	r0, #0
 80093b6:	d157      	bne.n	8009468 <_strtod_l+0xa20>
 80093b8:	4630      	mov	r0, r6
 80093ba:	4639      	mov	r1, r7
 80093bc:	2200      	movs	r2, #0
 80093be:	4b5b      	ldr	r3, [pc, #364]	@ (800952c <_strtod_l+0xae4>)
 80093c0:	f7f7 f93e 	bl	8000640 <__aeabi_dmul>
 80093c4:	4606      	mov	r6, r0
 80093c6:	460f      	mov	r7, r1
 80093c8:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80093cc:	9606      	str	r6, [sp, #24]
 80093ce:	9307      	str	r3, [sp, #28]
 80093d0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80093d4:	4d51      	ldr	r5, [pc, #324]	@ (800951c <_strtod_l+0xad4>)
 80093d6:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80093da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80093dc:	401d      	ands	r5, r3
 80093de:	4b54      	ldr	r3, [pc, #336]	@ (8009530 <_strtod_l+0xae8>)
 80093e0:	429d      	cmp	r5, r3
 80093e2:	f040 80ab 	bne.w	800953c <_strtod_l+0xaf4>
 80093e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80093e8:	4650      	mov	r0, sl
 80093ea:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80093ee:	4659      	mov	r1, fp
 80093f0:	f7ff f9d4 	bl	800879c <__ulp>
 80093f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80093f8:	f7f7 f922 	bl	8000640 <__aeabi_dmul>
 80093fc:	4652      	mov	r2, sl
 80093fe:	465b      	mov	r3, fp
 8009400:	f7f6 ff68 	bl	80002d4 <__adddf3>
 8009404:	460b      	mov	r3, r1
 8009406:	4945      	ldr	r1, [pc, #276]	@ (800951c <_strtod_l+0xad4>)
 8009408:	4a4a      	ldr	r2, [pc, #296]	@ (8009534 <_strtod_l+0xaec>)
 800940a:	4019      	ands	r1, r3
 800940c:	4291      	cmp	r1, r2
 800940e:	4682      	mov	sl, r0
 8009410:	d942      	bls.n	8009498 <_strtod_l+0xa50>
 8009412:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009414:	4b43      	ldr	r3, [pc, #268]	@ (8009524 <_strtod_l+0xadc>)
 8009416:	429a      	cmp	r2, r3
 8009418:	d103      	bne.n	8009422 <_strtod_l+0x9da>
 800941a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800941c:	3301      	adds	r3, #1
 800941e:	f43f ad32 	beq.w	8008e86 <_strtod_l+0x43e>
 8009422:	f04f 3aff 	mov.w	sl, #4294967295
 8009426:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 8009524 <_strtod_l+0xadc>
 800942a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800942c:	9805      	ldr	r0, [sp, #20]
 800942e:	f7fe fe89 	bl	8008144 <_Bfree>
 8009432:	4649      	mov	r1, r9
 8009434:	9805      	ldr	r0, [sp, #20]
 8009436:	f7fe fe85 	bl	8008144 <_Bfree>
 800943a:	4641      	mov	r1, r8
 800943c:	9805      	ldr	r0, [sp, #20]
 800943e:	f7fe fe81 	bl	8008144 <_Bfree>
 8009442:	4621      	mov	r1, r4
 8009444:	9805      	ldr	r0, [sp, #20]
 8009446:	f7fe fe7d 	bl	8008144 <_Bfree>
 800944a:	e61c      	b.n	8009086 <_strtod_l+0x63e>
 800944c:	f1ba 0f01 	cmp.w	sl, #1
 8009450:	d103      	bne.n	800945a <_strtod_l+0xa12>
 8009452:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009454:	2b00      	cmp	r3, #0
 8009456:	f43f ada9 	beq.w	8008fac <_strtod_l+0x564>
 800945a:	2200      	movs	r2, #0
 800945c:	4b36      	ldr	r3, [pc, #216]	@ (8009538 <_strtod_l+0xaf0>)
 800945e:	2600      	movs	r6, #0
 8009460:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009464:	4f30      	ldr	r7, [pc, #192]	@ (8009528 <_strtod_l+0xae0>)
 8009466:	e7b3      	b.n	80093d0 <_strtod_l+0x988>
 8009468:	2600      	movs	r6, #0
 800946a:	4f30      	ldr	r7, [pc, #192]	@ (800952c <_strtod_l+0xae4>)
 800946c:	e7ac      	b.n	80093c8 <_strtod_l+0x980>
 800946e:	4630      	mov	r0, r6
 8009470:	4639      	mov	r1, r7
 8009472:	4b2e      	ldr	r3, [pc, #184]	@ (800952c <_strtod_l+0xae4>)
 8009474:	2200      	movs	r2, #0
 8009476:	f7f7 f8e3 	bl	8000640 <__aeabi_dmul>
 800947a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800947c:	4606      	mov	r6, r0
 800947e:	460f      	mov	r7, r1
 8009480:	2b00      	cmp	r3, #0
 8009482:	d0a1      	beq.n	80093c8 <_strtod_l+0x980>
 8009484:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009488:	e7a2      	b.n	80093d0 <_strtod_l+0x988>
 800948a:	2200      	movs	r2, #0
 800948c:	4b26      	ldr	r3, [pc, #152]	@ (8009528 <_strtod_l+0xae0>)
 800948e:	4616      	mov	r6, r2
 8009490:	461f      	mov	r7, r3
 8009492:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009496:	e79b      	b.n	80093d0 <_strtod_l+0x988>
 8009498:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800949c:	9b08      	ldr	r3, [sp, #32]
 800949e:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d1c1      	bne.n	800942a <_strtod_l+0x9e2>
 80094a6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80094aa:	0d1b      	lsrs	r3, r3, #20
 80094ac:	051b      	lsls	r3, r3, #20
 80094ae:	429d      	cmp	r5, r3
 80094b0:	d1bb      	bne.n	800942a <_strtod_l+0x9e2>
 80094b2:	4630      	mov	r0, r6
 80094b4:	4639      	mov	r1, r7
 80094b6:	f7f7 fdb5 	bl	8001024 <__aeabi_d2lz>
 80094ba:	f7f7 f893 	bl	80005e4 <__aeabi_l2d>
 80094be:	4602      	mov	r2, r0
 80094c0:	460b      	mov	r3, r1
 80094c2:	4630      	mov	r0, r6
 80094c4:	4639      	mov	r1, r7
 80094c6:	f7f6 ff03 	bl	80002d0 <__aeabi_dsub>
 80094ca:	460b      	mov	r3, r1
 80094cc:	4602      	mov	r2, r0
 80094ce:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80094d2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80094d6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80094d8:	ea46 060a 	orr.w	r6, r6, sl
 80094dc:	431e      	orrs	r6, r3
 80094de:	d06a      	beq.n	80095b6 <_strtod_l+0xb6e>
 80094e0:	a309      	add	r3, pc, #36	@ (adr r3, 8009508 <_strtod_l+0xac0>)
 80094e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094e6:	f7f7 fb1d 	bl	8000b24 <__aeabi_dcmplt>
 80094ea:	2800      	cmp	r0, #0
 80094ec:	f47f acd6 	bne.w	8008e9c <_strtod_l+0x454>
 80094f0:	a307      	add	r3, pc, #28	@ (adr r3, 8009510 <_strtod_l+0xac8>)
 80094f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80094fa:	f7f7 fb31 	bl	8000b60 <__aeabi_dcmpgt>
 80094fe:	2800      	cmp	r0, #0
 8009500:	d093      	beq.n	800942a <_strtod_l+0x9e2>
 8009502:	e4cb      	b.n	8008e9c <_strtod_l+0x454>
 8009504:	f3af 8000 	nop.w
 8009508:	94a03595 	.word	0x94a03595
 800950c:	3fdfffff 	.word	0x3fdfffff
 8009510:	35afe535 	.word	0x35afe535
 8009514:	3fe00000 	.word	0x3fe00000
 8009518:	39500000 	.word	0x39500000
 800951c:	7ff00000 	.word	0x7ff00000
 8009520:	000fffff 	.word	0x000fffff
 8009524:	7fefffff 	.word	0x7fefffff
 8009528:	3ff00000 	.word	0x3ff00000
 800952c:	3fe00000 	.word	0x3fe00000
 8009530:	7fe00000 	.word	0x7fe00000
 8009534:	7c9fffff 	.word	0x7c9fffff
 8009538:	bff00000 	.word	0xbff00000
 800953c:	9b08      	ldr	r3, [sp, #32]
 800953e:	b323      	cbz	r3, 800958a <_strtod_l+0xb42>
 8009540:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009544:	d821      	bhi.n	800958a <_strtod_l+0xb42>
 8009546:	a328      	add	r3, pc, #160	@ (adr r3, 80095e8 <_strtod_l+0xba0>)
 8009548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800954c:	4630      	mov	r0, r6
 800954e:	4639      	mov	r1, r7
 8009550:	f7f7 faf2 	bl	8000b38 <__aeabi_dcmple>
 8009554:	b1a0      	cbz	r0, 8009580 <_strtod_l+0xb38>
 8009556:	4639      	mov	r1, r7
 8009558:	4630      	mov	r0, r6
 800955a:	f7f7 fb49 	bl	8000bf0 <__aeabi_d2uiz>
 800955e:	2801      	cmp	r0, #1
 8009560:	bf38      	it	cc
 8009562:	2001      	movcc	r0, #1
 8009564:	f7f6 fff2 	bl	800054c <__aeabi_ui2d>
 8009568:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800956a:	4606      	mov	r6, r0
 800956c:	460f      	mov	r7, r1
 800956e:	b9fb      	cbnz	r3, 80095b0 <_strtod_l+0xb68>
 8009570:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009574:	9014      	str	r0, [sp, #80]	@ 0x50
 8009576:	9315      	str	r3, [sp, #84]	@ 0x54
 8009578:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800957c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009580:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009582:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009586:	1b5b      	subs	r3, r3, r5
 8009588:	9311      	str	r3, [sp, #68]	@ 0x44
 800958a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800958e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009592:	f7ff f903 	bl	800879c <__ulp>
 8009596:	4602      	mov	r2, r0
 8009598:	460b      	mov	r3, r1
 800959a:	4650      	mov	r0, sl
 800959c:	4659      	mov	r1, fp
 800959e:	f7f7 f84f 	bl	8000640 <__aeabi_dmul>
 80095a2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80095a6:	f7f6 fe95 	bl	80002d4 <__adddf3>
 80095aa:	4682      	mov	sl, r0
 80095ac:	468b      	mov	fp, r1
 80095ae:	e775      	b.n	800949c <_strtod_l+0xa54>
 80095b0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80095b4:	e7e0      	b.n	8009578 <_strtod_l+0xb30>
 80095b6:	a30e      	add	r3, pc, #56	@ (adr r3, 80095f0 <_strtod_l+0xba8>)
 80095b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095bc:	f7f7 fab2 	bl	8000b24 <__aeabi_dcmplt>
 80095c0:	e79d      	b.n	80094fe <_strtod_l+0xab6>
 80095c2:	2300      	movs	r3, #0
 80095c4:	930e      	str	r3, [sp, #56]	@ 0x38
 80095c6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80095c8:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80095ca:	6013      	str	r3, [r2, #0]
 80095cc:	f7ff ba79 	b.w	8008ac2 <_strtod_l+0x7a>
 80095d0:	2a65      	cmp	r2, #101	@ 0x65
 80095d2:	f43f ab72 	beq.w	8008cba <_strtod_l+0x272>
 80095d6:	2a45      	cmp	r2, #69	@ 0x45
 80095d8:	f43f ab6f 	beq.w	8008cba <_strtod_l+0x272>
 80095dc:	2301      	movs	r3, #1
 80095de:	f7ff bbaa 	b.w	8008d36 <_strtod_l+0x2ee>
 80095e2:	bf00      	nop
 80095e4:	f3af 8000 	nop.w
 80095e8:	ffc00000 	.word	0xffc00000
 80095ec:	41dfffff 	.word	0x41dfffff
 80095f0:	94a03595 	.word	0x94a03595
 80095f4:	3fcfffff 	.word	0x3fcfffff

080095f8 <_strtod_r>:
 80095f8:	4b01      	ldr	r3, [pc, #4]	@ (8009600 <_strtod_r+0x8>)
 80095fa:	f7ff ba25 	b.w	8008a48 <_strtod_l>
 80095fe:	bf00      	nop
 8009600:	20000068 	.word	0x20000068

08009604 <__ssputs_r>:
 8009604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009608:	461f      	mov	r7, r3
 800960a:	688e      	ldr	r6, [r1, #8]
 800960c:	4682      	mov	sl, r0
 800960e:	42be      	cmp	r6, r7
 8009610:	460c      	mov	r4, r1
 8009612:	4690      	mov	r8, r2
 8009614:	680b      	ldr	r3, [r1, #0]
 8009616:	d82d      	bhi.n	8009674 <__ssputs_r+0x70>
 8009618:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800961c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009620:	d026      	beq.n	8009670 <__ssputs_r+0x6c>
 8009622:	6965      	ldr	r5, [r4, #20]
 8009624:	6909      	ldr	r1, [r1, #16]
 8009626:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800962a:	eba3 0901 	sub.w	r9, r3, r1
 800962e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009632:	1c7b      	adds	r3, r7, #1
 8009634:	444b      	add	r3, r9
 8009636:	106d      	asrs	r5, r5, #1
 8009638:	429d      	cmp	r5, r3
 800963a:	bf38      	it	cc
 800963c:	461d      	movcc	r5, r3
 800963e:	0553      	lsls	r3, r2, #21
 8009640:	d527      	bpl.n	8009692 <__ssputs_r+0x8e>
 8009642:	4629      	mov	r1, r5
 8009644:	f7fe fcb2 	bl	8007fac <_malloc_r>
 8009648:	4606      	mov	r6, r0
 800964a:	b360      	cbz	r0, 80096a6 <__ssputs_r+0xa2>
 800964c:	464a      	mov	r2, r9
 800964e:	6921      	ldr	r1, [r4, #16]
 8009650:	f7fd fdc9 	bl	80071e6 <memcpy>
 8009654:	89a3      	ldrh	r3, [r4, #12]
 8009656:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800965a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800965e:	81a3      	strh	r3, [r4, #12]
 8009660:	6126      	str	r6, [r4, #16]
 8009662:	444e      	add	r6, r9
 8009664:	6026      	str	r6, [r4, #0]
 8009666:	463e      	mov	r6, r7
 8009668:	6165      	str	r5, [r4, #20]
 800966a:	eba5 0509 	sub.w	r5, r5, r9
 800966e:	60a5      	str	r5, [r4, #8]
 8009670:	42be      	cmp	r6, r7
 8009672:	d900      	bls.n	8009676 <__ssputs_r+0x72>
 8009674:	463e      	mov	r6, r7
 8009676:	4632      	mov	r2, r6
 8009678:	4641      	mov	r1, r8
 800967a:	6820      	ldr	r0, [r4, #0]
 800967c:	f000 f9c2 	bl	8009a04 <memmove>
 8009680:	2000      	movs	r0, #0
 8009682:	68a3      	ldr	r3, [r4, #8]
 8009684:	1b9b      	subs	r3, r3, r6
 8009686:	60a3      	str	r3, [r4, #8]
 8009688:	6823      	ldr	r3, [r4, #0]
 800968a:	4433      	add	r3, r6
 800968c:	6023      	str	r3, [r4, #0]
 800968e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009692:	462a      	mov	r2, r5
 8009694:	f000 fd75 	bl	800a182 <_realloc_r>
 8009698:	4606      	mov	r6, r0
 800969a:	2800      	cmp	r0, #0
 800969c:	d1e0      	bne.n	8009660 <__ssputs_r+0x5c>
 800969e:	4650      	mov	r0, sl
 80096a0:	6921      	ldr	r1, [r4, #16]
 80096a2:	f7fe fc11 	bl	8007ec8 <_free_r>
 80096a6:	230c      	movs	r3, #12
 80096a8:	f8ca 3000 	str.w	r3, [sl]
 80096ac:	89a3      	ldrh	r3, [r4, #12]
 80096ae:	f04f 30ff 	mov.w	r0, #4294967295
 80096b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80096b6:	81a3      	strh	r3, [r4, #12]
 80096b8:	e7e9      	b.n	800968e <__ssputs_r+0x8a>
	...

080096bc <_svfiprintf_r>:
 80096bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096c0:	4698      	mov	r8, r3
 80096c2:	898b      	ldrh	r3, [r1, #12]
 80096c4:	4607      	mov	r7, r0
 80096c6:	061b      	lsls	r3, r3, #24
 80096c8:	460d      	mov	r5, r1
 80096ca:	4614      	mov	r4, r2
 80096cc:	b09d      	sub	sp, #116	@ 0x74
 80096ce:	d510      	bpl.n	80096f2 <_svfiprintf_r+0x36>
 80096d0:	690b      	ldr	r3, [r1, #16]
 80096d2:	b973      	cbnz	r3, 80096f2 <_svfiprintf_r+0x36>
 80096d4:	2140      	movs	r1, #64	@ 0x40
 80096d6:	f7fe fc69 	bl	8007fac <_malloc_r>
 80096da:	6028      	str	r0, [r5, #0]
 80096dc:	6128      	str	r0, [r5, #16]
 80096de:	b930      	cbnz	r0, 80096ee <_svfiprintf_r+0x32>
 80096e0:	230c      	movs	r3, #12
 80096e2:	603b      	str	r3, [r7, #0]
 80096e4:	f04f 30ff 	mov.w	r0, #4294967295
 80096e8:	b01d      	add	sp, #116	@ 0x74
 80096ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096ee:	2340      	movs	r3, #64	@ 0x40
 80096f0:	616b      	str	r3, [r5, #20]
 80096f2:	2300      	movs	r3, #0
 80096f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80096f6:	2320      	movs	r3, #32
 80096f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80096fc:	2330      	movs	r3, #48	@ 0x30
 80096fe:	f04f 0901 	mov.w	r9, #1
 8009702:	f8cd 800c 	str.w	r8, [sp, #12]
 8009706:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80098a0 <_svfiprintf_r+0x1e4>
 800970a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800970e:	4623      	mov	r3, r4
 8009710:	469a      	mov	sl, r3
 8009712:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009716:	b10a      	cbz	r2, 800971c <_svfiprintf_r+0x60>
 8009718:	2a25      	cmp	r2, #37	@ 0x25
 800971a:	d1f9      	bne.n	8009710 <_svfiprintf_r+0x54>
 800971c:	ebba 0b04 	subs.w	fp, sl, r4
 8009720:	d00b      	beq.n	800973a <_svfiprintf_r+0x7e>
 8009722:	465b      	mov	r3, fp
 8009724:	4622      	mov	r2, r4
 8009726:	4629      	mov	r1, r5
 8009728:	4638      	mov	r0, r7
 800972a:	f7ff ff6b 	bl	8009604 <__ssputs_r>
 800972e:	3001      	adds	r0, #1
 8009730:	f000 80a7 	beq.w	8009882 <_svfiprintf_r+0x1c6>
 8009734:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009736:	445a      	add	r2, fp
 8009738:	9209      	str	r2, [sp, #36]	@ 0x24
 800973a:	f89a 3000 	ldrb.w	r3, [sl]
 800973e:	2b00      	cmp	r3, #0
 8009740:	f000 809f 	beq.w	8009882 <_svfiprintf_r+0x1c6>
 8009744:	2300      	movs	r3, #0
 8009746:	f04f 32ff 	mov.w	r2, #4294967295
 800974a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800974e:	f10a 0a01 	add.w	sl, sl, #1
 8009752:	9304      	str	r3, [sp, #16]
 8009754:	9307      	str	r3, [sp, #28]
 8009756:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800975a:	931a      	str	r3, [sp, #104]	@ 0x68
 800975c:	4654      	mov	r4, sl
 800975e:	2205      	movs	r2, #5
 8009760:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009764:	484e      	ldr	r0, [pc, #312]	@ (80098a0 <_svfiprintf_r+0x1e4>)
 8009766:	f7fd fd30 	bl	80071ca <memchr>
 800976a:	9a04      	ldr	r2, [sp, #16]
 800976c:	b9d8      	cbnz	r0, 80097a6 <_svfiprintf_r+0xea>
 800976e:	06d0      	lsls	r0, r2, #27
 8009770:	bf44      	itt	mi
 8009772:	2320      	movmi	r3, #32
 8009774:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009778:	0711      	lsls	r1, r2, #28
 800977a:	bf44      	itt	mi
 800977c:	232b      	movmi	r3, #43	@ 0x2b
 800977e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009782:	f89a 3000 	ldrb.w	r3, [sl]
 8009786:	2b2a      	cmp	r3, #42	@ 0x2a
 8009788:	d015      	beq.n	80097b6 <_svfiprintf_r+0xfa>
 800978a:	4654      	mov	r4, sl
 800978c:	2000      	movs	r0, #0
 800978e:	f04f 0c0a 	mov.w	ip, #10
 8009792:	9a07      	ldr	r2, [sp, #28]
 8009794:	4621      	mov	r1, r4
 8009796:	f811 3b01 	ldrb.w	r3, [r1], #1
 800979a:	3b30      	subs	r3, #48	@ 0x30
 800979c:	2b09      	cmp	r3, #9
 800979e:	d94b      	bls.n	8009838 <_svfiprintf_r+0x17c>
 80097a0:	b1b0      	cbz	r0, 80097d0 <_svfiprintf_r+0x114>
 80097a2:	9207      	str	r2, [sp, #28]
 80097a4:	e014      	b.n	80097d0 <_svfiprintf_r+0x114>
 80097a6:	eba0 0308 	sub.w	r3, r0, r8
 80097aa:	fa09 f303 	lsl.w	r3, r9, r3
 80097ae:	4313      	orrs	r3, r2
 80097b0:	46a2      	mov	sl, r4
 80097b2:	9304      	str	r3, [sp, #16]
 80097b4:	e7d2      	b.n	800975c <_svfiprintf_r+0xa0>
 80097b6:	9b03      	ldr	r3, [sp, #12]
 80097b8:	1d19      	adds	r1, r3, #4
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	9103      	str	r1, [sp, #12]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	bfbb      	ittet	lt
 80097c2:	425b      	neglt	r3, r3
 80097c4:	f042 0202 	orrlt.w	r2, r2, #2
 80097c8:	9307      	strge	r3, [sp, #28]
 80097ca:	9307      	strlt	r3, [sp, #28]
 80097cc:	bfb8      	it	lt
 80097ce:	9204      	strlt	r2, [sp, #16]
 80097d0:	7823      	ldrb	r3, [r4, #0]
 80097d2:	2b2e      	cmp	r3, #46	@ 0x2e
 80097d4:	d10a      	bne.n	80097ec <_svfiprintf_r+0x130>
 80097d6:	7863      	ldrb	r3, [r4, #1]
 80097d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80097da:	d132      	bne.n	8009842 <_svfiprintf_r+0x186>
 80097dc:	9b03      	ldr	r3, [sp, #12]
 80097de:	3402      	adds	r4, #2
 80097e0:	1d1a      	adds	r2, r3, #4
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	9203      	str	r2, [sp, #12]
 80097e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80097ea:	9305      	str	r3, [sp, #20]
 80097ec:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80098a4 <_svfiprintf_r+0x1e8>
 80097f0:	2203      	movs	r2, #3
 80097f2:	4650      	mov	r0, sl
 80097f4:	7821      	ldrb	r1, [r4, #0]
 80097f6:	f7fd fce8 	bl	80071ca <memchr>
 80097fa:	b138      	cbz	r0, 800980c <_svfiprintf_r+0x150>
 80097fc:	2240      	movs	r2, #64	@ 0x40
 80097fe:	9b04      	ldr	r3, [sp, #16]
 8009800:	eba0 000a 	sub.w	r0, r0, sl
 8009804:	4082      	lsls	r2, r0
 8009806:	4313      	orrs	r3, r2
 8009808:	3401      	adds	r4, #1
 800980a:	9304      	str	r3, [sp, #16]
 800980c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009810:	2206      	movs	r2, #6
 8009812:	4825      	ldr	r0, [pc, #148]	@ (80098a8 <_svfiprintf_r+0x1ec>)
 8009814:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009818:	f7fd fcd7 	bl	80071ca <memchr>
 800981c:	2800      	cmp	r0, #0
 800981e:	d036      	beq.n	800988e <_svfiprintf_r+0x1d2>
 8009820:	4b22      	ldr	r3, [pc, #136]	@ (80098ac <_svfiprintf_r+0x1f0>)
 8009822:	bb1b      	cbnz	r3, 800986c <_svfiprintf_r+0x1b0>
 8009824:	9b03      	ldr	r3, [sp, #12]
 8009826:	3307      	adds	r3, #7
 8009828:	f023 0307 	bic.w	r3, r3, #7
 800982c:	3308      	adds	r3, #8
 800982e:	9303      	str	r3, [sp, #12]
 8009830:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009832:	4433      	add	r3, r6
 8009834:	9309      	str	r3, [sp, #36]	@ 0x24
 8009836:	e76a      	b.n	800970e <_svfiprintf_r+0x52>
 8009838:	460c      	mov	r4, r1
 800983a:	2001      	movs	r0, #1
 800983c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009840:	e7a8      	b.n	8009794 <_svfiprintf_r+0xd8>
 8009842:	2300      	movs	r3, #0
 8009844:	f04f 0c0a 	mov.w	ip, #10
 8009848:	4619      	mov	r1, r3
 800984a:	3401      	adds	r4, #1
 800984c:	9305      	str	r3, [sp, #20]
 800984e:	4620      	mov	r0, r4
 8009850:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009854:	3a30      	subs	r2, #48	@ 0x30
 8009856:	2a09      	cmp	r2, #9
 8009858:	d903      	bls.n	8009862 <_svfiprintf_r+0x1a6>
 800985a:	2b00      	cmp	r3, #0
 800985c:	d0c6      	beq.n	80097ec <_svfiprintf_r+0x130>
 800985e:	9105      	str	r1, [sp, #20]
 8009860:	e7c4      	b.n	80097ec <_svfiprintf_r+0x130>
 8009862:	4604      	mov	r4, r0
 8009864:	2301      	movs	r3, #1
 8009866:	fb0c 2101 	mla	r1, ip, r1, r2
 800986a:	e7f0      	b.n	800984e <_svfiprintf_r+0x192>
 800986c:	ab03      	add	r3, sp, #12
 800986e:	9300      	str	r3, [sp, #0]
 8009870:	462a      	mov	r2, r5
 8009872:	4638      	mov	r0, r7
 8009874:	4b0e      	ldr	r3, [pc, #56]	@ (80098b0 <_svfiprintf_r+0x1f4>)
 8009876:	a904      	add	r1, sp, #16
 8009878:	f7fc fd3a 	bl	80062f0 <_printf_float>
 800987c:	1c42      	adds	r2, r0, #1
 800987e:	4606      	mov	r6, r0
 8009880:	d1d6      	bne.n	8009830 <_svfiprintf_r+0x174>
 8009882:	89ab      	ldrh	r3, [r5, #12]
 8009884:	065b      	lsls	r3, r3, #25
 8009886:	f53f af2d 	bmi.w	80096e4 <_svfiprintf_r+0x28>
 800988a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800988c:	e72c      	b.n	80096e8 <_svfiprintf_r+0x2c>
 800988e:	ab03      	add	r3, sp, #12
 8009890:	9300      	str	r3, [sp, #0]
 8009892:	462a      	mov	r2, r5
 8009894:	4638      	mov	r0, r7
 8009896:	4b06      	ldr	r3, [pc, #24]	@ (80098b0 <_svfiprintf_r+0x1f4>)
 8009898:	a904      	add	r1, sp, #16
 800989a:	f7fc ffc7 	bl	800682c <_printf_i>
 800989e:	e7ed      	b.n	800987c <_svfiprintf_r+0x1c0>
 80098a0:	0800a9e4 	.word	0x0800a9e4
 80098a4:	0800a9ea 	.word	0x0800a9ea
 80098a8:	0800a9ee 	.word	0x0800a9ee
 80098ac:	080062f1 	.word	0x080062f1
 80098b0:	08009605 	.word	0x08009605

080098b4 <__sflush_r>:
 80098b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80098b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098ba:	0716      	lsls	r6, r2, #28
 80098bc:	4605      	mov	r5, r0
 80098be:	460c      	mov	r4, r1
 80098c0:	d454      	bmi.n	800996c <__sflush_r+0xb8>
 80098c2:	684b      	ldr	r3, [r1, #4]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	dc02      	bgt.n	80098ce <__sflush_r+0x1a>
 80098c8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	dd48      	ble.n	8009960 <__sflush_r+0xac>
 80098ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80098d0:	2e00      	cmp	r6, #0
 80098d2:	d045      	beq.n	8009960 <__sflush_r+0xac>
 80098d4:	2300      	movs	r3, #0
 80098d6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80098da:	682f      	ldr	r7, [r5, #0]
 80098dc:	6a21      	ldr	r1, [r4, #32]
 80098de:	602b      	str	r3, [r5, #0]
 80098e0:	d030      	beq.n	8009944 <__sflush_r+0x90>
 80098e2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80098e4:	89a3      	ldrh	r3, [r4, #12]
 80098e6:	0759      	lsls	r1, r3, #29
 80098e8:	d505      	bpl.n	80098f6 <__sflush_r+0x42>
 80098ea:	6863      	ldr	r3, [r4, #4]
 80098ec:	1ad2      	subs	r2, r2, r3
 80098ee:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80098f0:	b10b      	cbz	r3, 80098f6 <__sflush_r+0x42>
 80098f2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80098f4:	1ad2      	subs	r2, r2, r3
 80098f6:	2300      	movs	r3, #0
 80098f8:	4628      	mov	r0, r5
 80098fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80098fc:	6a21      	ldr	r1, [r4, #32]
 80098fe:	47b0      	blx	r6
 8009900:	1c43      	adds	r3, r0, #1
 8009902:	89a3      	ldrh	r3, [r4, #12]
 8009904:	d106      	bne.n	8009914 <__sflush_r+0x60>
 8009906:	6829      	ldr	r1, [r5, #0]
 8009908:	291d      	cmp	r1, #29
 800990a:	d82b      	bhi.n	8009964 <__sflush_r+0xb0>
 800990c:	4a28      	ldr	r2, [pc, #160]	@ (80099b0 <__sflush_r+0xfc>)
 800990e:	40ca      	lsrs	r2, r1
 8009910:	07d6      	lsls	r6, r2, #31
 8009912:	d527      	bpl.n	8009964 <__sflush_r+0xb0>
 8009914:	2200      	movs	r2, #0
 8009916:	6062      	str	r2, [r4, #4]
 8009918:	6922      	ldr	r2, [r4, #16]
 800991a:	04d9      	lsls	r1, r3, #19
 800991c:	6022      	str	r2, [r4, #0]
 800991e:	d504      	bpl.n	800992a <__sflush_r+0x76>
 8009920:	1c42      	adds	r2, r0, #1
 8009922:	d101      	bne.n	8009928 <__sflush_r+0x74>
 8009924:	682b      	ldr	r3, [r5, #0]
 8009926:	b903      	cbnz	r3, 800992a <__sflush_r+0x76>
 8009928:	6560      	str	r0, [r4, #84]	@ 0x54
 800992a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800992c:	602f      	str	r7, [r5, #0]
 800992e:	b1b9      	cbz	r1, 8009960 <__sflush_r+0xac>
 8009930:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009934:	4299      	cmp	r1, r3
 8009936:	d002      	beq.n	800993e <__sflush_r+0x8a>
 8009938:	4628      	mov	r0, r5
 800993a:	f7fe fac5 	bl	8007ec8 <_free_r>
 800993e:	2300      	movs	r3, #0
 8009940:	6363      	str	r3, [r4, #52]	@ 0x34
 8009942:	e00d      	b.n	8009960 <__sflush_r+0xac>
 8009944:	2301      	movs	r3, #1
 8009946:	4628      	mov	r0, r5
 8009948:	47b0      	blx	r6
 800994a:	4602      	mov	r2, r0
 800994c:	1c50      	adds	r0, r2, #1
 800994e:	d1c9      	bne.n	80098e4 <__sflush_r+0x30>
 8009950:	682b      	ldr	r3, [r5, #0]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d0c6      	beq.n	80098e4 <__sflush_r+0x30>
 8009956:	2b1d      	cmp	r3, #29
 8009958:	d001      	beq.n	800995e <__sflush_r+0xaa>
 800995a:	2b16      	cmp	r3, #22
 800995c:	d11d      	bne.n	800999a <__sflush_r+0xe6>
 800995e:	602f      	str	r7, [r5, #0]
 8009960:	2000      	movs	r0, #0
 8009962:	e021      	b.n	80099a8 <__sflush_r+0xf4>
 8009964:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009968:	b21b      	sxth	r3, r3
 800996a:	e01a      	b.n	80099a2 <__sflush_r+0xee>
 800996c:	690f      	ldr	r7, [r1, #16]
 800996e:	2f00      	cmp	r7, #0
 8009970:	d0f6      	beq.n	8009960 <__sflush_r+0xac>
 8009972:	0793      	lsls	r3, r2, #30
 8009974:	bf18      	it	ne
 8009976:	2300      	movne	r3, #0
 8009978:	680e      	ldr	r6, [r1, #0]
 800997a:	bf08      	it	eq
 800997c:	694b      	ldreq	r3, [r1, #20]
 800997e:	1bf6      	subs	r6, r6, r7
 8009980:	600f      	str	r7, [r1, #0]
 8009982:	608b      	str	r3, [r1, #8]
 8009984:	2e00      	cmp	r6, #0
 8009986:	ddeb      	ble.n	8009960 <__sflush_r+0xac>
 8009988:	4633      	mov	r3, r6
 800998a:	463a      	mov	r2, r7
 800998c:	4628      	mov	r0, r5
 800998e:	6a21      	ldr	r1, [r4, #32]
 8009990:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8009994:	47e0      	blx	ip
 8009996:	2800      	cmp	r0, #0
 8009998:	dc07      	bgt.n	80099aa <__sflush_r+0xf6>
 800999a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800999e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80099a2:	f04f 30ff 	mov.w	r0, #4294967295
 80099a6:	81a3      	strh	r3, [r4, #12]
 80099a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099aa:	4407      	add	r7, r0
 80099ac:	1a36      	subs	r6, r6, r0
 80099ae:	e7e9      	b.n	8009984 <__sflush_r+0xd0>
 80099b0:	20400001 	.word	0x20400001

080099b4 <_fflush_r>:
 80099b4:	b538      	push	{r3, r4, r5, lr}
 80099b6:	690b      	ldr	r3, [r1, #16]
 80099b8:	4605      	mov	r5, r0
 80099ba:	460c      	mov	r4, r1
 80099bc:	b913      	cbnz	r3, 80099c4 <_fflush_r+0x10>
 80099be:	2500      	movs	r5, #0
 80099c0:	4628      	mov	r0, r5
 80099c2:	bd38      	pop	{r3, r4, r5, pc}
 80099c4:	b118      	cbz	r0, 80099ce <_fflush_r+0x1a>
 80099c6:	6a03      	ldr	r3, [r0, #32]
 80099c8:	b90b      	cbnz	r3, 80099ce <_fflush_r+0x1a>
 80099ca:	f7fd fae3 	bl	8006f94 <__sinit>
 80099ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d0f3      	beq.n	80099be <_fflush_r+0xa>
 80099d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80099d8:	07d0      	lsls	r0, r2, #31
 80099da:	d404      	bmi.n	80099e6 <_fflush_r+0x32>
 80099dc:	0599      	lsls	r1, r3, #22
 80099de:	d402      	bmi.n	80099e6 <_fflush_r+0x32>
 80099e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80099e2:	f7fd fbf0 	bl	80071c6 <__retarget_lock_acquire_recursive>
 80099e6:	4628      	mov	r0, r5
 80099e8:	4621      	mov	r1, r4
 80099ea:	f7ff ff63 	bl	80098b4 <__sflush_r>
 80099ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80099f0:	4605      	mov	r5, r0
 80099f2:	07da      	lsls	r2, r3, #31
 80099f4:	d4e4      	bmi.n	80099c0 <_fflush_r+0xc>
 80099f6:	89a3      	ldrh	r3, [r4, #12]
 80099f8:	059b      	lsls	r3, r3, #22
 80099fa:	d4e1      	bmi.n	80099c0 <_fflush_r+0xc>
 80099fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80099fe:	f7fd fbe3 	bl	80071c8 <__retarget_lock_release_recursive>
 8009a02:	e7dd      	b.n	80099c0 <_fflush_r+0xc>

08009a04 <memmove>:
 8009a04:	4288      	cmp	r0, r1
 8009a06:	b510      	push	{r4, lr}
 8009a08:	eb01 0402 	add.w	r4, r1, r2
 8009a0c:	d902      	bls.n	8009a14 <memmove+0x10>
 8009a0e:	4284      	cmp	r4, r0
 8009a10:	4623      	mov	r3, r4
 8009a12:	d807      	bhi.n	8009a24 <memmove+0x20>
 8009a14:	1e43      	subs	r3, r0, #1
 8009a16:	42a1      	cmp	r1, r4
 8009a18:	d008      	beq.n	8009a2c <memmove+0x28>
 8009a1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009a1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009a22:	e7f8      	b.n	8009a16 <memmove+0x12>
 8009a24:	4601      	mov	r1, r0
 8009a26:	4402      	add	r2, r0
 8009a28:	428a      	cmp	r2, r1
 8009a2a:	d100      	bne.n	8009a2e <memmove+0x2a>
 8009a2c:	bd10      	pop	{r4, pc}
 8009a2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009a32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009a36:	e7f7      	b.n	8009a28 <memmove+0x24>

08009a38 <strncmp>:
 8009a38:	b510      	push	{r4, lr}
 8009a3a:	b16a      	cbz	r2, 8009a58 <strncmp+0x20>
 8009a3c:	3901      	subs	r1, #1
 8009a3e:	1884      	adds	r4, r0, r2
 8009a40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a44:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009a48:	429a      	cmp	r2, r3
 8009a4a:	d103      	bne.n	8009a54 <strncmp+0x1c>
 8009a4c:	42a0      	cmp	r0, r4
 8009a4e:	d001      	beq.n	8009a54 <strncmp+0x1c>
 8009a50:	2a00      	cmp	r2, #0
 8009a52:	d1f5      	bne.n	8009a40 <strncmp+0x8>
 8009a54:	1ad0      	subs	r0, r2, r3
 8009a56:	bd10      	pop	{r4, pc}
 8009a58:	4610      	mov	r0, r2
 8009a5a:	e7fc      	b.n	8009a56 <strncmp+0x1e>

08009a5c <_sbrk_r>:
 8009a5c:	b538      	push	{r3, r4, r5, lr}
 8009a5e:	2300      	movs	r3, #0
 8009a60:	4d05      	ldr	r5, [pc, #20]	@ (8009a78 <_sbrk_r+0x1c>)
 8009a62:	4604      	mov	r4, r0
 8009a64:	4608      	mov	r0, r1
 8009a66:	602b      	str	r3, [r5, #0]
 8009a68:	f7f8 f8fe 	bl	8001c68 <_sbrk>
 8009a6c:	1c43      	adds	r3, r0, #1
 8009a6e:	d102      	bne.n	8009a76 <_sbrk_r+0x1a>
 8009a70:	682b      	ldr	r3, [r5, #0]
 8009a72:	b103      	cbz	r3, 8009a76 <_sbrk_r+0x1a>
 8009a74:	6023      	str	r3, [r4, #0]
 8009a76:	bd38      	pop	{r3, r4, r5, pc}
 8009a78:	20000be4 	.word	0x20000be4

08009a7c <nan>:
 8009a7c:	2000      	movs	r0, #0
 8009a7e:	4901      	ldr	r1, [pc, #4]	@ (8009a84 <nan+0x8>)
 8009a80:	4770      	bx	lr
 8009a82:	bf00      	nop
 8009a84:	7ff80000 	.word	0x7ff80000

08009a88 <__assert_func>:
 8009a88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009a8a:	4614      	mov	r4, r2
 8009a8c:	461a      	mov	r2, r3
 8009a8e:	4b09      	ldr	r3, [pc, #36]	@ (8009ab4 <__assert_func+0x2c>)
 8009a90:	4605      	mov	r5, r0
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	68d8      	ldr	r0, [r3, #12]
 8009a96:	b14c      	cbz	r4, 8009aac <__assert_func+0x24>
 8009a98:	4b07      	ldr	r3, [pc, #28]	@ (8009ab8 <__assert_func+0x30>)
 8009a9a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009a9e:	9100      	str	r1, [sp, #0]
 8009aa0:	462b      	mov	r3, r5
 8009aa2:	4906      	ldr	r1, [pc, #24]	@ (8009abc <__assert_func+0x34>)
 8009aa4:	f000 fba8 	bl	800a1f8 <fiprintf>
 8009aa8:	f000 fbb8 	bl	800a21c <abort>
 8009aac:	4b04      	ldr	r3, [pc, #16]	@ (8009ac0 <__assert_func+0x38>)
 8009aae:	461c      	mov	r4, r3
 8009ab0:	e7f3      	b.n	8009a9a <__assert_func+0x12>
 8009ab2:	bf00      	nop
 8009ab4:	20000018 	.word	0x20000018
 8009ab8:	0800a9fd 	.word	0x0800a9fd
 8009abc:	0800aa0a 	.word	0x0800aa0a
 8009ac0:	0800aa38 	.word	0x0800aa38

08009ac4 <_calloc_r>:
 8009ac4:	b570      	push	{r4, r5, r6, lr}
 8009ac6:	fba1 5402 	umull	r5, r4, r1, r2
 8009aca:	b934      	cbnz	r4, 8009ada <_calloc_r+0x16>
 8009acc:	4629      	mov	r1, r5
 8009ace:	f7fe fa6d 	bl	8007fac <_malloc_r>
 8009ad2:	4606      	mov	r6, r0
 8009ad4:	b928      	cbnz	r0, 8009ae2 <_calloc_r+0x1e>
 8009ad6:	4630      	mov	r0, r6
 8009ad8:	bd70      	pop	{r4, r5, r6, pc}
 8009ada:	220c      	movs	r2, #12
 8009adc:	2600      	movs	r6, #0
 8009ade:	6002      	str	r2, [r0, #0]
 8009ae0:	e7f9      	b.n	8009ad6 <_calloc_r+0x12>
 8009ae2:	462a      	mov	r2, r5
 8009ae4:	4621      	mov	r1, r4
 8009ae6:	f7fd faf0 	bl	80070ca <memset>
 8009aea:	e7f4      	b.n	8009ad6 <_calloc_r+0x12>

08009aec <rshift>:
 8009aec:	6903      	ldr	r3, [r0, #16]
 8009aee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009af2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009af6:	f100 0414 	add.w	r4, r0, #20
 8009afa:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009afe:	dd46      	ble.n	8009b8e <rshift+0xa2>
 8009b00:	f011 011f 	ands.w	r1, r1, #31
 8009b04:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009b08:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009b0c:	d10c      	bne.n	8009b28 <rshift+0x3c>
 8009b0e:	4629      	mov	r1, r5
 8009b10:	f100 0710 	add.w	r7, r0, #16
 8009b14:	42b1      	cmp	r1, r6
 8009b16:	d335      	bcc.n	8009b84 <rshift+0x98>
 8009b18:	1a9b      	subs	r3, r3, r2
 8009b1a:	009b      	lsls	r3, r3, #2
 8009b1c:	1eea      	subs	r2, r5, #3
 8009b1e:	4296      	cmp	r6, r2
 8009b20:	bf38      	it	cc
 8009b22:	2300      	movcc	r3, #0
 8009b24:	4423      	add	r3, r4
 8009b26:	e015      	b.n	8009b54 <rshift+0x68>
 8009b28:	46a1      	mov	r9, r4
 8009b2a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009b2e:	f1c1 0820 	rsb	r8, r1, #32
 8009b32:	40cf      	lsrs	r7, r1
 8009b34:	f105 0e04 	add.w	lr, r5, #4
 8009b38:	4576      	cmp	r6, lr
 8009b3a:	46f4      	mov	ip, lr
 8009b3c:	d816      	bhi.n	8009b6c <rshift+0x80>
 8009b3e:	1a9a      	subs	r2, r3, r2
 8009b40:	0092      	lsls	r2, r2, #2
 8009b42:	3a04      	subs	r2, #4
 8009b44:	3501      	adds	r5, #1
 8009b46:	42ae      	cmp	r6, r5
 8009b48:	bf38      	it	cc
 8009b4a:	2200      	movcc	r2, #0
 8009b4c:	18a3      	adds	r3, r4, r2
 8009b4e:	50a7      	str	r7, [r4, r2]
 8009b50:	b107      	cbz	r7, 8009b54 <rshift+0x68>
 8009b52:	3304      	adds	r3, #4
 8009b54:	42a3      	cmp	r3, r4
 8009b56:	eba3 0204 	sub.w	r2, r3, r4
 8009b5a:	bf08      	it	eq
 8009b5c:	2300      	moveq	r3, #0
 8009b5e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009b62:	6102      	str	r2, [r0, #16]
 8009b64:	bf08      	it	eq
 8009b66:	6143      	streq	r3, [r0, #20]
 8009b68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009b6c:	f8dc c000 	ldr.w	ip, [ip]
 8009b70:	fa0c fc08 	lsl.w	ip, ip, r8
 8009b74:	ea4c 0707 	orr.w	r7, ip, r7
 8009b78:	f849 7b04 	str.w	r7, [r9], #4
 8009b7c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009b80:	40cf      	lsrs	r7, r1
 8009b82:	e7d9      	b.n	8009b38 <rshift+0x4c>
 8009b84:	f851 cb04 	ldr.w	ip, [r1], #4
 8009b88:	f847 cf04 	str.w	ip, [r7, #4]!
 8009b8c:	e7c2      	b.n	8009b14 <rshift+0x28>
 8009b8e:	4623      	mov	r3, r4
 8009b90:	e7e0      	b.n	8009b54 <rshift+0x68>

08009b92 <__hexdig_fun>:
 8009b92:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009b96:	2b09      	cmp	r3, #9
 8009b98:	d802      	bhi.n	8009ba0 <__hexdig_fun+0xe>
 8009b9a:	3820      	subs	r0, #32
 8009b9c:	b2c0      	uxtb	r0, r0
 8009b9e:	4770      	bx	lr
 8009ba0:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009ba4:	2b05      	cmp	r3, #5
 8009ba6:	d801      	bhi.n	8009bac <__hexdig_fun+0x1a>
 8009ba8:	3847      	subs	r0, #71	@ 0x47
 8009baa:	e7f7      	b.n	8009b9c <__hexdig_fun+0xa>
 8009bac:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009bb0:	2b05      	cmp	r3, #5
 8009bb2:	d801      	bhi.n	8009bb8 <__hexdig_fun+0x26>
 8009bb4:	3827      	subs	r0, #39	@ 0x27
 8009bb6:	e7f1      	b.n	8009b9c <__hexdig_fun+0xa>
 8009bb8:	2000      	movs	r0, #0
 8009bba:	4770      	bx	lr

08009bbc <__gethex>:
 8009bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bc0:	468a      	mov	sl, r1
 8009bc2:	4690      	mov	r8, r2
 8009bc4:	b085      	sub	sp, #20
 8009bc6:	9302      	str	r3, [sp, #8]
 8009bc8:	680b      	ldr	r3, [r1, #0]
 8009bca:	9001      	str	r0, [sp, #4]
 8009bcc:	1c9c      	adds	r4, r3, #2
 8009bce:	46a1      	mov	r9, r4
 8009bd0:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009bd4:	2830      	cmp	r0, #48	@ 0x30
 8009bd6:	d0fa      	beq.n	8009bce <__gethex+0x12>
 8009bd8:	eba9 0303 	sub.w	r3, r9, r3
 8009bdc:	f1a3 0b02 	sub.w	fp, r3, #2
 8009be0:	f7ff ffd7 	bl	8009b92 <__hexdig_fun>
 8009be4:	4605      	mov	r5, r0
 8009be6:	2800      	cmp	r0, #0
 8009be8:	d168      	bne.n	8009cbc <__gethex+0x100>
 8009bea:	2201      	movs	r2, #1
 8009bec:	4648      	mov	r0, r9
 8009bee:	499f      	ldr	r1, [pc, #636]	@ (8009e6c <__gethex+0x2b0>)
 8009bf0:	f7ff ff22 	bl	8009a38 <strncmp>
 8009bf4:	4607      	mov	r7, r0
 8009bf6:	2800      	cmp	r0, #0
 8009bf8:	d167      	bne.n	8009cca <__gethex+0x10e>
 8009bfa:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009bfe:	4626      	mov	r6, r4
 8009c00:	f7ff ffc7 	bl	8009b92 <__hexdig_fun>
 8009c04:	2800      	cmp	r0, #0
 8009c06:	d062      	beq.n	8009cce <__gethex+0x112>
 8009c08:	4623      	mov	r3, r4
 8009c0a:	7818      	ldrb	r0, [r3, #0]
 8009c0c:	4699      	mov	r9, r3
 8009c0e:	2830      	cmp	r0, #48	@ 0x30
 8009c10:	f103 0301 	add.w	r3, r3, #1
 8009c14:	d0f9      	beq.n	8009c0a <__gethex+0x4e>
 8009c16:	f7ff ffbc 	bl	8009b92 <__hexdig_fun>
 8009c1a:	fab0 f580 	clz	r5, r0
 8009c1e:	f04f 0b01 	mov.w	fp, #1
 8009c22:	096d      	lsrs	r5, r5, #5
 8009c24:	464a      	mov	r2, r9
 8009c26:	4616      	mov	r6, r2
 8009c28:	7830      	ldrb	r0, [r6, #0]
 8009c2a:	3201      	adds	r2, #1
 8009c2c:	f7ff ffb1 	bl	8009b92 <__hexdig_fun>
 8009c30:	2800      	cmp	r0, #0
 8009c32:	d1f8      	bne.n	8009c26 <__gethex+0x6a>
 8009c34:	2201      	movs	r2, #1
 8009c36:	4630      	mov	r0, r6
 8009c38:	498c      	ldr	r1, [pc, #560]	@ (8009e6c <__gethex+0x2b0>)
 8009c3a:	f7ff fefd 	bl	8009a38 <strncmp>
 8009c3e:	2800      	cmp	r0, #0
 8009c40:	d13f      	bne.n	8009cc2 <__gethex+0x106>
 8009c42:	b944      	cbnz	r4, 8009c56 <__gethex+0x9a>
 8009c44:	1c74      	adds	r4, r6, #1
 8009c46:	4622      	mov	r2, r4
 8009c48:	4616      	mov	r6, r2
 8009c4a:	7830      	ldrb	r0, [r6, #0]
 8009c4c:	3201      	adds	r2, #1
 8009c4e:	f7ff ffa0 	bl	8009b92 <__hexdig_fun>
 8009c52:	2800      	cmp	r0, #0
 8009c54:	d1f8      	bne.n	8009c48 <__gethex+0x8c>
 8009c56:	1ba4      	subs	r4, r4, r6
 8009c58:	00a7      	lsls	r7, r4, #2
 8009c5a:	7833      	ldrb	r3, [r6, #0]
 8009c5c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009c60:	2b50      	cmp	r3, #80	@ 0x50
 8009c62:	d13e      	bne.n	8009ce2 <__gethex+0x126>
 8009c64:	7873      	ldrb	r3, [r6, #1]
 8009c66:	2b2b      	cmp	r3, #43	@ 0x2b
 8009c68:	d033      	beq.n	8009cd2 <__gethex+0x116>
 8009c6a:	2b2d      	cmp	r3, #45	@ 0x2d
 8009c6c:	d034      	beq.n	8009cd8 <__gethex+0x11c>
 8009c6e:	2400      	movs	r4, #0
 8009c70:	1c71      	adds	r1, r6, #1
 8009c72:	7808      	ldrb	r0, [r1, #0]
 8009c74:	f7ff ff8d 	bl	8009b92 <__hexdig_fun>
 8009c78:	1e43      	subs	r3, r0, #1
 8009c7a:	b2db      	uxtb	r3, r3
 8009c7c:	2b18      	cmp	r3, #24
 8009c7e:	d830      	bhi.n	8009ce2 <__gethex+0x126>
 8009c80:	f1a0 0210 	sub.w	r2, r0, #16
 8009c84:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009c88:	f7ff ff83 	bl	8009b92 <__hexdig_fun>
 8009c8c:	f100 3cff 	add.w	ip, r0, #4294967295
 8009c90:	fa5f fc8c 	uxtb.w	ip, ip
 8009c94:	f1bc 0f18 	cmp.w	ip, #24
 8009c98:	f04f 030a 	mov.w	r3, #10
 8009c9c:	d91e      	bls.n	8009cdc <__gethex+0x120>
 8009c9e:	b104      	cbz	r4, 8009ca2 <__gethex+0xe6>
 8009ca0:	4252      	negs	r2, r2
 8009ca2:	4417      	add	r7, r2
 8009ca4:	f8ca 1000 	str.w	r1, [sl]
 8009ca8:	b1ed      	cbz	r5, 8009ce6 <__gethex+0x12a>
 8009caa:	f1bb 0f00 	cmp.w	fp, #0
 8009cae:	bf0c      	ite	eq
 8009cb0:	2506      	moveq	r5, #6
 8009cb2:	2500      	movne	r5, #0
 8009cb4:	4628      	mov	r0, r5
 8009cb6:	b005      	add	sp, #20
 8009cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cbc:	2500      	movs	r5, #0
 8009cbe:	462c      	mov	r4, r5
 8009cc0:	e7b0      	b.n	8009c24 <__gethex+0x68>
 8009cc2:	2c00      	cmp	r4, #0
 8009cc4:	d1c7      	bne.n	8009c56 <__gethex+0x9a>
 8009cc6:	4627      	mov	r7, r4
 8009cc8:	e7c7      	b.n	8009c5a <__gethex+0x9e>
 8009cca:	464e      	mov	r6, r9
 8009ccc:	462f      	mov	r7, r5
 8009cce:	2501      	movs	r5, #1
 8009cd0:	e7c3      	b.n	8009c5a <__gethex+0x9e>
 8009cd2:	2400      	movs	r4, #0
 8009cd4:	1cb1      	adds	r1, r6, #2
 8009cd6:	e7cc      	b.n	8009c72 <__gethex+0xb6>
 8009cd8:	2401      	movs	r4, #1
 8009cda:	e7fb      	b.n	8009cd4 <__gethex+0x118>
 8009cdc:	fb03 0002 	mla	r0, r3, r2, r0
 8009ce0:	e7ce      	b.n	8009c80 <__gethex+0xc4>
 8009ce2:	4631      	mov	r1, r6
 8009ce4:	e7de      	b.n	8009ca4 <__gethex+0xe8>
 8009ce6:	4629      	mov	r1, r5
 8009ce8:	eba6 0309 	sub.w	r3, r6, r9
 8009cec:	3b01      	subs	r3, #1
 8009cee:	2b07      	cmp	r3, #7
 8009cf0:	dc0a      	bgt.n	8009d08 <__gethex+0x14c>
 8009cf2:	9801      	ldr	r0, [sp, #4]
 8009cf4:	f7fe f9e6 	bl	80080c4 <_Balloc>
 8009cf8:	4604      	mov	r4, r0
 8009cfa:	b940      	cbnz	r0, 8009d0e <__gethex+0x152>
 8009cfc:	4602      	mov	r2, r0
 8009cfe:	21e4      	movs	r1, #228	@ 0xe4
 8009d00:	4b5b      	ldr	r3, [pc, #364]	@ (8009e70 <__gethex+0x2b4>)
 8009d02:	485c      	ldr	r0, [pc, #368]	@ (8009e74 <__gethex+0x2b8>)
 8009d04:	f7ff fec0 	bl	8009a88 <__assert_func>
 8009d08:	3101      	adds	r1, #1
 8009d0a:	105b      	asrs	r3, r3, #1
 8009d0c:	e7ef      	b.n	8009cee <__gethex+0x132>
 8009d0e:	2300      	movs	r3, #0
 8009d10:	f100 0a14 	add.w	sl, r0, #20
 8009d14:	4655      	mov	r5, sl
 8009d16:	469b      	mov	fp, r3
 8009d18:	45b1      	cmp	r9, r6
 8009d1a:	d337      	bcc.n	8009d8c <__gethex+0x1d0>
 8009d1c:	f845 bb04 	str.w	fp, [r5], #4
 8009d20:	eba5 050a 	sub.w	r5, r5, sl
 8009d24:	10ad      	asrs	r5, r5, #2
 8009d26:	6125      	str	r5, [r4, #16]
 8009d28:	4658      	mov	r0, fp
 8009d2a:	f7fe fabd 	bl	80082a8 <__hi0bits>
 8009d2e:	016d      	lsls	r5, r5, #5
 8009d30:	f8d8 6000 	ldr.w	r6, [r8]
 8009d34:	1a2d      	subs	r5, r5, r0
 8009d36:	42b5      	cmp	r5, r6
 8009d38:	dd54      	ble.n	8009de4 <__gethex+0x228>
 8009d3a:	1bad      	subs	r5, r5, r6
 8009d3c:	4629      	mov	r1, r5
 8009d3e:	4620      	mov	r0, r4
 8009d40:	f7fe fe3f 	bl	80089c2 <__any_on>
 8009d44:	4681      	mov	r9, r0
 8009d46:	b178      	cbz	r0, 8009d68 <__gethex+0x1ac>
 8009d48:	f04f 0901 	mov.w	r9, #1
 8009d4c:	1e6b      	subs	r3, r5, #1
 8009d4e:	1159      	asrs	r1, r3, #5
 8009d50:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009d54:	f003 021f 	and.w	r2, r3, #31
 8009d58:	fa09 f202 	lsl.w	r2, r9, r2
 8009d5c:	420a      	tst	r2, r1
 8009d5e:	d003      	beq.n	8009d68 <__gethex+0x1ac>
 8009d60:	454b      	cmp	r3, r9
 8009d62:	dc36      	bgt.n	8009dd2 <__gethex+0x216>
 8009d64:	f04f 0902 	mov.w	r9, #2
 8009d68:	4629      	mov	r1, r5
 8009d6a:	4620      	mov	r0, r4
 8009d6c:	f7ff febe 	bl	8009aec <rshift>
 8009d70:	442f      	add	r7, r5
 8009d72:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009d76:	42bb      	cmp	r3, r7
 8009d78:	da42      	bge.n	8009e00 <__gethex+0x244>
 8009d7a:	4621      	mov	r1, r4
 8009d7c:	9801      	ldr	r0, [sp, #4]
 8009d7e:	f7fe f9e1 	bl	8008144 <_Bfree>
 8009d82:	2300      	movs	r3, #0
 8009d84:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009d86:	25a3      	movs	r5, #163	@ 0xa3
 8009d88:	6013      	str	r3, [r2, #0]
 8009d8a:	e793      	b.n	8009cb4 <__gethex+0xf8>
 8009d8c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009d90:	2a2e      	cmp	r2, #46	@ 0x2e
 8009d92:	d012      	beq.n	8009dba <__gethex+0x1fe>
 8009d94:	2b20      	cmp	r3, #32
 8009d96:	d104      	bne.n	8009da2 <__gethex+0x1e6>
 8009d98:	f845 bb04 	str.w	fp, [r5], #4
 8009d9c:	f04f 0b00 	mov.w	fp, #0
 8009da0:	465b      	mov	r3, fp
 8009da2:	7830      	ldrb	r0, [r6, #0]
 8009da4:	9303      	str	r3, [sp, #12]
 8009da6:	f7ff fef4 	bl	8009b92 <__hexdig_fun>
 8009daa:	9b03      	ldr	r3, [sp, #12]
 8009dac:	f000 000f 	and.w	r0, r0, #15
 8009db0:	4098      	lsls	r0, r3
 8009db2:	ea4b 0b00 	orr.w	fp, fp, r0
 8009db6:	3304      	adds	r3, #4
 8009db8:	e7ae      	b.n	8009d18 <__gethex+0x15c>
 8009dba:	45b1      	cmp	r9, r6
 8009dbc:	d8ea      	bhi.n	8009d94 <__gethex+0x1d8>
 8009dbe:	2201      	movs	r2, #1
 8009dc0:	4630      	mov	r0, r6
 8009dc2:	492a      	ldr	r1, [pc, #168]	@ (8009e6c <__gethex+0x2b0>)
 8009dc4:	9303      	str	r3, [sp, #12]
 8009dc6:	f7ff fe37 	bl	8009a38 <strncmp>
 8009dca:	9b03      	ldr	r3, [sp, #12]
 8009dcc:	2800      	cmp	r0, #0
 8009dce:	d1e1      	bne.n	8009d94 <__gethex+0x1d8>
 8009dd0:	e7a2      	b.n	8009d18 <__gethex+0x15c>
 8009dd2:	4620      	mov	r0, r4
 8009dd4:	1ea9      	subs	r1, r5, #2
 8009dd6:	f7fe fdf4 	bl	80089c2 <__any_on>
 8009dda:	2800      	cmp	r0, #0
 8009ddc:	d0c2      	beq.n	8009d64 <__gethex+0x1a8>
 8009dde:	f04f 0903 	mov.w	r9, #3
 8009de2:	e7c1      	b.n	8009d68 <__gethex+0x1ac>
 8009de4:	da09      	bge.n	8009dfa <__gethex+0x23e>
 8009de6:	1b75      	subs	r5, r6, r5
 8009de8:	4621      	mov	r1, r4
 8009dea:	462a      	mov	r2, r5
 8009dec:	9801      	ldr	r0, [sp, #4]
 8009dee:	f7fe fbb9 	bl	8008564 <__lshift>
 8009df2:	4604      	mov	r4, r0
 8009df4:	1b7f      	subs	r7, r7, r5
 8009df6:	f100 0a14 	add.w	sl, r0, #20
 8009dfa:	f04f 0900 	mov.w	r9, #0
 8009dfe:	e7b8      	b.n	8009d72 <__gethex+0x1b6>
 8009e00:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009e04:	42bd      	cmp	r5, r7
 8009e06:	dd6f      	ble.n	8009ee8 <__gethex+0x32c>
 8009e08:	1bed      	subs	r5, r5, r7
 8009e0a:	42ae      	cmp	r6, r5
 8009e0c:	dc34      	bgt.n	8009e78 <__gethex+0x2bc>
 8009e0e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009e12:	2b02      	cmp	r3, #2
 8009e14:	d022      	beq.n	8009e5c <__gethex+0x2a0>
 8009e16:	2b03      	cmp	r3, #3
 8009e18:	d024      	beq.n	8009e64 <__gethex+0x2a8>
 8009e1a:	2b01      	cmp	r3, #1
 8009e1c:	d115      	bne.n	8009e4a <__gethex+0x28e>
 8009e1e:	42ae      	cmp	r6, r5
 8009e20:	d113      	bne.n	8009e4a <__gethex+0x28e>
 8009e22:	2e01      	cmp	r6, #1
 8009e24:	d10b      	bne.n	8009e3e <__gethex+0x282>
 8009e26:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009e2a:	9a02      	ldr	r2, [sp, #8]
 8009e2c:	2562      	movs	r5, #98	@ 0x62
 8009e2e:	6013      	str	r3, [r2, #0]
 8009e30:	2301      	movs	r3, #1
 8009e32:	6123      	str	r3, [r4, #16]
 8009e34:	f8ca 3000 	str.w	r3, [sl]
 8009e38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e3a:	601c      	str	r4, [r3, #0]
 8009e3c:	e73a      	b.n	8009cb4 <__gethex+0xf8>
 8009e3e:	4620      	mov	r0, r4
 8009e40:	1e71      	subs	r1, r6, #1
 8009e42:	f7fe fdbe 	bl	80089c2 <__any_on>
 8009e46:	2800      	cmp	r0, #0
 8009e48:	d1ed      	bne.n	8009e26 <__gethex+0x26a>
 8009e4a:	4621      	mov	r1, r4
 8009e4c:	9801      	ldr	r0, [sp, #4]
 8009e4e:	f7fe f979 	bl	8008144 <_Bfree>
 8009e52:	2300      	movs	r3, #0
 8009e54:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009e56:	2550      	movs	r5, #80	@ 0x50
 8009e58:	6013      	str	r3, [r2, #0]
 8009e5a:	e72b      	b.n	8009cb4 <__gethex+0xf8>
 8009e5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d1f3      	bne.n	8009e4a <__gethex+0x28e>
 8009e62:	e7e0      	b.n	8009e26 <__gethex+0x26a>
 8009e64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d1dd      	bne.n	8009e26 <__gethex+0x26a>
 8009e6a:	e7ee      	b.n	8009e4a <__gethex+0x28e>
 8009e6c:	0800a9e2 	.word	0x0800a9e2
 8009e70:	0800a978 	.word	0x0800a978
 8009e74:	0800aa39 	.word	0x0800aa39
 8009e78:	1e6f      	subs	r7, r5, #1
 8009e7a:	f1b9 0f00 	cmp.w	r9, #0
 8009e7e:	d130      	bne.n	8009ee2 <__gethex+0x326>
 8009e80:	b127      	cbz	r7, 8009e8c <__gethex+0x2d0>
 8009e82:	4639      	mov	r1, r7
 8009e84:	4620      	mov	r0, r4
 8009e86:	f7fe fd9c 	bl	80089c2 <__any_on>
 8009e8a:	4681      	mov	r9, r0
 8009e8c:	2301      	movs	r3, #1
 8009e8e:	4629      	mov	r1, r5
 8009e90:	1b76      	subs	r6, r6, r5
 8009e92:	2502      	movs	r5, #2
 8009e94:	117a      	asrs	r2, r7, #5
 8009e96:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009e9a:	f007 071f 	and.w	r7, r7, #31
 8009e9e:	40bb      	lsls	r3, r7
 8009ea0:	4213      	tst	r3, r2
 8009ea2:	4620      	mov	r0, r4
 8009ea4:	bf18      	it	ne
 8009ea6:	f049 0902 	orrne.w	r9, r9, #2
 8009eaa:	f7ff fe1f 	bl	8009aec <rshift>
 8009eae:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009eb2:	f1b9 0f00 	cmp.w	r9, #0
 8009eb6:	d047      	beq.n	8009f48 <__gethex+0x38c>
 8009eb8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009ebc:	2b02      	cmp	r3, #2
 8009ebe:	d015      	beq.n	8009eec <__gethex+0x330>
 8009ec0:	2b03      	cmp	r3, #3
 8009ec2:	d017      	beq.n	8009ef4 <__gethex+0x338>
 8009ec4:	2b01      	cmp	r3, #1
 8009ec6:	d109      	bne.n	8009edc <__gethex+0x320>
 8009ec8:	f019 0f02 	tst.w	r9, #2
 8009ecc:	d006      	beq.n	8009edc <__gethex+0x320>
 8009ece:	f8da 3000 	ldr.w	r3, [sl]
 8009ed2:	ea49 0903 	orr.w	r9, r9, r3
 8009ed6:	f019 0f01 	tst.w	r9, #1
 8009eda:	d10e      	bne.n	8009efa <__gethex+0x33e>
 8009edc:	f045 0510 	orr.w	r5, r5, #16
 8009ee0:	e032      	b.n	8009f48 <__gethex+0x38c>
 8009ee2:	f04f 0901 	mov.w	r9, #1
 8009ee6:	e7d1      	b.n	8009e8c <__gethex+0x2d0>
 8009ee8:	2501      	movs	r5, #1
 8009eea:	e7e2      	b.n	8009eb2 <__gethex+0x2f6>
 8009eec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009eee:	f1c3 0301 	rsb	r3, r3, #1
 8009ef2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009ef4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d0f0      	beq.n	8009edc <__gethex+0x320>
 8009efa:	f04f 0c00 	mov.w	ip, #0
 8009efe:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009f02:	f104 0314 	add.w	r3, r4, #20
 8009f06:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009f0a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009f0e:	4618      	mov	r0, r3
 8009f10:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f14:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009f18:	d01b      	beq.n	8009f52 <__gethex+0x396>
 8009f1a:	3201      	adds	r2, #1
 8009f1c:	6002      	str	r2, [r0, #0]
 8009f1e:	2d02      	cmp	r5, #2
 8009f20:	f104 0314 	add.w	r3, r4, #20
 8009f24:	d13c      	bne.n	8009fa0 <__gethex+0x3e4>
 8009f26:	f8d8 2000 	ldr.w	r2, [r8]
 8009f2a:	3a01      	subs	r2, #1
 8009f2c:	42b2      	cmp	r2, r6
 8009f2e:	d109      	bne.n	8009f44 <__gethex+0x388>
 8009f30:	2201      	movs	r2, #1
 8009f32:	1171      	asrs	r1, r6, #5
 8009f34:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009f38:	f006 061f 	and.w	r6, r6, #31
 8009f3c:	fa02 f606 	lsl.w	r6, r2, r6
 8009f40:	421e      	tst	r6, r3
 8009f42:	d13a      	bne.n	8009fba <__gethex+0x3fe>
 8009f44:	f045 0520 	orr.w	r5, r5, #32
 8009f48:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f4a:	601c      	str	r4, [r3, #0]
 8009f4c:	9b02      	ldr	r3, [sp, #8]
 8009f4e:	601f      	str	r7, [r3, #0]
 8009f50:	e6b0      	b.n	8009cb4 <__gethex+0xf8>
 8009f52:	4299      	cmp	r1, r3
 8009f54:	f843 cc04 	str.w	ip, [r3, #-4]
 8009f58:	d8d9      	bhi.n	8009f0e <__gethex+0x352>
 8009f5a:	68a3      	ldr	r3, [r4, #8]
 8009f5c:	459b      	cmp	fp, r3
 8009f5e:	db17      	blt.n	8009f90 <__gethex+0x3d4>
 8009f60:	6861      	ldr	r1, [r4, #4]
 8009f62:	9801      	ldr	r0, [sp, #4]
 8009f64:	3101      	adds	r1, #1
 8009f66:	f7fe f8ad 	bl	80080c4 <_Balloc>
 8009f6a:	4681      	mov	r9, r0
 8009f6c:	b918      	cbnz	r0, 8009f76 <__gethex+0x3ba>
 8009f6e:	4602      	mov	r2, r0
 8009f70:	2184      	movs	r1, #132	@ 0x84
 8009f72:	4b19      	ldr	r3, [pc, #100]	@ (8009fd8 <__gethex+0x41c>)
 8009f74:	e6c5      	b.n	8009d02 <__gethex+0x146>
 8009f76:	6922      	ldr	r2, [r4, #16]
 8009f78:	f104 010c 	add.w	r1, r4, #12
 8009f7c:	3202      	adds	r2, #2
 8009f7e:	0092      	lsls	r2, r2, #2
 8009f80:	300c      	adds	r0, #12
 8009f82:	f7fd f930 	bl	80071e6 <memcpy>
 8009f86:	4621      	mov	r1, r4
 8009f88:	9801      	ldr	r0, [sp, #4]
 8009f8a:	f7fe f8db 	bl	8008144 <_Bfree>
 8009f8e:	464c      	mov	r4, r9
 8009f90:	6923      	ldr	r3, [r4, #16]
 8009f92:	1c5a      	adds	r2, r3, #1
 8009f94:	6122      	str	r2, [r4, #16]
 8009f96:	2201      	movs	r2, #1
 8009f98:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009f9c:	615a      	str	r2, [r3, #20]
 8009f9e:	e7be      	b.n	8009f1e <__gethex+0x362>
 8009fa0:	6922      	ldr	r2, [r4, #16]
 8009fa2:	455a      	cmp	r2, fp
 8009fa4:	dd0b      	ble.n	8009fbe <__gethex+0x402>
 8009fa6:	2101      	movs	r1, #1
 8009fa8:	4620      	mov	r0, r4
 8009faa:	f7ff fd9f 	bl	8009aec <rshift>
 8009fae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009fb2:	3701      	adds	r7, #1
 8009fb4:	42bb      	cmp	r3, r7
 8009fb6:	f6ff aee0 	blt.w	8009d7a <__gethex+0x1be>
 8009fba:	2501      	movs	r5, #1
 8009fbc:	e7c2      	b.n	8009f44 <__gethex+0x388>
 8009fbe:	f016 061f 	ands.w	r6, r6, #31
 8009fc2:	d0fa      	beq.n	8009fba <__gethex+0x3fe>
 8009fc4:	4453      	add	r3, sl
 8009fc6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009fca:	f7fe f96d 	bl	80082a8 <__hi0bits>
 8009fce:	f1c6 0620 	rsb	r6, r6, #32
 8009fd2:	42b0      	cmp	r0, r6
 8009fd4:	dbe7      	blt.n	8009fa6 <__gethex+0x3ea>
 8009fd6:	e7f0      	b.n	8009fba <__gethex+0x3fe>
 8009fd8:	0800a978 	.word	0x0800a978

08009fdc <L_shift>:
 8009fdc:	f1c2 0208 	rsb	r2, r2, #8
 8009fe0:	0092      	lsls	r2, r2, #2
 8009fe2:	b570      	push	{r4, r5, r6, lr}
 8009fe4:	f1c2 0620 	rsb	r6, r2, #32
 8009fe8:	6843      	ldr	r3, [r0, #4]
 8009fea:	6804      	ldr	r4, [r0, #0]
 8009fec:	fa03 f506 	lsl.w	r5, r3, r6
 8009ff0:	432c      	orrs	r4, r5
 8009ff2:	40d3      	lsrs	r3, r2
 8009ff4:	6004      	str	r4, [r0, #0]
 8009ff6:	f840 3f04 	str.w	r3, [r0, #4]!
 8009ffa:	4288      	cmp	r0, r1
 8009ffc:	d3f4      	bcc.n	8009fe8 <L_shift+0xc>
 8009ffe:	bd70      	pop	{r4, r5, r6, pc}

0800a000 <__match>:
 800a000:	b530      	push	{r4, r5, lr}
 800a002:	6803      	ldr	r3, [r0, #0]
 800a004:	3301      	adds	r3, #1
 800a006:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a00a:	b914      	cbnz	r4, 800a012 <__match+0x12>
 800a00c:	6003      	str	r3, [r0, #0]
 800a00e:	2001      	movs	r0, #1
 800a010:	bd30      	pop	{r4, r5, pc}
 800a012:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a016:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a01a:	2d19      	cmp	r5, #25
 800a01c:	bf98      	it	ls
 800a01e:	3220      	addls	r2, #32
 800a020:	42a2      	cmp	r2, r4
 800a022:	d0f0      	beq.n	800a006 <__match+0x6>
 800a024:	2000      	movs	r0, #0
 800a026:	e7f3      	b.n	800a010 <__match+0x10>

0800a028 <__hexnan>:
 800a028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a02c:	2500      	movs	r5, #0
 800a02e:	680b      	ldr	r3, [r1, #0]
 800a030:	4682      	mov	sl, r0
 800a032:	115e      	asrs	r6, r3, #5
 800a034:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a038:	f013 031f 	ands.w	r3, r3, #31
 800a03c:	bf18      	it	ne
 800a03e:	3604      	addne	r6, #4
 800a040:	1f37      	subs	r7, r6, #4
 800a042:	4690      	mov	r8, r2
 800a044:	46b9      	mov	r9, r7
 800a046:	463c      	mov	r4, r7
 800a048:	46ab      	mov	fp, r5
 800a04a:	b087      	sub	sp, #28
 800a04c:	6801      	ldr	r1, [r0, #0]
 800a04e:	9301      	str	r3, [sp, #4]
 800a050:	f846 5c04 	str.w	r5, [r6, #-4]
 800a054:	9502      	str	r5, [sp, #8]
 800a056:	784a      	ldrb	r2, [r1, #1]
 800a058:	1c4b      	adds	r3, r1, #1
 800a05a:	9303      	str	r3, [sp, #12]
 800a05c:	b342      	cbz	r2, 800a0b0 <__hexnan+0x88>
 800a05e:	4610      	mov	r0, r2
 800a060:	9105      	str	r1, [sp, #20]
 800a062:	9204      	str	r2, [sp, #16]
 800a064:	f7ff fd95 	bl	8009b92 <__hexdig_fun>
 800a068:	2800      	cmp	r0, #0
 800a06a:	d151      	bne.n	800a110 <__hexnan+0xe8>
 800a06c:	9a04      	ldr	r2, [sp, #16]
 800a06e:	9905      	ldr	r1, [sp, #20]
 800a070:	2a20      	cmp	r2, #32
 800a072:	d818      	bhi.n	800a0a6 <__hexnan+0x7e>
 800a074:	9b02      	ldr	r3, [sp, #8]
 800a076:	459b      	cmp	fp, r3
 800a078:	dd13      	ble.n	800a0a2 <__hexnan+0x7a>
 800a07a:	454c      	cmp	r4, r9
 800a07c:	d206      	bcs.n	800a08c <__hexnan+0x64>
 800a07e:	2d07      	cmp	r5, #7
 800a080:	dc04      	bgt.n	800a08c <__hexnan+0x64>
 800a082:	462a      	mov	r2, r5
 800a084:	4649      	mov	r1, r9
 800a086:	4620      	mov	r0, r4
 800a088:	f7ff ffa8 	bl	8009fdc <L_shift>
 800a08c:	4544      	cmp	r4, r8
 800a08e:	d952      	bls.n	800a136 <__hexnan+0x10e>
 800a090:	2300      	movs	r3, #0
 800a092:	f1a4 0904 	sub.w	r9, r4, #4
 800a096:	f844 3c04 	str.w	r3, [r4, #-4]
 800a09a:	461d      	mov	r5, r3
 800a09c:	464c      	mov	r4, r9
 800a09e:	f8cd b008 	str.w	fp, [sp, #8]
 800a0a2:	9903      	ldr	r1, [sp, #12]
 800a0a4:	e7d7      	b.n	800a056 <__hexnan+0x2e>
 800a0a6:	2a29      	cmp	r2, #41	@ 0x29
 800a0a8:	d157      	bne.n	800a15a <__hexnan+0x132>
 800a0aa:	3102      	adds	r1, #2
 800a0ac:	f8ca 1000 	str.w	r1, [sl]
 800a0b0:	f1bb 0f00 	cmp.w	fp, #0
 800a0b4:	d051      	beq.n	800a15a <__hexnan+0x132>
 800a0b6:	454c      	cmp	r4, r9
 800a0b8:	d206      	bcs.n	800a0c8 <__hexnan+0xa0>
 800a0ba:	2d07      	cmp	r5, #7
 800a0bc:	dc04      	bgt.n	800a0c8 <__hexnan+0xa0>
 800a0be:	462a      	mov	r2, r5
 800a0c0:	4649      	mov	r1, r9
 800a0c2:	4620      	mov	r0, r4
 800a0c4:	f7ff ff8a 	bl	8009fdc <L_shift>
 800a0c8:	4544      	cmp	r4, r8
 800a0ca:	d936      	bls.n	800a13a <__hexnan+0x112>
 800a0cc:	4623      	mov	r3, r4
 800a0ce:	f1a8 0204 	sub.w	r2, r8, #4
 800a0d2:	f853 1b04 	ldr.w	r1, [r3], #4
 800a0d6:	429f      	cmp	r7, r3
 800a0d8:	f842 1f04 	str.w	r1, [r2, #4]!
 800a0dc:	d2f9      	bcs.n	800a0d2 <__hexnan+0xaa>
 800a0de:	1b3b      	subs	r3, r7, r4
 800a0e0:	f023 0303 	bic.w	r3, r3, #3
 800a0e4:	3304      	adds	r3, #4
 800a0e6:	3401      	adds	r4, #1
 800a0e8:	3e03      	subs	r6, #3
 800a0ea:	42b4      	cmp	r4, r6
 800a0ec:	bf88      	it	hi
 800a0ee:	2304      	movhi	r3, #4
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	4443      	add	r3, r8
 800a0f4:	f843 2b04 	str.w	r2, [r3], #4
 800a0f8:	429f      	cmp	r7, r3
 800a0fa:	d2fb      	bcs.n	800a0f4 <__hexnan+0xcc>
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	b91b      	cbnz	r3, 800a108 <__hexnan+0xe0>
 800a100:	4547      	cmp	r7, r8
 800a102:	d128      	bne.n	800a156 <__hexnan+0x12e>
 800a104:	2301      	movs	r3, #1
 800a106:	603b      	str	r3, [r7, #0]
 800a108:	2005      	movs	r0, #5
 800a10a:	b007      	add	sp, #28
 800a10c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a110:	3501      	adds	r5, #1
 800a112:	2d08      	cmp	r5, #8
 800a114:	f10b 0b01 	add.w	fp, fp, #1
 800a118:	dd06      	ble.n	800a128 <__hexnan+0x100>
 800a11a:	4544      	cmp	r4, r8
 800a11c:	d9c1      	bls.n	800a0a2 <__hexnan+0x7a>
 800a11e:	2300      	movs	r3, #0
 800a120:	2501      	movs	r5, #1
 800a122:	f844 3c04 	str.w	r3, [r4, #-4]
 800a126:	3c04      	subs	r4, #4
 800a128:	6822      	ldr	r2, [r4, #0]
 800a12a:	f000 000f 	and.w	r0, r0, #15
 800a12e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a132:	6020      	str	r0, [r4, #0]
 800a134:	e7b5      	b.n	800a0a2 <__hexnan+0x7a>
 800a136:	2508      	movs	r5, #8
 800a138:	e7b3      	b.n	800a0a2 <__hexnan+0x7a>
 800a13a:	9b01      	ldr	r3, [sp, #4]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d0dd      	beq.n	800a0fc <__hexnan+0xd4>
 800a140:	f04f 32ff 	mov.w	r2, #4294967295
 800a144:	f1c3 0320 	rsb	r3, r3, #32
 800a148:	40da      	lsrs	r2, r3
 800a14a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a14e:	4013      	ands	r3, r2
 800a150:	f846 3c04 	str.w	r3, [r6, #-4]
 800a154:	e7d2      	b.n	800a0fc <__hexnan+0xd4>
 800a156:	3f04      	subs	r7, #4
 800a158:	e7d0      	b.n	800a0fc <__hexnan+0xd4>
 800a15a:	2004      	movs	r0, #4
 800a15c:	e7d5      	b.n	800a10a <__hexnan+0xe2>

0800a15e <__ascii_mbtowc>:
 800a15e:	b082      	sub	sp, #8
 800a160:	b901      	cbnz	r1, 800a164 <__ascii_mbtowc+0x6>
 800a162:	a901      	add	r1, sp, #4
 800a164:	b142      	cbz	r2, 800a178 <__ascii_mbtowc+0x1a>
 800a166:	b14b      	cbz	r3, 800a17c <__ascii_mbtowc+0x1e>
 800a168:	7813      	ldrb	r3, [r2, #0]
 800a16a:	600b      	str	r3, [r1, #0]
 800a16c:	7812      	ldrb	r2, [r2, #0]
 800a16e:	1e10      	subs	r0, r2, #0
 800a170:	bf18      	it	ne
 800a172:	2001      	movne	r0, #1
 800a174:	b002      	add	sp, #8
 800a176:	4770      	bx	lr
 800a178:	4610      	mov	r0, r2
 800a17a:	e7fb      	b.n	800a174 <__ascii_mbtowc+0x16>
 800a17c:	f06f 0001 	mvn.w	r0, #1
 800a180:	e7f8      	b.n	800a174 <__ascii_mbtowc+0x16>

0800a182 <_realloc_r>:
 800a182:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a186:	4607      	mov	r7, r0
 800a188:	4614      	mov	r4, r2
 800a18a:	460d      	mov	r5, r1
 800a18c:	b921      	cbnz	r1, 800a198 <_realloc_r+0x16>
 800a18e:	4611      	mov	r1, r2
 800a190:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a194:	f7fd bf0a 	b.w	8007fac <_malloc_r>
 800a198:	b92a      	cbnz	r2, 800a1a6 <_realloc_r+0x24>
 800a19a:	f7fd fe95 	bl	8007ec8 <_free_r>
 800a19e:	4625      	mov	r5, r4
 800a1a0:	4628      	mov	r0, r5
 800a1a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1a6:	f000 f840 	bl	800a22a <_malloc_usable_size_r>
 800a1aa:	4284      	cmp	r4, r0
 800a1ac:	4606      	mov	r6, r0
 800a1ae:	d802      	bhi.n	800a1b6 <_realloc_r+0x34>
 800a1b0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a1b4:	d8f4      	bhi.n	800a1a0 <_realloc_r+0x1e>
 800a1b6:	4621      	mov	r1, r4
 800a1b8:	4638      	mov	r0, r7
 800a1ba:	f7fd fef7 	bl	8007fac <_malloc_r>
 800a1be:	4680      	mov	r8, r0
 800a1c0:	b908      	cbnz	r0, 800a1c6 <_realloc_r+0x44>
 800a1c2:	4645      	mov	r5, r8
 800a1c4:	e7ec      	b.n	800a1a0 <_realloc_r+0x1e>
 800a1c6:	42b4      	cmp	r4, r6
 800a1c8:	4622      	mov	r2, r4
 800a1ca:	4629      	mov	r1, r5
 800a1cc:	bf28      	it	cs
 800a1ce:	4632      	movcs	r2, r6
 800a1d0:	f7fd f809 	bl	80071e6 <memcpy>
 800a1d4:	4629      	mov	r1, r5
 800a1d6:	4638      	mov	r0, r7
 800a1d8:	f7fd fe76 	bl	8007ec8 <_free_r>
 800a1dc:	e7f1      	b.n	800a1c2 <_realloc_r+0x40>

0800a1de <__ascii_wctomb>:
 800a1de:	4603      	mov	r3, r0
 800a1e0:	4608      	mov	r0, r1
 800a1e2:	b141      	cbz	r1, 800a1f6 <__ascii_wctomb+0x18>
 800a1e4:	2aff      	cmp	r2, #255	@ 0xff
 800a1e6:	d904      	bls.n	800a1f2 <__ascii_wctomb+0x14>
 800a1e8:	228a      	movs	r2, #138	@ 0x8a
 800a1ea:	f04f 30ff 	mov.w	r0, #4294967295
 800a1ee:	601a      	str	r2, [r3, #0]
 800a1f0:	4770      	bx	lr
 800a1f2:	2001      	movs	r0, #1
 800a1f4:	700a      	strb	r2, [r1, #0]
 800a1f6:	4770      	bx	lr

0800a1f8 <fiprintf>:
 800a1f8:	b40e      	push	{r1, r2, r3}
 800a1fa:	b503      	push	{r0, r1, lr}
 800a1fc:	4601      	mov	r1, r0
 800a1fe:	ab03      	add	r3, sp, #12
 800a200:	4805      	ldr	r0, [pc, #20]	@ (800a218 <fiprintf+0x20>)
 800a202:	f853 2b04 	ldr.w	r2, [r3], #4
 800a206:	6800      	ldr	r0, [r0, #0]
 800a208:	9301      	str	r3, [sp, #4]
 800a20a:	f000 f83d 	bl	800a288 <_vfiprintf_r>
 800a20e:	b002      	add	sp, #8
 800a210:	f85d eb04 	ldr.w	lr, [sp], #4
 800a214:	b003      	add	sp, #12
 800a216:	4770      	bx	lr
 800a218:	20000018 	.word	0x20000018

0800a21c <abort>:
 800a21c:	2006      	movs	r0, #6
 800a21e:	b508      	push	{r3, lr}
 800a220:	f000 fa06 	bl	800a630 <raise>
 800a224:	2001      	movs	r0, #1
 800a226:	f7f7 fcaa 	bl	8001b7e <_exit>

0800a22a <_malloc_usable_size_r>:
 800a22a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a22e:	1f18      	subs	r0, r3, #4
 800a230:	2b00      	cmp	r3, #0
 800a232:	bfbc      	itt	lt
 800a234:	580b      	ldrlt	r3, [r1, r0]
 800a236:	18c0      	addlt	r0, r0, r3
 800a238:	4770      	bx	lr

0800a23a <__sfputc_r>:
 800a23a:	6893      	ldr	r3, [r2, #8]
 800a23c:	b410      	push	{r4}
 800a23e:	3b01      	subs	r3, #1
 800a240:	2b00      	cmp	r3, #0
 800a242:	6093      	str	r3, [r2, #8]
 800a244:	da07      	bge.n	800a256 <__sfputc_r+0x1c>
 800a246:	6994      	ldr	r4, [r2, #24]
 800a248:	42a3      	cmp	r3, r4
 800a24a:	db01      	blt.n	800a250 <__sfputc_r+0x16>
 800a24c:	290a      	cmp	r1, #10
 800a24e:	d102      	bne.n	800a256 <__sfputc_r+0x1c>
 800a250:	bc10      	pop	{r4}
 800a252:	f000 b931 	b.w	800a4b8 <__swbuf_r>
 800a256:	6813      	ldr	r3, [r2, #0]
 800a258:	1c58      	adds	r0, r3, #1
 800a25a:	6010      	str	r0, [r2, #0]
 800a25c:	7019      	strb	r1, [r3, #0]
 800a25e:	4608      	mov	r0, r1
 800a260:	bc10      	pop	{r4}
 800a262:	4770      	bx	lr

0800a264 <__sfputs_r>:
 800a264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a266:	4606      	mov	r6, r0
 800a268:	460f      	mov	r7, r1
 800a26a:	4614      	mov	r4, r2
 800a26c:	18d5      	adds	r5, r2, r3
 800a26e:	42ac      	cmp	r4, r5
 800a270:	d101      	bne.n	800a276 <__sfputs_r+0x12>
 800a272:	2000      	movs	r0, #0
 800a274:	e007      	b.n	800a286 <__sfputs_r+0x22>
 800a276:	463a      	mov	r2, r7
 800a278:	4630      	mov	r0, r6
 800a27a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a27e:	f7ff ffdc 	bl	800a23a <__sfputc_r>
 800a282:	1c43      	adds	r3, r0, #1
 800a284:	d1f3      	bne.n	800a26e <__sfputs_r+0xa>
 800a286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a288 <_vfiprintf_r>:
 800a288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a28c:	460d      	mov	r5, r1
 800a28e:	4614      	mov	r4, r2
 800a290:	4698      	mov	r8, r3
 800a292:	4606      	mov	r6, r0
 800a294:	b09d      	sub	sp, #116	@ 0x74
 800a296:	b118      	cbz	r0, 800a2a0 <_vfiprintf_r+0x18>
 800a298:	6a03      	ldr	r3, [r0, #32]
 800a29a:	b90b      	cbnz	r3, 800a2a0 <_vfiprintf_r+0x18>
 800a29c:	f7fc fe7a 	bl	8006f94 <__sinit>
 800a2a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a2a2:	07d9      	lsls	r1, r3, #31
 800a2a4:	d405      	bmi.n	800a2b2 <_vfiprintf_r+0x2a>
 800a2a6:	89ab      	ldrh	r3, [r5, #12]
 800a2a8:	059a      	lsls	r2, r3, #22
 800a2aa:	d402      	bmi.n	800a2b2 <_vfiprintf_r+0x2a>
 800a2ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a2ae:	f7fc ff8a 	bl	80071c6 <__retarget_lock_acquire_recursive>
 800a2b2:	89ab      	ldrh	r3, [r5, #12]
 800a2b4:	071b      	lsls	r3, r3, #28
 800a2b6:	d501      	bpl.n	800a2bc <_vfiprintf_r+0x34>
 800a2b8:	692b      	ldr	r3, [r5, #16]
 800a2ba:	b99b      	cbnz	r3, 800a2e4 <_vfiprintf_r+0x5c>
 800a2bc:	4629      	mov	r1, r5
 800a2be:	4630      	mov	r0, r6
 800a2c0:	f000 f938 	bl	800a534 <__swsetup_r>
 800a2c4:	b170      	cbz	r0, 800a2e4 <_vfiprintf_r+0x5c>
 800a2c6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a2c8:	07dc      	lsls	r4, r3, #31
 800a2ca:	d504      	bpl.n	800a2d6 <_vfiprintf_r+0x4e>
 800a2cc:	f04f 30ff 	mov.w	r0, #4294967295
 800a2d0:	b01d      	add	sp, #116	@ 0x74
 800a2d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2d6:	89ab      	ldrh	r3, [r5, #12]
 800a2d8:	0598      	lsls	r0, r3, #22
 800a2da:	d4f7      	bmi.n	800a2cc <_vfiprintf_r+0x44>
 800a2dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a2de:	f7fc ff73 	bl	80071c8 <__retarget_lock_release_recursive>
 800a2e2:	e7f3      	b.n	800a2cc <_vfiprintf_r+0x44>
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	9309      	str	r3, [sp, #36]	@ 0x24
 800a2e8:	2320      	movs	r3, #32
 800a2ea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a2ee:	2330      	movs	r3, #48	@ 0x30
 800a2f0:	f04f 0901 	mov.w	r9, #1
 800a2f4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a2f8:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800a4a4 <_vfiprintf_r+0x21c>
 800a2fc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a300:	4623      	mov	r3, r4
 800a302:	469a      	mov	sl, r3
 800a304:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a308:	b10a      	cbz	r2, 800a30e <_vfiprintf_r+0x86>
 800a30a:	2a25      	cmp	r2, #37	@ 0x25
 800a30c:	d1f9      	bne.n	800a302 <_vfiprintf_r+0x7a>
 800a30e:	ebba 0b04 	subs.w	fp, sl, r4
 800a312:	d00b      	beq.n	800a32c <_vfiprintf_r+0xa4>
 800a314:	465b      	mov	r3, fp
 800a316:	4622      	mov	r2, r4
 800a318:	4629      	mov	r1, r5
 800a31a:	4630      	mov	r0, r6
 800a31c:	f7ff ffa2 	bl	800a264 <__sfputs_r>
 800a320:	3001      	adds	r0, #1
 800a322:	f000 80a7 	beq.w	800a474 <_vfiprintf_r+0x1ec>
 800a326:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a328:	445a      	add	r2, fp
 800a32a:	9209      	str	r2, [sp, #36]	@ 0x24
 800a32c:	f89a 3000 	ldrb.w	r3, [sl]
 800a330:	2b00      	cmp	r3, #0
 800a332:	f000 809f 	beq.w	800a474 <_vfiprintf_r+0x1ec>
 800a336:	2300      	movs	r3, #0
 800a338:	f04f 32ff 	mov.w	r2, #4294967295
 800a33c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a340:	f10a 0a01 	add.w	sl, sl, #1
 800a344:	9304      	str	r3, [sp, #16]
 800a346:	9307      	str	r3, [sp, #28]
 800a348:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a34c:	931a      	str	r3, [sp, #104]	@ 0x68
 800a34e:	4654      	mov	r4, sl
 800a350:	2205      	movs	r2, #5
 800a352:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a356:	4853      	ldr	r0, [pc, #332]	@ (800a4a4 <_vfiprintf_r+0x21c>)
 800a358:	f7fc ff37 	bl	80071ca <memchr>
 800a35c:	9a04      	ldr	r2, [sp, #16]
 800a35e:	b9d8      	cbnz	r0, 800a398 <_vfiprintf_r+0x110>
 800a360:	06d1      	lsls	r1, r2, #27
 800a362:	bf44      	itt	mi
 800a364:	2320      	movmi	r3, #32
 800a366:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a36a:	0713      	lsls	r3, r2, #28
 800a36c:	bf44      	itt	mi
 800a36e:	232b      	movmi	r3, #43	@ 0x2b
 800a370:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a374:	f89a 3000 	ldrb.w	r3, [sl]
 800a378:	2b2a      	cmp	r3, #42	@ 0x2a
 800a37a:	d015      	beq.n	800a3a8 <_vfiprintf_r+0x120>
 800a37c:	4654      	mov	r4, sl
 800a37e:	2000      	movs	r0, #0
 800a380:	f04f 0c0a 	mov.w	ip, #10
 800a384:	9a07      	ldr	r2, [sp, #28]
 800a386:	4621      	mov	r1, r4
 800a388:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a38c:	3b30      	subs	r3, #48	@ 0x30
 800a38e:	2b09      	cmp	r3, #9
 800a390:	d94b      	bls.n	800a42a <_vfiprintf_r+0x1a2>
 800a392:	b1b0      	cbz	r0, 800a3c2 <_vfiprintf_r+0x13a>
 800a394:	9207      	str	r2, [sp, #28]
 800a396:	e014      	b.n	800a3c2 <_vfiprintf_r+0x13a>
 800a398:	eba0 0308 	sub.w	r3, r0, r8
 800a39c:	fa09 f303 	lsl.w	r3, r9, r3
 800a3a0:	4313      	orrs	r3, r2
 800a3a2:	46a2      	mov	sl, r4
 800a3a4:	9304      	str	r3, [sp, #16]
 800a3a6:	e7d2      	b.n	800a34e <_vfiprintf_r+0xc6>
 800a3a8:	9b03      	ldr	r3, [sp, #12]
 800a3aa:	1d19      	adds	r1, r3, #4
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	9103      	str	r1, [sp, #12]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	bfbb      	ittet	lt
 800a3b4:	425b      	neglt	r3, r3
 800a3b6:	f042 0202 	orrlt.w	r2, r2, #2
 800a3ba:	9307      	strge	r3, [sp, #28]
 800a3bc:	9307      	strlt	r3, [sp, #28]
 800a3be:	bfb8      	it	lt
 800a3c0:	9204      	strlt	r2, [sp, #16]
 800a3c2:	7823      	ldrb	r3, [r4, #0]
 800a3c4:	2b2e      	cmp	r3, #46	@ 0x2e
 800a3c6:	d10a      	bne.n	800a3de <_vfiprintf_r+0x156>
 800a3c8:	7863      	ldrb	r3, [r4, #1]
 800a3ca:	2b2a      	cmp	r3, #42	@ 0x2a
 800a3cc:	d132      	bne.n	800a434 <_vfiprintf_r+0x1ac>
 800a3ce:	9b03      	ldr	r3, [sp, #12]
 800a3d0:	3402      	adds	r4, #2
 800a3d2:	1d1a      	adds	r2, r3, #4
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	9203      	str	r2, [sp, #12]
 800a3d8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a3dc:	9305      	str	r3, [sp, #20]
 800a3de:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800a4a8 <_vfiprintf_r+0x220>
 800a3e2:	2203      	movs	r2, #3
 800a3e4:	4650      	mov	r0, sl
 800a3e6:	7821      	ldrb	r1, [r4, #0]
 800a3e8:	f7fc feef 	bl	80071ca <memchr>
 800a3ec:	b138      	cbz	r0, 800a3fe <_vfiprintf_r+0x176>
 800a3ee:	2240      	movs	r2, #64	@ 0x40
 800a3f0:	9b04      	ldr	r3, [sp, #16]
 800a3f2:	eba0 000a 	sub.w	r0, r0, sl
 800a3f6:	4082      	lsls	r2, r0
 800a3f8:	4313      	orrs	r3, r2
 800a3fa:	3401      	adds	r4, #1
 800a3fc:	9304      	str	r3, [sp, #16]
 800a3fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a402:	2206      	movs	r2, #6
 800a404:	4829      	ldr	r0, [pc, #164]	@ (800a4ac <_vfiprintf_r+0x224>)
 800a406:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a40a:	f7fc fede 	bl	80071ca <memchr>
 800a40e:	2800      	cmp	r0, #0
 800a410:	d03f      	beq.n	800a492 <_vfiprintf_r+0x20a>
 800a412:	4b27      	ldr	r3, [pc, #156]	@ (800a4b0 <_vfiprintf_r+0x228>)
 800a414:	bb1b      	cbnz	r3, 800a45e <_vfiprintf_r+0x1d6>
 800a416:	9b03      	ldr	r3, [sp, #12]
 800a418:	3307      	adds	r3, #7
 800a41a:	f023 0307 	bic.w	r3, r3, #7
 800a41e:	3308      	adds	r3, #8
 800a420:	9303      	str	r3, [sp, #12]
 800a422:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a424:	443b      	add	r3, r7
 800a426:	9309      	str	r3, [sp, #36]	@ 0x24
 800a428:	e76a      	b.n	800a300 <_vfiprintf_r+0x78>
 800a42a:	460c      	mov	r4, r1
 800a42c:	2001      	movs	r0, #1
 800a42e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a432:	e7a8      	b.n	800a386 <_vfiprintf_r+0xfe>
 800a434:	2300      	movs	r3, #0
 800a436:	f04f 0c0a 	mov.w	ip, #10
 800a43a:	4619      	mov	r1, r3
 800a43c:	3401      	adds	r4, #1
 800a43e:	9305      	str	r3, [sp, #20]
 800a440:	4620      	mov	r0, r4
 800a442:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a446:	3a30      	subs	r2, #48	@ 0x30
 800a448:	2a09      	cmp	r2, #9
 800a44a:	d903      	bls.n	800a454 <_vfiprintf_r+0x1cc>
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d0c6      	beq.n	800a3de <_vfiprintf_r+0x156>
 800a450:	9105      	str	r1, [sp, #20]
 800a452:	e7c4      	b.n	800a3de <_vfiprintf_r+0x156>
 800a454:	4604      	mov	r4, r0
 800a456:	2301      	movs	r3, #1
 800a458:	fb0c 2101 	mla	r1, ip, r1, r2
 800a45c:	e7f0      	b.n	800a440 <_vfiprintf_r+0x1b8>
 800a45e:	ab03      	add	r3, sp, #12
 800a460:	9300      	str	r3, [sp, #0]
 800a462:	462a      	mov	r2, r5
 800a464:	4630      	mov	r0, r6
 800a466:	4b13      	ldr	r3, [pc, #76]	@ (800a4b4 <_vfiprintf_r+0x22c>)
 800a468:	a904      	add	r1, sp, #16
 800a46a:	f7fb ff41 	bl	80062f0 <_printf_float>
 800a46e:	4607      	mov	r7, r0
 800a470:	1c78      	adds	r0, r7, #1
 800a472:	d1d6      	bne.n	800a422 <_vfiprintf_r+0x19a>
 800a474:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a476:	07d9      	lsls	r1, r3, #31
 800a478:	d405      	bmi.n	800a486 <_vfiprintf_r+0x1fe>
 800a47a:	89ab      	ldrh	r3, [r5, #12]
 800a47c:	059a      	lsls	r2, r3, #22
 800a47e:	d402      	bmi.n	800a486 <_vfiprintf_r+0x1fe>
 800a480:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a482:	f7fc fea1 	bl	80071c8 <__retarget_lock_release_recursive>
 800a486:	89ab      	ldrh	r3, [r5, #12]
 800a488:	065b      	lsls	r3, r3, #25
 800a48a:	f53f af1f 	bmi.w	800a2cc <_vfiprintf_r+0x44>
 800a48e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a490:	e71e      	b.n	800a2d0 <_vfiprintf_r+0x48>
 800a492:	ab03      	add	r3, sp, #12
 800a494:	9300      	str	r3, [sp, #0]
 800a496:	462a      	mov	r2, r5
 800a498:	4630      	mov	r0, r6
 800a49a:	4b06      	ldr	r3, [pc, #24]	@ (800a4b4 <_vfiprintf_r+0x22c>)
 800a49c:	a904      	add	r1, sp, #16
 800a49e:	f7fc f9c5 	bl	800682c <_printf_i>
 800a4a2:	e7e4      	b.n	800a46e <_vfiprintf_r+0x1e6>
 800a4a4:	0800a9e4 	.word	0x0800a9e4
 800a4a8:	0800a9ea 	.word	0x0800a9ea
 800a4ac:	0800a9ee 	.word	0x0800a9ee
 800a4b0:	080062f1 	.word	0x080062f1
 800a4b4:	0800a265 	.word	0x0800a265

0800a4b8 <__swbuf_r>:
 800a4b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4ba:	460e      	mov	r6, r1
 800a4bc:	4614      	mov	r4, r2
 800a4be:	4605      	mov	r5, r0
 800a4c0:	b118      	cbz	r0, 800a4ca <__swbuf_r+0x12>
 800a4c2:	6a03      	ldr	r3, [r0, #32]
 800a4c4:	b90b      	cbnz	r3, 800a4ca <__swbuf_r+0x12>
 800a4c6:	f7fc fd65 	bl	8006f94 <__sinit>
 800a4ca:	69a3      	ldr	r3, [r4, #24]
 800a4cc:	60a3      	str	r3, [r4, #8]
 800a4ce:	89a3      	ldrh	r3, [r4, #12]
 800a4d0:	071a      	lsls	r2, r3, #28
 800a4d2:	d501      	bpl.n	800a4d8 <__swbuf_r+0x20>
 800a4d4:	6923      	ldr	r3, [r4, #16]
 800a4d6:	b943      	cbnz	r3, 800a4ea <__swbuf_r+0x32>
 800a4d8:	4621      	mov	r1, r4
 800a4da:	4628      	mov	r0, r5
 800a4dc:	f000 f82a 	bl	800a534 <__swsetup_r>
 800a4e0:	b118      	cbz	r0, 800a4ea <__swbuf_r+0x32>
 800a4e2:	f04f 37ff 	mov.w	r7, #4294967295
 800a4e6:	4638      	mov	r0, r7
 800a4e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4ea:	6823      	ldr	r3, [r4, #0]
 800a4ec:	6922      	ldr	r2, [r4, #16]
 800a4ee:	b2f6      	uxtb	r6, r6
 800a4f0:	1a98      	subs	r0, r3, r2
 800a4f2:	6963      	ldr	r3, [r4, #20]
 800a4f4:	4637      	mov	r7, r6
 800a4f6:	4283      	cmp	r3, r0
 800a4f8:	dc05      	bgt.n	800a506 <__swbuf_r+0x4e>
 800a4fa:	4621      	mov	r1, r4
 800a4fc:	4628      	mov	r0, r5
 800a4fe:	f7ff fa59 	bl	80099b4 <_fflush_r>
 800a502:	2800      	cmp	r0, #0
 800a504:	d1ed      	bne.n	800a4e2 <__swbuf_r+0x2a>
 800a506:	68a3      	ldr	r3, [r4, #8]
 800a508:	3b01      	subs	r3, #1
 800a50a:	60a3      	str	r3, [r4, #8]
 800a50c:	6823      	ldr	r3, [r4, #0]
 800a50e:	1c5a      	adds	r2, r3, #1
 800a510:	6022      	str	r2, [r4, #0]
 800a512:	701e      	strb	r6, [r3, #0]
 800a514:	6962      	ldr	r2, [r4, #20]
 800a516:	1c43      	adds	r3, r0, #1
 800a518:	429a      	cmp	r2, r3
 800a51a:	d004      	beq.n	800a526 <__swbuf_r+0x6e>
 800a51c:	89a3      	ldrh	r3, [r4, #12]
 800a51e:	07db      	lsls	r3, r3, #31
 800a520:	d5e1      	bpl.n	800a4e6 <__swbuf_r+0x2e>
 800a522:	2e0a      	cmp	r6, #10
 800a524:	d1df      	bne.n	800a4e6 <__swbuf_r+0x2e>
 800a526:	4621      	mov	r1, r4
 800a528:	4628      	mov	r0, r5
 800a52a:	f7ff fa43 	bl	80099b4 <_fflush_r>
 800a52e:	2800      	cmp	r0, #0
 800a530:	d0d9      	beq.n	800a4e6 <__swbuf_r+0x2e>
 800a532:	e7d6      	b.n	800a4e2 <__swbuf_r+0x2a>

0800a534 <__swsetup_r>:
 800a534:	b538      	push	{r3, r4, r5, lr}
 800a536:	4b29      	ldr	r3, [pc, #164]	@ (800a5dc <__swsetup_r+0xa8>)
 800a538:	4605      	mov	r5, r0
 800a53a:	6818      	ldr	r0, [r3, #0]
 800a53c:	460c      	mov	r4, r1
 800a53e:	b118      	cbz	r0, 800a548 <__swsetup_r+0x14>
 800a540:	6a03      	ldr	r3, [r0, #32]
 800a542:	b90b      	cbnz	r3, 800a548 <__swsetup_r+0x14>
 800a544:	f7fc fd26 	bl	8006f94 <__sinit>
 800a548:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a54c:	0719      	lsls	r1, r3, #28
 800a54e:	d422      	bmi.n	800a596 <__swsetup_r+0x62>
 800a550:	06da      	lsls	r2, r3, #27
 800a552:	d407      	bmi.n	800a564 <__swsetup_r+0x30>
 800a554:	2209      	movs	r2, #9
 800a556:	602a      	str	r2, [r5, #0]
 800a558:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a55c:	f04f 30ff 	mov.w	r0, #4294967295
 800a560:	81a3      	strh	r3, [r4, #12]
 800a562:	e033      	b.n	800a5cc <__swsetup_r+0x98>
 800a564:	0758      	lsls	r0, r3, #29
 800a566:	d512      	bpl.n	800a58e <__swsetup_r+0x5a>
 800a568:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a56a:	b141      	cbz	r1, 800a57e <__swsetup_r+0x4a>
 800a56c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a570:	4299      	cmp	r1, r3
 800a572:	d002      	beq.n	800a57a <__swsetup_r+0x46>
 800a574:	4628      	mov	r0, r5
 800a576:	f7fd fca7 	bl	8007ec8 <_free_r>
 800a57a:	2300      	movs	r3, #0
 800a57c:	6363      	str	r3, [r4, #52]	@ 0x34
 800a57e:	89a3      	ldrh	r3, [r4, #12]
 800a580:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a584:	81a3      	strh	r3, [r4, #12]
 800a586:	2300      	movs	r3, #0
 800a588:	6063      	str	r3, [r4, #4]
 800a58a:	6923      	ldr	r3, [r4, #16]
 800a58c:	6023      	str	r3, [r4, #0]
 800a58e:	89a3      	ldrh	r3, [r4, #12]
 800a590:	f043 0308 	orr.w	r3, r3, #8
 800a594:	81a3      	strh	r3, [r4, #12]
 800a596:	6923      	ldr	r3, [r4, #16]
 800a598:	b94b      	cbnz	r3, 800a5ae <__swsetup_r+0x7a>
 800a59a:	89a3      	ldrh	r3, [r4, #12]
 800a59c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a5a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a5a4:	d003      	beq.n	800a5ae <__swsetup_r+0x7a>
 800a5a6:	4621      	mov	r1, r4
 800a5a8:	4628      	mov	r0, r5
 800a5aa:	f000 f882 	bl	800a6b2 <__smakebuf_r>
 800a5ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5b2:	f013 0201 	ands.w	r2, r3, #1
 800a5b6:	d00a      	beq.n	800a5ce <__swsetup_r+0x9a>
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	60a2      	str	r2, [r4, #8]
 800a5bc:	6962      	ldr	r2, [r4, #20]
 800a5be:	4252      	negs	r2, r2
 800a5c0:	61a2      	str	r2, [r4, #24]
 800a5c2:	6922      	ldr	r2, [r4, #16]
 800a5c4:	b942      	cbnz	r2, 800a5d8 <__swsetup_r+0xa4>
 800a5c6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a5ca:	d1c5      	bne.n	800a558 <__swsetup_r+0x24>
 800a5cc:	bd38      	pop	{r3, r4, r5, pc}
 800a5ce:	0799      	lsls	r1, r3, #30
 800a5d0:	bf58      	it	pl
 800a5d2:	6962      	ldrpl	r2, [r4, #20]
 800a5d4:	60a2      	str	r2, [r4, #8]
 800a5d6:	e7f4      	b.n	800a5c2 <__swsetup_r+0x8e>
 800a5d8:	2000      	movs	r0, #0
 800a5da:	e7f7      	b.n	800a5cc <__swsetup_r+0x98>
 800a5dc:	20000018 	.word	0x20000018

0800a5e0 <_raise_r>:
 800a5e0:	291f      	cmp	r1, #31
 800a5e2:	b538      	push	{r3, r4, r5, lr}
 800a5e4:	4605      	mov	r5, r0
 800a5e6:	460c      	mov	r4, r1
 800a5e8:	d904      	bls.n	800a5f4 <_raise_r+0x14>
 800a5ea:	2316      	movs	r3, #22
 800a5ec:	6003      	str	r3, [r0, #0]
 800a5ee:	f04f 30ff 	mov.w	r0, #4294967295
 800a5f2:	bd38      	pop	{r3, r4, r5, pc}
 800a5f4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a5f6:	b112      	cbz	r2, 800a5fe <_raise_r+0x1e>
 800a5f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a5fc:	b94b      	cbnz	r3, 800a612 <_raise_r+0x32>
 800a5fe:	4628      	mov	r0, r5
 800a600:	f000 f830 	bl	800a664 <_getpid_r>
 800a604:	4622      	mov	r2, r4
 800a606:	4601      	mov	r1, r0
 800a608:	4628      	mov	r0, r5
 800a60a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a60e:	f000 b817 	b.w	800a640 <_kill_r>
 800a612:	2b01      	cmp	r3, #1
 800a614:	d00a      	beq.n	800a62c <_raise_r+0x4c>
 800a616:	1c59      	adds	r1, r3, #1
 800a618:	d103      	bne.n	800a622 <_raise_r+0x42>
 800a61a:	2316      	movs	r3, #22
 800a61c:	6003      	str	r3, [r0, #0]
 800a61e:	2001      	movs	r0, #1
 800a620:	e7e7      	b.n	800a5f2 <_raise_r+0x12>
 800a622:	2100      	movs	r1, #0
 800a624:	4620      	mov	r0, r4
 800a626:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a62a:	4798      	blx	r3
 800a62c:	2000      	movs	r0, #0
 800a62e:	e7e0      	b.n	800a5f2 <_raise_r+0x12>

0800a630 <raise>:
 800a630:	4b02      	ldr	r3, [pc, #8]	@ (800a63c <raise+0xc>)
 800a632:	4601      	mov	r1, r0
 800a634:	6818      	ldr	r0, [r3, #0]
 800a636:	f7ff bfd3 	b.w	800a5e0 <_raise_r>
 800a63a:	bf00      	nop
 800a63c:	20000018 	.word	0x20000018

0800a640 <_kill_r>:
 800a640:	b538      	push	{r3, r4, r5, lr}
 800a642:	2300      	movs	r3, #0
 800a644:	4d06      	ldr	r5, [pc, #24]	@ (800a660 <_kill_r+0x20>)
 800a646:	4604      	mov	r4, r0
 800a648:	4608      	mov	r0, r1
 800a64a:	4611      	mov	r1, r2
 800a64c:	602b      	str	r3, [r5, #0]
 800a64e:	f7f7 fa86 	bl	8001b5e <_kill>
 800a652:	1c43      	adds	r3, r0, #1
 800a654:	d102      	bne.n	800a65c <_kill_r+0x1c>
 800a656:	682b      	ldr	r3, [r5, #0]
 800a658:	b103      	cbz	r3, 800a65c <_kill_r+0x1c>
 800a65a:	6023      	str	r3, [r4, #0]
 800a65c:	bd38      	pop	{r3, r4, r5, pc}
 800a65e:	bf00      	nop
 800a660:	20000be4 	.word	0x20000be4

0800a664 <_getpid_r>:
 800a664:	f7f7 ba74 	b.w	8001b50 <_getpid>

0800a668 <__swhatbuf_r>:
 800a668:	b570      	push	{r4, r5, r6, lr}
 800a66a:	460c      	mov	r4, r1
 800a66c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a670:	4615      	mov	r5, r2
 800a672:	2900      	cmp	r1, #0
 800a674:	461e      	mov	r6, r3
 800a676:	b096      	sub	sp, #88	@ 0x58
 800a678:	da0c      	bge.n	800a694 <__swhatbuf_r+0x2c>
 800a67a:	89a3      	ldrh	r3, [r4, #12]
 800a67c:	2100      	movs	r1, #0
 800a67e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a682:	bf14      	ite	ne
 800a684:	2340      	movne	r3, #64	@ 0x40
 800a686:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a68a:	2000      	movs	r0, #0
 800a68c:	6031      	str	r1, [r6, #0]
 800a68e:	602b      	str	r3, [r5, #0]
 800a690:	b016      	add	sp, #88	@ 0x58
 800a692:	bd70      	pop	{r4, r5, r6, pc}
 800a694:	466a      	mov	r2, sp
 800a696:	f000 f849 	bl	800a72c <_fstat_r>
 800a69a:	2800      	cmp	r0, #0
 800a69c:	dbed      	blt.n	800a67a <__swhatbuf_r+0x12>
 800a69e:	9901      	ldr	r1, [sp, #4]
 800a6a0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a6a4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a6a8:	4259      	negs	r1, r3
 800a6aa:	4159      	adcs	r1, r3
 800a6ac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a6b0:	e7eb      	b.n	800a68a <__swhatbuf_r+0x22>

0800a6b2 <__smakebuf_r>:
 800a6b2:	898b      	ldrh	r3, [r1, #12]
 800a6b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a6b6:	079d      	lsls	r5, r3, #30
 800a6b8:	4606      	mov	r6, r0
 800a6ba:	460c      	mov	r4, r1
 800a6bc:	d507      	bpl.n	800a6ce <__smakebuf_r+0x1c>
 800a6be:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a6c2:	6023      	str	r3, [r4, #0]
 800a6c4:	6123      	str	r3, [r4, #16]
 800a6c6:	2301      	movs	r3, #1
 800a6c8:	6163      	str	r3, [r4, #20]
 800a6ca:	b003      	add	sp, #12
 800a6cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6ce:	466a      	mov	r2, sp
 800a6d0:	ab01      	add	r3, sp, #4
 800a6d2:	f7ff ffc9 	bl	800a668 <__swhatbuf_r>
 800a6d6:	9f00      	ldr	r7, [sp, #0]
 800a6d8:	4605      	mov	r5, r0
 800a6da:	4639      	mov	r1, r7
 800a6dc:	4630      	mov	r0, r6
 800a6de:	f7fd fc65 	bl	8007fac <_malloc_r>
 800a6e2:	b948      	cbnz	r0, 800a6f8 <__smakebuf_r+0x46>
 800a6e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6e8:	059a      	lsls	r2, r3, #22
 800a6ea:	d4ee      	bmi.n	800a6ca <__smakebuf_r+0x18>
 800a6ec:	f023 0303 	bic.w	r3, r3, #3
 800a6f0:	f043 0302 	orr.w	r3, r3, #2
 800a6f4:	81a3      	strh	r3, [r4, #12]
 800a6f6:	e7e2      	b.n	800a6be <__smakebuf_r+0xc>
 800a6f8:	89a3      	ldrh	r3, [r4, #12]
 800a6fa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a6fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a702:	81a3      	strh	r3, [r4, #12]
 800a704:	9b01      	ldr	r3, [sp, #4]
 800a706:	6020      	str	r0, [r4, #0]
 800a708:	b15b      	cbz	r3, 800a722 <__smakebuf_r+0x70>
 800a70a:	4630      	mov	r0, r6
 800a70c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a710:	f000 f81e 	bl	800a750 <_isatty_r>
 800a714:	b128      	cbz	r0, 800a722 <__smakebuf_r+0x70>
 800a716:	89a3      	ldrh	r3, [r4, #12]
 800a718:	f023 0303 	bic.w	r3, r3, #3
 800a71c:	f043 0301 	orr.w	r3, r3, #1
 800a720:	81a3      	strh	r3, [r4, #12]
 800a722:	89a3      	ldrh	r3, [r4, #12]
 800a724:	431d      	orrs	r5, r3
 800a726:	81a5      	strh	r5, [r4, #12]
 800a728:	e7cf      	b.n	800a6ca <__smakebuf_r+0x18>
	...

0800a72c <_fstat_r>:
 800a72c:	b538      	push	{r3, r4, r5, lr}
 800a72e:	2300      	movs	r3, #0
 800a730:	4d06      	ldr	r5, [pc, #24]	@ (800a74c <_fstat_r+0x20>)
 800a732:	4604      	mov	r4, r0
 800a734:	4608      	mov	r0, r1
 800a736:	4611      	mov	r1, r2
 800a738:	602b      	str	r3, [r5, #0]
 800a73a:	f7f7 fa6f 	bl	8001c1c <_fstat>
 800a73e:	1c43      	adds	r3, r0, #1
 800a740:	d102      	bne.n	800a748 <_fstat_r+0x1c>
 800a742:	682b      	ldr	r3, [r5, #0]
 800a744:	b103      	cbz	r3, 800a748 <_fstat_r+0x1c>
 800a746:	6023      	str	r3, [r4, #0]
 800a748:	bd38      	pop	{r3, r4, r5, pc}
 800a74a:	bf00      	nop
 800a74c:	20000be4 	.word	0x20000be4

0800a750 <_isatty_r>:
 800a750:	b538      	push	{r3, r4, r5, lr}
 800a752:	2300      	movs	r3, #0
 800a754:	4d05      	ldr	r5, [pc, #20]	@ (800a76c <_isatty_r+0x1c>)
 800a756:	4604      	mov	r4, r0
 800a758:	4608      	mov	r0, r1
 800a75a:	602b      	str	r3, [r5, #0]
 800a75c:	f7f7 fa6d 	bl	8001c3a <_isatty>
 800a760:	1c43      	adds	r3, r0, #1
 800a762:	d102      	bne.n	800a76a <_isatty_r+0x1a>
 800a764:	682b      	ldr	r3, [r5, #0]
 800a766:	b103      	cbz	r3, 800a76a <_isatty_r+0x1a>
 800a768:	6023      	str	r3, [r4, #0]
 800a76a:	bd38      	pop	{r3, r4, r5, pc}
 800a76c:	20000be4 	.word	0x20000be4

0800a770 <_init>:
 800a770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a772:	bf00      	nop
 800a774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a776:	bc08      	pop	{r3}
 800a778:	469e      	mov	lr, r3
 800a77a:	4770      	bx	lr

0800a77c <_fini>:
 800a77c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a77e:	bf00      	nop
 800a780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a782:	bc08      	pop	{r3}
 800a784:	469e      	mov	lr, r3
 800a786:	4770      	bx	lr
